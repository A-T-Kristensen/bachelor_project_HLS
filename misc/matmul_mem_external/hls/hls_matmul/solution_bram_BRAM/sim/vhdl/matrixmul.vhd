-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC;
    a_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_EN_A : OUT STD_LOGIC;
    a_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_2_Clk_A : OUT STD_LOGIC;
    a_2_Rst_A : OUT STD_LOGIC;
    a_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_EN_A : OUT STD_LOGIC;
    a_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_3_Clk_A : OUT STD_LOGIC;
    a_3_Rst_A : OUT STD_LOGIC;
    a_4_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_4_EN_A : OUT STD_LOGIC;
    a_4_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_4_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_4_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_4_Clk_A : OUT STD_LOGIC;
    a_4_Rst_A : OUT STD_LOGIC;
    a_5_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_5_EN_A : OUT STD_LOGIC;
    a_5_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_5_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_5_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_5_Clk_A : OUT STD_LOGIC;
    a_5_Rst_A : OUT STD_LOGIC;
    a_6_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_6_EN_A : OUT STD_LOGIC;
    a_6_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_6_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_6_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_6_Clk_A : OUT STD_LOGIC;
    a_6_Rst_A : OUT STD_LOGIC;
    a_7_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_7_EN_A : OUT STD_LOGIC;
    a_7_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_7_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_7_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_7_Clk_A : OUT STD_LOGIC;
    a_7_Rst_A : OUT STD_LOGIC;
    a_8_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_8_EN_A : OUT STD_LOGIC;
    a_8_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_8_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_8_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_8_Clk_A : OUT STD_LOGIC;
    a_8_Rst_A : OUT STD_LOGIC;
    a_9_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_9_EN_A : OUT STD_LOGIC;
    a_9_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_9_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_9_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_9_Clk_A : OUT STD_LOGIC;
    a_9_Rst_A : OUT STD_LOGIC;
    a_10_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_10_EN_A : OUT STD_LOGIC;
    a_10_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_10_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_10_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_10_Clk_A : OUT STD_LOGIC;
    a_10_Rst_A : OUT STD_LOGIC;
    a_11_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_11_EN_A : OUT STD_LOGIC;
    a_11_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_11_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_11_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_11_Clk_A : OUT STD_LOGIC;
    a_11_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.870000,HLS_SYN_LAT=73,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1122,HLS_SYN_LUT=2876}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_414 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_425 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1600 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_453_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_1604 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_mid2_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1609 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum4_t_mid2_v_v_fu_499_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum4_t_mid2_v_v_reg_1632 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum4_t_mid2_fu_507_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum4_t_mid2_reg_1637 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter1_sum4_t_mid2_reg_1637 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp2_mid2_fu_521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_mid2_reg_1641 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_mid2_fu_541_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_mid2_reg_1649 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_reg_1657 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1668 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1678 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_572_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1691 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_fu_576_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1702 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp10_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_reg_1707 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal sel_tmp12_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_reg_1714 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_0_4_fu_648_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_4_reg_1721 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp13_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_reg_1726 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_reg_1736 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_reg_1749 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_771_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1770 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_4_fu_866_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_4_reg_1775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal tmp_6_fu_968_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1785 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_4_fu_1063_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_4_reg_1790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal tmp_7_fu_1165_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1800 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_8_addr_reg_1805 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_pipeline_reg_pp0_iter1_a_8_addr_reg_1805 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_9_addr_reg_1810 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_pipeline_reg_pp0_iter1_a_9_addr_reg_1810 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_10_addr_reg_1815 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_pipeline_reg_pp0_iter1_a_10_addr_reg_1815 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_11_addr_reg_1820 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_pipeline_reg_pp0_iter1_a_11_addr_reg_1820 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_row_3_2_fu_1239_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_2_reg_1825 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1341_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1830 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1835 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_1_reg_1840 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_2_reg_1845 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_3_reg_1850 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_1383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_reg_1855 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal indvar_flatten_phi_fu_418_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_phi_fu_429_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_440_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_row_0_5_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_5_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_5_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_11_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_18_fu_764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_8_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_17_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_12_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_16_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_1_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_3_fu_743_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_11_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_18_fu_957_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_8_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_17_fu_950_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_12_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_16_fu_943_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_1_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_3_fu_936_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_11_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_18_fu_1154_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_8_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_17_fu_1147_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_12_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_16_fu_1140_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_1_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_3_fu_1133_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_11_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_18_fu_1330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_8_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_17_fu_1323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_12_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_16_fu_1316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_1_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_3_fu_1309_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_fu_1391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_10_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_9_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_8_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_11_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_473_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_mid1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_465_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_560_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp1_fu_597_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_fu_611_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_fu_626_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_2_fu_633_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_3_fu_640_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_fu_661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_4_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_5_fu_695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_6_fu_703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_9_fu_719_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_2_fu_687_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_7_fu_711_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_14_fu_727_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_15_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_771_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_824_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_fu_831_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_fu_838_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_fu_845_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_fu_852_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_3_fu_859_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_fu_873_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_4_fu_880_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_5_fu_894_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_6_fu_901_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_9_fu_915_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_2_fu_887_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_7_fu_908_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_14_fu_922_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_15_fu_929_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_968_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_968_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_fu_1021_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp8_fu_1028_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_fu_1035_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_1_fu_1042_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_2_fu_1049_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_3_fu_1056_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_fu_1070_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_4_fu_1077_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_5_fu_1091_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_6_fu_1098_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_9_fu_1112_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_2_fu_1084_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_7_fu_1105_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_14_fu_1119_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_15_fu_1126_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1165_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1165_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp9_fu_1218_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_1225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp11_fu_1232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_fu_1246_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_4_fu_1253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_5_fu_1267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_6_fu_1274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_9_fu_1288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_2_fu_1260_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_7_fu_1281_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_14_fu_1295_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_15_fu_1302_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1341_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component matrixmul_mux_42_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_mul_32scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixmul_mux_42_bkb_U0 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_5_fu_771_p1,
        din2 => tmp_5_fu_771_p2,
        din3 => tmp_5_fu_771_p3,
        din4 => tmp_5_fu_771_p4,
        din5 => tmp_reg_1691,
        dout => tmp_5_fu_771_p6);

    matrixmul_mul_32scud_U1 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_0_4_reg_1721,
        din1 => tmp_5_reg_1770,
        ce => ap_const_logic_1,
        dout => grp_fu_964_p2);

    matrixmul_mux_42_bkb_U2 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_6_fu_968_p1,
        din2 => tmp_6_fu_968_p2,
        din3 => tmp_6_fu_968_p3,
        din4 => tmp_6_fu_968_p4,
        din5 => tmp_reg_1691,
        dout => tmp_6_fu_968_p6);

    matrixmul_mul_32scud_U3 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_1_4_reg_1775,
        din1 => tmp_6_reg_1785,
        ce => ap_const_logic_1,
        dout => grp_fu_1161_p2);

    matrixmul_mux_42_bkb_U4 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_7_fu_1165_p1,
        din2 => tmp_7_fu_1165_p2,
        din3 => tmp_7_fu_1165_p3,
        din4 => tmp_7_fu_1165_p4,
        din5 => tmp_reg_1691,
        dout => tmp_7_fu_1165_p6);

    matrixmul_mul_32scud_U5 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_2_4_reg_1790,
        din1 => tmp_7_reg_1800,
        ce => ap_const_logic_1,
        dout => grp_fu_1337_p2);

    matrixmul_mux_42_bkb_U6 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_8_fu_1341_p1,
        din2 => tmp_8_fu_1341_p2,
        din3 => tmp_8_fu_1341_p3,
        din4 => tmp_8_fu_1341_p4,
        din5 => tmp_reg_1691,
        dout => tmp_8_fu_1341_p6);

    matrixmul_mul_32scud_U7 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_3_2_reg_1825,
        din1 => tmp_8_reg_1830,
        ce => ap_const_logic_1,
        dout => grp_fu_1379_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_447_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and not((exitcond_flatten_reg_1600 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_425 <= sum4_t_mid2_v_v_reg_1632;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_425 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_414 <= indvar_flatten_next_reg_1604;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_414 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_436 <= j_1_reg_1702;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_436 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                a_10_addr_reg_1815 <= j_cast_reg_1657(2 - 1 downto 0);
                a_11_addr_reg_1820 <= j_cast_reg_1657(2 - 1 downto 0);
                a_8_addr_reg_1805 <= j_cast_reg_1657(2 - 1 downto 0);
                a_9_addr_reg_1810 <= j_cast_reg_1657(2 - 1 downto 0);
                a_row_2_4_reg_1790 <= a_row_2_4_fu_1063_p3;
                tmp_7_reg_1800 <= tmp_7_fu_1165_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1600 = ap_const_lv1_0))) then
                a_row_0_4_reg_1721 <= a_row_0_4_fu_648_p3;
                sel_tmp10_reg_1707 <= sel_tmp10_fu_618_p2;
                sel_tmp12_reg_1714 <= sel_tmp12_fu_622_p2;
                sel_tmp13_reg_1726 <= sel_tmp13_fu_656_p2;
                sel_tmp14_reg_1736 <= sel_tmp14_fu_669_p2;
                sel_tmp15_reg_1749 <= sel_tmp15_fu_682_p2;
                tmp_5_reg_1770 <= tmp_5_fu_771_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1600 = ap_const_lv1_0))) then
                a_row_0_5_fu_98 <= a_row_0_4_fu_648_p3;
                b_copy_0_3_11_fu_114 <= b_copy_0_3_18_fu_764_p3;
                b_copy_0_3_12_fu_122 <= b_copy_0_3_16_fu_750_p3;
                b_copy_0_3_1_fu_126 <= b_copy_0_3_3_fu_743_p3;
                b_copy_0_3_8_fu_118 <= b_copy_0_3_17_fu_757_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                a_row_1_4_reg_1775 <= a_row_1_4_fu_866_p3;
                tmp_6_reg_1785 <= tmp_6_fu_968_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                a_row_1_5_fu_102 <= a_row_1_4_fu_866_p3;
                b_copy_1_3_11_fu_130 <= b_copy_1_3_18_fu_957_p3;
                b_copy_1_3_12_fu_138 <= b_copy_1_3_16_fu_943_p3;
                b_copy_1_3_1_fu_142 <= b_copy_1_3_3_fu_936_p3;
                b_copy_1_3_8_fu_134 <= b_copy_1_3_17_fu_950_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                a_row_2_5_fu_106 <= a_row_2_4_fu_1063_p3;
                b_copy_2_3_11_fu_146 <= b_copy_2_3_18_fu_1154_p3;
                b_copy_2_3_12_fu_154 <= b_copy_2_3_16_fu_1140_p3;
                b_copy_2_3_1_fu_158 <= b_copy_2_3_3_fu_1133_p3;
                b_copy_2_3_8_fu_150 <= b_copy_2_3_17_fu_1147_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                a_row_3_1_fu_110 <= a_row_3_2_fu_1239_p3;
                b_copy_3_3_11_fu_162 <= b_copy_3_3_18_fu_1330_p3;
                b_copy_3_3_12_fu_170 <= b_copy_3_3_16_fu_1316_p3;
                b_copy_3_3_1_fu_174 <= b_copy_3_3_3_fu_1309_p3;
                b_copy_3_3_8_fu_166 <= b_copy_3_3_17_fu_1323_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0))) then
                a_row_3_2_reg_1825 <= a_row_3_2_fu_1239_p3;
                tmp_8_reg_1830 <= tmp_8_fu_1341_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                ap_pipeline_reg_pp0_iter1_a_10_addr_reg_1815 <= a_10_addr_reg_1815;
                ap_pipeline_reg_pp0_iter1_a_11_addr_reg_1820 <= a_11_addr_reg_1820;
                ap_pipeline_reg_pp0_iter1_a_8_addr_reg_1805 <= a_8_addr_reg_1805;
                ap_pipeline_reg_pp0_iter1_a_9_addr_reg_1810 <= a_9_addr_reg_1810;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600 <= exitcond_flatten_reg_1600;
                    ap_pipeline_reg_pp0_iter1_sum4_t_mid2_reg_1637(2 downto 0) <= sum4_t_mid2_reg_1637(2 downto 0);
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1600 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600;
                    ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637(2 downto 0) <= ap_pipeline_reg_pp0_iter1_sum4_t_mid2_reg_1637(2 downto 0);
                exitcond_flatten_reg_1600 <= exitcond_flatten_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_1604 <= indvar_flatten_next_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_447_p2 = ap_const_lv1_0))) then
                j_1_reg_1702 <= j_1_fu_576_p2;
                sum4_t_mid2_v_v_reg_1632 <= sum4_t_mid2_v_v_fu_499_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_447_p2 = ap_const_lv1_0))) then
                    j_cast_reg_1657(2 downto 0) <= j_cast_fu_549_p1(2 downto 0);
                sel_tmp2_mid2_reg_1641 <= sel_tmp2_mid2_fu_521_p3;
                sel_tmp4_mid2_reg_1649 <= sel_tmp4_mid2_fu_541_p3;
                    sum4_t_mid2_reg_1637(2 downto 0) <= sum4_t_mid2_fu_507_p3(2 downto 0);
                tmp_3_reg_1668 <= tmp_3_fu_554_p2;
                tmp_4_reg_1678 <= tmp_4_fu_566_p2;
                tmp_mid2_reg_1609 <= tmp_mid2_fu_491_p3;
                tmp_reg_1691 <= tmp_fu_572_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1600 = ap_const_lv1_0))) then
                tmp9_reg_1855 <= tmp9_fu_1383_p2;
                tmp_9_3_reg_1850 <= grp_fu_1379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600 = ap_const_lv1_0))) then
                tmp_9_1_reg_1840 <= grp_fu_1161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1600 = ap_const_lv1_0))) then
                tmp_9_2_reg_1845 <= grp_fu_1337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600 = ap_const_lv1_0))) then
                tmp_9_reg_1835 <= grp_fu_964_p2;
            end if;
        end if;
    end process;
    sum4_t_mid2_reg_1637(3) <= '1';
    ap_pipeline_reg_pp0_iter1_sum4_t_mid2_reg_1637(3) <= '1';
    ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637(3) <= '1';
    j_cast_reg_1657(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_447_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_447_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
            when ap_ST_fsm_pp0_stage3 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_0_Addr_A_orig <= ap_const_lv32_3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_0_Addr_A_orig <= ap_const_lv32_2;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_0_Addr_A_orig <= ap_const_lv32_1;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_0_Addr_A_orig <= ap_const_lv32_0;
            else 
                a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv32_0;

    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv4_0;
    a_10_Addr_A <= std_logic_vector(shift_left(unsigned(a_10_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_10_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_a_10_addr_reg_1815),32));
    a_10_Clk_A <= ap_clk;
    a_10_Din_A <= tmp_2_3_fu_1391_p2;

    a_10_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            a_10_EN_A <= ap_const_logic_1;
        else 
            a_10_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_10_Rst_A <= ap_rst;

    a_10_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 = ap_const_lv4_A)))) then 
            a_10_WEN_A <= ap_const_lv4_F;
        else 
            a_10_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_11_Addr_A <= std_logic_vector(shift_left(unsigned(a_11_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_11_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_a_11_addr_reg_1820),32));
    a_11_Clk_A <= ap_clk;
    a_11_Din_A <= tmp_2_3_fu_1391_p2;

    a_11_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            a_11_EN_A <= ap_const_logic_1;
        else 
            a_11_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_11_Rst_A <= ap_rst;

    a_11_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 = ap_const_lv4_8)) and not((ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 = ap_const_lv4_9)) and not((ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 = ap_const_lv4_A))))) then 
            a_11_WEN_A <= ap_const_lv4_F;
        else 
            a_11_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_1_Addr_A_orig <= ap_const_lv32_3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_1_Addr_A_orig <= ap_const_lv32_2;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_1_Addr_A_orig <= ap_const_lv32_1;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_1_Addr_A_orig <= ap_const_lv32_0;
            else 
                a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= ap_const_lv32_0;

    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;
    a_1_WEN_A <= ap_const_lv4_0;
    a_2_Addr_A <= std_logic_vector(shift_left(unsigned(a_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_2_Addr_A_orig <= ap_const_lv32_3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_2_Addr_A_orig <= ap_const_lv32_2;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_2_Addr_A_orig <= ap_const_lv32_1;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_2_Addr_A_orig <= ap_const_lv32_0;
            else 
                a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_2_Clk_A <= ap_clk;
    a_2_Din_A <= ap_const_lv32_0;

    a_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_2_EN_A <= ap_const_logic_1;
        else 
            a_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_2_Rst_A <= ap_rst;
    a_2_WEN_A <= ap_const_lv4_0;
    a_3_Addr_A <= std_logic_vector(shift_left(unsigned(a_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_3_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_3_Addr_A_orig <= ap_const_lv32_3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_3_Addr_A_orig <= ap_const_lv32_2;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_3_Addr_A_orig <= ap_const_lv32_1;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_3_Addr_A_orig <= ap_const_lv32_0;
            else 
                a_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_3_Clk_A <= ap_clk;
    a_3_Din_A <= ap_const_lv32_0;

    a_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_3_EN_A <= ap_const_logic_1;
        else 
            a_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_3_Rst_A <= ap_rst;
    a_3_WEN_A <= ap_const_lv4_0;
    a_4_Addr_A <= std_logic_vector(shift_left(unsigned(j_cast_fu_549_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_4_Clk_A <= ap_clk;
    a_4_Din_A <= ap_const_lv32_0;

    a_4_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_4_EN_A <= ap_const_logic_1;
        else 
            a_4_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_4_Rst_A <= ap_rst;
    a_4_WEN_A <= ap_const_lv4_0;
    a_5_Addr_A <= std_logic_vector(shift_left(unsigned(j_cast_reg_1657),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_5_Clk_A <= ap_clk;
    a_5_Din_A <= ap_const_lv32_0;

    a_5_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            a_5_EN_A <= ap_const_logic_1;
        else 
            a_5_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_5_Rst_A <= ap_rst;
    a_5_WEN_A <= ap_const_lv4_0;
    a_6_Addr_A <= std_logic_vector(shift_left(unsigned(j_cast_reg_1657),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_6_Clk_A <= ap_clk;
    a_6_Din_A <= ap_const_lv32_0;

    a_6_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            a_6_EN_A <= ap_const_logic_1;
        else 
            a_6_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_6_Rst_A <= ap_rst;
    a_6_WEN_A <= ap_const_lv4_0;
    a_7_Addr_A <= std_logic_vector(shift_left(unsigned(j_cast_reg_1657),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_7_Clk_A <= ap_clk;
    a_7_Din_A <= ap_const_lv32_0;

    a_7_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
            a_7_EN_A <= ap_const_logic_1;
        else 
            a_7_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_7_Rst_A <= ap_rst;
    a_7_WEN_A <= ap_const_lv4_0;
    a_8_Addr_A <= std_logic_vector(shift_left(unsigned(a_8_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_8_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_a_8_addr_reg_1805),32));
    a_8_Clk_A <= ap_clk;
    a_8_Din_A <= tmp_2_3_fu_1391_p2;

    a_8_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            a_8_EN_A <= ap_const_logic_1;
        else 
            a_8_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_8_Rst_A <= ap_rst;

    a_8_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 = ap_const_lv4_8)))) then 
            a_8_WEN_A <= ap_const_lv4_F;
        else 
            a_8_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_9_Addr_A <= std_logic_vector(shift_left(unsigned(a_9_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_9_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_a_9_addr_reg_1810),32));
    a_9_Clk_A <= ap_clk;
    a_9_Din_A <= tmp_2_3_fu_1391_p2;

    a_9_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            a_9_EN_A <= ap_const_logic_1;
        else 
            a_9_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_9_Rst_A <= ap_rst;

    a_9_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 = ap_const_lv4_9)))) then 
            a_9_WEN_A <= ap_const_lv4_F;
        else 
            a_9_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_row_0_1_fu_626_p3 <= 
        a_row_0_fu_611_p3 when (tmp_3_reg_1668(0) = '1') else 
        a_row_0_5_fu_98;
    a_row_0_2_fu_633_p3 <= 
        a_row_0_fu_611_p3 when (tmp_4_reg_1678(0) = '1') else 
        a_row_0_1_fu_626_p3;
    a_row_0_3_fu_640_p3 <= 
        a_row_0_fu_611_p3 when (sel_tmp10_fu_618_p2(0) = '1') else 
        a_row_0_2_fu_633_p3;
    a_row_0_4_fu_648_p3 <= 
        a_row_0_fu_611_p3 when (sel_tmp12_fu_622_p2(0) = '1') else 
        a_row_0_3_fu_640_p3;
    a_row_0_fu_611_p3 <= 
        a_2_Dout_A when (sel_tmp4_mid2_reg_1649(0) = '1') else 
        sel_tmp3_fu_604_p3;
    a_row_1_1_fu_845_p3 <= 
        a_row_1_fu_838_p3 when (tmp_3_reg_1668(0) = '1') else 
        a_row_1_5_fu_102;
    a_row_1_2_fu_852_p3 <= 
        a_row_1_fu_838_p3 when (tmp_4_reg_1678(0) = '1') else 
        a_row_1_1_fu_845_p3;
    a_row_1_3_fu_859_p3 <= 
        a_row_1_fu_838_p3 when (sel_tmp10_reg_1707(0) = '1') else 
        a_row_1_2_fu_852_p3;
    a_row_1_4_fu_866_p3 <= 
        a_row_1_fu_838_p3 when (sel_tmp12_reg_1714(0) = '1') else 
        a_row_1_3_fu_859_p3;
    a_row_1_fu_838_p3 <= 
        a_2_Dout_A when (sel_tmp4_mid2_reg_1649(0) = '1') else 
        sel_tmp6_fu_831_p3;
    a_row_2_1_fu_1042_p3 <= 
        a_row_2_fu_1035_p3 when (tmp_3_reg_1668(0) = '1') else 
        a_row_2_5_fu_106;
    a_row_2_2_fu_1049_p3 <= 
        a_row_2_fu_1035_p3 when (tmp_4_reg_1678(0) = '1') else 
        a_row_2_1_fu_1042_p3;
    a_row_2_3_fu_1056_p3 <= 
        a_row_2_fu_1035_p3 when (sel_tmp10_reg_1707(0) = '1') else 
        a_row_2_2_fu_1049_p3;
    a_row_2_4_fu_1063_p3 <= 
        a_row_2_fu_1035_p3 when (sel_tmp12_reg_1714(0) = '1') else 
        a_row_2_3_fu_1056_p3;
    a_row_2_fu_1035_p3 <= 
        a_2_Dout_A when (sel_tmp4_mid2_reg_1649(0) = '1') else 
        sel_tmp8_fu_1028_p3;
    a_row_3_2_fu_1239_p3 <= 
        a_2_Dout_A when (sel_tmp12_reg_1714(0) = '1') else 
        sel_tmp11_fu_1232_p3;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state14 <= ap_CS_fsm(5 downto 5);

    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_0_3_14_fu_727_p3 <= 
        b_copy_0_3_8_fu_118 when (sel_tmp15_fu_682_p2(0) = '1') else 
        b_copy_0_3_9_fu_719_p3;
    b_copy_0_3_15_fu_735_p3 <= 
        a_4_Dout_A when (sel_tmp15_fu_682_p2(0) = '1') else 
        b_copy_0_3_11_fu_114;
    b_copy_0_3_16_fu_750_p3 <= 
        b_copy_0_3_7_fu_711_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_0_3_12_fu_122;
    b_copy_0_3_17_fu_757_p3 <= 
        b_copy_0_3_14_fu_727_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_0_3_8_fu_118;
    b_copy_0_3_18_fu_764_p3 <= 
        b_copy_0_3_15_fu_735_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_0_3_11_fu_114;
    b_copy_0_3_2_fu_687_p3 <= 
        b_copy_0_3_1_fu_126 when (sel_tmp15_fu_682_p2(0) = '1') else 
        b_copy_0_3_4_fu_674_p3;
    b_copy_0_3_3_fu_743_p3 <= 
        b_copy_0_3_2_fu_687_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_0_3_1_fu_126;
    b_copy_0_3_4_fu_674_p3 <= 
        b_copy_0_3_1_fu_126 when (sel_tmp14_fu_669_p2(0) = '1') else 
        b_copy_0_3_fu_661_p3;
    b_copy_0_3_5_fu_695_p3 <= 
        a_4_Dout_A when (sel_tmp13_fu_656_p2(0) = '1') else 
        b_copy_0_3_12_fu_122;
    b_copy_0_3_6_fu_703_p3 <= 
        b_copy_0_3_12_fu_122 when (sel_tmp14_fu_669_p2(0) = '1') else 
        b_copy_0_3_5_fu_695_p3;
    b_copy_0_3_7_fu_711_p3 <= 
        b_copy_0_3_12_fu_122 when (sel_tmp15_fu_682_p2(0) = '1') else 
        b_copy_0_3_6_fu_703_p3;
    b_copy_0_3_9_fu_719_p3 <= 
        a_4_Dout_A when (sel_tmp14_fu_669_p2(0) = '1') else 
        b_copy_0_3_8_fu_118;
    b_copy_0_3_fu_661_p3 <= 
        b_copy_0_3_1_fu_126 when (sel_tmp13_fu_656_p2(0) = '1') else 
        a_4_Dout_A;
    b_copy_1_3_14_fu_922_p3 <= 
        b_copy_1_3_8_fu_134 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_1_3_9_fu_915_p3;
    b_copy_1_3_15_fu_929_p3 <= 
        a_5_Dout_A when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_1_3_11_fu_130;
    b_copy_1_3_16_fu_943_p3 <= 
        b_copy_1_3_7_fu_908_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_1_3_12_fu_138;
    b_copy_1_3_17_fu_950_p3 <= 
        b_copy_1_3_14_fu_922_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_1_3_8_fu_134;
    b_copy_1_3_18_fu_957_p3 <= 
        b_copy_1_3_15_fu_929_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_1_3_11_fu_130;
    b_copy_1_3_2_fu_887_p3 <= 
        b_copy_1_3_1_fu_142 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_1_3_4_fu_880_p3;
    b_copy_1_3_3_fu_936_p3 <= 
        b_copy_1_3_2_fu_887_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_1_3_1_fu_142;
    b_copy_1_3_4_fu_880_p3 <= 
        b_copy_1_3_1_fu_142 when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_1_3_fu_873_p3;
    b_copy_1_3_5_fu_894_p3 <= 
        a_5_Dout_A when (sel_tmp13_reg_1726(0) = '1') else 
        b_copy_1_3_12_fu_138;
    b_copy_1_3_6_fu_901_p3 <= 
        b_copy_1_3_12_fu_138 when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_1_3_5_fu_894_p3;
    b_copy_1_3_7_fu_908_p3 <= 
        b_copy_1_3_12_fu_138 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_1_3_6_fu_901_p3;
    b_copy_1_3_9_fu_915_p3 <= 
        a_5_Dout_A when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_1_3_8_fu_134;
    b_copy_1_3_fu_873_p3 <= 
        b_copy_1_3_1_fu_142 when (sel_tmp13_reg_1726(0) = '1') else 
        a_5_Dout_A;
    b_copy_2_3_14_fu_1119_p3 <= 
        b_copy_2_3_8_fu_150 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_2_3_9_fu_1112_p3;
    b_copy_2_3_15_fu_1126_p3 <= 
        a_6_Dout_A when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_2_3_11_fu_146;
    b_copy_2_3_16_fu_1140_p3 <= 
        b_copy_2_3_7_fu_1105_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_2_3_12_fu_154;
    b_copy_2_3_17_fu_1147_p3 <= 
        b_copy_2_3_14_fu_1119_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_2_3_8_fu_150;
    b_copy_2_3_18_fu_1154_p3 <= 
        b_copy_2_3_15_fu_1126_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_2_3_11_fu_146;
    b_copy_2_3_2_fu_1084_p3 <= 
        b_copy_2_3_1_fu_158 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_2_3_4_fu_1077_p3;
    b_copy_2_3_3_fu_1133_p3 <= 
        b_copy_2_3_2_fu_1084_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_2_3_1_fu_158;
    b_copy_2_3_4_fu_1077_p3 <= 
        b_copy_2_3_1_fu_158 when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_2_3_fu_1070_p3;
    b_copy_2_3_5_fu_1091_p3 <= 
        a_6_Dout_A when (sel_tmp13_reg_1726(0) = '1') else 
        b_copy_2_3_12_fu_154;
    b_copy_2_3_6_fu_1098_p3 <= 
        b_copy_2_3_12_fu_154 when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_2_3_5_fu_1091_p3;
    b_copy_2_3_7_fu_1105_p3 <= 
        b_copy_2_3_12_fu_154 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_2_3_6_fu_1098_p3;
    b_copy_2_3_9_fu_1112_p3 <= 
        a_6_Dout_A when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_2_3_8_fu_150;
    b_copy_2_3_fu_1070_p3 <= 
        b_copy_2_3_1_fu_158 when (sel_tmp13_reg_1726(0) = '1') else 
        a_6_Dout_A;
    b_copy_3_3_14_fu_1295_p3 <= 
        b_copy_3_3_8_fu_166 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_3_3_9_fu_1288_p3;
    b_copy_3_3_15_fu_1302_p3 <= 
        a_7_Dout_A when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_3_3_11_fu_162;
    b_copy_3_3_16_fu_1316_p3 <= 
        b_copy_3_3_7_fu_1281_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_3_3_12_fu_170;
    b_copy_3_3_17_fu_1323_p3 <= 
        b_copy_3_3_14_fu_1295_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_3_3_8_fu_166;
    b_copy_3_3_18_fu_1330_p3 <= 
        b_copy_3_3_15_fu_1302_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_3_3_11_fu_162;
    b_copy_3_3_2_fu_1260_p3 <= 
        b_copy_3_3_1_fu_174 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_3_3_4_fu_1253_p3;
    b_copy_3_3_3_fu_1309_p3 <= 
        b_copy_3_3_2_fu_1260_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_3_3_1_fu_174;
    b_copy_3_3_4_fu_1253_p3 <= 
        b_copy_3_3_1_fu_174 when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_3_3_fu_1246_p3;
    b_copy_3_3_5_fu_1267_p3 <= 
        a_7_Dout_A when (sel_tmp13_reg_1726(0) = '1') else 
        b_copy_3_3_12_fu_170;
    b_copy_3_3_6_fu_1274_p3 <= 
        b_copy_3_3_12_fu_170 when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_3_3_5_fu_1267_p3;
    b_copy_3_3_7_fu_1281_p3 <= 
        b_copy_3_3_12_fu_170 when (sel_tmp15_reg_1749(0) = '1') else 
        b_copy_3_3_6_fu_1274_p3;
    b_copy_3_3_9_fu_1288_p3 <= 
        a_7_Dout_A when (sel_tmp14_reg_1736(0) = '1') else 
        b_copy_3_3_8_fu_166;
    b_copy_3_3_fu_1246_p3 <= 
        b_copy_3_3_1_fu_174 when (sel_tmp13_reg_1726(0) = '1') else 
        a_7_Dout_A;
    exitcond_flatten_fu_447_p2 <= "1" when (indvar_flatten_phi_fu_418_p4 = ap_const_lv5_10) else "0";
    exitcond_fu_459_p2 <= "1" when (j_phi_fu_440_p4 = ap_const_lv3_4) else "0";

    i_phi_fu_429_p4_assign_proc : process(i_reg_425, exitcond_flatten_reg_1600, ap_CS_fsm_pp0_stage0, sum4_t_mid2_v_v_reg_1632, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_phi_fu_429_p4 <= sum4_t_mid2_v_v_reg_1632;
        else 
            i_phi_fu_429_p4 <= i_reg_425;
        end if; 
    end process;

    i_s_fu_473_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_phi_fu_429_p4));
    indvar_flatten_next_fu_453_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_418_p4) + unsigned(ap_const_lv5_1));

    indvar_flatten_phi_fu_418_p4_assign_proc : process(indvar_flatten_reg_414, exitcond_flatten_reg_1600, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1604, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_418_p4 <= indvar_flatten_next_reg_1604;
        else 
            indvar_flatten_phi_fu_418_p4 <= indvar_flatten_reg_414;
        end if; 
    end process;

    j_1_fu_576_p2 <= std_logic_vector(unsigned(j_mid2_fu_465_p3) + unsigned(ap_const_lv3_1));
    j_cast_fu_549_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_465_p3),32));
    j_mid2_fu_465_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_459_p2(0) = '1') else 
        j_phi_fu_440_p4;

    j_phi_fu_440_p4_assign_proc : process(j_reg_436, exitcond_flatten_reg_1600, ap_CS_fsm_pp0_stage0, j_1_reg_1702, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1600 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            j_phi_fu_440_p4 <= j_1_reg_1702;
        else 
            j_phi_fu_440_p4 <= j_reg_436;
        end if; 
    end process;

    sel_tmp10_fu_618_p2 <= (tmp_3_reg_1668 and sel_tmp2_mid2_reg_1641);
    sel_tmp11_fu_1232_p3 <= 
        a_1_Dout_A when (sel_tmp10_reg_1707(0) = '1') else 
        sel_tmp_fu_1225_p3;
    sel_tmp12_fu_622_p2 <= (tmp_3_reg_1668 and sel_tmp4_mid2_reg_1649);
    sel_tmp13_fu_656_p2 <= "1" when (tmp_reg_1691 = ap_const_lv2_2) else "0";
    sel_tmp14_fu_669_p2 <= "1" when (tmp_reg_1691 = ap_const_lv2_1) else "0";
    sel_tmp15_fu_682_p2 <= "1" when (tmp_reg_1691 = ap_const_lv2_0) else "0";
    sel_tmp1_fu_597_p3 <= 
        a_0_Dout_A when (tmp_mid2_reg_1609(0) = '1') else 
        a_3_Dout_A;
    sel_tmp2_fu_515_p2 <= "1" when (i_phi_fu_429_p4 = ap_const_lv3_1) else "0";
    sel_tmp2_mid2_fu_521_p3 <= 
        tmp8_fu_485_p2 when (exitcond_fu_459_p2(0) = '1') else 
        sel_tmp2_fu_515_p2;
    sel_tmp3_fu_604_p3 <= 
        a_1_Dout_A when (sel_tmp2_mid2_reg_1641(0) = '1') else 
        sel_tmp1_fu_597_p3;
    sel_tmp4_fu_535_p2 <= "1" when (i_phi_fu_429_p4 = ap_const_lv3_2) else "0";
    sel_tmp4_mid1_fu_529_p2 <= "1" when (i_s_fu_473_p2 = ap_const_lv3_2) else "0";
    sel_tmp4_mid2_fu_541_p3 <= 
        sel_tmp4_mid1_fu_529_p2 when (exitcond_fu_459_p2(0) = '1') else 
        sel_tmp4_fu_535_p2;
    sel_tmp5_fu_824_p3 <= 
        a_0_Dout_A when (tmp_mid2_reg_1609(0) = '1') else 
        a_3_Dout_A;
    sel_tmp6_fu_831_p3 <= 
        a_1_Dout_A when (sel_tmp2_mid2_reg_1641(0) = '1') else 
        sel_tmp5_fu_824_p3;
    sel_tmp7_fu_1021_p3 <= 
        a_0_Dout_A when (tmp_mid2_reg_1609(0) = '1') else 
        a_3_Dout_A;
    sel_tmp8_fu_1028_p3 <= 
        a_1_Dout_A when (sel_tmp2_mid2_reg_1641(0) = '1') else 
        sel_tmp7_fu_1021_p3;
    sel_tmp9_fu_1218_p3 <= 
        a_3_Dout_A when (tmp_3_reg_1668(0) = '1') else 
        a_row_3_1_fu_110;
    sel_tmp_fu_1225_p3 <= 
        a_0_Dout_A when (tmp_4_reg_1678(0) = '1') else 
        sel_tmp9_fu_1218_p3;
    sum4_t_mid2_fu_507_p3 <= (ap_const_lv1_1 & sum4_t_mid2_v_v_fu_499_p3);
    sum4_t_mid2_v_v_fu_499_p3 <= 
        i_s_fu_473_p2 when (exitcond_fu_459_p2(0) = '1') else 
        i_phi_fu_429_p4;
    tmp1_fu_1387_p2 <= std_logic_vector(unsigned(tmp_9_3_reg_1850) + unsigned(tmp_9_1_reg_1840));
    tmp8_fu_485_p2 <= "1" when (i_phi_fu_429_p4 = ap_const_lv3_0) else "0";
    tmp9_fu_1383_p2 <= std_logic_vector(unsigned(tmp_9_2_reg_1845) + unsigned(tmp_9_reg_1835));
    tmp_2_3_fu_1391_p2 <= std_logic_vector(unsigned(tmp9_reg_1855) + unsigned(tmp1_fu_1387_p2));
    tmp_2_fu_560_p2 <= (j_mid2_fu_465_p3 or sum4_t_mid2_v_v_fu_499_p3);
    tmp_3_fu_554_p2 <= "1" when (j_mid2_fu_465_p3 = ap_const_lv3_0) else "0";
    tmp_4_fu_566_p2 <= "1" when (tmp_2_fu_560_p2 = ap_const_lv3_0) else "0";
    tmp_5_fu_771_p1 <= 
        b_copy_0_3_15_fu_735_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_0_3_11_fu_114;
    tmp_5_fu_771_p2 <= 
        b_copy_0_3_14_fu_727_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_0_3_8_fu_118;
    tmp_5_fu_771_p3 <= 
        b_copy_0_3_7_fu_711_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_0_3_12_fu_122;
    tmp_5_fu_771_p4 <= 
        b_copy_0_3_2_fu_687_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_0_3_1_fu_126;
    tmp_6_fu_968_p1 <= 
        b_copy_1_3_15_fu_929_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_1_3_11_fu_130;
    tmp_6_fu_968_p2 <= 
        b_copy_1_3_14_fu_922_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_1_3_8_fu_134;
    tmp_6_fu_968_p3 <= 
        b_copy_1_3_7_fu_908_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_1_3_12_fu_138;
    tmp_6_fu_968_p4 <= 
        b_copy_1_3_2_fu_887_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_1_3_1_fu_142;
    tmp_7_fu_1165_p1 <= 
        b_copy_2_3_15_fu_1126_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_2_3_11_fu_146;
    tmp_7_fu_1165_p2 <= 
        b_copy_2_3_14_fu_1119_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_2_3_8_fu_150;
    tmp_7_fu_1165_p3 <= 
        b_copy_2_3_7_fu_1105_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_2_3_12_fu_154;
    tmp_7_fu_1165_p4 <= 
        b_copy_2_3_2_fu_1084_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_2_3_1_fu_158;
    tmp_8_fu_1341_p1 <= 
        b_copy_3_3_15_fu_1302_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_3_3_11_fu_162;
    tmp_8_fu_1341_p2 <= 
        b_copy_3_3_14_fu_1295_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_3_3_8_fu_166;
    tmp_8_fu_1341_p3 <= 
        b_copy_3_3_7_fu_1281_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_3_3_12_fu_170;
    tmp_8_fu_1341_p4 <= 
        b_copy_3_3_2_fu_1260_p3 when (tmp_mid2_reg_1609(0) = '1') else 
        b_copy_3_3_1_fu_174;
    tmp_fu_572_p1 <= j_mid2_fu_465_p3(2 - 1 downto 0);
    tmp_mid1_fu_479_p2 <= "1" when (i_s_fu_473_p2 = ap_const_lv3_0) else "0";
    tmp_mid2_fu_491_p3 <= 
        tmp_mid1_fu_479_p2 when (exitcond_fu_459_p2(0) = '1') else 
        tmp8_fu_485_p2;
end behav;
