// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.870000,HLS_SYN_LAT=73,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1122,HLS_SYN_LUT=2876}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        a_3_Addr_A,
        a_3_EN_A,
        a_3_WEN_A,
        a_3_Din_A,
        a_3_Dout_A,
        a_3_Clk_A,
        a_3_Rst_A,
        a_4_Addr_A,
        a_4_EN_A,
        a_4_WEN_A,
        a_4_Din_A,
        a_4_Dout_A,
        a_4_Clk_A,
        a_4_Rst_A,
        a_5_Addr_A,
        a_5_EN_A,
        a_5_WEN_A,
        a_5_Din_A,
        a_5_Dout_A,
        a_5_Clk_A,
        a_5_Rst_A,
        a_6_Addr_A,
        a_6_EN_A,
        a_6_WEN_A,
        a_6_Din_A,
        a_6_Dout_A,
        a_6_Clk_A,
        a_6_Rst_A,
        a_7_Addr_A,
        a_7_EN_A,
        a_7_WEN_A,
        a_7_Din_A,
        a_7_Dout_A,
        a_7_Clk_A,
        a_7_Rst_A,
        a_8_Addr_A,
        a_8_EN_A,
        a_8_WEN_A,
        a_8_Din_A,
        a_8_Dout_A,
        a_8_Clk_A,
        a_8_Rst_A,
        a_9_Addr_A,
        a_9_EN_A,
        a_9_WEN_A,
        a_9_Din_A,
        a_9_Dout_A,
        a_9_Clk_A,
        a_9_Rst_A,
        a_10_Addr_A,
        a_10_EN_A,
        a_10_WEN_A,
        a_10_Din_A,
        a_10_Dout_A,
        a_10_Clk_A,
        a_10_Rst_A,
        a_11_Addr_A,
        a_11_EN_A,
        a_11_WEN_A,
        a_11_Din_A,
        a_11_Dout_A,
        a_11_Clk_A,
        a_11_Rst_A
);

parameter    ap_ST_fsm_state1 = 6'b1;
parameter    ap_ST_fsm_pp0_stage0 = 6'b10;
parameter    ap_ST_fsm_pp0_stage1 = 6'b100;
parameter    ap_ST_fsm_pp0_stage2 = 6'b1000;
parameter    ap_ST_fsm_pp0_stage3 = 6'b10000;
parameter    ap_ST_fsm_state14 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_9 = 4'b1001;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_5 = 32'b101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [3:0] a_0_WEN_A;
output  [31:0] a_0_Din_A;
input  [31:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [3:0] a_1_WEN_A;
output  [31:0] a_1_Din_A;
input  [31:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [3:0] a_2_WEN_A;
output  [31:0] a_2_Din_A;
input  [31:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] a_3_Addr_A;
output   a_3_EN_A;
output  [3:0] a_3_WEN_A;
output  [31:0] a_3_Din_A;
input  [31:0] a_3_Dout_A;
output   a_3_Clk_A;
output   a_3_Rst_A;
output  [31:0] a_4_Addr_A;
output   a_4_EN_A;
output  [3:0] a_4_WEN_A;
output  [31:0] a_4_Din_A;
input  [31:0] a_4_Dout_A;
output   a_4_Clk_A;
output   a_4_Rst_A;
output  [31:0] a_5_Addr_A;
output   a_5_EN_A;
output  [3:0] a_5_WEN_A;
output  [31:0] a_5_Din_A;
input  [31:0] a_5_Dout_A;
output   a_5_Clk_A;
output   a_5_Rst_A;
output  [31:0] a_6_Addr_A;
output   a_6_EN_A;
output  [3:0] a_6_WEN_A;
output  [31:0] a_6_Din_A;
input  [31:0] a_6_Dout_A;
output   a_6_Clk_A;
output   a_6_Rst_A;
output  [31:0] a_7_Addr_A;
output   a_7_EN_A;
output  [3:0] a_7_WEN_A;
output  [31:0] a_7_Din_A;
input  [31:0] a_7_Dout_A;
output   a_7_Clk_A;
output   a_7_Rst_A;
output  [31:0] a_8_Addr_A;
output   a_8_EN_A;
output  [3:0] a_8_WEN_A;
output  [31:0] a_8_Din_A;
input  [31:0] a_8_Dout_A;
output   a_8_Clk_A;
output   a_8_Rst_A;
output  [31:0] a_9_Addr_A;
output   a_9_EN_A;
output  [3:0] a_9_WEN_A;
output  [31:0] a_9_Din_A;
input  [31:0] a_9_Dout_A;
output   a_9_Clk_A;
output   a_9_Rst_A;
output  [31:0] a_10_Addr_A;
output   a_10_EN_A;
output  [3:0] a_10_WEN_A;
output  [31:0] a_10_Din_A;
input  [31:0] a_10_Dout_A;
output   a_10_Clk_A;
output   a_10_Rst_A;
output  [31:0] a_11_Addr_A;
output   a_11_EN_A;
output  [3:0] a_11_WEN_A;
output  [31:0] a_11_Din_A;
input  [31:0] a_11_Dout_A;
output   a_11_Clk_A;
output   a_11_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_EN_A;
reg a_1_EN_A;
reg a_2_EN_A;
reg a_3_EN_A;
reg a_4_EN_A;
reg a_5_EN_A;
reg a_6_EN_A;
reg a_7_EN_A;
reg a_8_EN_A;
reg[3:0] a_8_WEN_A;
reg a_9_EN_A;
reg[3:0] a_9_WEN_A;
reg a_10_EN_A;
reg[3:0] a_10_WEN_A;
reg a_11_EN_A;
reg[3:0] a_11_WEN_A;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_414;
reg   [2:0] i_reg_425;
reg   [2:0] j_reg_436;
wire   [0:0] exitcond_flatten_fu_447_p2;
reg   [0:0] exitcond_flatten_reg_1600;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1600;
wire   [4:0] indvar_flatten_next_fu_453_p2;
reg   [4:0] indvar_flatten_next_reg_1604;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_mid2_fu_491_p3;
reg   [0:0] tmp_mid2_reg_1609;
wire   [2:0] sum4_t_mid2_v_v_fu_499_p3;
reg   [2:0] sum4_t_mid2_v_v_reg_1632;
wire   [3:0] sum4_t_mid2_fu_507_p3;
reg   [3:0] sum4_t_mid2_reg_1637;
reg   [3:0] ap_pipeline_reg_pp0_iter1_sum4_t_mid2_reg_1637;
reg   [3:0] ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637;
wire   [0:0] sel_tmp2_mid2_fu_521_p3;
reg   [0:0] sel_tmp2_mid2_reg_1641;
wire   [0:0] sel_tmp4_mid2_fu_541_p3;
reg   [0:0] sel_tmp4_mid2_reg_1649;
wire   [31:0] j_cast_fu_549_p1;
reg   [31:0] j_cast_reg_1657;
wire   [0:0] tmp_3_fu_554_p2;
reg   [0:0] tmp_3_reg_1668;
wire   [0:0] tmp_4_fu_566_p2;
reg   [0:0] tmp_4_reg_1678;
wire   [1:0] tmp_fu_572_p1;
reg   [1:0] tmp_reg_1691;
wire   [2:0] j_1_fu_576_p2;
reg   [2:0] j_1_reg_1702;
wire   [0:0] sel_tmp10_fu_618_p2;
reg   [0:0] sel_tmp10_reg_1707;
wire   [0:0] ap_CS_fsm_pp0_stage1;
wire   [0:0] sel_tmp12_fu_622_p2;
reg   [0:0] sel_tmp12_reg_1714;
wire  signed [31:0] a_row_0_4_fu_648_p3;
reg  signed [31:0] a_row_0_4_reg_1721;
wire   [0:0] sel_tmp13_fu_656_p2;
reg   [0:0] sel_tmp13_reg_1726;
wire   [0:0] sel_tmp14_fu_669_p2;
reg   [0:0] sel_tmp14_reg_1736;
wire   [0:0] sel_tmp15_fu_682_p2;
reg   [0:0] sel_tmp15_reg_1749;
wire  signed [31:0] tmp_5_fu_771_p6;
reg  signed [31:0] tmp_5_reg_1770;
wire  signed [31:0] a_row_1_4_fu_866_p3;
reg  signed [31:0] a_row_1_4_reg_1775;
wire   [0:0] ap_CS_fsm_pp0_stage2;
wire  signed [31:0] tmp_6_fu_968_p6;
reg  signed [31:0] tmp_6_reg_1785;
wire  signed [31:0] a_row_2_4_fu_1063_p3;
reg  signed [31:0] a_row_2_4_reg_1790;
wire   [0:0] ap_CS_fsm_pp0_stage3;
wire  signed [31:0] tmp_7_fu_1165_p6;
reg  signed [31:0] tmp_7_reg_1800;
reg   [1:0] a_8_addr_reg_1805;
reg   [1:0] ap_pipeline_reg_pp0_iter1_a_8_addr_reg_1805;
reg   [1:0] a_9_addr_reg_1810;
reg   [1:0] ap_pipeline_reg_pp0_iter1_a_9_addr_reg_1810;
reg   [1:0] a_10_addr_reg_1815;
reg   [1:0] ap_pipeline_reg_pp0_iter1_a_10_addr_reg_1815;
reg   [1:0] a_11_addr_reg_1820;
reg   [1:0] ap_pipeline_reg_pp0_iter1_a_11_addr_reg_1820;
wire  signed [31:0] a_row_3_2_fu_1239_p3;
reg  signed [31:0] a_row_3_2_reg_1825;
wire  signed [31:0] tmp_8_fu_1341_p6;
reg  signed [31:0] tmp_8_reg_1830;
wire   [31:0] grp_fu_964_p2;
reg   [31:0] tmp_9_reg_1835;
wire   [31:0] grp_fu_1161_p2;
reg   [31:0] tmp_9_1_reg_1840;
wire   [31:0] grp_fu_1337_p2;
reg   [31:0] tmp_9_2_reg_1845;
wire   [31:0] grp_fu_1379_p2;
reg   [31:0] tmp_9_3_reg_1850;
wire   [31:0] tmp9_fu_1383_p2;
reg   [31:0] tmp9_reg_1855;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] indvar_flatten_phi_fu_418_p4;
reg   [2:0] i_phi_fu_429_p4;
reg   [2:0] j_phi_fu_440_p4;
reg   [31:0] a_row_0_5_fu_98;
reg   [31:0] a_row_1_5_fu_102;
reg   [31:0] a_row_2_5_fu_106;
reg   [31:0] a_row_3_1_fu_110;
reg   [31:0] b_copy_0_3_11_fu_114;
wire   [31:0] b_copy_0_3_18_fu_764_p3;
reg   [31:0] b_copy_0_3_8_fu_118;
wire   [31:0] b_copy_0_3_17_fu_757_p3;
reg   [31:0] b_copy_0_3_12_fu_122;
wire   [31:0] b_copy_0_3_16_fu_750_p3;
reg   [31:0] b_copy_0_3_1_fu_126;
wire   [31:0] b_copy_0_3_3_fu_743_p3;
reg   [31:0] b_copy_1_3_11_fu_130;
wire   [31:0] b_copy_1_3_18_fu_957_p3;
reg   [31:0] b_copy_1_3_8_fu_134;
wire   [31:0] b_copy_1_3_17_fu_950_p3;
reg   [31:0] b_copy_1_3_12_fu_138;
wire   [31:0] b_copy_1_3_16_fu_943_p3;
reg   [31:0] b_copy_1_3_1_fu_142;
wire   [31:0] b_copy_1_3_3_fu_936_p3;
reg   [31:0] b_copy_2_3_11_fu_146;
wire   [31:0] b_copy_2_3_18_fu_1154_p3;
reg   [31:0] b_copy_2_3_8_fu_150;
wire   [31:0] b_copy_2_3_17_fu_1147_p3;
reg   [31:0] b_copy_2_3_12_fu_154;
wire   [31:0] b_copy_2_3_16_fu_1140_p3;
reg   [31:0] b_copy_2_3_1_fu_158;
wire   [31:0] b_copy_2_3_3_fu_1133_p3;
reg   [31:0] b_copy_3_3_11_fu_162;
wire   [31:0] b_copy_3_3_18_fu_1330_p3;
reg   [31:0] b_copy_3_3_8_fu_166;
wire   [31:0] b_copy_3_3_17_fu_1323_p3;
reg   [31:0] b_copy_3_3_12_fu_170;
wire   [31:0] b_copy_3_3_16_fu_1316_p3;
reg   [31:0] b_copy_3_3_1_fu_174;
wire   [31:0] b_copy_3_3_3_fu_1309_p3;
reg   [31:0] a_3_Addr_A_orig;
reg   [31:0] a_0_Addr_A_orig;
reg   [31:0] a_1_Addr_A_orig;
reg   [31:0] a_2_Addr_A_orig;
wire   [31:0] tmp_2_3_fu_1391_p2;
wire   [31:0] a_10_Addr_A_orig;
wire   [31:0] a_9_Addr_A_orig;
wire   [31:0] a_8_Addr_A_orig;
wire   [31:0] a_11_Addr_A_orig;
wire   [0:0] exitcond_fu_459_p2;
wire   [2:0] i_s_fu_473_p2;
wire   [0:0] tmp_mid1_fu_479_p2;
wire   [0:0] tmp8_fu_485_p2;
wire   [0:0] sel_tmp2_fu_515_p2;
wire   [0:0] sel_tmp4_mid1_fu_529_p2;
wire   [0:0] sel_tmp4_fu_535_p2;
wire   [2:0] j_mid2_fu_465_p3;
wire   [2:0] tmp_2_fu_560_p2;
wire   [31:0] sel_tmp1_fu_597_p3;
wire   [31:0] sel_tmp3_fu_604_p3;
wire   [31:0] a_row_0_fu_611_p3;
wire   [31:0] a_row_0_1_fu_626_p3;
wire   [31:0] a_row_0_2_fu_633_p3;
wire   [31:0] a_row_0_3_fu_640_p3;
wire   [31:0] b_copy_0_3_fu_661_p3;
wire   [31:0] b_copy_0_3_4_fu_674_p3;
wire   [31:0] b_copy_0_3_5_fu_695_p3;
wire   [31:0] b_copy_0_3_6_fu_703_p3;
wire   [31:0] b_copy_0_3_9_fu_719_p3;
wire   [31:0] b_copy_0_3_2_fu_687_p3;
wire   [31:0] b_copy_0_3_7_fu_711_p3;
wire   [31:0] b_copy_0_3_14_fu_727_p3;
wire   [31:0] b_copy_0_3_15_fu_735_p3;
wire   [31:0] tmp_5_fu_771_p1;
wire   [31:0] tmp_5_fu_771_p2;
wire   [31:0] tmp_5_fu_771_p3;
wire   [31:0] tmp_5_fu_771_p4;
wire   [31:0] sel_tmp5_fu_824_p3;
wire   [31:0] sel_tmp6_fu_831_p3;
wire   [31:0] a_row_1_fu_838_p3;
wire   [31:0] a_row_1_1_fu_845_p3;
wire   [31:0] a_row_1_2_fu_852_p3;
wire   [31:0] a_row_1_3_fu_859_p3;
wire   [31:0] b_copy_1_3_fu_873_p3;
wire   [31:0] b_copy_1_3_4_fu_880_p3;
wire   [31:0] b_copy_1_3_5_fu_894_p3;
wire   [31:0] b_copy_1_3_6_fu_901_p3;
wire   [31:0] b_copy_1_3_9_fu_915_p3;
wire   [31:0] b_copy_1_3_2_fu_887_p3;
wire   [31:0] b_copy_1_3_7_fu_908_p3;
wire   [31:0] b_copy_1_3_14_fu_922_p3;
wire   [31:0] b_copy_1_3_15_fu_929_p3;
wire   [31:0] tmp_6_fu_968_p1;
wire   [31:0] tmp_6_fu_968_p2;
wire   [31:0] tmp_6_fu_968_p3;
wire   [31:0] tmp_6_fu_968_p4;
wire   [31:0] sel_tmp7_fu_1021_p3;
wire   [31:0] sel_tmp8_fu_1028_p3;
wire   [31:0] a_row_2_fu_1035_p3;
wire   [31:0] a_row_2_1_fu_1042_p3;
wire   [31:0] a_row_2_2_fu_1049_p3;
wire   [31:0] a_row_2_3_fu_1056_p3;
wire   [31:0] b_copy_2_3_fu_1070_p3;
wire   [31:0] b_copy_2_3_4_fu_1077_p3;
wire   [31:0] b_copy_2_3_5_fu_1091_p3;
wire   [31:0] b_copy_2_3_6_fu_1098_p3;
wire   [31:0] b_copy_2_3_9_fu_1112_p3;
wire   [31:0] b_copy_2_3_2_fu_1084_p3;
wire   [31:0] b_copy_2_3_7_fu_1105_p3;
wire   [31:0] b_copy_2_3_14_fu_1119_p3;
wire   [31:0] b_copy_2_3_15_fu_1126_p3;
wire   [31:0] tmp_7_fu_1165_p1;
wire   [31:0] tmp_7_fu_1165_p2;
wire   [31:0] tmp_7_fu_1165_p3;
wire   [31:0] tmp_7_fu_1165_p4;
wire   [31:0] sel_tmp9_fu_1218_p3;
wire   [31:0] sel_tmp_fu_1225_p3;
wire   [31:0] sel_tmp11_fu_1232_p3;
wire   [31:0] b_copy_3_3_fu_1246_p3;
wire   [31:0] b_copy_3_3_4_fu_1253_p3;
wire   [31:0] b_copy_3_3_5_fu_1267_p3;
wire   [31:0] b_copy_3_3_6_fu_1274_p3;
wire   [31:0] b_copy_3_3_9_fu_1288_p3;
wire   [31:0] b_copy_3_3_2_fu_1260_p3;
wire   [31:0] b_copy_3_3_7_fu_1281_p3;
wire   [31:0] b_copy_3_3_14_fu_1295_p3;
wire   [31:0] b_copy_3_3_15_fu_1302_p3;
wire   [31:0] tmp_8_fu_1341_p1;
wire   [31:0] tmp_8_fu_1341_p2;
wire   [31:0] tmp_8_fu_1341_p3;
wire   [31:0] tmp_8_fu_1341_p4;
wire   [31:0] tmp1_fu_1387_p2;
wire   [0:0] ap_CS_fsm_state14;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

matrixmul_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_42_bkb_U0(
    .din1(tmp_5_fu_771_p1),
    .din2(tmp_5_fu_771_p2),
    .din3(tmp_5_fu_771_p3),
    .din4(tmp_5_fu_771_p4),
    .din5(tmp_reg_1691),
    .dout(tmp_5_fu_771_p6)
);

matrixmul_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32scud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_row_0_4_reg_1721),
    .din1(tmp_5_reg_1770),
    .ce(1'b1),
    .dout(grp_fu_964_p2)
);

matrixmul_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_42_bkb_U2(
    .din1(tmp_6_fu_968_p1),
    .din2(tmp_6_fu_968_p2),
    .din3(tmp_6_fu_968_p3),
    .din4(tmp_6_fu_968_p4),
    .din5(tmp_reg_1691),
    .dout(tmp_6_fu_968_p6)
);

matrixmul_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32scud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_row_1_4_reg_1775),
    .din1(tmp_6_reg_1785),
    .ce(1'b1),
    .dout(grp_fu_1161_p2)
);

matrixmul_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_42_bkb_U4(
    .din1(tmp_7_fu_1165_p1),
    .din2(tmp_7_fu_1165_p2),
    .din3(tmp_7_fu_1165_p3),
    .din4(tmp_7_fu_1165_p4),
    .din5(tmp_reg_1691),
    .dout(tmp_7_fu_1165_p6)
);

matrixmul_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32scud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_row_2_4_reg_1790),
    .din1(tmp_7_reg_1800),
    .ce(1'b1),
    .dout(grp_fu_1337_p2)
);

matrixmul_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_42_bkb_U6(
    .din1(tmp_8_fu_1341_p1),
    .din2(tmp_8_fu_1341_p2),
    .din3(tmp_8_fu_1341_p3),
    .din4(tmp_8_fu_1341_p4),
    .din5(tmp_reg_1691),
    .dout(tmp_8_fu_1341_p6)
);

matrixmul_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32scud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_row_3_2_reg_1825),
    .din1(tmp_8_reg_1830),
    .ce(1'b1),
    .dout(grp_fu_1379_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_447_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & ~(exitcond_flatten_reg_1600 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_425 <= sum4_t_mid2_v_v_reg_1632;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_425 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_414 <= indvar_flatten_next_reg_1604;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_414 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_reg_436 <= j_1_reg_1702;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_436 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_10_addr_reg_1815 <= j_cast_reg_1657;
        a_11_addr_reg_1820 <= j_cast_reg_1657;
        a_8_addr_reg_1805 <= j_cast_reg_1657;
        a_9_addr_reg_1810 <= j_cast_reg_1657;
        a_row_2_4_reg_1790 <= a_row_2_4_fu_1063_p3;
        tmp_7_reg_1800 <= tmp_7_fu_1165_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1600 == 1'b0))) begin
        a_row_0_4_reg_1721 <= a_row_0_4_fu_648_p3;
        sel_tmp10_reg_1707 <= sel_tmp10_fu_618_p2;
        sel_tmp12_reg_1714 <= sel_tmp12_fu_622_p2;
        sel_tmp13_reg_1726 <= sel_tmp13_fu_656_p2;
        sel_tmp14_reg_1736 <= sel_tmp14_fu_669_p2;
        sel_tmp15_reg_1749 <= sel_tmp15_fu_682_p2;
        tmp_5_reg_1770 <= tmp_5_fu_771_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1600 == 1'b0))) begin
        a_row_0_5_fu_98 <= a_row_0_4_fu_648_p3;
        b_copy_0_3_11_fu_114 <= b_copy_0_3_18_fu_764_p3;
        b_copy_0_3_12_fu_122 <= b_copy_0_3_16_fu_750_p3;
        b_copy_0_3_1_fu_126 <= b_copy_0_3_3_fu_743_p3;
        b_copy_0_3_8_fu_118 <= b_copy_0_3_17_fu_757_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_row_1_4_reg_1775 <= a_row_1_4_fu_866_p3;
        tmp_6_reg_1785 <= tmp_6_fu_968_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_row_1_5_fu_102 <= a_row_1_4_fu_866_p3;
        b_copy_1_3_11_fu_130 <= b_copy_1_3_18_fu_957_p3;
        b_copy_1_3_12_fu_138 <= b_copy_1_3_16_fu_943_p3;
        b_copy_1_3_1_fu_142 <= b_copy_1_3_3_fu_936_p3;
        b_copy_1_3_8_fu_134 <= b_copy_1_3_17_fu_950_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_row_2_5_fu_106 <= a_row_2_4_fu_1063_p3;
        b_copy_2_3_11_fu_146 <= b_copy_2_3_18_fu_1154_p3;
        b_copy_2_3_12_fu_154 <= b_copy_2_3_16_fu_1140_p3;
        b_copy_2_3_1_fu_158 <= b_copy_2_3_3_fu_1133_p3;
        b_copy_2_3_8_fu_150 <= b_copy_2_3_17_fu_1147_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        a_row_3_1_fu_110 <= a_row_3_2_fu_1239_p3;
        b_copy_3_3_11_fu_162 <= b_copy_3_3_18_fu_1330_p3;
        b_copy_3_3_12_fu_170 <= b_copy_3_3_16_fu_1316_p3;
        b_copy_3_3_1_fu_174 <= b_copy_3_3_3_fu_1309_p3;
        b_copy_3_3_8_fu_166 <= b_copy_3_3_17_fu_1323_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1600 == 1'b0))) begin
        a_row_3_2_reg_1825 <= a_row_3_2_fu_1239_p3;
        tmp_8_reg_1830 <= tmp_8_fu_1341_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
        ap_pipeline_reg_pp0_iter1_a_10_addr_reg_1815 <= a_10_addr_reg_1815;
        ap_pipeline_reg_pp0_iter1_a_11_addr_reg_1820 <= a_11_addr_reg_1820;
        ap_pipeline_reg_pp0_iter1_a_8_addr_reg_1805 <= a_8_addr_reg_1805;
        ap_pipeline_reg_pp0_iter1_a_9_addr_reg_1810 <= a_9_addr_reg_1810;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600 <= exitcond_flatten_reg_1600;
        ap_pipeline_reg_pp0_iter1_sum4_t_mid2_reg_1637[2 : 0] <= sum4_t_mid2_reg_1637[2 : 0];
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1600 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600;
        ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637[2 : 0] <= ap_pipeline_reg_pp0_iter1_sum4_t_mid2_reg_1637[2 : 0];
        exitcond_flatten_reg_1600 <= exitcond_flatten_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_1604 <= indvar_flatten_next_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_447_p2 == 1'b0))) begin
        j_1_reg_1702 <= j_1_fu_576_p2;
        sum4_t_mid2_v_v_reg_1632 <= sum4_t_mid2_v_v_fu_499_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_447_p2 == 1'b0))) begin
        j_cast_reg_1657[2 : 0] <= j_cast_fu_549_p1[2 : 0];
        sel_tmp2_mid2_reg_1641 <= sel_tmp2_mid2_fu_521_p3;
        sel_tmp4_mid2_reg_1649 <= sel_tmp4_mid2_fu_541_p3;
        sum4_t_mid2_reg_1637[2 : 0] <= sum4_t_mid2_fu_507_p3[2 : 0];
        tmp_3_reg_1668 <= tmp_3_fu_554_p2;
        tmp_4_reg_1678 <= tmp_4_fu_566_p2;
        tmp_mid2_reg_1609 <= tmp_mid2_fu_491_p3;
        tmp_reg_1691 <= tmp_fu_572_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1600 == 1'b0))) begin
        tmp9_reg_1855 <= tmp9_fu_1383_p2;
        tmp_9_3_reg_1850 <= grp_fu_1379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600 == 1'b0))) begin
        tmp_9_1_reg_1840 <= grp_fu_1161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1600 == 1'b0))) begin
        tmp_9_2_reg_1845 <= grp_fu_1337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1600 == 1'b0))) begin
        tmp_9_reg_1835 <= grp_fu_964_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_0_Addr_A_orig = ap_const_lv32_3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_0_Addr_A_orig = ap_const_lv32_2;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_0_Addr_A_orig = ap_const_lv32_1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_0_Addr_A_orig = ap_const_lv32_0;
        end else begin
            a_0_Addr_A_orig = 'bx;
        end
    end else begin
        a_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        a_0_EN_A = 1'b1;
    end else begin
        a_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        a_10_EN_A = 1'b1;
    end else begin
        a_10_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 == ap_const_lv4_A))) begin
        a_10_WEN_A = ap_const_lv4_F;
    end else begin
        a_10_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        a_11_EN_A = 1'b1;
    end else begin
        a_11_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 == ap_const_lv4_8) & ~(ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 == ap_const_lv4_9) & ~(ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 == ap_const_lv4_A))) begin
        a_11_WEN_A = ap_const_lv4_F;
    end else begin
        a_11_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_1_Addr_A_orig = ap_const_lv32_3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_1_Addr_A_orig = ap_const_lv32_2;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_1_Addr_A_orig = ap_const_lv32_1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_1_Addr_A_orig = ap_const_lv32_0;
        end else begin
            a_1_Addr_A_orig = 'bx;
        end
    end else begin
        a_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        a_1_EN_A = 1'b1;
    end else begin
        a_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_2_Addr_A_orig = ap_const_lv32_3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_2_Addr_A_orig = ap_const_lv32_2;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_2_Addr_A_orig = ap_const_lv32_1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_2_Addr_A_orig = ap_const_lv32_0;
        end else begin
            a_2_Addr_A_orig = 'bx;
        end
    end else begin
        a_2_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        a_2_EN_A = 1'b1;
    end else begin
        a_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_3_Addr_A_orig = ap_const_lv32_3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_3_Addr_A_orig = ap_const_lv32_2;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_3_Addr_A_orig = ap_const_lv32_1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_3_Addr_A_orig = ap_const_lv32_0;
        end else begin
            a_3_Addr_A_orig = 'bx;
        end
    end else begin
        a_3_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        a_3_EN_A = 1'b1;
    end else begin
        a_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_4_EN_A = 1'b1;
    end else begin
        a_4_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_5_EN_A = 1'b1;
    end else begin
        a_5_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_6_EN_A = 1'b1;
    end else begin
        a_6_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_7_EN_A = 1'b1;
    end else begin
        a_7_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        a_8_EN_A = 1'b1;
    end else begin
        a_8_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 == ap_const_lv4_8))) begin
        a_8_WEN_A = ap_const_lv4_F;
    end else begin
        a_8_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        a_9_EN_A = 1'b1;
    end else begin
        a_9_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637 == ap_const_lv4_9))) begin
        a_9_WEN_A = ap_const_lv4_F;
    end else begin
        a_9_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_429_p4 = sum4_t_mid2_v_v_reg_1632;
    end else begin
        i_phi_fu_429_p4 = i_reg_425;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_phi_fu_418_p4 = indvar_flatten_next_reg_1604;
    end else begin
        indvar_flatten_phi_fu_418_p4 = indvar_flatten_reg_414;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1600 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_phi_fu_440_p4 = j_1_reg_1702;
    end else begin
        j_phi_fu_440_p4 = j_reg_436;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_447_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage2;
        end
        ap_ST_fsm_pp0_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (~((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << ap_const_lv32_2;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = ap_const_lv32_0;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = ap_const_lv4_0;

assign a_10_Addr_A = a_10_Addr_A_orig << ap_const_lv32_2;

assign a_10_Addr_A_orig = ap_pipeline_reg_pp0_iter1_a_10_addr_reg_1815;

assign a_10_Clk_A = ap_clk;

assign a_10_Din_A = tmp_2_3_fu_1391_p2;

assign a_10_Rst_A = ap_rst;

assign a_11_Addr_A = a_11_Addr_A_orig << ap_const_lv32_2;

assign a_11_Addr_A_orig = ap_pipeline_reg_pp0_iter1_a_11_addr_reg_1820;

assign a_11_Clk_A = ap_clk;

assign a_11_Din_A = tmp_2_3_fu_1391_p2;

assign a_11_Rst_A = ap_rst;

assign a_1_Addr_A = a_1_Addr_A_orig << ap_const_lv32_2;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = ap_const_lv32_0;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = ap_const_lv4_0;

assign a_2_Addr_A = a_2_Addr_A_orig << ap_const_lv32_2;

assign a_2_Clk_A = ap_clk;

assign a_2_Din_A = ap_const_lv32_0;

assign a_2_Rst_A = ap_rst;

assign a_2_WEN_A = ap_const_lv4_0;

assign a_3_Addr_A = a_3_Addr_A_orig << ap_const_lv32_2;

assign a_3_Clk_A = ap_clk;

assign a_3_Din_A = ap_const_lv32_0;

assign a_3_Rst_A = ap_rst;

assign a_3_WEN_A = ap_const_lv4_0;

assign a_4_Addr_A = j_cast_fu_549_p1 << ap_const_lv32_2;

assign a_4_Clk_A = ap_clk;

assign a_4_Din_A = ap_const_lv32_0;

assign a_4_Rst_A = ap_rst;

assign a_4_WEN_A = ap_const_lv4_0;

assign a_5_Addr_A = j_cast_reg_1657 << ap_const_lv32_2;

assign a_5_Clk_A = ap_clk;

assign a_5_Din_A = ap_const_lv32_0;

assign a_5_Rst_A = ap_rst;

assign a_5_WEN_A = ap_const_lv4_0;

assign a_6_Addr_A = j_cast_reg_1657 << ap_const_lv32_2;

assign a_6_Clk_A = ap_clk;

assign a_6_Din_A = ap_const_lv32_0;

assign a_6_Rst_A = ap_rst;

assign a_6_WEN_A = ap_const_lv4_0;

assign a_7_Addr_A = j_cast_reg_1657 << ap_const_lv32_2;

assign a_7_Clk_A = ap_clk;

assign a_7_Din_A = ap_const_lv32_0;

assign a_7_Rst_A = ap_rst;

assign a_7_WEN_A = ap_const_lv4_0;

assign a_8_Addr_A = a_8_Addr_A_orig << ap_const_lv32_2;

assign a_8_Addr_A_orig = ap_pipeline_reg_pp0_iter1_a_8_addr_reg_1805;

assign a_8_Clk_A = ap_clk;

assign a_8_Din_A = tmp_2_3_fu_1391_p2;

assign a_8_Rst_A = ap_rst;

assign a_9_Addr_A = a_9_Addr_A_orig << ap_const_lv32_2;

assign a_9_Addr_A_orig = ap_pipeline_reg_pp0_iter1_a_9_addr_reg_1810;

assign a_9_Clk_A = ap_clk;

assign a_9_Din_A = tmp_2_3_fu_1391_p2;

assign a_9_Rst_A = ap_rst;

assign a_row_0_1_fu_626_p3 = ((tmp_3_reg_1668[0:0] === 1'b1) ? a_row_0_fu_611_p3 : a_row_0_5_fu_98);

assign a_row_0_2_fu_633_p3 = ((tmp_4_reg_1678[0:0] === 1'b1) ? a_row_0_fu_611_p3 : a_row_0_1_fu_626_p3);

assign a_row_0_3_fu_640_p3 = ((sel_tmp10_fu_618_p2[0:0] === 1'b1) ? a_row_0_fu_611_p3 : a_row_0_2_fu_633_p3);

assign a_row_0_4_fu_648_p3 = ((sel_tmp12_fu_622_p2[0:0] === 1'b1) ? a_row_0_fu_611_p3 : a_row_0_3_fu_640_p3);

assign a_row_0_fu_611_p3 = ((sel_tmp4_mid2_reg_1649[0:0] === 1'b1) ? a_2_Dout_A : sel_tmp3_fu_604_p3);

assign a_row_1_1_fu_845_p3 = ((tmp_3_reg_1668[0:0] === 1'b1) ? a_row_1_fu_838_p3 : a_row_1_5_fu_102);

assign a_row_1_2_fu_852_p3 = ((tmp_4_reg_1678[0:0] === 1'b1) ? a_row_1_fu_838_p3 : a_row_1_1_fu_845_p3);

assign a_row_1_3_fu_859_p3 = ((sel_tmp10_reg_1707[0:0] === 1'b1) ? a_row_1_fu_838_p3 : a_row_1_2_fu_852_p3);

assign a_row_1_4_fu_866_p3 = ((sel_tmp12_reg_1714[0:0] === 1'b1) ? a_row_1_fu_838_p3 : a_row_1_3_fu_859_p3);

assign a_row_1_fu_838_p3 = ((sel_tmp4_mid2_reg_1649[0:0] === 1'b1) ? a_2_Dout_A : sel_tmp6_fu_831_p3);

assign a_row_2_1_fu_1042_p3 = ((tmp_3_reg_1668[0:0] === 1'b1) ? a_row_2_fu_1035_p3 : a_row_2_5_fu_106);

assign a_row_2_2_fu_1049_p3 = ((tmp_4_reg_1678[0:0] === 1'b1) ? a_row_2_fu_1035_p3 : a_row_2_1_fu_1042_p3);

assign a_row_2_3_fu_1056_p3 = ((sel_tmp10_reg_1707[0:0] === 1'b1) ? a_row_2_fu_1035_p3 : a_row_2_2_fu_1049_p3);

assign a_row_2_4_fu_1063_p3 = ((sel_tmp12_reg_1714[0:0] === 1'b1) ? a_row_2_fu_1035_p3 : a_row_2_3_fu_1056_p3);

assign a_row_2_fu_1035_p3 = ((sel_tmp4_mid2_reg_1649[0:0] === 1'b1) ? a_2_Dout_A : sel_tmp8_fu_1028_p3);

assign a_row_3_2_fu_1239_p3 = ((sel_tmp12_reg_1714[0:0] === 1'b1) ? a_2_Dout_A : sel_tmp11_fu_1232_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_5];

assign b_copy_0_3_14_fu_727_p3 = ((sel_tmp15_fu_682_p2[0:0] === 1'b1) ? b_copy_0_3_8_fu_118 : b_copy_0_3_9_fu_719_p3);

assign b_copy_0_3_15_fu_735_p3 = ((sel_tmp15_fu_682_p2[0:0] === 1'b1) ? a_4_Dout_A : b_copy_0_3_11_fu_114);

assign b_copy_0_3_16_fu_750_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_0_3_7_fu_711_p3 : b_copy_0_3_12_fu_122);

assign b_copy_0_3_17_fu_757_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_0_3_14_fu_727_p3 : b_copy_0_3_8_fu_118);

assign b_copy_0_3_18_fu_764_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_0_3_15_fu_735_p3 : b_copy_0_3_11_fu_114);

assign b_copy_0_3_2_fu_687_p3 = ((sel_tmp15_fu_682_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_126 : b_copy_0_3_4_fu_674_p3);

assign b_copy_0_3_3_fu_743_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_0_3_2_fu_687_p3 : b_copy_0_3_1_fu_126);

assign b_copy_0_3_4_fu_674_p3 = ((sel_tmp14_fu_669_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_126 : b_copy_0_3_fu_661_p3);

assign b_copy_0_3_5_fu_695_p3 = ((sel_tmp13_fu_656_p2[0:0] === 1'b1) ? a_4_Dout_A : b_copy_0_3_12_fu_122);

assign b_copy_0_3_6_fu_703_p3 = ((sel_tmp14_fu_669_p2[0:0] === 1'b1) ? b_copy_0_3_12_fu_122 : b_copy_0_3_5_fu_695_p3);

assign b_copy_0_3_7_fu_711_p3 = ((sel_tmp15_fu_682_p2[0:0] === 1'b1) ? b_copy_0_3_12_fu_122 : b_copy_0_3_6_fu_703_p3);

assign b_copy_0_3_9_fu_719_p3 = ((sel_tmp14_fu_669_p2[0:0] === 1'b1) ? a_4_Dout_A : b_copy_0_3_8_fu_118);

assign b_copy_0_3_fu_661_p3 = ((sel_tmp13_fu_656_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_126 : a_4_Dout_A);

assign b_copy_1_3_14_fu_922_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_1_3_8_fu_134 : b_copy_1_3_9_fu_915_p3);

assign b_copy_1_3_15_fu_929_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? a_5_Dout_A : b_copy_1_3_11_fu_130);

assign b_copy_1_3_16_fu_943_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_1_3_7_fu_908_p3 : b_copy_1_3_12_fu_138);

assign b_copy_1_3_17_fu_950_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_1_3_14_fu_922_p3 : b_copy_1_3_8_fu_134);

assign b_copy_1_3_18_fu_957_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_1_3_15_fu_929_p3 : b_copy_1_3_11_fu_130);

assign b_copy_1_3_2_fu_887_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_1_3_1_fu_142 : b_copy_1_3_4_fu_880_p3);

assign b_copy_1_3_3_fu_936_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_1_3_2_fu_887_p3 : b_copy_1_3_1_fu_142);

assign b_copy_1_3_4_fu_880_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? b_copy_1_3_1_fu_142 : b_copy_1_3_fu_873_p3);

assign b_copy_1_3_5_fu_894_p3 = ((sel_tmp13_reg_1726[0:0] === 1'b1) ? a_5_Dout_A : b_copy_1_3_12_fu_138);

assign b_copy_1_3_6_fu_901_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? b_copy_1_3_12_fu_138 : b_copy_1_3_5_fu_894_p3);

assign b_copy_1_3_7_fu_908_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_1_3_12_fu_138 : b_copy_1_3_6_fu_901_p3);

assign b_copy_1_3_9_fu_915_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? a_5_Dout_A : b_copy_1_3_8_fu_134);

assign b_copy_1_3_fu_873_p3 = ((sel_tmp13_reg_1726[0:0] === 1'b1) ? b_copy_1_3_1_fu_142 : a_5_Dout_A);

assign b_copy_2_3_14_fu_1119_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_2_3_8_fu_150 : b_copy_2_3_9_fu_1112_p3);

assign b_copy_2_3_15_fu_1126_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? a_6_Dout_A : b_copy_2_3_11_fu_146);

assign b_copy_2_3_16_fu_1140_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_2_3_7_fu_1105_p3 : b_copy_2_3_12_fu_154);

assign b_copy_2_3_17_fu_1147_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_2_3_14_fu_1119_p3 : b_copy_2_3_8_fu_150);

assign b_copy_2_3_18_fu_1154_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_2_3_15_fu_1126_p3 : b_copy_2_3_11_fu_146);

assign b_copy_2_3_2_fu_1084_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_2_3_1_fu_158 : b_copy_2_3_4_fu_1077_p3);

assign b_copy_2_3_3_fu_1133_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_2_3_2_fu_1084_p3 : b_copy_2_3_1_fu_158);

assign b_copy_2_3_4_fu_1077_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? b_copy_2_3_1_fu_158 : b_copy_2_3_fu_1070_p3);

assign b_copy_2_3_5_fu_1091_p3 = ((sel_tmp13_reg_1726[0:0] === 1'b1) ? a_6_Dout_A : b_copy_2_3_12_fu_154);

assign b_copy_2_3_6_fu_1098_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? b_copy_2_3_12_fu_154 : b_copy_2_3_5_fu_1091_p3);

assign b_copy_2_3_7_fu_1105_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_2_3_12_fu_154 : b_copy_2_3_6_fu_1098_p3);

assign b_copy_2_3_9_fu_1112_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? a_6_Dout_A : b_copy_2_3_8_fu_150);

assign b_copy_2_3_fu_1070_p3 = ((sel_tmp13_reg_1726[0:0] === 1'b1) ? b_copy_2_3_1_fu_158 : a_6_Dout_A);

assign b_copy_3_3_14_fu_1295_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_3_3_8_fu_166 : b_copy_3_3_9_fu_1288_p3);

assign b_copy_3_3_15_fu_1302_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? a_7_Dout_A : b_copy_3_3_11_fu_162);

assign b_copy_3_3_16_fu_1316_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_3_3_7_fu_1281_p3 : b_copy_3_3_12_fu_170);

assign b_copy_3_3_17_fu_1323_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_3_3_14_fu_1295_p3 : b_copy_3_3_8_fu_166);

assign b_copy_3_3_18_fu_1330_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_3_3_15_fu_1302_p3 : b_copy_3_3_11_fu_162);

assign b_copy_3_3_2_fu_1260_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_3_3_1_fu_174 : b_copy_3_3_4_fu_1253_p3);

assign b_copy_3_3_3_fu_1309_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_3_3_2_fu_1260_p3 : b_copy_3_3_1_fu_174);

assign b_copy_3_3_4_fu_1253_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? b_copy_3_3_1_fu_174 : b_copy_3_3_fu_1246_p3);

assign b_copy_3_3_5_fu_1267_p3 = ((sel_tmp13_reg_1726[0:0] === 1'b1) ? a_7_Dout_A : b_copy_3_3_12_fu_170);

assign b_copy_3_3_6_fu_1274_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? b_copy_3_3_12_fu_170 : b_copy_3_3_5_fu_1267_p3);

assign b_copy_3_3_7_fu_1281_p3 = ((sel_tmp15_reg_1749[0:0] === 1'b1) ? b_copy_3_3_12_fu_170 : b_copy_3_3_6_fu_1274_p3);

assign b_copy_3_3_9_fu_1288_p3 = ((sel_tmp14_reg_1736[0:0] === 1'b1) ? a_7_Dout_A : b_copy_3_3_8_fu_166);

assign b_copy_3_3_fu_1246_p3 = ((sel_tmp13_reg_1726[0:0] === 1'b1) ? b_copy_3_3_1_fu_174 : a_7_Dout_A);

assign exitcond_flatten_fu_447_p2 = ((indvar_flatten_phi_fu_418_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_459_p2 = ((j_phi_fu_440_p4 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign i_s_fu_473_p2 = (ap_const_lv3_1 + i_phi_fu_429_p4);

assign indvar_flatten_next_fu_453_p2 = (indvar_flatten_phi_fu_418_p4 + ap_const_lv5_1);

assign j_1_fu_576_p2 = (j_mid2_fu_465_p3 + ap_const_lv3_1);

assign j_cast_fu_549_p1 = j_mid2_fu_465_p3;

assign j_mid2_fu_465_p3 = ((exitcond_fu_459_p2[0:0] === 1'b1) ? ap_const_lv3_0 : j_phi_fu_440_p4);

assign sel_tmp10_fu_618_p2 = (tmp_3_reg_1668 & sel_tmp2_mid2_reg_1641);

assign sel_tmp11_fu_1232_p3 = ((sel_tmp10_reg_1707[0:0] === 1'b1) ? a_1_Dout_A : sel_tmp_fu_1225_p3);

assign sel_tmp12_fu_622_p2 = (tmp_3_reg_1668 & sel_tmp4_mid2_reg_1649);

assign sel_tmp13_fu_656_p2 = ((tmp_reg_1691 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign sel_tmp14_fu_669_p2 = ((tmp_reg_1691 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign sel_tmp15_fu_682_p2 = ((tmp_reg_1691 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign sel_tmp1_fu_597_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? a_0_Dout_A : a_3_Dout_A);

assign sel_tmp2_fu_515_p2 = ((i_phi_fu_429_p4 == ap_const_lv3_1) ? 1'b1 : 1'b0);

assign sel_tmp2_mid2_fu_521_p3 = ((exitcond_fu_459_p2[0:0] === 1'b1) ? tmp8_fu_485_p2 : sel_tmp2_fu_515_p2);

assign sel_tmp3_fu_604_p3 = ((sel_tmp2_mid2_reg_1641[0:0] === 1'b1) ? a_1_Dout_A : sel_tmp1_fu_597_p3);

assign sel_tmp4_fu_535_p2 = ((i_phi_fu_429_p4 == ap_const_lv3_2) ? 1'b1 : 1'b0);

assign sel_tmp4_mid1_fu_529_p2 = ((i_s_fu_473_p2 == ap_const_lv3_2) ? 1'b1 : 1'b0);

assign sel_tmp4_mid2_fu_541_p3 = ((exitcond_fu_459_p2[0:0] === 1'b1) ? sel_tmp4_mid1_fu_529_p2 : sel_tmp4_fu_535_p2);

assign sel_tmp5_fu_824_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? a_0_Dout_A : a_3_Dout_A);

assign sel_tmp6_fu_831_p3 = ((sel_tmp2_mid2_reg_1641[0:0] === 1'b1) ? a_1_Dout_A : sel_tmp5_fu_824_p3);

assign sel_tmp7_fu_1021_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? a_0_Dout_A : a_3_Dout_A);

assign sel_tmp8_fu_1028_p3 = ((sel_tmp2_mid2_reg_1641[0:0] === 1'b1) ? a_1_Dout_A : sel_tmp7_fu_1021_p3);

assign sel_tmp9_fu_1218_p3 = ((tmp_3_reg_1668[0:0] === 1'b1) ? a_3_Dout_A : a_row_3_1_fu_110);

assign sel_tmp_fu_1225_p3 = ((tmp_4_reg_1678[0:0] === 1'b1) ? a_0_Dout_A : sel_tmp9_fu_1218_p3);

assign sum4_t_mid2_fu_507_p3 = {{1'b1}, {sum4_t_mid2_v_v_fu_499_p3}};

assign sum4_t_mid2_v_v_fu_499_p3 = ((exitcond_fu_459_p2[0:0] === 1'b1) ? i_s_fu_473_p2 : i_phi_fu_429_p4);

assign tmp1_fu_1387_p2 = (tmp_9_3_reg_1850 + tmp_9_1_reg_1840);

assign tmp8_fu_485_p2 = ((i_phi_fu_429_p4 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp9_fu_1383_p2 = (tmp_9_2_reg_1845 + tmp_9_reg_1835);

assign tmp_2_3_fu_1391_p2 = (tmp9_reg_1855 + tmp1_fu_1387_p2);

assign tmp_2_fu_560_p2 = (j_mid2_fu_465_p3 | sum4_t_mid2_v_v_fu_499_p3);

assign tmp_3_fu_554_p2 = ((j_mid2_fu_465_p3 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_4_fu_566_p2 = ((tmp_2_fu_560_p2 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_5_fu_771_p1 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_0_3_15_fu_735_p3 : b_copy_0_3_11_fu_114);

assign tmp_5_fu_771_p2 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_0_3_14_fu_727_p3 : b_copy_0_3_8_fu_118);

assign tmp_5_fu_771_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_0_3_7_fu_711_p3 : b_copy_0_3_12_fu_122);

assign tmp_5_fu_771_p4 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_0_3_2_fu_687_p3 : b_copy_0_3_1_fu_126);

assign tmp_6_fu_968_p1 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_1_3_15_fu_929_p3 : b_copy_1_3_11_fu_130);

assign tmp_6_fu_968_p2 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_1_3_14_fu_922_p3 : b_copy_1_3_8_fu_134);

assign tmp_6_fu_968_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_1_3_7_fu_908_p3 : b_copy_1_3_12_fu_138);

assign tmp_6_fu_968_p4 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_1_3_2_fu_887_p3 : b_copy_1_3_1_fu_142);

assign tmp_7_fu_1165_p1 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_2_3_15_fu_1126_p3 : b_copy_2_3_11_fu_146);

assign tmp_7_fu_1165_p2 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_2_3_14_fu_1119_p3 : b_copy_2_3_8_fu_150);

assign tmp_7_fu_1165_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_2_3_7_fu_1105_p3 : b_copy_2_3_12_fu_154);

assign tmp_7_fu_1165_p4 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_2_3_2_fu_1084_p3 : b_copy_2_3_1_fu_158);

assign tmp_8_fu_1341_p1 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_3_3_15_fu_1302_p3 : b_copy_3_3_11_fu_162);

assign tmp_8_fu_1341_p2 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_3_3_14_fu_1295_p3 : b_copy_3_3_8_fu_166);

assign tmp_8_fu_1341_p3 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_3_3_7_fu_1281_p3 : b_copy_3_3_12_fu_170);

assign tmp_8_fu_1341_p4 = ((tmp_mid2_reg_1609[0:0] === 1'b1) ? b_copy_3_3_2_fu_1260_p3 : b_copy_3_3_1_fu_174);

assign tmp_fu_572_p1 = j_mid2_fu_465_p3[1:0];

assign tmp_mid1_fu_479_p2 = ((i_s_fu_473_p2 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_491_p3 = ((exitcond_fu_459_p2[0:0] === 1'b1) ? tmp_mid1_fu_479_p2 : tmp8_fu_485_p2);

always @ (posedge ap_clk) begin
    sum4_t_mid2_reg_1637[3] <= 1'b1;
    ap_pipeline_reg_pp0_iter1_sum4_t_mid2_reg_1637[3] <= 1'b1;
    ap_pipeline_reg_pp0_iter2_sum4_t_mid2_reg_1637[3] <= 1'b1;
    j_cast_reg_1657[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //matrixmul
