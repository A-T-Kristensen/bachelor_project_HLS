	.text
	.file	"susan.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.regioninstrument.renamemain.O3.bc"
	.section	.debug_info,"",@progbits
.Lsection_info:
	.section	.debug_abbrev,"",@progbits
.Lsection_abbrev:
	.section	.debug_line,"",@progbits
.Lsection_line:
	.section	.debug_pubnames,"",@progbits
	.section	.debug_pubtypes,"",@progbits
	.section	.debug_str,"MS",@progbits,1
.Linfo_string:
	.section	.debug_loc,"",@progbits
.Lsection_debug_loc:
	.section	.debug_ranges,"",@progbits
.Ldebug_range:
	.file	1 "./wccfile.h"
	.file	2 "susan.c"
	.text
	.globl	exit_error
	.align	16, 0x90
	.type	exit_error,@function
exit_error:                             # @exit_error
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp0:
	.cfi_def_cfa_offset 16
.Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
.Ltmp3:
	.cfi_offset %rbx, -24
	#DEBUG_VALUE: exit_error:message <- RDI
	movabsq	$-7131228994629441968, %rbx # imm = 0x9D08C90323256650
	xorl	%esi, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
	#DEBUG_VALUE: exit_error:j <- 1
	#DEBUG_VALUE: exit_error:i <- 0
	xorl	%esi, %esi
	movq	%rbx, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp4:
	.size	exit_error, .Ltmp4-exit_error
	.cfi_endproc

	.globl	getint
	.align	16, 0x90
	.type	getint,@function
getint:                                 # @getint
.Lfunc_begin1:
	.loc	2 303 0                 # susan.c:303:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp5:
	.cfi_def_cfa_offset 16
.Ltmp6:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp7:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$10024, %rsp            # imm = 0x2728
.Ltmp8:
	.cfi_offset %rbx, -56
.Ltmp9:
	.cfi_offset %r12, -48
.Ltmp10:
	.cfi_offset %r13, -40
.Ltmp11:
	.cfi_offset %r14, -32
.Ltmp12:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: getint:fd <- RDI
	movq	%rdi, %rbx
.Ltmp13:
	#DEBUG_VALUE: getint:fd <- RBX
	movq	%rbx, -10056(%rbp)      # 8-byte Spill
	movabsq	$-1357713451555161958, %rdi # imm = 0xED286ECF2D48F89A
	movabsq	$-3318319763266470995, %r14 # imm = 0xD1F2F5C1AB57FBAD
	xorl	%r15d, %r15d
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$14, %edi
	movl	$2, %esi
	callq	_KPrepRTable
	movabsq	$7598259771463498621, %rdi # imm = 0x697271013D38FB7D
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$1, %r13d
	movl	$1, %edi
	callq	_KLinkReturn
	.loc	2 307 7 prologue_end    # susan.c:307:7
.Ltmp14:
	movq	%rbx, %rdi
.Ltmp15:
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	callq	wccfgetc
	movl	%eax, %r12d
.Ltmp16:
	#DEBUG_VALUE: getint:c <- R12D
	movl	$1, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movabsq	$-3664318099131056514, %r14 # imm = 0xCD25BA1A6D423E7E
	jmp	.LBB1_1
.Ltmp17:
	.align	16, 0x90
.LBB1_6:                                # %if.end8
                                        #   in Loop: Header=BB1_1 Depth=1
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	movl	$6, %r15d
	movl	$6, %edi
	callq	_KPushCDep
	xorl	%esi, %esi
	movabsq	$-6176752052590582419, %rdi # imm = 0xAA47C4BBE7AC656D
	callq	_KPrepCall
	movl	$2, %r13d
	movl	$2, %edi
	callq	_KLinkReturn
	.loc	2 316 9                 # susan.c:316:9
.Ltmp18:
	movq	-10056(%rbp), %rdi      # 8-byte Reload
	callq	wccfgetc
	movl	%eax, %r12d
.Ltmp19:
	#DEBUG_VALUE: getint:c <- R12D
	movl	$2, %edi
	movl	$2, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KExitRegion
.Ltmp20:
.LBB1_1:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$5, %edi
	movl	%r13d, %esi
	movl	%r15d, %edx
	callq	_KPhi1To1
	movl	$1, %edi
	callq	_KWork
	movl	$5, %edi
	movl	$5, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$7, %edi
	movl	$5, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	.loc	2 310 9                 # susan.c:310:9
	cmpl	$35, %r12d
	jne	.LBB1_3
# BB#2:                                 # %if.then
                                        #   in Loop: Header=BB1_1 Depth=1
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	movl	$7, %edi
	callq	_KPushCDep
	xorl	%esi, %esi
	movabsq	$3613442513818254684, %rdi # imm = 0x322586D24C6E7D5C
	callq	_KPrepCall
	callq	_KEnqArgConst
	movl	$9000, %esi             # imm = 0x2328
	leaq	-10048(%rbp), %rdi
	.loc	2 311 7                 # susan.c:311:7
.Ltmp21:
	movq	-10056(%rbp), %rdx      # 8-byte Reload
	callq	wccfgets
	callq	_KPopCDep
.Ltmp22:
.LBB1_3:                                # %if.end
                                        #   in Loop: Header=BB1_1 Depth=1
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	movl	$1, %edi
	callq	_KWork
	movl	$12, %edi
	movl	$5, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	.loc	2 312 9                 # susan.c:312:9
	cmpl	$-1, %r12d
	jne	.LBB1_5
# BB#4:                                 # %if.then3
                                        #   in Loop: Header=BB1_1 Depth=1
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	movl	$12, %edi
	callq	_KPushCDep
	xorl	%esi, %esi
	movabsq	$-7151825391457635818, %rdi # imm = 0x9CBF9CB2CE8C7216
	callq	_KPrepCall
	xorl	%esi, %esi
	movabsq	$-7131228994629441968, %rbx # imm = 0x9D08C90323256650
	.loc	2 313 7                 # susan.c:313:7
.Ltmp23:
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
.Ltmp24:
	#DEBUG_VALUE: exit_error:j <- 1
	#DEBUG_VALUE: exit_error:i <- 0
	xorl	%esi, %esi
	movq	%rbx, %rdi
	callq	_KExitRegion
	callq	_KPopCDep
.Ltmp25:
.LBB1_5:                                # %if.end4
                                        #   in Loop: Header=BB1_1 Depth=1
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	movl	$3, %edi
	callq	_KWork
	.loc	2 314 9                 # susan.c:314:9
	leal	-48(%r12), %ebx
	movl	$6, %edi
	movl	$5, %esi
	movl	$2, %edx
	callq	_KTimestamp1
	cmpl	$10, %ebx
	jae	.LBB1_6
.Ltmp26:
# BB#7:                                 # %if.end4.pre_exit.while.end
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KExitRegion
	movl	$1, %esi
	movabsq	$-3318319763266470995, %rdi # imm = 0xD1F2F5C1AB57FBAD
	callq	_KExitRegion
.Ltmp27:
	#DEBUG_VALUE: getint:i <- 0
	movl	$1, %esi
	movabsq	$1154375300863807730, %rdi # imm = 0x10052A385178D0F2
	callq	_KEnterRegion
	movl	$5, %r13d
	xorl	%r15d, %r15d
	movabsq	$-4936599135664076682, %r14 # imm = 0xBB7DAD3DC83E0876
	xorl	%esi, %esi
	xorl	%ebx, %ebx
	.align	16, 0x90
.LBB1_8:                                # %while.body10
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	#DEBUG_VALUE: getint:i <- 0
	movl	$10, %edi
                                        # kill: ESI<def> ESI<kill> RSI<kill>
	movl	%r15d, %edx
	callq	_KPhi1To1
	movl	$8, %edi
	movl	%r13d, %esi
	movl	%r15d, %edx
	callq	_KPhi1To1
	movl	$5, %edi
	callq	_KWork
	.loc	2 323 10                # susan.c:323:10
.Ltmp28:
	imull	$10, %ebx, %eax
	.loc	2 323 9 is_stmt 0       # susan.c:323:9
	leal	-48(%r12,%rax), %ebx
.Ltmp29:
	#DEBUG_VALUE: getint:i <- EBX
	xorl	%esi, %esi
	movabsq	$-1058257384718967309, %rdi # imm = 0xF1505083F6E45DF3
	callq	_KPrepCall
	movl	$3, %edi
	callq	_KLinkReturn
	.loc	2 324 9 is_stmt 1       # susan.c:324:9
	movq	-10056(%rbp), %rdi      # 8-byte Reload
	callq	wccfgetc
	movl	%eax, %r12d
.Ltmp30:
	#DEBUG_VALUE: getint:c <- R12D
	movl	$9, %edi
	movl	$3, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	movl	$10, %edi
	movl	$9, %esi
	callq	_KPhiAddCond
	movl	$11, %edi
	movl	$8, %esi
	movl	$2, %edx
	movl	$10, %ecx
	movl	$3, %r8d
	callq	_KTimestamp2
	movl	$8, %edi
	movl	$9, %esi
	callq	_KPhiAddCond
	movl	$3, %edi
	movl	$3, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 325 9                 # susan.c:325:9
	cmpl	$-1, %r12d
	je	.LBB1_9
.Ltmp31:
# BB#10:                                # %if.end14
                                        #   in Loop: Header=BB1_8 Depth=1
	#DEBUG_VALUE: getint:fd <- [RBP+-10056]
	#DEBUG_VALUE: getint:c <- R12D
	#DEBUG_VALUE: getint:i <- EBX
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$9, %r15d
	movl	$9, %edi
	callq	_KPushCDep
	movl	$3, %r13d
	movl	$3, %edi
	callq	_KWork
	movq	%rbx, -10064(%rbp)      # 8-byte Spill
.Ltmp32:
	#DEBUG_VALUE: getint:i <- [RBP+-10064]
	.loc	2 326 9                 # susan.c:326:9
	movl	%r12d, %ebx
	addl	$-48, %ebx
	movl	$13, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$9, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KExitRegion
	movl	$11, %esi
	cmpl	$10, %ebx
	movq	-10064(%rbp), %rbx      # 8-byte Reload
.Ltmp33:
	#DEBUG_VALUE: getint:i <- EBX
	jb	.LBB1_8
.Ltmp34:
# BB#11:                                # %if.end14.pre_exit.while.end19
	#DEBUG_VALUE: getint:i <- EBX
	movl	$1, %esi
	movabsq	$1154375300863807730, %rdi # imm = 0x10052A385178D0F2
	callq	_KExitRegion
	movl	$13, %edi
	jmp	.LBB1_12
.Ltmp35:
.LBB1_9:                                # %while.body10.pre_exit.if.then13
	#DEBUG_VALUE: getint:i <- EBX
	movl	$1, %esi
	movabsq	$1154375300863807730, %rdi # imm = 0x10052A385178D0F2
	callq	_KExitRegion
	movl	$9, %edi
.Ltmp36:
.LBB1_12:                               # %return
	callq	_KPushCDep
	callq	_KPopCDep
.Ltmp37:
	#DEBUG_VALUE: getint:i <- EBX
	movl	$4, %edi
	movl	$11, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	callq	_KPhi
	movl	$4, %edi
	movl	$4, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$4, %edi
	callq	_KReturn
	xorl	%esi, %esi
	movabsq	$-1357713451555161958, %rdi # imm = 0xED286ECF2D48F89A
	callq	_KExitRegion
	.loc	2 330 1                 # susan.c:330:1
	movl	%ebx, %eax
	addq	$10024, %rsp            # imm = 0x2728
	popq	%rbx
.Ltmp38:
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp39:
.Ltmp40:
	.size	getint, .Ltmp40-getint
.Lfunc_end1:
	.cfi_endproc

	.globl	get_image
	.align	16, 0x90
	.type	get_image,@function
get_image:                              # @get_image
.Lfunc_begin2:
	.loc	2 335 0                 # susan.c:335:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp41:
	.cfi_def_cfa_offset 16
.Ltmp42:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp43:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$136, %rsp
.Ltmp44:
	.cfi_offset %rbx, -56
.Ltmp45:
	.cfi_offset %r12, -48
.Ltmp46:
	.cfi_offset %r13, -40
.Ltmp47:
	.cfi_offset %r14, -32
.Ltmp48:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: get_image:fd <- RDI
	#DEBUG_VALUE: get_image:in <- RSI
	#DEBUG_VALUE: get_image:x_size <- RDX
	#DEBUG_VALUE: get_image:y_size <- RCX
	movq	%rcx, -160(%rbp)        # 8-byte Spill
.Ltmp49:
	#DEBUG_VALUE: get_image:y_size <- [RBP+-160]
	movq	%rdx, %r13
.Ltmp50:
	#DEBUG_VALUE: get_image:x_size <- R13
	movq	%rsi, -152(%rbp)        # 8-byte Spill
.Ltmp51:
	#DEBUG_VALUE: get_image:in <- [RBP+-152]
	movq	%rdi, %r15
.Ltmp52:
	#DEBUG_VALUE: get_image:fd <- R15
	movabsq	$1371072232125695809, %rdi # imm = 0x130706EE4D410741
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$23, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
	movl	$7, %edi
	callq	_KWork
	movabsq	$-1824419593904605951, %rdi # imm = 0xE6AE5C0BA80DB501
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	callq	_KEnqArgConst
	movl	$1, %edi
	callq	_KLinkReturn
	xorl	%esi, %esi
	xorl	%edx, %edx
	.loc	2 339 3 prologue_end    # susan.c:339:3
.Ltmp53:
	movq	%r15, %rdi
	callq	wccfseek
	movabsq	$834405922606150355, %rdi # imm = 0xB9467C4076BF2D3
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$2, %edi
	callq	_KLinkReturn
	.loc	2 343 13                # susan.c:343:13
	movq	%r15, %rdi
	callq	wccfgetc
	movl	%eax, %ebx
	movl	$3, %edi
	movl	$2, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	leaq	-144(%rbp), %r14
	movl	$3, %edi
	movl	$1, %edx
	movq	%r14, %rsi
	callq	_KStore
	.loc	2 343 3 is_stmt 0       # susan.c:343:3
	movb	%bl, -144(%rbp)
	movabsq	$-7477917213638943215, %rdi # imm = 0x983919E9F5459E11
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$4, %edi
	callq	_KLinkReturn
	.loc	2 344 13 is_stmt 1      # susan.c:344:13
	movq	%r15, %rdi
	callq	wccfgetc
	movl	%eax, %ebx
	.loc	2 344 3 is_stmt 0       # susan.c:344:3
	leaq	-143(%rbp), %r12
	movl	$5, %edi
	movl	$4, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$5, %edi
	movl	$1, %edx
	movq	%r12, %rsi
	callq	_KStore
	movb	%bl, -143(%rbp)
	movl	$6, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 345 6 is_stmt 1       # susan.c:345:6
	movzbl	-144(%rbp), %ebx
	movl	$20, %edi
	movl	$6, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	cmpl	$80, %ebx
	jne	.LBB2_2
.Ltmp54:
# BB#1:                                 # %land.lhs.true
	#DEBUG_VALUE: get_image:fd <- R15
	#DEBUG_VALUE: get_image:in <- [RBP+-152]
	#DEBUG_VALUE: get_image:x_size <- R13
	#DEBUG_VALUE: get_image:y_size <- [RBP+-160]
	movl	$20, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	movl	$7, %esi
	movl	$1, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 345 26 is_stmt 0 discriminator 1 # susan.c:345:26
.Ltmp55:
	movzbl	-143(%rbp), %ebx
	movl	$21, %edi
	movl	$7, %esi
	movl	$1, %edx
	movl	$6, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	cmpl	$53, %ebx
	je	.LBB2_3
.Ltmp56:
.LBB2_2:                                # %if.then
	#DEBUG_VALUE: get_image:fd <- R15
	#DEBUG_VALUE: get_image:in <- [RBP+-152]
	#DEBUG_VALUE: get_image:x_size <- R13
	#DEBUG_VALUE: get_image:y_size <- [RBP+-160]
	movl	$20, %edi
	callq	_KPushCDep
	movabsq	$-5478825451288088564, %rdi # imm = 0xB3F74D47B59AB00C
	xorl	%esi, %esi
	callq	_KPrepCall
	xorl	%esi, %esi
	movabsq	$-7131228994629441968, %rbx # imm = 0x9D08C90323256650
	.loc	2 346 5 is_stmt 1       # susan.c:346:5
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
.Ltmp57:
	#DEBUG_VALUE: exit_error:j <- 1
	#DEBUG_VALUE: exit_error:i <- 0
	xorl	%esi, %esi
	movq	%rbx, %rdi
	callq	_KExitRegion
	callq	_KPopCDep
.Ltmp58:
.LBB2_3:                                # %if.end
	#DEBUG_VALUE: get_image:fd <- R15
	#DEBUG_VALUE: get_image:in <- [RBP+-152]
	#DEBUG_VALUE: get_image:x_size <- R13
	#DEBUG_VALUE: get_image:y_size <- [RBP+-160]
	movl	$28, %edi
	callq	_KWork
	movabsq	$-2897594641827885251, %rdi # imm = 0xD7C9AD067EC60F3D
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$8, %edi
	callq	_KLinkReturn
	.loc	2 348 13                # susan.c:348:13
	movq	%r15, %rdi
	callq	getint
	movl	%eax, %ebx
	movl	$8, %edi
	movl	$8, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$8, %edi
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	.loc	2 348 3 is_stmt 0       # susan.c:348:3
	movl	%ebx, (%r13)
	movabsq	$2239059118548790907, %rdi # imm = 0x1F12BC67C0332E7B
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$9, %edi
	callq	_KLinkReturn
	.loc	2 349 13 is_stmt 1      # susan.c:349:13
	movq	%r15, %rdi
	callq	getint
	movl	%eax, %ebx
	movl	$9, %edi
	movl	$9, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$9, %edi
	movl	$4, %edx
	movq	-160(%rbp), %r12        # 8-byte Reload
.Ltmp59:
	#DEBUG_VALUE: get_image:y_size <- R12
	movq	%r12, %rsi
	callq	_KStore
	.loc	2 349 3 is_stmt 0       # susan.c:349:3
	movl	%ebx, (%r12)
	movabsq	$-7296156358551277574, %rdi # imm = 0x9ABED872D6D7EFFA
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$10, %edi
	callq	_KLinkReturn
	.loc	2 350 9 is_stmt 1       # susan.c:350:9
	movq	%r15, %rdi
	callq	getint
	movl	$11, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 354 29                # susan.c:354:29
	movl	(%r13), %ebx
	movl	$12, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	imull	(%r12), %ebx
	movabsq	$-7659040783631524030, %rdi # imm = 0x95B59EFC9369DF42
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$13, %edi
	movl	$11, %esi
	movl	$2, %edx
	movl	$12, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$13, %edi
	callq	_KEnqArg
	.loc	2 354 19 is_stmt 0      # susan.c:354:19
	movl	%ebx, %edi
	callq	wccmalloc
	movq	%rax, %r14
	movl	$14, %edi
	movl	$14, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$14, %edi
	movl	$8, %edx
	movq	-152(%rbp), %rbx        # 8-byte Reload
.Ltmp60:
	#DEBUG_VALUE: get_image:in <- RBX
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 354 3                 # susan.c:354:3
	movq	%r14, (%rbx)
	movl	$15, %esi
	movl	$8, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 356 16 is_stmt 1      # susan.c:356:16
.Ltmp61:
	movq	(%rbx), %r14
	movl	$16, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 356 22 is_stmt 0      # susan.c:356:22
	movslq	(%r13), %r13
.Ltmp62:
	movl	$17, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	movslq	(%r12), %rbx
.Ltmp63:
	imulq	%r13, %rbx
	movabsq	$8626039824690872774, %rdi # imm = 0x77B5D984911281C6
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$19, %edi
	movl	$16, %esi
	movl	$2, %edx
	movl	$17, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$19, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	movl	$18, %edi
	callq	_KLinkReturn
	movl	$1, %esi
	.loc	2 356 7                 # susan.c:356:7
	movq	%r14, %rdi
	movq	%rbx, %rdx
	movq	%r15, %rcx
	callq	wccfread
	movq	%rax, %rbx
	movl	$22, %edi
	movl	$18, %esi
	movl	$1, %edx
	callq	_KTimestamp1
.Ltmp64:
	.loc	2 356 7                 # susan.c:356:7
	testq	%rbx, %rbx
	jne	.LBB2_5
.Ltmp65:
# BB#4:                                 # %if.then21
	movl	$22, %edi
	callq	_KPushCDep
	movabsq	$5823555256234113436, %rdi # imm = 0x50D16CA6A9B1799C
	xorl	%esi, %esi
	callq	_KPrepCall
	xorl	%esi, %esi
	movabsq	$-7131228994629441968, %rbx # imm = 0x9D08C90323256650
	.loc	2 357 5 is_stmt 1       # susan.c:357:5
.Ltmp66:
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
.Ltmp67:
	#DEBUG_VALUE: exit_error:j <- 1
	#DEBUG_VALUE: exit_error:i <- 0
	xorl	%esi, %esi
	movq	%rbx, %rdi
	callq	_KExitRegion
	callq	_KPopCDep
.Ltmp68:
.LBB2_5:                                # %if.end22
	xorl	%esi, %esi
	movabsq	$1371072232125695809, %rdi # imm = 0x130706EE4D410741
	callq	_KExitRegion
	.loc	2 358 1                 # susan.c:358:1
	addq	$136, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp69:
.Ltmp70:
	.size	get_image, .Ltmp70-get_image
.Lfunc_end2:
	.cfi_endproc

	.globl	put_image
	.align	16, 0x90
	.type	put_image,@function
put_image:                              # @put_image
.Lfunc_begin3:
	.loc	2 362 0                 # susan.c:362:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp71:
	.cfi_def_cfa_offset 16
.Ltmp72:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp73:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$16, %rsp
.Ltmp74:
	.cfi_offset %rbx, -48
.Ltmp75:
	.cfi_offset %r12, -40
.Ltmp76:
	.cfi_offset %r14, -32
.Ltmp77:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: put_image:in <- RDI
	#DEBUG_VALUE: put_image:x_size <- ESI
	#DEBUG_VALUE: put_image:y_size <- EDX
	movl	%edx, %r12d
.Ltmp78:
	#DEBUG_VALUE: put_image:y_size <- R12D
	movl	%esi, %ebx
.Ltmp79:
	#DEBUG_VALUE: put_image:x_size <- EBX
	movabsq	$2335811408570188459, %r14 # imm = 0x206A7819B62182AB
	movabsq	$1747623979026571445, %r15 # imm = 0x1840CEBFE6D560B5
	xorl	%esi, %esi
	movq	%r14, %rdi
.Ltmp80:
	callq	_KEnterRegion
	movl	$5, %edi
	movl	$2, %esi
	callq	_KPrepRTable
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
.Ltmp81:
	#DEBUG_VALUE: put_image:i <- 0
	movl	$3, %edi
	callq	_KInduction
	movl	$1, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	movl	$3, %edi
	callq	_KWork
	.loc	2 366 20 prologue_end   # susan.c:366:20
.Ltmp82:
	imull	%r12d, %ebx
.Ltmp83:
	movl	$3, (%rsp)
	movl	$4, %edi
	movl	$3, %esi
	movl	$1, %edx
	movl	$1, %ecx
	movl	$3, %r8d
	movl	$2, %r9d
	callq	_KTimestamp3
.Ltmp84:
	.loc	2 366 3 is_stmt 0       # susan.c:366:3
	testl	%ebx, %ebx
	jle	.LBB3_3
.Ltmp85:
# BB#1:                                 # %for.inc.lr.ph
	#DEBUG_VALUE: put_image:in <- RDI
	#DEBUG_VALUE: put_image:i <- 0
	movabsq	$7310997652907248868, %r12 # imm = 0x6575E1A147404CE4
.Ltmp86:
	.align	16, 0x90
.LBB3_2:                                # %for.inc
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: put_image:in <- RDI
	#DEBUG_VALUE: put_image:i <- 0
	movl	$2, %esi
	movq	%r12, %rdi
.Ltmp87:
	callq	_KEnterRegion
	movl	$4, %edi
	callq	_KPushCDep
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r12, %rdi
	callq	_KExitRegion
	movl	$3, %edi
	callq	_KWork
	movl	$3, (%rsp)
	movl	$4, %edi
	movl	$3, %esi
	movl	$1, %edx
	movl	$1, %ecx
	movl	$3, %r8d
	movl	$2, %r9d
	callq	_KTimestamp3
	decl	%ebx
	jne	.LBB3_2
.Ltmp88:
.LBB3_3:                                # %for.cond.pre_exit.for.end
	#DEBUG_VALUE: put_image:in <- RDI
	#DEBUG_VALUE: put_image:i <- 0
	movl	$1, %esi
	movq	%r15, %rdi
.Ltmp89:
	callq	_KExitRegion
	xorl	%esi, %esi
	movq	%r14, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp90:
	.size	put_image, .Ltmp90-put_image
.Lfunc_end3:
	.cfi_endproc

	.globl	int_to_uchar
	.align	16, 0x90
	.type	int_to_uchar,@function
int_to_uchar:                           # @int_to_uchar
.Lfunc_begin4:
	.loc	2 373 0 is_stmt 1       # susan.c:373:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp91:
	.cfi_def_cfa_offset 16
.Ltmp92:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp93:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
.Ltmp94:
	.cfi_offset %rbx, -56
.Ltmp95:
	.cfi_offset %r12, -48
.Ltmp96:
	.cfi_offset %r13, -40
.Ltmp97:
	.cfi_offset %r14, -32
.Ltmp98:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: int_to_uchar:r <- RDI
	#DEBUG_VALUE: int_to_uchar:in <- RSI
	#DEBUG_VALUE: int_to_uchar:size <- EDX
	movl	%edx, %ebx
.Ltmp99:
	#DEBUG_VALUE: int_to_uchar:size <- EBX
	movl	%ebx, -68(%rbp)         # 4-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
.Ltmp100:
	#DEBUG_VALUE: int_to_uchar:in <- [RBP+-64]
	movq	%rdi, %r13
.Ltmp101:
	#DEBUG_VALUE: int_to_uchar:r <- R13
	movabsq	$-2676067267658388031, %rdi # imm = 0xDADCB2FF9C2BEDC1
	xorl	%r15d, %r15d
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$27, %edi
	movl	$2, %esi
	callq	_KPrepRTable
	movl	$1, %edi
	callq	_KDeqArg
	movl	$8, %edi
	callq	_KWork
	movl	$2, %esi
	movl	$1, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 374 16 prologue_end   # susan.c:374:16
.Ltmp102:
	movsbl	(%r13), %eax
	movl	%eax, -44(%rbp)         # 4-byte Spill
	movl	$3, %esi
	movl	$1, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 374 28 is_stmt 0      # susan.c:374:28
	movsbl	(%r13), %eax
.Ltmp103:
	#DEBUG_VALUE: int_to_uchar:i <- 0
	.loc	2 377 8 is_stmt 1       # susan.c:377:8
	movl	%eax, -48(%rbp)         # 4-byte Spill
	movslq	%ebx, %rax
.Ltmp104:
	#DEBUG_VALUE: int_to_uchar:size <- [RBP+-68]
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	$21, %r14d
	movl	$21, %edi
	movl	$3, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$19, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$16, %edi
	callq	_KInduction
	movl	$17, %r12d
	movl	$17, %edi
	movl	$2, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$1, %esi
	movabsq	$7864750305935368319, %rdi # imm = 0x6D2534BBE86C207F
	callq	_KEnterRegion
	xorl	%ebx, %ebx
	jmp	.LBB4_1
.Ltmp105:
	.align	16, 0x90
.LBB4_6:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: int_to_uchar:r <- R13
	#DEBUG_VALUE: int_to_uchar:in <- [RBP+-64]
	#DEBUG_VALUE: int_to_uchar:size <- [RBP+-68]
	#DEBUG_VALUE: int_to_uchar:i <- 0
	movl	%ebx, -48(%rbp)         # 4-byte Spill
	movl	$20, %ebx
	movl	$20, %edi
	callq	_KPushCDep
	movl	$22, %r14d
	movl	$22, %edi
	movl	$26, %edx
	movl	$20, %ecx
	movl	%r12d, %esi
	callq	_KPhi2To1
	.loc	2 377 3 is_stmt 0       # susan.c:377:3
.Ltmp106:
	incq	%r15
	movl	$22, %edi
	movl	$22, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-811406223395391219, %rdi # imm = 0xF4BD4E56BDF9F90D
	callq	_KExitRegion
	movl	$18, %r12d
.Ltmp107:
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: int_to_uchar:r <- R13
	#DEBUG_VALUE: int_to_uchar:in <- [RBP+-64]
	#DEBUG_VALUE: int_to_uchar:size <- [RBP+-68]
	#DEBUG_VALUE: int_to_uchar:i <- 0
	movl	$13, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$15, %edi
	movl	%r12d, %esi
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$1, %edi
	callq	_KWork
	movl	$13, %edi
	movl	$13, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$20, %edi
	movl	$19, %esi
	movl	$1, %edx
	movl	$16, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$13, %edi
	movl	$20, %esi
	callq	_KPhiAddCond
	movl	$15, %edi
	movl	$20, %esi
	callq	_KPhiAddCond
	movl	$15, %edi
	movl	$15, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movq	-56(%rbp), %rbx         # 8-byte Reload
	.loc	2 377 3                 # susan.c:377:3
	cmpq	%rbx, %r15
	jge	.LBB4_7
.Ltmp108:
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: int_to_uchar:r <- R13
	#DEBUG_VALUE: int_to_uchar:in <- [RBP+-64]
	#DEBUG_VALUE: int_to_uchar:size <- [RBP+-68]
	#DEBUG_VALUE: int_to_uchar:i <- 0
	movl	$2, %esi
	movabsq	$-811406223395391219, %rdi # imm = 0xF4BD4E56BDF9F90D
	callq	_KEnterRegion
	movl	$20, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	leaq	(%r13,%r15), %r14
	movl	$4, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 378 10 is_stmt 1      # susan.c:378:10
.Ltmp109:
	movsbl	(%r13,%r15), %ebx
	movl	$1, (%rsp)
	movl	$15, %r12d
	movl	$24, %edi
	movl	$4, %esi
	movl	$1, %edx
	movl	$20, %ecx
	movl	$1, %r8d
	movl	$15, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movl	-44(%rbp), %eax         # 4-byte Reload
.Ltmp110:
	.loc	2 378 10 is_stmt 0      # susan.c:378:10
	cmpl	%eax, %ebx
	movl	%eax, %ebx
	jle	.LBB4_4
.Ltmp111:
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: int_to_uchar:r <- R13
	#DEBUG_VALUE: int_to_uchar:in <- [RBP+-64]
	#DEBUG_VALUE: int_to_uchar:size <- [RBP+-68]
	#DEBUG_VALUE: int_to_uchar:i <- 0
	movl	$24, %edi
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	movl	$5, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 379 13 is_stmt 1      # susan.c:379:13
.Ltmp112:
	movsbl	(%r14), %ebx
	movl	$1, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$1, (%rsp)
	movl	$23, %r12d
	movl	$23, %edi
	movl	$4, %esi
	movl	$1, %edx
	movl	$5, %ecx
	xorl	%r8d, %r8d
	movl	$20, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
.Ltmp113:
.LBB4_4:                                # %if.end
                                        #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: int_to_uchar:r <- R13
	#DEBUG_VALUE: int_to_uchar:in <- [RBP+-64]
	#DEBUG_VALUE: int_to_uchar:size <- [RBP+-68]
	#DEBUG_VALUE: int_to_uchar:i <- 0
	movl	%ebx, -44(%rbp)         # 4-byte Spill
	movl	$20, %edi
	callq	_KPushCDep
	movl	$18, %edi
	movl	$20, %edx
	movl	$24, %ecx
	movl	%r12d, %esi
	callq	_KPhi2To1
	movl	$5, %edi
	callq	_KWork
	movl	$6, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 380 10                # susan.c:380:10
.Ltmp114:
	movsbl	(%r14), %ebx
	movl	$1, (%rsp)
	movl	$13, %r12d
	movl	$26, %edi
	movl	$20, %esi
	movl	$1, %edx
	movl	$6, %ecx
	movl	$1, %r8d
	movl	$13, %r9d
	callq	_KTimestamp3
	movl	$18, %edi
	movl	$18, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	-48(%rbp), %eax         # 4-byte Reload
.Ltmp115:
	.loc	2 380 10 is_stmt 0      # susan.c:380:10
	cmpl	%eax, %ebx
	movl	%eax, %ebx
	jge	.LBB4_6
.Ltmp116:
# BB#5:                                 # %if.then16
                                        #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: int_to_uchar:r <- R13
	#DEBUG_VALUE: int_to_uchar:in <- [RBP+-64]
	#DEBUG_VALUE: int_to_uchar:size <- [RBP+-68]
	#DEBUG_VALUE: int_to_uchar:i <- 0
	movl	$26, %edi
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	movl	$7, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 381 13 is_stmt 1      # susan.c:381:13
.Ltmp117:
	movsbl	(%r14), %ebx
	movl	$0, 16(%rsp)
	movl	$7, 8(%rsp)
	movl	$1, (%rsp)
	movl	$25, %r12d
	movl	$25, %edi
	movl	$20, %esi
	movl	$1, %edx
	movl	$6, %ecx
	movl	$1, %r8d
	movl	$13, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
	jmp	.LBB4_6
.Ltmp118:
.LBB4_7:                                # %for.cond.pre_exit.for.end
	#DEBUG_VALUE: int_to_uchar:r <- R13
	#DEBUG_VALUE: int_to_uchar:in <- [RBP+-64]
	#DEBUG_VALUE: int_to_uchar:size <- [RBP+-68]
	#DEBUG_VALUE: int_to_uchar:i <- 0
	movl	$1, %esi
	movabsq	$7864750305935368319, %rdi # imm = 0x6D2534BBE86C207F
	callq	_KExitRegion
	movl	$1, %edi
	callq	_KWork
	movl	$14, %edi
	movl	$13, %esi
	movl	$1, %edx
	movl	$15, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$10, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$12, %edi
	callq	_KInduction
	movl	$1, %esi
	movabsq	$1356285183461826490, %rdi # imm = 0x12D27E303E5E1FBA
	callq	_KEnterRegion
	movl	$1, %edi
	callq	_KWork
	movl	$11, %edi
	movl	$10, %esi
	movl	$1, %edx
	movl	$12, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	.loc	2 387 3                 # susan.c:387:3
.Ltmp119:
	cmpl	$0, -68(%rbp)           # 4-byte Folded Reload
	movq	-64(%rbp), %r12         # 8-byte Reload
.Ltmp120:
	#DEBUG_VALUE: int_to_uchar:in <- R12
	jle	.LBB4_10
.Ltmp121:
# BB#8:                                 # %for.body24.lr.ph
	#DEBUG_VALUE: int_to_uchar:r <- R13
	#DEBUG_VALUE: int_to_uchar:in <- R12
	#DEBUG_VALUE: int_to_uchar:i <- 0
	.loc	2 384 3                 # susan.c:384:3
	movl	-44(%rbp), %eax         # 4-byte Reload
	subl	-48(%rbp), %eax         # 4-byte Folded Reload
.Ltmp122:
	#DEBUG_VALUE: int_to_uchar:max_r <- [RBP+-44]
	movl	%eax, -44(%rbp)         # 4-byte Spill
	movabsq	$-1685443978513927515, %r14 # imm = 0xE89C19A1A3DB32A5
.Ltmp123:
	.align	16, 0x90
.LBB4_9:                                # %for.body24
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: int_to_uchar:i <- 0
	#DEBUG_VALUE: int_to_uchar:max_r <- [RBP+-44]
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$11, %edi
	callq	_KPushCDep
	movl	$18, %edi
	callq	_KWork
	movl	$8, %esi
	movl	$1, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 388 33                # susan.c:388:33
.Ltmp124:
	movsbl	(%r13), %eax
	subl	-48(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 388 27 is_stmt 0      # susan.c:388:27
	imull	$255, %eax, %eax
	.loc	2 388 21                # susan.c:388:21
	cltd
	idivl	-44(%rbp)               # 4-byte Folded Reload
	movl	%eax, %r15d
	movl	$13, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$13, (%rsp)
	movl	$9, %edi
	movl	$14, %esi
	movl	$10, %edx
	movl	$11, %ecx
	movl	$13, %r8d
	movl	$8, %r9d
	callq	_KTimestamp4
	movl	$9, %edi
	movl	$1, %edx
	movq	%r12, %rsi
	callq	_KStore
	.loc	2 388 5                 # susan.c:388:5
	movb	%r15b, (%r12)
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KExitRegion
	movl	$1, %edi
	callq	_KWork
	movl	$11, %edi
	movl	$10, %esi
	movl	$1, %edx
	movl	$12, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
.Ltmp125:
	.loc	2 387 3 is_stmt 1       # susan.c:387:3
	incq	%r12
	incq	%r13
	decq	%rbx
	jne	.LBB4_9
.Ltmp126:
.LBB4_10:                               # %for.cond21.pre_exit.for.end34
	#DEBUG_VALUE: int_to_uchar:i <- 0
	movl	$1, %esi
	movabsq	$1356285183461826490, %rdi # imm = 0x12D27E303E5E1FBA
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$-2676067267658388031, %rdi # imm = 0xDADCB2FF9C2BEDC1
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp127:
	.size	int_to_uchar, .Ltmp127-int_to_uchar
.Lfunc_end4:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI5_0:
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI5_1:
	.long	1120403456              # float 100
	.text
	.globl	setup_brightness_lut
	.align	16, 0x90
	.type	setup_brightness_lut,@function
setup_brightness_lut:                   # @setup_brightness_lut
.Lfunc_begin5:
	.loc	2 394 0                 # susan.c:394:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp128:
	.cfi_def_cfa_offset 16
.Ltmp129:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp130:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
.Ltmp131:
	.cfi_offset %rbx, -56
.Ltmp132:
	.cfi_offset %r12, -48
.Ltmp133:
	.cfi_offset %r13, -40
.Ltmp134:
	.cfi_offset %r14, -32
.Ltmp135:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: setup_brightness_lut:bp <- RDI
	#DEBUG_VALUE: setup_brightness_lut:thresh <- ESI
	#DEBUG_VALUE: setup_brightness_lut:form <- EDX
	movl	%edx, -44(%rbp)         # 4-byte Spill
.Ltmp136:
	#DEBUG_VALUE: setup_brightness_lut:form <- [RBP+-44]
	movl	%esi, %r12d
.Ltmp137:
	#DEBUG_VALUE: setup_brightness_lut:thresh <- R12D
	movq	%rdi, %r14
.Ltmp138:
	#DEBUG_VALUE: setup_brightness_lut:bp <- R14
	movq	%r14, -56(%rbp)         # 8-byte Spill
	movabsq	$-227718247055886495, %rdi # imm = 0xFCD6FB75F75BF761
	movabsq	$3139353040646990940, %r13 # imm = 0x2B9138F51C4E6C5C
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$17, %edi
	movl	$2, %esi
	callq	_KPrepRTable
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	movl	$6, %edi
	callq	_KWork
	movabsq	$497863463913406220, %rdi # imm = 0x6E8C42EC1343F0C
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	movl	$516, %edi              # imm = 0x204
	.loc	2 398 24 prologue_end   # susan.c:398:24
.Ltmp139:
	callq	wccmalloc
	movq	%rax, %r15
	movl	$3, %edi
	movl	$3, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$3, %edi
	movl	$8, %edx
	movq	%r14, %rsi
	callq	_KStore
	.loc	2 398 3 is_stmt 0       # susan.c:398:3
	movq	%r15, (%r14)
	movl	$4, %esi
	movl	$8, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 399 7 is_stmt 1       # susan.c:399:7
	movq	(%r14), %r15
	addq	$258, %r15              # imm = 0x102
	movl	$5, %edi
	movl	$4, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$5, %edi
	movl	$8, %edx
	movq	%r14, %rsi
	callq	_KStore
	.loc	2 399 3 is_stmt 0       # susan.c:399:3
	movq	%r15, (%r14)
.Ltmp140:
	#DEBUG_VALUE: setup_brightness_lut:k <- -256
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	movl	$1, %esi
	movabsq	$7810100646999479705, %rdi # imm = 0x6C630D28A473D599
	callq	_KEnterRegion
	.loc	2 403 22 is_stmt 1      # susan.c:403:22
.Ltmp141:
	cvtsi2ssl	%r12d, %xmm0
	movss	%xmm0, -60(%rbp)        # 4-byte Spill
	movq	$-256, %r12
.Ltmp142:
	cmpl	$6, -44(%rbp)           # 4-byte Folded Reload
	jne	.LBB5_4
# BB#1:
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	#DEBUG_VALUE: setup_brightness_lut:k <- -256
	xorl	%edx, %edx
	jmp	.LBB5_2
	.align	16, 0x90
.LBB5_3:                                # %if.end.us
                                        #   in Loop: Header=BB5_2 Depth=1
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	#DEBUG_VALUE: setup_brightness_lut:k <- -256
	movl	$2, %esi
	movq	%r13, %r14
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$8, %edi
	callq	_KPushCDep
	movl	$26, %edi
	callq	_KWork
	.loc	2 403 11 is_stmt 0      # susan.c:403:11
	cvtsi2ssl	%r12d, %xmm0
	.loc	2 403 10                # susan.c:403:10
	divss	-60(%rbp), %xmm0        # 4-byte Folded Reload
.Ltmp143:
	#DEBUG_VALUE: setup_brightness_lut:temp <- XMM0
	.loc	2 404 10 is_stmt 1      # susan.c:404:10
	mulss	%xmm0, %xmm0
.Ltmp144:
	movss	%xmm0, -44(%rbp)        # 4-byte Spill
.Ltmp145:
	#DEBUG_VALUE: setup_brightness_lut:temp <- [RBP+-44]
	movl	$16, %edi
	movl	$8, %esi
	movl	$1, %edx
	movl	$2, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$25, (%rsp)
	movl	$15, %edi
	movl	$9, %esi
	movl	$25, %edx
	movl	$8, %ecx
	movl	$25, %r8d
	movl	$1, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movl	$16, %edi
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movss	-44(%rbp), %xmm1        # 4-byte Reload
.Ltmp146:
	#DEBUG_VALUE: setup_brightness_lut:temp <- XMM1
	.loc	2 406 12                # susan.c:406:12
	movaps	%xmm1, %xmm0
	mulss	%xmm0, %xmm0
	mulss	%xmm1, %xmm0
.Ltmp147:
	#DEBUG_VALUE: setup_brightness_lut:temp <- XMM0
	movss	%xmm0, -44(%rbp)        # 4-byte Spill
.Ltmp148:
	#DEBUG_VALUE: setup_brightness_lut:temp <- [RBP+-44]
	movl	$35, 16(%rsp)
	movl	$1, 8(%rsp)
	movl	$11, (%rsp)
	movl	$14, %edi
	movl	$9, %esi
	movl	$35, %edx
	movl	$8, %ecx
	movl	$35, %r8d
	movl	$2, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
	movl	$8, %edi
	callq	_KPushCDep
	movl	$10, %edi
	movl	$14, %esi
	movl	$16, %edx
	movl	$8, %ecx
	callq	_KPhi2To1
	movl	$13, %edi
	callq	_KWork
.Ltmp149:
	.loc	2 407 21                # susan.c:407:21
	movss	-44(%rbp), %xmm0        # 4-byte Reload
	xorps	.LCPI5_0(%rip), %xmm0
	movss	%xmm0, -44(%rbp)        # 4-byte Spill
	xorl	%esi, %esi
	movabsq	$1208584412934306817, %rdi # imm = 0x10C5C11EC605FC01
	callq	_KPrepCall
	movl	$7, %edi
	movl	$8, %esi
	movl	$2, %edx
	movl	$10, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$7, %edi
	callq	_KEnqArg
	movl	$6, %edi
	callq	_KLinkReturn
	.loc	2 407 16 is_stmt 0      # susan.c:407:16
	movss	-44(%rbp), %xmm0        # 4-byte Reload
	callq	expf
	.loc	2 407 10                # susan.c:407:10
	mulss	.LCPI5_1(%rip), %xmm0
.Ltmp150:
	#DEBUG_VALUE: setup_brightness_lut:temp <- XMM0
	.loc	2 408 15 is_stmt 1      # susan.c:408:15
	cvttss2si	%xmm0, %r15d
	movl	$11, %esi
	movl	$8, %edx
	movq	-56(%rbp), %rbx         # 8-byte Reload
.Ltmp151:
	#DEBUG_VALUE: setup_brightness_lut:bp <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 408 7 is_stmt 0       # susan.c:408:7
	movq	(%rbx), %r13
.Ltmp152:
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	movl	$12, %edi
	movl	$8, %esi
	movl	$5, %edx
	movl	$6, %ecx
	movl	$5, %r8d
	callq	_KTimestamp2
	leaq	(%r13,%r12), %rsi
	movl	$12, %edi
	movl	$1, %edx
	callq	_KStore
	.loc	2 408 5                 # susan.c:408:5
	movb	%r15b, (%r13,%r12)
	movl	$13, %ebx
.Ltmp153:
	.loc	2 402 3 is_stmt 1       # susan.c:402:3
	incq	%r12
	movl	$13, %edi
	movl	$9, %esi
	movl	$1, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r14, %rdi
	movq	%r14, %r13
	callq	_KExitRegion
	movl	$8, %edx
.Ltmp154:
.LBB5_2:                                # %for.cond.us
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	#DEBUG_VALUE: setup_brightness_lut:k <- -256
	movl	$9, %edi
	movl	%ebx, %esi
                                        # kill: EDX<def> EDX<kill> RDX<kill>
	callq	_KPhi1To1
	movl	$1, %edi
	callq	_KWork
	movl	$8, %edi
	movl	$9, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	movl	$9, %edi
	movl	$8, %esi
	callq	_KPhiAddCond
	movl	$9, %edi
	movl	$9, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 402 3 is_stmt 0       # susan.c:402:3
	cmpq	$257, %r12              # imm = 0x101
	jne	.LBB5_3
	jmp	.LBB5_7
.LBB5_4:
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	#DEBUG_VALUE: setup_brightness_lut:k <- -256
	xorl	%r15d, %r15d
	jmp	.LBB5_5
	.align	16, 0x90
.LBB5_6:                                # %if.end
                                        #   in Loop: Header=BB5_5 Depth=1
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	#DEBUG_VALUE: setup_brightness_lut:k <- -256
	movl	$2, %esi
	movq	%r13, %r14
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$8, %r15d
	movl	$8, %edi
	callq	_KPushCDep
	movl	$26, %edi
	callq	_KWork
	.loc	2 403 11 is_stmt 1      # susan.c:403:11
.Ltmp155:
	cvtsi2ssl	%r12d, %xmm0
	.loc	2 403 10 is_stmt 0      # susan.c:403:10
	divss	-60(%rbp), %xmm0        # 4-byte Folded Reload
.Ltmp156:
	#DEBUG_VALUE: setup_brightness_lut:temp <- XMM0
	.loc	2 404 10 is_stmt 1      # susan.c:404:10
	mulss	%xmm0, %xmm0
.Ltmp157:
	movss	%xmm0, -44(%rbp)        # 4-byte Spill
.Ltmp158:
	#DEBUG_VALUE: setup_brightness_lut:temp <- [RBP+-44]
	movl	$16, %edi
	movl	$8, %esi
	movl	$1, %edx
	movl	$2, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$25, (%rsp)
	movl	$15, %edi
	movl	$9, %esi
	movl	$25, %edx
	movl	$8, %ecx
	movl	$25, %r8d
	movl	$1, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movl	$8, %edi
	callq	_KPushCDep
	movl	$10, %edi
	movl	$15, %esi
	movl	$16, %edx
	movl	$8, %ecx
	callq	_KPhi2To1
	movl	$13, %edi
	callq	_KWork
	.loc	2 407 21                # susan.c:407:21
	movss	-44(%rbp), %xmm0        # 4-byte Reload
	xorps	.LCPI5_0(%rip), %xmm0
	movss	%xmm0, -44(%rbp)        # 4-byte Spill
	xorl	%esi, %esi
	movabsq	$1208584412934306817, %rdi # imm = 0x10C5C11EC605FC01
	callq	_KPrepCall
	movl	$7, %edi
	movl	$8, %esi
	movl	$2, %edx
	movl	$10, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$7, %edi
	callq	_KEnqArg
	movl	$6, %edi
	callq	_KLinkReturn
	.loc	2 407 16 is_stmt 0      # susan.c:407:16
	movss	-44(%rbp), %xmm0        # 4-byte Reload
	callq	expf
	.loc	2 407 10                # susan.c:407:10
	mulss	.LCPI5_1(%rip), %xmm0
.Ltmp159:
	#DEBUG_VALUE: setup_brightness_lut:temp <- XMM0
	.loc	2 408 15 is_stmt 1      # susan.c:408:15
	cvttss2si	%xmm0, %r13d
	movl	$11, %esi
	movl	$8, %edx
	movq	-56(%rbp), %rbx         # 8-byte Reload
.Ltmp160:
	#DEBUG_VALUE: setup_brightness_lut:bp <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 408 7 is_stmt 0       # susan.c:408:7
	movq	(%rbx), %rbx
.Ltmp161:
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	movl	$12, %edi
	movl	$8, %esi
	movl	$5, %edx
	movl	$6, %ecx
	movl	$5, %r8d
	callq	_KTimestamp2
	leaq	(%rbx,%r12), %rsi
	movl	$12, %edi
	movl	$1, %edx
	callq	_KStore
	.loc	2 408 5                 # susan.c:408:5
	movb	%r13b, (%rbx,%r12)
	movl	$13, %ebx
.Ltmp162:
	.loc	2 402 3 is_stmt 1       # susan.c:402:3
	incq	%r12
	movl	$13, %edi
	movl	$9, %esi
	movl	$1, %edx
	movl	$8, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r14, %rdi
	movq	%r14, %r13
	callq	_KExitRegion
.Ltmp163:
.LBB5_5:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: setup_brightness_lut:bp <- [RBP+-56]
	#DEBUG_VALUE: setup_brightness_lut:k <- -256
	movl	$9, %edi
	movl	%ebx, %esi
	movl	%r15d, %edx
	callq	_KPhi1To1
	movl	$1, %edi
	callq	_KWork
	movl	$8, %edi
	movl	$9, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	movl	$9, %edi
	movl	$8, %esi
	callq	_KPhiAddCond
	movl	$9, %edi
	movl	$9, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 402 3 is_stmt 0       # susan.c:402:3
	cmpq	$257, %r12              # imm = 0x101
	jne	.LBB5_6
.Ltmp164:
.LBB5_7:                                # %for.cond.pre_exit.for.end
	#DEBUG_VALUE: setup_brightness_lut:k <- -256
	movl	$1, %esi
	movabsq	$7810100646999479705, %rdi # imm = 0x6C630D28A473D599
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$-227718247055886495, %rdi # imm = 0xFCD6FB75F75BF761
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp165:
	.size	setup_brightness_lut, .Ltmp165-setup_brightness_lut
.Lfunc_end5:
	.cfi_endproc

	.globl	susan_principle
	.align	16, 0x90
	.type	susan_principle,@function
susan_principle:                        # @susan_principle
.Lfunc_begin6:
	.loc	2 415 0 is_stmt 1       # susan.c:415:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp166:
	.cfi_def_cfa_offset 16
.Ltmp167:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp168:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1048, %rsp             # imm = 0x418
.Ltmp169:
	.cfi_offset %rbx, -56
.Ltmp170:
	.cfi_offset %r12, -48
.Ltmp171:
	.cfi_offset %r13, -40
.Ltmp172:
	.cfi_offset %r14, -32
.Ltmp173:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: susan_principle:in <- RDI
	#DEBUG_VALUE: susan_principle:r <- RSI
	#DEBUG_VALUE: susan_principle:bp <- RDX
	#DEBUG_VALUE: susan_principle:max_no <- ECX
	#DEBUG_VALUE: susan_principle:x_size <- R8D
	#DEBUG_VALUE: susan_principle:y_size <- R9D
	movl	%r9d, %ebx
.Ltmp174:
	#DEBUG_VALUE: susan_principle:y_size <- EBX
	movl	%r8d, %r13d
.Ltmp175:
	#DEBUG_VALUE: susan_principle:x_size <- R13D
	movl	%ecx, -240(%rbp)        # 4-byte Spill
.Ltmp176:
	#DEBUG_VALUE: susan_principle:max_no <- [RBP+-240]
	movq	%rdx, -304(%rbp)        # 8-byte Spill
.Ltmp177:
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	movq	%rsi, %r12
.Ltmp178:
	#DEBUG_VALUE: susan_principle:r <- R12
	movq	%rdi, %r14
.Ltmp179:
	#DEBUG_VALUE: susan_principle:in <- R14
	movq	%r14, -256(%rbp)        # 8-byte Spill
	movabsq	$-6311205294499707348, %rdi # imm = 0xA86A18390CC7C62C
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$129, %edi
	movl	$4, %esi
	callq	_KPrepRTable
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	movl	$4, %edi
	callq	_KWork
	.loc	2 419 17 prologue_end   # susan.c:419:17
.Ltmp180:
	movl	%r13d, %eax
	imull	%ebx, %eax
	leal	(,%rax,4), %r15d
	movl	$4, %edi
	movl	$2, %esi
	movl	$4, %edx
	movl	$3, %ecx
	movl	$4, %r8d
	callq	_KTimestamp2
	movabsq	$-3309751525746477078, %rdi # imm = 0xD2116685ED12F7EA
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$4, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	xorl	%esi, %esi
	.loc	2 419 3 is_stmt 0       # susan.c:419:3
	movq	%r12, %rdi
	movl	%r15d, %edx
	callq	wccmemset
.Ltmp181:
	#DEBUG_VALUE: susan_principle:i <- 3
	movl	$1, %esi
	movabsq	$168965887160537462, %rdi # imm = 0x2584994435CD176
	callq	_KEnterRegion
	.loc	2 422 14 is_stmt 1      # susan.c:422:14
.Ltmp182:
	addl	$-3, %ebx
.Ltmp183:
	.loc	2 422 12 is_stmt 0      # susan.c:422:12
	movslq	%ebx, %rax
	.loc	2 424 16 is_stmt 1      # susan.c:424:16
.Ltmp184:
	movq	%rax, -504(%rbp)        # 8-byte Spill
	leal	-3(%r13), %eax
	.loc	2 424 14 is_stmt 0      # susan.c:424:14
	movslq	%eax, %rdx
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movslq	%r13d, %rcx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	leaq	(%rcx,%rcx,2), %rax
	addq	%rax, %r12
.Ltmp185:
	movq	%r12, -312(%rbp)        # 8-byte Spill
	addq	%r14, %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	leal	-6(%rcx), %eax
	cltq
	leal	-5(%rcx), %ecx
	movslq	%ecx, %rsi
	leaq	(%rsi,%rsi), %rcx
	leaq	(%rcx,%rax,2), %rcx
	addq	%r14, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	leaq	(%rdx,%rax,2), %rcx
	addq	%r14, %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	30(%rsi,%rsi), %rcx
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	leaq	29(%rsi,%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	leaq	28(%rsi,%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	27(%rsi,%rsi), %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	leaq	26(%rsi,%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	addq	%rdx, %rsi
	addq	%r14, %rsi
	movq	%rsi, -272(%rbp)        # 8-byte Spill
	leaq	26(%rax,%rax), %rcx
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	leaq	25(%rax,%rax), %rcx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	leaq	24(%rax,%rax), %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	leaq	23(%rax,%rax), %rcx
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	leaq	22(%rax,%rax), %rcx
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	leaq	21(%rax,%rax), %rcx
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	leaq	20(%rax,%rax), %rcx
	movq	%rcx, -408(%rbp)        # 8-byte Spill
	leaq	20(%rax), %rcx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	leaq	19(%rax), %rcx
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	leaq	18(%rax), %rcx
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	leaq	16(%rax), %rcx
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	leaq	15(%rax), %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	leaq	14(%rax), %rax
	movq	%rax, -456(%rbp)        # 8-byte Spill
	leaq	32(%rdx,%rdx), %rax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	leaq	31(%rdx,%rdx), %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	leaq	30(%rdx,%rdx), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	leaq	(%r14,%rdx), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
.Ltmp186:
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	movl	$3, %ebx
	movl	$14, %eax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	movabsq	$-5497179217924242332, %r12 # imm = 0xB3B618A068F74464
	xorl	%r15d, %r15d
	xorl	%r14d, %r14d
	jmp	.LBB6_1
.Ltmp187:
	.align	16, 0x90
.LBB6_7:                                # %for.cond4.pre_exit.for.inc287
                                        #   in Loop: Header=BB6_1 Depth=1
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	#DEBUG_VALUE: susan_principle:max_no <- [RBP+-240]
	#DEBUG_VALUE: susan_principle:i <- 3
	#DEBUG_VALUE: susan_principle:j <- 3
	movl	$1, %esi
	movabsq	$3634085653773543179, %rdi # imm = 0x326EDDA5DC83E70B
	callq	_KExitRegion
	movl	$122, %r14d
	movl	$122, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-496(%rbp), %rbx        # 8-byte Reload
	.loc	2 422 3 is_stmt 1       # susan.c:422:3
	incq	%rbx
	movl	$126, %r15d
	movl	$126, %edi
	movl	$123, %esi
	movl	$1, %edx
	movl	$122, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$8909183441481442723, %rdi # imm = 0x7BA3C7231C4B25A3
	callq	_KExitRegion
	movq	-512(%rbp), %rax        # 8-byte Reload
	addq	%rax, -488(%rbp)        # 8-byte Folded Spill
	addq	%rax, -464(%rbp)        # 8-byte Folded Spill
	addq	%rax, -472(%rbp)        # 8-byte Folded Spill
	addq	%rax, -480(%rbp)        # 8-byte Folded Spill
	addq	%rax, -320(%rbp)        # 8-byte Folded Spill
	addq	%rax, -328(%rbp)        # 8-byte Folded Spill
	addq	%rax, -336(%rbp)        # 8-byte Folded Spill
	addq	%rax, -344(%rbp)        # 8-byte Folded Spill
	addq	%rax, -352(%rbp)        # 8-byte Folded Spill
	addq	%rax, -360(%rbp)        # 8-byte Folded Spill
	addq	%rax, -368(%rbp)        # 8-byte Folded Spill
	addq	%rax, -376(%rbp)        # 8-byte Folded Spill
	addq	%rax, -384(%rbp)        # 8-byte Folded Spill
	addq	%rax, -392(%rbp)        # 8-byte Folded Spill
	addq	%rax, -400(%rbp)        # 8-byte Folded Spill
	addq	%rax, -408(%rbp)        # 8-byte Folded Spill
	addq	%rax, -416(%rbp)        # 8-byte Folded Spill
	addq	%rax, -424(%rbp)        # 8-byte Folded Spill
	addq	%rax, -432(%rbp)        # 8-byte Folded Spill
	addq	%rax, -440(%rbp)        # 8-byte Folded Spill
	addq	%rax, -448(%rbp)        # 8-byte Folded Spill
	addq	%rax, -456(%rbp)        # 8-byte Folded Spill
.Ltmp188:
.LBB6_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_3 Depth 2
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	#DEBUG_VALUE: susan_principle:max_no <- [RBP+-240]
	#DEBUG_VALUE: susan_principle:i <- 3
	movl	$123, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$122, %edi
	movl	$123, %esi
	movl	$1, %edx
	movl	$3, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$123, %edi
	movl	$122, %esi
	callq	_KPhiAddCond
	movl	$123, %edi
	movl	$123, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 422 3 is_stmt 0       # susan.c:422:3
	cmpq	-504(%rbp), %rbx        # 8-byte Folded Reload
	jge	.LBB6_8
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB6_1 Depth=1
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	#DEBUG_VALUE: susan_principle:max_no <- [RBP+-240]
	#DEBUG_VALUE: susan_principle:i <- 3
	movq	%rbx, -496(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movabsq	$8909183441481442723, %rdi # imm = 0x7BA3C7231C4B25A3
	callq	_KEnterRegion
	movl	$122, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_principle:j <- 3
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$3634085653773543179, %rdi # imm = 0x326EDDA5DC83E70B
	callq	_KEnterRegion
	xorl	%ebx, %ebx
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	-432(%rbp), %rax        # 8-byte Reload
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	-488(%rbp), %r14        # 8-byte Reload
	xorl	%r15d, %r15d
	movl	$3, %r13d
	jmp	.LBB6_3
	.align	16, 0x90
.LBB6_6:                                # %for.inc
                                        #   in Loop: Header=BB6_3 Depth=2
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	#DEBUG_VALUE: susan_principle:max_no <- [RBP+-240]
	#DEBUG_VALUE: susan_principle:i <- 3
	#DEBUG_VALUE: susan_principle:j <- 3
	movl	$124, %ebx
	movl	$124, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-232(%rbp), %r13        # 8-byte Reload
	.loc	2 424 5 is_stmt 1       # susan.c:424:5
.Ltmp189:
	incq	%r13
	movl	$127, %r15d
	movl	$127, %edi
	movl	$125, %esi
	movl	$1, %edx
	movl	$124, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-5497179217924242332, %r12 # imm = 0xB3B618A068F74464
	movq	%r12, %rdi
	callq	_KExitRegion
	incq	%r14
	incq	-224(%rbp)              # 8-byte Folded Spill
	incq	-216(%rbp)              # 8-byte Folded Spill
	incq	-208(%rbp)              # 8-byte Folded Spill
	incq	-80(%rbp)               # 8-byte Folded Spill
	incq	-200(%rbp)              # 8-byte Folded Spill
	incq	-192(%rbp)              # 8-byte Folded Spill
	incq	-184(%rbp)              # 8-byte Folded Spill
	incq	-176(%rbp)              # 8-byte Folded Spill
	incq	-64(%rbp)               # 8-byte Folded Spill
	incq	-168(%rbp)              # 8-byte Folded Spill
	incq	-160(%rbp)              # 8-byte Folded Spill
	incq	-152(%rbp)              # 8-byte Folded Spill
	incq	-144(%rbp)              # 8-byte Folded Spill
	incq	-136(%rbp)              # 8-byte Folded Spill
	incq	-128(%rbp)              # 8-byte Folded Spill
	incq	-72(%rbp)               # 8-byte Folded Spill
	incq	-120(%rbp)              # 8-byte Folded Spill
	incq	-112(%rbp)              # 8-byte Folded Spill
	incq	-104(%rbp)              # 8-byte Folded Spill
	incq	-96(%rbp)               # 8-byte Folded Spill
	incq	-88(%rbp)               # 8-byte Folded Spill
.Ltmp190:
.LBB6_3:                                # %for.cond4
                                        #   Parent Loop BB6_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	#DEBUG_VALUE: susan_principle:max_no <- [RBP+-240]
	#DEBUG_VALUE: susan_principle:i <- 3
	#DEBUG_VALUE: susan_principle:j <- 3
	movl	$122, %edi
	callq	_KPushCDep
	movl	$125, %edi
	movl	$122, %edx
	movl	%r15d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$2, (%rsp)
	movl	$124, %edi
	movl	$122, %esi
	movl	$2, %edx
	movl	$125, %ecx
	movl	$1, %r8d
	movl	$2, %r9d
	callq	_KTimestamp3
	movl	$125, %edi
	movl	$124, %esi
	callq	_KPhiAddCond
	movl	$125, %edi
	movl	$125, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 424 5 is_stmt 0       # susan.c:424:5
	cmpq	-248(%rbp), %r13        # 8-byte Folded Reload
	jge	.LBB6_7
# BB#4:                                 # %for.body8
                                        #   in Loop: Header=BB6_3 Depth=2
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	#DEBUG_VALUE: susan_principle:max_no <- [RBP+-240]
	#DEBUG_VALUE: susan_principle:i <- 3
	#DEBUG_VALUE: susan_principle:j <- 3
	movq	%r13, -232(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movq	%r12, %rdi
	callq	_KEnterRegion
	movl	$124, %edi
	callq	_KPushCDep
	movl	$377, %edi              # imm = 0x179
	callq	_KWork
.Ltmp191:
	#DEBUG_VALUE: susan_principle:n <- 100
	movq	-264(%rbp), %rbx        # 8-byte Reload
	leaq	-11(%rbx,%r14), %rdi
	movl	$5, %esi
	movl	$6, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 427 10 is_stmt 1      # susan.c:427:10
.Ltmp192:
	movzbl	-11(%rbx,%r14), %r15d
	movq	%r15, -48(%rbp)         # 8-byte Spill
	movq	%r14, -56(%rbp)         # 8-byte Spill
	movq	-256(%rbp), %r14        # 8-byte Reload
.Ltmp193:
	#DEBUG_VALUE: susan_principle:in <- R14
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-12(%r14,%rax), %rdi
	movl	$7, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 429 12                # susan.c:429:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-12(%r14,%rax), %eax
	movq	%r15, %rbx
	movq	%r15, %r13
	subq	%rax, %rbx
	movq	-304(%rbp), %r12        # 8-byte Reload
.Ltmp194:
	#DEBUG_VALUE: susan_principle:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$8, %esi
	movl	$9, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 429 10 is_stmt 0      # susan.c:429:10
	movzbl	(%r12,%rbx), %ebx
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-11(%r14,%rax), %rdi
	movl	$10, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 430 12 is_stmt 1      # susan.c:430:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-11(%r14,%rax), %eax
	movq	%r13, %r15
	subq	%rax, %r15
	leaq	(%r12,%r15), %rdi
	movl	$11, %esi
	movl	$12, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 430 10 is_stmt 0      # susan.c:430:10
	movzbl	(%r12,%r15), %r15d
	.loc	2 429 7 is_stmt 1       # susan.c:429:7
	addl	%ebx, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-10(%r14,%rax), %rdi
	movl	$13, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 431 12                # susan.c:431:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-10(%r14,%rax), %eax
.Ltmp195:
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$14, %esi
	movl	$15, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 431 10 is_stmt 0      # susan.c:431:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 430 7 is_stmt 1       # susan.c:430:7
	addl	%r15d, %r14d
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-10(%r13,%rax), %rdi
	movl	$16, %esi
	movl	$17, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 434 12                # susan.c:434:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-10(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$18, %esi
	movl	$19, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 434 10 is_stmt 0      # susan.c:434:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 431 7 is_stmt 1       # susan.c:431:7
	addl	%r14d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-9(%r13,%rax), %rdi
	movl	$20, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 435 12                # susan.c:435:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-9(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$21, %esi
	movl	$22, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 435 10 is_stmt 0      # susan.c:435:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 434 7 is_stmt 1       # susan.c:434:7
	addl	%r15d, %r14d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-8(%r13,%rax), %rdi
	movl	$23, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 436 12                # susan.c:436:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-8(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$24, %esi
	movl	$25, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 436 10 is_stmt 0      # susan.c:436:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 435 7 is_stmt 1       # susan.c:435:7
	addl	%r14d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-7(%r13,%rax), %rdi
	movl	$26, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 437 12                # susan.c:437:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-7(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$27, %esi
	movl	$28, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 437 10 is_stmt 0      # susan.c:437:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 436 7 is_stmt 1       # susan.c:436:7
	addl	%r15d, %r14d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-6(%r13,%rax), %rdi
	movl	$29, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 438 12                # susan.c:438:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$30, %esi
	movl	$31, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 438 10 is_stmt 0      # susan.c:438:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 437 7 is_stmt 1       # susan.c:437:7
	addl	%r14d, %r15d
	movq	-272(%rbp), %r13        # 8-byte Reload
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-6(%r13,%rax), %rdi
	movl	$32, %esi
	movl	$33, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 441 12                # susan.c:441:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$34, %esi
	movl	$35, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 441 10 is_stmt 0      # susan.c:441:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 438 7 is_stmt 1       # susan.c:438:7
	addl	%r15d, %r14d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-5(%r13,%rax), %rdi
	movl	$36, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 442 12                # susan.c:442:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-5(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$37, %esi
	movl	$38, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 442 10 is_stmt 0      # susan.c:442:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 441 7 is_stmt 1       # susan.c:441:7
	addl	%r14d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-4(%r13,%rax), %rdi
	movl	$39, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 443 12                # susan.c:443:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$40, %esi
	movl	$41, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 443 10 is_stmt 0      # susan.c:443:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 442 7 is_stmt 1       # susan.c:442:7
	addl	%r15d, %r14d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-3(%r13,%rax), %rdi
	movl	$42, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 444 12                # susan.c:444:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-3(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$43, %esi
	movl	$44, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 444 10 is_stmt 0      # susan.c:444:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 443 7 is_stmt 1       # susan.c:443:7
	addl	%r14d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-2(%r13,%rax), %rdi
	movl	$45, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 445 12                # susan.c:445:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$46, %esi
	movl	$47, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 445 10 is_stmt 0      # susan.c:445:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 444 7 is_stmt 1       # susan.c:444:7
	addl	%r15d, %r14d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-1(%r13,%rax), %rdi
	movl	$48, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 446 12                # susan.c:446:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$49, %esi
	movl	$50, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 446 10 is_stmt 0      # susan.c:446:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 445 7 is_stmt 1       # susan.c:445:7
	addl	%r14d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$51, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 447 12                # susan.c:447:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$52, %esi
	movl	$53, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 447 10 is_stmt 0      # susan.c:447:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 446 7 is_stmt 1       # susan.c:446:7
	addl	%r15d, %r14d
	movq	-88(%rbp), %rax         # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$54, %esi
	movl	$55, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 450 12                # susan.c:450:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$56, %esi
	movl	$57, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 450 10 is_stmt 0      # susan.c:450:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 447 7 is_stmt 1       # susan.c:447:7
	addl	%r14d, %r15d
	movq	-96(%rbp), %rax         # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$58, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 451 12                # susan.c:451:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-5(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$59, %esi
	movl	$60, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 451 10 is_stmt 0      # susan.c:451:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 450 7 is_stmt 1       # susan.c:450:7
	addl	%r15d, %r14d
	movq	-104(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$61, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 452 12                # susan.c:452:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$62, %esi
	movl	$63, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 452 10 is_stmt 0      # susan.c:452:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 451 7 is_stmt 1       # susan.c:451:7
	addl	%r14d, %r15d
	movq	-112(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$64, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 454 12                # susan.c:454:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$65, %esi
	movl	$66, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 454 10 is_stmt 0      # susan.c:454:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 452 7 is_stmt 1       # susan.c:452:7
	addl	%r15d, %r14d
	movq	-120(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$67, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 455 12                # susan.c:455:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$68, %esi
	movl	$69, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 455 10 is_stmt 0      # susan.c:455:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 454 7 is_stmt 1       # susan.c:454:7
	addl	%r14d, %r15d
	movq	-72(%rbp), %rbx         # 8-byte Reload
	leaq	(%r13,%rbx), %rdi
	movl	$70, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 456 12                # susan.c:456:12
	movzbl	(%r13,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$71, %esi
	movl	$72, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 456 10 is_stmt 0      # susan.c:456:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 455 7 is_stmt 1       # susan.c:455:7
	addl	%r15d, %r14d
	movq	-128(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$73, %esi
	movl	$74, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 459 12                # susan.c:459:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$75, %esi
	movl	$76, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 459 10 is_stmt 0      # susan.c:459:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 456 7 is_stmt 1       # susan.c:456:7
	addl	%r14d, %r15d
	movq	-136(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$77, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 460 12                # susan.c:460:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-5(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$78, %esi
	movl	$79, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 460 10 is_stmt 0      # susan.c:460:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 459 7 is_stmt 1       # susan.c:459:7
	addl	%r15d, %r14d
	movq	-144(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$80, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 461 12                # susan.c:461:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$81, %esi
	movl	$82, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 461 10 is_stmt 0      # susan.c:461:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 460 7 is_stmt 1       # susan.c:460:7
	addl	%r14d, %r15d
	movq	-152(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$83, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 462 12                # susan.c:462:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-3(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$84, %esi
	movl	$85, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 462 10 is_stmt 0      # susan.c:462:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 461 7 is_stmt 1       # susan.c:461:7
	addl	%r15d, %r14d
	movq	-160(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$86, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 463 12                # susan.c:463:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$87, %esi
	movl	$88, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 463 10 is_stmt 0      # susan.c:463:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 462 7 is_stmt 1       # susan.c:462:7
	addl	%r14d, %r15d
	movq	-168(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$89, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 464 12                # susan.c:464:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$90, %esi
	movl	$91, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 464 10 is_stmt 0      # susan.c:464:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 463 7 is_stmt 1       # susan.c:463:7
	addl	%r15d, %r14d
	movq	-64(%rbp), %rbx         # 8-byte Reload
	leaq	(%r13,%rbx), %rdi
	movl	$92, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 465 12                # susan.c:465:12
	movzbl	(%r13,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$93, %esi
	movl	$94, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 465 10 is_stmt 0      # susan.c:465:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 464 7 is_stmt 1       # susan.c:464:7
	addl	%r14d, %r15d
	movq	-288(%rbp), %r13        # 8-byte Reload
	movq	-176(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$95, %esi
	movl	$96, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 468 12                # susan.c:468:12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$97, %esi
	movl	$98, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 468 10 is_stmt 0      # susan.c:468:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 465 7 is_stmt 1       # susan.c:465:7
	addl	%r15d, %r14d
	movq	-184(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$99, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 469 12                # susan.c:469:12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-3(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$100, %esi
	movl	$101, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 469 10 is_stmt 0      # susan.c:469:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 468 7 is_stmt 1       # susan.c:468:7
	addl	%r14d, %r15d
	movq	-192(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$102, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 470 12                # susan.c:470:12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$103, %esi
	movl	$104, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 470 10 is_stmt 0      # susan.c:470:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 469 7 is_stmt 1       # susan.c:469:7
	addl	%r15d, %r14d
	movq	-200(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$105, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 471 12                # susan.c:471:12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$106, %esi
	movl	$107, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 471 10 is_stmt 0      # susan.c:471:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 470 7 is_stmt 1       # susan.c:470:7
	addl	%r14d, %r15d
	movq	-80(%rbp), %rbx         # 8-byte Reload
	leaq	(%r13,%rbx), %rdi
	movl	$108, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 472 12                # susan.c:472:12
	movzbl	(%r13,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$109, %esi
	movl	$110, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 472 10 is_stmt 0      # susan.c:472:10
	movzbl	(%r12,%rbx), %eax
	.loc	2 471 7 is_stmt 1       # susan.c:471:7
	addl	%r15d, %eax
	movl	%eax, -236(%rbp)        # 4-byte Spill
	movq	-280(%rbp), %r13        # 8-byte Reload
	movq	-208(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$111, %esi
	movl	$112, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-224(%rbp), %r14        # 8-byte Reload
	.loc	2 475 12                # susan.c:475:12
	movzbl	-2(%r13,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$113, %esi
	movl	$114, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 475 10 is_stmt 0      # susan.c:475:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 472 7 is_stmt 1       # susan.c:472:7
	addl	-236(%rbp), %r15d       # 4-byte Folded Reload
	movq	-216(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$115, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 476 12                # susan.c:476:12
	movzbl	-1(%r13,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$116, %esi
	movl	$117, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 476 10 is_stmt 0      # susan.c:476:10
	movzbl	(%r12,%rbx), %ebx
	.loc	2 475 7 is_stmt 1       # susan.c:475:7
	addl	%r15d, %ebx
	leaq	(%r13,%r14), %rdi
	movl	$118, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 477 12                # susan.c:477:12
	movzbl	(%r13,%r14), %eax
	movq	-56(%rbp), %r14         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	leaq	(%r12,%rcx), %rdi
	movq	%rcx, %r15
	movl	$119, %esi
	movl	$120, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 477 10 is_stmt 0      # susan.c:477:10
	movzbl	(%r12,%r15), %eax
.Ltmp196:
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	.loc	2 477 7                 # susan.c:477:7
	leal	100(%rax,%rbx), %ebx
.Ltmp197:
	#DEBUG_VALUE: susan_principle:n <- EBX
	movl	$2, 568(%rsp)
	movl	$119, 560(%rsp)
	movl	$3, 552(%rsp)
	movl	$116, 544(%rsp)
	movl	$4, 536(%rsp)
	movl	$113, 528(%rsp)
	movl	$10, 520(%rsp)
	movl	$93, 512(%rsp)
	movl	$11, 504(%rsp)
	movl	$90, 496(%rsp)
	movl	$12, 488(%rsp)
	movl	$87, 480(%rsp)
	movl	$13, 472(%rsp)
	movl	$84, 464(%rsp)
	movl	$14, 456(%rsp)
	movl	$81, 448(%rsp)
	movl	$15, 440(%rsp)
	movl	$78, 432(%rsp)
	movl	$16, 424(%rsp)
	movl	$75, 416(%rsp)
	movl	$17, 408(%rsp)
	movl	$71, 400(%rsp)
	movl	$18, 392(%rsp)
	movl	$68, 384(%rsp)
	movl	$5, 376(%rsp)
	movl	$109, 368(%rsp)
	movl	$6, 360(%rsp)
	movl	$106, 352(%rsp)
	movl	$7, 344(%rsp)
	movl	$103, 336(%rsp)
	movl	$8, 328(%rsp)
	movl	$100, 320(%rsp)
	movl	$9, 312(%rsp)
	movl	$97, 304(%rsp)
	movl	$32, 296(%rsp)
	movl	$24, 288(%rsp)
	movl	$34, 280(%rsp)
	movl	$18, 272(%rsp)
	movl	$25, 264(%rsp)
	movl	$46, 256(%rsp)
	movl	$24, 248(%rsp)
	movl	$49, 240(%rsp)
	movl	$23, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$35, 216(%rsp)
	movl	$14, 208(%rsp)
	movl	$37, 200(%rsp)
	movl	$8, 192(%rsp)
	movl	$29, 184(%rsp)
	movl	$34, 176(%rsp)
	movl	$37, 168(%rsp)
	movl	$124, 160(%rsp)
	movl	$27, 152(%rsp)
	movl	$40, 144(%rsp)
	movl	$36, 136(%rsp)
	movl	$11, 128(%rsp)
	movl	$30, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$31, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$21, 88(%rsp)
	movl	$59, 80(%rsp)
	movl	$20, 72(%rsp)
	movl	$62, 64(%rsp)
	movl	$28, 56(%rsp)
	movl	$37, 48(%rsp)
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	movl	$26, 24(%rsp)
	movl	$43, 16(%rsp)
	movl	$22, 8(%rsp)
	movl	$56, (%rsp)
	movl	$128, %edi
	movl	$38, %esi
	movl	$21, %edx
	movl	$33, %ecx
	movl	$65, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 479 11 is_stmt 1      # susan.c:479:11
.Ltmp198:
	cmpl	-240(%rbp), %ebx        # 4-byte Folded Reload
	jg	.LBB6_6
.Ltmp199:
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB6_3 Depth=2
	#DEBUG_VALUE: susan_principle:in <- [RBP+-256]
	#DEBUG_VALUE: susan_principle:bp <- [RBP+-304]
	#DEBUG_VALUE: susan_principle:max_no <- [RBP+-240]
	#DEBUG_VALUE: susan_principle:i <- 3
	#DEBUG_VALUE: susan_principle:j <- 3
	#DEBUG_VALUE: susan_principle:n <- EBX
	movl	$128, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	.loc	2 480 25                # susan.c:480:25
	movl	-240(%rbp), %r15d       # 4-byte Reload
	subl	%ebx, %r15d
	movl	$3, 568(%rsp)
	movl	$119, 560(%rsp)
	movl	$4, 552(%rsp)
	movl	$116, 544(%rsp)
	movl	$5, 536(%rsp)
	movl	$113, 528(%rsp)
	movl	$11, 520(%rsp)
	movl	$93, 512(%rsp)
	movl	$12, 504(%rsp)
	movl	$90, 496(%rsp)
	movl	$13, 488(%rsp)
	movl	$87, 480(%rsp)
	movl	$14, 472(%rsp)
	movl	$84, 464(%rsp)
	movl	$15, 456(%rsp)
	movl	$81, 448(%rsp)
	movl	$16, 440(%rsp)
	movl	$78, 432(%rsp)
	movl	$17, 424(%rsp)
	movl	$75, 416(%rsp)
	movl	$18, 408(%rsp)
	movl	$71, 400(%rsp)
	movl	$19, 392(%rsp)
	movl	$68, 384(%rsp)
	movl	$6, 376(%rsp)
	movl	$109, 368(%rsp)
	movl	$7, 360(%rsp)
	movl	$106, 352(%rsp)
	movl	$8, 344(%rsp)
	movl	$103, 336(%rsp)
	movl	$9, 328(%rsp)
	movl	$100, 320(%rsp)
	movl	$10, 312(%rsp)
	movl	$97, 304(%rsp)
	movl	$33, 296(%rsp)
	movl	$24, 288(%rsp)
	movl	$35, 280(%rsp)
	movl	$18, 272(%rsp)
	movl	$26, 264(%rsp)
	movl	$46, 256(%rsp)
	movl	$25, 248(%rsp)
	movl	$49, 240(%rsp)
	movl	$24, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$36, 216(%rsp)
	movl	$14, 208(%rsp)
	movl	$38, 200(%rsp)
	movl	$8, 192(%rsp)
	movl	$30, 184(%rsp)
	movl	$34, 176(%rsp)
	movl	$38, 168(%rsp)
	movl	$124, 160(%rsp)
	movl	$28, 152(%rsp)
	movl	$40, 144(%rsp)
	movl	$37, 136(%rsp)
	movl	$11, 128(%rsp)
	movl	$31, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$32, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$22, 88(%rsp)
	movl	$59, 80(%rsp)
	movl	$21, 72(%rsp)
	movl	$62, 64(%rsp)
	movl	$29, 56(%rsp)
	movl	$37, 48(%rsp)
	movl	$2, 40(%rsp)
	movl	$1, 32(%rsp)
	movl	$27, 24(%rsp)
	movl	$43, 16(%rsp)
	movl	$23, 8(%rsp)
	movl	$56, (%rsp)
	movl	$121, %edi
	movl	$38, %esi
	movl	$21, %edx
	movl	$34, %ecx
	movl	$65, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movq	-312(%rbp), %rbx        # 8-byte Reload
.Ltmp200:
	leaq	-11(%rbx,%r14), %rsi
	movl	$121, %edi
	movl	$1, %edx
	callq	_KStore
	.loc	2 480 9 is_stmt 0       # susan.c:480:9
	movb	%r15b, -11(%rbx,%r14)
	callq	_KPopCDep
	jmp	.LBB6_6
.Ltmp201:
.LBB6_8:                                # %for.cond.pre_exit.for.end289
	#DEBUG_VALUE: susan_principle:i <- 3
	movl	$1, %esi
	movabsq	$168965887160537462, %rdi # imm = 0x2584994435CD176
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$-6311205294499707348, %rdi # imm = 0xA86A18390CC7C62C
	addq	$1048, %rsp             # imm = 0x418
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp202:
	.size	susan_principle, .Ltmp202-susan_principle
.Lfunc_end6:
	.cfi_endproc

	.globl	susan_principle_small
	.align	16, 0x90
	.type	susan_principle_small,@function
susan_principle_small:                  # @susan_principle_small
.Lfunc_begin7:
	.loc	2 488 0 is_stmt 1       # susan.c:488:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp203:
	.cfi_def_cfa_offset 16
.Ltmp204:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp205:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
.Ltmp206:
	.cfi_offset %rbx, -56
.Ltmp207:
	.cfi_offset %r12, -48
.Ltmp208:
	.cfi_offset %r13, -40
.Ltmp209:
	.cfi_offset %r14, -32
.Ltmp210:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: susan_principle_small:in <- RDI
	#DEBUG_VALUE: susan_principle_small:r <- RSI
	#DEBUG_VALUE: susan_principle_small:bp <- RDX
	#DEBUG_VALUE: susan_principle_small:max_no <- ECX
	#DEBUG_VALUE: susan_principle_small:x_size <- R8D
	#DEBUG_VALUE: susan_principle_small:y_size <- R9D
	movl	%r9d, %ebx
.Ltmp211:
	#DEBUG_VALUE: susan_principle_small:y_size <- EBX
	movl	%r8d, %r15d
.Ltmp212:
	#DEBUG_VALUE: susan_principle_small:x_size <- R15D
	movl	%ecx, -64(%rbp)         # 4-byte Spill
.Ltmp213:
	#DEBUG_VALUE: susan_principle_small:max_no <- [RBP+-64]
	movq	%rdx, -112(%rbp)        # 8-byte Spill
.Ltmp214:
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	movq	%rsi, %r12
.Ltmp215:
	#DEBUG_VALUE: susan_principle_small:r <- R12
	movq	%rdi, %r14
.Ltmp216:
	#DEBUG_VALUE: susan_principle_small:in <- R14
	movq	%r14, -80(%rbp)         # 8-byte Spill
	movabsq	$-1035175965619911472, %rdi # imm = 0xF1A250F1A13404D0
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$41, %edi
	movl	$4, %esi
	callq	_KPrepRTable
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	movl	$4, %edi
	callq	_KWork
	.loc	2 492 17 prologue_end   # susan.c:492:17
.Ltmp217:
	movl	%r15d, %eax
	imull	%ebx, %eax
	leal	(,%rax,4), %r13d
	movabsq	$7640908711251933825, %rdi # imm = 0x6A09F5FD575BFA81
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$4, %edi
	movl	$2, %esi
	movl	$4, %edx
	movl	$3, %ecx
	movl	$4, %r8d
	callq	_KTimestamp2
	movl	$4, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	xorl	%esi, %esi
	.loc	2 492 3 is_stmt 0       # susan.c:492:3
	movq	%r12, %rdi
	movl	%r13d, %edx
	callq	wccmemset
.Ltmp218:
	#DEBUG_VALUE: susan_principle_small:i <- 1
	movl	$1, %esi
	movabsq	$-2261105782188377318, %rdi # imm = 0xE09EF0455D147B1A
	callq	_KEnterRegion
	.loc	2 495 14 is_stmt 1      # susan.c:495:14
.Ltmp219:
	decl	%ebx
.Ltmp220:
	.loc	2 495 12 is_stmt 0      # susan.c:495:12
	movslq	%ebx, %rax
	.loc	2 497 16 is_stmt 1      # susan.c:497:16
.Ltmp221:
	movq	%rax, -144(%rbp)        # 8-byte Spill
	leal	-1(%r15), %eax
	.loc	2 497 14 is_stmt 0      # susan.c:497:14
	cltq
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movslq	%r15d, %rax
	.loc	2 505 10 is_stmt 1      # susan.c:505:10
.Ltmp222:
	movq	%rax, -152(%rbp)        # 8-byte Spill
	addl	$-2, %r15d
.Ltmp223:
	addq	%rax, %r12
.Ltmp224:
	movq	%r12, -120(%rbp)        # 8-byte Spill
	leaq	(%r14,%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movslq	%r15d, %rax
	leaq	(%r14,%rax,2), %rcx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	addq	%r14, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
.Ltmp225:
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	movl	$1, %r14d
	movabsq	$8218491359967797053, %rbx # imm = 0x720DF259347F5F3D
	xorl	%eax, %eax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	xorl	%r15d, %r15d
	xorl	%r13d, %r13d
	jmp	.LBB7_1
.Ltmp226:
	.align	16, 0x90
.LBB7_7:                                # %for.cond4.pre_exit.for.inc83
                                        #   in Loop: Header=BB7_1 Depth=1
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_principle_small:max_no <- [RBP+-64]
	#DEBUG_VALUE: susan_principle_small:i <- 1
	#DEBUG_VALUE: susan_principle_small:j <- 1
	movl	$1, %esi
	movabsq	$2088541292896768789, %rdi # imm = 0x1CFBFD3D85D8D315
	callq	_KExitRegion
	movl	$34, %r13d
	movl	$34, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-136(%rbp), %r14        # 8-byte Reload
	.loc	2 495 3                 # susan.c:495:3
	incq	%r14
	movl	$38, %r15d
	movl	$38, %edi
	movl	$35, %esi
	movl	$1, %edx
	movl	$34, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$1695542720768415827, %rdi # imm = 0x1787C71F04E69853
	callq	_KExitRegion
	movq	-128(%rbp), %rax        # 8-byte Reload
	addq	-152(%rbp), %rax        # 8-byte Folded Reload
	movq	%rax, -128(%rbp)        # 8-byte Spill
.Ltmp227:
.LBB7_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_3 Depth 2
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_principle_small:max_no <- [RBP+-64]
	#DEBUG_VALUE: susan_principle_small:i <- 1
	movl	$35, %edi
	movl	%r15d, %esi
	movl	%r13d, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$34, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$35, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$35, %edi
	movl	$34, %esi
	callq	_KPhiAddCond
	movl	$35, %edi
	movl	$35, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 495 3 is_stmt 0       # susan.c:495:3
	cmpq	-144(%rbp), %r14        # 8-byte Folded Reload
	jge	.LBB7_8
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB7_1 Depth=1
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_principle_small:max_no <- [RBP+-64]
	#DEBUG_VALUE: susan_principle_small:i <- 1
	movq	%r14, -136(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movabsq	$1695542720768415827, %rdi # imm = 0x1787C71F04E69853
	callq	_KEnterRegion
	movl	$34, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_principle_small:j <- 1
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$2088541292896768789, %rdi # imm = 0x1CFBFD3D85D8D315
	callq	_KEnterRegion
	xorl	%r13d, %r13d
	movq	-128(%rbp), %r14        # 8-byte Reload
	xorl	%r15d, %r15d
	movl	$1, %r12d
	jmp	.LBB7_3
	.align	16, 0x90
.LBB7_6:                                # %for.inc
                                        #   in Loop: Header=BB7_3 Depth=2
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_principle_small:max_no <- [RBP+-64]
	#DEBUG_VALUE: susan_principle_small:i <- 1
	#DEBUG_VALUE: susan_principle_small:j <- 1
	movl	$36, %r13d
	movl	$36, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-56(%rbp), %r12         # 8-byte Reload
	.loc	2 497 5 is_stmt 1       # susan.c:497:5
.Ltmp228:
	incq	%r12
	movl	$39, %r15d
	movl	$39, %edi
	movl	$37, %esi
	movl	$1, %edx
	movl	$36, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$8218491359967797053, %rbx # imm = 0x720DF259347F5F3D
	movq	%rbx, %rdi
	callq	_KExitRegion
	incq	%r14
.Ltmp229:
.LBB7_3:                                # %for.cond4
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_principle_small:max_no <- [RBP+-64]
	#DEBUG_VALUE: susan_principle_small:i <- 1
	#DEBUG_VALUE: susan_principle_small:j <- 1
	movl	$34, %edi
	callq	_KPushCDep
	movl	$37, %edi
	movl	$34, %edx
	movl	%r15d, %esi
	movl	%r13d, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$36, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$34, %ecx
	movl	$2, %r8d
	movl	$37, %r9d
	callq	_KTimestamp3
	movl	$37, %edi
	movl	$36, %esi
	callq	_KPhiAddCond
	movl	$37, %edi
	movl	$37, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 497 5 is_stmt 0       # susan.c:497:5
	cmpq	-72(%rbp), %r12         # 8-byte Folded Reload
	jge	.LBB7_7
# BB#4:                                 # %for.body8
                                        #   in Loop: Header=BB7_3 Depth=2
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_principle_small:max_no <- [RBP+-64]
	#DEBUG_VALUE: susan_principle_small:i <- 1
	#DEBUG_VALUE: susan_principle_small:j <- 1
	movq	%r12, -56(%rbp)         # 8-byte Spill
	movl	$2, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$36, %edi
	callq	_KPushCDep
	movl	$93, %edi
	callq	_KWork
.Ltmp230:
	#DEBUG_VALUE: susan_principle_small:n <- 100
	movq	-88(%rbp), %rbx         # 8-byte Reload
	leaq	1(%rbx,%r14), %rdi
	movl	$5, %esi
	movl	$6, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 500 10 is_stmt 1      # susan.c:500:10
.Ltmp231:
	movzbl	1(%rbx,%r14), %eax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %r15
	movq	-80(%rbp), %r13         # 8-byte Reload
.Ltmp232:
	#DEBUG_VALUE: susan_principle_small:in <- R13
	leaq	(%r13,%r14), %rdi
	movl	$7, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 502 12                # susan.c:502:12
	movzbl	(%r13,%r14), %eax
	movq	%r15, %rbx
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp233:
	#DEBUG_VALUE: susan_principle_small:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$8, %esi
	movl	$9, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 502 10 is_stmt 0      # susan.c:502:10
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	leaq	1(%r13,%r14), %rdi
	movl	$10, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 503 12 is_stmt 1      # susan.c:503:12
	movzbl	1(%r13,%r14), %eax
	movq	%r15, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$11, %esi
	movl	$12, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 503 10 is_stmt 0      # susan.c:503:10
	movzbl	(%r12,%rbx), %r15d
	.loc	2 502 7 is_stmt 1       # susan.c:502:7
	addl	-60(%rbp), %r15d        # 4-byte Folded Reload
	leaq	2(%r13,%r14), %rdi
	movl	$13, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 504 12                # susan.c:504:12
	movzbl	2(%r13,%r14), %eax
.Ltmp234:
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	movq	-48(%rbp), %r13         # 8-byte Reload
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$14, %esi
	movl	$15, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 504 10 is_stmt 0      # susan.c:504:10
	movzbl	(%r12,%rbx), %eax
	.loc	2 503 7 is_stmt 1       # susan.c:503:7
	addl	%r15d, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	movq	-96(%rbp), %r15         # 8-byte Reload
	leaq	2(%r15,%r14), %rdi
	movl	$16, %esi
	movl	$17, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 507 12                # susan.c:507:12
	movzbl	2(%r15,%r14), %eax
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$18, %esi
	movl	$19, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 507 10 is_stmt 0      # susan.c:507:10
	movzbl	(%r12,%rbx), %r13d
	.loc	2 504 7 is_stmt 1       # susan.c:504:7
	addl	-60(%rbp), %r13d        # 4-byte Folded Reload
	leaq	4(%r15,%r14), %rdi
	movl	$20, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 509 12                # susan.c:509:12
	movzbl	4(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$21, %esi
	movl	$22, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 509 10 is_stmt 0      # susan.c:509:10
	movzbl	(%r12,%rbx), %eax
	.loc	2 507 7 is_stmt 1       # susan.c:507:7
	addl	%r13d, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	movq	-104(%rbp), %r15        # 8-byte Reload
	leaq	4(%r15,%r14), %rdi
	movl	$23, %esi
	movl	$24, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 512 12                # susan.c:512:12
	movzbl	4(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$25, %esi
	movl	$26, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 512 10 is_stmt 0      # susan.c:512:10
	movzbl	(%r12,%rbx), %r13d
	.loc	2 509 7 is_stmt 1       # susan.c:509:7
	addl	-60(%rbp), %r13d        # 4-byte Folded Reload
	leaq	5(%r15,%r14), %rdi
	movl	$27, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 513 12                # susan.c:513:12
	movzbl	5(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$28, %esi
	movl	$29, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 513 10 is_stmt 0      # susan.c:513:10
	movzbl	(%r12,%rbx), %ebx
	.loc	2 512 7 is_stmt 1       # susan.c:512:7
	addl	%r13d, %ebx
	leaq	6(%r15,%r14), %rdi
	movl	$30, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 514 12                # susan.c:514:12
	movzbl	6(%r15,%r14), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	leaq	(%r12,%rcx), %rdi
	movq	%rcx, %r15
	movl	$31, %esi
	movl	$32, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 514 10 is_stmt 0      # susan.c:514:10
	movzbl	(%r12,%r15), %eax
.Ltmp235:
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	.loc	2 514 7                 # susan.c:514:7
	leal	100(%rax,%rbx), %ebx
.Ltmp236:
	#DEBUG_VALUE: susan_principle_small:n <- EBX
	movl	$3, 120(%rsp)
	movl	$28, 112(%rsp)
	movl	$4, 104(%rsp)
	movl	$25, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$21, 80(%rsp)
	movl	$6, 72(%rsp)
	movl	$18, 64(%rsp)
	movl	$7, 56(%rsp)
	movl	$14, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$36, 32(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 16(%rsp)
	movl	$8, 8(%rsp)
	movl	$11, (%rsp)
	movl	$40, %edi
	movl	$10, %esi
	movl	$31, %edx
	movl	$2, %ecx
	movl	$8, %r8d
	movl	$9, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 516 11 is_stmt 1      # susan.c:516:11
.Ltmp237:
	cmpl	-64(%rbp), %ebx         # 4-byte Folded Reload
	jg	.LBB7_6
.Ltmp238:
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB7_3 Depth=2
	#DEBUG_VALUE: susan_principle_small:in <- [RBP+-80]
	#DEBUG_VALUE: susan_principle_small:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_principle_small:max_no <- [RBP+-64]
	#DEBUG_VALUE: susan_principle_small:i <- 1
	#DEBUG_VALUE: susan_principle_small:j <- 1
	#DEBUG_VALUE: susan_principle_small:n <- EBX
	movl	$40, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	.loc	2 517 25                # susan.c:517:25
	movl	-64(%rbp), %r15d        # 4-byte Reload
	subl	%ebx, %r15d
	movl	$4, 120(%rsp)
	movl	$28, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$25, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$21, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$18, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$14, 48(%rsp)
	movl	$10, 40(%rsp)
	movl	$36, 32(%rsp)
	movl	$2, 24(%rsp)
	movl	$1, 16(%rsp)
	movl	$9, 8(%rsp)
	movl	$11, (%rsp)
	movl	$33, %edi
	movl	$10, %esi
	movl	$31, %edx
	movl	$3, %ecx
	movl	$8, %r8d
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movq	-120(%rbp), %rbx        # 8-byte Reload
.Ltmp239:
	leaq	1(%rbx,%r14), %rsi
	movl	$33, %edi
	movl	$1, %edx
	callq	_KStore
	.loc	2 517 9 is_stmt 0       # susan.c:517:9
	movb	%r15b, 1(%rbx,%r14)
	callq	_KPopCDep
	jmp	.LBB7_6
.Ltmp240:
.LBB7_8:                                # %for.cond.pre_exit.for.end85
	#DEBUG_VALUE: susan_principle_small:i <- 1
	movl	$1, %esi
	movabsq	$-2261105782188377318, %rdi # imm = 0xE09EF0455D147B1A
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$-1035175965619911472, %rdi # imm = 0xF1A250F1A13404D0
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp241:
	.size	susan_principle_small, .Ltmp241-susan_principle_small
.Lfunc_end7:
	.cfi_endproc

	.globl	median
	.align	16, 0x90
	.type	median,@function
median:                                 # @median
.Lfunc_begin8:
	.loc	2 524 0 is_stmt 1       # susan.c:524:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp242:
	.cfi_def_cfa_offset 16
.Ltmp243:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp244:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
.Ltmp245:
	.cfi_offset %rbx, -56
.Ltmp246:
	.cfi_offset %r12, -48
.Ltmp247:
	.cfi_offset %r13, -40
.Ltmp248:
	.cfi_offset %r14, -32
.Ltmp249:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: median:in <- RDI
	#DEBUG_VALUE: median:i <- ESI
	#DEBUG_VALUE: median:j <- EDX
	#DEBUG_VALUE: median:x_size <- ECX
	movl	%ecx, %ebx
.Ltmp250:
	#DEBUG_VALUE: median:x_size <- EBX
	movl	%ebx, -96(%rbp)         # 4-byte Spill
	movl	%edx, %r14d
.Ltmp251:
	#DEBUG_VALUE: median:j <- R14D
	movl	%r14d, -92(%rbp)        # 4-byte Spill
	movl	%esi, %r12d
.Ltmp252:
	#DEBUG_VALUE: median:i <- R12D
	movq	%rdi, %r13
.Ltmp253:
	#DEBUG_VALUE: median:in <- R13
	movabsq	$-1372586425655108364, %rdi # imm = 0xECF397EB0B4DDCF4
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$42, %edi
	movl	$4, %esi
	callq	_KPrepRTable
	movl	$76, %edi
	callq	_KWork
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	.loc	2 527 12 prologue_end   # susan.c:527:12
.Ltmp254:
	leal	-1(%r12), %eax
	.loc	2 527 11 is_stmt 0      # susan.c:527:11
	imull	%ebx, %eax
.Ltmp255:
	#DEBUG_VALUE: median:x_size <- [RBP+-96]
	addl	%r14d, %eax
.Ltmp256:
	#DEBUG_VALUE: median:j <- [RBP+-92]
	.loc	2 527 8                 # susan.c:527:8
	movslq	%eax, %rbx
	leaq	-1(%r13,%rbx), %rdi
	movl	$4, %esi
	movl	$5, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r13,%rbx), %r15d
	movl	$6, %edi
	movl	$4, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	leaq	-80(%rbp), %rsi
	movl	$6, %edi
	movl	$4, %edx
	callq	_KStore
	.loc	2 527 3                 # susan.c:527:3
	movl	%r15d, -80(%rbp)
	.loc	2 528 8 is_stmt 1       # susan.c:528:8
	leaq	(%r13,%rbx), %rdi
	movl	$7, -84(%rbp)           # 4-byte Folded Spill
	movl	$7, %esi
	movl	$8, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	(%r13,%rbx), %r15d
	.loc	2 528 3 is_stmt 0       # susan.c:528:3
	leaq	-76(%rbp), %r14
	movl	$9, %edi
	movl	$7, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$9, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%r15d, -76(%rbp)
	.loc	2 529 8 is_stmt 1       # susan.c:529:8
	leaq	1(%r13,%rbx), %rdi
	movl	$10, %esi
	movl	$11, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r13,%rbx), %ebx
	.loc	2 529 3 is_stmt 0       # susan.c:529:3
	leaq	-72(%rbp), %r15
	movl	$12, %edi
	movl	$10, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$12, %edi
	movl	$4, %edx
	movq	%r15, %rsi
	callq	_KStore
	movl	%ebx, -72(%rbp)
	movl	-96(%rbp), %r14d        # 4-byte Reload
.Ltmp257:
	#DEBUG_VALUE: median:x_size <- R14D
	.loc	2 530 11 is_stmt 1      # susan.c:530:11
	movl	%r14d, %eax
	imull	%r12d, %eax
	addl	-92(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 530 8 is_stmt 0       # susan.c:530:8
	movslq	%eax, %rbx
	leaq	-1(%rbx,%r13), %rdi
	movl	$13, %esi
	movl	$14, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%rbx,%r13), %r15d
	movl	$15, %edi
	movl	$13, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$15, %edi
	movl	$4, %edx
	.loc	2 530 3                 # susan.c:530:3
	leaq	-68(%rbp), %rsi
	callq	_KStore
	movl	%r15d, -68(%rbp)
	.loc	2 531 8 is_stmt 1       # susan.c:531:8
	leaq	1(%rbx,%r13), %rdi
	movl	$16, %esi
	movl	$17, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%rbx,%r13), %ebx
	.loc	2 531 3 is_stmt 0       # susan.c:531:3
	leaq	-64(%rbp), %r15
	movl	$18, %edi
	movl	$16, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$18, %edi
	movl	$4, %edx
	movq	%r15, %rsi
	callq	_KStore
	movl	%ebx, -64(%rbp)
	.loc	2 532 12 is_stmt 1      # susan.c:532:12
	incl	%r12d
.Ltmp258:
	.loc	2 532 11 is_stmt 0      # susan.c:532:11
	imull	%r14d, %r12d
	addl	-92(%rbp), %r12d        # 4-byte Folded Reload
	.loc	2 532 8                 # susan.c:532:8
	movslq	%r12d, %rbx
	leaq	-1(%r13,%rbx), %rdi
	movl	$19, %esi
	movl	$20, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r13,%rbx), %r15d
	.loc	2 532 3                 # susan.c:532:3
	leaq	-60(%rbp), %r12
	movl	$21, %edi
	movl	$19, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$21, %edi
	movl	$4, %edx
	movq	%r12, %rsi
	callq	_KStore
	movl	%r15d, -60(%rbp)
	.loc	2 533 8 is_stmt 1       # susan.c:533:8
	leaq	(%r13,%rbx), %rdi
	movl	$22, %esi
	movl	$23, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	(%r13,%rbx), %r15d
	.loc	2 533 3 is_stmt 0       # susan.c:533:3
	leaq	-56(%rbp), %r12
	movl	$24, %edi
	movl	$22, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$24, %edi
	movl	$4, %edx
	movq	%r12, %rsi
	callq	_KStore
	movl	%r15d, -56(%rbp)
	.loc	2 534 8 is_stmt 1       # susan.c:534:8
	leaq	1(%r13,%rbx), %rdi
	movl	$25, %esi
	movl	$26, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r13,%rbx), %ebx
	.loc	2 534 3 is_stmt 0       # susan.c:534:3
	leaq	-52(%rbp), %r15
	movl	$27, %edi
	movl	$25, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$27, %edi
	movl	$4, %edx
	movq	%r15, %rsi
	callq	_KStore
	movl	%ebx, -52(%rbp)
.Ltmp259:
	#DEBUG_VALUE: median:k <- 0
	movl	$38, %edi
	callq	_KInduction
	movl	$1, %esi
	movabsq	$-2150277845436317499, %rdi # imm = 0xE228ADB1366040C5
	callq	_KEnterRegion
	movabsq	$-8440517024847328314, %rbx # imm = 0x8ADD427C55568BC6
	movabsq	$-9136747935094205178, %r12 # imm = 0x8133C0295E6D1506
	movabsq	$-2402006825089494253, %r13 # imm = 0xDEAA5B84DA7A1313
.Ltmp260:
	xorl	%r15d, %r15d
	xorl	%r14d, %r14d
.Ltmp261:
	jmp	.LBB8_1
	.align	16, 0x90
.LBB8_7:                                # %for.cond56.pre_exit.for.inc78
                                        #   in Loop: Header=BB8_1 Depth=1
	#DEBUG_VALUE: median:k <- 0
.Ltmp262:
	#DEBUG_VALUE: median:l <- 0
	movl	$1, %esi
	movabsq	$-9136747935094205178, %r12 # imm = 0x8133C0295E6D1506
	movq	%r12, %rdi
	callq	_KExitRegion
	movl	$37, %r15d
	movl	$37, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	-88(%rbp), %r14d        # 4-byte Reload
	.loc	2 537 17 is_stmt 1      # susan.c:537:17
.Ltmp263:
	incl	%r14d
.Ltmp264:
	#DEBUG_VALUE: median:k <- R14D
	.loc	2 537 3 is_stmt 0       # susan.c:537:3
	decl	-84(%rbp)               # 4-byte Folded Spill
	movl	$36, -88(%rbp)          # 4-byte Folded Spill
	movl	$36, %edi
	movl	$35, %esi
	movl	$1, %edx
	movl	$37, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-8440517024847328314, %rbx # imm = 0x8ADD427C55568BC6
	movq	%rbx, %rdi
	callq	_KExitRegion
.Ltmp265:
.LBB8_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_4 Depth 2
	#DEBUG_VALUE: median:k <- 0
	movl	$35, %edi
	movl	-88(%rbp), %esi         # 4-byte Reload
	movl	%r15d, %edx
	callq	_KPhi1To1
	movl	$1, %edi
	callq	_KWork
	movl	$35, %edi
	movl	$35, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$37, %edi
	movl	$38, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	movl	$35, %edi
	movl	$37, %esi
	callq	_KPhiAddCond
	.loc	2 537 3                 # susan.c:537:3
	cmpl	$7, %r14d
	je	.LBB8_8
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB8_1 Depth=1
	#DEBUG_VALUE: median:k <- 0
	movl	%r14d, -88(%rbp)        # 4-byte Spill
	movl	$2, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$37, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: median:l <- 0
	movl	$39, %edi
	callq	_KInduction
	callq	_KPopCDep
	movl	$1, %esi
	movq	%r12, %rdi
	callq	_KEnterRegion
	movl	$37, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$40, %edi
	movl	$35, %esi
	movl	$1, %edx
	movl	$37, %ecx
	movl	$1, %r8d
	movl	$39, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	.loc	2 539 5 is_stmt 1       # susan.c:539:5
.Ltmp266:
	cmpl	$0, -84(%rbp)           # 4-byte Folded Reload
	je	.LBB8_7
.Ltmp267:
# BB#3:                                 # %for.body60.preheader
                                        #   in Loop: Header=BB8_1 Depth=1
	#DEBUG_VALUE: median:k <- 0
	#DEBUG_VALUE: median:l <- 0
	xorl	%r12d, %r12d
	.loc	2 528 3                 # susan.c:528:3
	leaq	-76(%rbp), %rbx
	.align	16, 0x90
.LBB8_4:                                # %for.body60
                                        #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: median:k <- 0
	#DEBUG_VALUE: median:l <- 0
	movl	$2, %esi
	movq	%r13, %rdi
	callq	_KEnterRegion
	movl	$40, %edi
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	leaq	-4(%rbx), %r14
	movl	$28, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 540 11                # susan.c:540:11
.Ltmp268:
	movl	-4(%rbx), %r15d
	movl	$29, %esi
	movl	$4, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
.Ltmp269:
	.loc	2 540 11 is_stmt 0      # susan.c:540:11
	movl	(%rbx), %r13d
	callq	_KPopCDep
	movl	$1, (%rsp)
	movl	$41, %edi
	movl	$40, %esi
	movl	$1, %edx
	movl	$28, %ecx
	movl	$1, %r8d
	movl	$29, %r9d
	callq	_KTimestamp3
	cmpl	%r13d, %r15d
	jle	.LBB8_6
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB8_4 Depth=2
	#DEBUG_VALUE: median:k <- 0
	#DEBUG_VALUE: median:l <- 0
	movl	$41, %edi
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movl	$30, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 541 13 is_stmt 1      # susan.c:541:13
.Ltmp270:
	movl	-4(%rbx), %r15d
.Ltmp271:
	#DEBUG_VALUE: median:tmp <- R15D
	movl	$31, %esi
	movl	$4, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 542 14                # susan.c:542:14
	movl	(%rbx), %r13d
	movl	$31, %edi
	movl	$31, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$31, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	.loc	2 542 9 is_stmt 0       # susan.c:542:9
	movl	%r13d, -4(%rbx)
	movl	$30, %edi
	movl	$30, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$30, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 543 9 is_stmt 1       # susan.c:543:9
	movl	%r15d, (%rbx)
	callq	_KPopCDep
.Ltmp272:
.LBB8_6:                                # %for.inc
                                        #   in Loop: Header=BB8_4 Depth=2
	#DEBUG_VALUE: median:k <- 0
	#DEBUG_VALUE: median:l <- 0
	movl	$40, %edi
	callq	_KPushCDep
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-2402006825089494253, %r14 # imm = 0xDEAA5B84DA7A1313
	movq	%r14, %rdi
	callq	_KExitRegion
	movl	$37, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$40, %edi
	movl	$35, %esi
	movl	$1, %edx
	movl	$37, %ecx
	movl	$1, %r8d
	movl	$39, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	.loc	2 539 5                 # susan.c:539:5
	incl	%r12d
	addq	$4, %rbx
	cmpl	%r12d, -84(%rbp)        # 4-byte Folded Reload
	movq	%r14, %r13
	jne	.LBB8_4
	jmp	.LBB8_7
.Ltmp273:
.LBB8_8:                                # %for.cond.pre_exit.for.end80
	#DEBUG_VALUE: median:k <- 0
	movl	$1, %esi
	movabsq	$-2150277845436317499, %rdi # imm = 0xE228ADB1366040C5
	callq	_KExitRegion
	movl	$19, %edi
	callq	_KWork
	movl	$32, %esi
	movl	$4, %edx
	.loc	2 530 3                 # susan.c:530:3
	leaq	-68(%rbp), %rdi
	callq	_KLoad0
	.loc	2 548 12                # susan.c:548:12
	movl	-68(%rbp), %r14d
	movl	$33, %esi
	movl	$4, %edx
	.loc	2 531 3                 # susan.c:531:3
	leaq	-64(%rbp), %rdi
	callq	_KLoad0
	.loc	2 548 12                # susan.c:548:12
	addl	-64(%rbp), %r14d
	.loc	2 548 11 is_stmt 0      # susan.c:548:11
	movl	%r14d, %ebx
	shrl	$31, %ebx
	addl	%r14d, %ebx
	shrl	%ebx
	movl	$34, %edi
	movl	$32, %esi
	movl	$11, %edx
	movl	$33, %ecx
	movl	$11, %r8d
	callq	_KTimestamp2
	movl	$34, %edi
	callq	_KReturn
	xorl	%esi, %esi
	movabsq	$-1372586425655108364, %rdi # imm = 0xECF397EB0B4DDCF4
	callq	_KExitRegion
	.loc	2 548 3                 # susan.c:548:3
	movzbl	%bl, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp274:
.Ltmp275:
	.size	median, .Ltmp275-median
.Lfunc_end8:
	.cfi_endproc

	.globl	enlarge
	.align	16, 0x90
	.type	enlarge,@function
enlarge:                                # @enlarge
.Lfunc_begin9:
	.loc	2 555 0 is_stmt 1       # susan.c:555:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp276:
	.cfi_def_cfa_offset 16
.Ltmp277:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp278:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$120, %rsp
.Ltmp279:
	.cfi_offset %rbx, -56
.Ltmp280:
	.cfi_offset %r12, -48
.Ltmp281:
	.cfi_offset %r13, -40
.Ltmp282:
	.cfi_offset %r14, -32
.Ltmp283:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: enlarge:in <- RDI
	#DEBUG_VALUE: enlarge:tmp_image <- RSI
	#DEBUG_VALUE: enlarge:x_size <- RDX
	#DEBUG_VALUE: enlarge:y_size <- RCX
	#DEBUG_VALUE: enlarge:border <- R8D
	movl	%r8d, %r15d
.Ltmp284:
	#DEBUG_VALUE: enlarge:border <- R15D
	movq	%r15, -104(%rbp)        # 8-byte Spill
	movq	%rcx, %r14
.Ltmp285:
	#DEBUG_VALUE: enlarge:y_size <- R14
	movq	%r14, -80(%rbp)         # 8-byte Spill
	movq	%rdx, %rbx
.Ltmp286:
	#DEBUG_VALUE: enlarge:x_size <- RBX
	movq	%rbx, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -112(%rbp)        # 8-byte Spill
.Ltmp287:
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	#DEBUG_VALUE: enlarge:tmp_image <- undef
	movq	%rdi, -128(%rbp)        # 8-byte Spill
.Ltmp288:
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:in <- undef
	movabsq	$-1743347248707288118, %rdi # imm = 0xE7CE62E9F8A5C3CA
	xorl	%r12d, %r12d
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$41, %edi
	movl	$4, %esi
	callq	_KPrepRTable
	movl	$1, %edi
	callq	_KDeqArg
.Ltmp289:
	#DEBUG_VALUE: enlarge:i <- 0
	movl	$33, %edi
	callq	_KInduction
	movabsq	$-6427245449217649987, %rdi # imm = 0xA6CDD6512322D2BD
	movl	$1, %esi
	callq	_KEnterRegion
	movl	$5, %edi
	callq	_KWork
	movl	$2, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 559 3 prologue_end    # susan.c:559:3
.Ltmp290:
	movl	(%r14), %r14d
.Ltmp291:
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	movl	$37, %edi
	movl	$33, %esi
	movl	$1, %edx
	movl	$2, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	cmpl	$0, %r14d
	jle	.LBB9_3
.Ltmp292:
# BB#1:                                 # %for.body.lr.ph
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	#DEBUG_VALUE: enlarge:x_size <- RBX
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	#DEBUG_VALUE: enlarge:border <- R15D
	#DEBUG_VALUE: enlarge:i <- 0
	.loc	2 560 46                # susan.c:560:46
	leal	(%r15,%r15), %eax
	.loc	2 560 16 is_stmt 0      # susan.c:560:16
	movl	%eax, -48(%rbp)         # 4-byte Spill
	movslq	%r15d, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movabsq	$-2220280079414845344, %r13 # imm = 0xE12FFB08049A2060
.Ltmp293:
	.align	16, 0x90
.LBB9_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	#DEBUG_VALUE: enlarge:x_size <- RBX
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	#DEBUG_VALUE: enlarge:border <- R15D
	#DEBUG_VALUE: enlarge:i <- 0
	movl	$2, %esi
	movq	%r13, %rdi
	callq	_KEnterRegion
	movl	$37, %edi
	callq	_KPushCDep
	movl	$24, %edi
	callq	_KWork
	movl	$3, %esi
	movl	$4, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	movl	(%rbx), %eax
	.loc	2 560 38                # susan.c:560:38
	addl	-48(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 560 26                # susan.c:560:26
	leal	(%r15,%r12), %ecx
	imull	%eax, %ecx
	.loc	2 560 16                # susan.c:560:16
	movslq	%ecx, %r14
	addq	-56(%rbp), %r14         # 8-byte Folded Reload
	movq	-112(%rbp), %rax        # 8-byte Reload
.Ltmp294:
	#DEBUG_VALUE: enlarge:tmp_image <- RAX
	movq	%rax, -112(%rbp)        # 8-byte Spill
	addq	%rax, %r14
	movl	$4, %esi
	movl	$8, %edx
	movq	%rbx, %r13
.Ltmp295:
	#DEBUG_VALUE: enlarge:x_size <- R13
	movq	-128(%rbp), %rbx        # 8-byte Reload
.Ltmp296:
	#DEBUG_VALUE: enlarge:in <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 561 7 is_stmt 1       # susan.c:561:7
	movq	(%rbx), %rbx
.Ltmp297:
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	movl	$5, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
.Ltmp298:
	#DEBUG_VALUE: enlarge:border <- [RBP+-104]
	movslq	(%r13), %r15
	movslq	%r12d, %r12
	.loc	2 561 11 is_stmt 0      # susan.c:561:11
	imulq	%r12, %r15
	.loc	2 561 7                 # susan.c:561:7
	addq	%rbx, %r15
	movl	$6, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 561 23                # susan.c:561:23
	movl	(%r13), %ebx
.Ltmp299:
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	movl	$6, %edi
	movl	$6, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	xorl	%esi, %esi
	movabsq	$727698410713524081, %rdi # imm = 0xA194DD95A322771
	callq	_KPrepCall
	movl	$6, %edi
	callq	_KEnqArg
	.loc	2 560 5 is_stmt 1       # susan.c:560:5
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	-104(%rbp), %r15        # 8-byte Reload
.Ltmp300:
	#DEBUG_VALUE: enlarge:border <- R15D
	movl	%ebx, %edx
	callq	wccmemcpy
.Ltmp301:
	.loc	2 559 23                # susan.c:559:23
	incl	%r12d
.Ltmp302:
	#DEBUG_VALUE: enlarge:i <- R12D
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-2220280079414845344, %rdi # imm = 0xE12FFB08049A2060
	movq	%rdi, %r13
	callq	_KExitRegion
	movl	$5, %edi
	callq	_KWork
	movl	$2, %esi
	movl	$4, %edx
.Ltmp303:
	#DEBUG_VALUE: enlarge:tmp_image <- undef
	movq	-80(%rbp), %rbx         # 8-byte Reload
.Ltmp304:
	#DEBUG_VALUE: enlarge:y_size <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 559 12 is_stmt 0      # susan.c:559:12
	movl	(%rbx), %r14d
.Ltmp305:
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	movq	-88(%rbp), %rbx         # 8-byte Reload
.Ltmp306:
	#DEBUG_VALUE: enlarge:x_size <- RBX
	movl	$37, %edi
	movl	$33, %esi
	movl	$1, %edx
	movl	$2, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	cmpl	%r14d, %r12d
.Ltmp307:
	.loc	2 559 3                 # susan.c:559:3
	jl	.LBB9_2
.Ltmp308:
.LBB9_3:                                # %for.cond.pre_exit.for.end
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	#DEBUG_VALUE: enlarge:x_size <- RBX
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	#DEBUG_VALUE: enlarge:border <- R15D
	#DEBUG_VALUE: enlarge:i <- 0
	movabsq	$1914068568387663127, %r14 # imm = 0x1A902338C67CB517
	movl	$1, %esi
	movabsq	$-6427245449217649987, %rdi # imm = 0xA6CDD6512322D2BD
	callq	_KExitRegion
	movl	$34, %edi
	callq	_KInduction
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	callq	_KWork
	movl	$38, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$34, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	.loc	2 565 3 is_stmt 1       # susan.c:565:3
.Ltmp309:
	testl	%r15d, %r15d
	movq	%rbx, %r12
.Ltmp310:
	#DEBUG_VALUE: enlarge:x_size <- R12
	jle	.LBB9_6
.Ltmp311:
# BB#4:                                 # %for.body10.lr.ph
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	#DEBUG_VALUE: enlarge:x_size <- R12
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	#DEBUG_VALUE: enlarge:border <- R15D
	#DEBUG_VALUE: enlarge:i <- 0
	.loc	2 566 48                # susan.c:566:48
	leal	(%r15,%r15), %eax
	.loc	2 566 16 is_stmt 0      # susan.c:566:16
	movl	%eax, -56(%rbp)         # 4-byte Spill
	movslq	%r15d, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movl	$-1, %ebx
	movabsq	$2488617510920339882, %r14 # imm = 0x22895870E03941AA
.Ltmp312:
	.align	16, 0x90
.LBB9_5:                                # %for.body10
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	#DEBUG_VALUE: enlarge:x_size <- R12
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	#DEBUG_VALUE: enlarge:border <- R15D
	#DEBUG_VALUE: enlarge:i <- 0
	movq	%rbx, -72(%rbp)         # 8-byte Spill
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$38, %edi
	callq	_KPushCDep
	movl	$60, %edi
	callq	_KWork
	movl	$7, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	movl	(%r12), %eax
	.loc	2 566 40                # susan.c:566:40
	addl	-56(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 566 26                # susan.c:566:26
	leal	(%r15,%rbx), %ecx
	imull	%eax, %ecx
	.loc	2 566 16                # susan.c:566:16
	movslq	%ecx, %r14
	addq	-64(%rbp), %r14         # 8-byte Folded Reload
	addq	-112(%rbp), %r14        # 8-byte Folded Reload
	movl	$8, %esi
	movl	$8, %edx
	movq	%r12, %r13
.Ltmp313:
	#DEBUG_VALUE: enlarge:x_size <- R13
	movq	-128(%rbp), %r12        # 8-byte Reload
.Ltmp314:
	#DEBUG_VALUE: enlarge:in <- R12
	movq	%r12, %rdi
	callq	_KLoad0
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	.loc	2 567 7 is_stmt 1       # susan.c:567:7
	movq	(%r12), %rbx
	movl	$9, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
.Ltmp315:
	#DEBUG_VALUE: enlarge:border <- [RBP+-104]
	movslq	(%r13), %r15
	movq	-48(%rbp), %rax         # 8-byte Reload
	cltq
	.loc	2 567 11 is_stmt 0      # susan.c:567:11
	movq	%rax, -48(%rbp)         # 8-byte Spill
	imulq	%rax, %r15
	.loc	2 567 7                 # susan.c:567:7
	addq	%rbx, %r15
	movl	$10, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 567 22                # susan.c:567:22
	movl	(%r13), %ebx
	movl	$10, %edi
	movl	$10, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	xorl	%esi, %esi
	movabsq	$1225019029300093612, %rdi # imm = 0x110024511486A2AC
	callq	_KPrepCall
	movl	$10, %edi
	callq	_KEnqArg
	.loc	2 566 5 is_stmt 1       # susan.c:566:5
	movq	%r14, %rdi
	movq	%r15, %rsi
	movl	%ebx, %edx
	callq	wccmemcpy
	movl	$11, %esi
	movl	$4, %edx
	movq	-80(%rbp), %r15         # 8-byte Reload
.Ltmp316:
	#DEBUG_VALUE: enlarge:y_size <- R15
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 568 26                # susan.c:568:26
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	leal	(%rax,%rcx), %ebx
	addl	(%r15), %ebx
	movl	$12, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	movl	(%r13), %eax
	.loc	2 568 46 is_stmt 0      # susan.c:568:46
	addl	-56(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 568 26                # susan.c:568:26
	imull	%ebx, %eax
	.loc	2 568 16                # susan.c:568:16
	movslq	%eax, %r14
	addq	-64(%rbp), %r14         # 8-byte Folded Reload
	addq	-112(%rbp), %r14        # 8-byte Folded Reload
	movl	$13, %esi
	movl	$8, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 569 7 is_stmt 1       # susan.c:569:7
	movq	(%r12), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
.Ltmp317:
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	movq	%r13, %r12
.Ltmp318:
	#DEBUG_VALUE: enlarge:x_size <- R12
	movl	$14, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	movl	(%r15), %ebx
.Ltmp319:
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	movq	-72(%rbp), %r13         # 8-byte Reload
	.loc	2 569 11 is_stmt 0      # susan.c:569:11
	addl	%r13d, %ebx
	movl	$15, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 569 7                 # susan.c:569:7
	movslq	(%r12), %rax
	movslq	%ebx, %r15
	.loc	2 569 11                # susan.c:569:11
	imulq	%rax, %r15
	.loc	2 569 7                 # susan.c:569:7
	addq	-96(%rbp), %r15         # 8-byte Folded Reload
	movl	$16, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 569 34                # susan.c:569:34
	movl	(%r12), %ebx
	movl	$16, %edi
	movl	$16, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	xorl	%esi, %esi
	movabsq	$-8835717508499494144, %rdi # imm = 0x856139BD5A302B00
	callq	_KPrepCall
	movl	$16, %edi
	callq	_KEnqArg
	.loc	2 568 5 is_stmt 1       # susan.c:568:5
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	-104(%rbp), %r15        # 8-byte Reload
.Ltmp320:
	#DEBUG_VALUE: enlarge:border <- R15D
	movl	%ebx, %edx
	callq	wccmemcpy
.Ltmp321:
	.loc	2 565 22                # susan.c:565:22
	movq	-48(%rbp), %rax         # 8-byte Reload
	incl	%eax
.Ltmp322:
	#DEBUG_VALUE: enlarge:i <- undef
	movq	%rax, -48(%rbp)         # 8-byte Spill
.Ltmp323:
	#DEBUG_VALUE: enlarge:i <- [RBP+-48]
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$2488617510920339882, %rdi # imm = 0x22895870E03941AA
	movq	%rdi, %r14
	callq	_KExitRegion
	movl	$1, %edi
	callq	_KWork
	movl	$38, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$34, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movq	%r13, %rcx
.Ltmp324:
	.loc	2 565 3 is_stmt 0       # susan.c:565:3
	leal	-1(%r15,%rcx), %eax
	leal	-1(%rcx), %ecx
	cmpl	$-1, %eax
	movl	%ecx, %ebx
	jne	.LBB9_5
.Ltmp325:
.LBB9_6:                                # %for.cond8.pre_exit.for.end40
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- [RBP+-112]
	#DEBUG_VALUE: enlarge:x_size <- R12
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	#DEBUG_VALUE: enlarge:border <- R15D
	#DEBUG_VALUE: enlarge:i <- 0
	movq	%r12, -88(%rbp)         # 8-byte Spill
	movq	%r15, -104(%rbp)        # 8-byte Spill
.Ltmp326:
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	movabsq	$-2911295776187417331, %r14 # imm = 0xD798FFEA9040FD0D
	movl	$1, %esi
	movabsq	$1914068568387663127, %rdi # imm = 0x1A902338C67CB517
	callq	_KExitRegion
	movl	$35, %edi
	callq	_KInduction
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	callq	_KWork
	movl	$39, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$35, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	.loc	2 575 24 is_stmt 1      # susan.c:575:24
.Ltmp327:
	leal	(%r15,%r15), %eax
.Ltmp328:
	.loc	2 573 3                 # susan.c:573:3
	movl	%eax, -48(%rbp)         # 4-byte Spill
	testl	%r15d, %r15d
.Ltmp329:
	#DEBUG_VALUE: enlarge:border <- [RBP+-104]
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp330:
	#DEBUG_VALUE: enlarge:tmp_image <- R14
	movq	-80(%rbp), %r15         # 8-byte Reload
.Ltmp331:
	#DEBUG_VALUE: enlarge:y_size <- R15
	jle	.LBB9_12
.Ltmp332:
# BB#7:                                 # %for.body43.lr.ph
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- R14
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	#DEBUG_VALUE: enlarge:y_size <- R15
	#DEBUG_VALUE: enlarge:border <- [RBP+-104]
	#DEBUG_VALUE: enlarge:i <- 0
	.loc	2 576 17                # susan.c:576:17
	movq	-104(%rbp), %rax        # 8-byte Reload
	leal	-1(%rax), %eax
	movl	%eax, -132(%rbp)        # 4-byte Spill
	movabsq	$6299209432877649555, %rcx # imm = 0x576B499AC4764E93
	xorl	%ebx, %ebx
	movabsq	$-7709514218120633796, %r12 # imm = 0x95024DAA5618A23C
	movabsq	$5945787179452063855, %r13 # imm = 0x5283ADF0054FE06F
	xorl	%eax, %eax
.Ltmp333:
	.align	16, 0x90
.LBB9_8:                                # %for.body43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_9 Depth 2
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- R14
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	#DEBUG_VALUE: enlarge:y_size <- R15
	#DEBUG_VALUE: enlarge:border <- [RBP+-104]
	#DEBUG_VALUE: enlarge:i <- 0
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movq	%rcx, %rdi
	callq	_KEnterRegion
	movl	$39, %edi
	callq	_KPushCDep
.Ltmp334:
	#DEBUG_VALUE: enlarge:j <- 0
	movl	$36, %edi
	callq	_KInduction
	callq	_KPopCDep
	movl	$1, %esi
	movq	%r12, %rdi
	callq	_KEnterRegion
	.loc	2 576 60 is_stmt 0      # susan.c:576:60
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	leal	(%rcx,%rax), %eax
	.loc	2 576 17                # susan.c:576:17
	movl	%eax, -56(%rbp)         # 4-byte Spill
	addl	-132(%rbp), %ebx        # 4-byte Folded Reload
	movl	%ebx, -96(%rbp)         # 4-byte Spill
	xorl	%r12d, %r12d
	jmp	.LBB9_9
.Ltmp335:
	.align	16, 0x90
.LBB9_10:                               # %for.body48
                                        #   in Loop: Header=BB9_9 Depth=2
	#DEBUG_VALUE: enlarge:tmp_image <- R14
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	#DEBUG_VALUE: enlarge:y_size <- R15
	#DEBUG_VALUE: enlarge:border <- [RBP+-104]
	#DEBUG_VALUE: enlarge:i <- 0
	#DEBUG_VALUE: enlarge:j <- 0
	movl	$2, %esi
	movq	%r13, %rdi
	callq	_KEnterRegion
	movl	$40, %edi
	callq	_KPushCDep
	movl	$66, %edi
	callq	_KWork
	movl	$18, %esi
	movl	$4, %edx
	movq	-88(%rbp), %r13         # 8-byte Reload
.Ltmp336:
	#DEBUG_VALUE: enlarge:x_size <- R13
	movq	%r13, %rdi
	callq	_KLoad0
	movl	(%r13), %eax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	.loc	2 576 63                # susan.c:576:63
	addl	%ecx, %eax
	movl	%ecx, %r15d
.Ltmp337:
	.loc	2 576 60                # susan.c:576:60
	movl	%r12d, -72(%rbp)        # 4-byte Spill
	imull	%r12d, %eax
	addl	-56(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 576 50                # susan.c:576:50
	movslq	%eax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$19, %esi
	movl	$20, %edx
	movl	$1, %ecx
	callq	_KLoad1
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	movb	(%r14,%rbx), %al
	movb	%al, -64(%rbp)          # 1-byte Spill
	movl	$21, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	movl	(%r13), %eax
	.loc	2 576 20                # susan.c:576:20
	addl	%r15d, %eax
	.loc	2 576 17                # susan.c:576:17
	imull	%r12d, %eax
	movl	-96(%rbp), %r12d        # 4-byte Reload
	addl	%r12d, %eax
.Ltmp338:
	#DEBUG_VALUE: enlarge:y_size <- [RBP+-80]
	.loc	2 576 7                 # susan.c:576:7
	movslq	%eax, %r15
	leaq	(%r14,%r15), %rbx
	movl	$19, %edi
	movl	$19, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$19, %edi
	movl	$1, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movb	-64(%rbp), %al          # 1-byte Reload
	movb	%al, (%r14,%r15)
	movl	$22, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	movl	(%r13), %ebx
	.loc	2 577 70 is_stmt 1      # susan.c:577:70
	addl	-48(%rbp), %ebx         # 4-byte Folded Reload
	movl	-72(%rbp), %r15d        # 4-byte Reload
	.loc	2 577 67 is_stmt 0      # susan.c:577:67
	imull	%r15d, %ebx
	movl	$23, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	movl	(%r13), %eax
	addl	%r12d, %eax
	addl	%ebx, %eax
	.loc	2 577 57                # susan.c:577:57
	movslq	%eax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$24, %esi
	movl	$25, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movb	(%r14,%rbx), %al
	movb	%al, -64(%rbp)          # 1-byte Spill
	movl	$26, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	movl	(%r13), %ebx
	.loc	2 577 20                # susan.c:577:20
	addl	-48(%rbp), %ebx         # 4-byte Folded Reload
	.loc	2 577 17                # susan.c:577:17
	imull	%r15d, %ebx
	movl	%r15d, %r12d
	movl	$27, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	movl	(%r13), %eax
.Ltmp339:
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	addl	-56(%rbp), %eax         # 4-byte Folded Reload
	addl	%ebx, %eax
	.loc	2 577 7                 # susan.c:577:7
	movslq	%eax, %rbx
	leaq	(%r14,%rbx), %r15
	movl	$24, %edi
	movl	$24, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$24, %edi
	movl	$1, %edx
	movq	%r15, %rsi
	movq	-80(%rbp), %r15         # 8-byte Reload
.Ltmp340:
	#DEBUG_VALUE: enlarge:y_size <- R15
	callq	_KStore
	movb	-64(%rbp), %al          # 1-byte Reload
	movb	%al, (%r14,%rbx)
.Ltmp341:
	.loc	2 575 34 is_stmt 1      # susan.c:575:34
	incl	%r12d
.Ltmp342:
	#DEBUG_VALUE: enlarge:j <- R12D
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$5945787179452063855, %rdi # imm = 0x5283ADF0054FE06F
	movq	%rdi, %r13
	callq	_KExitRegion
.Ltmp343:
.LBB9_9:                                # %for.cond44
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- R14
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	#DEBUG_VALUE: enlarge:y_size <- R15
	#DEBUG_VALUE: enlarge:border <- [RBP+-104]
	#DEBUG_VALUE: enlarge:i <- 0
	#DEBUG_VALUE: enlarge:j <- 0
	movl	$39, %edi
	callq	_KPushCDep
	movl	$17, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	movl	$8, %edi
	callq	_KWork
	movl	(%r15), %ebx
	.loc	2 575 16 is_stmt 0      # susan.c:575:16
	addl	-48(%rbp), %ebx         # 4-byte Folded Reload
	movl	$2, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$1, (%rsp)
	movl	$40, %edi
	movl	$1, %esi
	movl	$4, %edx
	movl	$39, %ecx
	movl	$4, %r8d
	movl	$36, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
.Ltmp344:
	.loc	2 575 5                 # susan.c:575:5
	cmpl	%ebx, %r12d
	jl	.LBB9_10
.Ltmp345:
# BB#11:                                # %for.cond44.pre_exit.for.inc82
                                        #   in Loop: Header=BB9_8 Depth=1
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- R14
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	#DEBUG_VALUE: enlarge:y_size <- R15
	#DEBUG_VALUE: enlarge:border <- [RBP+-104]
	#DEBUG_VALUE: enlarge:i <- 0
	#DEBUG_VALUE: enlarge:j <- 0
	movl	$1, %esi
	movabsq	$-7709514218120633796, %rax # imm = 0x95024DAA5618A23C
	movq	%rax, %rdi
	callq	_KExitRegion
	movl	$39, %edi
	callq	_KPushCDep
	movq	-120(%rbp), %r12        # 8-byte Reload
	.loc	2 573 22 is_stmt 1      # susan.c:573:22
	leal	1(%r12), %eax
.Ltmp346:
	#DEBUG_VALUE: enlarge:i <- [RBP+-56]
	movl	%eax, -56(%rbp)         # 4-byte Spill
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$6299209432877649555, %rbx # imm = 0x576B499AC4764E93
	movq	%rbx, %rdi
	callq	_KExitRegion
	movl	%r12d, %ebx
	notl	%ebx
	movl	$1, %edi
	callq	_KWork
	movl	$39, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$35, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movabsq	$6299209432877649555, %rcx # imm = 0x576B499AC4764E93
	movl	-132(%rbp), %eax        # 4-byte Reload
.Ltmp347:
	.loc	2 573 3 is_stmt 0       # susan.c:573:3
	cmpl	%eax, %r12d
	movabsq	$-7709514218120633796, %r12 # imm = 0x95024DAA5618A23C
	movl	-56(%rbp), %edx         # 4-byte Reload
	movl	%edx, %eax
.Ltmp348:
	#DEBUG_VALUE: enlarge:i <- EAX
	jne	.LBB9_8
.Ltmp349:
.LBB9_12:                               # %for.cond41.pre_exit.for.end84
	#DEBUG_VALUE: enlarge:in <- [RBP+-128]
	#DEBUG_VALUE: enlarge:tmp_image <- R14
	#DEBUG_VALUE: enlarge:x_size <- [RBP+-88]
	#DEBUG_VALUE: enlarge:y_size <- R15
	#DEBUG_VALUE: enlarge:i <- 0
	movl	$1, %esi
	movabsq	$-2911295776187417331, %rdi # imm = 0xD798FFEA9040FD0D
	callq	_KExitRegion
	movl	$17, %edi
	callq	_KWork
	movl	$28, %esi
	movl	$4, %edx
	movq	-88(%rbp), %rbx         # 8-byte Reload
.Ltmp350:
	#DEBUG_VALUE: enlarge:x_size <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	movl	(%rbx), %r13d
	movl	-48(%rbp), %r12d        # 4-byte Reload
	.loc	2 581 3 is_stmt 1       # susan.c:581:3
	addl	%r12d, %r13d
	movl	$29, %edi
	movl	$1, %esi
	movl	$3, %edx
	movl	$28, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$29, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r13d, (%rbx)
	movl	$30, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 582 3                 # susan.c:582:3
	addl	(%r15), %r12d
	movl	$31, %edi
	movl	$1, %esi
	movl	$3, %edx
	movl	$30, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$31, %edi
	movl	$4, %edx
	movq	%r15, %rsi
	callq	_KStore
	movl	%r12d, (%r15)
	movl	$32, %edi
	movl	$32, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$32, %edi
	movl	$8, %edx
	movq	-128(%rbp), %rbx        # 8-byte Reload
.Ltmp351:
	#DEBUG_VALUE: enlarge:in <- RBX
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 583 3                 # susan.c:583:3
	movq	%r14, (%rbx)
	xorl	%esi, %esi
	movabsq	$-1743347248707288118, %rdi # imm = 0xE7CE62E9F8A5C3CA
	addq	$120, %rsp
	popq	%rbx
.Ltmp352:
	popq	%r12
	popq	%r13
	popq	%r14
.Ltmp353:
	popq	%r15
.Ltmp354:
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp355:
.Ltmp356:
	.size	enlarge, .Ltmp356-enlarge
.Lfunc_end9:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI10_0:
	.quad	4609434218613702656     # double 1.5
.LCPI10_3:
	.quad	4636737291354636288     # double 100
	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI10_1:
	.long	1097859072              # float 15
	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI10_2:
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.text
	.globl	susan_smoothing
	.align	16, 0x90
	.type	susan_smoothing,@function
susan_smoothing:                        # @susan_smoothing
.Lfunc_begin10:
	.loc	2 589 0                 # susan.c:589:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp357:
	.cfi_def_cfa_offset 16
.Ltmp358:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp359:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$504, %rsp              # imm = 0x1F8
.Ltmp360:
	.cfi_offset %rbx, -56
.Ltmp361:
	.cfi_offset %r12, -48
.Ltmp362:
	.cfi_offset %r13, -40
.Ltmp363:
	.cfi_offset %r14, -32
.Ltmp364:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: susan_smoothing:three_by_three <- EDI
	#DEBUG_VALUE: susan_smoothing:in <- RSI
	#DEBUG_VALUE: susan_smoothing:dt <- XMM0
	#DEBUG_VALUE: susan_smoothing:x_size <- EDX
	#DEBUG_VALUE: susan_smoothing:y_size <- ECX
	#DEBUG_VALUE: susan_smoothing:bp <- R8
	movq	%r8, -112(%rbp)         # 8-byte Spill
.Ltmp365:
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	movl	%ecx, %r14d
.Ltmp366:
	#DEBUG_VALUE: susan_smoothing:y_size <- R14D
	movl	%edx, %r13d
.Ltmp367:
	#DEBUG_VALUE: susan_smoothing:x_size <- R13D
	movss	%xmm0, -88(%rbp)        # 4-byte Spill
.Ltmp368:
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	movq	%rsi, %rbx
.Ltmp369:
	#DEBUG_VALUE: susan_smoothing:in <- RBX
	movl	%edi, %r12d
.Ltmp370:
	#DEBUG_VALUE: susan_smoothing:three_by_three <- R12D
	movl	%r12d, -64(%rbp)        # 4-byte Spill
	movabsq	$-5223185220444022319, %rdi # imm = 0xB78384B7335D19D1
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$146, %edi
	movl	$8, %esi
	callq	_KPrepRTable
	movl	$4, %edi
	callq	_KDeqArg
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	movl	$8, %edi
	callq	_KWork
	movl	$5, %edi
	movl	$5, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	leaq	-48(%rbp), %r15
.Ltmp371:
	#DEBUG_VALUE: susan_smoothing:in <- [R15+0]
	movl	$5, %edi
	movl	$8, %edx
	movq	%r15, %rsi
	callq	_KStore
	movq	%rbx, -48(%rbp)
	movl	$3, %edi
	movl	$3, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	leaq	-52(%rbp), %rsi
	movl	$3, %edi
	movl	$4, %edx
	callq	_KStore
	movl	%r13d, -52(%rbp)
	movl	$4, %edi
	movl	$4, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	leaq	-56(%rbp), %rsi
	movl	$4, %edi
	movl	$4, %edx
	callq	_KStore
	movl	%r14d, -56(%rbp)
	movl	$6, %esi
	movl	$8, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 593 41 prologue_end   # susan.c:593:41
.Ltmp372:
	movq	-48(%rbp), %rax
.Ltmp373:
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movl	$6, %edi
	movl	$6, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$96, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	movl	$96, %edi
	callq	_KPushCDep
	.loc	2 599 7                 # susan.c:599:7
	testl	%r12d, %r12d
.Ltmp374:
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	je	.LBB10_1
.Ltmp375:
# BB#2:                                 # %if.else
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:mask_size <- 1
	callq	_KPopCDep
	movl	$1, %r13d
	xorl	%ebx, %ebx
	jmp	.LBB10_3
.LBB10_1:                               # %if.then
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	movl	$6, %edi
	callq	_KWork
	.loc	2 600 30                # susan.c:600:30
.Ltmp376:
	movss	-88(%rbp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	.loc	2 600 24 is_stmt 0      # susan.c:600:24
	mulsd	.LCPI10_0(%rip), %xmm0
	.loc	2 600 18                # susan.c:600:18
	cvttsd2si	%xmm0, %r13d
	.loc	2 600 17                # susan.c:600:17
	incl	%r13d
.Ltmp377:
	#DEBUG_VALUE: susan_smoothing:mask_size <- R13D
	movl	$95, %ebx
	movl	$95, %edi
	movl	$1, %esi
	movl	$7, %edx
	movl	$2, %ecx
	movl	$6, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
.Ltmp378:
.LBB10_3:                               # %if.end
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	movq	%r13, -96(%rbp)         # 8-byte Spill
	movabsq	$-7131228994629441968, %r14 # imm = 0x9D08C90323256650
	movl	$12, %edi
	movl	$96, %edx
	movl	%ebx, %esi
	callq	_KPhi1To1
	movl	$4, %edi
	callq	_KWork
.Ltmp379:
	#DEBUG_VALUE: susan_smoothing:total <- 0
	movl	$12, %edi
	movl	$12, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$143, %edi
	movl	$2, %esi
	movl	$3, %edx
	callq	_KTimestamp1
.Ltmp380:
	#DEBUG_VALUE: susan_smoothing:dt <- undef
	.loc	2 605 8 is_stmt 1       # susan.c:605:8
	movss	-88(%rbp), %xmm0        # 4-byte Reload
	ucomiss	.LCPI10_1(%rip), %xmm0
.Ltmp381:
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	jbe	.LBB10_5
# BB#4:                                 # %if.then14
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	movl	$143, %edi
	callq	_KPushCDep
	movabsq	$8658709889535339052, %rdi # imm = 0x7829EAC4CAEA6A2C
	xorl	%esi, %esi
	callq	_KPrepCall
	xorl	%esi, %esi
	.loc	2 606 5                 # susan.c:606:5
.Ltmp382:
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
.Ltmp383:
	#DEBUG_VALUE: exit_error:j <- 1
	#DEBUG_VALUE: exit_error:i <- 0
	xorl	%esi, %esi
	movq	%r14, %rdi
	callq	_KExitRegion
	callq	_KPopCDep
.Ltmp384:
.LBB10_5:                               # %if.end15
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	movl	$8, %edi
	callq	_KWork
.Ltmp385:
	#DEBUG_VALUE: susan_smoothing:i <- R13D
	.loc	2 611 9                 # susan.c:611:9
	leal	(%r13,%r13), %r15d
	leal	1(%r13,%r13), %r12d
.Ltmp386:
	#DEBUG_VALUE: susan_smoothing:n_max <- R12D
	leaq	-52(%rbp), %rdi
.Ltmp387:
	#DEBUG_VALUE: susan_smoothing:x_size <- [RDI+0]
	movl	$7, %esi
	movl	$4, %edx
	callq	_KLoad0
	movl	-52(%rbp), %ebx
	movl	$144, %edi
.Ltmp388:
	movl	$12, %esi
	movl	$4, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	cmpl	%ebx, %r12d
	jg	.LBB10_7
.Ltmp389:
# BB#6:                                 # %lor.lhs.false
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- R13D
	#DEBUG_VALUE: susan_smoothing:n_max <- R12D
	movl	$144, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	leaq	-56(%rbp), %rdi
.Ltmp390:
	#DEBUG_VALUE: susan_smoothing:y_size <- [RDI+0]
	movl	$8, %esi
	movl	$4, %edx
	callq	_KLoad0
	.loc	2 611 8 is_stmt 0       # susan.c:611:8
	movl	-56(%rbp), %ebx
	movl	$1, (%rsp)
	movl	$145, %edi
.Ltmp391:
	movl	$12, %esi
	movl	$8, %edx
	movl	$7, %ecx
	movl	$5, %r8d
	movl	$8, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB10_8
.Ltmp392:
.LBB10_7:                               # %if.then24
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- R13D
	#DEBUG_VALUE: susan_smoothing:n_max <- R12D
	movl	$144, %edi
	callq	_KPushCDep
	movabsq	$7035442982042186985, %rdi # imm = 0x61A2EA1DE623B4E9
	xorl	%esi, %esi
	callq	_KPrepCall
	xorl	%esi, %esi
	.loc	2 612 5 is_stmt 1       # susan.c:612:5
.Ltmp393:
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
.Ltmp394:
	#DEBUG_VALUE: exit_error:j <- 1
	#DEBUG_VALUE: exit_error:i <- 0
	xorl	%esi, %esi
	movq	%r14, %rdi
	callq	_KExitRegion
	callq	_KPopCDep
.Ltmp395:
.LBB10_8:                               # %if.end25
	#DEBUG_VALUE: susan_smoothing:three_by_three <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- R13D
	#DEBUG_VALUE: susan_smoothing:n_max <- R12D
	movl	%r12d, -120(%rbp)       # 4-byte Spill
.Ltmp396:
	#DEBUG_VALUE: susan_smoothing:n_max <- [RBP+-120]
	movl	$17, %edi
	callq	_KWork
	leaq	-52(%rbp), %r14
.Ltmp397:
	#DEBUG_VALUE: susan_smoothing:x_size <- [R14+0]
	movl	$9, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	movl	-52(%rbp), %ebx
	.loc	2 615 36                # susan.c:615:36
	addl	%r15d, %ebx
	leaq	-56(%rbp), %r12
.Ltmp398:
	#DEBUG_VALUE: susan_smoothing:y_size <- [R12+0]
	movl	$10, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 615 59 is_stmt 0      # susan.c:615:59
	addl	-56(%rbp), %r15d
	.loc	2 615 35                # susan.c:615:35
	imull	%ebx, %r15d
	movabsq	$-7451186784083513192, %rdi # imm = 0x98981119139DF098
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$3, (%rsp)
	movl	$11, %edi
	movl	$12, %esi
	movl	$5, %edx
	movl	$9, %ecx
	movl	$3, %r8d
	movl	$10, %r9d
	callq	_KTimestamp3
	movl	$11, %edi
	callq	_KEnqArg
	.loc	2 615 24                # susan.c:615:24
	movl	%r15d, %edi
	callq	wccmalloc
	movq	%rax, %rbx
.Ltmp399:
	#DEBUG_VALUE: susan_smoothing:tmp_image <- RBX
	movabsq	$2535192744519199697, %rdi # imm = 0x232ED05E7E36EBD1
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$12, %edi
	callq	_KEnqArg
	leaq	-48(%rbp), %rdi
.Ltmp400:
	#DEBUG_VALUE: susan_smoothing:in <- [RDI+0]
	.loc	2 616 3 is_stmt 1       # susan.c:616:3
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movq	%r12, %rcx
	movl	%r13d, %r8d
	callq	enlarge
	movl	$18, %edi
.Ltmp401:
	movl	$1, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	movl	$18, %edi
	callq	_KPushCDep
	.loc	2 618 7                 # susan.c:618:7
	cmpl	$0, -64(%rbp)           # 4-byte Folded Reload
	je	.LBB10_9
.Ltmp402:
# BB#30:                                # %if.else130
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	movabsq	$4431436282168790827, %rbx # imm = 0x3D7F9FD1E372CF2B
.Ltmp403:
	#DEBUG_VALUE: susan_smoothing:i <- 1
	callq	_KPopCDep
	movl	$1, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$6, %r14d
	movl	$0, %eax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	xorl	%ebx, %ebx
	xorl	%r15d, %r15d
	movq	-160(%rbp), %r12        # 8-byte Reload
.Ltmp404:
	#DEBUG_VALUE: susan_smoothing:out <- R12
	movl	$1, %r13d
	jmp	.LBB10_31
.Ltmp405:
	.align	16, 0x90
.LBB10_38:                              # %for.cond136.pre_exit.for.inc255
                                        #   in Loop: Header=BB10_31 Depth=1
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	#DEBUG_VALUE: susan_smoothing:x_size <- [R15+0]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:j <- 1
	movl	$1, %esi
	movabsq	$-3739626490254177794, %rdi # imm = 0xCC1A2D853FC249FE
	callq	_KExitRegion
	movl	$92, %ebx
	movl	$92, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	-228(%rbp), %r13d       # 4-byte Reload
	.loc	2 675 25                # susan.c:675:25
.Ltmp406:
	incl	%r13d
.Ltmp407:
	#DEBUG_VALUE: susan_smoothing:i <- R13D
	movl	$135, %r15d
	movl	$135, %edi
	movl	$89, %esi
	movl	$1, %edx
	movl	$92, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$5323751915927827752, %rdi # imm = 0x49E1C4293D2EF528
	callq	_KExitRegion
	movq	-248(%rbp), %rax        # 8-byte Reload
	incl	%eax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	movl	$137, %r14d
.Ltmp408:
.LBB10_31:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_33 Depth 2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	movl	%r13d, -228(%rbp)       # 4-byte Spill
	movq	%r12, -160(%rbp)        # 8-byte Spill
	movl	$18, %edi
	callq	_KPushCDep
	movl	$136, %edi
	movl	$18, %edx
	movl	%r14d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$89, %edi
	movl	$18, %edx
	movl	%r15d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	movl	$47, %esi
	movl	$4, %edx
	leaq	-56(%rbp), %rdi
	callq	_KLoad0
	movl	$6, %edi
	callq	_KWork
	.loc	2 675 16 is_stmt 0      # susan.c:675:16
	movl	-56(%rbp), %ebx
	decl	%ebx
	movl	$2, (%rsp)
	movl	$92, %edi
	movl	$18, %esi
	movl	$2, %edx
	movl	$89, %ecx
	movl	$1, %r8d
	movl	$47, %r9d
	callq	_KTimestamp3
	movl	$89, %edi
	movl	$89, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$136, %edi
	movl	$136, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$136, %edi
	movl	$92, %esi
	callq	_KPhiAddCond
	movl	$89, %edi
	movl	$92, %esi
	callq	_KPhiAddCond
	callq	_KPopCDep
.Ltmp409:
	.loc	2 675 5                 # susan.c:675:5
	cmpl	%ebx, %r13d
	jge	.LBB10_40
# BB#32:                                # %for.body135
                                        #   in Loop: Header=BB10_31 Depth=1
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	movl	%r13d, -228(%rbp)       # 4-byte Spill
	movl	$2, %esi
	movabsq	$5323751915927827752, %rdi # imm = 0x49E1C4293D2EF528
	callq	_KEnterRegion
	movl	$92, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_smoothing:j <- 1
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$-3739626490254177794, %rdi # imm = 0xCC1A2D853FC249FE
	callq	_KEnterRegion
	movl	$136, %r14d
	xorl	%ebx, %ebx
	movl	$6, %r13d
	xorl	%r15d, %r15d
	jmp	.LBB10_33
	.align	16, 0x90
.LBB10_37:                              # %for.inc252
                                        #   in Loop: Header=BB10_33 Depth=2
	movl	$11, %esi
	movl	$78, %edx
	movl	$5, %ecx
	movl	$81, %r8d
	movl	$4, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movq	-160(%rbp), %r12        # 8-byte Reload
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
.Ltmp410:
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-80]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:j <- 1
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	$93, %ebx
	movl	$93, %edi
	callq	_KPushCDep
	movl	$139, %r14d
	movl	$139, %edi
	movl	$93, %edx
	movl	$142, %ecx
	movl	%r15d, %esi
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$139, %edi
	movl	$139, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$138, %r15d
	movl	$138, %edi
	movl	$91, %esi
	movl	$1, %edx
	movl	$93, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-564299616005201610, %rdi # imm = 0xF82B347D311EE136
	callq	_KExitRegion
	movq	-72(%rbp), %r13         # 8-byte Reload
	incq	%r13
.LBB10_33:                              # %for.cond136
                                        #   Parent Loop BB10_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:j <- 1
	leaq	-6(%r12,%r13), %r12
	movl	$92, %edi
	callq	_KPushCDep
	movl	$137, %edi
	movl	$92, %edx
	movl	%r14d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$91, %edi
	movl	$92, %edx
	movl	%r15d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	movl	$48, %esi
	movl	$4, %edx
	leaq	-52(%rbp), %r15
.Ltmp411:
	#DEBUG_VALUE: susan_smoothing:x_size <- [R15+0]
	movq	%r15, %rdi
	callq	_KLoad0
	movl	$6, %edi
	callq	_KWork
	.loc	2 677 16 is_stmt 1      # susan.c:677:16
.Ltmp412:
	movslq	-52(%rbp), %r14
	.loc	2 677 18 is_stmt 0      # susan.c:677:18
	decq	%r14
	.loc	2 677 16                # susan.c:677:16
	leaq	-5(%r13), %rbx
	movl	$91, %edi
	movl	$91, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$2, (%rsp)
	movl	$93, %edi
	movl	$92, %esi
	movl	$2, %edx
	movl	$91, %ecx
	movl	$1, %r8d
	movl	$48, %r9d
	callq	_KTimestamp3
	movl	$137, %edi
	movl	$93, %esi
	callq	_KPhiAddCond
	movl	$91, %edi
	movl	$93, %esi
	callq	_KPhiAddCond
	movl	$137, %edi
	movl	$137, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
.Ltmp413:
	.loc	2 677 7                 # susan.c:677:7
	cmpq	%r14, %rbx
	jge	.LBB10_38
.Ltmp414:
# BB#34:                                # %for.body140
                                        #   in Loop: Header=BB10_33 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	#DEBUG_VALUE: susan_smoothing:x_size <- [R15+0]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:j <- 1
	movq	%rbx, -240(%rbp)        # 8-byte Spill
	movq	%r12, -128(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movabsq	$-564299616005201610, %rdi # imm = 0xF82B347D311EE136
	callq	_KEnterRegion
	movl	$93, %edi
	callq	_KPushCDep
	movl	$155, %edi
	callq	_KWork
	#DEBUG_VALUE: susan_smoothing:area <- 0
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-80]
	movl	$49, %esi
	movl	$8, %edx
	leaq	-48(%rbp), %rax
	movq	%rax, %rbx
.Ltmp415:
	#DEBUG_VALUE: susan_smoothing:in <- [RBX+0]
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 680 14 is_stmt 1      # susan.c:680:14
.Ltmp416:
	movq	-48(%rbp), %r14
	movl	$50, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	movq	%r15, %rdi
.Ltmp417:
	#DEBUG_VALUE: susan_smoothing:x_size <- [RDI+0]
	movl	-52(%rbp), %r15d
	movq	-248(%rbp), %rax        # 8-byte Reload
	imull	%eax, %r15d
	movl	$51, %esi
	movl	$4, %edx
.Ltmp418:
	#DEBUG_VALUE: susan_smoothing:x_size <- undef
	callq	_KLoad0
	movl	-52(%rbp), %eax
	.loc	2 681 18                # susan.c:681:18
	imull	-228(%rbp), %eax        # 4-byte Folded Reload
	movq	%r13, -72(%rbp)         # 8-byte Spill
	leal	-5(%r13,%rax), %eax
	movslq	%eax, %r12
	movl	$52, %esi
	movl	$8, %edx
	movq	%rbx, %rdi
.Ltmp419:
	#DEBUG_VALUE: susan_smoothing:in <- undef
	callq	_KLoad0
	movq	-48(%rbp), %rbx
	leaq	(%rbx,%r12), %rdi
	movl	$53, %esi
	movl	$54, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 682 14                # susan.c:682:14
	movzbl	(%rbx,%r12), %eax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rax, %r12
	movslq	%r15d, %r15
	addq	%r14, %r15
	leaq	-6(%r13,%r15), %rdi
	movl	$55, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 684 33                # susan.c:684:33
	movzbl	-6(%r13,%r15), %eax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	%r12, %rbx
	movq	%r12, %r14
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp420:
	#DEBUG_VALUE: susan_smoothing:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$56, %esi
	movl	$57, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 684 31 is_stmt 0      # susan.c:684:31
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	leaq	-5(%r13,%r15), %rdi
	movl	$58, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 685 33 is_stmt 1      # susan.c:685:33
	movzbl	-5(%r13,%r15), %eax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$59, %esi
	movl	$60, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 685 31 is_stmt 0      # susan.c:685:31
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	leaq	-4(%r13,%r15), %rdi
	movl	$61, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 686 31 is_stmt 1      # susan.c:686:31
	movzbl	-4(%r13,%r15), %eax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$62, %esi
	movl	$63, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 686 29 is_stmt 0      # susan.c:686:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -96(%rbp)         # 4-byte Spill
	movl	$64, %esi
	movl	$4, %edx
	leaq	-52(%rbp), %rdi
	callq	_KLoad0
	.loc	2 687 15 is_stmt 1      # susan.c:687:15
	movl	-52(%rbp), %eax
	addl	$-2, %eax
	movslq	%eax, %rbx
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movq	%r13, %r14
	leaq	(%r14,%rbx), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	leaq	-4(%r15,%rax), %rdi
	movq	%rax, %r13
	movl	$65, %esi
	movl	$66, %edx
	movl	$1, %ecx
	callq	_KLoad1
	leaq	(%r15,%rbx), %rax
	.loc	2 688 33                # susan.c:688:33
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movzbl	-4(%r14,%rax), %eax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	-64(%rbp), %r14         # 8-byte Reload
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$67, %esi
	movl	$68, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 688 31 is_stmt 0      # susan.c:688:31
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -100(%rbp)        # 4-byte Spill
	leaq	-3(%r15,%r13), %rdi
	movl	$69, %esi
	movl	$1, %edx
	callq	_KLoad0
	movq	-72(%rbp), %r13         # 8-byte Reload
	.loc	2 689 33 is_stmt 1      # susan.c:689:33
	movq	-88(%rbp), %rax         # 8-byte Reload
	movzbl	-3(%r13,%rax), %eax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$70, %esi
	movl	$71, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 689 31 is_stmt 0      # susan.c:689:31
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -120(%rbp)        # 4-byte Spill
	movq	-152(%rbp), %rax        # 8-byte Reload
	leaq	-2(%r15,%rax), %rdi
	movl	$72, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 690 31 is_stmt 1      # susan.c:690:31
	movq	-88(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	subq	%rax, %r14
	leaq	(%r12,%r14), %rdi
	movl	$73, %esi
	movl	$74, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 690 29 is_stmt 0      # susan.c:690:29
	movzbl	(%r12,%r14), %eax
	movl	%eax, -88(%rbp)         # 4-byte Spill
	movl	$75, %esi
	movl	$4, %edx
	leaq	-52(%rbp), %rdi
	#DEBUG_VALUE: susan_smoothing:x_size <- undef
	callq	_KLoad0
	.loc	2 691 15 is_stmt 1      # susan.c:691:15
	movl	-52(%rbp), %eax
	addl	$-2, %eax
	movslq	%eax, %r14
	movq	%r13, %rbx
	leaq	(%rbx,%r14), %r13
	addq	-80(%rbp), %r13         # 8-byte Folded Reload
	leaq	(%r15,%r13), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	leaq	-2(%r15,%r13), %rdi
	movl	$76, %esi
	movl	$77, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 692 20                # susan.c:692:20
	addq	-80(%rbp), %r14         # 8-byte Folded Reload
	addq	%r15, %r14
	.loc	2 692 33 is_stmt 0      # susan.c:692:33
	movzbl	-2(%rbx,%r14), %eax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	-64(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$78, %esi
	movl	$79, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 692 31                # susan.c:692:31
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -80(%rbp)         # 4-byte Spill
	leaq	-1(%r15,%r13), %rdi
	movl	$80, %esi
	movl	$1, %edx
	callq	_KLoad0
	movq	-72(%rbp), %r15         # 8-byte Reload
	.loc	2 693 33 is_stmt 1      # susan.c:693:33
	movzbl	-1(%r15,%r14), %eax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	-64(%rbp), %r13         # 8-byte Reload
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$81, %esi
	movl	$82, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 693 31 is_stmt 0      # susan.c:693:31
	movzbl	(%r12,%rbx), %ebx
	movl	$83, %esi
	movl	$1, %edx
	movq	-152(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	movq	%r15, %rax
	movl	%ebx, %r15d
	.loc	2 694 31 is_stmt 1      # susan.c:694:31
	movzbl	(%rax,%r14), %ecx
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	movq	%r13, %rbx
	subq	%rcx, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$84, %esi
	movl	$85, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 694 29 is_stmt 0      # susan.c:694:29
	movzbl	(%r12,%rbx), %r13d
.Ltmp421:
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	movq	-144(%rbp), %rbx        # 8-byte Reload
	movq	-136(%rbp), %r12        # 8-byte Reload
	.loc	2 685 49 is_stmt 1      # susan.c:685:49
	leal	(%r12,%rbx), %r14d
	.loc	2 686 47                # susan.c:686:47
	addl	-96(%rbp), %r14d        # 4-byte Folded Reload
	.loc	2 688 49                # susan.c:688:49
	addl	-100(%rbp), %r14d       # 4-byte Folded Reload
	.loc	2 689 49                # susan.c:689:49
	addl	-120(%rbp), %r14d       # 4-byte Folded Reload
	.loc	2 690 47                # susan.c:690:47
	addl	-88(%rbp), %r14d        # 4-byte Folded Reload
	.loc	2 692 49                # susan.c:692:49
	addl	-80(%rbp), %r14d        # 4-byte Folded Reload
	.loc	2 693 49                # susan.c:693:49
	addl	%r15d, %r14d
	.loc	2 694 47                # susan.c:694:47
	addl	%r13d, %r14d
	movl	$3, 120(%rsp)
	movl	$84, 112(%rsp)
	movl	$7, 104(%rsp)
	movl	$70, 96(%rsp)
	movl	$8, 88(%rsp)
	movl	$67, 80(%rsp)
	movl	$9, 72(%rsp)
	movl	$62, 64(%rsp)
	movl	$10, 56(%rsp)
	movl	$59, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$56, 32(%rsp)
	movl	$11, 24(%rsp)
	movl	$93, 16(%rsp)
	movl	$6, 8(%rsp)
	movl	$73, (%rsp)
	movl	$142, %edi
	movl	$10, %esi
	movl	$78, %edx
	movl	$5, %ecx
	movl	$81, %r8d
	movl	$4, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$142, %edi
	callq	_KPushCDep
	.loc	2 697 13                # susan.c:697:13
	addl	$-100, %r14d
	je	.LBB10_35
# BB#36:                                # %if.else245
                                        #   in Loop: Header=BB10_33 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:j <- 1
	#DEBUG_VALUE: susan_smoothing:area <- 0
	.loc	2 684 71                # susan.c:684:71
	movq	-168(%rbp), %rax        # 8-byte Reload
.Ltmp422:
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-80]
	imull	%eax, %r12d
.Ltmp423:
	#DEBUG_VALUE: susan_smoothing:total <- R12D
	.loc	2 685 71                # susan.c:685:71
	movq	-176(%rbp), %rax        # 8-byte Reload
	imull	%eax, %ebx
	.loc	2 685 62 is_stmt 0      # susan.c:685:62
	addl	%r12d, %ebx
.Ltmp424:
	#DEBUG_VALUE: susan_smoothing:total <- EBX
	.loc	2 686 69 is_stmt 1      # susan.c:686:69
	movq	-184(%rbp), %rax        # 8-byte Reload
	movl	-96(%rbp), %ecx         # 4-byte Reload
	imull	%eax, %ecx
	.loc	2 686 60 is_stmt 0      # susan.c:686:60
	addl	%ebx, %ecx
.Ltmp425:
	#DEBUG_VALUE: susan_smoothing:total <- ECX
	.loc	2 688 71 is_stmt 1      # susan.c:688:71
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	-100(%rbp), %edx        # 4-byte Reload
	imull	%eax, %edx
	.loc	2 688 62 is_stmt 0      # susan.c:688:62
	addl	%ecx, %edx
.Ltmp426:
	#DEBUG_VALUE: susan_smoothing:total <- EDX
	.loc	2 689 71 is_stmt 1      # susan.c:689:71
	movq	-200(%rbp), %rax        # 8-byte Reload
	movl	-120(%rbp), %ecx        # 4-byte Reload
	imull	%eax, %ecx
	.loc	2 689 62 is_stmt 0      # susan.c:689:62
	addl	%edx, %ecx
.Ltmp427:
	#DEBUG_VALUE: susan_smoothing:total <- ECX
	.loc	2 690 69 is_stmt 1      # susan.c:690:69
	movq	-208(%rbp), %rax        # 8-byte Reload
	movl	-88(%rbp), %edx         # 4-byte Reload
	imull	%eax, %edx
	.loc	2 690 60 is_stmt 0      # susan.c:690:60
	addl	%ecx, %edx
.Ltmp428:
	#DEBUG_VALUE: susan_smoothing:total <- EDX
	.loc	2 692 71 is_stmt 1      # susan.c:692:71
	movq	-216(%rbp), %rax        # 8-byte Reload
	movl	-80(%rbp), %ecx         # 4-byte Reload
	imull	%eax, %ecx
	.loc	2 692 62 is_stmt 0      # susan.c:692:62
	addl	%edx, %ecx
.Ltmp429:
	#DEBUG_VALUE: susan_smoothing:total <- ECX
	.loc	2 693 71 is_stmt 1      # susan.c:693:71
	movq	-224(%rbp), %rax        # 8-byte Reload
	imull	%eax, %r15d
	.loc	2 693 62 is_stmt 0      # susan.c:693:62
	addl	%ecx, %r15d
.Ltmp430:
	#DEBUG_VALUE: susan_smoothing:total <- R15D
	.loc	2 694 69 is_stmt 1      # susan.c:694:69
	movq	-152(%rbp), %rax        # 8-byte Reload
	imull	%eax, %r13d
	.loc	2 694 60 is_stmt 0      # susan.c:694:60
	addl	%r15d, %r13d
.Ltmp431:
	#DEBUG_VALUE: susan_smoothing:total <- R13D
	movl	$14, %edi
	callq	_KWork
	.loc	2 700 19 is_stmt 1      # susan.c:700:19
.Ltmp432:
	movq	-64(%rbp), %rax         # 8-byte Reload
	imull	$-100, %eax, %eax
	addl	%r13d, %eax
	.loc	2 700 18 is_stmt 0      # susan.c:700:18
	cltd
	idivl	%r14d
	movl	%eax, %r14d
	movl	$16, 280(%rsp)
	movl	$84, 272(%rsp)
	movl	$14, 264(%rsp)
	movl	$83, 256(%rsp)
	movl	$17, 248(%rsp)
	movl	$72, 240(%rsp)
	movl	$20, 232(%rsp)
	movl	$70, 224(%rsp)
	movl	$18, 216(%rsp)
	movl	$69, 208(%rsp)
	movl	$21, 200(%rsp)
	movl	$67, 192(%rsp)
	movl	$19, 184(%rsp)
	movl	$65, 176(%rsp)
	movl	$22, 168(%rsp)
	movl	$62, 160(%rsp)
	movl	$20, 152(%rsp)
	movl	$61, 144(%rsp)
	movl	$23, 136(%rsp)
	movl	$59, 128(%rsp)
	movl	$21, 120(%rsp)
	movl	$58, 112(%rsp)
	movl	$24, 104(%rsp)
	movl	$56, 96(%rsp)
	movl	$22, 88(%rsp)
	movl	$55, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$53, 64(%rsp)
	movl	$24, 56(%rsp)
	movl	$93, 48(%rsp)
	movl	$19, 40(%rsp)
	movl	$73, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$81, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$80, (%rsp)
	movl	$94, %edi
	movl	$20, %esi
	movl	$76, %edx
	movl	$16, %ecx
	movl	$78, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$94, %edi
	movl	$1, %edx
	movq	-128(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 700 11                # susan.c:700:11
	movb	%r14b, (%rbx)
	movl	$3, 136(%rsp)
	movl	$84, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$70, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$67, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$62, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$59, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$56, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$93, 32(%rsp)
	movl	$0, 24(%rsp)
	movl	$137, 16(%rsp)
	movl	$6, 8(%rsp)
	movl	$73, (%rsp)
	movl	$141, %r15d
	movl	$141, %edi
	jmp	.LBB10_37
.Ltmp433:
	.align	16, 0x90
.LBB10_35:                              # %if.then242
                                        #   in Loop: Header=BB10_33 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- undef
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	#DEBUG_VALUE: susan_smoothing:x_size <- undef
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:j <- 1
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	$86, %esi
	movl	$8, %edx
	leaq	-48(%rbp), %rdi
.Ltmp434:
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-80]
	callq	_KLoad0
	movl	$9, %edi
	callq	_KWork
	.loc	2 698 25 is_stmt 1      # susan.c:698:25
	movq	-48(%rbp), %rbx
	movl	$87, %esi
	movl	$4, %edx
	leaq	-52(%rbp), %rdi
.Ltmp435:
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	callq	_KLoad0
	.loc	2 698 32 is_stmt 0      # susan.c:698:32
	movl	-52(%rbp), %r14d
	xorl	%esi, %esi
	movabsq	$5650713404744792224, %rdi # imm = 0x4E6B5DE72159F8A0
	callq	_KPrepCall
	movl	$87, %edi
	movl	$87, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$87, %edi
	callq	_KEnqArg
	movl	$3, 136(%rsp)
	movl	$84, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$70, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$67, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$62, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$59, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$56, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$93, 32(%rsp)
	movl	$0, 24(%rsp)
	movl	$91, 16(%rsp)
	movl	$6, 8(%rsp)
	movl	$73, (%rsp)
	movl	$90, %edi
	movl	$11, %esi
	movl	$78, %edx
	movl	$5, %ecx
	movl	$81, %r8d
	movl	$4, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$90, %edi
	callq	_KEnqArg
	movl	$89, %edi
	callq	_KEnqArg
	movl	$88, %edi
	callq	_KLinkReturn
	.loc	2 698 18                # susan.c:698:18
	movq	%rbx, %rdi
	movl	-228(%rbp), %esi        # 4-byte Reload
	movq	-240(%rbp), %rdx        # 8-byte Reload
                                        # kill: EDX<def> EDX<kill> RDX<kill>
	movl	%r14d, %ecx
	callq	median
	movb	%al, %r14b
	movl	$88, %edi
	movl	$88, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$88, %edi
	movl	$1, %edx
	movq	-128(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 698 11                # susan.c:698:11
	movb	%r14b, (%rbx)
	movl	$3, 136(%rsp)
	movl	$84, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$70, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$67, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$62, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$59, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$56, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$93, 32(%rsp)
	movl	$0, 24(%rsp)
	movl	$137, 16(%rsp)
	movl	$6, 8(%rsp)
	movl	$73, (%rsp)
	movl	$140, %r15d
	movl	$140, %edi
	jmp	.LBB10_37
.Ltmp436:
.LBB10_40:                              # %for.cond131.pre_exit.if.end258.loopexit1
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- 1
	movl	$1, %esi
	movabsq	$4431436282168790827, %rdi # imm = 0x3D7F9FD1E372CF2B
	jmp	.LBB10_41
.LBB10_9:                               # %if.then33
	#DEBUG_VALUE: susan_smoothing:dt <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
.Ltmp437:
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- R13D
	#DEBUG_VALUE: susan_smoothing:n_max <- [RBP+-120]
	movabsq	$5742392520067669281, %r15 # imm = 0x4FB113928F7E5D21
	movl	$17, %edi
	callq	_KWork
	leaq	-52(%rbp), %rdi
.Ltmp438:
	#DEBUG_VALUE: susan_smoothing:x_size <- [RDI+0]
	movl	$13, %esi
	movl	$4, %edx
	callq	_KLoad0
	.loc	2 660 11 is_stmt 1      # susan.c:660:11
.Ltmp439:
	movslq	-52(%rbp), %rax
.Ltmp440:
	.loc	2 626 41                # susan.c:626:41
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movl	-120(%rbp), %ebx        # 4-byte Reload
	imull	%ebx, %ebx
	movl	$14, %edi
.Ltmp441:
	movl	$1, %esi
	movl	$6, %edx
	movl	$12, %ecx
	movl	$5, %r8d
	callq	_KTimestamp2
	xorl	%eax, %eax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movabsq	$-4479082115933656585, %rdi # imm = 0xC1D71A8BF7F829F7
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$14, %edi
	callq	_KEnqArg
	.loc	2 626 31 is_stmt 0      # susan.c:626:31
	movl	%ebx, %edi
	callq	wccmalloc
	movq	%rax, -200(%rbp)        # 8-byte Spill
.Ltmp442:
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dpt <- undef
	movss	-88(%rbp), %xmm0        # 4-byte Reload
.Ltmp443:
	#DEBUG_VALUE: susan_smoothing:dt <- XMM0
	.loc	2 628 16 is_stmt 1      # susan.c:628:16
	mulss	%xmm0, %xmm0
.Ltmp444:
	.loc	2 628 14 is_stmt 0      # susan.c:628:14
	xorps	.LCPI10_2(%rip), %xmm0
.Ltmp445:
	#DEBUG_VALUE: susan_smoothing:temp <- XMM0
	movss	%xmm0, -88(%rbp)        # 4-byte Spill
.Ltmp446:
	#DEBUG_VALUE: susan_smoothing:temp <- [RBP+-88]
	.loc	2 631 11 is_stmt 1      # susan.c:631:11
	movl	%r13d, %r14d
	negl	%r14d
.Ltmp447:
	#DEBUG_VALUE: susan_smoothing:j <- R14D
	#DEBUG_VALUE: susan_smoothing:y <- R14D
	#DEBUG_VALUE: susan_smoothing:x <- R14D
	#DEBUG_VALUE: susan_smoothing:i <- R14D
	movl	%r14d, -144(%rbp)       # 4-byte Spill
	movl	$22, %edi
	movl	$1, %esi
	movl	$8, %edx
	movl	$2, %ecx
	movl	$7, %r8d
	callq	_KTimestamp2
	movl	$100, %ebx
	movl	$100, %edi
	movl	$100, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$97, %r12d
	movl	$97, %edi
	movl	$1, %esi
	movl	$2, %edx
	movl	$12, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$1, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	movabsq	$-283635305535167608, %r15 # imm = 0xFC1053313FD12388
	movq	-200(%rbp), %rax        # 8-byte Reload
.Ltmp448:
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	movq	%rax, -64(%rbp)         # 8-byte Spill
.Ltmp449:
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	jmp	.LBB10_10
	.align	16, 0x90
.LBB10_14:                              # %for.cond44.pre_exit.for.inc57
                                        #   in Loop: Header=BB10_10 Depth=1
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:n_max <- [RBP+-120]
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:temp <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	movl	$1, %esi
	movabsq	$7023754674377589043, %rdi # imm = 0x617963A9B3C40133
	callq	_KExitRegion
	movl	$19, %eax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movl	$19, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	-100(%rbp), %r14d       # 4-byte Reload
	.loc	2 631 37 is_stmt 0      # susan.c:631:37
.Ltmp450:
	incl	%r14d
.Ltmp451:
	#DEBUG_VALUE: susan_smoothing:i <- R14D
	movl	$98, %r12d
	movl	$98, %edi
	movl	$17, %esi
	movl	$1, %edx
	movl	$19, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$8484195976633747768, %rdi # imm = 0x75BDEB4A200D8938
	callq	_KExitRegion
	movl	$101, %ebx
	movq	-96(%rbp), %r13         # 8-byte Reload
.Ltmp452:
.LBB10_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_12 Depth 2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:n_max <- [RBP+-120]
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:temp <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	movl	$18, %edi
	callq	_KPushCDep
	movl	$99, %edi
	movl	$18, %edx
	movl	%ebx, %esi
	movq	-72(%rbp), %rbx         # 8-byte Reload
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$17, %edi
	movl	$18, %edx
	movl	%r12d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$19, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$18, %ecx
	movl	$1, %r8d
	movl	$17, %r9d
	callq	_KTimestamp3
	movl	$17, %edi
	movl	$17, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$99, %edi
	movl	$99, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$99, %edi
	movl	$19, %esi
	callq	_KPhiAddCond
	movl	$17, %edi
	movl	$19, %esi
	callq	_KPhiAddCond
	callq	_KPopCDep
	.loc	2 631 23                # susan.c:631:23
	cmpl	%r13d, %r14d
.Ltmp453:
	.loc	2 631 5                 # susan.c:631:5
	jg	.LBB10_15
# BB#11:                                # %for.body
                                        #   in Loop: Header=BB10_10 Depth=1
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:n_max <- [RBP+-120]
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:temp <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	movl	$2, %esi
	movabsq	$8484195976633747768, %rdi # imm = 0x75BDEB4A200D8938
	callq	_KEnterRegion
	movl	$19, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$102, %ebx
	movl	$102, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$19, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$7023754674377589043, %rdi # imm = 0x617963A9B3C40133
	callq	_KEnterRegion
	.loc	2 634 44 is_stmt 1      # susan.c:634:44
.Ltmp454:
	movl	%r14d, %eax
	movl	%r14d, -100(%rbp)       # 4-byte Spill
	imull	%eax, %eax
	movl	%eax, -80(%rbp)         # 4-byte Spill
	movl	$99, %r14d
	xorl	%r12d, %r12d
	movl	-144(%rbp), %r13d       # 4-byte Reload
	jmp	.LBB10_12
	.align	16, 0x90
.LBB10_13:                              # %for.body47
                                        #   in Loop: Header=BB10_12 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:n_max <- [RBP+-120]
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:temp <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	movl	$2, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	movl	$20, %r12d
	movl	$20, %edi
	callq	_KPushCDep
	movl	$32, %edi
	callq	_KWork
	.loc	2 634 50 is_stmt 0      # susan.c:634:50
	movl	%r13d, %eax
	imull	%eax, %eax
	.loc	2 634 43                # susan.c:634:43
	addl	-80(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 634 35                # susan.c:634:35
	cvtsi2ssl	%eax, %xmm0
	.loc	2 634 34                # susan.c:634:34
	divss	-88(%rbp), %xmm0        # 4-byte Folded Reload
	movss	%xmm0, -72(%rbp)        # 4-byte Spill
	xorl	%esi, %esi
	movabsq	$-1753604850774163345, %rdi # imm = 0xE7A9F1ADE134406F
	callq	_KPrepCall
	movl	$23, 16(%rsp)
	movl	$20, 8(%rsp)
	movl	$23, (%rsp)
	movl	$16, %edi
	movl	$22, %esi
	movl	$20, %edx
	movl	$17, %ecx
	movl	$23, %r8d
	movl	$21, %r9d
	callq	_KTimestamp4
	movl	$16, %edi
	callq	_KEnqArg
	movl	$15, %edi
	callq	_KLinkReturn
	.loc	2 634 28                # susan.c:634:28
	movss	-72(%rbp), %xmm0        # 4-byte Reload
	callq	expf
	cvtss2sd	%xmm0, %xmm0
	.loc	2 634 20                # susan.c:634:20
	mulsd	.LCPI10_3(%rip), %xmm0
	.loc	2 634 13                # susan.c:634:13
	cvttsd2si	%xmm0, %r14d
.Ltmp455:
	#DEBUG_VALUE: susan_smoothing:x <- R14D
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-64]
	movl	$23, %edi
	movl	$20, %esi
	movl	$5, %edx
	movl	$15, %ecx
	movl	$5, %r8d
	callq	_KTimestamp2
	movl	$23, %edi
	movl	$1, %edx
	movq	-64(%rbp), %rbx         # 8-byte Reload
.Ltmp456:
	#DEBUG_VALUE: susan_smoothing:dpt <- RBX
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 635 9 is_stmt 1       # susan.c:635:9
	movb	%r14b, (%rbx)
	.loc	2 635 10 is_stmt 0      # susan.c:635:10
	leaq	1(%rbx), %rbx
.Ltmp457:
	movq	%rbx, -64(%rbp)         # 8-byte Spill
.Ltmp458:
	.loc	2 633 39 is_stmt 1      # susan.c:633:39
	incl	%r13d
.Ltmp459:
	#DEBUG_VALUE: susan_smoothing:j <- R13D
	movl	$104, %r14d
.Ltmp460:
	movl	$104, %edi
	movl	$101, %esi
	xorl	%edx, %edx
	movl	$20, %ecx
	xorl	%r8d, %r8d
	callq	_KTimestamp2
	movl	$103, %ebx
	movl	$103, %edi
	movl	$21, %esi
	movl	$1, %edx
	movl	$20, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r15, %rdi
	callq	_KExitRegion
.Ltmp461:
.LBB10_12:                              # %for.cond44
                                        #   Parent Loop BB10_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:n_max <- [RBP+-120]
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:temp <- [RBP+-88]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	movl	$19, %edi
	callq	_KPushCDep
	movl	$101, %edi
	movl	$19, %edx
	movl	%r14d, %esi
	movl	%r12d, %ecx
	callq	_KPhi2To1
	movl	$21, %edi
	movl	$19, %edx
	movl	%ebx, %esi
	movl	%r12d, %ecx
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$21, %edi
	movl	$21, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$1, (%rsp)
	movl	$20, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$19, %ecx
	movl	$1, %r8d
	movl	$21, %r9d
	callq	_KTimestamp3
	movl	$101, %edi
	movl	$20, %esi
	callq	_KPhiAddCond
	movl	$21, %edi
	movl	$20, %esi
	callq	_KPhiAddCond
	movl	$101, %edi
	movl	$101, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 633 25 is_stmt 0      # susan.c:633:25
	movq	-96(%rbp), %rax         # 8-byte Reload
	cmpl	%eax, %r13d
	jle	.LBB10_13
	jmp	.LBB10_14
.Ltmp462:
.LBB10_15:                              # %for.cond.pre_exit.for.end59
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:out <- [RBP+-160]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:n_max <- [RBP+-120]
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	movabsq	$-5798603695125984165, %r15 # imm = 0xAF8738A95EBF8C5B
	movl	$1, %esi
	movabsq	$5742392520067669281, %rdi # imm = 0x4FB113928F7E5D21
	callq	_KExitRegion
	movl	$18, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	.loc	2 660 11 is_stmt 1      # susan.c:660:11
.Ltmp463:
	movslq	-120(%rbp), %rax        # 4-byte Folded Reload
.Ltmp464:
	.loc	2 624 17                # susan.c:624:17
	subq	%rax, -152(%rbp)        # 8-byte Folded Spill
.Ltmp465:
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	movslq	%r13d, %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movl	$1, (%rsp)
	movl	$12, %r12d
	movl	$120, %edi
	movl	$1, %esi
	movl	$5, %edx
	movl	$12, %ecx
	movl	$4, %r8d
	movl	$13, %r9d
	callq	_KTimestamp3
	xorl	%ebx, %ebx
	movl	$109, %edi
	movl	$1, %esi
	movl	$1, %edx
	movl	$12, %ecx
	xorl	%r8d, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$1, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	movl	$6, %r15d
	movl	%r13d, %r14d
	jmp	.LBB10_16
	.align	16, 0x90
.LBB10_29:                              # %for.cond65.pre_exit.for.inc127
                                        #   in Loop: Header=BB10_16 Depth=1
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
.Ltmp466:
	#DEBUG_VALUE: susan_smoothing:x_size <- [R15+0]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	movl	$1, %esi
	movabsq	$59435523480839419, %rdi # imm = 0xD3284B301D64FB
	callq	_KExitRegion
	movl	$43, %ebx
	movl	$43, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	-176(%rbp), %r14d       # 4-byte Reload
	.loc	2 642 41                # susan.c:642:41
.Ltmp467:
	incl	%r14d
.Ltmp468:
	#DEBUG_VALUE: susan_smoothing:i <- R14D
	movl	$105, %r12d
	movl	$105, %edi
	movl	$39, %esi
	movl	$1, %edx
	movl	$43, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-6680966110772947221, %rdi # imm = 0xA34870B832F496EB
	callq	_KExitRegion
	movl	$107, %r15d
.Ltmp469:
.LBB10_16:                              # %for.cond60
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_18 Depth 2
                                        #       Child Loop BB10_20 Depth 3
                                        #         Child Loop BB10_22 Depth 4
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	movl	$18, %edi
	callq	_KPushCDep
	movl	$106, %edi
	movl	$18, %edx
	movl	%r15d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$39, %edi
	movl	$18, %edx
	movl	%r12d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	movl	$24, %esi
	movl	$4, %edx
	leaq	-56(%rbp), %rdi
	callq	_KLoad0
	movl	$6, %edi
	callq	_KWork
	.loc	2 642 24 is_stmt 0      # susan.c:642:24
	movl	-56(%rbp), %ebx
	subl	%r13d, %ebx
	movl	$2, 16(%rsp)
	movl	$24, 8(%rsp)
	movl	$1, (%rsp)
	movl	$43, %edi
	movl	$12, %esi
	movl	$2, %edx
	movl	$18, %ecx
	movl	$2, %r8d
	movl	$39, %r9d
	callq	_KTimestamp4
	movl	$39, %edi
	movl	$39, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$106, %edi
	movl	$106, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$106, %edi
	movl	$43, %esi
	callq	_KPhiAddCond
	movl	$39, %edi
	movl	$43, %esi
	callq	_KPhiAddCond
	callq	_KPopCDep
.Ltmp470:
	.loc	2 642 5                 # susan.c:642:5
	cmpl	%ebx, %r14d
	jge	.LBB10_39
# BB#17:                                # %for.body64
                                        #   in Loop: Header=BB10_16 Depth=1
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	movl	$2, %esi
	movabsq	$-6680966110772947221, %rdi # imm = 0xA34870B832F496EB
	callq	_KEnterRegion
	movl	$43, %edi
	callq	_KPushCDep
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$59435523480839419, %rdi # imm = 0xD3284B301D64FB
	callq	_KEnterRegion
	.loc	2 648 21 is_stmt 1      # susan.c:648:21
.Ltmp471:
	movl	%r14d, %eax
	movl	%r14d, -176(%rbp)       # 4-byte Spill
	subl	%r13d, %eax
	movl	%eax, -192(%rbp)        # 4-byte Spill
	movl	$106, %r14d
	movl	$109, %r15d
	xorl	%ebx, %ebx
	movq	-184(%rbp), %r12        # 8-byte Reload
	jmp	.LBB10_18
	.align	16, 0x90
.LBB10_28:                              # %for.inc124
                                        #   in Loop: Header=BB10_18 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
.Ltmp472:
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
	.loc	2 664 12                # susan.c:664:12
	incq	%rbx
	movq	%rbx, -160(%rbp)        # 8-byte Spill
	movl	$44, %ebx
	movl	$44, %edi
	callq	_KPushCDep
	movl	$110, %r14d
	movl	$110, %edi
	movl	$44, %edx
	movl	$134, %ecx
	movl	%r15d, %esi
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
.Ltmp473:
	.loc	2 644 7                 # susan.c:644:7
	incq	%r12
	movl	$110, %edi
	movl	$110, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$108, %r15d
	movl	$108, %edi
	movl	$41, %esi
	movl	$1, %edx
	movl	$44, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-7771137896160781348, %rdi # imm = 0x94275F41B6C29BDC
	callq	_KExitRegion
.LBB10_18:                              # %for.cond65
                                        #   Parent Loop BB10_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_20 Depth 3
                                        #         Child Loop BB10_22 Depth 4
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	movl	$43, %edi
	callq	_KPushCDep
	movl	$107, %edi
	movl	$43, %edx
	movl	%r14d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$41, %edi
	movl	$43, %edx
	movl	%r15d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	movl	$25, %esi
	movl	$4, %edx
	leaq	-52(%rbp), %r15
.Ltmp474:
	#DEBUG_VALUE: susan_smoothing:x_size <- [R15+0]
	movq	%r15, %rdi
	callq	_KLoad0
	movl	$6, %edi
	callq	_KWork
	.loc	2 644 24 is_stmt 0      # susan.c:644:24
	movslq	-52(%rbp), %rbx
	movq	-184(%rbp), %r14        # 8-byte Reload
	.loc	2 644 26                # susan.c:644:26
	subq	%r14, %rbx
	movl	$2, 16(%rsp)
	movl	$25, 8(%rsp)
	movl	$1, (%rsp)
	movl	$44, %edi
	movl	$12, %esi
	movl	$2, %edx
	movl	$43, %ecx
	movl	$2, %r8d
	movl	$41, %r9d
	callq	_KTimestamp4
	movl	$41, %edi
	movl	$41, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$107, %edi
	movl	$44, %esi
	callq	_KPhiAddCond
	movl	$41, %edi
	movl	$44, %esi
	callq	_KPhiAddCond
	movl	$107, %edi
	movl	$107, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
.Ltmp475:
	.loc	2 644 7                 # susan.c:644:7
	cmpq	%rbx, %r12
	jge	.LBB10_29
.Ltmp476:
# BB#19:                                # %for.body69
                                        #   in Loop: Header=BB10_18 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [R15+0]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	movl	$2, %esi
	movabsq	$-7771137896160781348, %rdi # imm = 0x94275F41B6C29BDC
	movq	%r12, %r13
	movq	%r13, -168(%rbp)        # 8-byte Spill
	callq	_KEnterRegion
	movl	$44, %edi
	callq	_KPushCDep
	movl	$28, %edi
	callq	_KWork
	#DEBUG_VALUE: susan_smoothing:area <- 0
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	movl	$26, %esi
	movl	$8, %edx
	leaq	-48(%rbp), %rbx
.Ltmp477:
	#DEBUG_VALUE: susan_smoothing:in <- [RBX+0]
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 648 14 is_stmt 1      # susan.c:648:14
.Ltmp478:
	movq	-48(%rbp), %r12
	movl	$27, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	movslq	-52(%rbp), %rax
	movslq	-192(%rbp), %rcx        # 4-byte Folded Reload
	.loc	2 648 20 is_stmt 0      # susan.c:648:20
	imulq	%rax, %rcx
	.loc	2 648 14                # susan.c:648:14
	movq	%r13, %rax
	subq	%r14, %rax
	addq	%rcx, %rax
	addq	%r12, %rax
.Ltmp479:
	#DEBUG_VALUE: susan_smoothing:ip <- RAX
	movq	%rax, -64(%rbp)         # 8-byte Spill
.Ltmp480:
	#DEBUG_VALUE: susan_smoothing:ip <- [RBP+-64]
	movl	$28, %esi
	movl	$4, %edx
	movq	%r15, %rdi
.Ltmp481:
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	callq	_KLoad0
	movl	-52(%rbp), %eax
	.loc	2 649 21 is_stmt 1      # susan.c:649:21
	imull	-176(%rbp), %eax        # 4-byte Folded Reload
	addl	%r13d, %eax
	.loc	2 649 18 is_stmt 0      # susan.c:649:18
	movslq	%eax, %r14
	movl	$29, %esi
	movl	$8, %edx
	movq	%rbx, %rdi
.Ltmp482:
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	callq	_KLoad0
	movq	-48(%rbp), %rbx
	leaq	(%rbx,%r14), %rdi
	movl	$30, %esi
	movl	$31, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 650 14 is_stmt 1      # susan.c:650:14
	movzbl	(%rbx,%r14), %eax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movl	$2, 48(%rsp)
	movl	$27, 40(%rsp)
	movl	$0, 32(%rsp)
	movl	$26, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$44, 8(%rsp)
	movl	$0, (%rsp)
	movl	$117, -72(%rbp)         # 4-byte Folded Spill
	movl	$117, %edi
	movl	$12, %esi
	movl	$3, %edx
	movl	$39, %ecx
	movl	$3, %r8d
	movl	$41, %r9d
	callq	_KTimestamp6
	movl	$114, -80(%rbp)         # 4-byte Folded Spill
	movl	$114, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$44, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$7279609226088015983, %rdi # imm = 0x65065E05A8A1E86F
	callq	_KEnterRegion
	movl	$100, %r13d
	xorl	%ebx, %ebx
	xorl	%r12d, %r12d
	movl	$0, -100(%rbp)          # 4-byte Folded Spill
	movl	-144(%rbp), %r14d       # 4-byte Reload
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
	xorl	%r15d, %r15d
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	jmp	.LBB10_20
	.align	16, 0x90
.LBB10_24:                              # %for.cond87.pre_exit.for.end105
                                        #   in Loop: Header=BB10_20 Depth=3
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	$1, %esi
	movabsq	$-7124757590071050771, %rdi # imm = 0x9D1FC6B86D0BFDED
	callq	_KExitRegion
	movl	$112, %ebx
	movl	$112, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	.loc	2 660 11                # susan.c:660:11
.Ltmp483:
	movq	-64(%rbp), %rax         # 8-byte Reload
	addq	-152(%rbp), %rax        # 8-byte Folded Reload
	#DEBUG_VALUE: susan_smoothing:ip <- [RBP+-64]
.Ltmp484:
	.loc	2 652 41                # susan.c:652:41
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movl	-136(%rbp), %r14d       # 4-byte Reload
	incl	%r14d
.Ltmp485:
	#DEBUG_VALUE: susan_smoothing:y <- R14D
	movl	$0, (%rsp)
	movl	$118, -72(%rbp)         # 4-byte Folded Spill
	movl	$118, %edi
	movl	$120, %esi
	xorl	%edx, %edx
	movl	$112, %ecx
	xorl	%r8d, %r8d
	movl	$119, %r9d
	callq	_KTimestamp3
	movl	$115, -80(%rbp)         # 4-byte Folded Spill
	movl	$115, %edi
	movl	$113, %esi
	movl	$1, %edx
	movl	$112, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$3079480225462572598, %rdi # imm = 0x2ABC82F303895636
	callq	_KExitRegion
	movl	$123, %r15d
	movl	$122, %r13d
	movl	$111, %r12d
.Ltmp486:
.LBB10_20:                              # %for.cond82
                                        #   Parent Loop BB10_16 Depth=1
                                        #     Parent Loop BB10_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_22 Depth 4
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	$44, %edi
	callq	_KPushCDep
	movl	$46, %edi
	movl	$44, %edx
	movl	%r15d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$121, %edi
	movl	$44, %edx
	movl	%r13d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$116, %edi
	movl	$44, %edx
	movl	-72(%rbp), %esi         # 4-byte Reload
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$113, %edi
	movl	$44, %edx
	movl	-80(%rbp), %esi         # 4-byte Reload
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$42, %edi
	movl	$44, %edx
	movl	%r12d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$46, %edi
	movl	$46, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$42, %edi
	movl	$42, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$121, %edi
	movl	$121, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$116, %edi
	movl	$116, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$1, (%rsp)
	movl	$112, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$44, %ecx
	movl	$1, %r8d
	movl	$113, %r9d
	callq	_KTimestamp3
	movl	$46, %edi
	movl	$112, %esi
	callq	_KPhiAddCond
	movl	$121, %edi
	movl	$112, %esi
	callq	_KPhiAddCond
	movl	$116, %edi
	movl	$112, %esi
	callq	_KPhiAddCond
	movl	$113, %edi
	movl	$112, %esi
	callq	_KPhiAddCond
	movl	$113, %edi
	movl	$113, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$42, %edi
	movl	$112, %esi
	callq	_KPhiAddCond
	callq	_KPopCDep
	movq	-96(%rbp), %r13         # 8-byte Reload
	.loc	2 652 27 is_stmt 0      # susan.c:652:27
	cmpl	%r13d, %r14d
.Ltmp487:
	.loc	2 652 9                 # susan.c:652:9
	jg	.LBB10_25
# BB#21:                                # %for.body85
                                        #   in Loop: Header=BB10_20 Depth=3
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	%r14d, -136(%rbp)       # 4-byte Spill
	movl	$2, %esi
	movabsq	$3079480225462572598, %rdi # imm = 0x2ABC82F303895636
	callq	_KEnterRegion
	movl	$112, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$127, -80(%rbp)         # 4-byte Folded Spill
	movl	$127, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$112, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$-7124757590071050771, %rdi # imm = 0x9D1FC6B86D0BFDED
	callq	_KEnterRegion
	movl	$46, %ebx
	movl	$121, %r13d
	movl	$116, %r12d
	movl	$42, %r15d
	xorl	%r14d, %r14d
	movl	-144(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB10_22
	.align	16, 0x90
.LBB10_23:                              # %for.body90
                                        #   in Loop: Header=BB10_22 Depth=4
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	$2, %esi
	movabsq	$-8572017095767004266, %rax # imm = 0x890A13DE2E3B6B96
	movq	%rax, %rdi
	callq	_KEnterRegion
	movl	$125, %r14d
	movl	$125, %edi
	callq	_KPushCDep
	movl	$20, %edi
	callq	_KWork
	#DEBUG_VALUE: susan_smoothing:ip <- [RBP+-64]
	movl	$32, %esi
	movl	$1, %edx
	movq	-64(%rbp), %rbx         # 8-byte Reload
.Ltmp488:
	#DEBUG_VALUE: susan_smoothing:ip <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 656 30 is_stmt 1      # susan.c:656:30
.Ltmp489:
	movzbl	(%rbx), %r12d
	.loc	2 655 27                # susan.c:655:27
	leaq	1(%rbx), %rbx
.Ltmp490:
	#DEBUG_VALUE: susan_smoothing:brightness <- R12D
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-88]
	movq	%rbx, -64(%rbp)         # 8-byte Spill
	movl	$33, %esi
	movl	$1, %edx
	movq	-88(%rbp), %rbx         # 8-byte Reload
.Ltmp491:
	#DEBUG_VALUE: susan_smoothing:dpt <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 656 19                # susan.c:656:19
	movzbl	(%rbx), %r15d
	.loc	2 656 20 is_stmt 0      # susan.c:656:20
	leaq	1(%rbx), %rbx
.Ltmp492:
	movq	%rbx, -88(%rbp)         # 8-byte Spill
	.loc	2 656 30                # susan.c:656:30
	movq	-120(%rbp), %rbx        # 8-byte Reload
	subq	%r12, %rbx
	movq	-112(%rbp), %r13        # 8-byte Reload
.Ltmp493:
	#DEBUG_VALUE: susan_smoothing:bp <- R13
	leaq	(%r13,%rbx), %rdi
	movl	$34, %esi
	movl	$35, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 656 28                # susan.c:656:28
	movzbl	(%r13,%rbx), %eax
.Ltmp494:
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	.loc	2 656 19                # susan.c:656:19
	imull	%r15d, %eax
.Ltmp495:
	#DEBUG_VALUE: susan_smoothing:tmp <- [RBP+-128]
	.loc	2 657 13 is_stmt 1      # susan.c:657:13
	addl	%eax, -100(%rbp)        # 4-byte Folded Spill
.Ltmp496:
	#DEBUG_VALUE: susan_smoothing:area <- [RBP+-100]
	.loc	2 658 22                # susan.c:658:22
	imull	%r12d, %eax
	.loc	2 658 13 is_stmt 0      # susan.c:658:13
	addl	%eax, -128(%rbp)        # 4-byte Folded Spill
.Ltmp497:
	#DEBUG_VALUE: susan_smoothing:total <- [RBP+-128]
	.loc	2 654 43 is_stmt 1      # susan.c:654:43
	incl	-72(%rbp)               # 4-byte Folded Spill
.Ltmp498:
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-72]
	movl	$5, 32(%rsp)
	movl	$34, 24(%rsp)
	movl	$5, 16(%rsp)
	movl	$33, 8(%rsp)
	movl	$3, (%rsp)
	movl	$131, %ebx
	movl	$131, %edi
	movl	$123, %esi
	movl	$1, %edx
	movl	$125, %ecx
	movl	$5, %r8d
	movl	$32, %r9d
	callq	_KTimestamp5
	movl	$130, %r13d
	movl	$130, %edi
	movl	$122, %esi
	xorl	%edx, %edx
	movl	$125, %ecx
	xorl	%r8d, %r8d
	callq	_KTimestamp2
	movl	$129, %r12d
.Ltmp499:
	movl	$129, %edi
	movl	$119, %esi
	xorl	%edx, %edx
	movl	$125, %ecx
	xorl	%r8d, %r8d
	callq	_KTimestamp2
	movl	$128, -80(%rbp)         # 4-byte Folded Spill
	movl	$128, %edi
	movl	$126, %esi
	movl	$1, %edx
	movl	$125, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$3, 16(%rsp)
	movl	$34, 8(%rsp)
	movl	$3, (%rsp)
	movl	$124, %r15d
	movl	$124, %edi
	movl	$111, %esi
	movl	$1, %edx
	movl	$125, %ecx
	movl	$3, %r8d
	movl	$33, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-8572017095767004266, %rdi # imm = 0x890A13DE2E3B6B96
	callq	_KExitRegion
.LBB10_22:                              # %for.cond87
                                        #   Parent Loop BB10_16 Depth=1
                                        #     Parent Loop BB10_18 Depth=2
                                        #       Parent Loop BB10_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
.Ltmp500:
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	$112, %edi
	callq	_KPushCDep
	movl	$123, %edi
	movl	$112, %edx
	movl	%ebx, %esi
	movl	%r14d, %ecx
	callq	_KPhi2To1
	movl	$122, %edi
	movl	$112, %edx
	movl	%r13d, %esi
	movl	%r14d, %ecx
	callq	_KPhi2To1
	movl	$119, %edi
	movl	$112, %edx
	movl	%r12d, %esi
	movl	%r14d, %ecx
	callq	_KPhi2To1
	movl	$126, %edi
	movl	$112, %edx
	movl	-80(%rbp), %esi         # 4-byte Reload
	movl	%r14d, %ecx
	callq	_KPhi2To1
	movl	$111, %edi
	movl	$112, %edx
	movl	%r15d, %esi
	movl	%r14d, %ecx
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$125, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$112, %ecx
	movl	$1, %r8d
	movl	$126, %r9d
	callq	_KTimestamp3
	movl	$123, %edi
	movl	$125, %esi
	callq	_KPhiAddCond
	movl	$122, %edi
	movl	$125, %esi
	callq	_KPhiAddCond
	movl	$119, %edi
	movl	$125, %esi
	callq	_KPhiAddCond
	movl	$126, %edi
	movl	$125, %esi
	callq	_KPhiAddCond
	movl	$126, %edi
	movl	$126, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$111, %edi
	movl	$125, %esi
	callq	_KPhiAddCond
	movl	$123, %edi
	movl	$123, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$122, %edi
	movl	$122, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$119, %edi
	movl	$119, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$111, %edi
	movl	$111, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movq	-96(%rbp), %rax         # 8-byte Reload
	.loc	2 654 29 is_stmt 0      # susan.c:654:29
	cmpl	%eax, -72(%rbp)         # 4-byte Folded Reload
	jle	.LBB10_23
	jmp	.LBB10_24
.Ltmp501:
	.align	16, 0x90
.LBB10_25:                              # %for.cond82.pre_exit.for.end110
                                        #   in Loop: Header=BB10_18 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	$1, %esi
	movabsq	$7279609226088015983, %rdi # imm = 0x65065E05A8A1E86F
	callq	_KExitRegion
	movl	$44, %edi
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	movl	$134, %edi
	movl	$44, %esi
	movl	$2, %edx
	movl	$42, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$134, %edi
	callq	_KPushCDep
	movl	-100(%rbp), %ebx        # 4-byte Reload
	.loc	2 663 13 is_stmt 1      # susan.c:663:13
	addl	$-10000, %ebx           # imm = 0xFFFFFFFFFFFFD8F0
	je	.LBB10_26
# BB#27:                                # %if.else117
                                        #   in Loop: Header=BB10_18 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
.Ltmp502:
	#DEBUG_VALUE: susan_smoothing:centre <- [RBP+-120]
	movl	$14, %edi
	callq	_KWork
	.loc	2 666 20                # susan.c:666:20
.Ltmp503:
	movq	-120(%rbp), %rax        # 8-byte Reload
	imull	$-10000, %eax, %ecx     # imm = 0xFFFFFFFFFFFFD8F0
	movl	-128(%rbp), %eax        # 4-byte Reload
	addl	%ecx, %eax
	.loc	2 666 19 is_stmt 0      # susan.c:666:19
	cltd
	idivl	%ebx
	movl	%eax, %r14d
	movl	$11, 16(%rsp)
	movl	$46, 8(%rsp)
	movl	$15, (%rsp)
	movl	$45, %edi
	movl	$44, %esi
	movl	$15, %edx
	movl	$30, %ecx
	movl	$13, %r8d
	movl	$42, %r9d
	callq	_KTimestamp4
	movl	$45, %edi
	movl	$1, %edx
	movq	-160(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 666 11                # susan.c:666:11
	movb	%r14b, (%rbx)
	movl	$2, (%rsp)
	movl	$133, %r15d
	movl	$133, %edi
	movl	$107, %esi
	xorl	%edx, %edx
	movl	$44, %ecx
	movl	$2, %r8d
	movl	$42, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movq	-168(%rbp), %r12        # 8-byte Reload
	jmp	.LBB10_28
	.align	16, 0x90
.LBB10_26:                              # %if.then114
                                        #   in Loop: Header=BB10_18 Depth=2
	#DEBUG_VALUE: susan_smoothing:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_smoothing:in <- [RBP+-72]
	#DEBUG_VALUE: susan_smoothing:total <- 0
	#DEBUG_VALUE: susan_smoothing:i <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:x_size <- [RBP+-64]
	#DEBUG_VALUE: susan_smoothing:y_size <- undef
	#DEBUG_VALUE: susan_smoothing:dpt <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:dp <- [RBP+-200]
	#DEBUG_VALUE: susan_smoothing:x <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:y <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:j <- [RBP+-144]
	#DEBUG_VALUE: susan_smoothing:increment <- [RBP+-152]
	#DEBUG_VALUE: susan_smoothing:area <- 0
	movl	$36, %esi
	movl	$8, %edx
	leaq	-48(%rbp), %rdi
	callq	_KLoad0
	movl	$9, %edi
	callq	_KWork
	.loc	2 664 25 is_stmt 1      # susan.c:664:25
	movq	-48(%rbp), %r14
	movl	$37, %esi
	movl	$4, %edx
	leaq	-52(%rbp), %rdi
	callq	_KLoad0
	.loc	2 664 32 is_stmt 0      # susan.c:664:32
	movl	-52(%rbp), %ebx
	xorl	%esi, %esi
	movabsq	$-47961156778941384, %rdi # imm = 0xFF559B94FF2CA438
	callq	_KPrepCall
	movl	$37, %edi
	movl	$37, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$37, %edi
	callq	_KEnqArg
	movl	$2, (%rsp)
	movl	$40, %edi
	movl	$41, %esi
	xorl	%edx, %edx
	movl	$44, %ecx
	movl	$2, %r8d
	movl	$42, %r9d
	callq	_KTimestamp3
	movl	$40, %edi
	callq	_KEnqArg
	movl	$39, %edi
	callq	_KEnqArg
	movl	$38, %edi
	callq	_KLinkReturn
	.loc	2 664 18                # susan.c:664:18
	movq	%r14, %rdi
	movl	-176(%rbp), %esi        # 4-byte Reload
	movq	-168(%rbp), %r12        # 8-byte Reload
	movl	%r12d, %edx
	movl	%ebx, %ecx
	callq	median
	movb	%al, %r14b
	movl	$38, %edi
	movl	$38, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$38, %edi
	movl	$1, %edx
	movq	-160(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 664 11                # susan.c:664:11
	movb	%r14b, (%rbx)
	movl	$2, (%rsp)
	movl	$132, %r15d
	movl	$132, %edi
	movl	$107, %esi
	xorl	%edx, %edx
	movl	$44, %ecx
	movl	$2, %r8d
	movl	$42, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	jmp	.LBB10_28
.Ltmp504:
.LBB10_39:                              # %for.cond60.pre_exit.if.end258.loopexit
	#DEBUG_VALUE: susan_smoothing:total <- 0
	movl	$1, %esi
	movabsq	$-5798603695125984165, %rdi # imm = 0xAF8738A95EBF8C5B
.LBB10_41:                              # %if.end258
	callq	_KExitRegion
	movl	$18, %edi
	callq	_KPushCDep
	callq	_KPopCDep
	#DEBUG_VALUE: susan_smoothing:total <- 0
	xorl	%esi, %esi
	movabsq	$-5223185220444022319, %rdi # imm = 0xB78384B7335D19D1
	callq	_KExitRegion
	.loc	2 704 1 is_stmt 1       # susan.c:704:1
	addq	$504, %rsp              # imm = 0x1F8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp505:
.Ltmp506:
	.size	susan_smoothing, .Ltmp506-susan_smoothing
.Lfunc_end10:
	.cfi_endproc

	.globl	edge_draw
	.align	16, 0x90
	.type	edge_draw,@function
edge_draw:                              # @edge_draw
.Lfunc_begin11:
	.loc	2 709 0                 # susan.c:709:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp507:
	.cfi_def_cfa_offset 16
.Ltmp508:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp509:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
.Ltmp510:
	.cfi_offset %rbx, -56
.Ltmp511:
	.cfi_offset %r12, -48
.Ltmp512:
	.cfi_offset %r13, -40
.Ltmp513:
	.cfi_offset %r14, -32
.Ltmp514:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: edge_draw:in <- RDI
	#DEBUG_VALUE: edge_draw:mid <- RSI
	#DEBUG_VALUE: edge_draw:x_size <- EDX
	#DEBUG_VALUE: edge_draw:y_size <- ECX
	#DEBUG_VALUE: edge_draw:drawing_mode <- R8D
.Ltmp515:
	#DEBUG_VALUE: edge_draw:midp <- RSI
	movl	%r8d, %ebx
.Ltmp516:
	#DEBUG_VALUE: edge_draw:drawing_mode <- EBX
	movl	%ecx, %r12d
.Ltmp517:
	#DEBUG_VALUE: edge_draw:y_size <- R12D
	movl	%edx, -64(%rbp)         # 4-byte Spill
.Ltmp518:
	#DEBUG_VALUE: edge_draw:x_size <- [RBP+-64]
	movq	%rsi, -48(%rbp)         # 8-byte Spill
.Ltmp519:
	#DEBUG_VALUE: edge_draw:midp <- [RBP+-48]
	#DEBUG_VALUE: edge_draw:mid <- [RBP+-48]
	movq	%rdi, %r15
.Ltmp520:
	#DEBUG_VALUE: edge_draw:in <- R15
	movabsq	$4741285338494877574, %rdi # imm = 0x41CC6DE51BC13F86
	xorl	%r13d, %r13d
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$19, %edi
	movl	$2, %esi
	callq	_KPrepRTable
	movl	$1, %edi
	callq	_KWork
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	movl	$9, %r14d
	movl	$9, %edi
	movl	$9, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$11, %edi
	movl	$3, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	.loc	2 713 7 prologue_end    # susan.c:713:7
.Ltmp521:
	testl	%ebx, %ebx
	movabsq	$1632331352137955187, %rbx # imm = 0x16A734B75FEA7773
.Ltmp522:
	.loc	2 713 7 is_stmt 0       # susan.c:713:7
	je	.LBB11_2
.Ltmp523:
# BB#1:                                 # %entry.if.end18_crit_edge
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:mid <- [RBP+-48]
	#DEBUG_VALUE: edge_draw:x_size <- [RBP+-64]
	#DEBUG_VALUE: edge_draw:y_size <- R12D
	.loc	2 731 15 is_stmt 1      # susan.c:731:15
	imull	-64(%rbp), %r12d        # 4-byte Folded Reload
.Ltmp524:
	movl	%r12d, -52(%rbp)        # 4-byte Spill
	jmp	.LBB11_8
.Ltmp525:
.LBB11_2:                               # %if.then
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:mid <- [RBP+-48]
	#DEBUG_VALUE: edge_draw:x_size <- [RBP+-64]
	#DEBUG_VALUE: edge_draw:y_size <- R12D
	movabsq	$-9216291908556765195, %rbx # imm = 0x80192756D42AC7F5
	movl	$11, %edi
	callq	_KPushCDep
.Ltmp526:
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$7, %edi
	callq	_KInduction
	callq	_KPopCDep
	movl	$1, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	-64(%rbp), %eax         # 4-byte Reload
.Ltmp527:
	#DEBUG_VALUE: edge_draw:x_size <- EAX
	.loc	2 717 17                # susan.c:717:17
	imull	%eax, %r12d
.Ltmp528:
	movl	%r12d, -52(%rbp)        # 4-byte Spill
	.loc	2 719 15                # susan.c:719:15
.Ltmp529:
	cltq
.Ltmp530:
	.loc	2 720 48                # susan.c:720:48
	movq	%rax, -72(%rbp)         # 8-byte Spill
	leal	-2(%rax), %eax
	.loc	2 720 43 is_stmt 0      # susan.c:720:43
	cltq
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movabsq	$2124515623799661988, %r12 # imm = 0x1D7BCBB42458A5A4
	xorl	%ebx, %ebx
	jmp	.LBB11_3
.Ltmp531:
	.align	16, 0x90
.LBB11_6:                               # %if.end
                                        #   in Loop: Header=BB11_3 Depth=1
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:mid <- [RBP+-48]
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$12, %r13d
	movl	$12, %edi
	callq	_KPushCDep
	movl	$10, %r14d
	movl	$10, %edi
	movl	$8, %esi
	xorl	%edx, %edx
	movl	$12, %ecx
	xorl	%r8d, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r12, %rdi
	callq	_KExitRegion
	movq	-64(%rbp), %rbx         # 8-byte Reload
	incq	%rbx
.Ltmp532:
.LBB11_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:mid <- [RBP+-48]
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$11, %edi
	callq	_KPushCDep
	movl	$8, %edi
	movl	$11, %edx
	movl	%r14d, %esi
	movl	%r13d, %ecx
	callq	_KPhi2To1
	movl	$3, %edi
	callq	_KWork
	movl	$8, %edi
	movl	$8, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$1, 16(%rsp)
	movl	$7, 8(%rsp)
	movl	$3, (%rsp)
	movl	$12, %edi
	movl	$1, %esi
	movl	$3, %edx
	movl	$2, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	callq	_KTimestamp4
	movl	$8, %edi
	movl	$12, %esi
	callq	_KPhiAddCond
	callq	_KPopCDep
	.loc	2 717 5 is_stmt 1       # susan.c:717:5
	cmpl	-52(%rbp), %ebx         # 4-byte Folded Reload
	jge	.LBB11_7
.Ltmp533:
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB11_3 Depth=1
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:mid <- [RBP+-48]
	#DEBUG_VALUE: edge_draw:i <- 0
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rbx, -64(%rbp)         # 8-byte Spill
	leaq	(%rax,%rbx), %rbx
	movl	$2, %esi
	movq	%r12, %rdi
	callq	_KEnterRegion
	movl	$12, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	movl	$4, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 718 11                # susan.c:718:11
.Ltmp534:
	movzbl	(%rbx), %r14d
	movl	$17, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$4, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	cmpl	$7, %r14d
	ja	.LBB11_6
.Ltmp535:
# BB#5:                                 # %if.then4
                                        #   in Loop: Header=BB11_3 Depth=1
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:mid <- [RBP+-48]
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$17, %edi
	callq	_KPushCDep
	movl	$16, %edi
	callq	_KWork
	.loc	2 719 21                # susan.c:719:21
.Ltmp536:
	subq	-48(%rbp), %rbx         # 8-byte Folded Reload
	.loc	2 719 15 is_stmt 0      # susan.c:719:15
	subq	-72(%rbp), %rbx         # 8-byte Folded Reload
	leaq	-1(%r15,%rbx), %rdi
.Ltmp537:
	#DEBUG_VALUE: edge_draw:inp <- RDI
	.loc	2 720 10 is_stmt 1      # susan.c:720:10
	leaq	(%r15,%rbx), %r14
.Ltmp538:
	#DEBUG_VALUE: edge_draw:inp <- R14
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 720 9 is_stmt 0       # susan.c:720:9
	movb	$-1, -1(%r15,%rbx)
	.loc	2 720 22                # susan.c:720:22
	leaq	1(%r15,%rbx), %r13
.Ltmp539:
	#DEBUG_VALUE: edge_draw:inp <- R13
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KStoreConst
	.loc	2 720 21                # susan.c:720:21
	movb	$-1, (%r15,%rbx)
	movl	$1, %esi
	movq	%r13, %rdi
	callq	_KStoreConst
	.loc	2 720 33                # susan.c:720:33
	movb	$-1, 1(%r15,%rbx)
	movq	-80(%rbp), %r12         # 8-byte Reload
	.loc	2 720 43                # susan.c:720:43
	leaq	1(%rbx,%r12), %rbx
	leaq	(%r15,%rbx), %rdi
.Ltmp540:
	#DEBUG_VALUE: edge_draw:inp <- RDI
	.loc	2 721 10 is_stmt 1      # susan.c:721:10
	leaq	1(%r15,%rbx), %r14
.Ltmp541:
	#DEBUG_VALUE: edge_draw:inp <- R14
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 721 9 is_stmt 0       # susan.c:721:9
	movb	$-1, (%r15,%rbx)
	.loc	2 721 22                # susan.c:721:22
	leaq	2(%r15,%rbx), %r13
.Ltmp542:
	#DEBUG_VALUE: edge_draw:inp <- R13
	movl	$5, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	movl	$1, %esi
	movq	%r13, %rdi
	callq	_KStoreConst
	.loc	2 721 33                # susan.c:721:33
	movb	$-1, 2(%r15,%rbx)
	.loc	2 721 43                # susan.c:721:43
	leaq	2(%r12,%rbx), %rbx
	movabsq	$2124515623799661988, %r12 # imm = 0x1D7BCBB42458A5A4
	leaq	(%r15,%rbx), %rdi
.Ltmp543:
	#DEBUG_VALUE: edge_draw:inp <- RDI
	.loc	2 722 10 is_stmt 1      # susan.c:722:10
	leaq	1(%r15,%rbx), %r14
.Ltmp544:
	#DEBUG_VALUE: edge_draw:inp <- R14
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 722 9 is_stmt 0       # susan.c:722:9
	movb	$-1, (%r15,%rbx)
	.loc	2 722 22                # susan.c:722:22
	leaq	2(%r15,%rbx), %r13
.Ltmp545:
	#DEBUG_VALUE: edge_draw:inp <- R13
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KStoreConst
	.loc	2 722 21                # susan.c:722:21
	movb	$-1, 1(%r15,%rbx)
	movl	$1, %esi
	movq	%r13, %rdi
	callq	_KStoreConst
	.loc	2 722 33                # susan.c:722:33
	movb	$-1, 2(%r15,%rbx)
	callq	_KPopCDep
	jmp	.LBB11_6
.Ltmp546:
.LBB11_7:                               # %for.cond.pre_exit.if.end18.loopexit
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:mid <- [RBP+-48]
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$1, %esi
	movabsq	$-9216291908556765195, %rdi # imm = 0x80192756D42AC7F5
	callq	_KExitRegion
	movl	$11, %edi
	callq	_KPushCDep
	callq	_KPopCDep
	movabsq	$1632331352137955187, %rbx # imm = 0x16A734B75FEA7773
.Ltmp547:
.LBB11_8:                               # %if.end18
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$13, %edi
	callq	_KInduction
	movl	$1, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$9, %r13d
	xorl	%r12d, %r12d
	movabsq	$2692774874239681455, %r14 # imm = 0x255EA87B2F2743AF
	xorl	%ebx, %ebx
	jmp	.LBB11_9
.Ltmp548:
	.align	16, 0x90
.LBB11_12:                              # %if.end32
                                        #   in Loop: Header=BB11_9 Depth=1
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$16, %ebx
	movl	$16, %edi
	callq	_KPushCDep
	movl	$15, %r13d
	movl	$15, %edi
	movl	$14, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	xorl	%r8d, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KExitRegion
	incq	%r12
.Ltmp549:
.LBB11_9:                               # %for.cond19
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$14, %edi
	movl	%r13d, %esi
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$3, %edi
	callq	_KWork
	movl	$14, %edi
	movl	$14, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$1, (%rsp)
	movl	$16, %edi
	movl	$1, %esi
	movl	$3, %edx
	movl	$2, %ecx
	movl	$3, %r8d
	movl	$13, %r9d
	callq	_KTimestamp3
	movl	$14, %edi
	movl	$16, %esi
	callq	_KPhiAddCond
	.loc	2 731 3 is_stmt 1       # susan.c:731:3
.Ltmp550:
	cmpl	-52(%rbp), %r12d        # 4-byte Folded Reload
	jge	.LBB11_13
.Ltmp551:
# BB#10:                                # %for.body23
                                        #   in Loop: Header=BB11_9 Depth=1
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:i <- 0
	movq	-48(%rbp), %rax         # 8-byte Reload
	leaq	(%rax,%r12), %rbx
	movl	$2, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$16, %edi
	callq	_KPushCDep
	movl	$6, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	movl	$5, %edi
	callq	_KWork
	.loc	2 732 9                 # susan.c:732:9
.Ltmp552:
	movzbl	(%rbx), %r13d
	movl	$18, %edi
	movl	$16, %esi
	movl	$1, %edx
	movl	$6, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	cmpl	$7, %r13d
	ja	.LBB11_12
.Ltmp553:
# BB#11:                                # %if.then27
                                        #   in Loop: Header=BB11_9 Depth=1
	#DEBUG_VALUE: edge_draw:in <- R15
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$18, %edi
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	.loc	2 733 15                # susan.c:733:15
.Ltmp554:
	subq	-48(%rbp), %rbx         # 8-byte Folded Reload
	.loc	2 733 9 is_stmt 0       # susan.c:733:9
	leaq	(%r15,%rbx), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 733 7                 # susan.c:733:7
	movb	$0, (%r15,%rbx)
	callq	_KPopCDep
	jmp	.LBB11_12
.Ltmp555:
.LBB11_13:                              # %for.cond19.pre_exit.for.end36
	#DEBUG_VALUE: edge_draw:i <- 0
	movl	$1, %esi
	movabsq	$1632331352137955187, %rdi # imm = 0x16A734B75FEA7773
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$4741285338494877574, %rdi # imm = 0x41CC6DE51BC13F86
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp556:
	.size	edge_draw, .Ltmp556-edge_draw
.Lfunc_end11:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI12_0:
	.quad	4604480259023595110     # double 0.69999999999999996
	.text
	.globl	susan_thin
	.align	16, 0x90
	.type	susan_thin,@function
susan_thin:                             # @susan_thin
.Lfunc_begin12:
	.loc	2 740 0 is_stmt 1       # susan.c:740:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp557:
	.cfi_def_cfa_offset 16
.Ltmp558:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp559:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$680, %rsp              # imm = 0x2A8
.Ltmp560:
	.cfi_offset %rbx, -56
.Ltmp561:
	.cfi_offset %r12, -48
.Ltmp562:
	.cfi_offset %r13, -40
.Ltmp563:
	.cfi_offset %r14, -32
.Ltmp564:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: susan_thin:r <- RDI
	#DEBUG_VALUE: susan_thin:mid <- RSI
	#DEBUG_VALUE: susan_thin:x_size <- EDX
	#DEBUG_VALUE: susan_thin:y_size <- ECX
	movl	%ecx, %ebx
.Ltmp565:
	#DEBUG_VALUE: susan_thin:y_size <- EBX
	movl	%edx, %r15d
.Ltmp566:
	#DEBUG_VALUE: susan_thin:x_size <- R15D
	movq	%r15, -152(%rbp)        # 8-byte Spill
	movq	%rsi, -176(%rbp)        # 8-byte Spill
.Ltmp567:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movq	%rdi, -224(%rbp)        # 8-byte Spill
.Ltmp568:
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	movabsq	$-2660891841875396626, %rdi # imm = 0xDB129CF7C34837EE
	movabsq	$5475059367311067671, %r14 # imm = 0x4BFB517C88C04A17
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$301, %edi              # imm = 0x12D
	movl	$8, %esi
	callq	_KPrepRTable
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
.Ltmp569:
	#DEBUG_VALUE: susan_thin:i <- 4
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	.loc	2 749 14 prologue_end   # susan.c:749:14
.Ltmp570:
	addl	$-4, %ebx
.Ltmp571:
	movl	%ebx, -252(%rbp)        # 4-byte Spill
	.loc	2 751 16                # susan.c:751:16
.Ltmp572:
	leal	-4(%r15), %eax
	.loc	2 761 16                # susan.c:761:16
.Ltmp573:
	movl	%eax, -212(%rbp)        # 4-byte Spill
	movslq	%r15d, %rax
	.loc	2 783 37                # susan.c:783:37
.Ltmp574:
	movq	%rax, -240(%rbp)        # 8-byte Spill
.Ltmp575:
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	movl	$4, %r13d
	movl	$0, %r14d
	movl	$0, %ebx
                                        # implicit-def: EAX
	movq	%rax, -120(%rbp)        # 8-byte Spill
	xorl	%r12d, %r12d
                                        # implicit-def: EAX
	movq	%rax, -128(%rbp)        # 8-byte Spill
	xorl	%r15d, %r15d
	jmp	.LBB12_1
.Ltmp576:
	.align	16, 0x90
.LBB12_97:                              # %for.cond1.pre_exit.for.inc835
                                        #   in Loop: Header=BB12_1 Depth=1
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$1, %esi
	movabsq	$8880739456499723873, %r13 # imm = 0x7B3EB97BC7762E61
	movq	%r13, %rdi
	callq	_KExitRegion
	movl	$22, %ebx
	movl	$22, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-168(%rbp), %r13        # 8-byte Reload
	.loc	2 749 23                # susan.c:749:23
	incl	%r13d
.Ltmp577:
	#DEBUG_VALUE: susan_thin:i <- R13D
	movl	$219, %r15d
	movl	$219, %edi
	movl	$22, %esi
	movl	$1, %edx
	movl	$220, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$591741925414604618, %rdi # imm = 0x8364A255F0B0F4A
	callq	_KExitRegion
	movl	$218, %r12d
	movl	$216, %r14d
.Ltmp578:
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
                                        #       Child Loop BB12_30 Depth 3
                                        #         Child Loop BB12_32 Depth 4
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	movq	%r13, -168(%rbp)        # 8-byte Spill
	movl	$23, %edi
	movl	%r15d, %esi
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$217, %edi
	movl	%r12d, %esi
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$215, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$22, %edi
	movl	$23, %esi
	movl	$1, %edx
	movl	$2, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$23, %edi
	movl	$23, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$217, %edi
	movl	$217, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$217, %edi
	movl	$22, %esi
	callq	_KPhiAddCond
	movl	$215, %edi
	movl	$215, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$23, %edi
	movl	$22, %esi
	callq	_KPhiAddCond
	movl	$215, %edi
	movl	$22, %esi
	callq	_KPhiAddCond
	.loc	2 749 3 is_stmt 0       # susan.c:749:3
	cmpl	-252(%rbp), %r13d       # 4-byte Folded Reload
	jge	.LBB12_98
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	movl	$2, %esi
	movabsq	$591741925414604618, %rdi # imm = 0x8364A255F0B0F4A
	callq	_KEnterRegion
	movl	$22, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_thin:j <- 4
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$8880739456499723873, %rdi # imm = 0x7B3EB97BC7762E61
	callq	_KEnterRegion
	movl	$4, %r12d
	movl	$23, -88(%rbp)          # 4-byte Folded Spill
	movl	$217, %r15d
	movl	$215, %r14d
	xorl	%r13d, %r13d
	xorl	%ebx, %ebx
	jmp	.LBB12_3
	.align	16, 0x90
.LBB12_96:                              # %for.inc832
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$24, %r13d
	movl	$24, %edi
	callq	_KPushCDep
	movl	-112(%rbp), %eax        # 4-byte Reload
	movl	%eax, 16(%rsp)
	movl	%r14d, 8(%rsp)
	movl	%r12d, (%rsp)
	movl	$225, %edi
	movl	$6, %edx
	movl	$24, %ecx
	movl	$249, %r8d
	xorl	%eax, %eax
	movl	-88(%rbp), %esi         # 4-byte Reload
	movl	%ebx, %r9d
	callq	_KPhi
	movl	%r14d, 8(%rsp)
	movl	%r12d, (%rsp)
	movl	$223, -88(%rbp)         # 4-byte Folded Spill
	movl	$223, %edi
	movl	$5, %edx
	movl	$24, %ecx
	movl	$249, %r8d
	xorl	%eax, %eax
	movl	%r15d, %esi
	movl	%ebx, %r9d
	callq	_KPhi
	movl	$222, %r15d
	movl	$222, %edi
	movl	$24, %edx
	movl	$249, %ecx
	movl	-104(%rbp), %esi        # 4-byte Reload
	callq	_KPhi2To1
	movl	$221, %r14d
	movl	$221, %edi
	movl	$24, %edx
	movl	$249, %ecx
	movl	-96(%rbp), %esi         # 4-byte Reload
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movq	-144(%rbp), %r12        # 8-byte Reload
	.loc	2 751 25 is_stmt 1      # susan.c:751:25
.Ltmp579:
	incl	%r12d
.Ltmp580:
	#DEBUG_VALUE: susan_thin:j <- R12D
	movl	$224, %ebx
	movl	$224, %edi
	movl	$24, %esi
	movl	$1, %edx
	movl	$225, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$223, %edi
	movl	$223, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$222, %edi
	movl	$222, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$221, %edi
	movl	$221, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-4845568851963120398, %rdi # imm = 0xBCC114CD540A74F2
	callq	_KExitRegion
.Ltmp581:
.LBB12_3:                               # %for.cond1
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_30 Depth 3
                                        #         Child Loop BB12_32 Depth 4
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$22, %edi
	callq	_KPushCDep
	movl	$25, %edi
	movl	$22, %edx
	movl	%ebx, %esi
	movl	%r13d, %ecx
	callq	_KPhi2To1
	movl	$220, %edi
	movl	$22, %edx
	movl	-88(%rbp), %esi         # 4-byte Reload
	movl	%r13d, %ecx
	callq	_KPhi2To1
	movl	$218, %edi
	movl	$22, %edx
	movl	%r15d, %esi
	movl	%r13d, %ecx
	callq	_KPhi2To1
	movl	$216, %edi
	movl	$22, %edx
	movl	%r14d, %esi
	movl	%r13d, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$2, (%rsp)
	movl	$24, %edi
	movl	$22, %esi
	movl	$2, %edx
	movl	$25, %ecx
	movl	$1, %r8d
	movl	$1, %r9d
	callq	_KTimestamp3
	movl	$25, %edi
	movl	$25, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$25, %edi
	movl	$24, %esi
	callq	_KPhiAddCond
	movl	$220, %edi
	movl	$24, %esi
	callq	_KPhiAddCond
	movl	$218, %edi
	movl	$24, %esi
	callq	_KPhiAddCond
	movl	$216, %edi
	movl	$24, %esi
	callq	_KPhiAddCond
	movl	$220, %edi
	movl	$220, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$218, %edi
	movl	$218, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$216, %edi
	movl	$216, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 751 5 is_stmt 0       # susan.c:751:5
	cmpl	-212(%rbp), %r12d       # 4-byte Folded Reload
	jge	.LBB12_97
# BB#4:                                 # %for.body4
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$2, %esi
	movabsq	$-4845568851963120398, %rdi # imm = 0xBCC114CD540A74F2
	callq	_KEnterRegion
	movl	$24, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	movq	-168(%rbp), %r13        # 8-byte Reload
	.loc	2 752 15 is_stmt 1      # susan.c:752:15
.Ltmp582:
	movl	%r13d, %eax
	movq	-152(%rbp), %rcx        # 8-byte Reload
.Ltmp583:
	#DEBUG_VALUE: susan_thin:x_size <- undef
	imull	%ecx, %eax
.Ltmp584:
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	addl	%r12d, %eax
	.loc	2 752 11 is_stmt 0      # susan.c:752:11
	movslq	%eax, %r15
	movq	-176(%rbp), %rbx        # 8-byte Reload
.Ltmp585:
	#DEBUG_VALUE: susan_thin:mid <- RBX
	leaq	(%rbx,%r15), %rdi
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movl	$3, %esi
	movl	$4, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp586:
	.loc	2 752 11                # susan.c:752:11
	movzbl	(%rbx,%r15), %r14d
	movl	$249, %edi
	movl	$24, %esi
	movl	$1, %edx
	movl	$3, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	cmpl	$7, %r14d
	ja	.LBB12_5
.Ltmp587:
# BB#6:                                 # %if.then
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- RBX
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$249, %edi
	callq	_KPushCDep
	movl	$58, %edi
	callq	_KWork
	movq	-224(%rbp), %r14        # 8-byte Reload
.Ltmp588:
	#DEBUG_VALUE: susan_thin:r <- R14
	.loc	2 753 18 is_stmt 1      # susan.c:753:18
	leaq	(%r14,%r15), %rdi
	movl	$5, %esi
	movl	$6, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movb	(%r14,%r15), %al
	movq	%r15, -104(%rbp)        # 8-byte Spill
	.loc	2 756 19                # susan.c:756:19
	movb	%al, -225(%rbp)         # 1-byte Spill
.Ltmp589:
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	leal	-1(%r13), %eax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	%rbx, %r14
.Ltmp590:
	#DEBUG_VALUE: susan_thin:mid <- R14
	.loc	2 756 18 is_stmt 0      # susan.c:756:18
	movl	%eax, %r13d
	movq	-152(%rbp), %rax        # 8-byte Reload
	imull	%eax, %r13d
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	.loc	2 756 12                # susan.c:756:12
	movslq	%r13d, %rax
	movslq	%r12d, %rbx
	movq	%r12, -144(%rbp)        # 8-byte Spill
	addq	%rax, %rbx
	leaq	-1(%r14,%rbx), %rdi
.Ltmp591:
	#DEBUG_VALUE: susan_thin:mp <- RDI
	movl	$7, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 758 14 is_stmt 1      # susan.c:758:14
	movzbl	-1(%r14,%rbx), %r12d
	.loc	2 759 16                # susan.c:759:16
	leaq	(%r14,%rbx), %rdi
.Ltmp592:
	movl	$8, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 759 14 is_stmt 0      # susan.c:759:14
	movzbl	(%r14,%rbx), %eax
	cmpl	$8, %eax
	sbbl	%r15d, %r15d
	andl	$1, %r15d
	.loc	2 758 14 is_stmt 1      # susan.c:758:14
	cmpl	$8, %r12d
	.loc	2 758 13 is_stmt 0      # susan.c:758:13
	adcl	$0, %r15d
	.loc	2 760 16 is_stmt 1      # susan.c:760:16
	leaq	1(%r14,%rbx), %rdi
	movl	$9, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 760 14 is_stmt 0      # susan.c:760:14
	movzbl	1(%r14,%rbx), %eax
	cmpl	$8, %eax
	.loc	2 758 13 is_stmt 1      # susan.c:758:13
	adcl	$0, %r15d
	movq	-240(%rbp), %r12        # 8-byte Reload
	.loc	2 761 16                # susan.c:761:16
	leaq	-1(%r12,%rbx), %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$10, %esi
	movl	$11, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 761 14 is_stmt 0      # susan.c:761:14
	movzbl	(%r14,%rbx), %eax
	cmpl	$8, %eax
	.loc	2 758 13 is_stmt 1      # susan.c:758:13
	adcl	$0, %r15d
	.loc	2 762 16                # susan.c:762:16
	leaq	2(%r14,%rbx), %rdi
	movl	$12, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 762 14 is_stmt 0      # susan.c:762:14
	movzbl	2(%r14,%rbx), %eax
	cmpl	$8, %eax
	.loc	2 758 13 is_stmt 1      # susan.c:758:13
	adcl	$0, %r15d
	.loc	2 763 16                # susan.c:763:16
	addq	%r12, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$13, %esi
	movl	$14, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 763 14 is_stmt 0      # susan.c:763:14
	movzbl	(%r14,%rbx), %eax
	cmpl	$8, %eax
	.loc	2 758 13 is_stmt 1      # susan.c:758:13
	adcl	$0, %r15d
	.loc	2 764 16                # susan.c:764:16
	leaq	1(%r14,%rbx), %rdi
	movl	$15, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 764 14 is_stmt 0      # susan.c:764:14
	movzbl	1(%r14,%rbx), %eax
	cmpl	$8, %eax
	.loc	2 758 13 is_stmt 1      # susan.c:758:13
	adcl	$0, %r15d
	.loc	2 765 16                # susan.c:765:16
	leaq	2(%r14,%rbx), %rdi
	movl	$16, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 765 14 is_stmt 0      # susan.c:765:14
	movzbl	2(%r14,%rbx), %eax
.Ltmp593:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	cmpl	$8, %eax
	sbbl	%ebx, %ebx
	andl	$1, %ebx
	movl	$3, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$4, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$6, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$7, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$8, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$9, 8(%rsp)
	movl	$7, (%rsp)
	movl	$282, %edi              # imm = 0x11A
	movl	$10, %esi
	movl	$24, %edx
	movl	$10, %ecx
	movl	$3, %r8d
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 769 13 is_stmt 1      # susan.c:769:13
	addl	%r15d, %ebx
	movq	-184(%rbp), %r14        # 8-byte Reload
	jne	.LBB12_8
# BB#7:                                 # %if.then71
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$282, %edi              # imm = 0x11A
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KStoreConst
	.loc	2 770 11                # susan.c:770:11
.Ltmp594:
	movb	$100, (%r14)
	callq	_KPopCDep
.Ltmp595:
.LBB12_8:                               # %if.end
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$249, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$3, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$4, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$6, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$7, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$8, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$9, 8(%rsp)
	movl	$7, (%rsp)
	movl	$250, %edi
	movl	$10, %esi
	movl	$24, %edx
	movl	$10, %ecx
	movl	$3, %r8d
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 776 14                # susan.c:776:14
	cmpl	$1, %ebx
	jne	.LBB12_9
# BB#10:                                # %land.lhs.true
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$218, -96(%rbp)         # 4-byte Folded Spill
	movl	$216, -88(%rbp)         # 4-byte Folded Spill
	movl	$25, -208(%rbp)         # 4-byte Folded Spill
	movl	$220, -196(%rbp)        # 4-byte Folded Spill
	movl	$250, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	movl	$17, %esi
	movl	$18, %edx
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	movzbl	(%r14), %r15d
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	xorl	%r12d, %r12d
	movl	$228, %edi
	movl	$11, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	$5, %r15d
	ja	.LBB12_11
# BB#12:                                # %if.then85
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	%ebx, -192(%rbp)        # 4-byte Spill
	movl	$228, %edi
	callq	_KPushCDep
	movl	$87, %edi
	callq	_KWork
	movq	-144(%rbp), %rax        # 8-byte Reload
	.loc	2 783 18                # susan.c:783:18
.Ltmp596:
	addl	%eax, %r13d
	.loc	2 783 16 is_stmt 0      # susan.c:783:16
	movslq	%r13d, %rbx
	movq	%rbx, -88(%rbp)         # 8-byte Spill
	movq	-224(%rbp), %r15        # 8-byte Reload
.Ltmp597:
	#DEBUG_VALUE: susan_thin:r <- R15
	leaq	-1(%r15,%rbx), %rdi
	movl	$19, %esi
	movl	$20, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	-1(%r15,%rbx), %r14d
	movl	$0, 152(%rsp)
	movl	$19, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	movl	$21, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$21, %edi
	movl	$4, %edx
	leaq	-80(%rbp), %rax
	movq	%rax, %rsi
	callq	_KStore
	.loc	2 783 11                # susan.c:783:11
	movl	%r14d, -80(%rbp)
	.loc	2 783 42                # susan.c:783:42
	leaq	(%r15,%rbx), %rdi
	movl	$26, %esi
	movl	$27, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	(%r15,%rbx), %r14d
	movl	$0, 152(%rsp)
	movl	$26, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	movl	$28, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$28, %edi
	movl	$4, %edx
	.loc	2 783 37                # susan.c:783:37
	leaq	-76(%rbp), %rax
	movq	%rax, %rsi
	callq	_KStore
	movl	%r14d, -76(%rbp)
	.loc	2 783 66                # susan.c:783:66
	leaq	1(%r15,%rbx), %rdi
	movl	$29, %esi
	movl	$30, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	1(%r15,%rbx), %r14d
	movl	$0, 152(%rsp)
	movl	$29, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	movl	$31, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$31, %edi
	movl	$4, %edx
	.loc	2 783 61                # susan.c:783:61
	leaq	-72(%rbp), %rax
	movq	%rax, %rsi
	callq	_KStore
	movl	%r14d, -72(%rbp)
	movq	-104(%rbp), %rbx        # 8-byte Reload
	.loc	2 784 16 is_stmt 1      # susan.c:784:16
	leaq	-1(%r15,%rbx), %rdi
	movl	$32, %esi
	movl	$33, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	-1(%r15,%rbx), %r14d
	movl	$0, 152(%rsp)
	movl	$32, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	movl	$34, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$34, %edi
	movl	$4, %edx
	.loc	2 784 11 is_stmt 0      # susan.c:784:11
	leaq	-68(%rbp), %r12
	movq	%r12, %rsi
	callq	_KStore
	movl	%r14d, -68(%rbp)
	movl	$4, %esi
	.loc	2 784 37                # susan.c:784:37
	leaq	-64(%rbp), %rdi
	callq	_KStoreConst
	movl	$0, -64(%rbp)
	.loc	2 784 66                # susan.c:784:66
	leaq	1(%r15,%rbx), %rdi
	movl	$35, %esi
	movl	$36, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	1(%r15,%rbx), %r14d
	movl	$0, 152(%rsp)
	movl	$35, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	movl	$37, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$37, %edi
	movl	$4, %edx
	.loc	2 784 61                # susan.c:784:61
	leaq	-60(%rbp), %rax
	movq	%rax, %rsi
	callq	_KStore
	movl	%r14d, -60(%rbp)
	.loc	2 785 19 is_stmt 1      # susan.c:785:19
	movq	-168(%rbp), %rax        # 8-byte Reload
	leal	1(%rax), %eax
	.loc	2 785 18 is_stmt 0      # susan.c:785:18
	movq	-152(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	.loc	2 785 16                # susan.c:785:16
	movslq	%eax, %r13
	leaq	-1(%r15,%r13), %rdi
	movl	$38, %esi
	movl	$39, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	-1(%r15,%r13), %r14d
	movl	$0, 152(%rsp)
	movl	$38, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	movl	$40, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$40, %edi
	movl	$4, %edx
	.loc	2 785 11                # susan.c:785:11
	leaq	-56(%rbp), %r12
	movq	%r12, %rsi
	callq	_KStore
	movl	%r14d, -56(%rbp)
	.loc	2 785 42                # susan.c:785:42
	leaq	(%r15,%r13), %rdi
	movl	$41, %esi
	movl	$42, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	(%r15,%r13), %r14d
	movl	$0, 152(%rsp)
	movl	$41, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	movl	$43, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$43, %edi
	movl	$4, %edx
	.loc	2 785 37                # susan.c:785:37
	leaq	-52(%rbp), %rax
	movq	%rax, %rsi
	callq	_KStore
	movl	%r14d, -52(%rbp)
	.loc	2 785 66                # susan.c:785:66
	leaq	1(%r15,%r13), %rdi
	movl	$44, %esi
	movl	$45, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	1(%r15,%r13), %ebx
.Ltmp598:
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	movq	-88(%rbp), %r15         # 8-byte Reload
	movl	$0, 152(%rsp)
	movl	$44, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$7, (%rsp)
	movl	$46, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$11, %ecx
	movl	$3, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$46, %edi
	movl	$4, %edx
	.loc	2 785 61                # susan.c:785:61
	leaq	-48(%rbp), %r14
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -48(%rbp)
	movq	-176(%rbp), %r14        # 8-byte Reload
.Ltmp599:
	#DEBUG_VALUE: susan_thin:mid <- R14
	.loc	2 787 15 is_stmt 1      # susan.c:787:15
	leaq	-1(%r14,%r15), %rdi
	movl	$47, %esi
	movl	$48, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp600:
	.loc	2 787 15 is_stmt 0      # susan.c:787:15
	movzbl	-1(%r14,%r15), %ebx
	movl	$1, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$2, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$5, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$6, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$7, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$8, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$9, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$10, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$11, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$11, 8(%rsp)
	movl	$7, (%rsp)
	movl	$283, %edi              # imm = 0x11B
	movl	$12, %esi
	movl	$24, %edx
	movl	$12, %ecx
	movl	$3, %r8d
	movl	$12, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$283, %edi              # imm = 0x11B
	callq	_KPushCDep
	cmpl	$7, %ebx
	ja	.LBB12_14
.Ltmp601:
# BB#13:                                # %if.then156
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$38, %edi
	callq	_KWork
	movl	$4, %esi
	leaq	-80(%rbp), %r14
	movq	%r14, %rdi
	callq	_KStoreConst
	.loc	2 787 49 discriminator 1 # susan.c:787:49
.Ltmp602:
	movl	$0, -80(%rbp)
	movl	$4, %esi
.Ltmp603:
	.loc	2 783 37 is_stmt 1      # susan.c:783:37
	leaq	-76(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 787 57                # susan.c:787:57
.Ltmp604:
	movl	$0, -76(%rbp)
	movl	$4, %esi
.Ltmp605:
	.loc	2 784 11                # susan.c:784:11
	leaq	-68(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 787 65                # susan.c:787:65
.Ltmp606:
	movl	$0, -68(%rbp)
	movl	$49, %esi
	movl	$4, %edx
.Ltmp607:
	.loc	2 783 61                # susan.c:783:61
	leaq	-72(%rbp), %r15
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 787 73                # susan.c:787:73
.Ltmp608:
	movl	-72(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$2, 168(%rsp)
	movl	$49, 160(%rsp)
	movl	$3, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$4, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$12, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$7, (%rsp)
	movl	$50, %edi
	movl	$13, %esi
	movl	$24, %edx
	movl	$14, %ecx
	movl	$3, %r8d
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$50, %edi
	movl	$4, %edx
	movq	%r15, %rsi
	callq	_KStore
	movl	%ebx, -72(%rbp)
	movl	$51, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 788 49                # susan.c:788:49
	movl	-56(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$2, 168(%rsp)
	movl	$51, 160(%rsp)
	movl	$3, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$4, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$12, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$7, (%rsp)
	movl	$52, %edi
	movl	$13, %esi
	movl	$24, %edx
	movl	$14, %ecx
	movl	$3, %r8d
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$52, %edi
	movl	$4, %edx
	movq	%r12, %rsi
	callq	_KStore
	movl	%ebx, -56(%rbp)
	movl	$53, %esi
	movl	$4, %edx
.Ltmp609:
	.loc	2 784 61                # susan.c:784:61
	leaq	-60(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 788 58                # susan.c:788:58
.Ltmp610:
	movl	-60(%rbp), %eax
	leal	(%rax,%rax,2), %r15d
	movl	$2, 168(%rsp)
	movl	$53, 160(%rsp)
	movl	$3, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$4, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$12, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$7, (%rsp)
	movl	$54, %edi
	movl	$13, %esi
	movl	$24, %edx
	movl	$14, %ecx
	movl	$3, %r8d
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$54, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r15d, -60(%rbp)
	movl	$55, %esi
	movl	$4, %edx
.Ltmp611:
	.loc	2 785 37                # susan.c:785:37
	leaq	-52(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 788 67                # susan.c:788:67
.Ltmp612:
	movl	-52(%rbp), %eax
	leal	(%rax,%rax,2), %r15d
	movl	$2, 168(%rsp)
	movl	$55, 160(%rsp)
	movl	$3, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$4, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$12, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$7, (%rsp)
	movl	$56, %edi
	movl	$13, %esi
	movl	$24, %edx
	movl	$14, %ecx
	movl	$3, %r8d
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$56, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r15d, -52(%rbp)
	movl	$57, %esi
	movl	$4, %edx
.Ltmp613:
	.loc	2 785 61                # susan.c:785:61
	leaq	-48(%rbp), %r15
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 788 76                # susan.c:788:76
.Ltmp614:
	movl	-48(%rbp), %ebx
	shll	$2, %ebx
	movl	$2, 168(%rsp)
	movl	$57, 160(%rsp)
	movl	$3, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$4, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$12, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$7, (%rsp)
	movl	$58, %edi
	movl	$13, %esi
	movl	$24, %edx
	movl	$14, %ecx
	movl	$3, %r8d
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$58, %edi
	movl	$4, %edx
	movq	%r15, %rsi
	callq	_KStore
	movl	%ebx, -48(%rbp)
	callq	_KPopCDep
	movq	%r14, %r13
	jmp	.LBB12_29
.Ltmp615:
	.align	16, 0x90
.LBB12_5:                               #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- RBX
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	%r12, -144(%rbp)        # 8-byte Spill
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
.Ltmp616:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movl	$25, -88(%rbp)          # 4-byte Folded Spill
	movl	$220, %r15d
	xorl	%r14d, %r14d
	movl	$218, -104(%rbp)        # 4-byte Folded Spill
	movl	$216, -96(%rbp)         # 4-byte Folded Spill
	xorl	%r12d, %r12d
	xorl	%ebx, %ebx
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	jmp	.LBB12_96
	.align	16, 0x90
.LBB12_9:                               #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$218, -96(%rbp)         # 4-byte Folded Spill
	movl	$216, -88(%rbp)         # 4-byte Folded Spill
	movl	$25, -208(%rbp)         # 4-byte Folded Spill
	movl	$220, -196(%rbp)        # 4-byte Folded Spill
	movl	%ebx, -192(%rbp)        # 4-byte Spill
	xorl	%r15d, %r15d
	xorl	%r12d, %r12d
	xorl	%r14d, %r14d
.LBB12_40:                              # %if.end421
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-168(%rbp), %r13        # 8-byte Reload
                                        # kill: R13D<def> R13D<kill> R13<kill> R13<def>
	xorl	%ebx, %ebx
	jmp	.LBB12_51
.LBB12_11:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	%ebx, -192(%rbp)        # 4-byte Spill
	xorl	%r14d, %r14d
	movq	-168(%rbp), %r13        # 8-byte Reload
                                        # kill: R13D<def> R13D<kill> R13<kill> R13<def>
	xorl	%ebx, %ebx
	movl	$228, %r15d
	jmp	.LBB12_51
.LBB12_14:                              # %if.else
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
.Ltmp617:
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	%r13, -96(%rbp)         # 8-byte Spill
	movq	-104(%rbp), %r13        # 8-byte Reload
	leaq	-80(%rbp), %r12
	movl	$9, %edi
	callq	_KWork
	.loc	2 789 22                # susan.c:789:22
.Ltmp618:
	leaq	(%r14,%r15), %rdi
	movl	$59, %esi
	movl	$60, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp619:
	.loc	2 789 22 is_stmt 0      # susan.c:789:22
	movzbl	(%r14,%r15), %ebx
	movl	$1, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$2, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$3, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$6, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$7, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$8, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$9, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$10, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$12, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$12, 8(%rsp)
	movl	$7, (%rsp)
	movl	$284, %edi              # imm = 0x11C
	movl	$13, %esi
	movl	$24, %edx
	movl	$13, %ecx
	movl	$3, %r8d
	movl	$13, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$284, %edi              # imm = 0x11C
	callq	_KPushCDep
	cmpl	$7, %ebx
	ja	.LBB12_16
.Ltmp620:
# BB#15:                                # %if.then178
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$38, %edi
	callq	_KWork
	movl	$4, %esi
	.loc	2 783 37 is_stmt 1      # susan.c:783:37
	leaq	-76(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 789 49 discriminator 1 # susan.c:789:49
.Ltmp621:
	movl	$0, -76(%rbp)
	movl	$4, %esi
	movq	%r12, %r13
	movq	%r13, %rdi
	callq	_KStoreConst
	.loc	2 789 57 is_stmt 0      # susan.c:789:57
	movl	$0, -80(%rbp)
	movl	$4, %esi
.Ltmp622:
	.loc	2 783 61 is_stmt 1      # susan.c:783:61
	leaq	-72(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 789 65                # susan.c:789:65
.Ltmp623:
	movl	$0, -72(%rbp)
	movl	$61, %esi
	movl	$4, %edx
.Ltmp624:
	.loc	2 784 11                # susan.c:784:11
	leaq	-68(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 789 73                # susan.c:789:73
.Ltmp625:
	movl	-68(%rbp), %r14d
	addl	%r14d, %r14d
	movl	$2, 184(%rsp)
	movl	$61, 176(%rsp)
	movl	$3, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$4, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$7, (%rsp)
	movl	$62, %edi
	movl	$14, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$3, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$62, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -68(%rbp)
	movl	$63, %esi
	movl	$4, %edx
.Ltmp626:
	.loc	2 784 61                # susan.c:784:61
	leaq	-60(%rbp), %r14
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 790 49                # susan.c:790:49
.Ltmp627:
	movl	-60(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$2, 184(%rsp)
	movl	$63, 176(%rsp)
	movl	$3, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$4, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$7, (%rsp)
	movl	$64, %edi
	movl	$14, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$3, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$64, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -60(%rbp)
	movl	$65, %esi
	movl	$4, %edx
.Ltmp628:
	.loc	2 785 11                # susan.c:785:11
	leaq	-56(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 790 58                # susan.c:790:58
.Ltmp629:
	movl	-56(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 184(%rsp)
	movl	$65, 176(%rsp)
	movl	$3, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$4, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$7, (%rsp)
	movl	$66, %edi
	movl	$14, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$3, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$66, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -56(%rbp)
	movl	$67, %esi
	movl	$4, %edx
.Ltmp630:
	.loc	2 785 61                # susan.c:785:61
	leaq	-48(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 790 67                # susan.c:790:67
.Ltmp631:
	movl	-48(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 184(%rsp)
	movl	$67, 176(%rsp)
	movl	$3, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$4, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$7, (%rsp)
	movl	$68, %edi
	movl	$14, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$3, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$68, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -48(%rbp)
	movl	$69, %esi
	movl	$4, %edx
.Ltmp632:
	.loc	2 785 37                # susan.c:785:37
	leaq	-52(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 790 76                # susan.c:790:76
.Ltmp633:
	movl	-52(%rbp), %r14d
	shll	$2, %r14d
	movl	$2, 184(%rsp)
	movl	$69, 176(%rsp)
	movl	$3, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$4, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$7, (%rsp)
	movl	$70, %edi
	movl	$14, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$3, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$70, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -52(%rbp)
	jmp	.LBB12_28
.Ltmp634:
.LBB12_16:                              # %if.else192
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	.loc	2 783 68                # susan.c:783:68
	incq	%r15
	movl	$10, %edi
	callq	_KWork
	.loc	2 791 22                # susan.c:791:22
.Ltmp635:
	leaq	(%r14,%r15), %rdi
	movl	$71, %esi
	movl	$72, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp636:
	.loc	2 791 22 is_stmt 0      # susan.c:791:22
	movzbl	(%r14,%r15), %r15d
	movl	$1, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$2, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$3, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$4, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$12, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$7, (%rsp)
	movl	$285, %edi              # imm = 0x11D
	movl	$14, %esi
	movl	$24, %edx
	movl	$14, %ecx
	movl	$3, %r8d
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$285, %edi              # imm = 0x11D
	callq	_KPushCDep
	cmpl	$7, %r15d
	ja	.LBB12_18
.Ltmp637:
# BB#17:                                # %if.then202
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$38, %edi
	callq	_KWork
	movl	$4, %esi
	.loc	2 783 61 is_stmt 1      # susan.c:783:61
	leaq	-72(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 791 49 discriminator 1 # susan.c:791:49
.Ltmp638:
	movl	$0, -72(%rbp)
	movl	$4, %esi
.Ltmp639:
	.loc	2 783 37                # susan.c:783:37
	leaq	-76(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 791 57                # susan.c:791:57
.Ltmp640:
	movl	$0, -76(%rbp)
	movl	$4, %esi
.Ltmp641:
	.loc	2 784 61                # susan.c:784:61
	leaq	-60(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 791 65                # susan.c:791:65
.Ltmp642:
	movl	$0, -60(%rbp)
	movl	$73, %esi
	movl	$4, %edx
	movq	%r12, %r13
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 791 73 is_stmt 0      # susan.c:791:73
	movl	-80(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$2, 200(%rsp)
	movl	$73, 192(%rsp)
	movl	$3, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$6, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$9, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$10, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$11, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$12, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$13, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$14, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$15, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$7, (%rsp)
	movl	$74, %edi
	movl	$15, %esi
	movl	$24, %edx
	movl	$16, %ecx
	movl	$3, %r8d
	movl	$16, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$74, %edi
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	movl	%ebx, -80(%rbp)
	movl	$75, %esi
	movl	$4, %edx
.Ltmp643:
	.loc	2 785 61 is_stmt 1      # susan.c:785:61
	leaq	-48(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 792 49                # susan.c:792:49
.Ltmp644:
	movl	-48(%rbp), %r14d
	addl	%r14d, %r14d
	movl	$2, 200(%rsp)
	movl	$75, 192(%rsp)
	movl	$3, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$6, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$9, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$10, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$11, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$12, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$13, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$14, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$15, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$7, (%rsp)
	movl	$76, %edi
	movl	$15, %esi
	movl	$24, %edx
	movl	$16, %ecx
	movl	$3, %r8d
	movl	$16, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$76, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -48(%rbp)
	movl	$77, %esi
	movl	$4, %edx
.Ltmp645:
	.loc	2 784 11                # susan.c:784:11
	leaq	-68(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 792 58                # susan.c:792:58
.Ltmp646:
	movl	-68(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 200(%rsp)
	movl	$77, 192(%rsp)
	movl	$3, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$6, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$9, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$10, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$11, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$12, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$13, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$14, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$15, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$7, (%rsp)
	movl	$78, %edi
	movl	$15, %esi
	movl	$24, %edx
	movl	$16, %ecx
	movl	$3, %r8d
	movl	$16, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$78, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -68(%rbp)
	movl	$79, %esi
	movl	$4, %edx
.Ltmp647:
	.loc	2 785 37                # susan.c:785:37
	leaq	-52(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 792 67                # susan.c:792:67
.Ltmp648:
	movl	-52(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 200(%rsp)
	movl	$79, 192(%rsp)
	movl	$3, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$6, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$9, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$10, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$11, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$12, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$13, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$14, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$15, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$7, (%rsp)
	movl	$80, %edi
	movl	$15, %esi
	movl	$24, %edx
	movl	$16, %ecx
	movl	$3, %r8d
	movl	$16, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$80, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -52(%rbp)
	movl	$81, %esi
	movl	$4, %edx
.Ltmp649:
	.loc	2 785 11                # susan.c:785:11
	leaq	-56(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 792 76                # susan.c:792:76
.Ltmp650:
	movl	-56(%rbp), %r14d
	shll	$2, %r14d
	movl	$2, 200(%rsp)
	movl	$81, 192(%rsp)
	movl	$3, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$6, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$9, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$10, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$11, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$12, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$13, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$14, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$15, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$7, (%rsp)
	movl	$82, %edi
	movl	$15, %esi
	movl	$24, %edx
	movl	$16, %ecx
	movl	$3, %r8d
	movl	$16, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$82, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -56(%rbp)
	jmp	.LBB12_28
.Ltmp651:
.LBB12_18:                              # %if.else216
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	.loc	2 784 18                # susan.c:784:18
	leaq	-1(%r13), %rbx
	movl	$9, %edi
	callq	_KWork
	.loc	2 793 22                # susan.c:793:22
.Ltmp652:
	leaq	(%r14,%rbx), %rdi
	movl	$83, %esi
	movl	$84, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp653:
	.loc	2 793 22 is_stmt 0      # susan.c:793:22
	movzbl	(%r14,%rbx), %r15d
	movl	$1, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$2, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$3, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$4, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$7, (%rsp)
	movl	$286, %edi              # imm = 0x11E
	movl	$15, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$3, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$286, %edi              # imm = 0x11E
	callq	_KPushCDep
	cmpl	$7, %r15d
	ja	.LBB12_20
.Ltmp654:
# BB#19:                                # %if.then225
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$38, %edi
	callq	_KWork
	movl	$4, %esi
	.loc	2 784 11 is_stmt 1      # susan.c:784:11
	leaq	-68(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 793 49 discriminator 1 # susan.c:793:49
.Ltmp655:
	movl	$0, -68(%rbp)
	movl	$4, %esi
	movq	%r12, %r13
	movq	%r13, %rdi
	callq	_KStoreConst
	.loc	2 793 57 is_stmt 0      # susan.c:793:57
	movl	$0, -80(%rbp)
	movl	$4, %esi
.Ltmp656:
	.loc	2 785 11 is_stmt 1      # susan.c:785:11
	leaq	-56(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 793 65                # susan.c:793:65
.Ltmp657:
	movl	$0, -56(%rbp)
	movl	$85, %esi
	movl	$4, %edx
.Ltmp658:
	.loc	2 783 37                # susan.c:783:37
	leaq	-76(%rbp), %r14
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 793 73                # susan.c:793:73
.Ltmp659:
	movl	-76(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$2, 216(%rsp)
	movl	$85, 208(%rsp)
	movl	$3, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$4, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$5, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$6, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$10, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$11, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$12, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$14, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$16, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$16, 8(%rsp)
	movl	$7, (%rsp)
	movl	$86, %edi
	movl	$16, %esi
	movl	$24, %edx
	movl	$17, %ecx
	movl	$3, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$86, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -76(%rbp)
	movl	$87, %esi
	movl	$4, %edx
.Ltmp660:
	.loc	2 785 37                # susan.c:785:37
	leaq	-52(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 794 49                # susan.c:794:49
.Ltmp661:
	movl	-52(%rbp), %r14d
	addl	%r14d, %r14d
	movl	$2, 216(%rsp)
	movl	$87, 208(%rsp)
	movl	$3, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$4, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$5, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$6, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$10, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$11, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$12, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$14, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$16, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$16, 8(%rsp)
	movl	$7, (%rsp)
	movl	$88, %edi
	movl	$16, %esi
	movl	$24, %edx
	movl	$17, %ecx
	movl	$3, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$88, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -52(%rbp)
	movl	$89, %esi
	movl	$4, %edx
.Ltmp662:
	.loc	2 783 61                # susan.c:783:61
	leaq	-72(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 794 58                # susan.c:794:58
.Ltmp663:
	movl	-72(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 216(%rsp)
	movl	$89, 208(%rsp)
	movl	$3, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$4, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$5, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$6, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$10, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$11, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$12, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$14, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$16, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$16, 8(%rsp)
	movl	$7, (%rsp)
	movl	$90, %edi
	movl	$16, %esi
	movl	$24, %edx
	movl	$17, %ecx
	movl	$3, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$90, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -72(%rbp)
	movl	$91, %esi
	movl	$4, %edx
.Ltmp664:
	.loc	2 785 61                # susan.c:785:61
	leaq	-48(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 794 67                # susan.c:794:67
.Ltmp665:
	movl	-48(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 216(%rsp)
	movl	$91, 208(%rsp)
	movl	$3, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$4, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$5, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$6, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$10, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$11, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$12, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$14, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$16, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$16, 8(%rsp)
	movl	$7, (%rsp)
	movl	$92, %edi
	movl	$16, %esi
	movl	$24, %edx
	movl	$17, %ecx
	movl	$3, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$92, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -48(%rbp)
	movl	$93, %esi
	movl	$4, %edx
.Ltmp666:
	.loc	2 784 61                # susan.c:784:61
	leaq	-60(%rbp), %r14
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 794 76                # susan.c:794:76
.Ltmp667:
	movl	-60(%rbp), %ebx
	shll	$2, %ebx
	movl	$2, 216(%rsp)
	movl	$93, 208(%rsp)
	movl	$3, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$4, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$5, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$6, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$10, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$11, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$12, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$14, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$16, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$16, 8(%rsp)
	movl	$7, (%rsp)
	movl	$94, %edi
	movl	$16, %esi
	movl	$24, %edx
	movl	$17, %ecx
	movl	$3, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$94, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -60(%rbp)
	jmp	.LBB12_28
.Ltmp668:
.LBB12_20:                              # %if.else239
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	.loc	2 784 68                # susan.c:784:68
	incq	%r13
	movl	$9, %edi
	callq	_KWork
	.loc	2 795 22                # susan.c:795:22
.Ltmp669:
	leaq	(%r14,%r13), %rdi
	movl	$95, %esi
	movl	$96, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp670:
	.loc	2 795 22 is_stmt 0      # susan.c:795:22
	movzbl	(%r14,%r13), %ebx
	movl	$1, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$2, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$3, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$6, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$9, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$10, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$11, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$12, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$13, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$14, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$15, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$7, (%rsp)
	movl	$287, %edi              # imm = 0x11F
	movl	$16, %esi
	movl	$24, %edx
	movl	$16, %ecx
	movl	$3, %r8d
	movl	$16, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$287, %edi              # imm = 0x11F
	callq	_KPushCDep
	cmpl	$7, %ebx
	ja	.LBB12_22
.Ltmp671:
# BB#21:                                # %if.then248
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$38, %edi
	callq	_KWork
	movl	$4, %esi
	.loc	2 784 61 is_stmt 1      # susan.c:784:61
	leaq	-60(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 795 49 discriminator 1 # susan.c:795:49
.Ltmp672:
	movl	$0, -60(%rbp)
	movl	$4, %esi
.Ltmp673:
	.loc	2 783 61                # susan.c:783:61
	leaq	-72(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 795 57                # susan.c:795:57
.Ltmp674:
	movl	$0, -72(%rbp)
	movl	$4, %esi
.Ltmp675:
	.loc	2 785 61                # susan.c:785:61
	leaq	-48(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 795 65                # susan.c:795:65
.Ltmp676:
	movl	$0, -48(%rbp)
	movl	$97, %esi
	movl	$4, %edx
.Ltmp677:
	.loc	2 783 37                # susan.c:783:37
	leaq	-76(%rbp), %r14
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 795 73                # susan.c:795:73
.Ltmp678:
	movl	-76(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$2, 232(%rsp)
	movl	$97, 224(%rsp)
	movl	$3, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$4, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$5, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$6, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$7, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$7, (%rsp)
	movl	$98, %edi
	movl	$17, %esi
	movl	$24, %edx
	movl	$18, %ecx
	movl	$3, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$98, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -76(%rbp)
	movl	$99, %esi
	movl	$4, %edx
.Ltmp679:
	.loc	2 785 37                # susan.c:785:37
	leaq	-52(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 796 49                # susan.c:796:49
.Ltmp680:
	movl	-52(%rbp), %r14d
	addl	%r14d, %r14d
	movl	$2, 232(%rsp)
	movl	$99, 224(%rsp)
	movl	$3, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$4, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$5, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$6, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$7, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$7, (%rsp)
	movl	$100, %edi
	movl	$17, %esi
	movl	$24, %edx
	movl	$18, %ecx
	movl	$3, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$100, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -52(%rbp)
	movl	$101, %esi
	movl	$4, %edx
	movq	%r12, %r13
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 796 58 is_stmt 0      # susan.c:796:58
	movl	-80(%rbp), %eax
	leal	(%rax,%rax,2), %ebx
	movl	$2, 232(%rsp)
	movl	$101, 224(%rsp)
	movl	$3, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$4, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$5, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$6, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$7, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$7, (%rsp)
	movl	$102, %edi
	movl	$17, %esi
	movl	$24, %edx
	movl	$18, %ecx
	movl	$3, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$102, %edi
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	movl	%ebx, -80(%rbp)
	movl	$103, %esi
	movl	$4, %edx
.Ltmp681:
	.loc	2 785 11 is_stmt 1      # susan.c:785:11
	leaq	-56(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 796 67                # susan.c:796:67
.Ltmp682:
	movl	-56(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 232(%rsp)
	movl	$103, 224(%rsp)
	movl	$3, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$4, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$5, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$6, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$7, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$7, (%rsp)
	movl	$104, %edi
	movl	$17, %esi
	movl	$24, %edx
	movl	$18, %ecx
	movl	$3, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$104, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -56(%rbp)
	movl	$105, %esi
	movl	$4, %edx
.Ltmp683:
	.loc	2 784 11                # susan.c:784:11
	leaq	-68(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 796 76                # susan.c:796:76
.Ltmp684:
	movl	-68(%rbp), %r14d
	shll	$2, %r14d
	movl	$2, 232(%rsp)
	movl	$105, 224(%rsp)
	movl	$3, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$4, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$5, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$6, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$7, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$7, (%rsp)
	movl	$106, %edi
	movl	$17, %esi
	movl	$24, %edx
	movl	$18, %ecx
	movl	$3, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$106, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -68(%rbp)
	jmp	.LBB12_28
.Ltmp685:
.LBB12_22:                              # %if.else262
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	-96(%rbp), %r15         # 8-byte Reload
	.loc	2 785 18                # susan.c:785:18
	leaq	-1(%r15), %rbx
	movl	$10, %edi
	callq	_KWork
	.loc	2 797 22                # susan.c:797:22
.Ltmp686:
	leaq	(%r14,%rbx), %rdi
	movl	$107, %esi
	movl	$108, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp687:
	.loc	2 797 22 is_stmt 0      # susan.c:797:22
	movzbl	(%r14,%rbx), %ebx
	movl	$1, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$2, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$3, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$4, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$5, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$6, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$10, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$11, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$12, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$14, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$16, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$16, 8(%rsp)
	movl	$7, (%rsp)
	movl	$288, %edi              # imm = 0x120
	movl	$17, %esi
	movl	$24, %edx
	movl	$17, %ecx
	movl	$3, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$288, %edi              # imm = 0x120
	callq	_KPushCDep
	cmpl	$7, %ebx
	ja	.LBB12_24
.Ltmp688:
# BB#23:                                # %if.then272
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$38, %edi
	callq	_KWork
	movl	$4, %esi
	.loc	2 785 11 is_stmt 1      # susan.c:785:11
	leaq	-56(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 797 49 discriminator 1 # susan.c:797:49
.Ltmp689:
	movl	$0, -56(%rbp)
	movl	$4, %esi
.Ltmp690:
	.loc	2 784 11                # susan.c:784:11
	leaq	-68(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 797 57                # susan.c:797:57
.Ltmp691:
	movl	$0, -68(%rbp)
	movl	$4, %esi
.Ltmp692:
	.loc	2 785 37                # susan.c:785:37
	leaq	-52(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 797 65                # susan.c:797:65
.Ltmp693:
	movl	$0, -52(%rbp)
	movl	$109, %esi
	movl	$4, %edx
	movq	%r12, %r13
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 797 73 is_stmt 0      # susan.c:797:73
	movl	-80(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$2, 248(%rsp)
	movl	$109, 240(%rsp)
	movl	$3, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$4, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$5, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$6, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$7, (%rsp)
	movl	$110, %edi
	movl	$18, %esi
	movl	$24, %edx
	movl	$19, %ecx
	movl	$3, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$110, %edi
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	movl	%ebx, -80(%rbp)
	movl	$111, %esi
	movl	$4, %edx
.Ltmp694:
	.loc	2 785 61 is_stmt 1      # susan.c:785:61
	leaq	-48(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 798 49                # susan.c:798:49
.Ltmp695:
	movl	-48(%rbp), %r14d
	addl	%r14d, %r14d
	movl	$2, 248(%rsp)
	movl	$111, 240(%rsp)
	movl	$3, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$4, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$5, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$6, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$7, (%rsp)
	movl	$112, %edi
	movl	$18, %esi
	movl	$24, %edx
	movl	$19, %ecx
	movl	$3, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$112, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -48(%rbp)
	movl	$113, %esi
	movl	$4, %edx
.Ltmp696:
	.loc	2 783 37                # susan.c:783:37
	leaq	-76(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 798 58                # susan.c:798:58
.Ltmp697:
	movl	-76(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 248(%rsp)
	movl	$113, 240(%rsp)
	movl	$3, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$4, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$5, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$6, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$7, (%rsp)
	movl	$114, %edi
	movl	$18, %esi
	movl	$24, %edx
	movl	$19, %ecx
	movl	$3, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$114, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -76(%rbp)
	movl	$115, %esi
	movl	$4, %edx
.Ltmp698:
	.loc	2 784 61                # susan.c:784:61
	leaq	-60(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 798 67                # susan.c:798:67
.Ltmp699:
	movl	-60(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 248(%rsp)
	movl	$115, 240(%rsp)
	movl	$3, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$4, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$5, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$6, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$7, (%rsp)
	movl	$116, %edi
	movl	$18, %esi
	movl	$24, %edx
	movl	$19, %ecx
	movl	$3, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$116, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -60(%rbp)
	movl	$117, %esi
	movl	$4, %edx
.Ltmp700:
	.loc	2 783 61                # susan.c:783:61
	leaq	-72(%rbp), %r14
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 798 76                # susan.c:798:76
.Ltmp701:
	movl	-72(%rbp), %ebx
	shll	$2, %ebx
	movl	$2, 248(%rsp)
	movl	$117, 240(%rsp)
	movl	$3, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$4, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$5, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$6, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$7, (%rsp)
	movl	$118, %edi
	movl	$18, %esi
	movl	$24, %edx
	movl	$19, %ecx
	movl	$3, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$118, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -72(%rbp)
	jmp	.LBB12_28
.Ltmp702:
.LBB12_24:                              # %if.else286
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$9, %edi
	callq	_KWork
	.loc	2 799 22                # susan.c:799:22
.Ltmp703:
	leaq	(%r14,%r15), %rdi
	movl	$119, %esi
	movl	$120, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp704:
	.loc	2 799 22 is_stmt 0      # susan.c:799:22
	movzbl	(%r14,%r15), %ebx
	callq	_KPopCDep
	movl	$1, 248(%rsp)
	movl	$119, 240(%rsp)
	movl	$2, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$3, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$4, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$5, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$6, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$7, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$7, (%rsp)
	movl	$289, %edi              # imm = 0x121
	movl	$18, %esi
	movl	$24, %edx
	movl	$18, %ecx
	movl	$3, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$289, %edi              # imm = 0x121
	callq	_KPushCDep
	cmpl	$7, %ebx
	ja	.LBB12_26
.Ltmp705:
# BB#25:                                # %if.then295
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$38, %edi
	callq	_KWork
	movl	$4, %esi
	.loc	2 785 37 is_stmt 1      # susan.c:785:37
	leaq	-52(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 799 49 discriminator 1 # susan.c:799:49
.Ltmp706:
	movl	$0, -52(%rbp)
	movl	$4, %esi
.Ltmp707:
	.loc	2 785 11                # susan.c:785:11
	leaq	-56(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 799 57                # susan.c:799:57
.Ltmp708:
	movl	$0, -56(%rbp)
	movl	$4, %esi
.Ltmp709:
	.loc	2 785 61                # susan.c:785:61
	leaq	-48(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 799 65                # susan.c:799:65
.Ltmp710:
	movl	$0, -48(%rbp)
	movl	$121, %esi
	movl	$4, %edx
.Ltmp711:
	.loc	2 784 11                # susan.c:784:11
	leaq	-68(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 799 73                # susan.c:799:73
.Ltmp712:
	movl	-68(%rbp), %r14d
	addl	%r14d, %r14d
	movl	$2, 264(%rsp)
	movl	$121, 256(%rsp)
	movl	$3, 248(%rsp)
	movl	$119, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$10, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$19, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$7, (%rsp)
	movl	$122, %edi
	movl	$19, %esi
	movl	$24, %edx
	movl	$20, %ecx
	movl	$3, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$122, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -68(%rbp)
	movl	$123, %esi
	movl	$4, %edx
.Ltmp713:
	.loc	2 784 61                # susan.c:784:61
	leaq	-60(%rbp), %r14
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 800 49                # susan.c:800:49
.Ltmp714:
	movl	-60(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$2, 264(%rsp)
	movl	$123, 256(%rsp)
	movl	$3, 248(%rsp)
	movl	$119, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$10, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$19, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$7, (%rsp)
	movl	$124, %edi
	movl	$19, %esi
	movl	$24, %edx
	movl	$20, %ecx
	movl	$3, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$124, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -60(%rbp)
	movl	$125, %esi
	movl	$4, %edx
	movq	%r12, %r13
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 800 58 is_stmt 0      # susan.c:800:58
	movl	-80(%rbp), %eax
	leal	(%rax,%rax,2), %ebx
	movl	$2, 264(%rsp)
	movl	$125, 256(%rsp)
	movl	$3, 248(%rsp)
	movl	$119, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$10, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$19, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$7, (%rsp)
	movl	$126, %edi
	movl	$19, %esi
	movl	$24, %edx
	movl	$20, %ecx
	movl	$3, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$126, %edi
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	movl	%ebx, -80(%rbp)
	movl	$127, %esi
	movl	$4, %edx
.Ltmp715:
	.loc	2 783 61 is_stmt 1      # susan.c:783:61
	leaq	-72(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 800 67                # susan.c:800:67
.Ltmp716:
	movl	-72(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$2, 264(%rsp)
	movl	$127, 256(%rsp)
	movl	$3, 248(%rsp)
	movl	$119, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$10, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$19, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$7, (%rsp)
	movl	$128, %edi
	movl	$19, %esi
	movl	$24, %edx
	movl	$20, %ecx
	movl	$3, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$128, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -72(%rbp)
	movl	$129, %esi
	movl	$4, %edx
.Ltmp717:
	.loc	2 783 37                # susan.c:783:37
	leaq	-76(%rbp), %r14
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 800 76                # susan.c:800:76
.Ltmp718:
	movl	-76(%rbp), %ebx
	shll	$2, %ebx
	movl	$2, 264(%rsp)
	movl	$129, 256(%rsp)
	movl	$3, 248(%rsp)
	movl	$119, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$107, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$95, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$83, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$71, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$59, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$47, 144(%rsp)
	movl	$10, 136(%rsp)
	movl	$17, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$19, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$7, (%rsp)
	movl	$130, %edi
	movl	$19, %esi
	movl	$24, %edx
	movl	$20, %ecx
	movl	$3, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$130, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -76(%rbp)
	jmp	.LBB12_28
.Ltmp719:
.LBB12_26:                              # %if.else309
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R14
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	.loc	2 785 68                # susan.c:785:68
	incq	%r15
	movl	$10, %edi
	callq	_KWork
	.loc	2 801 22                # susan.c:801:22
.Ltmp720:
	leaq	(%r14,%r15), %rdi
	movl	$131, %esi
	movl	$132, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp721:
	.loc	2 801 22 is_stmt 0      # susan.c:801:22
	movzbl	(%r14,%r15), %ebx
.Ltmp722:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movl	$2, 264(%rsp)
	movl	$119, 256(%rsp)
	movl	$3, 248(%rsp)
	movl	$107, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$95, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$83, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$71, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$59, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$47, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$17, 144(%rsp)
	movl	$12, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$3, (%rsp)
	movl	$290, %edi              # imm = 0x122
	movl	$19, %esi
	movl	$24, %edx
	movl	$19, %ecx
	movl	$131, %r8d
	movl	$1, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	$7, %ebx
.Ltmp723:
	.loc	2 783 37 is_stmt 1      # susan.c:783:37
	leaq	-76(%rbp), %r14
	.loc	2 783 61 is_stmt 0      # susan.c:783:61
	leaq	-72(%rbp), %r15
	.loc	2 784 61 is_stmt 1      # susan.c:784:61
	leaq	-60(%rbp), %rbx
	movq	%r12, %r13
	ja	.LBB12_29
# BB#27:                                # %if.then319
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$290, %edi              # imm = 0x122
	callq	_KPushCDep
	movl	$38, %edi
	callq	_KWork
	movl	$4, %esi
	.loc	2 785 61                # susan.c:785:61
	leaq	-48(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 801 49 discriminator 1 # susan.c:801:49
.Ltmp724:
	movl	$0, -48(%rbp)
	movl	$4, %esi
	movq	%rbx, %rdi
	callq	_KStoreConst
	.loc	2 801 57 is_stmt 0      # susan.c:801:57
	movl	$0, -60(%rbp)
	movl	$4, %esi
.Ltmp725:
	.loc	2 785 37 is_stmt 1      # susan.c:785:37
	leaq	-52(%rbp), %rdi
	callq	_KStoreConst
	.loc	2 801 65                # susan.c:801:65
.Ltmp726:
	movl	$0, -52(%rbp)
	movl	$133, %esi
	movl	$4, %edx
.Ltmp727:
	.loc	2 785 11                # susan.c:785:11
	leaq	-56(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 801 73                # susan.c:801:73
.Ltmp728:
	movl	-56(%rbp), %r12d
	addl	%r12d, %r12d
	movl	$4, 280(%rsp)
	movl	$119, 272(%rsp)
	movl	$5, 264(%rsp)
	movl	$107, 256(%rsp)
	movl	$6, 248(%rsp)
	movl	$95, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$83, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$71, 208(%rsp)
	movl	$9, 200(%rsp)
	movl	$59, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$47, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$17, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$16, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$15, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$13, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$12, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$10, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$9, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$8, 48(%rsp)
	movl	$20, 40(%rsp)
	movl	$7, 32(%rsp)
	movl	$21, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$2, 8(%rsp)
	movl	$133, (%rsp)
	movl	$134, %edi
	movl	$20, %esi
	movl	$24, %edx
	movl	$21, %ecx
	movl	$131, %r8d
	movl	$3, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$134, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r12d, -56(%rbp)
	movl	$135, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 802 49                # susan.c:802:49
	movl	-72(%rbp), %ebx
	addl	%ebx, %ebx
	movl	$4, 280(%rsp)
	movl	$119, 272(%rsp)
	movl	$5, 264(%rsp)
	movl	$107, 256(%rsp)
	movl	$6, 248(%rsp)
	movl	$95, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$83, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$71, 208(%rsp)
	movl	$9, 200(%rsp)
	movl	$59, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$47, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$17, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$16, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$15, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$13, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$12, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$10, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$9, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$8, 48(%rsp)
	movl	$20, 40(%rsp)
	movl	$7, 32(%rsp)
	movl	$21, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$2, 8(%rsp)
	movl	$135, (%rsp)
	movl	$136, %edi
	movl	$20, %esi
	movl	$24, %edx
	movl	$21, %ecx
	movl	$131, %r8d
	movl	$3, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$136, %edi
	movl	$4, %edx
	movq	%r15, %rsi
	callq	_KStore
	movl	%ebx, -72(%rbp)
	movl	$137, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 802 58 is_stmt 0      # susan.c:802:58
	movl	-76(%rbp), %eax
	leal	(%rax,%rax,2), %ebx
	movl	$4, 280(%rsp)
	movl	$119, 272(%rsp)
	movl	$5, 264(%rsp)
	movl	$107, 256(%rsp)
	movl	$6, 248(%rsp)
	movl	$95, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$83, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$71, 208(%rsp)
	movl	$9, 200(%rsp)
	movl	$59, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$47, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$17, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$16, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$15, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$13, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$12, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$10, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$9, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$8, 48(%rsp)
	movl	$20, 40(%rsp)
	movl	$7, 32(%rsp)
	movl	$21, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$2, 8(%rsp)
	movl	$137, (%rsp)
	movl	$138, %edi
	movl	$20, %esi
	movl	$24, %edx
	movl	$21, %ecx
	movl	$131, %r8d
	movl	$3, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$138, %edi
	movl	$4, %edx
	movq	%r14, %rsi
	callq	_KStore
	movl	%ebx, -76(%rbp)
	movl	$139, %esi
	movl	$4, %edx
.Ltmp729:
	.loc	2 784 11 is_stmt 1      # susan.c:784:11
	leaq	-68(%rbp), %rbx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 802 67                # susan.c:802:67
.Ltmp730:
	movl	-68(%rbp), %eax
	leal	(%rax,%rax,2), %r14d
	movl	$4, 280(%rsp)
	movl	$119, 272(%rsp)
	movl	$5, 264(%rsp)
	movl	$107, 256(%rsp)
	movl	$6, 248(%rsp)
	movl	$95, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$83, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$71, 208(%rsp)
	movl	$9, 200(%rsp)
	movl	$59, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$47, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$17, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$16, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$15, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$13, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$12, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$10, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$9, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$8, 48(%rsp)
	movl	$20, 40(%rsp)
	movl	$7, 32(%rsp)
	movl	$21, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$2, 8(%rsp)
	movl	$139, (%rsp)
	movl	$140, %edi
	movl	$20, %esi
	movl	$24, %edx
	movl	$21, %ecx
	movl	$131, %r8d
	movl	$3, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$140, %edi
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r14d, -68(%rbp)
	movl	$141, %esi
	movl	$4, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 802 76 is_stmt 0      # susan.c:802:76
	movl	-80(%rbp), %ebx
	shll	$2, %ebx
	movl	$4, 280(%rsp)
	movl	$119, 272(%rsp)
	movl	$5, 264(%rsp)
	movl	$107, 256(%rsp)
	movl	$6, 248(%rsp)
	movl	$95, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$83, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$71, 208(%rsp)
	movl	$9, 200(%rsp)
	movl	$59, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$47, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$17, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$16, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$15, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$13, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$12, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$10, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$9, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$8, 48(%rsp)
	movl	$20, 40(%rsp)
	movl	$7, 32(%rsp)
	movl	$21, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$2, 8(%rsp)
	movl	$141, (%rsp)
	movl	$142, %edi
	movl	$20, %esi
	movl	$24, %edx
	movl	$21, %ecx
	movl	$131, %r8d
	movl	$3, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$142, %edi
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	movl	%ebx, -80(%rbp)
.Ltmp731:
.LBB12_28:                              # %if.end340
                                        #   in Loop: Header=BB12_3 Depth=2
	callq	_KPopCDep
.LBB12_29:                              # %if.end340
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$228, %edi
	callq	_KPushCDep
.Ltmp732:
	#DEBUG_VALUE: susan_thin:y <- 0
	#DEBUG_VALUE: susan_thin:m <- 0
	movl	$226, %edi
	callq	_KInduction
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$7649594164250543517, %rdi # imm = 0x6A28D15CF40E059D
	callq	_KEnterRegion
	movl	$218, %r12d
	movl	$216, %r15d
	xorl	%r14d, %r14d
	movq	%r13, -136(%rbp)        # 8-byte Spill
	xorl	%ebx, %ebx
	xorl	%eax, %eax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	xorl	%r13d, %r13d
	jmp	.LBB12_30
	.align	16, 0x90
.LBB12_37:                              # %for.cond345.pre_exit.for.inc363
                                        #   in Loop: Header=BB12_30 Depth=3
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
.Ltmp733:
	#DEBUG_VALUE: susan_thin:x <- 0
	movl	$1, %esi
	movabsq	$7269698593100253220, %rdi # imm = 0x64E3285A99E5C824
	callq	_KExitRegion
	movl	$229, %ebx
	movl	$229, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-112(%rbp), %r14        # 8-byte Reload
	incq	%r14
	movl	$235, %r13d
	movl	$235, %edi
	movl	$234, %esi
	movl	$1, %edx
	movl	$229, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$1986048608451772255, %rdi # imm = 0x1B8FDCAFD56D3F5F
	callq	_KExitRegion
	addq	$12, -136(%rbp)         # 8-byte Folded Spill
	movl	$233, %r12d
	movl	$231, %r15d
	movl	$227, %eax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB12_30:                              # %for.cond341
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_32 Depth 4
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$228, %edi
	callq	_KPushCDep
	movl	$234, %edi
	movl	$228, %edx
	movl	%r13d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$232, %edi
	movl	$228, %edx
	movl	%r12d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$230, %edi
	movl	$228, %edx
	movl	%r15d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$152, %edi
	movl	$228, %edx
	movq	-88(%rbp), %rsi         # 8-byte Reload
                                        # kill: ESI<def> ESI<kill> RSI<kill>
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$152, %edi
	movl	$152, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$226, %edi
	movl	$226, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$232, %edi
	movl	$232, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$230, %edi
	movl	$230, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$229, %edi
	movl	$226, %esi
	movl	$1, %edx
	movl	$228, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$234, %edi
	movl	$229, %esi
	callq	_KPhiAddCond
	movl	$234, %edi
	movl	$234, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$232, %edi
	movl	$229, %esi
	callq	_KPhiAddCond
	movl	$230, %edi
	movl	$229, %esi
	callq	_KPhiAddCond
	movl	$152, %edi
	movl	$229, %esi
	callq	_KPhiAddCond
	callq	_KPopCDep
	.loc	2 806 11 is_stmt 1      # susan.c:806:11
.Ltmp734:
	cmpq	$3, %r14
	je	.LBB12_38
# BB#31:                                # %for.body344
                                        #   in Loop: Header=BB12_30 Depth=3
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movq	%r14, -112(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movabsq	$1986048608451772255, %rdi # imm = 0x1B8FDCAFD56D3F5F
	callq	_KEnterRegion
	movl	$229, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_thin:x <- 0
	movl	$236, %edi
	callq	_KInduction
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$7269698593100253220, %rdi # imm = 0x64E3285A99E5C824
	callq	_KEnterRegion
	movl	$232, -88(%rbp)         # 4-byte Folded Spill
	movl	$230, %r14d
	movl	$152, %r15d
	xorl	%r12d, %r12d
	movq	-136(%rbp), %r13        # 8-byte Reload
	xorl	%ebx, %ebx
	jmp	.LBB12_32
	.align	16, 0x90
.LBB12_36:                              # %for.inc
                                        #   in Loop: Header=BB12_32 Depth=4
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	#DEBUG_VALUE: susan_thin:x <- 0
	movl	$238, %ebx
	movl	$238, %edi
	callq	_KPushCDep
	movl	$240, -88(%rbp)         # 4-byte Folded Spill
	movl	$240, %edi
	movl	$238, %edx
	movl	$241, %ecx
	movl	%r14d, %esi
	callq	_KPhi2To1
	movl	$239, %r14d
	movl	$239, %edi
	movl	$238, %edx
	movl	$241, %ecx
	movl	%r15d, %esi
	callq	_KPhi2To1
	movl	$237, %r15d
	movl	$237, %edi
	movl	$238, %edx
	movl	$241, %ecx
	movl	-96(%rbp), %esi         # 4-byte Reload
	callq	_KPhi2To1
	.loc	2 808 13                # susan.c:808:13
.Ltmp735:
	incq	%r12
	movl	$240, %edi
	movl	$240, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$239, %edi
	movl	$239, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$237, %edi
	movl	$237, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-3148566897913511299, %rdi # imm = 0xD44E0B16924FC27D
	callq	_KExitRegion
	addq	$4, %r13
.Ltmp736:
.LBB12_32:                              # %for.cond345
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_3 Depth=2
                                        #       Parent Loop BB12_30 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	#DEBUG_VALUE: susan_thin:x <- 0
	movl	$229, %edi
	callq	_KPushCDep
	movl	$233, %edi
	movl	$229, %edx
	movl	-88(%rbp), %esi         # 4-byte Reload
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$231, %edi
	movl	$229, %edx
	movl	%r14d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$227, %edi
	movl	$229, %edx
	movl	%r15d, %esi
	movl	%ebx, %ecx
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$236, %edi
	movl	$236, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$238, %edi
	movl	$229, %esi
	movl	$1, %edx
	movl	$236, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$233, %edi
	movl	$238, %esi
	callq	_KPhiAddCond
	movl	$231, %edi
	movl	$238, %esi
	callq	_KPhiAddCond
	movl	$227, %edi
	movl	$238, %esi
	callq	_KPhiAddCond
	movl	$233, %edi
	movl	$233, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$231, %edi
	movl	$231, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$227, %edi
	movl	$227, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 808 13 is_stmt 0      # susan.c:808:13
	cmpq	$3, %r12
	je	.LBB12_37
# BB#33:                                # %for.body348
                                        #   in Loop: Header=BB12_32 Depth=4
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	#DEBUG_VALUE: susan_thin:x <- 0
	movl	$2, %esi
	movabsq	$-3148566897913511299, %rdi # imm = 0xD44E0B16924FC27D
	callq	_KEnterRegion
	movl	$238, %edi
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movl	$143, %esi
	movl	$144, %edx
	movl	$4, %ecx
	movq	%r13, %rdi
	callq	_KLoad1
	.loc	2 809 19 is_stmt 1      # susan.c:809:19
.Ltmp737:
	movl	(%r13), %ebx
	movl	$1, (%rsp)
	movl	$241, %edi
	movl	$227, %esi
	movl	$1, %edx
	movl	$238, %ecx
	movl	$1, %r8d
	movl	$143, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movq	-104(%rbp), %rax        # 8-byte Reload
.Ltmp738:
	.loc	2 809 19 is_stmt 0      # susan.c:809:19
	cmpl	%eax, %ebx
	jle	.LBB12_34
# BB#35:                                # %if.then356
                                        #   in Loop: Header=BB12_32 Depth=4
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	#DEBUG_VALUE: susan_thin:x <- 0
	movl	$241, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	movl	$145, -96(%rbp)         # 4-byte Folded Spill
	movl	$145, %esi
	movl	$146, %edx
	movl	$4, %ecx
	movq	%r13, %rdi
	callq	_KLoad1
	.loc	2 809 37                # susan.c:809:37
.Ltmp739:
	movl	(%r13), %eax
.Ltmp740:
	#DEBUG_VALUE: susan_thin:m <- [RBP+-104]
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movl	$1, 16(%rsp)
	movl	$143, 8(%rsp)
	movl	$1, (%rsp)
	movl	$243, %r14d
	movl	$243, %edi
	movl	$236, %esi
	xorl	%edx, %edx
	movl	$227, %ecx
	movl	$1, %r8d
	movl	$238, %r9d
	callq	_KTimestamp4
	movl	$1, 16(%rsp)
	movl	$143, 8(%rsp)
	movl	$1, (%rsp)
	movl	$242, %r15d
	movl	$242, %edi
	movl	$226, %esi
	xorl	%edx, %edx
	movl	$227, %ecx
	movl	$1, %r8d
	movl	$238, %r9d
	callq	_KTimestamp4
	movl	$145, %edi
	movl	$145, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movq	-112(%rbp), %rax        # 8-byte Reload
                                        # kill: EAX<def> EAX<kill> RAX<kill> RAX<def>
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movl	%r12d, %eax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB12_36
.Ltmp741:
	.align	16, 0x90
.LBB12_34:                              #   in Loop: Header=BB12_32 Depth=4
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	#DEBUG_VALUE: susan_thin:x <- 0
	movl	$227, -96(%rbp)         # 4-byte Folded Spill
	movl	$233, %r14d
	movl	$231, %r15d
	jmp	.LBB12_36
.LBB12_38:                              # %for.cond341.pre_exit.for.end365
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$1, %esi
	movabsq	$7649594164250543517, %rdi # imm = 0x6A28D15CF40E059D
	callq	_KExitRegion
	movl	$228, %r15d
	movl	$228, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$2, 152(%rsp)
	movl	$17, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$6, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$7, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$8, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$9, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$10, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$11, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$12, 8(%rsp)
	movl	$3, (%rsp)
	xorl	%r12d, %r12d
	movl	$253, %r14d
	movl	$253, %edi
	movl	$12, %esi
	movl	$24, %edx
	movl	$12, %ecx
	movl	$152, %r8d
	movl	$1, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 811 15 is_stmt 1      # susan.c:811:15
	movq	-104(%rbp), %rax        # 8-byte Reload
	testl	%eax, %eax
	jle	.LBB12_39
# BB#41:                                # %if.then368
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$232, -96(%rbp)         # 4-byte Folded Spill
	movl	$230, -88(%rbp)         # 4-byte Folded Spill
	movl	$253, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	movl	$147, %esi
	movl	$148, %edx
	movl	$1, %ecx
	movq	-184(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 812 17                # susan.c:812:17
.Ltmp742:
	movzbl	(%rbx), %r14d
	movl	$3, 168(%rsp)
	movl	$17, 160(%rsp)
	movl	$6, 152(%rsp)
	movl	$16, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$15, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$13, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$12, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$10, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$9, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$8, 48(%rsp)
	movl	$12, 40(%rsp)
	movl	$7, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$2, 8(%rsp)
	movl	$152, (%rsp)
	movl	$291, %edi              # imm = 0x123
	movl	$13, %esi
	movl	$24, %edx
	movl	$13, %ecx
	movl	$147, %r8d
	movl	$1, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$291, %edi              # imm = 0x123
	callq	_KPushCDep
	cmpl	$3, %r14d
	ja	.LBB12_43
# BB#42:                                # %if.then376
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$8, %edi
	callq	_KWork
	movq	-120(%rbp), %r12        # 8-byte Reload
	.loc	2 813 20                # susan.c:813:20
.Ltmp743:
	movq	-160(%rbp), %rax        # 8-byte Reload
	leal	(%rax,%r12), %eax
	.loc	2 813 19 is_stmt 0      # susan.c:813:19
	movq	-152(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	movq	-128(%rbp), %r13        # 8-byte Reload
	movq	-144(%rbp), %rcx        # 8-byte Reload
	leal	(%rcx,%r13), %ecx
	leal	-1(%rax,%rcx), %eax
	.loc	2 813 15                # susan.c:813:15
	movslq	%eax, %r14
	movq	-176(%rbp), %rbx        # 8-byte Reload
.Ltmp744:
	#DEBUG_VALUE: susan_thin:mid <- RBX
	leaq	(%rbx,%r14), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	movb	$4, (%rbx,%r14)
	jmp	.LBB12_44
.Ltmp745:
.LBB12_39:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$232, -96(%rbp)         # 4-byte Folded Spill
	movl	$230, -88(%rbp)         # 4-byte Folded Spill
	jmp	.LBB12_40
.LBB12_43:                              # %if.else385
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$16, %edi
	callq	_KWork
	movl	$149, %esi
	movl	$150, %edx
	movl	$1, %ecx
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 815 43 is_stmt 1      # susan.c:815:43
	movb	(%rbx), %r13b
	incb	%r13b
	.loc	2 815 20 is_stmt 0      # susan.c:815:20
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	leal	(%rax,%rcx), %eax
	.loc	2 815 19                # susan.c:815:19
	movq	-152(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	movq	-128(%rbp), %r14        # 8-byte Reload
	movq	-144(%rbp), %rcx        # 8-byte Reload
	leal	(%rcx,%r14), %ecx
	leal	-1(%rax,%rcx), %eax
	.loc	2 815 15                # susan.c:815:15
	movslq	%eax, %r12
	movq	-176(%rbp), %rbx        # 8-byte Reload
.Ltmp746:
	#DEBUG_VALUE: susan_thin:mid <- RBX
	leaq	(%rbx,%r12), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movl	$4, 184(%rsp)
	movl	$17, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$16, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$15, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$13, 128(%rsp)
	movl	$10, 120(%rsp)
	movl	$12, 112(%rsp)
	movl	$11, 104(%rsp)
	movl	$10, 96(%rsp)
	movl	$12, 88(%rsp)
	movl	$9, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$8, 64(%rsp)
	movl	$13, 56(%rsp)
	movl	$7, 48(%rsp)
	movl	$14, 40(%rsp)
	movl	$3, 32(%rsp)
	movl	$3, 24(%rsp)
	movl	$152, 16(%rsp)
	movl	$1, 8(%rsp)
	movl	$149, (%rsp)
	movl	$151, %edi
	movl	$14, %esi
	movl	$24, %edx
	movl	$14, %ecx
	movl	$147, %r8d
	movl	$2, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$151, %edi
	movl	$1, %edx
	movq	-104(%rbp), %rsi        # 8-byte Reload
	callq	_KStore
	movb	%r13b, (%rbx,%r12)
.Ltmp747:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movq	%r14, %r13
	movq	-120(%rbp), %r12        # 8-byte Reload
.Ltmp748:
.LBB12_44:                              # %if.end401
                                        #   in Loop: Header=BB12_3 Depth=2
	callq	_KPopCDep
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$253, %r14d
	movl	$253, %edi
	callq	_KPushCDep
	movl	$3, %edi
	callq	_KWork
	.loc	2 816 19 is_stmt 1      # susan.c:816:19
.Ltmp749:
	leal	(%r13,%r12,2), %eax
	movl	%eax, -104(%rbp)        # 4-byte Spill
	movl	$5, 184(%rsp)
	movl	$17, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$16, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$15, 144(%rsp)
	movl	$10, 136(%rsp)
	movl	$13, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$12, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$10, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$9, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$8, 64(%rsp)
	movl	$14, 56(%rsp)
	movl	$7, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$3, 32(%rsp)
	movl	$2, 24(%rsp)
	movl	$232, 16(%rsp)
	movl	$3, 8(%rsp)
	movl	$230, (%rsp)
	xorl	%ebx, %ebx
	movl	$246, %r12d
	movl	$246, %edi
	movl	$14, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$152, %r8d
	movl	$4, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp750:
	.loc	2 816 18 is_stmt 0      # susan.c:816:18
	cmpl	$2, -104(%rbp)          # 4-byte Folded Reload
	jg	.LBB12_45
# BB#46:                                # %if.then406
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$246, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	movq	-160(%rbp), %r12        # 8-byte Reload
	movq	-120(%rbp), %rax        # 8-byte Reload
	.loc	2 817 15 is_stmt 1      # susan.c:817:15
.Ltmp751:
	addl	%eax, %r12d
.Ltmp752:
	#DEBUG_VALUE: susan_thin:i <- R12D
	movq	-144(%rbp), %rax        # 8-byte Reload
	.loc	2 818 15                # susan.c:818:15
	leal	-2(%rax,%r13), %eax
.Ltmp753:
	#DEBUG_VALUE: susan_thin:j <- EAX
	movq	%rax, -144(%rbp)        # 8-byte Spill
.Ltmp754:
	#DEBUG_VALUE: susan_thin:j <- [RBP+-144]
	movq	%r13, -128(%rbp)        # 8-byte Spill
	movl	$7, 200(%rsp)
	movl	$17, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$16, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$15, 160(%rsp)
	movl	$12, 152(%rsp)
	movl	$13, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$12, 128(%rsp)
	movl	$14, 120(%rsp)
	movl	$10, 112(%rsp)
	movl	$15, 104(%rsp)
	movl	$9, 96(%rsp)
	movl	$16, 88(%rsp)
	movl	$8, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$7, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$3, 48(%rsp)
	movl	$4, 40(%rsp)
	movl	$232, 32(%rsp)
	movl	$5, 24(%rsp)
	movl	$230, 16(%rsp)
	movl	$6, 8(%rsp)
	movl	$152, (%rsp)
	movl	$255, %edi
	movl	$15, %esi
	movl	$25, %edx
	movl	$1, %ecx
	movl	$24, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$8, 200(%rsp)
	movl	$17, 192(%rsp)
	movl	$11, 184(%rsp)
	movl	$16, 176(%rsp)
	movl	$12, 168(%rsp)
	movl	$15, 160(%rsp)
	movl	$13, 152(%rsp)
	movl	$13, 144(%rsp)
	movl	$14, 136(%rsp)
	movl	$12, 128(%rsp)
	movl	$15, 120(%rsp)
	movl	$10, 112(%rsp)
	movl	$16, 104(%rsp)
	movl	$9, 96(%rsp)
	movl	$17, 88(%rsp)
	movl	$8, 80(%rsp)
	movl	$17, 72(%rsp)
	movl	$7, 64(%rsp)
	movl	$18, 56(%rsp)
	movl	$3, 48(%rsp)
	movl	$5, 40(%rsp)
	movl	$232, 32(%rsp)
	movl	$6, 24(%rsp)
	movl	$230, 16(%rsp)
	movl	$7, 8(%rsp)
	movl	$152, (%rsp)
	movl	$247, %edi
	movl	$15, %esi
	movl	$220, %edx
	movl	$2, %ecx
	movl	$24, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$7, 200(%rsp)
	movl	$17, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$16, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$15, 160(%rsp)
	movl	$12, 152(%rsp)
	movl	$13, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$12, 128(%rsp)
	movl	$14, 120(%rsp)
	movl	$10, 112(%rsp)
	movl	$15, 104(%rsp)
	movl	$9, 96(%rsp)
	movl	$16, 88(%rsp)
	movl	$8, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$7, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$3, 48(%rsp)
	movl	$4, 40(%rsp)
	movl	$232, 32(%rsp)
	movl	$5, 24(%rsp)
	movl	$230, 16(%rsp)
	movl	$6, 8(%rsp)
	movl	$152, (%rsp)
	movl	$245, %ebx
	movl	$245, %edi
	movl	$15, %esi
	movl	$220, %edx
	movl	$1, %ecx
	movl	$24, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 819 19                # susan.c:819:19
	cmpl	$3, %r12d
	movq	%r12, %r13
.Ltmp755:
	#DEBUG_VALUE: susan_thin:i <- R13D
	jg	.LBB12_48
.Ltmp756:
# BB#47:                                # %if.then413
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- [RBP+-144]
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$247, %edi
	callq	_KPushCDep
.Ltmp757:
	#DEBUG_VALUE: susan_thin:i <- 4
	callq	_KPopCDep
	movl	$4, %r13d
	xorl	%ebx, %ebx
.LBB12_48:                              # %if.end414
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- [RBP+-144]
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$246, %r12d
	movl	$246, %edi
	callq	_KPushCDep
	movl	$244, -196(%rbp)        # 4-byte Folded Spill
	movl	$244, %edi
	movl	$246, %edx
	movl	$247, %ecx
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$8, 200(%rsp)
	movl	$17, 192(%rsp)
	movl	$11, 184(%rsp)
	movl	$16, 176(%rsp)
	movl	$12, 168(%rsp)
	movl	$15, 160(%rsp)
	movl	$13, 152(%rsp)
	movl	$13, 144(%rsp)
	movl	$14, 136(%rsp)
	movl	$12, 128(%rsp)
	movl	$15, 120(%rsp)
	movl	$10, 112(%rsp)
	movl	$16, 104(%rsp)
	movl	$9, 96(%rsp)
	movl	$17, 88(%rsp)
	movl	$8, 80(%rsp)
	movl	$17, 72(%rsp)
	movl	$7, 64(%rsp)
	movl	$18, 56(%rsp)
	movl	$3, 48(%rsp)
	movl	$5, 40(%rsp)
	movl	$232, 32(%rsp)
	movl	$6, 24(%rsp)
	movl	$230, 16(%rsp)
	movl	$7, 8(%rsp)
	movl	$152, (%rsp)
	movl	$256, %ebx              # imm = 0x100
	movl	$256, %edi              # imm = 0x100
	movl	$15, %esi
	movl	$25, %edx
	movl	$2, %ecx
	movl	$24, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$244, %edi
	movl	$244, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movq	-144(%rbp), %rax        # 8-byte Reload
.Ltmp758:
	#DEBUG_VALUE: susan_thin:j <- EAX
	.loc	2 820 19                # susan.c:820:19
	cmpl	$3, %eax
.Ltmp759:
	#DEBUG_VALUE: susan_thin:j <- undef
	jg	.LBB12_49
.Ltmp760:
# BB#50:                                # %if.then417
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$256, %ebx              # imm = 0x100
	movl	$256, %edi              # imm = 0x100
	callq	_KPushCDep
.Ltmp761:
	#DEBUG_VALUE: susan_thin:j <- 4
	callq	_KPopCDep
	movl	$4, %eax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	jmp	.LBB12_51
.LBB12_45:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movq	%r13, -128(%rbp)        # 8-byte Spill
	movq	-168(%rbp), %r13        # 8-byte Reload
                                        # kill: R13D<def> R13D<kill> R13<kill> R13<def>
	jmp	.LBB12_51
.LBB12_49:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
.Ltmp762:
	#DEBUG_VALUE: susan_thin:j <- undef
	#DEBUG_VALUE: susan_thin:m <- 0
	#DEBUG_VALUE: susan_thin:y <- 0
	movl	$255, -208(%rbp)        # 4-byte Folded Spill
.Ltmp763:
	#DEBUG_VALUE: susan_thin:j <- [RBP+-144]
	.align	16, 0x90
.LBB12_51:                              # %if.end421
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$249, %edi
	callq	_KPushCDep
	movl	%ebx, 16(%rsp)
	movl	%r12d, 8(%rsp)
	movl	%r14d, (%rsp)
	movl	$254, -104(%rbp)        # 4-byte Folded Spill
	movl	$254, %edi
	movl	$6, %edx
	movl	$249, %ecx
	movl	$250, %r8d
	xorl	%eax, %eax
	movl	-208(%rbp), %esi        # 4-byte Reload
	movl	%r15d, %r9d
	callq	_KPhi
	movl	%r12d, 8(%rsp)
	movl	%r14d, (%rsp)
	movl	$252, %edi
	movl	$5, %edx
	movl	$249, %ecx
	movl	$250, %r8d
	xorl	%eax, %eax
	movl	-196(%rbp), %esi        # 4-byte Reload
	movl	%r15d, %r9d
	callq	_KPhi
	movl	$251, %edi
	movl	$249, %edx
	movl	$250, %ecx
	movl	-96(%rbp), %esi         # 4-byte Reload
	movl	%r15d, %r8d
	callq	_KPhi3To1
	movl	$248, %edi
	movl	$249, %edx
	movl	$250, %ecx
	movl	-88(%rbp), %esi         # 4-byte Reload
	movl	%r15d, %r8d
	callq	_KPhi3To1
	movl	$1, %edi
	callq	_KWork
	movl	$3, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$4, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$6, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$7, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$8, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$9, 8(%rsp)
	movl	$7, (%rsp)
	movl	$267, %edi              # imm = 0x10B
	movl	$10, %esi
	movl	$24, %edx
	movl	$10, %ecx
	movl	$3, %r8d
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$254, %edi
	movl	$254, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$252, %edi
	movl	$252, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$251, %edi
	movl	$251, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$248, %edi
	movl	$248, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	-192(%rbp), %eax        # 4-byte Reload
	.loc	2 827 13                # susan.c:827:13
	cmpl	$2, %eax
	jne	.LBB12_52
# BB#53:                                # %if.then424
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$252, -88(%rbp)         # 4-byte Folded Spill
	movl	$267, %edi              # imm = 0x10B
	callq	_KPushCDep
	movl	$44, %edi
	callq	_KWork
	.loc	2 829 22                # susan.c:829:22
.Ltmp764:
	leal	-1(%r13), %eax
.Ltmp765:
	#DEBUG_VALUE: susan_thin:i <- EAX
	.loc	2 829 21 is_stmt 0      # susan.c:829:21
	movl	%eax, -196(%rbp)        # 4-byte Spill
	movq	-152(%rbp), %rcx        # 8-byte Reload
.Ltmp766:
	#DEBUG_VALUE: susan_thin:i <- [RBP+-196]
	#DEBUG_VALUE: susan_thin:x_size <- undef
	imull	%ecx, %eax
.Ltmp767:
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	movq	-144(%rbp), %r12        # 8-byte Reload
	addl	%r12d, %eax
	.loc	2 829 17                # susan.c:829:17
	movl	%eax, -248(%rbp)        # 4-byte Spill
	movslq	%eax, %rbx
	movq	%rbx, -112(%rbp)        # 8-byte Spill
	movq	-176(%rbp), %r14        # 8-byte Reload
.Ltmp768:
	#DEBUG_VALUE: susan_thin:mid <- R14
	leaq	-1(%rbx,%r14), %rdi
	movl	$153, %esi
	movl	$154, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%rbx,%r14), %r15d
	movl	%r15d, -184(%rbp)       # 4-byte Spill
	cmpl	$8, %r15d
	sbbl	%eax, %eax
	.loc	2 830 17 is_stmt 1      # susan.c:830:17
	movl	%eax, -168(%rbp)        # 4-byte Spill
	leaq	1(%rbx,%r14), %rdi
	movl	$155, %esi
	movl	$156, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%rbx,%r14), %eax
	movl	%eax, -208(%rbp)        # 4-byte Spill
	cmpl	$8, %eax
	sbbl	%ecx, %ecx
	andl	$1, %ecx
	.loc	2 829 17                # susan.c:829:17
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	cmpl	$8, %r15d
	movq	%r13, %rax
	.loc	2 833 18                # susan.c:833:18
.Ltmp769:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movl	%ecx, %r13d
	adcl	$0, %r13d
.Ltmp770:
	.loc	2 831 22                # susan.c:831:22
	leal	1(%rax), %eax
	.loc	2 831 21 is_stmt 0      # susan.c:831:21
	movq	-152(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	addl	%r12d, %eax
	.loc	2 831 17                # susan.c:831:17
	movl	%eax, -244(%rbp)        # 4-byte Spill
	movslq	%eax, %rbx
	movq	%rbx, -136(%rbp)        # 8-byte Spill
	leaq	-1(%rbx,%r14), %rdi
	movl	$157, %esi
	movl	$158, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%rbx,%r14), %r12d
	.loc	2 832 17 is_stmt 1      # susan.c:832:17
	leaq	1(%rbx,%r14), %rdi
	movl	$159, %esi
	movl	$160, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%rbx,%r14), %eax
.Ltmp771:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	cmpl	$8, %eax
	sbbl	%r14d, %r14d
	.loc	2 831 17                # susan.c:831:17
	cmpl	$8, %r12d
	sbbl	%r15d, %r15d
	cmpl	$8, %r12d
	.loc	2 833 18                # susan.c:833:18
.Ltmp772:
	adcl	$0, %r13d
.Ltmp773:
	.loc	2 832 17                # susan.c:832:17
	cmpl	$8, %eax
	.loc	2 833 18                # susan.c:833:18
.Ltmp774:
	adcl	$0, %r13d
	movl	$3, 184(%rsp)
	movl	$159, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$157, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$155, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$153, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$7, (%rsp)
	movl	$268, %edi              # imm = 0x10C
	movl	$14, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$3, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp775:
	.loc	2 833 16 is_stmt 0      # susan.c:833:16
	cmpl	$2, %r13d
	jne	.LBB12_71
# BB#54:                                # %land.lhs.true466
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- [RBP+-196]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	-168(%rbp), %ebx        # 4-byte Reload
	.loc	2 829 17 is_stmt 1      # susan.c:829:17
	andl	$1, %ebx
	.loc	2 831 17                # susan.c:831:17
	andl	$1, %r15d
	.loc	2 832 17                # susan.c:832:17
	andl	$1, %r14d
	movl	$268, %edi              # imm = 0x10C
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	.loc	2 833 44                # susan.c:833:44
.Ltmp776:
	orl	%ebx, %r14d
	.loc	2 833 54 is_stmt 0      # susan.c:833:54
	movq	-96(%rbp), %rax         # 8-byte Reload
	orl	%eax, %r15d
	movl	$6, 184(%rsp)
	movl	$159, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$157, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$155, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$153, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$7, (%rsp)
	movl	$258, %edi              # imm = 0x102
	movl	$14, %esi
	movl	$24, %edx
	movl	$18, %ecx
	movl	$3, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp777:
	.loc	2 833 16                # susan.c:833:16
	testl	%r15d, %r14d
	je	.LBB12_71
# BB#55:                                # %if.then468
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	-96(%rbp), %r15         # 8-byte Reload
	movl	$258, %edi              # imm = 0x102
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	movl	$7, 184(%rsp)
	movl	$159, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$157, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$155, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$153, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$7, (%rsp)
	movl	$260, %edi              # imm = 0x104
	movl	$14, %esi
	movl	$24, %edx
	movl	$19, %ecx
	movl	$3, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$7, 184(%rsp)
	movl	$159, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$157, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$155, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$153, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$7, (%rsp)
	movl	$259, %edi              # imm = 0x103
	movl	$14, %esi
	movl	$24, %edx
	movl	$19, %ecx
	movl	$3, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$259, %edi              # imm = 0x103
	callq	_KPushCDep
	callq	_KPopCDep
	movl	$260, %edi              # imm = 0x104
	callq	_KPushCDep
	callq	_KPopCDep
	.loc	2 838 17 is_stmt 1      # susan.c:838:17
.Ltmp778:
	movl	-184(%rbp), %eax        # 4-byte Reload
	movzbl	%al, %eax
	cmpl	$7, %eax
	ja	.LBB12_57
# BB#56:                                # %if.then470
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	.loc	2 839 37                # susan.c:839:37
.Ltmp779:
	movl	-208(%rbp), %eax        # 4-byte Reload
	movzbl	%al, %eax
	xorl	%r14d, %r14d
	cmpl	$7, %eax
	movl	$0, %r12d
	movl	$-1, %ecx
	cmoval	%ecx, %r12d
	cmpl	$8, %eax
	sbbl	%eax, %eax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movl	$260, %ebx              # imm = 0x104
	jmp	.LBB12_58
.Ltmp780:
	.align	16, 0x90
.LBB12_52:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	%r13, -160(%rbp)        # 8-byte Spill
	movl	$252, -88(%rbp)         # 4-byte Folded Spill
	xorl	%ebx, %ebx
	xorl	%r14d, %r14d
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	xorl	%r15d, %r15d
	jmp	.LBB12_84
.LBB12_71:                              # %if.else574
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
.Ltmp781:
	#DEBUG_VALUE: susan_thin:i <- [RBP+-196]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$268, %edi              # imm = 0x10C
	callq	_KPushCDep
	movl	$40, %edi
	callq	_KWork
	movq	-176(%rbp), %rbx        # 8-byte Reload
.Ltmp782:
	#DEBUG_VALUE: susan_thin:mid <- RBX
	movq	-112(%rbp), %r14        # 8-byte Reload
	.loc	2 853 19                # susan.c:853:19
.Ltmp783:
	leaq	(%rbx,%r14), %rdi
	movl	$175, %esi
	movl	$176, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	(%rbx,%r14), %r14d
	cmpl	$8, %r14d
	sbbl	%r13d, %r13d
	.loc	2 854 23                # susan.c:854:23
	movq	-160(%rbp), %rax        # 8-byte Reload
                                        # kill: EAX<def> EAX<kill> RAX<kill>
	movq	-152(%rbp), %rcx        # 8-byte Reload
.Ltmp784:
	#DEBUG_VALUE: susan_thin:x_size <- undef
	imull	%ecx, %eax
.Ltmp785:
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	.loc	2 854 19 is_stmt 0      # susan.c:854:19
	movslq	%eax, %r12
	leaq	1(%r12,%rbx), %rdi
	movl	$177, %esi
	movl	$178, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r12,%rbx), %eax
	cmpl	$8, %eax
	sbbl	%eax, %eax
	andl	$1, %eax
	.loc	2 853 19 is_stmt 1      # susan.c:853:19
	movl	%eax, -168(%rbp)        # 4-byte Spill
	cmpl	$8, %r14d
	.loc	2 880 20                # susan.c:880:20
.Ltmp786:
	movl	%eax, %r14d
	adcl	$0, %r14d
	movq	-136(%rbp), %r15        # 8-byte Reload
.Ltmp787:
	.loc	2 855 19                # susan.c:855:19
	leaq	(%rbx,%r15), %rdi
	movl	$179, %esi
	movl	$180, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	(%rbx,%r15), %r15d
	.loc	2 856 19                # susan.c:856:19
	leaq	-1(%r12,%rbx), %rdi
	movl	$181, %esi
	movl	$182, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r12,%rbx), %eax
.Ltmp788:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	cmpl	$8, %eax
	sbbl	%ecx, %ecx
	.loc	2 855 19                # susan.c:855:19
	movl	%ecx, -96(%rbp)         # 4-byte Spill
	cmpl	$8, %r15d
	sbbl	%ebx, %ebx
	cmpl	$8, %r15d
	.loc	2 880 20                # susan.c:880:20
.Ltmp789:
	adcl	$0, %r14d
.Ltmp790:
	.loc	2 856 19                # susan.c:856:19
	cmpl	$8, %eax
	.loc	2 880 20                # susan.c:880:20
.Ltmp791:
	adcl	$0, %r14d
	movl	$3, 248(%rsp)
	movl	$181, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$179, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$177, 208(%rsp)
	movl	$5, 200(%rsp)
	movl	$175, 192(%rsp)
	movl	$8, 184(%rsp)
	movl	$159, 176(%rsp)
	movl	$9, 168(%rsp)
	movl	$157, 160(%rsp)
	movl	$10, 152(%rsp)
	movl	$155, 144(%rsp)
	movl	$10, 136(%rsp)
	movl	$153, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$19, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$7, (%rsp)
	movl	$269, %edi              # imm = 0x10D
	movl	$18, %esi
	movl	$24, %edx
	movl	$20, %ecx
	movl	$3, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp792:
	.loc	2 880 18 is_stmt 0      # susan.c:880:18
	cmpl	$2, %r14d
	jne	.LBB12_72
# BB#73:                                # %land.lhs.true612
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- [RBP+-196]
	#DEBUG_VALUE: susan_thin:j <- 4
	.loc	2 853 19 is_stmt 1      # susan.c:853:19
	andl	$1, %r13d
	.loc	2 855 19                # susan.c:855:19
	andl	$1, %ebx
	.loc	2 856 19                # susan.c:856:19
	movl	%ebx, -184(%rbp)        # 4-byte Spill
	movl	-96(%rbp), %r15d        # 4-byte Reload
	andl	$1, %r15d
	movl	$269, %edi              # imm = 0x10D
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	.loc	2 880 46                # susan.c:880:46
.Ltmp793:
	movl	%r15d, %r14d
	orl	-168(%rbp), %r14d       # 4-byte Folded Reload
	.loc	2 880 56 is_stmt 0      # susan.c:880:56
	orl	%r13d, %ebx
	movl	$6, 248(%rsp)
	movl	$181, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$179, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$177, 208(%rsp)
	movl	$8, 200(%rsp)
	movl	$175, 192(%rsp)
	movl	$11, 184(%rsp)
	movl	$159, 176(%rsp)
	movl	$12, 168(%rsp)
	movl	$157, 160(%rsp)
	movl	$13, 152(%rsp)
	movl	$155, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$153, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$21, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$22, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$22, 8(%rsp)
	movl	$7, (%rsp)
	movl	$270, %edi              # imm = 0x10E
	movl	$18, %esi
	movl	$24, %edx
	movl	$23, %ecx
	movl	$3, %r8d
	movl	$23, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp794:
	.loc	2 880 18                # susan.c:880:18
	testl	%ebx, %r14d
	je	.LBB12_74
# BB#75:                                # %land.lhs.true617
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- [RBP+-196]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	%r12, -208(%rbp)        # 8-byte Spill
	movl	$270, %edi              # imm = 0x10E
	callq	_KPushCDep
	movl	$92, %edi
	callq	_KWork
	.loc	2 881 31 is_stmt 1      # susan.c:881:31
.Ltmp795:
	movq	-160(%rbp), %rax        # 8-byte Reload
	leal	-2(%rax), %eax
	.loc	2 881 30 is_stmt 0      # susan.c:881:30
	movq	-152(%rbp), %rcx        # 8-byte Reload
.Ltmp796:
	#DEBUG_VALUE: susan_thin:x_size <- undef
	imull	%ecx, %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	.loc	2 881 26                # susan.c:881:26
	movslq	%eax, %rbx
	movl	%r15d, -96(%rbp)        # 4-byte Spill
	movq	-176(%rbp), %r15        # 8-byte Reload
.Ltmp797:
	#DEBUG_VALUE: susan_thin:mid <- R15
	leaq	-1(%rbx,%r15), %rdi
	movl	$183, %esi
	movl	$184, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%rbx,%r15), %eax
	cmpl	$8, %eax
	sbbb	%r14b, %r14b
	.loc	2 881 52                # susan.c:881:52
	leaq	1(%rbx,%r15), %rdi
	movl	$185, %esi
	movl	$186, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%rbx,%r15), %eax
	cmpl	$8, %eax
	sbbb	%al, %al
	orb	%r14b, %al
	.loc	2 881 25                # susan.c:881:25
	movzbl	%al, %r14d
	.loc	2 881 20                # susan.c:881:20
	andl	%r13d, %r14d
	movq	-112(%rbp), %r12        # 8-byte Reload
	.loc	2 881 86                # susan.c:881:86
	leaq	-2(%r12,%r15), %rdi
	movl	$187, %esi
	movl	$188, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-2(%r12,%r15), %eax
	cmpl	$8, %eax
	sbbb	%bl, %bl
.Ltmp798:
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	movq	-136(%rbp), %r13        # 8-byte Reload
	.loc	2 881 112               # susan.c:881:112
	leaq	-2(%r13,%r15), %rdi
	movl	$189, %esi
	movl	$190, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-2(%r13,%r15), %eax
	cmpl	$8, %eax
	sbbb	%al, %al
	orb	%bl, %al
	.loc	2 881 85                # susan.c:881:85
	movzbl	%al, %ebx
	.loc	2 881 80                # susan.c:881:80
	andl	-96(%rbp), %ebx         # 4-byte Folded Reload
	.loc	2 881 19                # susan.c:881:19
	orl	%r14d, %ebx
	.loc	2 882 24 is_stmt 1      # susan.c:882:24
	leaq	2(%r12,%r15), %rdi
	movl	$191, %esi
	movl	$192, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	2(%r12,%r15), %eax
	cmpl	$8, %eax
	sbbb	%r14b, %r14b
	.loc	2 882 50 is_stmt 0      # susan.c:882:50
	leaq	2(%r13,%r15), %rdi
	movl	$193, %esi
	movl	$194, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	2(%r13,%r15), %eax
	cmpl	$8, %eax
	sbbb	%al, %al
	orb	%r14b, %al
.Ltmp799:
	#DEBUG_VALUE: susan_thin:x_size <- undef
	.loc	2 882 23                # susan.c:882:23
	movzbl	%al, %r13d
	.loc	2 882 18                # susan.c:882:18
	andl	-168(%rbp), %r13d       # 4-byte Folded Reload
	.loc	2 881 19 is_stmt 1      # susan.c:881:19
	orl	%ebx, %r13d
	.loc	2 882 89                # susan.c:882:89
	movq	-160(%rbp), %rax        # 8-byte Reload
	leal	2(%rax), %eax
	.loc	2 882 88 is_stmt 0      # susan.c:882:88
	movq	-152(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	.loc	2 882 84                # susan.c:882:84
	movslq	%eax, %rbx
	leaq	-1(%rbx,%r15), %rdi
	movl	$195, %esi
	movl	$196, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%rbx,%r15), %eax
	cmpl	$8, %eax
	sbbb	%r14b, %r14b
	.loc	2 882 110               # susan.c:882:110
	leaq	1(%rbx,%r15), %rdi
	movl	$197, %esi
	movl	$198, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%rbx,%r15), %eax
	cmpl	$8, %eax
	sbbb	%al, %al
	orb	%r14b, %al
	.loc	2 882 83                # susan.c:882:83
	movzbl	%al, %r14d
	.loc	2 882 78                # susan.c:882:78
	andl	-184(%rbp), %r14d       # 4-byte Folded Reload
	movl	$7, 376(%rsp)
	movl	$185, 368(%rsp)
	movl	$7, 360(%rsp)
	movl	$183, 352(%rsp)
	movl	$13, 344(%rsp)
	movl	$181, 336(%rsp)
	movl	$14, 328(%rsp)
	movl	$179, 320(%rsp)
	movl	$15, 312(%rsp)
	movl	$177, 304(%rsp)
	movl	$15, 296(%rsp)
	movl	$175, 288(%rsp)
	movl	$18, 280(%rsp)
	movl	$159, 272(%rsp)
	movl	$19, 264(%rsp)
	movl	$157, 256(%rsp)
	movl	$20, 248(%rsp)
	movl	$155, 240(%rsp)
	movl	$20, 232(%rsp)
	movl	$153, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$197, 208(%rsp)
	movl	$5, 200(%rsp)
	movl	$195, 192(%rsp)
	movl	$6, 184(%rsp)
	movl	$193, 176(%rsp)
	movl	$6, 168(%rsp)
	movl	$191, 160(%rsp)
	movl	$7, 152(%rsp)
	movl	$189, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$187, 128(%rsp)
	movl	$23, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$24, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$25, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$26, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$27, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$28, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$29, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$29, 8(%rsp)
	movl	$7, (%rsp)
	xorl	%r12d, %r12d
	movl	$264, %edi              # imm = 0x108
	movl	$26, %esi
	movl	$24, %edx
	movl	$30, %ecx
	movl	$3, %r8d
	movl	$30, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp800:
	.loc	2 880 18 is_stmt 1      # susan.c:880:18
	orl	%r13d, %r14d
	je	.LBB12_76
.Ltmp801:
# BB#78:                                # %if.then702
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R15
	#DEBUG_VALUE: susan_thin:x_size <- undef
	#DEBUG_VALUE: susan_thin:i <- [RBP+-196]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$264, %edi              # imm = 0x108
	callq	_KPushCDep
	movl	$7, %edi
	callq	_KWork
	movq	-208(%rbp), %rbx        # 8-byte Reload
	.loc	2 887 15                # susan.c:887:15
.Ltmp802:
	leaq	(%r15,%rbx), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	movb	$100, (%r15,%rbx)
.Ltmp803:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movq	-144(%rbp), %r14        # 8-byte Reload
	.loc	2 889 15                # susan.c:889:15
	addl	$-2, %r14d
.Ltmp804:
	#DEBUG_VALUE: susan_thin:j <- R14D
	movl	$8, 392(%rsp)
	movl	$185, 384(%rsp)
	movl	$8, 376(%rsp)
	movl	$183, 368(%rsp)
	movl	$14, 360(%rsp)
	movl	$181, 352(%rsp)
	movl	$15, 344(%rsp)
	movl	$179, 336(%rsp)
	movl	$16, 328(%rsp)
	movl	$177, 320(%rsp)
	movl	$16, 312(%rsp)
	movl	$175, 304(%rsp)
	movl	$19, 296(%rsp)
	movl	$159, 288(%rsp)
	movl	$20, 280(%rsp)
	movl	$157, 272(%rsp)
	movl	$21, 264(%rsp)
	movl	$155, 256(%rsp)
	movl	$21, 248(%rsp)
	movl	$153, 240(%rsp)
	movl	$1, 232(%rsp)
	movl	$254, 224(%rsp)
	movl	$6, 216(%rsp)
	movl	$197, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$195, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$193, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$191, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$189, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$187, 128(%rsp)
	movl	$24, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$25, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$26, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$27, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$28, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$29, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$30, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$30, 8(%rsp)
	movl	$7, (%rsp)
	movl	$272, %edi              # imm = 0x110
	movl	$27, %esi
	movl	$24, %edx
	movl	$31, %ecx
	movl	$3, %r8d
	movl	$31, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$9, 392(%rsp)
	movl	$185, 384(%rsp)
	movl	$9, 376(%rsp)
	movl	$183, 368(%rsp)
	movl	$15, 360(%rsp)
	movl	$181, 352(%rsp)
	movl	$16, 344(%rsp)
	movl	$179, 336(%rsp)
	movl	$17, 328(%rsp)
	movl	$177, 320(%rsp)
	movl	$17, 312(%rsp)
	movl	$175, 304(%rsp)
	movl	$20, 296(%rsp)
	movl	$159, 288(%rsp)
	movl	$21, 280(%rsp)
	movl	$157, 272(%rsp)
	movl	$22, 264(%rsp)
	movl	$155, 256(%rsp)
	movl	$22, 248(%rsp)
	movl	$153, 240(%rsp)
	movl	$2, 232(%rsp)
	movl	$252, 224(%rsp)
	movl	$7, 216(%rsp)
	movl	$197, 208(%rsp)
	movl	$7, 200(%rsp)
	movl	$195, 192(%rsp)
	movl	$8, 184(%rsp)
	movl	$193, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$191, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$189, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$187, 128(%rsp)
	movl	$25, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$26, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$27, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$28, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$29, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$30, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$31, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$31, 8(%rsp)
	movl	$7, (%rsp)
	movl	$265, %edi              # imm = 0x109
	movl	$27, %esi
	movl	$24, %edx
	movl	$32, %ecx
	movl	$3, %r8d
	movl	$32, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$8, 392(%rsp)
	movl	$185, 384(%rsp)
	movl	$8, 376(%rsp)
	movl	$183, 368(%rsp)
	movl	$14, 360(%rsp)
	movl	$181, 352(%rsp)
	movl	$15, 344(%rsp)
	movl	$179, 336(%rsp)
	movl	$16, 328(%rsp)
	movl	$177, 320(%rsp)
	movl	$16, 312(%rsp)
	movl	$175, 304(%rsp)
	movl	$19, 296(%rsp)
	movl	$159, 288(%rsp)
	movl	$20, 280(%rsp)
	movl	$157, 272(%rsp)
	movl	$21, 264(%rsp)
	movl	$155, 256(%rsp)
	movl	$21, 248(%rsp)
	movl	$153, 240(%rsp)
	movl	$1, 232(%rsp)
	movl	$252, 224(%rsp)
	movl	$6, 216(%rsp)
	movl	$197, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$195, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$193, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$191, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$189, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$187, 128(%rsp)
	movl	$24, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$25, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$26, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$27, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$28, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$29, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$30, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$30, 8(%rsp)
	movl	$7, (%rsp)
	movl	$263, %ebx              # imm = 0x107
	movl	$263, %edi              # imm = 0x107
	movl	$27, %esi
	movl	$24, %edx
	movl	$31, %ecx
	movl	$3, %r8d
	movl	$31, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 890 19                # susan.c:890:19
	movq	-160(%rbp), %rax        # 8-byte Reload
	cmpl	$4, %eax
	jg	.LBB12_80
.Ltmp805:
# BB#79:                                # %if.then710
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- undef
	#DEBUG_VALUE: susan_thin:j <- R14D
	movl	$265, %edi              # imm = 0x109
	callq	_KPushCDep
.Ltmp806:
	#DEBUG_VALUE: susan_thin:i <- 4
	callq	_KPopCDep
	movl	$4, -196(%rbp)          # 4-byte Folded Spill
	xorl	%ebx, %ebx
.Ltmp807:
.LBB12_80:                              # %if.end711
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- undef
	#DEBUG_VALUE: susan_thin:j <- R14D
	movl	$264, %edi              # imm = 0x108
	callq	_KPushCDep
	movl	$262, -88(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x106
	movl	$262, %edi              # imm = 0x106
	movl	$264, %edx              # imm = 0x108
	movl	$265, %ecx              # imm = 0x109
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$9, 392(%rsp)
	movl	$185, 384(%rsp)
	movl	$9, 376(%rsp)
	movl	$183, 368(%rsp)
	movl	$15, 360(%rsp)
	movl	$181, 352(%rsp)
	movl	$16, 344(%rsp)
	movl	$179, 336(%rsp)
	movl	$17, 328(%rsp)
	movl	$177, 320(%rsp)
	movl	$17, 312(%rsp)
	movl	$175, 304(%rsp)
	movl	$20, 296(%rsp)
	movl	$159, 288(%rsp)
	movl	$21, 280(%rsp)
	movl	$157, 272(%rsp)
	movl	$22, 264(%rsp)
	movl	$155, 256(%rsp)
	movl	$22, 248(%rsp)
	movl	$153, 240(%rsp)
	movl	$2, 232(%rsp)
	movl	$254, 224(%rsp)
	movl	$7, 216(%rsp)
	movl	$197, 208(%rsp)
	movl	$7, 200(%rsp)
	movl	$195, 192(%rsp)
	movl	$8, 184(%rsp)
	movl	$193, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$191, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$189, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$187, 128(%rsp)
	movl	$25, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$26, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$27, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$28, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$29, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$30, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$31, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$31, 8(%rsp)
	movl	$7, (%rsp)
	movl	$273, %r12d             # imm = 0x111
	movl	$273, %edi              # imm = 0x111
	movl	$27, %esi
	movl	$24, %edx
	movl	$32, %ecx
	movl	$3, %r8d
	movl	$32, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$262, %edi              # imm = 0x106
	movl	$262, %esi              # imm = 0x106
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 891 19                # susan.c:891:19
	cmpl	$3, %r14d
.Ltmp808:
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	jg	.LBB12_81
.Ltmp809:
# BB#82:                                # %if.then714
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	movl	$273, %r12d             # imm = 0x111
	movl	$273, %edi              # imm = 0x111
	callq	_KPushCDep
.Ltmp810:
	#DEBUG_VALUE: susan_thin:j <- 4
	callq	_KPopCDep
	movl	$4, %eax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	jmp	.LBB12_83
.LBB12_72:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:j <- 4
	xorl	%r15d, %r15d
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	xorl	%ebx, %ebx
	xorl	%r12d, %r12d
	movl	$268, %r13d             # imm = 0x10C
	movl	$269, %r14d             # imm = 0x10D
	jmp	.LBB12_84
.LBB12_57:                              # %if.else475
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	%r15, %r12
	.loc	2 842 36                # susan.c:842:36
.Ltmp811:
	movl	%r12d, %eax
	xorl	$1, %eax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	xorl	%ebx, %ebx
	movl	$260, %r14d             # imm = 0x104
.Ltmp812:
.LBB12_58:                              # %if.end480
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-160(%rbp), %r13        # 8-byte Reload
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$258, %edi              # imm = 0x102
	callq	_KPushCDep
	xorl	%r15d, %r15d
	movl	$261, %edi              # imm = 0x105
	xorl	%esi, %esi
	movl	$258, %edx              # imm = 0x102
	movl	$259, %ecx              # imm = 0x103
	movl	%ebx, %r8d
	movl	%r14d, %r9d
	callq	_KPhi4To1
	movl	$257, %edi              # imm = 0x101
	xorl	%esi, %esi
	movl	$258, %edx              # imm = 0x102
	movl	$259, %ecx              # imm = 0x103
	movl	%ebx, %r8d
	movl	%r14d, %r9d
	callq	_KPhi4To1
	movl	$31, %edi
	callq	_KWork
	.loc	2 845 28                # susan.c:845:28
.Ltmp813:
	movq	-112(%rbp), %rax        # 8-byte Reload
	leal	(%rax,%r13), %eax
	.loc	2 845 27 is_stmt 0      # susan.c:845:27
	movq	-152(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	leal	(%r12,%rcx), %ecx
	addl	%eax, %ecx
	.loc	2 845 25                # susan.c:845:25
	movslq	%ecx, %r14
	movq	-224(%rbp), %rbx        # 8-byte Reload
.Ltmp814:
	#DEBUG_VALUE: susan_thin:r <- RBX
	leaq	(%rbx,%r14), %rdi
	movl	$161, %esi
	movl	$162, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 845 18                # susan.c:845:18
	movsbl	(%rbx,%r14), %eax
.Ltmp815:
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	cvtsi2ssl	%eax, %xmm0
	.loc	2 845 45                # susan.c:845:45
	movsbl	-225(%rbp), %eax        # 1-byte Folded Reload
	cvtsi2ssl	%eax, %xmm1
	.loc	2 845 18                # susan.c:845:18
	divss	%xmm1, %xmm0
	.loc	2 845 17                # susan.c:845:17
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -96(%rbp)        # 8-byte Spill
	movl	$22, 216(%rsp)
	movl	$161, 208(%rsp)
	movl	$28, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$29, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$30, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$30, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$33, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$34, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$35, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$36, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$37, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$38, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$39, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$39, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$22, 8(%rsp)
	movl	$5, (%rsp)
	movl	$292, %edi              # imm = 0x124
	movl	$16, %esi
	movl	$24, %edx
	movl	$40, %ecx
	movl	$3, %r8d
	movl	$40, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp816:
	.loc	2 845 17                # susan.c:845:17
	movsd	-96(%rbp), %xmm0        # 8-byte Reload
	ucomisd	.LCPI12_0(%rip), %xmm0
	movq	%r12, %r13
	jbe	.LBB12_59
# BB#60:                                # %if.then492
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	-112(%rbp), %r15        # 8-byte Reload
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	movl	$292, %edi              # imm = 0x124
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$23, 232(%rsp)
	movl	$161, 224(%rsp)
	movl	$1, 216(%rsp)
	movl	$257, 208(%rsp)         # imm = 0x101
	movl	$29, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$30, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$31, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$31, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$34, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$35, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$36, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$37, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$38, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$39, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$40, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$40, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$23, 8(%rsp)
	movl	$5, (%rsp)
	movl	$293, %edi              # imm = 0x125
	movl	$17, %esi
	movl	$24, %edx
	movl	$41, %ecx
	movl	$3, %r8d
	movl	$41, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 846 20 is_stmt 1      # susan.c:846:20
.Ltmp817:
	testl	%r13d, %r13d
	jne	.LBB12_65
# BB#61:                                # %land.lhs.true495
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$293, %edi              # imm = 0x125
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	.loc	2 846 38 is_stmt 0      # susan.c:846:38
.Ltmp818:
	movq	-160(%rbp), %rax        # 8-byte Reload
	leal	(%rax,%r15,2), %eax
	.loc	2 846 37                # susan.c:846:37
	movq	-152(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	.loc	2 846 33                # susan.c:846:33
	movslq	%eax, %r12
	movq	-176(%rbp), %rbx        # 8-byte Reload
.Ltmp819:
	#DEBUG_VALUE: susan_thin:mid <- RBX
	leaq	(%rbx,%r12), %rdi
	movl	$163, %esi
	movl	$164, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp820:
	.loc	2 846 20                # susan.c:846:20
	movzbl	(%rbx,%r12), %ebx
.Ltmp821:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movl	$1, 248(%rsp)
	movl	$163, 240(%rsp)
	movl	$24, 232(%rsp)
	movl	$161, 224(%rsp)
	movl	$2, 216(%rsp)
	movl	$257, 208(%rsp)         # imm = 0x101
	movl	$30, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$31, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$32, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$32, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$35, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$36, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$37, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$38, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$39, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$40, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$41, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$41, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$24, 8(%rsp)
	movl	$5, (%rsp)
	movl	$294, %edi              # imm = 0x126
	movl	$18, %esi
	movl	$24, %edx
	movl	$42, %ecx
	movl	$3, %r8d
	movl	$42, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	$8, %ebx
	jb	.LBB12_65
# BB#62:                                # %land.lhs.true505
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$294, %edi              # imm = 0x126
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movq	-176(%rbp), %rbx        # 8-byte Reload
.Ltmp822:
	#DEBUG_VALUE: susan_thin:mid <- RBX
	.loc	2 846 64                # susan.c:846:64
	leaq	-1(%r12,%rbx), %rdi
	movl	$165, %esi
	movl	$166, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp823:
	.loc	2 846 20                # susan.c:846:20
	movzbl	-1(%r12,%rbx), %ebx
.Ltmp824:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movl	$1, 264(%rsp)
	movl	$165, 256(%rsp)
	movl	$2, 248(%rsp)
	movl	$163, 240(%rsp)
	movl	$25, 232(%rsp)
	movl	$161, 224(%rsp)
	movl	$3, 216(%rsp)
	movl	$257, 208(%rsp)         # imm = 0x101
	movl	$31, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$32, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$33, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$33, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$36, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$37, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$38, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$39, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$40, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$41, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$42, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$42, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$25, 8(%rsp)
	movl	$5, (%rsp)
	movl	$295, %edi              # imm = 0x127
	movl	$19, %esi
	movl	$24, %edx
	movl	$43, %ecx
	movl	$3, %r8d
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	$8, %ebx
	jb	.LBB12_65
# BB#63:                                # %land.lhs.true516
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$295, %edi              # imm = 0x127
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movq	-176(%rbp), %rbx        # 8-byte Reload
.Ltmp825:
	#DEBUG_VALUE: susan_thin:mid <- RBX
	.loc	2 846 97                # susan.c:846:97
	leaq	1(%r12,%rbx), %rdi
	movl	$167, %esi
	movl	$168, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp826:
	.loc	2 846 20                # susan.c:846:20
	movzbl	1(%r12,%rbx), %ebx
.Ltmp827:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movl	$1, 280(%rsp)
	movl	$167, 272(%rsp)
	movl	$2, 264(%rsp)
	movl	$165, 256(%rsp)
	movl	$3, 248(%rsp)
	movl	$163, 240(%rsp)
	movl	$26, 232(%rsp)
	movl	$161, 224(%rsp)
	movl	$4, 216(%rsp)
	movl	$257, 208(%rsp)         # imm = 0x101
	movl	$32, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$33, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$34, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$34, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$37, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$38, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$39, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$40, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$41, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$42, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$43, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$43, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$26, 8(%rsp)
	movl	$5, (%rsp)
	movl	$296, %edi              # imm = 0x128
	movl	$20, %esi
	movl	$24, %edx
	movl	$44, %ecx
	movl	$3, %r8d
	movl	$44, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	$8, %ebx
	jb	.LBB12_65
# BB#64:                                # %land.lhs.true516.if.then561_crit_edge
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	.loc	2 848 21 is_stmt 1      # susan.c:848:21
.Ltmp828:
	movq	-160(%rbp), %r12        # 8-byte Reload
                                        # kill: R12D<def> R12D<kill> R12<kill> R12<def>
	movq	-152(%rbp), %rax        # 8-byte Reload
	imull	%eax, %r12d
	movq	-144(%rbp), %rax        # 8-byte Reload
	addl	%eax, %r12d
	movq	-176(%rbp), %r13        # 8-byte Reload
.Ltmp829:
	#DEBUG_VALUE: susan_thin:mid <- R13
	movl	$0, %r15d
	jmp	.LBB12_70
.Ltmp830:
.LBB12_65:                              # %lor.lhs.false
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$293, %edi              # imm = 0x125
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$24, 248(%rsp)
	movl	$161, 240(%rsp)
	movl	$1, 232(%rsp)
	movl	$261, 224(%rsp)         # imm = 0x105
	movl	$2, 216(%rsp)
	movl	$257, 208(%rsp)         # imm = 0x101
	movl	$30, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$31, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$32, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$32, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$35, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$36, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$37, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$38, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$39, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$40, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$41, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$41, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$24, 8(%rsp)
	movl	$5, (%rsp)
	movl	$297, %edi              # imm = 0x129
	movl	$18, %esi
	movl	$24, %edx
	movl	$42, %ecx
	movl	$3, %r8d
	movl	$42, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 846 20                # susan.c:846:20
	testl	%r15d, %r15d
	jne	.LBB12_66
# BB#67:                                # %land.lhs.true529
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$297, %edi              # imm = 0x129
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	.loc	2 847 37                # susan.c:847:37
.Ltmp831:
	movq	-160(%rbp), %r12        # 8-byte Reload
                                        # kill: R12D<def> R12D<kill> R12<kill> R12<def>
	movq	-152(%rbp), %rax        # 8-byte Reload
	imull	%eax, %r12d
	movq	-144(%rbp), %rax        # 8-byte Reload
	addl	%eax, %r12d
	leal	(%r12,%r13,2), %eax
	.loc	2 847 33 is_stmt 0      # susan.c:847:33
	movslq	%eax, %rbx
	movq	%r13, -96(%rbp)         # 8-byte Spill
	movq	-176(%rbp), %r13        # 8-byte Reload
.Ltmp832:
	#DEBUG_VALUE: susan_thin:mid <- R13
	leaq	(%r13,%rbx), %rdi
	movl	$169, %esi
	movl	$170, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp833:
	.loc	2 846 20 is_stmt 1      # susan.c:846:20
	movzbl	(%r13,%rbx), %r15d
	movl	$1, 264(%rsp)
	movl	$169, 256(%rsp)
	movl	$25, 248(%rsp)
	movl	$161, 240(%rsp)
	movl	$2, 232(%rsp)
	movl	$261, 224(%rsp)         # imm = 0x105
	movl	$3, 216(%rsp)
	movl	$257, 208(%rsp)         # imm = 0x101
	movl	$31, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$32, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$33, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$33, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$36, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$37, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$38, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$39, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$40, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$41, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$42, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$42, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$25, 8(%rsp)
	movl	$5, (%rsp)
	movl	$298, %edi              # imm = 0x12A
	movl	$19, %esi
	movl	$24, %edx
	movl	$43, %ecx
	movl	$3, %r8d
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	$8, %r15d
	jb	.LBB12_66
.Ltmp834:
# BB#68:                                # %land.lhs.true539
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	-96(%rbp), %rbx         # 8-byte Reload
	.loc	2 847 51                # susan.c:847:51
.Ltmp835:
	addl	%ebx, %ebx
	movq	%rbx, -96(%rbp)         # 8-byte Spill
	movl	$298, %edi              # imm = 0x12A
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movl	-244(%rbp), %eax        # 4-byte Reload
	.loc	2 847 68 is_stmt 0      # susan.c:847:68
	addl	%ebx, %eax
	.loc	2 847 64                # susan.c:847:64
	movslq	%eax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$171, %esi
	movl	$172, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp836:
	.loc	2 846 20 is_stmt 1      # susan.c:846:20
	movzbl	(%r13,%rbx), %r15d
	movl	$1, 280(%rsp)
	movl	$171, 272(%rsp)
	movl	$2, 264(%rsp)
	movl	$169, 256(%rsp)
	movl	$26, 248(%rsp)
	movl	$161, 240(%rsp)
	movl	$3, 232(%rsp)
	movl	$261, 224(%rsp)         # imm = 0x105
	movl	$4, 216(%rsp)
	movl	$257, 208(%rsp)         # imm = 0x101
	movl	$32, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$33, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$34, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$34, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$37, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$38, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$39, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$40, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$41, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$42, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$43, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$43, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$26, 8(%rsp)
	movl	$5, (%rsp)
	movl	$299, %edi              # imm = 0x12B
	movl	$20, %esi
	movl	$24, %edx
	movl	$44, %ecx
	movl	$3, %r8d
	movl	$44, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	$8, %r15d
	jb	.LBB12_66
.Ltmp837:
# BB#69:                                # %land.lhs.true550
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$299, %edi              # imm = 0x12B
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movq	-96(%rbp), %rax         # 8-byte Reload
	.loc	2 847 101               # susan.c:847:101
.Ltmp838:
	addl	-248(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 847 97 is_stmt 0      # susan.c:847:97
	movslq	%eax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$173, %esi
	movl	$174, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp839:
	.loc	2 846 20 is_stmt 1      # susan.c:846:20
	movzbl	(%r13,%rbx), %r15d
	movl	$1, 296(%rsp)
	movl	$173, 288(%rsp)
	movl	$2, 280(%rsp)
	movl	$171, 272(%rsp)
	movl	$3, 264(%rsp)
	movl	$169, 256(%rsp)
	movl	$27, 248(%rsp)
	movl	$161, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$261, 224(%rsp)         # imm = 0x105
	movl	$5, 216(%rsp)
	movl	$257, 208(%rsp)         # imm = 0x101
	movl	$33, 200(%rsp)
	movl	$159, 192(%rsp)
	movl	$34, 184(%rsp)
	movl	$157, 176(%rsp)
	movl	$35, 168(%rsp)
	movl	$155, 160(%rsp)
	movl	$35, 152(%rsp)
	movl	$153, 144(%rsp)
	movl	$38, 136(%rsp)
	movl	$16, 128(%rsp)
	movl	$39, 120(%rsp)
	movl	$15, 112(%rsp)
	movl	$40, 104(%rsp)
	movl	$13, 96(%rsp)
	movl	$41, 88(%rsp)
	movl	$12, 80(%rsp)
	movl	$42, 72(%rsp)
	movl	$10, 64(%rsp)
	movl	$43, 56(%rsp)
	movl	$9, 48(%rsp)
	movl	$44, 40(%rsp)
	movl	$8, 32(%rsp)
	movl	$44, 24(%rsp)
	movl	$7, 16(%rsp)
	movl	$27, 8(%rsp)
	movl	$5, (%rsp)
	movl	$300, %edi              # imm = 0x12C
	movl	$21, %esi
	movl	$24, %edx
	movl	$45, %ecx
	movl	$3, %r8d
	movl	$45, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	$8, %r15d
	movl	$0, %r15d
	jb	.LBB12_66
.Ltmp840:
.LBB12_70:                              # %if.then561
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	%r13, -176(%rbp)        # 8-byte Spill
	movl	$10, %edi
	callq	_KWork
	.loc	2 848 17                # susan.c:848:17
.Ltmp841:
	movslq	%r12d, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	movb	$100, (%r13,%rbx)
	.loc	2 849 17                # susan.c:849:17
	leaq	(%r13,%r14), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	movb	$3, (%r13,%r14)
.Ltmp842:
.LBB12_59:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	xorl	%ebx, %ebx
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	movl	$268, %r13d             # imm = 0x10C
	jmp	.LBB12_84
.LBB12_66:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	xorl	%r15d, %r15d
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	movl	$268, %r13d             # imm = 0x10C
	xorl	%ebx, %ebx
	jmp	.LBB12_84
.LBB12_74:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:j <- 4
	xorl	%r15d, %r15d
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	xorl	%r12d, %r12d
	jmp	.LBB12_77
.LBB12_76:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
.Ltmp843:
	#DEBUG_VALUE: susan_thin:mid <- R15
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- undef
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$264, %r15d             # imm = 0x108
.LBB12_77:                              # %if.end718
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	$268, %r13d             # imm = 0x10C
	movl	$270, %ebx              # imm = 0x10E
	movl	$269, %r14d             # imm = 0x10D
	jmp	.LBB12_84
.LBB12_81:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
.Ltmp844:
	#DEBUG_VALUE: susan_thin:j <- R14D
	movl	$272, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x110
.Ltmp845:
	#DEBUG_VALUE: susan_thin:j <- [RBP+-144]
	movq	%r14, -144(%rbp)        # 8-byte Spill
.LBB12_83:                              # %if.end718
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-196(%rbp), %eax        # 4-byte Reload
                                        # kill: EAX<def> EAX<kill> RAX<def>
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movl	$268, %r13d             # imm = 0x10C
	movl	$270, %ebx              # imm = 0x10E
	movl	$269, %r14d             # imm = 0x10D
	movl	$264, %r15d             # imm = 0x108
	.align	16, 0x90
.LBB12_84:                              # %if.end718
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
.Ltmp846:
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$249, %edi
	callq	_KPushCDep
	movl	%r12d, 24(%rsp)
	movl	%r15d, 16(%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r14d, (%rsp)
	movl	%r14d, %r12d
	movl	$271, %edi              # imm = 0x10F
	movl	$7, %edx
	movl	$249, %ecx
	movl	$267, %r8d              # imm = 0x10B
	xorl	%eax, %eax
	movl	-104(%rbp), %esi        # 4-byte Reload
	movl	%r13d, %r9d
	callq	_KPhi
	movl	%r15d, 16(%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r12d, (%rsp)
	movl	$266, %edi              # imm = 0x10A
	movl	$6, %edx
	movl	$249, %ecx
	movl	$267, %r8d              # imm = 0x10B
	xorl	%eax, %eax
	movl	-88(%rbp), %esi         # 4-byte Reload
	movl	%r13d, %r9d
	callq	_KPhi
	movl	$1, %edi
	callq	_KWork
	movl	$3, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$4, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$6, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$7, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$8, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$9, 8(%rsp)
	movl	$7, (%rsp)
	movl	$278, %ebx              # imm = 0x116
	movl	$278, %edi              # imm = 0x116
	movl	$10, %esi
	movl	$24, %edx
	movl	$10, %ecx
	movl	$3, %r8d
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$271, %edi              # imm = 0x10F
	movl	$271, %esi              # imm = 0x10F
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$266, %edi              # imm = 0x10A
	movl	$266, %esi              # imm = 0x10A
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 898 13                # susan.c:898:13
	cmpl	$3, -192(%rbp)          # 4-byte Folded Reload
	jl	.LBB12_85
# BB#86:                                # %if.then721
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$278, %edi              # imm = 0x116
	callq	_KPushCDep
	movl	$40, %edi
	callq	_KWork
	movq	-160(%rbp), %rcx        # 8-byte Reload
	.loc	2 899 22                # susan.c:899:22
.Ltmp847:
	leal	-1(%rcx), %eax
.Ltmp848:
	#DEBUG_VALUE: susan_thin:i <- EAX
	.loc	2 899 21 is_stmt 0      # susan.c:899:21
	movq	%rax, -168(%rbp)        # 8-byte Spill
                                        # kill: EAX<def> EAX<kill> RAX<kill>
.Ltmp849:
	#DEBUG_VALUE: susan_thin:i <- [RBP+-168]
	movq	-152(%rbp), %rdx        # 8-byte Reload
.Ltmp850:
	#DEBUG_VALUE: susan_thin:x_size <- EDX
	imull	%edx, %eax
	movq	%rdx, %r15
.Ltmp851:
	#DEBUG_VALUE: susan_thin:x_size <- R15D
	movq	-144(%rbp), %r14        # 8-byte Reload
	addl	%r14d, %eax
	.loc	2 899 17                # susan.c:899:17
	movslq	%eax, %rbx
	movq	%rbx, -112(%rbp)        # 8-byte Spill
	movq	%rcx, %r12
	movq	-176(%rbp), %r13        # 8-byte Reload
.Ltmp852:
	#DEBUG_VALUE: susan_thin:mid <- R13
	leaq	(%r13,%rbx), %rdi
	movl	$199, %esi
	movl	$200, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -88(%rbp)         # 4-byte Spill
	cmpl	$8, %eax
	sbbl	%eax, %eax
	.loc	2 900 21 is_stmt 1      # susan.c:900:21
	movl	%eax, -96(%rbp)         # 4-byte Spill
	movl	%r12d, %eax
	imull	%r15d, %eax
.Ltmp853:
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	addl	%r14d, %eax
	.loc	2 900 17 is_stmt 0      # susan.c:900:17
	movslq	%eax, %r12
	leaq	1(%r12,%r13), %rdi
	movl	$201, %esi
	movl	$202, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r12,%r13), %eax
	cmpl	$8, %eax
	sbbl	%r15d, %r15d
	andl	$1, %r15d
	.loc	2 899 17 is_stmt 1      # susan.c:899:17
	movl	%r15d, -104(%rbp)       # 4-byte Spill
	cmpl	$8, -88(%rbp)           # 4-byte Folded Reload
	.loc	2 903 15                # susan.c:903:15
.Ltmp854:
	adcl	$0, %r15d
.Ltmp855:
	.loc	2 901 22                # susan.c:901:22
	movq	-160(%rbp), %rax        # 8-byte Reload
	leal	1(%rax), %eax
	.loc	2 901 21 is_stmt 0      # susan.c:901:21
	movq	-152(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	addl	%r14d, %eax
	.loc	2 901 17                # susan.c:901:17
	movslq	%eax, %rbx
	movq	%rbx, -136(%rbp)        # 8-byte Spill
	leaq	(%r13,%rbx), %rdi
	movl	$203, %esi
	movl	$204, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	(%r13,%rbx), %ebx
	.loc	2 902 17 is_stmt 1      # susan.c:902:17
	leaq	-1(%r12,%r13), %rdi
	movl	$205, %esi
	movl	$206, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r12,%r13), %eax
	movq	%r12, %r14
	cmpl	$8, %eax
	sbbl	%r12d, %r12d
	.loc	2 901 17                # susan.c:901:17
	cmpl	$8, %ebx
	sbbl	%ecx, %ecx
	movl	%ecx, -88(%rbp)         # 4-byte Spill
	cmpl	$8, %ebx
	.loc	2 903 15                # susan.c:903:15
.Ltmp856:
	adcl	$0, %r15d
.Ltmp857:
	.loc	2 902 17                # susan.c:902:17
	cmpl	$8, %eax
	.loc	2 903 15                # susan.c:903:15
.Ltmp858:
	adcl	$0, %r15d
	movl	$3, 184(%rsp)
	movl	$205, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$203, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$201, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$199, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$7, (%rsp)
	movl	$279, %edi              # imm = 0x117
	movl	$14, %esi
	movl	$24, %edx
	movl	$15, %ecx
	movl	$3, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp859:
	.loc	2 903 14 is_stmt 0      # susan.c:903:14
	cmpl	$2, %r15d
	jl	.LBB12_87
.Ltmp860:
# BB#88:                                # %if.then759
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- [RBP+-168]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	%r14, -192(%rbp)        # 8-byte Spill
	.loc	2 899 17 is_stmt 1      # susan.c:899:17
	andl	$1, -96(%rbp)           # 4-byte Folded Spill
	.loc	2 901 17                # susan.c:901:17
	andl	$1, -88(%rbp)           # 4-byte Folded Spill
	.loc	2 902 17                # susan.c:902:17
	andl	$1, %r12d
	movl	$279, %edi              # imm = 0x117
	callq	_KPushCDep
	movl	$56, %edi
	callq	_KWork
	movq	-112(%rbp), %rbx        # 8-byte Reload
	.loc	2 904 19                # susan.c:904:19
.Ltmp861:
	leaq	-1(%rbx,%r13), %rdi
	movl	$207, %esi
	movl	$208, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%rbx,%r13), %eax
	cmpl	$8, %eax
	sbbl	%eax, %eax
	andl	$1, %eax
	movl	%eax, -184(%rbp)        # 4-byte Spill
	.loc	2 905 19                # susan.c:905:19
	leaq	1(%rbx,%r13), %rdi
	movl	$209, %esi
	movl	$210, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%rbx,%r13), %eax
	cmpl	$8, %eax
	sbbl	%r15d, %r15d
	andl	$1, %r15d
	movq	-136(%rbp), %r14        # 8-byte Reload
	.loc	2 906 19                # susan.c:906:19
	leaq	-1(%r14,%r13), %rdi
	movl	$211, %esi
	movl	$212, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r14,%r13), %eax
	cmpl	$8, %eax
	sbbl	%ebx, %ebx
	andl	$1, %ebx
	.loc	2 907 19                # susan.c:907:19
	leaq	1(%r14,%r13), %rdi
	movl	$213, %esi
	movl	$214, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r14,%r13), %eax
	cmpl	$8, %eax
	sbbl	%eax, %eax
	andl	$1, %eax
	movl	-96(%rbp), %esi         # 4-byte Reload
	movl	-184(%rbp), %edi        # 4-byte Reload
	.loc	2 908 18                # susan.c:908:18
	orl	%esi, %edi
.Ltmp862:
	#DEBUG_VALUE: susan_thin:p1 <- EDI
	movl	-104(%rbp), %ecx        # 4-byte Reload
	.loc	2 909 18                # susan.c:909:18
	orl	%ecx, %r15d
.Ltmp863:
	#DEBUG_VALUE: susan_thin:p2 <- R15D
	movl	-88(%rbp), %edx         # 4-byte Reload
	.loc	2 910 18                # susan.c:910:18
	orl	%edx, %eax
.Ltmp864:
	#DEBUG_VALUE: susan_thin:p3 <- EAX
	.loc	2 911 18                # susan.c:911:18
	orl	%r12d, %ebx
.Ltmp865:
	#DEBUG_VALUE: susan_thin:p4 <- EBX
	.loc	2 913 42                # susan.c:913:42
	andl	%r15d, %esi
	.loc	2 913 53 is_stmt 0      # susan.c:913:53
	andl	%eax, %ecx
	.loc	2 913 64                # susan.c:913:64
	andl	%ebx, %edx
	.loc	2 913 41                # susan.c:913:41
	notl	%r12d
	andl	%edi, %r12d
	addl	%r15d, %r12d
	subl	%esi, %r12d
	.loc	2 913 19                # susan.c:913:19
	addl	%ebx, %r12d
	subl	%edx, %r12d
	addl	%eax, %r12d
	.loc	2 913 18                # susan.c:913:18
	subl	%ecx, %r12d
	movl	$8, 248(%rsp)
	movl	$213, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$211, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$209, 208(%rsp)
	movl	$7, 200(%rsp)
	movl	$207, 192(%rsp)
	movl	$11, 184(%rsp)
	movl	$205, 176(%rsp)
	movl	$12, 168(%rsp)
	movl	$203, 160(%rsp)
	movl	$13, 152(%rsp)
	movl	$201, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$199, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$21, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$22, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$22, 8(%rsp)
	movl	$7, (%rsp)
	movl	$276, %edi              # imm = 0x114
.Ltmp866:
	movl	$18, %esi
	movl	$24, %edx
	movl	$23, %ecx
	movl	$3, %r8d
	movl	$23, %r9d
	xorl	%eax, %eax
.Ltmp867:
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp868:
	.loc	2 913 17                # susan.c:913:17
	cmpl	$1, %r12d
	jg	.LBB12_89
.Ltmp869:
# BB#90:                                # %if.then813
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- [RBP+-168]
	#DEBUG_VALUE: susan_thin:j <- 4
	movl	$276, %edi              # imm = 0x114
	callq	_KPushCDep
	movl	$7, %edi
	callq	_KWork
	movq	-192(%rbp), %rbx        # 8-byte Reload
	.loc	2 914 15 is_stmt 1      # susan.c:914:15
.Ltmp870:
	leaq	(%r13,%rbx), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	movb	$100, (%r13,%rbx)
	movq	-144(%rbp), %r15        # 8-byte Reload
	.loc	2 916 15                # susan.c:916:15
	addl	$-2, %r15d
.Ltmp871:
	#DEBUG_VALUE: susan_thin:j <- R15D
	movl	$9, 264(%rsp)
	movl	$213, 256(%rsp)
	movl	$8, 248(%rsp)
	movl	$211, 240(%rsp)
	movl	$9, 232(%rsp)
	movl	$209, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$207, 208(%rsp)
	movl	$12, 200(%rsp)
	movl	$205, 192(%rsp)
	movl	$13, 184(%rsp)
	movl	$203, 176(%rsp)
	movl	$14, 168(%rsp)
	movl	$201, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$199, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$271, 128(%rsp)         # imm = 0x10F
	movl	$17, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$18, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$19, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$20, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$21, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$22, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$23, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$23, 8(%rsp)
	movl	$7, (%rsp)
	movl	$280, %edi              # imm = 0x118
	movl	$19, %esi
	movl	$24, %edx
	movl	$24, %ecx
	movl	$3, %r8d
	movl	$24, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$10, 264(%rsp)
	movl	$213, 256(%rsp)
	movl	$9, 248(%rsp)
	movl	$211, 240(%rsp)
	movl	$10, 232(%rsp)
	movl	$209, 224(%rsp)
	movl	$9, 216(%rsp)
	movl	$207, 208(%rsp)
	movl	$13, 200(%rsp)
	movl	$205, 192(%rsp)
	movl	$14, 184(%rsp)
	movl	$203, 176(%rsp)
	movl	$15, 168(%rsp)
	movl	$201, 160(%rsp)
	movl	$15, 152(%rsp)
	movl	$199, 144(%rsp)
	movl	$2, 136(%rsp)
	movl	$266, 128(%rsp)         # imm = 0x10A
	movl	$18, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$19, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$20, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$21, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$22, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$23, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$24, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$24, 8(%rsp)
	movl	$7, (%rsp)
	movl	$277, %edi              # imm = 0x115
	movl	$19, %esi
	movl	$24, %edx
	movl	$25, %ecx
	movl	$3, %r8d
	movl	$25, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$9, 264(%rsp)
	movl	$213, 256(%rsp)
	movl	$8, 248(%rsp)
	movl	$211, 240(%rsp)
	movl	$9, 232(%rsp)
	movl	$209, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$207, 208(%rsp)
	movl	$12, 200(%rsp)
	movl	$205, 192(%rsp)
	movl	$13, 184(%rsp)
	movl	$203, 176(%rsp)
	movl	$14, 168(%rsp)
	movl	$201, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$199, 144(%rsp)
	movl	$1, 136(%rsp)
	movl	$266, 128(%rsp)         # imm = 0x10A
	movl	$17, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$18, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$19, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$20, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$21, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$22, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$23, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$23, 8(%rsp)
	movl	$7, (%rsp)
	movl	$275, %r12d             # imm = 0x113
	movl	$275, %edi              # imm = 0x113
	movl	$19, %esi
	movl	$24, %edx
	movl	$24, %ecx
	movl	$3, %r8d
	movl	$24, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 917 19                # susan.c:917:19
	movq	-160(%rbp), %rax        # 8-byte Reload
	cmpl	$4, %eax
	jg	.LBB12_92
.Ltmp872:
# BB#91:                                # %if.then822
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- R15D
	movl	$277, %edi              # imm = 0x115
	callq	_KPushCDep
.Ltmp873:
	#DEBUG_VALUE: susan_thin:i <- 4
	callq	_KPopCDep
	movl	$4, %eax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	xorl	%r12d, %r12d
.Ltmp874:
.LBB12_92:                              # %if.end823
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- R15D
	movl	$276, %edi              # imm = 0x114
	callq	_KPushCDep
	movl	$274, %edi              # imm = 0x112
	movl	$276, %edx              # imm = 0x114
	movl	$277, %ecx              # imm = 0x115
	movl	%r12d, %esi
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$10, 264(%rsp)
	movl	$213, 256(%rsp)
	movl	$9, 248(%rsp)
	movl	$211, 240(%rsp)
	movl	$10, 232(%rsp)
	movl	$209, 224(%rsp)
	movl	$9, 216(%rsp)
	movl	$207, 208(%rsp)
	movl	$13, 200(%rsp)
	movl	$205, 192(%rsp)
	movl	$14, 184(%rsp)
	movl	$203, 176(%rsp)
	movl	$15, 168(%rsp)
	movl	$201, 160(%rsp)
	movl	$15, 152(%rsp)
	movl	$199, 144(%rsp)
	movl	$2, 136(%rsp)
	movl	$271, 128(%rsp)         # imm = 0x10F
	movl	$18, 120(%rsp)
	movl	$16, 112(%rsp)
	movl	$19, 104(%rsp)
	movl	$15, 96(%rsp)
	movl	$20, 88(%rsp)
	movl	$13, 80(%rsp)
	movl	$21, 72(%rsp)
	movl	$12, 64(%rsp)
	movl	$22, 56(%rsp)
	movl	$10, 48(%rsp)
	movl	$23, 40(%rsp)
	movl	$9, 32(%rsp)
	movl	$24, 24(%rsp)
	movl	$8, 16(%rsp)
	movl	$24, 8(%rsp)
	movl	$7, (%rsp)
	movl	$281, %edi              # imm = 0x119
	movl	$19, %esi
	movl	$24, %edx
	movl	$25, %ecx
	movl	$3, %r8d
	movl	$25, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$274, %edi              # imm = 0x112
	movl	$274, %esi              # imm = 0x112
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 918 19                # susan.c:918:19
	cmpl	$3, %r15d
	jg	.LBB12_93
.Ltmp875:
# BB#94:                                # %if.then826
                                        #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	movl	$281, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x119
	movl	$281, %edi              # imm = 0x119
	callq	_KPushCDep
.Ltmp876:
	#DEBUG_VALUE: susan_thin:j <- 4
	callq	_KPopCDep
	movl	$4, %eax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movl	$276, %r14d             # imm = 0x114
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$278, %ebx              # imm = 0x116
	movl	$248, -96(%rbp)         # 4-byte Folded Spill
	jmp	.LBB12_95
	.align	16, 0x90
.LBB12_85:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:i <- 4
	#DEBUG_VALUE: susan_thin:j <- 4
	xorl	%r12d, %r12d
	movq	-160(%rbp), %r13        # 8-byte Reload
                                        # kill: R13D<def> R13D<kill> R13<kill> R13<def>
	movq	%r13, -168(%rbp)        # 8-byte Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	xorl	%r14d, %r14d
	movl	$271, -88(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x10F
	movl	$251, -104(%rbp)        # 4-byte Folded Spill
	movl	$266, %r15d             # imm = 0x10A
	movl	$248, -96(%rbp)         # 4-byte Folded Spill
	jmp	.LBB12_96
.LBB12_87:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	-160(%rbp), %rax        # 8-byte Reload
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
                                        # kill: EAX<def> EAX<kill> RAX<kill> RAX<def>
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$279, %r12d             # imm = 0x117
	movl	$278, %ebx              # imm = 0x116
	movl	$248, -96(%rbp)         # 4-byte Folded Spill
	movl	$251, -104(%rbp)        # 4-byte Folded Spill
	movl	$266, %r15d             # imm = 0x10A
	xorl	%r14d, %r14d
	movl	$271, -88(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x10F
	jmp	.LBB12_96
.LBB12_89:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
.Ltmp877:
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- 4
	movq	-160(%rbp), %rax        # 8-byte Reload
.Ltmp878:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
                                        # kill: EAX<def> EAX<kill> RAX<kill> RAX<def>
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$278, %ebx              # imm = 0x116
	movl	$248, -96(%rbp)         # 4-byte Folded Spill
	movl	$251, -104(%rbp)        # 4-byte Folded Spill
	movl	$266, %r15d             # imm = 0x10A
	movl	$279, %r12d             # imm = 0x117
	movl	$276, %r14d             # imm = 0x114
	movl	$271, -88(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x10F
	jmp	.LBB12_96
.LBB12_93:                              #   in Loop: Header=BB12_3 Depth=2
	#DEBUG_VALUE: susan_thin:r <- [RBP+-224]
.Ltmp879:
	#DEBUG_VALUE: susan_thin:mid <- R13
	#DEBUG_VALUE: susan_thin:x_size <- [RBP+-152]
	#DEBUG_VALUE: susan_thin:j <- R15D
	#DEBUG_VALUE: susan_thin:j <- [RBP+-144]
	movq	%r15, -144(%rbp)        # 8-byte Spill
.Ltmp880:
	#DEBUG_VALUE: susan_thin:mid <- [RBP+-176]
	movl	$281, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x119
	movl	$278, %ebx              # imm = 0x116
	movl	$248, -96(%rbp)         # 4-byte Folded Spill
	movl	$276, %r14d             # imm = 0x114
	movl	$280, -88(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x118
.LBB12_95:                              # %for.inc832
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	$251, -104(%rbp)        # 4-byte Folded Spill
	movl	$274, %r15d             # imm = 0x112
	movl	$279, %r12d             # imm = 0x117
	jmp	.LBB12_96
.LBB12_98:                              # %for.cond.pre_exit.for.end837
	#DEBUG_VALUE: susan_thin:i <- 4
	movl	$1, %esi
	movabsq	$5475059367311067671, %rdi # imm = 0x4BFB517C88C04A17
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$-2660891841875396626, %rdi # imm = 0xDB129CF7C34837EE
	callq	_KExitRegion
	.loc	2 925 1                 # susan.c:925:1
	addq	$680, %rsp              # imm = 0x2A8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp881:
.Ltmp882:
	.size	susan_thin, .Ltmp882-susan_thin
.Lfunc_end12:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI13_0:
	.quad	4606281698874543309     # double 0.90000000000000002
	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI13_1:
	.long	1232348160              # float 1.0E+6
.LCPI13_2:
	.long	1056964608              # float 0.5
.LCPI13_3:
	.long	1073741824              # float 2
.LCPI13_5:
	.long	0                       # float 0
	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI13_4:
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.text
	.globl	susan_edges
	.align	16, 0x90
	.type	susan_edges,@function
susan_edges:                            # @susan_edges
.Lfunc_begin13:
	.loc	2 930 0                 # susan.c:930:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp883:
	.cfi_def_cfa_offset 16
.Ltmp884:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp885:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1512, %rsp             # imm = 0x5E8
.Ltmp886:
	.cfi_offset %rbx, -56
.Ltmp887:
	.cfi_offset %r12, -48
.Ltmp888:
	.cfi_offset %r13, -40
.Ltmp889:
	.cfi_offset %r14, -32
.Ltmp890:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: susan_edges:in <- RDI
	#DEBUG_VALUE: susan_edges:r <- RSI
	#DEBUG_VALUE: susan_edges:mid <- RDX
	#DEBUG_VALUE: susan_edges:bp <- RCX
	#DEBUG_VALUE: susan_edges:max_no <- R8D
	#DEBUG_VALUE: susan_edges:x_size <- R9D
	movl	%r9d, %ebx
.Ltmp891:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	movl	%ebx, -620(%rbp)        # 4-byte Spill
	movl	%r8d, -84(%rbp)         # 4-byte Spill
.Ltmp892:
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	movq	%rcx, -256(%rbp)        # 8-byte Spill
.Ltmp893:
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	movq	%rdx, -528(%rbp)        # 8-byte Spill
.Ltmp894:
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	movq	%rsi, %r15
.Ltmp895:
	#DEBUG_VALUE: susan_edges:r <- R15
	movq	%r15, -448(%rbp)        # 8-byte Spill
	movq	%rdi, %r12
.Ltmp896:
	#DEBUG_VALUE: susan_edges:in <- R12
	movq	%r12, -424(%rbp)        # 8-byte Spill
	movl	16(%rbp), %r13d
	#DEBUG_VALUE: susan_edges:y_size <- R13D
	movabsq	$8352659037076079861, %rdi # imm = 0x73EA9B23D2E044F5
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$420, %edi              # imm = 0x1A4
	movl	$4, %esi
	callq	_KPrepRTable
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KWork
	.loc	2 935 17 prologue_end   # susan.c:935:17
.Ltmp897:
	movl	%r13d, %r14d
	imull	%ebx, %r14d
	movabsq	$316877220458437492, %rdi # imm = 0x465C62732D69B74
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$4, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$3, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$4, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	xorl	%esi, %esi
	.loc	2 935 3 is_stmt 0       # susan.c:935:3
	movq	%r15, %rdi
	movl	%r14d, %edx
	callq	wccmemset
.Ltmp898:
	#DEBUG_VALUE: susan_edges:i <- 3
	.loc	2 938 8 is_stmt 1       # susan.c:938:8
	movslq	%ebx, %rbx
.Ltmp899:
	movq	%rbx, -720(%rbp)        # 8-byte Spill
	movl	$1, %esi
	movabsq	$-4491171786269673030, %rdi # imm = 0xC1AC270E3E23B9BA
	callq	_KEnterRegion
	.loc	2 938 14 is_stmt 0      # susan.c:938:14
.Ltmp900:
	leal	-3(%r13), %eax
.Ltmp901:
	#DEBUG_VALUE: susan_edges:y_size <- undef
	.loc	2 938 12                # susan.c:938:12
	cltq
	.loc	2 940 16 is_stmt 1      # susan.c:940:16
.Ltmp902:
	movq	%rax, -520(%rbp)        # 8-byte Spill
	leal	-3(%rbx), %eax
	.loc	2 940 14 is_stmt 0      # susan.c:940:14
	movslq	%eax, %rcx
	.loc	2 955 10 is_stmt 1      # susan.c:955:10
.Ltmp903:
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	leal	-5(%rbx), %eax
	.loc	2 955 7 is_stmt 0       # susan.c:955:7
	movslq	%eax, %rdx
	.loc	2 964 10 is_stmt 1      # susan.c:964:10
	movq	%rdx, -704(%rbp)        # 8-byte Spill
	leal	-6(%rbx), %eax
	.loc	2 964 7 is_stmt 0       # susan.c:964:7
	cltq
	movq	%rax, -712(%rbp)        # 8-byte Spill
	leaq	(%rbx,%rbx,2), %rsi
	leaq	(%r15,%rsi), %rdi
	movq	%rdi, -304(%rbp)        # 8-byte Spill
.Ltmp904:
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	addq	%r12, %rsi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	leaq	(%rdx,%rdx), %rsi
	movq	%rsi, -536(%rbp)        # 8-byte Spill
	leaq	(%rsi,%rax,2), %rsi
	addq	%r12, %rsi
	movq	%rsi, -272(%rbp)        # 8-byte Spill
	leaq	32(%rcx,%rcx), %rsi
	movq	%rsi, -312(%rbp)        # 8-byte Spill
	leaq	31(%rcx,%rcx), %rsi
	movq	%rsi, -320(%rbp)        # 8-byte Spill
	leaq	30(%rcx,%rcx), %rsi
	movq	%rsi, -328(%rbp)        # 8-byte Spill
	leaq	(%rcx,%rax,2), %rsi
	addq	%r12, %rsi
	movq	%rsi, -280(%rbp)        # 8-byte Spill
	leaq	30(%rdx,%rdx), %rsi
	movq	%rsi, -336(%rbp)        # 8-byte Spill
	leaq	(%rdx,%rcx), %rsi
	addq	%r12, %rsi
	movq	%rsi, -288(%rbp)        # 8-byte Spill
	leaq	29(%rdx,%rdx), %rsi
	movq	%rsi, -344(%rbp)        # 8-byte Spill
	leaq	28(%rdx,%rdx), %rsi
	movq	%rsi, -352(%rbp)        # 8-byte Spill
	leaq	27(%rdx,%rdx), %rsi
	movq	%rsi, -360(%rbp)        # 8-byte Spill
	leaq	26(%rdx,%rdx), %rdx
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	leaq	26(%rax,%rax), %rdx
	movq	%rdx, -376(%rbp)        # 8-byte Spill
	leaq	25(%rax,%rax), %rdx
	movq	%rdx, -384(%rbp)        # 8-byte Spill
	leaq	24(%rax,%rax), %rdx
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	leaq	23(%rax,%rax), %rdx
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	leaq	22(%rax,%rax), %rdx
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	leaq	21(%rax,%rax), %rdx
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	leaq	20(%rax,%rax), %rdx
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	leaq	20(%rax), %rdx
	movq	%rdx, -456(%rbp)        # 8-byte Spill
	leaq	19(%rax), %rdx
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	leaq	18(%rax), %rdx
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	leaq	16(%rax), %rdx
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	leaq	15(%rax), %rdx
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	leaq	14(%rax), %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	leaq	(%r12,%rcx), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
.Ltmp905:
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	movl	$3, %ebx
	movl	$14, %eax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	movabsq	$2439138418461717467, %r15 # imm = 0x21D98F77EE6B33DB
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	jmp	.LBB13_1
.Ltmp906:
	.align	16, 0x90
.LBB13_7:                               # %for.cond1.pre_exit.for.inc282
                                        #   in Loop: Header=BB13_1 Depth=1
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:y_size <- undef
	#DEBUG_VALUE: susan_edges:i <- 3
	#DEBUG_VALUE: susan_edges:j <- 3
	movl	$1, %esi
	movabsq	$-524535815079954406, %rdi # imm = 0xF8B879748E30781A
	callq	_KExitRegion
	movl	$122, %r14d
	movl	$122, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-512(%rbp), %rbx        # 8-byte Reload
	.loc	2 938 3 is_stmt 1       # susan.c:938:3
	incq	%rbx
	movl	$382, %r12d             # imm = 0x17E
	movl	$382, %edi              # imm = 0x17E
	movl	$123, %esi
	movl	$1, %edx
	movl	$122, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-675146132198383229, %rdi # imm = 0xF6A1662B7AD62183
	callq	_KExitRegion
	movq	-720(%rbp), %rax        # 8-byte Reload
	addq	%rax, -504(%rbp)        # 8-byte Folded Spill
	addq	%rax, -312(%rbp)        # 8-byte Folded Spill
	addq	%rax, -320(%rbp)        # 8-byte Folded Spill
	addq	%rax, -328(%rbp)        # 8-byte Folded Spill
	addq	%rax, -336(%rbp)        # 8-byte Folded Spill
	addq	%rax, -344(%rbp)        # 8-byte Folded Spill
	addq	%rax, -352(%rbp)        # 8-byte Folded Spill
	addq	%rax, -360(%rbp)        # 8-byte Folded Spill
	addq	%rax, -368(%rbp)        # 8-byte Folded Spill
	addq	%rax, -376(%rbp)        # 8-byte Folded Spill
	addq	%rax, -384(%rbp)        # 8-byte Folded Spill
	addq	%rax, -392(%rbp)        # 8-byte Folded Spill
	addq	%rax, -400(%rbp)        # 8-byte Folded Spill
	addq	%rax, -408(%rbp)        # 8-byte Folded Spill
	addq	%rax, -432(%rbp)        # 8-byte Folded Spill
	addq	%rax, -440(%rbp)        # 8-byte Folded Spill
	addq	%rax, -456(%rbp)        # 8-byte Folded Spill
	addq	%rax, -464(%rbp)        # 8-byte Folded Spill
	addq	%rax, -472(%rbp)        # 8-byte Folded Spill
	addq	%rax, -480(%rbp)        # 8-byte Folded Spill
	addq	%rax, -488(%rbp)        # 8-byte Folded Spill
	addq	%rax, -496(%rbp)        # 8-byte Folded Spill
.Ltmp907:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:y_size <- undef
	#DEBUG_VALUE: susan_edges:i <- 3
	movl	$123, %edi
	movl	%r12d, %esi
	movl	%r14d, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$122, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$123, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$123, %edi
	movl	$122, %esi
	callq	_KPhiAddCond
	movl	$123, %edi
	movl	$123, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 938 3 is_stmt 0       # susan.c:938:3
	cmpq	-520(%rbp), %rbx        # 8-byte Folded Reload
	jge	.LBB13_8
.Ltmp908:
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:y_size <- undef
	#DEBUG_VALUE: susan_edges:i <- 3
	movq	%rbx, -512(%rbp)        # 8-byte Spill
.Ltmp909:
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	movl	$2, %esi
	movabsq	$-675146132198383229, %rdi # imm = 0xF6A1662B7AD62183
	callq	_KEnterRegion
	movl	$122, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_edges:j <- 3
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$-524535815079954406, %rdi # imm = 0xF8B879748E30781A
	callq	_KEnterRegion
	xorl	%r13d, %r13d
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	-432(%rbp), %rax        # 8-byte Reload
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movq	-504(%rbp), %r14        # 8-byte Reload
	xorl	%r12d, %r12d
	movl	$3, %ebx
	jmp	.LBB13_3
	.align	16, 0x90
.LBB13_6:                               # %for.inc
                                        #   in Loop: Header=BB13_3 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:y_size <- undef
	#DEBUG_VALUE: susan_edges:i <- 3
	#DEBUG_VALUE: susan_edges:j <- 3
	movl	$124, %r13d
	movl	$124, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-240(%rbp), %rbx        # 8-byte Reload
	.loc	2 940 5 is_stmt 1       # susan.c:940:5
.Ltmp910:
	incq	%rbx
	movl	$383, %r12d             # imm = 0x17F
	movl	$383, %edi              # imm = 0x17F
	movl	$125, %esi
	movl	$1, %edx
	movl	$124, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$2439138418461717467, %r15 # imm = 0x21D98F77EE6B33DB
	movq	%r15, %rdi
	callq	_KExitRegion
	incq	%r14
	incq	-232(%rbp)              # 8-byte Folded Spill
	incq	-224(%rbp)              # 8-byte Folded Spill
	incq	-216(%rbp)              # 8-byte Folded Spill
	incq	-80(%rbp)               # 8-byte Folded Spill
	incq	-208(%rbp)              # 8-byte Folded Spill
	incq	-200(%rbp)              # 8-byte Folded Spill
	incq	-192(%rbp)              # 8-byte Folded Spill
	incq	-184(%rbp)              # 8-byte Folded Spill
	incq	-64(%rbp)               # 8-byte Folded Spill
	incq	-176(%rbp)              # 8-byte Folded Spill
	incq	-168(%rbp)              # 8-byte Folded Spill
	incq	-160(%rbp)              # 8-byte Folded Spill
	incq	-152(%rbp)              # 8-byte Folded Spill
	incq	-144(%rbp)              # 8-byte Folded Spill
	incq	-136(%rbp)              # 8-byte Folded Spill
	incq	-72(%rbp)               # 8-byte Folded Spill
	incq	-128(%rbp)              # 8-byte Folded Spill
	incq	-120(%rbp)              # 8-byte Folded Spill
	incq	-112(%rbp)              # 8-byte Folded Spill
	incq	-104(%rbp)              # 8-byte Folded Spill
	incq	-96(%rbp)               # 8-byte Folded Spill
.Ltmp911:
.LBB13_3:                               # %for.cond1
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:y_size <- undef
	#DEBUG_VALUE: susan_edges:i <- 3
	#DEBUG_VALUE: susan_edges:j <- 3
	movl	$122, %edi
	callq	_KPushCDep
	movl	$125, %edi
	movl	$122, %edx
	movl	%r12d, %esi
	movl	%r13d, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$124, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$122, %ecx
	movl	$2, %r8d
	movl	$125, %r9d
	callq	_KTimestamp3
	movl	$125, %edi
	movl	$124, %esi
	callq	_KPhiAddCond
	movl	$125, %edi
	movl	$125, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 940 5 is_stmt 0       # susan.c:940:5
	cmpq	-416(%rbp), %rbx        # 8-byte Folded Reload
	jge	.LBB13_7
# BB#4:                                 # %for.body4
                                        #   in Loop: Header=BB13_3 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:y_size <- undef
	#DEBUG_VALUE: susan_edges:i <- 3
	#DEBUG_VALUE: susan_edges:j <- 3
	movq	%rbx, -240(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	movl	$124, %edi
	callq	_KPushCDep
	movl	$377, %edi              # imm = 0x179
	callq	_KWork
.Ltmp912:
	#DEBUG_VALUE: susan_edges:n <- 100
	movq	-264(%rbp), %rbx        # 8-byte Reload
	leaq	-11(%rbx,%r14), %rdi
	movl	$5, %esi
	movl	$6, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 943 10 is_stmt 1      # susan.c:943:10
.Ltmp913:
	movzbl	-11(%rbx,%r14), %r12d
	movq	%r12, -48(%rbp)         # 8-byte Spill
	movq	-424(%rbp), %r15        # 8-byte Reload
.Ltmp914:
	#DEBUG_VALUE: susan_edges:in <- R15
	leaq	-12(%r15,%r14), %rdi
	movl	$7, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 945 12                # susan.c:945:12
	movzbl	-12(%r15,%r14), %eax
	movq	%r12, %rbx
	movq	%r12, %r13
	subq	%rax, %rbx
	movq	%r14, -56(%rbp)         # 8-byte Spill
	movq	-256(%rbp), %r14        # 8-byte Reload
.Ltmp915:
	#DEBUG_VALUE: susan_edges:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$8, %esi
	movl	$9, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 945 10 is_stmt 0      # susan.c:945:10
	movzbl	(%r14,%rbx), %ebx
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-11(%r15,%rax), %rdi
	movl	$10, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 946 12 is_stmt 1      # susan.c:946:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-11(%r15,%rax), %eax
	movq	%r13, %r12
	subq	%rax, %r12
	leaq	(%r14,%r12), %rdi
	movl	$11, %esi
	movl	$12, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 946 10 is_stmt 0      # susan.c:946:10
	movzbl	(%r14,%r12), %r12d
	.loc	2 945 7 is_stmt 1       # susan.c:945:7
	addl	%ebx, %r12d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-10(%r15,%rax), %rdi
	movl	$13, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 947 12                # susan.c:947:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-10(%r15,%rax), %eax
.Ltmp916:
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$14, %esi
	movl	$15, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 947 10 is_stmt 0      # susan.c:947:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 946 7 is_stmt 1       # susan.c:946:7
	addl	%r12d, %r15d
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-10(%r13,%rax), %rdi
	movl	$16, %esi
	movl	$17, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 950 12                # susan.c:950:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-10(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$18, %esi
	movl	$19, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 950 10 is_stmt 0      # susan.c:950:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 947 7 is_stmt 1       # susan.c:947:7
	addl	%r15d, %r12d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-9(%r13,%rax), %rdi
	movl	$20, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 951 12                # susan.c:951:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-9(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$21, %esi
	movl	$22, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 951 10 is_stmt 0      # susan.c:951:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 950 7 is_stmt 1       # susan.c:950:7
	addl	%r12d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-8(%r13,%rax), %rdi
	movl	$23, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 952 12                # susan.c:952:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-8(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$24, %esi
	movl	$25, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 952 10 is_stmt 0      # susan.c:952:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 951 7 is_stmt 1       # susan.c:951:7
	addl	%r15d, %r12d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-7(%r13,%rax), %rdi
	movl	$26, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 953 12                # susan.c:953:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-7(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$27, %esi
	movl	$28, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 953 10 is_stmt 0      # susan.c:953:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 952 7 is_stmt 1       # susan.c:952:7
	addl	%r12d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-6(%r13,%rax), %rdi
	movl	$29, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 954 12                # susan.c:954:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$30, %esi
	movl	$31, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 954 10 is_stmt 0      # susan.c:954:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 953 7 is_stmt 1       # susan.c:953:7
	addl	%r15d, %r12d
	movq	-288(%rbp), %r13        # 8-byte Reload
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-6(%r13,%rax), %rdi
	movl	$32, %esi
	movl	$33, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 957 12                # susan.c:957:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$34, %esi
	movl	$35, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 957 10 is_stmt 0      # susan.c:957:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 954 7 is_stmt 1       # susan.c:954:7
	addl	%r12d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-5(%r13,%rax), %rdi
	movl	$36, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 958 12                # susan.c:958:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-5(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$37, %esi
	movl	$38, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 958 10 is_stmt 0      # susan.c:958:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 957 7 is_stmt 1       # susan.c:957:7
	addl	%r15d, %r12d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-4(%r13,%rax), %rdi
	movl	$39, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 959 12                # susan.c:959:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$40, %esi
	movl	$41, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 959 10 is_stmt 0      # susan.c:959:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 958 7 is_stmt 1       # susan.c:958:7
	addl	%r12d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-3(%r13,%rax), %rdi
	movl	$42, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 960 12                # susan.c:960:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-3(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$43, %esi
	movl	$44, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 960 10 is_stmt 0      # susan.c:960:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 959 7 is_stmt 1       # susan.c:959:7
	addl	%r15d, %r12d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-2(%r13,%rax), %rdi
	movl	$45, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 961 12                # susan.c:961:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$46, %esi
	movl	$47, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 961 10 is_stmt 0      # susan.c:961:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 960 7 is_stmt 1       # susan.c:960:7
	addl	%r12d, %r15d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	-1(%r13,%rax), %rdi
	movl	$48, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 962 12                # susan.c:962:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$49, %esi
	movl	$50, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 962 10 is_stmt 0      # susan.c:962:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 961 7 is_stmt 1       # susan.c:961:7
	addl	%r15d, %r12d
	movq	-56(%rbp), %rax         # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$51, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 963 12                # susan.c:963:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$52, %esi
	movl	$53, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 963 10 is_stmt 0      # susan.c:963:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 962 7 is_stmt 1       # susan.c:962:7
	addl	%r12d, %r15d
	movq	-96(%rbp), %rax         # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$54, %esi
	movl	$55, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 966 12                # susan.c:966:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$56, %esi
	movl	$57, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 966 10 is_stmt 0      # susan.c:966:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 963 7 is_stmt 1       # susan.c:963:7
	addl	%r15d, %r12d
	movq	-104(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$58, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 967 12                # susan.c:967:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-5(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$59, %esi
	movl	$60, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 967 10 is_stmt 0      # susan.c:967:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 966 7 is_stmt 1       # susan.c:966:7
	addl	%r12d, %r15d
	movq	-112(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$61, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 968 12                # susan.c:968:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$62, %esi
	movl	$63, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 968 10 is_stmt 0      # susan.c:968:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 967 7 is_stmt 1       # susan.c:967:7
	addl	%r15d, %r12d
	movq	-120(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$64, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 970 12                # susan.c:970:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$65, %esi
	movl	$66, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 970 10 is_stmt 0      # susan.c:970:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 968 7 is_stmt 1       # susan.c:968:7
	addl	%r12d, %r15d
	movq	-128(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$67, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 971 12                # susan.c:971:12
	movq	-72(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$68, %esi
	movl	$69, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 971 10 is_stmt 0      # susan.c:971:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 970 7 is_stmt 1       # susan.c:970:7
	addl	%r15d, %r12d
	movq	-72(%rbp), %rbx         # 8-byte Reload
	leaq	(%r13,%rbx), %rdi
	movl	$70, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 972 12                # susan.c:972:12
	movzbl	(%r13,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$71, %esi
	movl	$72, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 972 10 is_stmt 0      # susan.c:972:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 971 7 is_stmt 1       # susan.c:971:7
	addl	%r12d, %r15d
	movq	-136(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$73, %esi
	movl	$74, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 975 12                # susan.c:975:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$75, %esi
	movl	$76, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 975 10 is_stmt 0      # susan.c:975:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 972 7 is_stmt 1       # susan.c:972:7
	addl	%r15d, %r12d
	movq	-144(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$77, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 976 12                # susan.c:976:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-5(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$78, %esi
	movl	$79, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 976 10 is_stmt 0      # susan.c:976:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 975 7 is_stmt 1       # susan.c:975:7
	addl	%r12d, %r15d
	movq	-152(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$80, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 977 12                # susan.c:977:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$81, %esi
	movl	$82, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 977 10 is_stmt 0      # susan.c:977:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 976 7 is_stmt 1       # susan.c:976:7
	addl	%r15d, %r12d
	movq	-160(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$83, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 978 12                # susan.c:978:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-3(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$84, %esi
	movl	$85, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 978 10 is_stmt 0      # susan.c:978:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 977 7 is_stmt 1       # susan.c:977:7
	addl	%r12d, %r15d
	movq	-168(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$86, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 979 12                # susan.c:979:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$87, %esi
	movl	$88, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 979 10 is_stmt 0      # susan.c:979:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 978 7 is_stmt 1       # susan.c:978:7
	addl	%r15d, %r12d
	movq	-176(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$89, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 980 12                # susan.c:980:12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$90, %esi
	movl	$91, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 980 10 is_stmt 0      # susan.c:980:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 979 7 is_stmt 1       # susan.c:979:7
	addl	%r12d, %r15d
	movq	-64(%rbp), %rbx         # 8-byte Reload
	leaq	(%r13,%rbx), %rdi
	movl	$92, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 981 12                # susan.c:981:12
	movzbl	(%r13,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$93, %esi
	movl	$94, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 981 10 is_stmt 0      # susan.c:981:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 980 7 is_stmt 1       # susan.c:980:7
	addl	%r15d, %r12d
	movq	-280(%rbp), %r13        # 8-byte Reload
	movq	-184(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$95, %esi
	movl	$96, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 984 12                # susan.c:984:12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$97, %esi
	movl	$98, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 984 10 is_stmt 0      # susan.c:984:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 981 7 is_stmt 1       # susan.c:981:7
	addl	%r12d, %r15d
	movq	-192(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$99, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 985 12                # susan.c:985:12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-3(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$100, %esi
	movl	$101, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 985 10 is_stmt 0      # susan.c:985:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 984 7 is_stmt 1       # susan.c:984:7
	addl	%r15d, %r12d
	movq	-200(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$102, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 986 12                # susan.c:986:12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$103, %esi
	movl	$104, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 986 10 is_stmt 0      # susan.c:986:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 985 7 is_stmt 1       # susan.c:985:7
	addl	%r12d, %r15d
	movq	-208(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$105, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 987 12                # susan.c:987:12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$106, %esi
	movl	$107, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 987 10 is_stmt 0      # susan.c:987:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 986 7 is_stmt 1       # susan.c:986:7
	addl	%r15d, %r12d
	movq	-80(%rbp), %rbx         # 8-byte Reload
	leaq	(%r13,%rbx), %rdi
	movl	$108, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 988 12                # susan.c:988:12
	movzbl	(%r13,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$109, %esi
	movl	$110, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 988 10 is_stmt 0      # susan.c:988:10
	movzbl	(%r14,%rbx), %eax
	.loc	2 987 7 is_stmt 1       # susan.c:987:7
	addl	%r12d, %eax
	movl	%eax, -248(%rbp)        # 4-byte Spill
	movq	-272(%rbp), %r13        # 8-byte Reload
	movq	-216(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$111, %esi
	movl	$112, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-232(%rbp), %r15        # 8-byte Reload
	.loc	2 991 12                # susan.c:991:12
	movzbl	-2(%r13,%r15), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$113, %esi
	movl	$114, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 991 10 is_stmt 0      # susan.c:991:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 988 7 is_stmt 1       # susan.c:988:7
	addl	-248(%rbp), %r12d       # 4-byte Folded Reload
	movq	-224(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movl	$115, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 992 12                # susan.c:992:12
	movzbl	-1(%r13,%r15), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$116, %esi
	movl	$117, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 992 10 is_stmt 0      # susan.c:992:10
	movzbl	(%r14,%rbx), %ebx
	.loc	2 991 7 is_stmt 1       # susan.c:991:7
	addl	%r12d, %ebx
	leaq	(%r13,%r15), %rdi
	movl	$118, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 993 12                # susan.c:993:12
	movzbl	(%r13,%r15), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	leaq	(%r14,%rcx), %rdi
	movq	%rcx, %r15
	movl	$119, %esi
	movl	$120, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 993 10 is_stmt 0      # susan.c:993:10
	movzbl	(%r14,%r15), %eax
.Ltmp917:
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	movq	-56(%rbp), %r14         # 8-byte Reload
	.loc	2 993 7                 # susan.c:993:7
	leal	100(%rax,%rbx), %ebx
.Ltmp918:
	#DEBUG_VALUE: susan_edges:n <- EBX
	movl	$2, 568(%rsp)
	movl	$119, 560(%rsp)
	movl	$3, 552(%rsp)
	movl	$116, 544(%rsp)
	movl	$4, 536(%rsp)
	movl	$113, 528(%rsp)
	movl	$5, 520(%rsp)
	movl	$109, 512(%rsp)
	movl	$6, 504(%rsp)
	movl	$106, 496(%rsp)
	movl	$7, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$8, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$9, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$10, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$11, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$12, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$13, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$14, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$15, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$16, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$17, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$18, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$19, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$20, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$21, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$22, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$23, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$24, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$25, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$26, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$27, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$28, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$29, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$30, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$31, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$33, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$34, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$35, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$36, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$37, 8(%rsp)
	movl	$8, (%rsp)
	movl	$411, %edi              # imm = 0x19B
	movl	$38, %esi
	movl	$1, %edx
	movl	$1, %ecx
	movl	$124, %r8d
	movl	$37, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 995 11 is_stmt 1      # susan.c:995:11
.Ltmp919:
	cmpl	-84(%rbp), %ebx         # 4-byte Folded Reload
	jg	.LBB13_6
.Ltmp920:
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB13_3 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:y_size <- undef
	#DEBUG_VALUE: susan_edges:i <- 3
	#DEBUG_VALUE: susan_edges:j <- 3
	#DEBUG_VALUE: susan_edges:n <- EBX
	movl	$411, %edi              # imm = 0x19B
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	.loc	2 996 25                # susan.c:996:25
	movl	-84(%rbp), %r12d        # 4-byte Reload
	subl	%ebx, %r12d
	movl	$3, 568(%rsp)
	movl	$119, 560(%rsp)
	movl	$4, 552(%rsp)
	movl	$116, 544(%rsp)
	movl	$5, 536(%rsp)
	movl	$113, 528(%rsp)
	movl	$6, 520(%rsp)
	movl	$109, 512(%rsp)
	movl	$7, 504(%rsp)
	movl	$106, 496(%rsp)
	movl	$8, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$9, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$10, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$11, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$12, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$13, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$14, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$15, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$16, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$17, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$18, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$19, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$20, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$21, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$22, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$23, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$24, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$25, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$26, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$27, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$28, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$29, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$30, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$31, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$32, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$33, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$34, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$35, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$36, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$37, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$38, 8(%rsp)
	movl	$8, (%rsp)
	movl	$121, %edi
	movl	$38, %esi
	movl	$1, %edx
	movl	$2, %ecx
	movl	$124, %r8d
	movl	$38, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movq	-304(%rbp), %rbx        # 8-byte Reload
.Ltmp921:
	leaq	-11(%rbx,%r14), %rsi
	movl	$121, %edi
	movl	$1, %edx
	callq	_KStore
	.loc	2 996 9 is_stmt 0       # susan.c:996:9
	movb	%r12b, -11(%rbx,%r14)
	callq	_KPopCDep
	jmp	.LBB13_6
.Ltmp922:
.LBB13_8:                               # %for.cond.pre_exit.for.end284
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:mid <- [RBP+-528]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:y_size <- undef
	#DEBUG_VALUE: susan_edges:i <- 3
	movabsq	$-2042880294740013030, %rbx # imm = 0xE3A63B321160501A
.Ltmp923:
	movl	$1, %esi
	movabsq	$-4491171786269673030, %rdi # imm = 0xC1AC270E3E23B9BA
	callq	_KExitRegion
.Ltmp924:
	#DEBUG_VALUE: susan_edges:i <- 4
	movl	$1, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	16(%rbp), %eax
.Ltmp925:
	#DEBUG_VALUE: susan_edges:y_size <- EAX
	.loc	2 1001 14 is_stmt 1     # susan.c:1001:14
	addl	$-4, %eax
.Ltmp926:
	.loc	2 1001 12 is_stmt 0     # susan.c:1001:12
	cltq
	movq	%rax, -920(%rbp)        # 8-byte Spill
	movq	-720(%rbp), %r9         # 8-byte Reload
	.loc	2 1003 16 is_stmt 1     # susan.c:1003:16
.Ltmp927:
	leal	-4(%r9), %eax
	.loc	2 1003 14 is_stmt 0     # susan.c:1003:14
	cltq
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movq	-712(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rbx), %rax
	movq	-416(%rbp), %rsi        # 8-byte Reload
	movq	-536(%rbp), %rdx        # 8-byte Reload
	leaq	33(%rdx,%rsi,2), %rcx
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	leaq	(%r9,%rbx,2), %rdi
	movq	-424(%rbp), %r8         # 8-byte Reload
.Ltmp928:
	#DEBUG_VALUE: susan_edges:in <- R8
	addq	%r8, %rdi
	movq	%rdi, -672(%rbp)        # 8-byte Spill
	leaq	32(%rdx,%rsi,2), %rdi
	movq	%rdi, -736(%rbp)        # 8-byte Spill
	leaq	31(%rdx,%rsi,2), %rdi
	movq	%rdi, -744(%rbp)        # 8-byte Spill
	movq	-704(%rbp), %rdi        # 8-byte Reload
	leaq	31(%rax,%rdi,2), %rcx
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	leaq	(%rsi,%r9), %rcx
	addq	%r8, %rcx
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	leaq	30(%rax,%rdi,2), %rcx
	movq	%rcx, -760(%rbp)        # 8-byte Spill
	leaq	29(%rax,%rdi,2), %rcx
	movq	%rcx, -768(%rbp)        # 8-byte Spill
	leaq	28(%rax,%rdi,2), %rcx
	movq	%rcx, -776(%rbp)        # 8-byte Spill
	leaq	27(%rax,%rdi,2), %rax
	movq	%rax, -784(%rbp)        # 8-byte Spill
	leaq	27(%rdi,%rbx,2), %rax
	movq	%rax, -792(%rbp)        # 8-byte Spill
	movq	-528(%rbp), %rax        # 8-byte Reload
	leaq	(%rax,%r9,4), %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	leaq	26(%rdi,%rbx,2), %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
	leaq	25(%rdi,%rbx,2), %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
	leaq	24(%rdi,%rbx,2), %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
	leaq	23(%rdi,%rbx,2), %rax
	movq	%rax, -824(%rbp)        # 8-byte Spill
	leaq	22(%rdi,%rbx,2), %rax
	movq	%rax, -832(%rbp)        # 8-byte Spill
	leaq	21(%rdi,%rbx,2), %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	leaq	21(%rdi,%rbx), %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
	leaq	20(%rdi,%rbx), %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	leaq	19(%rdi,%rbx), %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	leaq	17(%rdi,%rbx), %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	leaq	16(%rdi,%rbx), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	leaq	15(%rdi,%rbx), %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	leaq	9(%rdi), %rax
	movq	%rax, -896(%rbp)        # 8-byte Spill
	leaq	(%r8,%r9), %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	leaq	(%r8,%r9,4), %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
.Ltmp929:
	#DEBUG_VALUE: susan_edges:r <- undef
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	movq	-448(%rbp), %rax        # 8-byte Reload
	leaq	(%rax,%r9,4), %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	movl	$4, %ebx
	movl	$9, %eax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	movabsq	$-159188540092120476, %r13 # imm = 0xFDCA72DDBF7F0264
	xorl	%r15d, %r15d
	xorl	%r14d, %r14d
	jmp	.LBB13_9
.Ltmp930:
	.align	16, 0x90
.LBB13_51:                              # %for.cond290.pre_exit.for.inc1261
                                        #   in Loop: Header=BB13_9 Depth=1
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	movl	$1, %esi
	movabsq	$-6229437391633835352, %rdi # imm = 0xA98C97B281211AA8
	callq	_KExitRegion
	movl	$248, %r14d
	movl	$248, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp931:
	.loc	2 1001 3 is_stmt 1      # susan.c:1001:3
	incq	%rbx
	movl	$384, %r15d             # imm = 0x180
	movl	$384, %edi              # imm = 0x180
	movl	$249, %esi
	movl	$1, %edx
	movl	$248, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$8103933172547486437, %rdi # imm = 0x7076F448B13282E5
	callq	_KExitRegion
	movq	-720(%rbp), %rax        # 8-byte Reload
	addq	%rax, -728(%rbp)        # 8-byte Folded Spill
	addq	%rax, -736(%rbp)        # 8-byte Folded Spill
	addq	%rax, -744(%rbp)        # 8-byte Folded Spill
	addq	%rax, -752(%rbp)        # 8-byte Folded Spill
	addq	%rax, -760(%rbp)        # 8-byte Folded Spill
	addq	%rax, -768(%rbp)        # 8-byte Folded Spill
	addq	%rax, -776(%rbp)        # 8-byte Folded Spill
	addq	%rax, -784(%rbp)        # 8-byte Folded Spill
	addq	%rax, -792(%rbp)        # 8-byte Folded Spill
	addq	%rax, -800(%rbp)        # 8-byte Folded Spill
	addq	%rax, -808(%rbp)        # 8-byte Folded Spill
	addq	%rax, -816(%rbp)        # 8-byte Folded Spill
	addq	%rax, -824(%rbp)        # 8-byte Folded Spill
	addq	%rax, -832(%rbp)        # 8-byte Folded Spill
	addq	%rax, -840(%rbp)        # 8-byte Folded Spill
	addq	%rax, -848(%rbp)        # 8-byte Folded Spill
	addq	%rax, -856(%rbp)        # 8-byte Folded Spill
	addq	%rax, -864(%rbp)        # 8-byte Folded Spill
	addq	%rax, -872(%rbp)        # 8-byte Folded Spill
	addq	%rax, -880(%rbp)        # 8-byte Folded Spill
	addq	%rax, -888(%rbp)        # 8-byte Folded Spill
	addq	%rax, -896(%rbp)        # 8-byte Folded Spill
	addq	%rax, -904(%rbp)        # 8-byte Folded Spill
.Ltmp932:
	#DEBUG_VALUE: susan_edges:r <- undef
.LBB13_9:                               # %for.cond285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_11 Depth 2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- undef
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	movl	$249, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$248, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$249, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$249, %edi
	movl	$248, %esi
	callq	_KPhiAddCond
	movl	$249, %edi
	movl	$249, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 1001 3 is_stmt 0      # susan.c:1001:3
	cmpq	-920(%rbp), %rbx        # 8-byte Folded Reload
	jge	.LBB13_52
.Ltmp933:
# BB#10:                                # %for.body289
                                        #   in Loop: Header=BB13_9 Depth=1
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- undef
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	movl	$2, %esi
	movabsq	$8103933172547486437, %rdi # imm = 0x7076F448B13282E5
	callq	_KEnterRegion
	movl	$248, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_edges:j <- 4
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$-6229437391633835352, %rdi # imm = 0xA98C97B281211AA8
	callq	_KEnterRegion
	.loc	2 1010 19 is_stmt 1     # susan.c:1010:19
.Ltmp934:
	leaq	-3(%rbx), %rax
	movq	%rbx, -432(%rbp)        # 8-byte Spill
	.loc	2 1010 18 is_stmt 0     # susan.c:1010:18
	imulq	-720(%rbp), %rax        # 8-byte Folded Reload
	movq	%rax, -696(%rbp)        # 8-byte Spill
	xorl	%r14d, %r14d
	movq	-904(%rbp), %r12        # 8-byte Reload
	movq	-896(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	-880(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	-856(%rbp), %rax        # 8-byte Reload
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	-848(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	-840(%rbp), %rax        # 8-byte Reload
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	-832(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	-792(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	-768(%rbp), %rax        # 8-byte Reload
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	%rax, -240(%rbp)        # 8-byte Spill
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%rax, -248(%rbp)        # 8-byte Spill
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, -264(%rbp)        # 8-byte Spill
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	-728(%rbp), %rax        # 8-byte Reload
	movq	%rax, -280(%rbp)        # 8-byte Spill
	xorl	%r15d, %r15d
	movl	$4, %ebx
.Ltmp935:
	jmp	.LBB13_11
.Ltmp936:
	.align	16, 0x90
.LBB13_50:                              # %for.inc1258
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	movl	$250, %r14d
	movl	$250, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-48(%rbp), %rbx         # 8-byte Reload
.Ltmp937:
	.loc	2 1003 5 is_stmt 1      # susan.c:1003:5
	incq	%rbx
	movl	$385, %r15d             # imm = 0x181
	movl	$385, %edi              # imm = 0x181
	movl	$251, %esi
	movl	$1, %edx
	movl	$250, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r13, %rdi
	callq	_KExitRegion
	incq	-280(%rbp)              # 8-byte Folded Spill
	incq	-272(%rbp)              # 8-byte Folded Spill
	incq	-264(%rbp)              # 8-byte Folded Spill
	incq	-248(%rbp)              # 8-byte Folded Spill
	incq	-240(%rbp)              # 8-byte Folded Spill
	incq	-232(%rbp)              # 8-byte Folded Spill
	incq	-224(%rbp)              # 8-byte Folded Spill
	incq	-216(%rbp)              # 8-byte Folded Spill
	incq	-208(%rbp)              # 8-byte Folded Spill
	incq	-200(%rbp)              # 8-byte Folded Spill
	incq	-192(%rbp)              # 8-byte Folded Spill
	incq	-184(%rbp)              # 8-byte Folded Spill
	incq	-176(%rbp)              # 8-byte Folded Spill
	incq	-168(%rbp)              # 8-byte Folded Spill
	incq	-160(%rbp)              # 8-byte Folded Spill
	incq	-152(%rbp)              # 8-byte Folded Spill
	incq	-144(%rbp)              # 8-byte Folded Spill
	incq	-136(%rbp)              # 8-byte Folded Spill
	incq	-128(%rbp)              # 8-byte Folded Spill
	incq	-120(%rbp)              # 8-byte Folded Spill
	incq	-112(%rbp)              # 8-byte Folded Spill
	incq	-104(%rbp)              # 8-byte Folded Spill
	movq	-56(%rbp), %r12         # 8-byte Reload
	incq	%r12
.Ltmp938:
.LBB13_11:                              # %for.cond290
                                        #   Parent Loop BB13_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	movl	$248, %edi
	callq	_KPushCDep
	movl	$251, %edi
	movl	$248, %edx
	movl	%r15d, %esi
	movl	%r14d, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$250, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$248, %ecx
	movl	$2, %r8d
	movl	$251, %r9d
	callq	_KTimestamp3
	movl	$251, %edi
	movl	$250, %esi
	callq	_KPhiAddCond
	movl	$251, %edi
	movl	$251, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 1003 5 is_stmt 0      # susan.c:1003:5
	cmpq	-456(%rbp), %rbx        # 8-byte Folded Reload
	jge	.LBB13_51
.Ltmp939:
# BB#12:                                # %for.body294
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	movq	%rbx, -48(%rbp)         # 8-byte Spill
	movl	$2, %esi
	movq	%r13, %rdi
	callq	_KEnterRegion
	movl	$250, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	movq	-288(%rbp), %rbx        # 8-byte Reload
.Ltmp940:
	leaq	-5(%rbx,%r12), %r14
	movl	$126, %esi
	movl	$127, %edx
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	.loc	2 1004 11 is_stmt 1     # susan.c:1004:11
.Ltmp941:
	movb	-5(%rbx,%r12), %bl
	movq	%r12, -56(%rbp)         # 8-byte Spill
	movl	$400, %edi              # imm = 0x190
	movl	$250, %esi
	movl	$1, %edx
	movl	$126, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	cmpb	$0, %bl
	jle	.LBB13_50
# BB#13:                                # %if.then302
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
.Ltmp942:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	movl	$400, %edi              # imm = 0x190
	callq	_KPushCDep
	movl	$16, %edi
	callq	_KWork
	movl	$128, %esi
	movl	$129, %edx
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	.loc	2 1005 11               # susan.c:1005:11
.Ltmp943:
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	-56(%rbp), %r12         # 8-byte Reload
	movsbl	-5(%rax,%r12), %r14d
	.loc	2 1006 11               # susan.c:1006:11
	movl	-84(%rbp), %r15d        # 4-byte Reload
	subl	%r14d, %r15d
.Ltmp944:
	#DEBUG_VALUE: susan_edges:n <- R15D
	movq	-664(%rbp), %rbx        # 8-byte Reload
.Ltmp945:
	leaq	-5(%rbx,%r12), %rdi
	movl	$130, %esi
	movl	$131, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1007 12               # susan.c:1007:12
	movzbl	-5(%rbx,%r12), %r13d
	movl	$2, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$3, (%rsp)
	movl	$401, %edi              # imm = 0x191
	movl	$1, %esi
	movl	$2, %edx
	movl	$250, %ecx
	movl	$3, %r8d
	movl	$126, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
	movl	$401, %edi              # imm = 0x191
	callq	_KPushCDep
	.loc	2 1009 13               # susan.c:1009:13
	cmpl	$601, %r15d             # imm = 0x259
	jl	.LBB13_34
.Ltmp946:
# BB#14:                                # %if.then318
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:n <- R15D
	movl	%r15d, -320(%rbp)       # 4-byte Spill
.Ltmp947:
	#DEBUG_VALUE: susan_edges:n <- [RBP+-320]
	movl	%r14d, -296(%rbp)       # 4-byte Spill
.Ltmp948:
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	movl	$469, %edi              # imm = 0x1D5
	callq	_KWork
.Ltmp949:
	#DEBUG_VALUE: susan_edges:y <- 0
	#DEBUG_VALUE: susan_edges:x <- 0
	movq	-688(%rbp), %r15        # 8-byte Reload
	leaq	-6(%r15,%r12), %rdi
	movl	$132, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1013 15               # susan.c:1013:15
.Ltmp950:
	movzbl	-6(%r15,%r12), %eax
	movq	%r13, %rbx
	subq	%rax, %rbx
	movq	%r13, %r14
	movq	%r14, -440(%rbp)        # 8-byte Spill
	movq	-256(%rbp), %r13        # 8-byte Reload
.Ltmp951:
	#DEBUG_VALUE: susan_edges:bp <- R13
	leaq	(%r13,%rbx), %rdi
	movl	$133, %esi
	movl	$134, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1013 27 is_stmt 0     # susan.c:1013:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -64(%rbp)         # 4-byte Spill
	leaq	-5(%r15,%r12), %rdi
	movl	$135, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1014 15 is_stmt 1     # susan.c:1014:15
	movzbl	-5(%r15,%r12), %eax
	subq	%rax, %r14
	leaq	(%r13,%r14), %rdi
	movl	$136, %esi
	movl	$137, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1014 29 is_stmt 0     # susan.c:1014:29
	movzbl	(%r13,%r14), %eax
	.loc	2 1014 24               # susan.c:1014:24
	addl	-64(%rbp), %eax         # 4-byte Folded Reload
	movl	%eax, %r14d
	leaq	-4(%r15,%r12), %rdi
	movl	$138, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1015 15 is_stmt 1     # susan.c:1015:15
	movzbl	-4(%r15,%r12), %eax
	movq	-440(%rbp), %rbx        # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$139, %esi
	movl	$140, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1015 25 is_stmt 0     # susan.c:1015:25
	movzbl	(%r13,%rbx), %eax
	.loc	2 1015 27               # susan.c:1015:27
	movq	%rax, -344(%rbp)        # 8-byte Spill
	addl	%eax, %r14d
	movl	%r14d, -328(%rbp)       # 4-byte Spill
	movq	-680(%rbp), %r15        # 8-byte Reload
	leaq	-4(%r15,%r12), %rdi
	movl	$141, %esi
	movl	$142, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1018 15 is_stmt 1     # susan.c:1018:15
	movzbl	-4(%r15,%r12), %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$143, %esi
	movl	$144, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1018 29 is_stmt 0     # susan.c:1018:29
	movzbl	(%r13,%rbx), %eax
	.loc	2 1018 27               # susan.c:1018:27
	addl	%eax, %eax
	movq	%rax, -352(%rbp)        # 8-byte Spill
	leaq	-3(%r15,%r12), %rdi
	movl	$145, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1019 15 is_stmt 1     # susan.c:1019:15
	movzbl	-3(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$146, %esi
	movl	$147, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1019 27 is_stmt 0     # susan.c:1019:27
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	leaq	-2(%r15,%r12), %rdi
	movl	$148, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1020 15 is_stmt 1     # susan.c:1020:15
	movzbl	-2(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$149, %esi
	movl	$150, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1020 29 is_stmt 0     # susan.c:1020:29
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	leaq	-1(%r15,%r12), %rdi
	movl	$151, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1021 15 is_stmt 1     # susan.c:1021:15
	movzbl	-1(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$152, %esi
	movl	$153, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1021 27 is_stmt 0     # susan.c:1021:27
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	leaq	(%r15,%r12), %rdi
	movl	$154, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1022 15 is_stmt 1     # susan.c:1022:15
	movzbl	(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$155, %esi
	movl	$156, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1022 27 is_stmt 0     # susan.c:1022:27
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	movq	-104(%rbp), %r12        # 8-byte Reload
	leaq	(%r15,%r12), %rdi
	movl	$157, %esi
	movl	$158, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1025 15 is_stmt 1     # susan.c:1025:15
	movzbl	(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$159, %esi
	movl	$160, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1025 29 is_stmt 0     # susan.c:1025:29
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -368(%rbp)        # 4-byte Spill
	imull	$-3, %eax, %eax
	movl	%eax, -400(%rbp)        # 4-byte Spill
	leaq	1(%r15,%r12), %rdi
	movl	$161, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1026 15 is_stmt 1     # susan.c:1026:15
	movzbl	1(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$162, %esi
	movl	$163, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1026 29 is_stmt 0     # susan.c:1026:29
	movzbl	(%r13,%rbx), %eax
	.loc	2 1026 27               # susan.c:1026:27
	movq	%rax, -376(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -408(%rbp)        # 4-byte Spill
	leaq	2(%r15,%r12), %rdi
	movl	$164, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1027 15 is_stmt 1     # susan.c:1027:15
	movzbl	2(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$165, %esi
	movl	$166, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1027 27 is_stmt 0     # susan.c:1027:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -80(%rbp)         # 4-byte Spill
	leaq	3(%r15,%r12), %rdi
	movl	$167, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1028 15 is_stmt 1     # susan.c:1028:15
	movzbl	3(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$168, %esi
	movl	$169, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1028 27 is_stmt 0     # susan.c:1028:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -392(%rbp)        # 4-byte Spill
	leaq	4(%r15,%r12), %rdi
	movl	$170, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1029 15 is_stmt 1     # susan.c:1029:15
	movzbl	4(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$171, %esi
	movl	$172, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1029 27 is_stmt 0     # susan.c:1029:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -96(%rbp)         # 4-byte Spill
	leaq	5(%r15,%r12), %rdi
	movl	$173, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1030 15 is_stmt 1     # susan.c:1030:15
	movzbl	5(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$174, %esi
	movl	$175, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1030 29 is_stmt 0     # susan.c:1030:29
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -464(%rbp)        # 4-byte Spill
	leaq	6(%r15,%r12), %rdi
	movl	$176, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1031 15 is_stmt 1     # susan.c:1031:15
	movzbl	6(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$177, %esi
	movl	$178, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1031 27 is_stmt 0     # susan.c:1031:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -472(%rbp)        # 4-byte Spill
	movq	-112(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$179, %esi
	movl	$180, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-152(%rbp), %r12        # 8-byte Reload
	.loc	2 1034 15 is_stmt 1     # susan.c:1034:15
	movzbl	-6(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$181, %esi
	movl	$182, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1034 29 is_stmt 0     # susan.c:1034:29
	movzbl	(%r13,%rbx), %eax
	imull	$-3, %eax, %eax
	movl	%eax, -480(%rbp)        # 4-byte Spill
	movq	-120(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$183, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1035 15 is_stmt 1     # susan.c:1035:15
	movzbl	-5(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$184, %esi
	movl	$185, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1035 29 is_stmt 0     # susan.c:1035:29
	movzbl	(%r13,%rbx), %eax
	.loc	2 1035 27               # susan.c:1035:27
	addl	%eax, %eax
	movl	%eax, -488(%rbp)        # 4-byte Spill
	movq	-128(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$186, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1036 15 is_stmt 1     # susan.c:1036:15
	movzbl	-4(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$187, %esi
	movl	$188, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1036 25 is_stmt 0     # susan.c:1036:25
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -496(%rbp)        # 4-byte Spill
	movq	-136(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$189, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1038 15 is_stmt 1     # susan.c:1038:15
	movzbl	-2(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$190, %esi
	movl	$191, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1038 27 is_stmt 0     # susan.c:1038:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -520(%rbp)        # 4-byte Spill
	movq	-144(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$192, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1039 15 is_stmt 1     # susan.c:1039:15
	movzbl	-1(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$193, %esi
	movl	$194, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1039 29 is_stmt 0     # susan.c:1039:29
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	leaq	(%r15,%r12), %rdi
	movl	$195, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1040 15 is_stmt 1     # susan.c:1040:15
	movzbl	(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$196, %esi
	movl	$197, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1040 27 is_stmt 0     # susan.c:1040:27
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -536(%rbp)        # 8-byte Spill
	movq	-160(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$198, %esi
	movl	$199, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-208(%rbp), %r12        # 8-byte Reload
	.loc	2 1043 15 is_stmt 1     # susan.c:1043:15
	movzbl	-6(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$200, %esi
	movl	$201, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1043 29 is_stmt 0     # susan.c:1043:29
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	imull	$-3, %eax, %eax
	movl	%eax, -552(%rbp)        # 4-byte Spill
	movq	-168(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$202, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1044 15 is_stmt 1     # susan.c:1044:15
	movzbl	-5(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$203, %esi
	movl	$204, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1044 29 is_stmt 0     # susan.c:1044:29
	movzbl	(%r13,%rbx), %eax
	.loc	2 1044 27               # susan.c:1044:27
	movq	%rax, -528(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -560(%rbp)        # 4-byte Spill
	movq	-176(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$205, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1045 15 is_stmt 1     # susan.c:1045:15
	movzbl	-4(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$206, %esi
	movl	$207, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1045 27 is_stmt 0     # susan.c:1045:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -568(%rbp)        # 4-byte Spill
	movq	-184(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$208, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1046 15 is_stmt 1     # susan.c:1046:15
	movzbl	-3(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$209, %esi
	movl	$210, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1046 27 is_stmt 0     # susan.c:1046:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -544(%rbp)        # 4-byte Spill
	movq	-192(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$211, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1047 15 is_stmt 1     # susan.c:1047:15
	movzbl	-2(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$212, %esi
	movl	$213, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1047 27 is_stmt 0     # susan.c:1047:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -304(%rbp)        # 4-byte Spill
	movq	-200(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$214, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1048 15 is_stmt 1     # susan.c:1048:15
	movzbl	-1(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$215, %esi
	movl	$216, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1048 29 is_stmt 0     # susan.c:1048:29
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -584(%rbp)        # 4-byte Spill
	leaq	(%r15,%r12), %rdi
	movl	$217, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1049 15 is_stmt 1     # susan.c:1049:15
	movzbl	(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$218, %esi
	movl	$219, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1049 27 is_stmt 0     # susan.c:1049:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -592(%rbp)        # 4-byte Spill
	movq	-216(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$220, %esi
	movl	$221, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-248(%rbp), %r12        # 8-byte Reload
	.loc	2 1052 15 is_stmt 1     # susan.c:1052:15
	movzbl	-4(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$222, %esi
	movl	$223, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1052 29 is_stmt 0     # susan.c:1052:29
	movzbl	(%r13,%rbx), %eax
	.loc	2 1052 27               # susan.c:1052:27
	movq	%rax, -576(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -600(%rbp)        # 4-byte Spill
	movq	-224(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$224, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1053 15 is_stmt 1     # susan.c:1053:15
	movzbl	-3(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$225, %esi
	movl	$226, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1053 27 is_stmt 0     # susan.c:1053:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -612(%rbp)        # 4-byte Spill
	movq	-232(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$227, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1054 15 is_stmt 1     # susan.c:1054:15
	movzbl	-2(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$228, %esi
	movl	$229, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1054 29 is_stmt 0     # susan.c:1054:29
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	movq	-240(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$230, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1055 15 is_stmt 1     # susan.c:1055:15
	movzbl	-1(%r15,%r12), %eax
	movq	%r14, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$231, %esi
	movl	$232, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1055 27 is_stmt 0     # susan.c:1055:27
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -616(%rbp)        # 4-byte Spill
	leaq	(%r15,%r12), %rdi
	movl	$233, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1056 15 is_stmt 1     # susan.c:1056:15
	movzbl	(%r15,%r12), %eax
	movq	%r14, %r12
	movq	%r12, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$234, %esi
	movl	$235, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1056 27 is_stmt 0     # susan.c:1056:27
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	movq	-672(%rbp), %r15        # 8-byte Reload
	movq	-264(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$236, %esi
	movl	$237, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-280(%rbp), %r14        # 8-byte Reload
	.loc	2 1059 15 is_stmt 1     # susan.c:1059:15
	movzbl	-2(%r15,%r14), %eax
	movq	%r12, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$238, %esi
	movl	$239, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1059 27 is_stmt 0     # susan.c:1059:27
	movzbl	(%r13,%rbx), %eax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	movq	-272(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$240, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1060 15 is_stmt 1     # susan.c:1060:15
	movzbl	-1(%r15,%r14), %eax
	movq	%r12, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$241, %esi
	movl	$242, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1060 29 is_stmt 0     # susan.c:1060:29
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -624(%rbp)        # 4-byte Spill
	leaq	(%r15,%r14), %rdi
	movl	$243, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1061 15 is_stmt 1     # susan.c:1061:15
	movzbl	(%r15,%r14), %eax
	subq	%rax, %r12
	leaq	(%r13,%r12), %rdi
	movl	$244, %esi
	movl	$245, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-344(%rbp), %rax        # 8-byte Reload
	.loc	2 1022 22               # susan.c:1022:22
	subl	-64(%rbp), %eax         # 4-byte Folded Reload
.Ltmp952:
	#DEBUG_VALUE: susan_edges:x <- EAX
	movq	-352(%rbp), %r14        # 8-byte Reload
	.loc	2 1025 24               # susan.c:1025:24
	subl	%r14d, %eax
.Ltmp953:
	movq	-360(%rbp), %r9         # 8-byte Reload
	.loc	2 1026 24               # susan.c:1026:24
	subl	%r9d, %eax
	.loc	2 1027 24               # susan.c:1027:24
	movq	-72(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movq	-384(%rbp), %r11        # 8-byte Reload
	.loc	2 1029 24               # susan.c:1029:24
	leal	(%rax,%r11,2), %eax
	.loc	2 1030 24               # susan.c:1030:24
	addl	-400(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1031 22               # susan.c:1031:22
	subl	-408(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1034 24               # susan.c:1034:24
	subl	-80(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 1035 24               # susan.c:1035:24
	addl	-96(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 1036 22               # susan.c:1036:22
	addl	-480(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1038 24               # susan.c:1038:24
	subl	-488(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1039 24               # susan.c:1039:24
	subl	-496(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1040 22               # susan.c:1040:22
	addl	-520(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1043 24               # susan.c:1043:24
	addl	-552(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1044 24               # susan.c:1044:24
	subl	-560(%rbp), %eax        # 4-byte Folded Reload
	movl	-568(%rbp), %r10d       # 4-byte Reload
	.loc	2 1045 24               # susan.c:1045:24
	subl	%r10d, %eax
	.loc	2 1047 24               # susan.c:1047:24
	addl	-304(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1048 24               # susan.c:1048:24
	subl	-600(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1061 25               # susan.c:1061:25
	movzbl	(%r13,%r12), %r12d
.Ltmp954:
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	movl	-472(%rbp), %r13d       # 4-byte Reload
	movq	-536(%rbp), %rdx        # 8-byte Reload
	addl	%r13d, %edx
	movl	-592(%rbp), %r15d       # 4-byte Reload
	addl	%r15d, %edx
	leal	(%rdx,%rdx,2), %esi
	movl	-612(%rbp), %edx        # 4-byte Reload
	.loc	2 1049 22               # susan.c:1049:22
	subl	%edx, %eax
	movl	-616(%rbp), %r8d        # 4-byte Reload
	.loc	2 1052 24               # susan.c:1052:24
	addl	%r8d, %eax
	.loc	2 1053 24               # susan.c:1053:24
	movq	-312(%rbp), %rdi        # 8-byte Reload
	leal	(%rax,%rdi,2), %eax
	movq	-632(%rbp), %rcx        # 8-byte Reload
	.loc	2 1055 24               # susan.c:1055:24
	subl	%ecx, %eax
	.loc	2 1056 22               # susan.c:1056:22
	addl	%r12d, %eax
	.loc	2 1059 24               # susan.c:1059:24
	addl	%esi, %eax
	movl	-464(%rbp), %edi        # 4-byte Reload
	movq	-504(%rbp), %rsi        # 8-byte Reload
	addl	%edi, %esi
	movl	-584(%rbp), %ebx        # 4-byte Reload
	addl	%ebx, %esi
	.loc	2 1061 22               # susan.c:1061:22
	leal	(%rax,%rsi,2), %esi
.Ltmp955:
	#DEBUG_VALUE: susan_edges:x <- ESI
	movq	%rcx, %rax
	subl	-328(%rbp), %eax        # 4-byte Folded Reload
	addl	-624(%rbp), %eax        # 4-byte Folded Reload
	addl	%r12d, %eax
	movq	%rax, %r12
	movq	-608(%rbp), %rax        # 8-byte Reload
	addl	%edx, %eax
	addl	%r8d, %eax
	movq	%rax, %rdx
	.loc	2 1025 31               # susan.c:1025:31
	leal	(%r14,%r9,2), %eax
	movl	%esi, %r14d
.Ltmp956:
	#DEBUG_VALUE: susan_edges:x <- R14D
	.loc	2 1026 31               # susan.c:1026:31
	movq	-336(%rbp), %rcx        # 8-byte Reload
	leal	(%rax,%rcx,2), %eax
	.loc	2 1027 29               # susan.c:1027:29
	movq	-72(%rbp), %rcx         # 8-byte Reload
	leal	(%rax,%rcx,2), %eax
	.loc	2 1028 24               # susan.c:1028:24
	leal	(%rax,%r11,2), %eax
	.loc	2 1029 29               # susan.c:1029:29
	addl	-368(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1030 31               # susan.c:1030:31
	movq	-376(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	.loc	2 1031 29               # susan.c:1031:29
	addl	-80(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 1043 31               # susan.c:1043:31
	addl	-392(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1044 31               # susan.c:1044:31
	addl	-96(%rbp), %eax         # 4-byte Folded Reload
	.loc	2 1045 29               # susan.c:1045:29
	addl	%edi, %eax
	.loc	2 1046 24               # susan.c:1046:24
	addl	%r13d, %eax
	movq	-512(%rbp), %rcx        # 8-byte Reload
	.loc	2 1047 29               # susan.c:1047:29
	subl	%eax, %ecx
.Ltmp957:
	#DEBUG_VALUE: susan_edges:y <- ECX
	.loc	2 1048 31               # susan.c:1048:31
	movq	-528(%rbp), %rax        # 8-byte Reload
	addl	%eax, %ecx
.Ltmp958:
	.loc	2 1049 29               # susan.c:1049:29
	addl	%r10d, %ecx
	.loc	2 1052 31               # susan.c:1052:31
	addl	-544(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1053 29               # susan.c:1053:29
	addl	-304(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1054 24               # susan.c:1054:24
	addl	%ebx, %ecx
	.loc	2 1055 29               # susan.c:1055:29
	addl	%r15d, %ecx
	.loc	2 1056 29               # susan.c:1056:29
	movq	-576(%rbp), %rax        # 8-byte Reload
	leal	(%rcx,%rax,2), %eax
.Ltmp959:
	#DEBUG_VALUE: susan_edges:y <- EAX
	.loc	2 1059 29               # susan.c:1059:29
	movq	-312(%rbp), %rcx        # 8-byte Reload
	leal	(%rax,%rcx,2), %eax
.Ltmp960:
	leal	(%r12,%r12,2), %ecx
	.loc	2 1060 24               # susan.c:1060:24
	addl	%ecx, %eax
	.loc	2 1061 27               # susan.c:1061:27
	leal	(%rax,%rdx,2), %ebx
.Ltmp961:
	#DEBUG_VALUE: susan_edges:y <- EBX
	.loc	2 1063 30               # susan.c:1063:30
	movl	%r14d, %eax
	imull	%eax, %eax
	.loc	2 1063 38 is_stmt 0     # susan.c:1063:38
	movl	%ebx, %ecx
	imull	%ecx, %ecx
	.loc	2 1063 29               # susan.c:1063:29
	addl	%eax, %ecx
	.loc	2 1063 21               # susan.c:1063:21
	cvtsi2ssl	%ecx, %xmm0
	movss	%xmm0, -64(%rbp)        # 4-byte Spill
	xorl	%esi, %esi
	movabsq	$3424718899698093685, %rdi # imm = 0x2F870BB1C0124E75
	callq	_KPrepCall
	movl	$6, 600(%rsp)
	movl	$244, 592(%rsp)
	movl	$7, 584(%rsp)
	movl	$241, 576(%rsp)
	movl	$8, 568(%rsp)
	movl	$238, 560(%rsp)
	movl	$9, 552(%rsp)
	movl	$234, 544(%rsp)
	movl	$10, 536(%rsp)
	movl	$231, 528(%rsp)
	movl	$11, 520(%rsp)
	movl	$228, 512(%rsp)
	movl	$12, 504(%rsp)
	movl	$225, 496(%rsp)
	movl	$13, 488(%rsp)
	movl	$222, 480(%rsp)
	movl	$12, 472(%rsp)
	movl	$218, 464(%rsp)
	movl	$13, 456(%rsp)
	movl	$215, 448(%rsp)
	movl	$14, 440(%rsp)
	movl	$212, 432(%rsp)
	movl	$15, 424(%rsp)
	movl	$209, 416(%rsp)
	movl	$16, 408(%rsp)
	movl	$206, 400(%rsp)
	movl	$17, 392(%rsp)
	movl	$203, 384(%rsp)
	movl	$18, 376(%rsp)
	movl	$200, 368(%rsp)
	movl	$18, 360(%rsp)
	movl	$196, 352(%rsp)
	movl	$19, 344(%rsp)
	movl	$193, 336(%rsp)
	movl	$18, 328(%rsp)
	movl	$190, 320(%rsp)
	movl	$19, 312(%rsp)
	movl	$187, 304(%rsp)
	movl	$22, 296(%rsp)
	movl	$184, 288(%rsp)
	movl	$23, 280(%rsp)
	movl	$181, 272(%rsp)
	movl	$24, 264(%rsp)
	movl	$177, 256(%rsp)
	movl	$25, 248(%rsp)
	movl	$174, 240(%rsp)
	movl	$24, 232(%rsp)
	movl	$171, 224(%rsp)
	movl	$22, 216(%rsp)
	movl	$168, 208(%rsp)
	movl	$25, 200(%rsp)
	movl	$165, 192(%rsp)
	movl	$28, 184(%rsp)
	movl	$162, 176(%rsp)
	movl	$29, 168(%rsp)
	movl	$159, 160(%rsp)
	movl	$30, 152(%rsp)
	movl	$155, 144(%rsp)
	movl	$29, 136(%rsp)
	movl	$152, 128(%rsp)
	movl	$35, 120(%rsp)
	movl	$133, 112(%rsp)
	movl	$37, 104(%rsp)
	movl	$128, 96(%rsp)
	movl	$38, 88(%rsp)
	movl	$126, 80(%rsp)
	movl	$38, 72(%rsp)
	movl	$250, 64(%rsp)
	movl	$37, 56(%rsp)
	movl	$1, 48(%rsp)
	movl	$30, 40(%rsp)
	movl	$149, 32(%rsp)
	movl	$31, 24(%rsp)
	movl	$146, 16(%rsp)
	movl	$33, 8(%rsp)
	movl	$143, (%rsp)
	movl	$247, %edi
	movl	$40, %esi
	movl	$136, %edx
	movl	$34, %ecx
	movl	$139, %r8d
	movl	$33, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$247, %edi
	callq	_KEnqArg
	movl	$246, %edi
	callq	_KLinkReturn
	movss	-64(%rbp), %xmm1        # 4-byte Reload
	.loc	2 1063 15               # susan.c:1063:15
	sqrtss	%xmm1, %xmm0
	ucomiss	%xmm0, %xmm0
	jnp	.LBB13_16
.Ltmp962:
# BB#15:                                # %call.sqrt
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:n <- [RBP+-320]
	#DEBUG_VALUE: susan_edges:x <- R14D
	#DEBUG_VALUE: susan_edges:y <- EBX
	movaps	%xmm1, %xmm0
	callq	sqrtf
.Ltmp963:
.LBB13_16:                              # %if.then318.split
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:n <- [RBP+-320]
	#DEBUG_VALUE: susan_edges:x <- R14D
	#DEBUG_VALUE: susan_edges:y <- EBX
	#DEBUG_VALUE: susan_edges:z <- XMM0
	.loc	2 1064 15 is_stmt 1     # susan.c:1064:15
	cvtss2sd	%xmm0, %xmm0
.Ltmp964:
	.loc	2 1064 24 is_stmt 0     # susan.c:1064:24
	movsd	%xmm0, -64(%rbp)        # 8-byte Spill
	movl	-320(%rbp), %eax        # 4-byte Reload
	xorps	%xmm0, %xmm0
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	.loc	2 1064 20               # susan.c:1064:20
	mulsd	.LCPI13_0(%rip), %xmm0
	movsd	%xmm0, -72(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	movl	$246, 24(%rsp)
	movl	$9, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$10, (%rsp)
	movl	$388, %edi              # imm = 0x184
	movl	$1, %esi
	movl	$9, %edx
	movl	$250, %ecx
	movl	$10, %r8d
	movl	$126, %r9d
	callq	_KTimestamp5
	callq	_KPopCDep
	movl	$388, %edi              # imm = 0x184
	callq	_KPushCDep
.Ltmp965:
	.loc	2 1064 15               # susan.c:1064:15
	movsd	-64(%rbp), %xmm0        # 8-byte Reload
	ucomisd	-72(%rbp), %xmm0        # 8-byte Folded Reload
	jbe	.LBB13_33
.Ltmp966:
# BB#17:                                # %if.then679
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- R14D
	#DEBUG_VALUE: susan_edges:y <- EBX
	movl	$1, %edi
	callq	_KWork
.Ltmp967:
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$3, 520(%rsp)
	movl	$246, 512(%rsp)
	movl	$2, 504(%rsp)
	movl	$244, 496(%rsp)
	movl	$3, 488(%rsp)
	movl	$238, 480(%rsp)
	movl	$6, 472(%rsp)
	movl	$234, 464(%rsp)
	movl	$5, 456(%rsp)
	movl	$231, 448(%rsp)
	movl	$6, 440(%rsp)
	movl	$225, 432(%rsp)
	movl	$9, 424(%rsp)
	movl	$222, 416(%rsp)
	movl	$10, 408(%rsp)
	movl	$218, 400(%rsp)
	movl	$11, 392(%rsp)
	movl	$215, 384(%rsp)
	movl	$10, 376(%rsp)
	movl	$212, 368(%rsp)
	movl	$11, 360(%rsp)
	movl	$206, 352(%rsp)
	movl	$14, 344(%rsp)
	movl	$203, 336(%rsp)
	movl	$15, 328(%rsp)
	movl	$200, 320(%rsp)
	movl	$16, 312(%rsp)
	movl	$196, 304(%rsp)
	movl	$17, 296(%rsp)
	movl	$193, 288(%rsp)
	movl	$16, 280(%rsp)
	movl	$190, 272(%rsp)
	movl	$17, 264(%rsp)
	movl	$187, 256(%rsp)
	movl	$20, 248(%rsp)
	movl	$184, 240(%rsp)
	movl	$21, 232(%rsp)
	movl	$181, 224(%rsp)
	movl	$22, 216(%rsp)
	movl	$177, 208(%rsp)
	movl	$23, 200(%rsp)
	movl	$174, 192(%rsp)
	movl	$22, 184(%rsp)
	movl	$171, 176(%rsp)
	movl	$23, 168(%rsp)
	movl	$165, 160(%rsp)
	movl	$26, 152(%rsp)
	movl	$162, 144(%rsp)
	movl	$27, 136(%rsp)
	movl	$159, 128(%rsp)
	movl	$28, 120(%rsp)
	movl	$155, 112(%rsp)
	movl	$27, 104(%rsp)
	movl	$152, 96(%rsp)
	movl	$31, 88(%rsp)
	movl	$133, 80(%rsp)
	movl	$33, 72(%rsp)
	movl	$128, 64(%rsp)
	movl	$34, 56(%rsp)
	movl	$126, 48(%rsp)
	movl	$34, 40(%rsp)
	movl	$250, 32(%rsp)
	movl	$33, 24(%rsp)
	movl	$1, 16(%rsp)
	movl	$28, 8(%rsp)
	movl	$146, (%rsp)
	movl	$389, %edi              # imm = 0x185
	movl	$35, %esi
	movl	$139, %edx
	movl	$30, %ecx
	movl	$143, %r8d
	movl	$31, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$389, %edi              # imm = 0x185
	callq	_KPushCDep
	.loc	2 1066 17 is_stmt 1     # susan.c:1066:17
.Ltmp968:
	testl	%r14d, %r14d
	je	.LBB13_18
.Ltmp969:
# BB#19:                                # %if.else
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- R14D
	#DEBUG_VALUE: susan_edges:y <- EBX
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$20, %edi
	callq	_KWork
	.loc	2 1069 18               # susan.c:1069:18
.Ltmp970:
	cvtsi2ssl	%ebx, %xmm1
	.loc	2 1069 31 is_stmt 0     # susan.c:1069:31
	cvtsi2ssl	%r14d, %xmm0
	.loc	2 1069 17               # susan.c:1069:17
	divss	%xmm0, %xmm1
.Ltmp971:
	#DEBUG_VALUE: susan_edges:z <- XMM1
	movss	%xmm1, -64(%rbp)        # 4-byte Spill
.Ltmp972:
	#DEBUG_VALUE: susan_edges:z <- [RBP+-64]
	movl	$23, 616(%rsp)
	movl	$246, 608(%rsp)
	movl	$23, 600(%rsp)
	movl	$244, 592(%rsp)
	movl	$24, 584(%rsp)
	movl	$241, 576(%rsp)
	movl	$25, 568(%rsp)
	movl	$238, 560(%rsp)
	movl	$26, 552(%rsp)
	movl	$234, 544(%rsp)
	movl	$27, 536(%rsp)
	movl	$231, 528(%rsp)
	movl	$28, 520(%rsp)
	movl	$228, 512(%rsp)
	movl	$29, 504(%rsp)
	movl	$225, 496(%rsp)
	movl	$30, 488(%rsp)
	movl	$222, 480(%rsp)
	movl	$30, 472(%rsp)
	movl	$218, 464(%rsp)
	movl	$31, 456(%rsp)
	movl	$215, 448(%rsp)
	movl	$31, 440(%rsp)
	movl	$212, 432(%rsp)
	movl	$32, 424(%rsp)
	movl	$209, 416(%rsp)
	movl	$33, 408(%rsp)
	movl	$206, 400(%rsp)
	movl	$34, 392(%rsp)
	movl	$203, 384(%rsp)
	movl	$35, 376(%rsp)
	movl	$200, 368(%rsp)
	movl	$36, 360(%rsp)
	movl	$196, 352(%rsp)
	movl	$37, 344(%rsp)
	movl	$193, 336(%rsp)
	movl	$36, 328(%rsp)
	movl	$190, 320(%rsp)
	movl	$37, 312(%rsp)
	movl	$187, 304(%rsp)
	movl	$40, 296(%rsp)
	movl	$184, 288(%rsp)
	movl	$41, 280(%rsp)
	movl	$181, 272(%rsp)
	movl	$42, 264(%rsp)
	movl	$177, 256(%rsp)
	movl	$43, 248(%rsp)
	movl	$174, 240(%rsp)
	movl	$42, 232(%rsp)
	movl	$171, 224(%rsp)
	movl	$39, 216(%rsp)
	movl	$168, 208(%rsp)
	movl	$43, 200(%rsp)
	movl	$165, 192(%rsp)
	movl	$46, 184(%rsp)
	movl	$162, 176(%rsp)
	movl	$47, 168(%rsp)
	movl	$159, 160(%rsp)
	movl	$48, 152(%rsp)
	movl	$155, 144(%rsp)
	movl	$47, 136(%rsp)
	movl	$152, 128(%rsp)
	movl	$52, 120(%rsp)
	movl	$133, 112(%rsp)
	movl	$54, 104(%rsp)
	movl	$128, 96(%rsp)
	movl	$55, 88(%rsp)
	movl	$126, 80(%rsp)
	movl	$55, 72(%rsp)
	movl	$250, 64(%rsp)
	movl	$54, 56(%rsp)
	movl	$1, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$149, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$146, 16(%rsp)
	movl	$51, 8(%rsp)
	movl	$143, (%rsp)
	movl	$387, %ebx              # imm = 0x183
.Ltmp973:
	movl	$387, %edi              # imm = 0x183
	movl	$41, %esi
	movl	$136, %edx
	movl	$51, %ecx
	movl	$139, %r8d
	movl	$50, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	jmp	.LBB13_20
.Ltmp974:
	.align	16, 0x90
.LBB13_34:                              # %if.else759
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 1
	movl	%r14d, -296(%rbp)       # 4-byte Spill
.Ltmp975:
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	callq	_KPopCDep
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	-280(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	movq	-272(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	-264(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	-248(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	movq	-240(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -408(%rbp)        # 8-byte Spill
	movq	-232(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	movq	-224(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	-208(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	movq	-200(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	-192(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	-184(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	movq	-176(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	-168(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	-160(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	-152(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	movq	-144(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -560(%rbp)        # 8-byte Spill
	movq	-136(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	movq	-128(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movq	-120(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	-112(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	movq	-104(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx), %rdx
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	leaq	6(%rax,%rcx), %rdx
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	leaq	5(%rax,%rcx), %rdx
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	leaq	4(%rax,%rcx), %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	leaq	3(%rax,%rcx), %rdx
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	leaq	2(%rax,%rcx), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	leaq	1(%rax,%rcx), %rcx
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	leaq	(%rax,%r12), %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	leaq	-1(%rax,%r12), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	-2(%rax,%r12), %rcx
	movq	%rcx, -536(%rbp)        # 8-byte Spill
	leaq	-3(%rax,%r12), %rcx
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	leaq	-4(%rax,%r12), %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	movq	-688(%rbp), %rax        # 8-byte Reload
	leaq	-4(%rax,%r12), %rcx
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	leaq	-5(%rax,%r12), %r14
	leaq	-6(%rax,%r12), %r15
	xorl	%ebx, %ebx
	jmp	.LBB13_35
.LBB13_33:                              # %if.else757
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	.loc	2 1010 13 is_stmt 1     # susan.c:1010:13
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	leaq	(%rcx,%rax), %rax
	movq	-416(%rbp), %r8         # 8-byte Reload
	.loc	2 1016 11               # susan.c:1016:11
	leaq	1(%r8,%rax), %rcx
	movq	-704(%rbp), %r9         # 8-byte Reload
	.loc	2 1023 11               # susan.c:1023:11
	leaq	4(%r9,%rcx), %rdx
	movq	-712(%rbp), %rbx        # 8-byte Reload
	.loc	2 1032 11               # susan.c:1032:11
	leaq	6(%rbx,%rdx), %rsi
	movq	-424(%rbp), %rdi        # 8-byte Reload
.Ltmp976:
	#DEBUG_VALUE: susan_edges:in <- RDI
	.loc	2 1010 13               # susan.c:1010:13
	leaq	-1(%rdi,%rax), %r15
.Ltmp977:
	#DEBUG_VALUE: susan_edges:p <- R15
	.loc	2 1013 19               # susan.c:1013:19
	leaq	(%rdi,%rax), %r14
.Ltmp978:
	#DEBUG_VALUE: susan_edges:p <- R14
	.loc	2 1014 19               # susan.c:1014:19
	leaq	1(%rdi,%rax), %rax
.Ltmp979:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-504]
	.loc	2 1016 11               # susan.c:1016:11
	movq	%rax, -504(%rbp)        # 8-byte Spill
	leaq	(%rdi,%rcx), %rax
.Ltmp980:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-344]
	.loc	2 1018 19               # susan.c:1018:19
	movq	%rax, -344(%rbp)        # 8-byte Spill
	leaq	1(%rdi,%rcx), %rax
.Ltmp981:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-64]
	.loc	2 1019 19               # susan.c:1019:19
	movq	%rax, -64(%rbp)         # 8-byte Spill
	leaq	2(%rdi,%rcx), %rax
.Ltmp982:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-536]
	.loc	2 1020 19               # susan.c:1020:19
	movq	%rax, -536(%rbp)        # 8-byte Spill
	leaq	3(%rdi,%rcx), %rax
.Ltmp983:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-304]
	.loc	2 1021 19               # susan.c:1021:19
	movq	%rax, -304(%rbp)        # 8-byte Spill
	leaq	4(%rdi,%rcx), %rax
.Ltmp984:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-312]
	.loc	2 1023 11               # susan.c:1023:11
	movq	%rax, -312(%rbp)        # 8-byte Spill
	leaq	(%rdi,%rdx), %rax
.Ltmp985:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-72]
	.loc	2 1025 19               # susan.c:1025:19
	movq	%rax, -72(%rbp)         # 8-byte Spill
	leaq	1(%rdi,%rdx), %rax
.Ltmp986:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-80]
	.loc	2 1026 19               # susan.c:1026:19
	movq	%rax, -80(%rbp)         # 8-byte Spill
	leaq	2(%rdi,%rdx), %rax
.Ltmp987:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-320]
	.loc	2 1027 19               # susan.c:1027:19
	movq	%rax, -320(%rbp)        # 8-byte Spill
	leaq	3(%rdi,%rdx), %rax
.Ltmp988:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-600]
	.loc	2 1028 19               # susan.c:1028:19
	movq	%rax, -600(%rbp)        # 8-byte Spill
	leaq	4(%rdi,%rdx), %rax
.Ltmp989:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-328]
	.loc	2 1029 19               # susan.c:1029:19
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	5(%rdi,%rdx), %rax
.Ltmp990:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-400]
	.loc	2 1030 19               # susan.c:1030:19
	movq	%rax, -400(%rbp)        # 8-byte Spill
	leaq	6(%rdi,%rdx), %rax
.Ltmp991:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-336]
	.loc	2 1041 11               # susan.c:1041:11
	movq	%rax, -336(%rbp)        # 8-byte Spill
	leaq	6(%rbx,%rsi), %rax
	.loc	2 1032 11               # susan.c:1032:11
	leaq	(%rdi,%rsi), %rcx
.Ltmp992:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-608]
	.loc	2 1034 19               # susan.c:1034:19
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	leaq	1(%rdi,%rsi), %rcx
.Ltmp993:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-592]
	.loc	2 1035 19               # susan.c:1035:19
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	leaq	2(%rdi,%rsi), %rcx
.Ltmp994:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-584]
	.loc	2 1037 11               # susan.c:1037:11
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	leaq	4(%rdi,%rsi), %rcx
.Ltmp995:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-576]
	.loc	2 1038 19               # susan.c:1038:19
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	leaq	5(%rdi,%rsi), %rcx
.Ltmp996:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-560]
	.loc	2 1039 19               # susan.c:1039:19
	movq	%rcx, -560(%rbp)        # 8-byte Spill
	leaq	6(%rdi,%rsi), %rcx
.Ltmp997:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-544]
	.loc	2 1050 11               # susan.c:1050:11
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	leaq	6(%r9,%rax), %rcx
	.loc	2 1041 11               # susan.c:1041:11
	leaq	(%rdi,%rax), %rdx
.Ltmp998:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-352]
	.loc	2 1043 19               # susan.c:1043:19
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	leaq	1(%rdi,%rax), %rdx
.Ltmp999:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-360]
	.loc	2 1044 19               # susan.c:1044:19
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	leaq	2(%rdi,%rax), %rdx
.Ltmp1000:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-376]
	.loc	2 1045 19               # susan.c:1045:19
	movq	%rdx, -376(%rbp)        # 8-byte Spill
	leaq	3(%rdi,%rax), %rdx
.Ltmp1001:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-520]
	.loc	2 1046 19               # susan.c:1046:19
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	leaq	4(%rdi,%rax), %rdx
.Ltmp1002:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-368]
	.loc	2 1047 19               # susan.c:1047:19
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	leaq	5(%rdi,%rax), %rdx
.Ltmp1003:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-512]
	.loc	2 1048 19               # susan.c:1048:19
	movq	%rdx, -512(%rbp)        # 8-byte Spill
	leaq	6(%rdi,%rax), %rax
.Ltmp1004:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-392]
	.loc	2 1057 11               # susan.c:1057:11
	movq	%rax, -392(%rbp)        # 8-byte Spill
	leaq	4(%r8,%rcx), %rax
	.loc	2 1050 11               # susan.c:1050:11
	leaq	(%rdi,%rcx), %rdx
.Ltmp1005:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-384]
	.loc	2 1052 19               # susan.c:1052:19
	movq	%rdx, -384(%rbp)        # 8-byte Spill
	leaq	1(%rdi,%rcx), %rdx
.Ltmp1006:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-496]
	.loc	2 1053 19               # susan.c:1053:19
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	leaq	2(%rdi,%rcx), %rdx
.Ltmp1007:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-488]
	.loc	2 1054 19               # susan.c:1054:19
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	leaq	3(%rdi,%rcx), %rdx
.Ltmp1008:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-408]
	.loc	2 1055 19               # susan.c:1055:19
	movq	%rdx, -408(%rbp)        # 8-byte Spill
	leaq	4(%rdi,%rcx), %rcx
.Ltmp1009:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-96]
	.loc	2 1057 11               # susan.c:1057:11
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	leaq	(%rdi,%rax), %rcx
.Ltmp1010:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-480]
	.loc	2 1059 19               # susan.c:1059:19
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	leaq	1(%rdi,%rax), %rcx
.Ltmp1011:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-472]
	.loc	2 1060 19               # susan.c:1060:19
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	leaq	2(%rdi,%rax), %rax
.Ltmp1012:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-464]
	#DEBUG_VALUE: susan_edges:do_symmetry <- 1
	movq	%rax, -464(%rbp)        # 8-byte Spill
.Ltmp1013:
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	callq	_KPopCDep
	movl	$388, %ebx              # imm = 0x184
	movq	-440(%rbp), %r13        # 8-byte Reload
.Ltmp1014:
.LBB13_35:                              # %if.end760
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	movl	$400, %edi              # imm = 0x190
	callq	_KPushCDep
	movl	$399, %edi              # imm = 0x18F
	xorl	%esi, %esi
	movl	$400, %edx              # imm = 0x190
	movl	$401, %ecx              # imm = 0x191
	movl	%ebx, %r8d
	callq	_KPhi3To1
	movl	$1, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$404, %edi              # imm = 0x194
	movl	$250, %esi
	movl	$2, %edx
	movl	$126, %ecx
	movl	$2, %r8d
	movl	$399, %r9d              # imm = 0x18F
	callq	_KTimestamp3
	callq	_KPopCDep
	movl	$404, %edi              # imm = 0x194
	callq	_KPushCDep
	movl	$522, %edi              # imm = 0x20A
	callq	_KWork
.Ltmp1015:
	#DEBUG_VALUE: susan_edges:w <- 0
	#DEBUG_VALUE: susan_edges:y <- 0
	#DEBUG_VALUE: susan_edges:x <- 0
	#DEBUG_VALUE: susan_edges:p <- R15
	movl	$260, %esi              # imm = 0x104
	movl	$1, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 1094 15               # susan.c:1094:15
.Ltmp1016:
	movzbl	(%r15), %eax
	movq	%r13, %rbx
	subq	%rax, %rbx
	movq	-256(%rbp), %r12        # 8-byte Reload
.Ltmp1017:
	#DEBUG_VALUE: susan_edges:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$261, %esi              # imm = 0x105
	movl	$262, %edx              # imm = 0x106
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1094 27 is_stmt 0     # susan.c:1094:27
	movzbl	(%r12,%rbx), %r15d
.Ltmp1018:
	movl	%r15d, -624(%rbp)       # 4-byte Spill
.Ltmp1019:
	#DEBUG_VALUE: susan_edges:p <- R14
	movl	$263, %esi              # imm = 0x107
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1095 15 is_stmt 1     # susan.c:1095:15
	movzbl	(%r14), %eax
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$264, %esi              # imm = 0x108
	movl	$265, %edx              # imm = 0x109
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1095 29 is_stmt 0     # susan.c:1095:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1095 24               # susan.c:1095:24
	addl	%r15d, %eax
	movq	%r13, %r14
.Ltmp1020:
	movq	%rax, %r13
.Ltmp1021:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-504]
	movl	$266, %esi              # imm = 0x10A
	movl	$1, %edx
	movq	-504(%rbp), %rbx        # 8-byte Reload
.Ltmp1022:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1096 15 is_stmt 1     # susan.c:1096:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1023:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$267, %esi              # imm = 0x10B
	movl	$268, %edx              # imm = 0x10C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1096 25 is_stmt 0     # susan.c:1096:25
	movzbl	(%r12,%rbx), %ecx
	.loc	2 1096 27               # susan.c:1096:27
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	addl	%ecx, %r13d
	movq	%r13, -528(%rbp)        # 8-byte Spill
	.loc	2 1096 34               # susan.c:1096:34
	movl	%r15d, %eax
	subl	%ecx, %eax
	movq	%rax, -504(%rbp)        # 8-byte Spill
.Ltmp1024:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-344]
	movl	$269, %esi              # imm = 0x10D
	movl	$270, %edx              # imm = 0x10E
	movl	$1, %ecx
	movq	-344(%rbp), %rbx        # 8-byte Reload
.Ltmp1025:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1099 15 is_stmt 1     # susan.c:1099:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1026:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$271, %esi              # imm = 0x10F
	movl	$272, %edx              # imm = 0x110
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1099 29 is_stmt 0     # susan.c:1099:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1099 27               # susan.c:1099:27
	shll	$2, %eax
	movq	%rax, -344(%rbp)        # 8-byte Spill
.Ltmp1027:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-64]
	movl	$273, %esi              # imm = 0x111
	movl	$1, %edx
	movq	-64(%rbp), %rbx         # 8-byte Reload
.Ltmp1028:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1100 15 is_stmt 1     # susan.c:1100:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1029:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$274, %esi              # imm = 0x112
	movl	$275, %edx              # imm = 0x113
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1100 27 is_stmt 0     # susan.c:1100:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -64(%rbp)         # 8-byte Spill
.Ltmp1030:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-536]
	movl	$276, %esi              # imm = 0x114
	movl	$1, %edx
	movq	-536(%rbp), %rbx        # 8-byte Reload
.Ltmp1031:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1101 15 is_stmt 1     # susan.c:1101:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1032:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$277, %esi              # imm = 0x115
	movl	$278, %edx              # imm = 0x116
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1101 29 is_stmt 0     # susan.c:1101:29
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -552(%rbp)        # 8-byte Spill
.Ltmp1033:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-304]
	movl	$279, %esi              # imm = 0x117
	movl	$1, %edx
	movq	-304(%rbp), %rbx        # 8-byte Reload
.Ltmp1034:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1102 15 is_stmt 1     # susan.c:1102:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1035:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$280, %esi              # imm = 0x118
	movl	$281, %edx              # imm = 0x119
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1102 27 is_stmt 0     # susan.c:1102:27
	movzbl	(%r12,%rbx), %eax
	.loc	2 1102 39               # susan.c:1102:39
	movq	%rax, -304(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -536(%rbp)        # 4-byte Spill
.Ltmp1036:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-312]
	movl	$282, %esi              # imm = 0x11A
	movl	$1, %edx
	movq	-312(%rbp), %rbx        # 8-byte Reload
.Ltmp1037:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1103 15 is_stmt 1     # susan.c:1103:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1038:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$283, %esi              # imm = 0x11B
	movl	$284, %edx              # imm = 0x11C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1103 27 is_stmt 0     # susan.c:1103:27
	movzbl	(%r12,%rbx), %eax
	.loc	2 1103 25               # susan.c:1103:25
	movq	%rax, -568(%rbp)        # 8-byte Spill
	leal	(,%rax,4), %eax
	movl	%eax, -312(%rbp)        # 4-byte Spill
.Ltmp1039:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-72]
	movl	$285, %esi              # imm = 0x11D
	movl	$286, %edx              # imm = 0x11E
	movl	$1, %ecx
	movq	-72(%rbp), %rbx         # 8-byte Reload
.Ltmp1040:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1106 15 is_stmt 1     # susan.c:1106:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1041:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$287, %esi              # imm = 0x11F
	movl	$288, %edx              # imm = 0x120
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1106 29 is_stmt 0     # susan.c:1106:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -72(%rbp)         # 4-byte Spill
.Ltmp1042:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-80]
	movl	$289, %esi              # imm = 0x121
	movl	$1, %edx
	movq	-80(%rbp), %rbx         # 8-byte Reload
.Ltmp1043:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1107 15 is_stmt 1     # susan.c:1107:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1044:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$290, %esi              # imm = 0x122
	movl	$291, %edx              # imm = 0x123
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1107 29 is_stmt 0     # susan.c:1107:29
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -80(%rbp)         # 8-byte Spill
.Ltmp1045:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-320]
	movl	$292, %esi              # imm = 0x124
	movl	$1, %edx
	movq	-320(%rbp), %rbx        # 8-byte Reload
.Ltmp1046:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1108 15 is_stmt 1     # susan.c:1108:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1047:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$293, %esi              # imm = 0x125
	movl	$294, %edx              # imm = 0x126
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1108 27 is_stmt 0     # susan.c:1108:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -320(%rbp)        # 4-byte Spill
.Ltmp1048:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-600]
	movl	$295, %esi              # imm = 0x127
	movl	$1, %edx
	movq	-600(%rbp), %rbx        # 8-byte Reload
.Ltmp1049:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1109 15 is_stmt 1     # susan.c:1109:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1050:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$296, %esi              # imm = 0x128
	movl	$297, %edx              # imm = 0x129
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1109 27 is_stmt 0     # susan.c:1109:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -612(%rbp)        # 4-byte Spill
.Ltmp1051:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-328]
	movl	$298, %esi              # imm = 0x12A
	movl	$1, %edx
	movq	-328(%rbp), %rbx        # 8-byte Reload
.Ltmp1052:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1110 15 is_stmt 1     # susan.c:1110:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1053:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$299, %esi              # imm = 0x12B
	movl	$300, %edx              # imm = 0x12C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1110 27 is_stmt 0     # susan.c:1110:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -328(%rbp)        # 4-byte Spill
.Ltmp1054:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-400]
	movl	$301, %esi              # imm = 0x12D
	movl	$1, %edx
	movq	-400(%rbp), %rbx        # 8-byte Reload
.Ltmp1055:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1111 15 is_stmt 1     # susan.c:1111:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1056:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$302, %esi              # imm = 0x12E
	movl	$303, %edx              # imm = 0x12F
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1111 29 is_stmt 0     # susan.c:1111:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1111 39               # susan.c:1111:39
	movq	%rax, -400(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -600(%rbp)        # 4-byte Spill
.Ltmp1057:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-336]
	movl	$304, %esi              # imm = 0x130
	movl	$1, %edx
	movq	-336(%rbp), %rbx        # 8-byte Reload
.Ltmp1058:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1112 15 is_stmt 1     # susan.c:1112:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1059:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$305, %esi              # imm = 0x131
	movl	$306, %edx              # imm = 0x132
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1112 27 is_stmt 0     # susan.c:1112:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	imull	$-3, %eax, %eax
	movl	%eax, -616(%rbp)        # 4-byte Spill
.Ltmp1060:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-608]
	movl	$307, %esi              # imm = 0x133
	movl	$308, %edx              # imm = 0x134
	movl	$1, %ecx
	movq	-608(%rbp), %rbx        # 8-byte Reload
.Ltmp1061:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1115 15 is_stmt 1     # susan.c:1115:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1062:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$309, %esi              # imm = 0x135
	movl	$310, %edx              # imm = 0x136
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1115 29 is_stmt 0     # susan.c:1115:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -608(%rbp)        # 4-byte Spill
.Ltmp1063:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-592]
	movl	$311, %esi              # imm = 0x137
	movl	$1, %edx
	movq	-592(%rbp), %rbx        # 8-byte Reload
.Ltmp1064:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1116 15 is_stmt 1     # susan.c:1116:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1065:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$312, %esi              # imm = 0x138
	movl	$313, %edx              # imm = 0x139
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1116 29 is_stmt 0     # susan.c:1116:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -592(%rbp)        # 4-byte Spill
.Ltmp1066:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-584]
	movl	$314, %esi              # imm = 0x13A
	movl	$1, %edx
	movq	-584(%rbp), %rbx        # 8-byte Reload
.Ltmp1067:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1117 15 is_stmt 1     # susan.c:1117:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1068:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$315, %esi              # imm = 0x13B
	movl	$316, %edx              # imm = 0x13C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1117 25 is_stmt 0     # susan.c:1117:25
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -584(%rbp)        # 4-byte Spill
.Ltmp1069:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-576]
	movl	$317, %esi              # imm = 0x13D
	movl	$1, %edx
	movq	-576(%rbp), %rbx        # 8-byte Reload
.Ltmp1070:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1119 15 is_stmt 1     # susan.c:1119:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1071:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$318, %esi              # imm = 0x13E
	movl	$319, %edx              # imm = 0x13F
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1119 27 is_stmt 0     # susan.c:1119:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -636(%rbp)        # 4-byte Spill
.Ltmp1072:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-560]
	movl	$320, %esi              # imm = 0x140
	movl	$1, %edx
	movq	-560(%rbp), %rbx        # 8-byte Reload
.Ltmp1073:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1120 15 is_stmt 1     # susan.c:1120:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1074:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$321, %esi              # imm = 0x141
	movl	$322, %edx              # imm = 0x142
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1120 29 is_stmt 0     # susan.c:1120:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -640(%rbp)        # 4-byte Spill
.Ltmp1075:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-544]
	movl	$323, %esi              # imm = 0x143
	movl	$1, %edx
	movq	-544(%rbp), %rbx        # 8-byte Reload
.Ltmp1076:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1121 15 is_stmt 1     # susan.c:1121:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1077:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$324, %esi              # imm = 0x144
	movl	$325, %edx              # imm = 0x145
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1121 27 is_stmt 0     # susan.c:1121:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -644(%rbp)        # 4-byte Spill
.Ltmp1078:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-352]
	movl	$326, %esi              # imm = 0x146
	movl	$327, %edx              # imm = 0x147
	movl	$1, %ecx
	movq	-352(%rbp), %rbx        # 8-byte Reload
.Ltmp1079:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1124 15 is_stmt 1     # susan.c:1124:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1080:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$328, %esi              # imm = 0x148
	movl	$329, %edx              # imm = 0x149
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1124 29 is_stmt 0     # susan.c:1124:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -352(%rbp)        # 4-byte Spill
	imull	$-3, %eax, %eax
	movl	%eax, -544(%rbp)        # 4-byte Spill
.Ltmp1081:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-360]
	movl	$330, %esi              # imm = 0x14A
	movl	$1, %edx
	movq	-360(%rbp), %rbx        # 8-byte Reload
.Ltmp1082:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1125 15 is_stmt 1     # susan.c:1125:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1083:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$331, %esi              # imm = 0x14B
	movl	$332, %edx              # imm = 0x14C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1125 29 is_stmt 0     # susan.c:1125:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1125 39               # susan.c:1125:39
	movq	%rax, -360(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -560(%rbp)        # 4-byte Spill
.Ltmp1084:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-376]
	movl	$333, %esi              # imm = 0x14D
	movl	$1, %edx
	movq	-376(%rbp), %rbx        # 8-byte Reload
.Ltmp1085:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1126 15 is_stmt 1     # susan.c:1126:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1086:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$334, %esi              # imm = 0x14E
	movl	$335, %edx              # imm = 0x14F
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1126 27 is_stmt 0     # susan.c:1126:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -376(%rbp)        # 4-byte Spill
.Ltmp1087:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-520]
	movl	$336, %esi              # imm = 0x150
	movl	$1, %edx
	movq	-520(%rbp), %rbx        # 8-byte Reload
.Ltmp1088:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1127 15 is_stmt 1     # susan.c:1127:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1089:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$337, %esi              # imm = 0x151
	movl	$338, %edx              # imm = 0x152
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1127 27 is_stmt 0     # susan.c:1127:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -520(%rbp)        # 4-byte Spill
.Ltmp1090:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-368]
	movl	$339, %esi              # imm = 0x153
	movl	$1, %edx
	movq	-368(%rbp), %rbx        # 8-byte Reload
.Ltmp1091:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1128 15 is_stmt 1     # susan.c:1128:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1092:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$340, %esi              # imm = 0x154
	movl	$341, %edx              # imm = 0x155
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1128 27 is_stmt 0     # susan.c:1128:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -368(%rbp)        # 4-byte Spill
.Ltmp1093:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-512]
	movl	$342, %esi              # imm = 0x156
	movl	$1, %edx
	movq	-512(%rbp), %rbx        # 8-byte Reload
.Ltmp1094:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1129 15 is_stmt 1     # susan.c:1129:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1095:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$343, %esi              # imm = 0x157
	movl	$344, %edx              # imm = 0x158
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1129 29 is_stmt 0     # susan.c:1129:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -512(%rbp)        # 4-byte Spill
.Ltmp1096:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-392]
	movl	$345, %esi              # imm = 0x159
	movl	$1, %edx
	movq	-392(%rbp), %rbx        # 8-byte Reload
.Ltmp1097:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1130 15 is_stmt 1     # susan.c:1130:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1098:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$346, %esi              # imm = 0x15A
	movl	$347, %edx              # imm = 0x15B
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1130 27 is_stmt 0     # susan.c:1130:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -392(%rbp)        # 4-byte Spill
.Ltmp1099:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-384]
	movl	$348, %esi              # imm = 0x15C
	movl	$349, %edx              # imm = 0x15D
	movl	$1, %ecx
	movq	-384(%rbp), %rbx        # 8-byte Reload
.Ltmp1100:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1133 15 is_stmt 1     # susan.c:1133:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1101:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$350, %esi              # imm = 0x15E
	movl	$351, %edx              # imm = 0x15F
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1133 29 is_stmt 0     # susan.c:1133:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1133 27               # susan.c:1133:27
	movq	%rax, -576(%rbp)        # 8-byte Spill
	leal	(,%rax,4), %eax
	movl	%eax, -384(%rbp)        # 4-byte Spill
.Ltmp1102:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-496]
	movl	$352, %esi              # imm = 0x160
	movl	$1, %edx
	movq	-496(%rbp), %rbx        # 8-byte Reload
.Ltmp1103:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1134 15 is_stmt 1     # susan.c:1134:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1104:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$353, %esi              # imm = 0x161
	movl	$354, %edx              # imm = 0x162
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1134 27 is_stmt 0     # susan.c:1134:27
	movzbl	(%r12,%rbx), %r13d
	.loc	2 1134 39               # susan.c:1134:39
	movq	%r13, -656(%rbp)        # 8-byte Spill
	leal	(%r13,%r13), %eax
	movl	%eax, -496(%rbp)        # 4-byte Spill
.Ltmp1105:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-488]
	movl	$355, %esi              # imm = 0x163
	movl	$1, %edx
	movq	-488(%rbp), %rbx        # 8-byte Reload
.Ltmp1106:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1135 15 is_stmt 1     # susan.c:1135:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1107:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$356, %esi              # imm = 0x164
	movl	$357, %edx              # imm = 0x165
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1135 29 is_stmt 0     # susan.c:1135:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -488(%rbp)        # 4-byte Spill
.Ltmp1108:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-408]
	movl	$358, %esi              # imm = 0x166
	movl	$1, %edx
	movq	-408(%rbp), %rbx        # 8-byte Reload
.Ltmp1109:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1136 15 is_stmt 1     # susan.c:1136:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1110:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$359, %esi              # imm = 0x167
	movl	$360, %edx              # imm = 0x168
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1136 27 is_stmt 0     # susan.c:1136:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -408(%rbp)        # 4-byte Spill
.Ltmp1111:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-96]
	movl	$361, %esi              # imm = 0x169
	movl	$1, %edx
	movq	-96(%rbp), %rbx         # 8-byte Reload
.Ltmp1112:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1137 15 is_stmt 1     # susan.c:1137:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1113:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$362, %esi              # imm = 0x16A
	movl	$363, %edx              # imm = 0x16B
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1137 27 is_stmt 0     # susan.c:1137:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -96(%rbp)         # 8-byte Spill
.Ltmp1114:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-480]
	movl	$364, %esi              # imm = 0x16C
	movl	$365, %edx              # imm = 0x16D
	movl	$1, %ecx
	movq	-480(%rbp), %rbx        # 8-byte Reload
.Ltmp1115:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1140 15 is_stmt 1     # susan.c:1140:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1116:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$366, %esi              # imm = 0x16E
	movl	$367, %edx              # imm = 0x16F
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1140 27 is_stmt 0     # susan.c:1140:27
	movzbl	(%r12,%rbx), %r15d
	movl	%r15d, -480(%rbp)       # 4-byte Spill
.Ltmp1117:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-472]
	movl	$368, %esi              # imm = 0x170
	movl	$1, %edx
	movq	-472(%rbp), %rbx        # 8-byte Reload
.Ltmp1118:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1141 15 is_stmt 1     # susan.c:1141:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1119:
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$369, %esi              # imm = 0x171
	movl	$370, %edx              # imm = 0x172
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1141 29 is_stmt 0     # susan.c:1141:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -472(%rbp)        # 4-byte Spill
.Ltmp1120:
	#DEBUG_VALUE: susan_edges:p <- [RBP+-464]
	movl	$371, %esi              # imm = 0x173
	movl	$1, %edx
	movq	-464(%rbp), %rbx        # 8-byte Reload
.Ltmp1121:
	#DEBUG_VALUE: susan_edges:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1142 15 is_stmt 1     # susan.c:1142:15
	movzbl	(%rbx), %eax
	movq	-344(%rbp), %rbx        # 8-byte Reload
.Ltmp1122:
	subq	%rax, %r14
	leaq	(%r12,%r14), %rdi
	movl	$372, %esi              # imm = 0x174
	movl	$373, %edx              # imm = 0x175
	movl	$1, %ecx
	callq	_KLoad1
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movq	-304(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	addl	%r13d, %eax
	addl	-488(%rbp), %eax        # 4-byte Folded Reload
	movq	%rax, %rsi
	movq	-528(%rbp), %rax        # 8-byte Reload
	addl	%r15d, %eax
	addl	-472(%rbp), %eax        # 4-byte Folded Reload
	movq	%rax, %r11
	.loc	2 1109 24               # susan.c:1109:24
	movq	-568(%rbp), %rax        # 8-byte Reload
	leal	(%rbx,%rax,4), %eax
.Ltmp1123:
	#DEBUG_VALUE: susan_edges:y <- EAX
	.loc	2 1110 29               # susan.c:1110:29
	addl	-72(%rbp), %eax         # 4-byte Folded Reload
.Ltmp1124:
	.loc	2 1111 31               # susan.c:1111:31
	movq	-80(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movl	-320(%rbp), %r15d       # 4-byte Reload
	.loc	2 1112 29               # susan.c:1112:29
	addl	%r15d, %eax
	.loc	2 1124 31               # susan.c:1124:31
	addl	-612(%rbp), %eax        # 4-byte Folded Reload
	movl	-328(%rbp), %ecx        # 4-byte Reload
	.loc	2 1125 31               # susan.c:1125:31
	addl	%ecx, %eax
	.loc	2 1126 29               # susan.c:1126:29
	movq	-400(%rbp), %rdx        # 8-byte Reload
	addl	%edx, %eax
	.loc	2 1127 24               # susan.c:1127:24
	movq	-336(%rbp), %rdx        # 8-byte Reload
	addl	%edx, %eax
	.loc	2 1128 29               # susan.c:1128:29
	addl	-352(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1129 31               # susan.c:1129:31
	movq	-360(%rbp), %rdx        # 8-byte Reload
	addl	%edx, %eax
	movl	-376(%rbp), %edx        # 4-byte Reload
	.loc	2 1130 29               # susan.c:1130:29
	addl	%edx, %eax
	.loc	2 1133 31               # susan.c:1133:31
	addl	-520(%rbp), %eax        # 4-byte Folded Reload
	movl	-368(%rbp), %edi        # 4-byte Reload
	.loc	2 1134 29               # susan.c:1134:29
	addl	%edi, %eax
	movl	-512(%rbp), %r8d        # 4-byte Reload
	.loc	2 1135 24               # susan.c:1135:24
	addl	%r8d, %eax
	movl	-392(%rbp), %r9d        # 4-byte Reload
	.loc	2 1136 29               # susan.c:1136:29
	addl	%r9d, %eax
	.loc	2 1137 29               # susan.c:1137:29
	movq	-576(%rbp), %r10        # 8-byte Reload
	leal	(%rax,%r10,4), %eax
	movl	-408(%rbp), %r10d       # 4-byte Reload
	addl	%r10d, %esi
	.loc	2 1140 29               # susan.c:1140:29
	movq	-96(%rbp), %r13         # 8-byte Reload
	leal	(%rax,%r13,4), %eax
	.loc	2 1141 24               # susan.c:1141:24
	leal	(%rax,%rsi,4), %eax
.Ltmp1125:
	#DEBUG_VALUE: susan_edges:y <- [RBP+-440]
	.loc	2 1108 34               # susan.c:1108:34
	movl	%eax, -440(%rbp)        # 4-byte Spill
	movl	%ebx, %eax
	subl	-536(%rbp), %eax        # 4-byte Folded Reload
.Ltmp1126:
	#DEBUG_VALUE: susan_edges:w <- EAX
	.loc	2 1110 34               # susan.c:1110:34
	subl	-312(%rbp), %eax        # 4-byte Folded Reload
.Ltmp1127:
	.loc	2 1111 36               # susan.c:1111:36
	addl	%r15d, %eax
	.loc	2 1112 34               # susan.c:1112:34
	subl	%ecx, %eax
	.loc	2 1124 36               # susan.c:1124:36
	subl	-600(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1125 36               # susan.c:1125:36
	addl	-616(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1126 34               # susan.c:1126:34
	addl	-544(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1128 34               # susan.c:1128:34
	subl	-560(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1129 36               # susan.c:1129:36
	subl	%edx, %eax
	.loc	2 1130 34               # susan.c:1130:34
	addl	%edi, %eax
	.loc	2 1133 38               # susan.c:1133:38
	subl	-384(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1134 36               # susan.c:1134:36
	subl	-496(%rbp), %eax        # 4-byte Folded Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	-80(%rbp), %rdx         # 8-byte Reload
	leal	(%rdx,%rcx), %ecx
	addl	%r8d, %ecx
	movl	%r8d, %ebx
	addl	%r10d, %ecx
	.loc	2 1136 36               # susan.c:1136:36
	leal	(%rax,%rcx,2), %eax
.Ltmp1128:
	#DEBUG_VALUE: susan_edges:w <- [RBP+-464]
	.loc	2 1142 25               # susan.c:1142:25
	movq	%rax, -464(%rbp)        # 8-byte Spill
	movzbl	(%r12,%r14), %r15d
.Ltmp1129:
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	movq	-504(%rbp), %r12        # 8-byte Reload
	addl	%r15d, %r11d
	leal	(%r11,%r11,8), %r14d
	addl	-72(%rbp), %r12d        # 4-byte Folded Reload
	addl	%r9d, %r12d
	addl	%r15d, %r12d
	movl	$15, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$16, 472(%rsp)
	movl	$328, 464(%rsp)         # imm = 0x148
	movl	$18, 456(%rsp)
	movl	$302, 448(%rsp)         # imm = 0x12E
	movl	$19, 440(%rsp)
	movl	$299, 432(%rsp)         # imm = 0x12B
	movl	$20, 424(%rsp)
	movl	$296, 416(%rsp)         # imm = 0x128
	movl	$21, 408(%rsp)
	movl	$293, 400(%rsp)         # imm = 0x125
	movl	$22, 392(%rsp)
	movl	$290, 384(%rsp)         # imm = 0x122
	movl	$23, 376(%rsp)
	movl	$287, 368(%rsp)         # imm = 0x11F
	movl	$26, 360(%rsp)
	movl	$283, 352(%rsp)         # imm = 0x11B
	movl	$27, 344(%rsp)
	movl	$280, 336(%rsp)         # imm = 0x118
	movl	$28, 328(%rsp)
	movl	$277, 320(%rsp)         # imm = 0x115
	movl	$29, 312(%rsp)
	movl	$274, 304(%rsp)         # imm = 0x112
	movl	$30, 296(%rsp)
	movl	$271, 288(%rsp)         # imm = 0x10F
	movl	$31, 280(%rsp)
	movl	$267, 272(%rsp)         # imm = 0x10B
	movl	$32, 264(%rsp)
	movl	$264, 256(%rsp)         # imm = 0x108
	movl	$33, 248(%rsp)
	movl	$261, 240(%rsp)         # imm = 0x105
	movl	$34, 232(%rsp)
	movl	$399, 224(%rsp)         # imm = 0x18F
	movl	$35, 216(%rsp)
	movl	$126, 208(%rsp)
	movl	$35, 200(%rsp)
	movl	$250, 192(%rsp)
	movl	$17, 184(%rsp)
	movl	$305, 176(%rsp)         # imm = 0x131
	movl	$4, 168(%rsp)
	movl	$372, 160(%rsp)         # imm = 0x174
	movl	$5, 152(%rsp)
	movl	$369, 144(%rsp)         # imm = 0x171
	movl	$6, 136(%rsp)
	movl	$366, 128(%rsp)         # imm = 0x16E
	movl	$7, 120(%rsp)
	movl	$362, 112(%rsp)         # imm = 0x16A
	movl	$8, 104(%rsp)
	movl	$359, 96(%rsp)          # imm = 0x167
	movl	$9, 88(%rsp)
	movl	$356, 80(%rsp)          # imm = 0x164
	movl	$10, 72(%rsp)
	movl	$353, 64(%rsp)          # imm = 0x161
	movl	$11, 56(%rsp)
	movl	$350, 48(%rsp)          # imm = 0x15E
	movl	$10, 40(%rsp)
	movl	$346, 32(%rsp)          # imm = 0x15A
	movl	$11, 24(%rsp)
	movl	$343, 16(%rsp)          # imm = 0x157
	movl	$12, 8(%rsp)
	movl	$340, (%rsp)            # imm = 0x154
	movl	$405, %edi              # imm = 0x195
	movl	$33, %esi
	movl	$334, %edx              # imm = 0x14E
	movl	$14, %ecx
	movl	$337, %r8d              # imm = 0x151
	movl	$13, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$405, %edi              # imm = 0x195
	callq	_KPushCDep
	movl	-440(%rbp), %eax        # 4-byte Reload
.Ltmp1130:
	#DEBUG_VALUE: susan_edges:y <- EAX
	.loc	2 1144 15               # susan.c:1144:15
	addl	%r14d, %eax
.Ltmp1131:
	movl	%eax, %r14d
	je	.LBB13_36
# BB#37:                                # %if.else1185
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	#DEBUG_VALUE: susan_edges:w <- [RBP+-464]
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	-400(%rbp), %rdi        # 8-byte Reload
	addl	%eax, %edi
	addl	-592(%rbp), %edi        # 4-byte Folded Reload
	addl	-640(%rbp), %edi        # 4-byte Folded Reload
	movq	-360(%rbp), %rax        # 8-byte Reload
	addl	%eax, %edi
	addl	%ebx, %edi
	movq	-336(%rbp), %rdx        # 8-byte Reload
	addl	-72(%rbp), %edx         # 4-byte Folded Reload
	addl	-608(%rbp), %edx        # 4-byte Folded Reload
	addl	-644(%rbp), %edx        # 4-byte Folded Reload
	addl	-352(%rbp), %edx        # 4-byte Folded Reload
	addl	-392(%rbp), %edx        # 4-byte Folded Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	.loc	2 1112 22               # susan.c:1112:22
	addl	-624(%rbp), %ecx        # 4-byte Folded Reload
.Ltmp1132:
	#DEBUG_VALUE: susan_edges:x <- ECX
	.loc	2 1115 24               # susan.c:1115:24
	movq	-344(%rbp), %rax        # 8-byte Reload
	addl	%eax, %ecx
.Ltmp1133:
	.loc	2 1116 24               # susan.c:1116:24
	movq	-64(%rbp), %rax         # 8-byte Reload
	addl	%eax, %ecx
	.loc	2 1117 22               # susan.c:1117:22
	movq	-304(%rbp), %rax        # 8-byte Reload
	addl	%eax, %ecx
	.loc	2 1119 24               # susan.c:1119:24
	addl	-312(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1120 24               # susan.c:1120:24
	addl	-320(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1121 22               # susan.c:1121:22
	addl	-328(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1124 24               # susan.c:1124:24
	addl	-584(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1125 24               # susan.c:1125:24
	addl	-636(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1126 24               # susan.c:1126:24
	addl	-376(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1128 24               # susan.c:1128:24
	addl	-368(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1129 24               # susan.c:1129:24
	addl	-384(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1130 22               # susan.c:1130:22
	movq	-656(%rbp), %rax        # 8-byte Reload
	addl	%eax, %ecx
	.loc	2 1133 24               # susan.c:1133:24
	addl	-408(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1137 25               # susan.c:1137:25
	movq	-96(%rbp), %rax         # 8-byte Reload
                                        # kill: EAX<def> EAX<kill> RAX<kill>
	shll	$2, %eax
	.loc	2 1134 24               # susan.c:1134:24
	addl	%eax, %ecx
	.loc	2 1136 24               # susan.c:1136:24
	addl	-480(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1137 22               # susan.c:1137:22
	addl	%r15d, %ecx
	.loc	2 1140 24               # susan.c:1140:24
	leal	(%rcx,%rdi,4), %ebx
.Ltmp1134:
	#DEBUG_VALUE: susan_edges:x <- EBX
	leal	(%rdx,%rdx,8), %eax
	.loc	2 1142 22               # susan.c:1142:22
	addl	%eax, %ebx
.Ltmp1135:
	movl	$20, %edi
	callq	_KWork
	.loc	2 1147 18               # susan.c:1147:18
.Ltmp1136:
	cvtsi2ssl	%ebx, %xmm1
	.loc	2 1147 31 is_stmt 0     # susan.c:1147:31
	cvtsi2ssl	%r14d, %xmm0
	.loc	2 1147 17               # susan.c:1147:17
	divss	%xmm0, %xmm1
.Ltmp1137:
	#DEBUG_VALUE: susan_edges:z <- XMM1
	movss	%xmm1, -64(%rbp)        # 4-byte Spill
.Ltmp1138:
	#DEBUG_VALUE: susan_edges:z <- [RBP+-64]
	movl	$35, 584(%rsp)
	movl	$331, 576(%rsp)         # imm = 0x14B
	movl	$36, 568(%rsp)
	movl	$328, 560(%rsp)         # imm = 0x148
	movl	$35, 552(%rsp)
	movl	$324, 544(%rsp)         # imm = 0x144
	movl	$42, 536(%rsp)
	movl	$302, 528(%rsp)         # imm = 0x12E
	movl	$41, 520(%rsp)
	movl	$299, 512(%rsp)         # imm = 0x12B
	movl	$40, 504(%rsp)
	movl	$296, 496(%rsp)         # imm = 0x128
	movl	$42, 488(%rsp)
	movl	$293, 480(%rsp)         # imm = 0x125
	movl	$45, 472(%rsp)
	movl	$290, 464(%rsp)         # imm = 0x122
	movl	$46, 456(%rsp)
	movl	$287, 448(%rsp)         # imm = 0x11F
	movl	$47, 440(%rsp)
	movl	$283, 432(%rsp)         # imm = 0x11B
	movl	$47, 424(%rsp)
	movl	$280, 416(%rsp)         # imm = 0x118
	movl	$48, 408(%rsp)
	movl	$277, 400(%rsp)         # imm = 0x115
	movl	$49, 392(%rsp)
	movl	$274, 384(%rsp)         # imm = 0x112
	movl	$50, 376(%rsp)
	movl	$271, 368(%rsp)         # imm = 0x10F
	movl	$51, 360(%rsp)
	movl	$267, 352(%rsp)         # imm = 0x10B
	movl	$52, 344(%rsp)
	movl	$264, 336(%rsp)         # imm = 0x108
	movl	$53, 328(%rsp)
	movl	$261, 320(%rsp)         # imm = 0x105
	movl	$54, 312(%rsp)
	movl	$399, 304(%rsp)         # imm = 0x18F
	movl	$55, 296(%rsp)
	movl	$126, 288(%rsp)
	movl	$55, 280(%rsp)
	movl	$250, 272(%rsp)
	movl	$36, 264(%rsp)
	movl	$321, 256(%rsp)         # imm = 0x141
	movl	$35, 248(%rsp)
	movl	$318, 240(%rsp)         # imm = 0x13E
	movl	$36, 232(%rsp)
	movl	$315, 224(%rsp)         # imm = 0x13B
	movl	$39, 216(%rsp)
	movl	$312, 208(%rsp)         # imm = 0x138
	movl	$40, 200(%rsp)
	movl	$309, 192(%rsp)         # imm = 0x135
	movl	$41, 184(%rsp)
	movl	$305, 176(%rsp)         # imm = 0x131
	movl	$24, 168(%rsp)
	movl	$372, 160(%rsp)         # imm = 0x174
	movl	$25, 152(%rsp)
	movl	$369, 144(%rsp)         # imm = 0x171
	movl	$26, 136(%rsp)
	movl	$366, 128(%rsp)         # imm = 0x16E
	movl	$27, 120(%rsp)
	movl	$362, 112(%rsp)         # imm = 0x16A
	movl	$28, 104(%rsp)
	movl	$359, 96(%rsp)          # imm = 0x167
	movl	$29, 88(%rsp)
	movl	$356, 80(%rsp)          # imm = 0x164
	movl	$30, 72(%rsp)
	movl	$353, 64(%rsp)          # imm = 0x161
	movl	$31, 56(%rsp)
	movl	$350, 48(%rsp)          # imm = 0x15E
	movl	$30, 40(%rsp)
	movl	$346, 32(%rsp)          # imm = 0x15A
	movl	$31, 24(%rsp)
	movl	$343, 16(%rsp)          # imm = 0x157
	movl	$32, 8(%rsp)
	movl	$340, (%rsp)            # imm = 0x154
	movl	$403, %ebx              # imm = 0x193
	movl	$403, %edi              # imm = 0x193
	movl	$39, %esi
	movl	$334, %edx              # imm = 0x14E
	movl	$34, %ecx
	movl	$337, %r8d              # imm = 0x151
	movl	$33, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	jmp	.LBB13_38
.Ltmp1139:
.LBB13_36:                              # %if.then1184
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	#DEBUG_VALUE: susan_edges:z <- 1.000000e+06
	#DEBUG_VALUE: susan_edges:w <- [RBP+-464]
	callq	_KPopCDep
	xorl	%ebx, %ebx
	movss	.LCPI13_1(%rip), %xmm0
	movss	%xmm0, -64(%rbp)        # 4-byte Spill
.LBB13_38:                              # %if.end1189
                                        #   in Loop: Header=BB13_11 Depth=2
	movl	-620(%rbp), %r15d       # 4-byte Reload
.Ltmp1140:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	movabsq	$-159188540092120476, %r13 # imm = 0xFDCA72DDBF7F0264
	movq	-96(%rbp), %r14         # 8-byte Reload
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	#DEBUG_VALUE: susan_edges:w <- [RBP+-464]
	movl	$404, %edi              # imm = 0x194
	callq	_KPushCDep
	movl	$402, %edi              # imm = 0x192
	movl	$404, %edx              # imm = 0x194
	movl	$405, %ecx              # imm = 0x195
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$2, 16(%rsp)
	movl	$402, 8(%rsp)           # imm = 0x192
	movl	$3, (%rsp)
	movl	$407, %edi              # imm = 0x197
	movl	$250, %esi
	movl	$4, %edx
	movl	$126, %ecx
	movl	$4, %r8d
	movl	$399, %r9d              # imm = 0x18F
	callq	_KTimestamp4
	callq	_KPopCDep
	movl	$407, %edi              # imm = 0x197
	callq	_KPushCDep
	movss	.LCPI13_2(%rip), %xmm0
	.loc	2 1148 15 is_stmt 1     # susan.c:1148:15
	ucomiss	-64(%rbp), %xmm0        # 4-byte Folded Reload
	jbe	.LBB13_40
.Ltmp1141:
# BB#39:                                # %if.then1193
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	#DEBUG_VALUE: susan_edges:a <- 0
	#DEBUG_VALUE: susan_edges:b <- 1
	callq	_KPopCDep
	movl	$1, %eax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	xorl	%r14d, %r14d
	xorl	%ebx, %ebx
.Ltmp1142:
	xorl	%r12d, %r12d
	jmp	.LBB13_43
	.align	16, 0x90
.LBB13_40:                              # %if.else1194
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
.Ltmp1143:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	#DEBUG_VALUE: susan_edges:w <- [RBP+-464]
	movl	$2, %edi
	callq	_KWork
	movl	$4, 16(%rsp)
	movl	$402, 8(%rsp)           # imm = 0x192
	movl	$5, (%rsp)
	movl	$408, %edi              # imm = 0x198
	movl	$250, %esi
	movl	$6, %edx
	movl	$126, %ecx
	movl	$6, %r8d
	movl	$399, %r9d              # imm = 0x18F
	callq	_KTimestamp4
	callq	_KPopCDep
	movl	$408, %edi              # imm = 0x198
	callq	_KPushCDep
	.loc	2 1149 22               # susan.c:1149:22
.Ltmp1144:
	movss	-64(%rbp), %xmm0        # 4-byte Reload
	ucomiss	.LCPI13_3(%rip), %xmm0
	jbe	.LBB13_42
.Ltmp1145:
# BB#41:                                # %if.then1198
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	#DEBUG_VALUE: susan_edges:a <- 1
	#DEBUG_VALUE: susan_edges:b <- 0
	callq	_KPopCDep
	movl	$1, %r12d
	movl	$408, %ebx              # imm = 0x198
.Ltmp1146:
	xorl	%r14d, %r14d
	xorl	%eax, %eax
	.loc	2 1149 60 is_stmt 0     # susan.c:1149:60
.Ltmp1147:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB13_43
.Ltmp1148:
.LBB13_42:                              # %if.else1199
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	#DEBUG_VALUE: susan_edges:w <- [RBP+-464]
	imull	$-3, -480(%rbp), %eax   # 4-byte Folded Reload
	.loc	2 1137 36 is_stmt 1     # susan.c:1137:36
	movq	-464(%rbp), %rcx        # 8-byte Reload
	leal	(%rcx,%r14,4), %ebx
.Ltmp1149:
	#DEBUG_VALUE: susan_edges:w <- EBX
	leal	(%r12,%r12,2), %ecx
	.loc	2 1140 36               # susan.c:1140:36
	addl	%eax, %ebx
.Ltmp1150:
	.loc	2 1142 34               # susan.c:1142:34
	addl	%ecx, %ebx
	movl	$1, %eax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movl	$1, %edi
	callq	_KWork
	movl	$5, 408(%rsp)
	movl	$402, 400(%rsp)         # imm = 0x192
	movl	$14, 392(%rsp)
	movl	$331, 384(%rsp)         # imm = 0x14B
	movl	$15, 376(%rsp)
	movl	$328, 368(%rsp)         # imm = 0x148
	movl	$17, 360(%rsp)
	movl	$302, 352(%rsp)         # imm = 0x12E
	movl	$16, 344(%rsp)
	movl	$299, 336(%rsp)         # imm = 0x12B
	movl	$17, 328(%rsp)
	movl	$293, 320(%rsp)         # imm = 0x125
	movl	$20, 312(%rsp)
	movl	$290, 304(%rsp)         # imm = 0x122
	movl	$21, 296(%rsp)
	movl	$287, 288(%rsp)         # imm = 0x11F
	movl	$22, 280(%rsp)
	movl	$283, 272(%rsp)         # imm = 0x11B
	movl	$23, 264(%rsp)
	movl	$280, 256(%rsp)         # imm = 0x118
	movl	$24, 248(%rsp)
	movl	$274, 240(%rsp)         # imm = 0x112
	movl	$25, 232(%rsp)
	movl	$271, 224(%rsp)         # imm = 0x10F
	movl	$26, 216(%rsp)
	movl	$267, 208(%rsp)         # imm = 0x10B
	movl	$27, 200(%rsp)
	movl	$261, 192(%rsp)         # imm = 0x105
	movl	$28, 184(%rsp)
	movl	$399, 176(%rsp)         # imm = 0x18F
	movl	$29, 168(%rsp)
	movl	$126, 160(%rsp)
	movl	$29, 152(%rsp)
	movl	$250, 144(%rsp)
	movl	$16, 136(%rsp)
	movl	$305, 128(%rsp)         # imm = 0x131
	movl	$4, 120(%rsp)
	movl	$372, 112(%rsp)         # imm = 0x174
	movl	$5, 104(%rsp)
	movl	$366, 96(%rsp)          # imm = 0x16E
	movl	$6, 88(%rsp)
	movl	$362, 80(%rsp)          # imm = 0x16A
	movl	$7, 72(%rsp)
	movl	$359, 64(%rsp)          # imm = 0x167
	movl	$8, 56(%rsp)
	movl	$353, 48(%rsp)          # imm = 0x161
	movl	$9, 40(%rsp)
	movl	$350, 32(%rsp)          # imm = 0x15E
	movl	$10, 24(%rsp)
	movl	$346, 16(%rsp)          # imm = 0x15A
	movl	$11, 8(%rsp)
	movl	$343, (%rsp)            # imm = 0x157
	movl	$409, %r14d             # imm = 0x199
	movl	$409, %edi              # imm = 0x199
	movl	$28, %esi
	movl	$334, %edx              # imm = 0x14E
	movl	$11, %ecx
	movl	$340, %r8d              # imm = 0x154
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$409, %edi              # imm = 0x199
	callq	_KPushCDep
	callq	_KPopCDep
	.loc	2 1150 37               # susan.c:1150:37
.Ltmp1151:
	testl	%ebx, %ebx
	movl	$1, %r12d
	movl	$-1, %eax
	.loc	2 1150 55 is_stmt 0     # susan.c:1150:55
.Ltmp1152:
	cmovgl	%eax, %r12d
	movl	$408, %ebx              # imm = 0x198
.Ltmp1153:
.LBB13_43:                              # %if.end1206
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	movl	$404, %edi              # imm = 0x194
	callq	_KPushCDep
	movl	$410, %edi              # imm = 0x19A
	xorl	%esi, %esi
	movl	$404, %edx              # imm = 0x194
	movl	$407, %ecx              # imm = 0x197
	movl	%ebx, %r8d
	callq	_KPhi3To1
	movl	$406, %edi              # imm = 0x196
	xorl	%esi, %esi
	movl	$404, %edx              # imm = 0x194
	movl	$407, %ecx              # imm = 0x197
	movl	%ebx, %r8d
	movl	%r14d, %r9d
	callq	_KPhi4To1
	movl	$10, %edi
	callq	_KWork
	.loc	2 1152 21 is_stmt 1     # susan.c:1152:21
.Ltmp1154:
	movq	-432(%rbp), %rax        # 8-byte Reload
	leal	(%rax,%r12), %eax
	imull	%r15d, %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %r14
	movq	-448(%rbp), %rbx        # 8-byte Reload
.Ltmp1155:
	#DEBUG_VALUE: susan_edges:r <- RBX
	leaq	(%rbx,%r14), %rdi
	movl	$374, %esi              # imm = 0x176
	movl	$375, %edx              # imm = 0x177
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1156:
	.loc	2 1152 16 is_stmt 0     # susan.c:1152:16
	movsbl	(%rbx,%r14), %r14d
.Ltmp1157:
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	movl	$1, 32(%rsp)
	movl	$374, 24(%rsp)          # imm = 0x176
	movl	$2, 16(%rsp)
	movl	$399, 8(%rsp)           # imm = 0x18F
	movl	$1, (%rsp)
	movl	$416, %edi              # imm = 0x1A0
	movl	$250, %esi
	movl	$3, %edx
	movl	$126, %ecx
	movl	$3, %r8d
	movl	$128, %r9d
	callq	_KTimestamp5
	callq	_KPopCDep
	movl	-296(%rbp), %eax        # 4-byte Reload
	movsbl	%al, %ebx
	cmpl	%r14d, %ebx
	jle	.LBB13_50
# BB#44:                                # %land.lhs.true1216
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
.Ltmp1158:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	movl	$416, %edi              # imm = 0x1A0
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1152 51               # susan.c:1152:51
.Ltmp1159:
	movq	-432(%rbp), %rax        # 8-byte Reload
                                        # kill: EAX<def> EAX<kill> RAX<kill>
	subl	%r12d, %eax
	imull	%r15d, %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	subl	%ecx, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movq	%r12, -72(%rbp)         # 8-byte Spill
	movslq	%eax, %r12
	movl	%r15d, %r14d
	movq	%r13, %r15
	movq	-448(%rbp), %r13        # 8-byte Reload
.Ltmp1160:
	#DEBUG_VALUE: susan_edges:r <- R13
	leaq	(%r13,%r12), %rdi
	movl	$376, %esi              # imm = 0x178
	movl	$377, %edx              # imm = 0x179
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1152 46               # susan.c:1152:46
	movsbl	(%r13,%r12), %r12d
.Ltmp1161:
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	movq	%r15, %r13
	movl	%r14d, %r15d
	movl	%ebx, %r14d
	movl	$1, 48(%rsp)
	movl	$376, 40(%rsp)          # imm = 0x178
	movl	$2, 32(%rsp)
	movl	$374, 24(%rsp)          # imm = 0x176
	movl	$3, 16(%rsp)
	movl	$399, 8(%rsp)           # imm = 0x18F
	movl	$2, (%rsp)
	movl	$417, %edi              # imm = 0x1A1
	movl	$250, %esi
	movl	$4, %edx
	movl	$126, %ecx
	movl	$4, %r8d
	movl	$128, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	cmpl	%r12d, %r14d
	movq	-72(%rbp), %r12         # 8-byte Reload
	jl	.LBB13_50
.Ltmp1162:
# BB#45:                                # %land.lhs.true1226
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	movl	$417, %edi              # imm = 0x1A1
	callq	_KPushCDep
	movl	$14, %edi
	callq	_KWork
	.loc	2 1153 21 is_stmt 1     # susan.c:1153:21
	movq	-432(%rbp), %rax        # 8-byte Reload
	leal	(%rax,%r12,2), %eax
	imull	%r15d, %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	leal	(%rax,%rcx,2), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movq	%r13, %r15
	movslq	%eax, %r13
	movq	-448(%rbp), %rbx        # 8-byte Reload
.Ltmp1163:
	#DEBUG_VALUE: susan_edges:r <- RBX
	leaq	(%rbx,%r13), %rdi
	movl	$378, %esi              # imm = 0x17A
	movl	$379, %edx              # imm = 0x17B
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1164:
	.loc	2 1152 16               # susan.c:1152:16
	movsbl	(%rbx,%r13), %ebx
.Ltmp1165:
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	movq	%r15, %r13
	movl	-620(%rbp), %r15d       # 4-byte Reload
	movl	$1, 64(%rsp)
	movl	$378, 56(%rsp)          # imm = 0x17A
	movl	$2, 48(%rsp)
	movl	$376, 40(%rsp)          # imm = 0x178
	movl	$3, 32(%rsp)
	movl	$374, 24(%rsp)          # imm = 0x176
	movl	$4, 16(%rsp)
	movl	$399, 8(%rsp)           # imm = 0x18F
	movl	$3, (%rsp)
	movl	$418, %edi              # imm = 0x1A2
	movl	$250, %esi
	movl	$5, %edx
	movl	$126, %ecx
	movl	$5, %r8d
	movl	$128, %r9d
	callq	_KTimestamp7
	callq	_KPopCDep
	cmpl	%ebx, %r14d
	jle	.LBB13_50
# BB#46:                                # %land.lhs.true1238
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
.Ltmp1166:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	movl	$418, %edi              # imm = 0x1A2
	callq	_KPushCDep
	movl	$14, %edi
	callq	_KWork
	.loc	2 1153 59               # susan.c:1153:59
.Ltmp1167:
	addl	%r12d, %r12d
	movq	-432(%rbp), %rax        # 8-byte Reload
                                        # kill: EAX<def> EAX<kill> RAX<kill>
	subl	%r12d, %eax
	imull	%r15d, %eax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %ecx
	subl	%ecx, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %r15
	movq	-448(%rbp), %rbx        # 8-byte Reload
.Ltmp1168:
	#DEBUG_VALUE: susan_edges:r <- RBX
	leaq	(%rbx,%r15), %rdi
	movl	$380, %esi              # imm = 0x17C
	movl	$381, %edx              # imm = 0x17D
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1153 54 is_stmt 0     # susan.c:1153:54
	movsbl	(%rbx,%r15), %ebx
.Ltmp1169:
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	callq	_KPopCDep
	movl	$1, 88(%rsp)
	movl	$380, 80(%rsp)          # imm = 0x17C
	movl	$2, 72(%rsp)
	movl	$378, 64(%rsp)          # imm = 0x17A
	movl	$3, 56(%rsp)
	movl	$376, 48(%rsp)          # imm = 0x178
	movl	$4, 40(%rsp)
	movl	$374, 32(%rsp)          # imm = 0x176
	movl	$5, 24(%rsp)
	movl	$399, 16(%rsp)          # imm = 0x18F
	movl	$4, 8(%rsp)
	movl	$128, (%rsp)
	movl	$419, %edi              # imm = 0x1A3
	movl	$8, %esi
	movl	$250, %edx
	movl	$6, %ecx
	movl	$126, %r8d
	movl	$6, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	cmpl	%ebx, %r14d
	jl	.LBB13_50
# BB#47:                                # %if.then1250
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
.Ltmp1170:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:x <- 0
	movl	$419, %edi              # imm = 0x1A3
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	movq	-912(%rbp), %r14        # 8-byte Reload
	movq	-56(%rbp), %rbx         # 8-byte Reload
.Ltmp1171:
	leaq	-5(%r14,%rbx), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 1154 13 is_stmt 1     # susan.c:1154:13
	movb	$2, -5(%r14,%rbx)
	callq	_KPopCDep
	jmp	.LBB13_50
.Ltmp1172:
.LBB13_18:                              # %if.then682
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:z <- 1.000000e+06
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	callq	_KPopCDep
	xorl	%ebx, %ebx
	movss	.LCPI13_1(%rip), %xmm0
	movss	%xmm0, -64(%rbp)        # 4-byte Spill
.LBB13_20:                              # %if.end685
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$388, %edi              # imm = 0x184
	callq	_KPushCDep
	movl	$386, %edi              # imm = 0x182
	movl	$388, %edx              # imm = 0x184
	movl	$389, %ecx              # imm = 0x185
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$2, 48(%rsp)
	movl	$386, 40(%rsp)          # imm = 0x182
	movl	$4, 32(%rsp)
	movl	$246, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$12, (%rsp)
	movl	$392, %edi              # imm = 0x188
	movl	$1, %esi
	movl	$11, %edx
	movl	$250, %ecx
	movl	$12, %r8d
	movl	$126, %r9d
	callq	_KTimestamp6
	movl	$386, %edi              # imm = 0x182
	movl	$386, %esi              # imm = 0x182
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$392, %edi              # imm = 0x188
	callq	_KPushCDep
	xorps	%xmm0, %xmm0
	movss	-64(%rbp), %xmm1        # 4-byte Reload
	.loc	2 1070 17               # susan.c:1070:17
.Ltmp1173:
	ucomiss	%xmm1, %xmm0
	jbe	.LBB13_22
# BB#21:                                # %if.then688
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$2, %edi
	callq	_KWork
	.loc	2 1070 28 is_stmt 0     # susan.c:1070:28
.Ltmp1174:
	movss	-64(%rbp), %xmm0        # 4-byte Reload
	xorps	.LCPI13_4(%rip), %xmm0
.Ltmp1175:
	#DEBUG_VALUE: susan_edges:w <- -1
	#DEBUG_VALUE: susan_edges:z <- undef
	movss	%xmm0, -64(%rbp)        # 4-byte Spill
.Ltmp1176:
	#DEBUG_VALUE: susan_edges:z <- [RBP+-64]
	movl	$4, 48(%rsp)
	movl	$386, 40(%rsp)          # imm = 0x182
	movl	$6, 32(%rsp)
	movl	$246, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$14, (%rsp)
	movl	$391, %ebx              # imm = 0x187
	movl	$391, %edi              # imm = 0x187
	movl	$1, %esi
	movl	$13, %edx
	movl	$250, %ecx
	movl	$14, %r8d
	movl	$126, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	movl	$-1, %r15d
	jmp	.LBB13_23
.Ltmp1177:
.LBB13_22:                              # %if.else690
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	#DEBUG_VALUE: susan_edges:w <- 1
	callq	_KPopCDep
	movl	$1, %r15d
	movl	$386, %ebx              # imm = 0x182
.LBB13_23:                              # %if.end691
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$388, %edi              # imm = 0x184
	callq	_KPushCDep
	movl	$390, %edi              # imm = 0x186
	movl	$388, %edx              # imm = 0x184
	movl	$392, %ecx              # imm = 0x188
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$393, %edi              # imm = 0x189
	xorl	%esi, %esi
	movl	$388, %edx              # imm = 0x184
	movl	$392, %ecx              # imm = 0x188
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$2, 48(%rsp)
	movl	$390, 40(%rsp)          # imm = 0x186
	movl	$4, 32(%rsp)
	movl	$246, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$12, (%rsp)
	movl	$395, %edi              # imm = 0x18B
	movl	$1, %esi
	movl	$11, %edx
	movl	$250, %ecx
	movl	$12, %r8d
	movl	$126, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	movl	$395, %edi              # imm = 0x18B
	callq	_KPushCDep
	movss	.LCPI13_2(%rip), %xmm0
	movss	-64(%rbp), %xmm1        # 4-byte Reload
	.loc	2 1072 17 is_stmt 1     # susan.c:1072:17
	ucomiss	%xmm1, %xmm0
	jbe	.LBB13_25
# BB#24:                                # %if.then695
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
.Ltmp1178:
	#DEBUG_VALUE: susan_edges:a <- 0
	#DEBUG_VALUE: susan_edges:b <- 1
	callq	_KPopCDep
	movl	$1, %eax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	xorl	%r14d, %r14d
	xorl	%r15d, %r15d
	xorl	%r13d, %r13d
	jmp	.LBB13_28
.LBB13_25:                              # %if.else696
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$2, %edi
	callq	_KWork
	movl	$4, 48(%rsp)
	movl	$390, 40(%rsp)          # imm = 0x186
	movl	$6, 32(%rsp)
	movl	$246, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$14, (%rsp)
	movl	$396, %edi              # imm = 0x18C
	movl	$1, %esi
	movl	$13, %edx
	movl	$250, %ecx
	movl	$14, %r8d
	movl	$126, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	movl	$396, %edi              # imm = 0x18C
	callq	_KPushCDep
	.loc	2 1073 24               # susan.c:1073:24
.Ltmp1179:
	movss	-64(%rbp), %xmm0        # 4-byte Reload
	ucomiss	.LCPI13_3(%rip), %xmm0
	jbe	.LBB13_27
# BB#26:                                # %if.then700
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
.Ltmp1180:
	#DEBUG_VALUE: susan_edges:a <- 1
	#DEBUG_VALUE: susan_edges:b <- 0
	callq	_KPopCDep
	movl	$1, %r13d
	movl	$396, %r15d             # imm = 0x18C
	xorl	%r14d, %r14d
	xorl	%eax, %eax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB13_28
.LBB13_27:                              # %if.else701
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$1, %ebx
	movl	$1, %edi
	callq	_KWork
	movl	$1, 64(%rsp)
	movl	$393, 56(%rsp)          # imm = 0x189
	movl	$5, 48(%rsp)
	movl	$390, 40(%rsp)          # imm = 0x186
	movl	$7, 32(%rsp)
	movl	$246, 24(%rsp)
	movl	$14, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$15, (%rsp)
	movl	$397, %r14d             # imm = 0x18D
	movl	$397, %edi              # imm = 0x18D
	movl	$1, %esi
	movl	$14, %edx
	movl	$250, %ecx
	movl	$15, %r8d
	movl	$126, %r9d
	callq	_KTimestamp7
	callq	_KPopCDep
	movl	$397, %edi              # imm = 0x18D
	callq	_KPushCDep
	callq	_KPopCDep
	.loc	2 1074 40               # susan.c:1074:40
.Ltmp1181:
	testl	%r15d, %r15d
	movl	$-1, %r13d
	.loc	2 1074 57 is_stmt 0     # susan.c:1074:57
.Ltmp1182:
	cmovgl	%ebx, %r13d
	movl	$1, %eax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movl	$396, %r15d             # imm = 0x18C
.Ltmp1183:
.LBB13_28:                              # %if.end708
                                        #   in Loop: Header=BB13_11 Depth=2
	movq	-48(%rbp), %rbx         # 8-byte Reload
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$388, %edi              # imm = 0x184
	callq	_KPushCDep
	movl	$394, %edi              # imm = 0x18A
	xorl	%esi, %esi
	movl	$388, %edx              # imm = 0x184
	movl	$395, %ecx              # imm = 0x18B
	movl	%r15d, %r8d
	movl	%r14d, %r9d
	callq	_KPhi4To1
	movl	$398, %edi              # imm = 0x18E
	xorl	%esi, %esi
	movl	$388, %edx              # imm = 0x184
	movl	$395, %ecx              # imm = 0x18B
	movl	%r15d, %r8d
	callq	_KPhi3To1
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %r12        # 8-byte Reload
	.loc	2 1076 23 is_stmt 1     # susan.c:1076:23
.Ltmp1184:
	leal	(%r12,%r13), %eax
.Ltmp1185:
	#DEBUG_VALUE: susan_edges:x_size <- undef
	imull	-620(%rbp), %eax        # 4-byte Folded Reload
.Ltmp1186:
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	movq	-64(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	addl	%ebx, %eax
	movq	%rbx, %r14
	movslq	%eax, %rbx
	movq	-448(%rbp), %r15        # 8-byte Reload
.Ltmp1187:
	#DEBUG_VALUE: susan_edges:r <- R15
	leaq	(%r15,%rbx), %rdi
	movl	$252, %esi
	movl	$253, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1188:
	.loc	2 1076 18 is_stmt 0     # susan.c:1076:18
	movsbl	(%r15,%rbx), %ebx
	movl	$1, 48(%rsp)
	movl	$252, 40(%rsp)
	movl	$3, 32(%rsp)
	movl	$246, 24(%rsp)
	movl	$10, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$11, (%rsp)
	movl	$412, %edi              # imm = 0x19C
	movl	$1, %esi
	movl	$10, %edx
	movl	$250, %ecx
	movl	$11, %r8d
	movl	$126, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	movl	-296(%rbp), %eax        # 4-byte Reload
	movsbl	%al, %eax
	cmpl	%ebx, %eax
	jle	.LBB13_48
.Ltmp1189:
# BB#29:                                # %land.lhs.true
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- R15
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$412, %edi              # imm = 0x19C
	movl	%eax, -72(%rbp)         # 4-byte Spill
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1076 53               # susan.c:1076:53
.Ltmp1190:
	movl	%r12d, %eax
	subl	%r13d, %eax
	imull	-620(%rbp), %eax        # 4-byte Folded Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	subl	%ecx, %eax
	addl	%r14d, %eax
	movslq	%eax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$254, %esi
	movl	$255, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1076 48               # susan.c:1076:48
	movsbl	(%r15,%rbx), %ebx
	movl	$1, 64(%rsp)
	movl	$254, 56(%rsp)
	movl	$2, 48(%rsp)
	movl	$252, 40(%rsp)
	movl	$4, 32(%rsp)
	movl	$246, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$128, 8(%rsp)
	movl	$12, (%rsp)
	movl	$413, %edi              # imm = 0x19D
	movl	$1, %esi
	movl	$11, %edx
	movl	$250, %ecx
	movl	$12, %r8d
	movl	$126, %r9d
	callq	_KTimestamp7
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
	cmpl	%ebx, %eax
	jl	.LBB13_48
.Ltmp1191:
# BB#30:                                # %land.lhs.true727
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- R15
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$413, %edi              # imm = 0x19D
	callq	_KPushCDep
	movl	$14, %edi
	callq	_KWork
	.loc	2 1077 23 is_stmt 1     # susan.c:1077:23
	leal	(%r12,%r13,2), %eax
	imull	-620(%rbp), %eax        # 4-byte Folded Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	leal	(%rax,%rcx,2), %eax
	addl	%r14d, %eax
	movslq	%eax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$256, %esi              # imm = 0x100
	movl	$257, %edx              # imm = 0x101
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1192:
	.loc	2 1076 18               # susan.c:1076:18
	movsbl	(%r15,%rbx), %ebx
	movl	$1, 88(%rsp)
	movl	$256, 80(%rsp)          # imm = 0x100
	movl	$2, 72(%rsp)
	movl	$254, 64(%rsp)
	movl	$3, 56(%rsp)
	movl	$252, 48(%rsp)
	movl	$5, 40(%rsp)
	movl	$246, 32(%rsp)
	movl	$12, 24(%rsp)
	movl	$128, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$126, (%rsp)
	movl	$414, %edi              # imm = 0x19E
	movl	$8, %esi
	movl	$1, %edx
	movl	$12, %ecx
	movl	$250, %r8d
	movl	$13, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
	cmpl	%ebx, %eax
	jle	.LBB13_48
.Ltmp1193:
# BB#31:                                # %land.lhs.true739
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- R15
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- [RBP+-620]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$414, %edi              # imm = 0x19E
	callq	_KPushCDep
	movl	$14, %edi
	callq	_KWork
	.loc	2 1077 61               # susan.c:1077:61
.Ltmp1194:
	addl	%r13d, %r13d
	movl	%r12d, %eax
	subl	%r13d, %eax
	imull	-620(%rbp), %eax        # 4-byte Folded Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %ecx
	subl	%ecx, %eax
	addl	%r14d, %eax
	movq	%r14, -48(%rbp)         # 8-byte Spill
	movslq	%eax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$258, %esi              # imm = 0x102
	movl	$259, %edx              # imm = 0x103
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1077 56 is_stmt 0     # susan.c:1077:56
	movsbl	(%r15,%rbx), %ebx
.Ltmp1195:
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	movl	$1, 104(%rsp)
	movl	$258, 96(%rsp)          # imm = 0x102
	movl	$2, 88(%rsp)
	movl	$256, 80(%rsp)          # imm = 0x100
	movl	$3, 72(%rsp)
	movl	$254, 64(%rsp)
	movl	$4, 56(%rsp)
	movl	$252, 48(%rsp)
	movl	$6, 40(%rsp)
	movl	$246, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$128, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$126, (%rsp)
	movl	$415, %edi              # imm = 0x19F
	movl	$9, %esi
	movl	$1, %edx
	movl	$13, %ecx
	movl	$250, %r8d
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -72(%rbp)         # 4-byte Folded Reload
.Ltmp1196:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	jl	.LBB13_49
.Ltmp1197:
# BB#32:                                # %if.then751
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movl	$415, %edi              # imm = 0x19F
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	movq	-912(%rbp), %r14        # 8-byte Reload
	movq	-56(%rbp), %rbx         # 8-byte Reload
.Ltmp1198:
	leaq	-5(%r14,%rbx), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 1078 15 is_stmt 1     # susan.c:1078:15
	movb	$1, -5(%r14,%rbx)
	callq	_KPopCDep
	jmp	.LBB13_49
.Ltmp1199:
.LBB13_48:                              # %for.inc1258.critedge115
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:in <- [RBP+-424]
	#DEBUG_VALUE: susan_edges:r <- R15
	#DEBUG_VALUE: susan_edges:bp <- [RBP+-256]
	#DEBUG_VALUE: susan_edges:max_no <- [RBP+-84]
	#DEBUG_VALUE: susan_edges:i <- 4
	#DEBUG_VALUE: susan_edges:j <- 4
	#DEBUG_VALUE: susan_edges:do_symmetry <- 0
	movq	%r14, -48(%rbp)         # 8-byte Spill
.Ltmp1200:
.LBB13_49:                              # %for.inc1258
                                        #   in Loop: Header=BB13_11 Depth=2
	#DEBUG_VALUE: susan_edges:r <- [RBP+-448]
	movl	$400, %edi              # imm = 0x190
	callq	_KPushCDep
	movl	$399, %edi              # imm = 0x18F
	xorl	%esi, %esi
	movl	$400, %edx              # imm = 0x190
	movl	$401, %ecx              # imm = 0x191
	movl	$388, %r8d              # imm = 0x184
	callq	_KPhi3To1
	movl	$1, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$404, %edi              # imm = 0x194
	movl	$250, %esi
	movl	$2, %edx
	movl	$126, %ecx
	movl	$2, %r8d
	movl	$399, %r9d              # imm = 0x18F
	callq	_KTimestamp3
	callq	_KPopCDep
	movabsq	$-159188540092120476, %r13 # imm = 0xFDCA72DDBF7F0264
.Ltmp1201:
	#DEBUG_VALUE: susan_edges:x_size <- EBX
	jmp	.LBB13_50
.Ltmp1202:
.LBB13_52:                              # %for.cond285.pre_exit.for.end1263
	#DEBUG_VALUE: susan_edges:i <- 4
	movl	$1, %esi
	movabsq	$-2042880294740013030, %rdi # imm = 0xE3A63B321160501A
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$8352659037076079861, %rdi # imm = 0x73EA9B23D2E044F5
	addq	$1512, %rsp             # imm = 0x5E8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp1203:
	.size	susan_edges, .Ltmp1203-susan_edges
.Lfunc_end13:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI14_0:
	.quad	4600877379321698714     # double 0.40000000000000002
	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI14_1:
	.long	1232348160              # float 1.0E+6
.LCPI14_2:
	.long	1056964608              # float 0.5
.LCPI14_3:
	.long	1073741824              # float 2
.LCPI14_5:
	.long	0                       # float 0
	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI14_4:
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.long	2147483648              # 0x80000000
	.text
	.globl	susan_edges_small
	.align	16, 0x90
	.type	susan_edges_small,@function
susan_edges_small:                      # @susan_edges_small
.Lfunc_begin14:
	.loc	2 1164 0                # susan.c:1164:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1204:
	.cfi_def_cfa_offset 16
.Ltmp1205:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1206:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
.Ltmp1207:
	.cfi_offset %rbx, -56
.Ltmp1208:
	.cfi_offset %r12, -48
.Ltmp1209:
	.cfi_offset %r13, -40
.Ltmp1210:
	.cfi_offset %r14, -32
.Ltmp1211:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: susan_edges_small:in <- RDI
	#DEBUG_VALUE: susan_edges_small:r <- RSI
	#DEBUG_VALUE: susan_edges_small:mid <- RDX
	#DEBUG_VALUE: susan_edges_small:bp <- RCX
	#DEBUG_VALUE: susan_edges_small:max_no <- R8D
	#DEBUG_VALUE: susan_edges_small:x_size <- R9D
	movl	%r9d, %ebx
.Ltmp1212:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	movl	%ebx, -220(%rbp)        # 4-byte Spill
	movl	%r8d, -76(%rbp)         # 4-byte Spill
.Ltmp1213:
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	movq	%rcx, -88(%rbp)         # 8-byte Spill
.Ltmp1214:
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	movq	%rdx, -256(%rbp)        # 8-byte Spill
.Ltmp1215:
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	movq	%rsi, %r15
.Ltmp1216:
	#DEBUG_VALUE: susan_edges_small:r <- R15
	movq	%r15, -208(%rbp)        # 8-byte Spill
	movq	%rdi, %r12
.Ltmp1217:
	#DEBUG_VALUE: susan_edges_small:in <- R12
	movq	%r12, -128(%rbp)        # 8-byte Spill
	movl	16(%rbp), %r13d
	#DEBUG_VALUE: susan_edges_small:y_size <- R13D
	movabsq	$-2341254195971592262, %rdi # imm = 0xDF8231B698386FBA
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$144, %edi
	movl	$4, %esi
	callq	_KPrepRTable
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KWork
	.loc	2 1169 17 prologue_end  # susan.c:1169:17
.Ltmp1218:
	movl	%r13d, %r14d
	imull	%ebx, %r14d
	movabsq	$-6180273162570948166, %rdi # imm = 0xAA3B424D9A1421BA
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$4, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$3, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$4, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	xorl	%esi, %esi
	.loc	2 1169 3 is_stmt 0      # susan.c:1169:3
	movq	%r15, %rdi
	movl	%r14d, %edx
	callq	wccmemset
.Ltmp1219:
	#DEBUG_VALUE: susan_edges_small:i <- 1
	.loc	2 1172 8 is_stmt 1      # susan.c:1172:8
	movslq	%ebx, %r14
	movq	%r14, -216(%rbp)        # 8-byte Spill
	movl	$1, %esi
	movabsq	$-3316386254616606894, %rdi # imm = 0xD1F9D445BB96C752
	callq	_KEnterRegion
	.loc	2 1172 14 is_stmt 0     # susan.c:1172:14
.Ltmp1220:
	leal	-1(%r13), %eax
.Ltmp1221:
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	.loc	2 1172 12               # susan.c:1172:12
	cltq
	.loc	2 1174 16 is_stmt 1     # susan.c:1174:16
.Ltmp1222:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	leal	-1(%r14), %eax
	.loc	2 1174 14 is_stmt 0     # susan.c:1174:14
	cltq
	.loc	2 1182 10 is_stmt 1     # susan.c:1182:10
.Ltmp1223:
	movq	%rax, -72(%rbp)         # 8-byte Spill
	leal	-2(%r14), %eax
	.loc	2 1182 7 is_stmt 0      # susan.c:1182:7
	cltq
	movq	%rax, -112(%rbp)        # 8-byte Spill
	leaq	(%r15,%r14), %rcx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	leaq	(%r12,%r14), %rcx
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	leaq	(%r12,%rax,2), %rcx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	leaq	(%r12,%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
.Ltmp1224:
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	movl	$1, %ebx
.Ltmp1225:
	movabsq	$6922490239882656083, %r13 # imm = 0x6011A0323D507953
	xorl	%eax, %eax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	jmp	.LBB14_1
.Ltmp1226:
	.align	16, 0x90
.LBB14_7:                               # %for.cond1.pre_exit.for.inc78
                                        #   in Loop: Header=BB14_1 Depth=1
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	#DEBUG_VALUE: susan_edges_small:i <- 1
	#DEBUG_VALUE: susan_edges_small:j <- 1
	movl	$1, %esi
	movabsq	$6796632573654778767, %rdi # imm = 0x5E527D50CD8AC38F
	callq	_KExitRegion
	movl	$34, %r12d
	movl	$34, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-152(%rbp), %rbx        # 8-byte Reload
	.loc	2 1172 3 is_stmt 1      # susan.c:1172:3
	incq	%rbx
	movl	$110, %r14d
	movl	$110, %edi
	movl	$35, %esi
	movl	$1, %edx
	movl	$34, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-158652646589194525, %rdi # imm = 0xFDCC5A422D601EE3
	callq	_KExitRegion
	movq	-144(%rbp), %rax        # 8-byte Reload
	addq	-216(%rbp), %rax        # 8-byte Folded Reload
	movq	%rax, -144(%rbp)        # 8-byte Spill
.Ltmp1227:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	movq	-208(%rbp), %r15        # 8-byte Reload
.Ltmp1228:
	#DEBUG_VALUE: susan_edges_small:r <- R15
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- R15
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	#DEBUG_VALUE: susan_edges_small:i <- 1
	movl	$35, %edi
	movl	%r14d, %esi
	movl	%r12d, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$34, %edi
	movl	$35, %esi
	movl	$1, %edx
	movl	$3, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$35, %edi
	movl	$34, %esi
	callq	_KPhiAddCond
	movl	$35, %edi
	movl	$35, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 1172 3 is_stmt 0      # susan.c:1172:3
	cmpq	-160(%rbp), %rbx        # 8-byte Folded Reload
	jge	.LBB14_8
.Ltmp1229:
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- R15
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	#DEBUG_VALUE: susan_edges_small:i <- 1
	movq	%rbx, -152(%rbp)        # 8-byte Spill
.Ltmp1230:
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	movl	$2, %esi
	movabsq	$-158652646589194525, %rdi # imm = 0xFDCC5A422D601EE3
	callq	_KEnterRegion
	movl	$34, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_edges_small:j <- 1
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$6796632573654778767, %rdi # imm = 0x5E527D50CD8AC38F
	callq	_KEnterRegion
	xorl	%r12d, %r12d
	movq	-144(%rbp), %r14        # 8-byte Reload
	xorl	%r15d, %r15d
	movl	$1, %ebx
	jmp	.LBB14_3
	.align	16, 0x90
.LBB14_6:                               # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	#DEBUG_VALUE: susan_edges_small:i <- 1
	#DEBUG_VALUE: susan_edges_small:j <- 1
	movl	$36, %r12d
	movl	$36, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-56(%rbp), %rbx         # 8-byte Reload
	.loc	2 1174 5 is_stmt 1      # susan.c:1174:5
.Ltmp1231:
	incq	%rbx
	movl	$111, %r15d
	movl	$111, %edi
	movl	$37, %esi
	movl	$1, %edx
	movl	$36, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$6922490239882656083, %r13 # imm = 0x6011A0323D507953
	movq	%r13, %rdi
	callq	_KExitRegion
	incq	%r14
.Ltmp1232:
.LBB14_3:                               # %for.cond1
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	#DEBUG_VALUE: susan_edges_small:i <- 1
	#DEBUG_VALUE: susan_edges_small:j <- 1
	movl	$34, %edi
	callq	_KPushCDep
	movl	$37, %edi
	movl	$34, %edx
	movl	%r15d, %esi
	movl	%r12d, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$2, (%rsp)
	movl	$36, %edi
	movl	$34, %esi
	movl	$2, %edx
	movl	$37, %ecx
	movl	$1, %r8d
	movl	$2, %r9d
	callq	_KTimestamp3
	movl	$37, %edi
	movl	$37, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$37, %edi
	movl	$36, %esi
	callq	_KPhiAddCond
	callq	_KPopCDep
	.loc	2 1174 5 is_stmt 0      # susan.c:1174:5
	cmpq	-72(%rbp), %rbx         # 8-byte Folded Reload
	jge	.LBB14_7
# BB#4:                                 # %for.body4
                                        #   in Loop: Header=BB14_3 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	#DEBUG_VALUE: susan_edges_small:i <- 1
	#DEBUG_VALUE: susan_edges_small:j <- 1
	movq	%rbx, -56(%rbp)         # 8-byte Spill
	movl	$2, %esi
	movq	%r13, %rdi
	callq	_KEnterRegion
	movl	$36, %edi
	callq	_KPushCDep
	movl	$93, %edi
	callq	_KWork
.Ltmp1233:
	#DEBUG_VALUE: susan_edges_small:n <- 100
	movq	-96(%rbp), %rbx         # 8-byte Reload
	leaq	1(%rbx,%r14), %rdi
	movl	$5, %esi
	movl	$6, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1177 10 is_stmt 1     # susan.c:1177:10
.Ltmp1234:
	movzbl	1(%rbx,%r14), %r12d
	movq	%r12, -48(%rbp)         # 8-byte Spill
	movq	-128(%rbp), %r15        # 8-byte Reload
.Ltmp1235:
	#DEBUG_VALUE: susan_edges_small:in <- R15
	leaq	(%r15,%r14), %rdi
	movl	$7, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1179 12               # susan.c:1179:12
	movzbl	(%r15,%r14), %eax
	movq	%r12, %rbx
	subq	%rax, %rbx
	movq	-88(%rbp), %r13         # 8-byte Reload
.Ltmp1236:
	#DEBUG_VALUE: susan_edges_small:bp <- R13
	leaq	(%r13,%rbx), %rdi
	movl	$8, %esi
	movl	$9, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1179 10 is_stmt 0     # susan.c:1179:10
	movzbl	(%r13,%rbx), %ebx
	leaq	1(%r15,%r14), %rdi
	movl	$10, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1180 12 is_stmt 1     # susan.c:1180:12
	movzbl	1(%r15,%r14), %eax
	subq	%rax, %r12
	leaq	(%r13,%r12), %rdi
	movl	$11, %esi
	movl	$12, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1180 10 is_stmt 0     # susan.c:1180:10
	movzbl	(%r13,%r12), %r12d
	.loc	2 1179 7 is_stmt 1      # susan.c:1179:7
	addl	%ebx, %r12d
	leaq	2(%r15,%r14), %rdi
	movl	$13, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1181 12               # susan.c:1181:12
	movzbl	2(%r15,%r14), %eax
.Ltmp1237:
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$14, %esi
	movl	$15, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1181 10 is_stmt 0     # susan.c:1181:10
	movzbl	(%r13,%rbx), %eax
	.loc	2 1180 7 is_stmt 1      # susan.c:1180:7
	addl	%r12d, %eax
	movl	%eax, -64(%rbp)         # 4-byte Spill
	movq	%r14, %r15
	movq	-120(%rbp), %r14        # 8-byte Reload
	leaq	2(%r14,%r15), %rdi
	movl	$16, %esi
	movl	$17, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1184 12               # susan.c:1184:12
	movzbl	2(%r14,%r15), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$18, %esi
	movl	$19, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1184 10 is_stmt 0     # susan.c:1184:10
	movzbl	(%r13,%rbx), %r12d
	.loc	2 1181 7 is_stmt 1      # susan.c:1181:7
	addl	-64(%rbp), %r12d        # 4-byte Folded Reload
	leaq	4(%r14,%r15), %rdi
	movl	$20, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1186 12               # susan.c:1186:12
	movzbl	4(%r14,%r15), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$21, %esi
	movl	$22, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1186 10 is_stmt 0     # susan.c:1186:10
	movzbl	(%r13,%rbx), %eax
	.loc	2 1184 7 is_stmt 1      # susan.c:1184:7
	addl	%r12d, %eax
	movl	%eax, -64(%rbp)         # 4-byte Spill
	movq	-104(%rbp), %r14        # 8-byte Reload
	leaq	4(%r14,%r15), %rdi
	movl	$23, %esi
	movl	$24, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1189 12               # susan.c:1189:12
	movzbl	4(%r14,%r15), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$25, %esi
	movl	$26, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1189 10 is_stmt 0     # susan.c:1189:10
	movzbl	(%r13,%rbx), %r12d
	.loc	2 1186 7 is_stmt 1      # susan.c:1186:7
	addl	-64(%rbp), %r12d        # 4-byte Folded Reload
	leaq	5(%r14,%r15), %rdi
	movl	$27, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1190 12               # susan.c:1190:12
	movzbl	5(%r14,%r15), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$28, %esi
	movl	$29, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1190 10 is_stmt 0     # susan.c:1190:10
	movzbl	(%r13,%rbx), %ebx
	.loc	2 1189 7 is_stmt 1      # susan.c:1189:7
	addl	%r12d, %ebx
	leaq	6(%r14,%r15), %rdi
	movl	$30, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1191 12               # susan.c:1191:12
	movzbl	6(%r14,%r15), %eax
	movq	%r15, %r14
	movq	-48(%rbp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	leaq	(%r13,%rcx), %rdi
	movq	%rcx, %r15
	movl	$31, %esi
	movl	$32, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1191 10 is_stmt 0     # susan.c:1191:10
	movzbl	(%r13,%r15), %eax
.Ltmp1238:
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	.loc	2 1191 7                # susan.c:1191:7
	leal	100(%rax,%rbx), %ebx
.Ltmp1239:
	#DEBUG_VALUE: susan_edges_small:n <- EBX
	callq	_KPopCDep
	movl	$2, 120(%rsp)
	movl	$31, 112(%rsp)
	movl	$3, 104(%rsp)
	movl	$28, 96(%rsp)
	movl	$4, 88(%rsp)
	movl	$25, 80(%rsp)
	movl	$5, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$6, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$8, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$9, 8(%rsp)
	movl	$8, (%rsp)
	movl	$139, %edi
	movl	$10, %esi
	movl	$1, %edx
	movl	$1, %ecx
	movl	$36, %r8d
	movl	$9, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	.loc	2 1193 11 is_stmt 1     # susan.c:1193:11
.Ltmp1240:
	cmpl	-76(%rbp), %ebx         # 4-byte Folded Reload
	jg	.LBB14_6
.Ltmp1241:
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB14_3 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	#DEBUG_VALUE: susan_edges_small:i <- 1
	#DEBUG_VALUE: susan_edges_small:j <- 1
	#DEBUG_VALUE: susan_edges_small:n <- EBX
	movl	$139, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	.loc	2 1194 25               # susan.c:1194:25
.Ltmp1242:
	movl	-76(%rbp), %r12d        # 4-byte Reload
	subl	%ebx, %r12d
	movl	$3, 120(%rsp)
	movl	$31, 112(%rsp)
	movl	$4, 104(%rsp)
	movl	$28, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$25, 80(%rsp)
	movl	$6, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$7, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$8, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$9, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$8, (%rsp)
	movl	$33, %edi
	movl	$10, %esi
	movl	$1, %edx
	movl	$2, %ecx
	movl	$36, %r8d
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movq	-136(%rbp), %rbx        # 8-byte Reload
.Ltmp1243:
	leaq	1(%rbx,%r14), %rsi
	movl	$33, %edi
	movl	$1, %edx
	callq	_KStore
	.loc	2 1194 9 is_stmt 0      # susan.c:1194:9
	movb	%r12b, 1(%rbx,%r14)
	callq	_KPopCDep
	jmp	.LBB14_6
.Ltmp1244:
.LBB14_8:                               # %for.cond.pre_exit.for.end80
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- R15
	#DEBUG_VALUE: susan_edges_small:mid <- [RBP+-256]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:y_size <- undef
	#DEBUG_VALUE: susan_edges_small:i <- 1
	movabsq	$4900460201756101591, %r14 # imm = 0x4401EE96F99C8BD7
	movl	$1, %esi
	movabsq	$-3316386254616606894, %rdi # imm = 0xD1F9D445BB96C752
	callq	_KExitRegion
.Ltmp1245:
	#DEBUG_VALUE: susan_edges_small:i <- 2
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	16(%rbp), %eax
.Ltmp1246:
	#DEBUG_VALUE: susan_edges_small:y_size <- EAX
	.loc	2 1200 14 is_stmt 1     # susan.c:1200:14
	addl	$-2, %eax
.Ltmp1247:
	.loc	2 1200 12 is_stmt 0     # susan.c:1200:12
	cltq
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	-112(%rbp), %rcx        # 8-byte Reload
	leaq	(%rax,%rcx,2), %rdx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	leaq	(%rcx,%rax), %rcx
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	leaq	(%rax,%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	addq	$2, -256(%rbp)          # 8-byte Folded Spill
	leaq	2(%r15), %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	movq	%r15, -208(%rbp)        # 8-byte Spill
.Ltmp1248:
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	movl	$2, %r15d
	movabsq	$-2279846196833752433, %r12 # imm = 0xE05C5BF68F32EA8F
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	xorl	%ebx, %ebx
.Ltmp1249:
	xorl	%r14d, %r14d
	jmp	.LBB14_9
	.align	16, 0x90
.LBB14_47:                              # %for.cond86.pre_exit.for.inc397
                                        #   in Loop: Header=BB14_9 Depth=1
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
.Ltmp1250:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	movl	$1, %esi
	movabsq	$3311058537316870105, %rdi # imm = 0x2DF33E326B4BE7D9
	callq	_KExitRegion
	movl	$72, %r14d
	movl	$72, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-200(%rbp), %r15        # 8-byte Reload
	.loc	2 1200 3                # susan.c:1200:3
	incq	%r15
	movl	$112, %ebx
.Ltmp1251:
	movl	$112, %edi
	movl	$73, %esi
	movl	$1, %edx
	movl	$72, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-1195517129788413653, %rdi # imm = 0xEF68AB812C11292B
	callq	_KExitRegion
	movq	-216(%rbp), %rax        # 8-byte Reload
	addq	%rax, -272(%rbp)        # 8-byte Folded Spill
	addq	%rax, -256(%rbp)        # 8-byte Folded Spill
	addq	%rax, -264(%rbp)        # 8-byte Folded Spill
.Ltmp1252:
.LBB14_9:                               # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_11 Depth 2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	movl	$73, %edi
	movl	%ebx, %esi
	movl	%r14d, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$72, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$73, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$73, %edi
	movl	$73, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$73, %edi
	movl	$72, %esi
	callq	_KPhiAddCond
	.loc	2 1200 3                # susan.c:1200:3
	cmpq	-280(%rbp), %r15        # 8-byte Folded Reload
	jge	.LBB14_48
.Ltmp1253:
# BB#10:                                # %for.body85
                                        #   in Loop: Header=BB14_9 Depth=1
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	movl	$2, %esi
	movabsq	$-1195517129788413653, %rdi # imm = 0xEF68AB812C11292B
	callq	_KEnterRegion
	movl	$72, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_edges_small:j <- 2
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$3311058537316870105, %rdi # imm = 0x2DF33E326B4BE7D9
	callq	_KEnterRegion
	.loc	2 1209 19 is_stmt 1     # susan.c:1209:19
.Ltmp1254:
	leaq	-1(%r15), %rax
	movq	%r15, -200(%rbp)        # 8-byte Spill
	.loc	2 1209 18 is_stmt 0     # susan.c:1209:18
	imulq	-216(%rbp), %rax        # 8-byte Folded Reload
	movq	%rax, -248(%rbp)        # 8-byte Spill
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movq	-264(%rbp), %r15        # 8-byte Reload
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	-272(%rbp), %rbx        # 8-byte Reload
.Ltmp1255:
	xorl	%r13d, %r13d
	movl	$2, %r14d
	jmp	.LBB14_11
.Ltmp1256:
	.align	16, 0x90
.LBB14_46:                              # %for.inc394
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	movl	$74, -56(%rbp)          # 4-byte Folded Spill
	movl	$74, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-48(%rbp), %r14         # 8-byte Reload
	.loc	2 1202 5 is_stmt 1      # susan.c:1202:5
	incq	%r14
	movl	$113, %r13d
	movl	$113, %edi
	movl	$75, %esi
	movl	$1, %edx
	movl	$74, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-2279846196833752433, %r12 # imm = 0xE05C5BF68F32EA8F
	movq	%r12, %rdi
	callq	_KExitRegion
	movq	-72(%rbp), %rbx         # 8-byte Reload
.Ltmp1257:
	incq	%rbx
	incq	-120(%rbp)              # 8-byte Folded Spill
	movq	-64(%rbp), %r15         # 8-byte Reload
	incq	%r15
.Ltmp1258:
.LBB14_11:                              # %for.cond86
                                        #   Parent Loop BB14_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	movl	$72, %edi
	callq	_KPushCDep
	movl	$75, %edi
	movl	$72, %edx
	movl	%r13d, %esi
	movl	-56(%rbp), %ecx         # 4-byte Reload
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$74, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$72, %ecx
	movl	$2, %r8d
	movl	$75, %r9d
	callq	_KTimestamp3
	movl	$75, %edi
	movl	$75, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$75, %edi
	movl	$74, %esi
	callq	_KPhiAddCond
	callq	_KPopCDep
	.loc	2 1202 5 is_stmt 0      # susan.c:1202:5
	cmpq	-112(%rbp), %r14        # 8-byte Folded Reload
	jge	.LBB14_47
.Ltmp1259:
# BB#12:                                # %for.body90
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	movq	%r14, -48(%rbp)         # 8-byte Spill
	movq	%rbx, -72(%rbp)         # 8-byte Spill
	movl	$2, %esi
	movq	%r12, %rdi
	callq	_KEnterRegion
	movl	$74, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	movq	-96(%rbp), %rbx         # 8-byte Reload
.Ltmp1260:
	leaq	(%r15,%rbx), %r14
	movl	$38, %esi
	movl	$39, %edx
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	.loc	2 1203 11 is_stmt 1     # susan.c:1203:11
.Ltmp1261:
	movb	(%r15,%rbx), %bl
	movq	%r15, -64(%rbp)         # 8-byte Spill
	movl	$128, %edi
	movl	$74, %esi
	movl	$1, %edx
	movl	$38, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	cmpb	$0, %bl
	jle	.LBB14_46
# BB#13:                                # %if.then98
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
.Ltmp1262:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	movl	$128, %edi
	callq	_KPushCDep
	movl	$16, %edi
	callq	_KWork
	movl	$40, %esi
	movl	$41, %edx
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	movq	-96(%rbp), %rbx         # 8-byte Reload
.Ltmp1263:
	movq	-64(%rbp), %rax         # 8-byte Reload
	.loc	2 1204 11               # susan.c:1204:11
.Ltmp1264:
	movsbl	(%rbx,%rax), %r15d
	.loc	2 1205 11               # susan.c:1205:11
	movl	-76(%rbp), %r12d        # 4-byte Reload
	subl	%r15d, %r12d
.Ltmp1265:
	#DEBUG_VALUE: susan_edges_small:n <- R12D
	movq	-72(%rbp), %r14         # 8-byte Reload
	leaq	2(%r14,%rbx), %rdi
	movl	$42, %esi
	movl	$43, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1206 12               # susan.c:1206:12
	movzbl	2(%r14,%rbx), %ebx
	movl	$2, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$3, (%rsp)
	movl	$129, %edi
	movl	$1, %esi
	movl	$2, %edx
	movl	$74, %ecx
	movl	$3, %r8d
	movl	$38, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
	movl	$129, %edi
	callq	_KPushCDep
	.loc	2 1208 13               # susan.c:1208:13
	cmpl	$251, %r12d
	jl	.LBB14_33
.Ltmp1266:
# BB#14:                                # %if.then114
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:n <- R12D
	movl	%r12d, -144(%rbp)       # 4-byte Spill
.Ltmp1267:
	#DEBUG_VALUE: susan_edges_small:n <- [RBP+-144]
	movl	%r15d, -104(%rbp)       # 4-byte Spill
.Ltmp1268:
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	movl	$101, %edi
	callq	_KWork
.Ltmp1269:
	#DEBUG_VALUE: susan_edges_small:y <- 0
	#DEBUG_VALUE: susan_edges_small:x <- 0
	movq	-216(%rbp), %r15        # 8-byte Reload
	leaq	1(%r14,%r15), %rdi
	movl	$44, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1212 15               # susan.c:1212:15
.Ltmp1270:
	movzbl	1(%r14,%r15), %eax
	movq	%rbx, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
                                        # kill: RBX<def> RCX<kill>
	movq	%rcx, %r13
	subq	%rax, %rbx
	movq	-88(%rbp), %r12         # 8-byte Reload
.Ltmp1271:
	#DEBUG_VALUE: susan_edges_small:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$45, %esi
	movl	$46, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1212 27 is_stmt 0     # susan.c:1212:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -136(%rbp)        # 4-byte Spill
	leaq	2(%r14,%r15), %rdi
	movl	$47, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1213 15 is_stmt 1     # susan.c:1213:15
	movzbl	2(%r14,%r15), %eax
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$48, %esi
	movl	$49, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	%r14, %r13
	.loc	2 1213 27 is_stmt 0     # susan.c:1213:27
	movzbl	(%r12,%rbx), %eax
	.loc	2 1213 24               # susan.c:1213:24
	addl	-136(%rbp), %eax        # 4-byte Folded Reload
	movl	%eax, %r14d
	leaq	3(%r13,%r15), %rdi
	movl	$50, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1214 15 is_stmt 1     # susan.c:1214:15
	movzbl	3(%r13,%r15), %eax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$51, %esi
	movl	$52, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1214 25 is_stmt 0     # susan.c:1214:25
	movzbl	(%r12,%rbx), %r15d
.Ltmp1272:
	#DEBUG_VALUE: susan_edges_small:x <- R15D
	.loc	2 1214 27               # susan.c:1214:27
	addl	%r15d, %r14d
	movl	%r14d, -152(%rbp)       # 4-byte Spill
	.loc	2 1214 22               # susan.c:1214:22
	subl	-136(%rbp), %r15d       # 4-byte Folded Reload
.Ltmp1273:
	movq	-240(%rbp), %r14        # 8-byte Reload
	leaq	3(%r13,%r14), %rdi
	movl	$53, %esi
	movl	$54, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1217 15 is_stmt 1     # susan.c:1217:15
	movzbl	3(%r14,%r13), %eax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$55, %esi
	movl	$56, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1217 25 is_stmt 0     # susan.c:1217:25
	movzbl	(%r12,%rbx), %eax
	.loc	2 1217 22               # susan.c:1217:22
	subl	%eax, %r15d
.Ltmp1274:
	#DEBUG_VALUE: susan_edges_small:x <- R15D
	leaq	5(%r13,%r14), %rdi
	movl	$57, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1219 15 is_stmt 1     # susan.c:1219:15
	movzbl	5(%r14,%r13), %eax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$58, %esi
	movl	$59, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1219 25 is_stmt 0     # susan.c:1219:25
	movzbl	(%r12,%rbx), %eax
	.loc	2 1219 22               # susan.c:1219:22
	addl	%r15d, %eax
.Ltmp1275:
	#DEBUG_VALUE: susan_edges_small:x <- EAX
	movl	%eax, -136(%rbp)        # 4-byte Spill
.Ltmp1276:
	#DEBUG_VALUE: susan_edges_small:x <- [RBP+-136]
	movq	-232(%rbp), %r14        # 8-byte Reload
	leaq	5(%r13,%r14), %rdi
	movl	$60, %esi
	movl	$61, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1222 15 is_stmt 1     # susan.c:1222:15
	movzbl	5(%r13,%r14), %eax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$62, %esi
	movl	$63, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1222 27 is_stmt 0     # susan.c:1222:27
	movzbl	(%r12,%rbx), %r15d
	.loc	2 1222 24               # susan.c:1222:24
	subl	%r15d, -136(%rbp)       # 4-byte Folded Spill
	.loc	2 1222 29               # susan.c:1222:29
	subl	-152(%rbp), %r15d       # 4-byte Folded Reload
.Ltmp1277:
	#DEBUG_VALUE: susan_edges_small:y <- R15D
	leaq	6(%r13,%r14), %rdi
	movl	$64, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1223 15 is_stmt 1     # susan.c:1223:15
	movzbl	6(%r13,%r14), %eax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$65, %esi
	movl	$66, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1223 27 is_stmt 0     # susan.c:1223:27
	movzbl	(%r12,%rbx), %ebx
	.loc	2 1223 24               # susan.c:1223:24
	addl	%r15d, %ebx
.Ltmp1278:
	#DEBUG_VALUE: susan_edges_small:y <- EBX
	leaq	7(%r13,%r14), %rdi
	movl	$67, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1224 15 is_stmt 1     # susan.c:1224:15
	movzbl	7(%r13,%r14), %eax
	movl	%ebx, %r14d
.Ltmp1279:
	#DEBUG_VALUE: susan_edges_small:y <- R14D
	movq	-56(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$68, %esi
	movl	$69, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1224 25 is_stmt 0     # susan.c:1224:25
	movzbl	(%r12,%rbx), %eax
.Ltmp1280:
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	movl	-136(%rbp), %ebx        # 4-byte Reload
.Ltmp1281:
	#DEBUG_VALUE: susan_edges_small:x <- EBX
	.loc	2 1224 22               # susan.c:1224:22
	addl	%eax, %ebx
.Ltmp1282:
	.loc	2 1224 27               # susan.c:1224:27
	addl	%eax, %r14d
.Ltmp1283:
	.loc	2 1226 30 is_stmt 1     # susan.c:1226:30
	movl	%ebx, %eax
	imull	%eax, %eax
	.loc	2 1226 38 is_stmt 0     # susan.c:1226:38
	movl	%r14d, %ecx
	imull	%ecx, %ecx
	.loc	2 1226 29               # susan.c:1226:29
	addl	%eax, %ecx
	.loc	2 1226 21               # susan.c:1226:21
	cvtsi2ssl	%ecx, %xmm0
	movss	%xmm0, -136(%rbp)       # 4-byte Spill
	movl	$4, 152(%rsp)
	movl	$68, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$65, 128(%rsp)
	movl	$6, 120(%rsp)
	movl	$62, 112(%rsp)
	movl	$6, 104(%rsp)
	movl	$58, 96(%rsp)
	movl	$7, 88(%rsp)
	movl	$55, 80(%rsp)
	movl	$8, 72(%rsp)
	movl	$51, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$48, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$45, 32(%rsp)
	movl	$11, 24(%rsp)
	movl	$40, 16(%rsp)
	movl	$12, 8(%rsp)
	movl	$38, (%rsp)
	movl	$71, %edi
	movl	$12, %esi
	movl	$1, %edx
	movl	$11, %ecx
	movl	$74, %r8d
	movl	$12, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	xorl	%esi, %esi
	movabsq	$908525872581136038, %rdi # imm = 0xC9BBB77B0734EA6
	callq	_KPrepCall
	movl	$71, %edi
	callq	_KEnqArg
	movl	$70, %edi
	callq	_KLinkReturn
	movss	-136(%rbp), %xmm1       # 4-byte Reload
	.loc	2 1226 15               # susan.c:1226:15
	sqrtss	%xmm1, %xmm0
	ucomiss	%xmm0, %xmm0
	jnp	.LBB14_16
# BB#15:                                # %call.sqrt
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:n <- [RBP+-144]
.Ltmp1284:
	#DEBUG_VALUE: susan_edges_small:x <- EBX
	#DEBUG_VALUE: susan_edges_small:y <- R14D
	movaps	%xmm1, %xmm0
	callq	sqrtf
.Ltmp1285:
.LBB14_16:                              # %if.then114.split
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:n <- [RBP+-144]
	#DEBUG_VALUE: susan_edges_small:x <- EBX
	#DEBUG_VALUE: susan_edges_small:y <- R14D
	#DEBUG_VALUE: susan_edges_small:z <- XMM0
	.loc	2 1227 15 is_stmt 1     # susan.c:1227:15
	cvtss2sd	%xmm0, %xmm0
.Ltmp1286:
	.loc	2 1227 24 is_stmt 0     # susan.c:1227:24
	movsd	%xmm0, -136(%rbp)       # 8-byte Spill
	movl	-144(%rbp), %eax        # 4-byte Reload
	xorps	%xmm0, %xmm0
	cvtsi2ssl	%eax, %xmm0
	cvtss2sd	%xmm0, %xmm0
	.loc	2 1227 20               # susan.c:1227:20
	mulsd	.LCPI14_0(%rip), %xmm0
	movsd	%xmm0, -144(%rbp)       # 8-byte Spill
	movl	$2, 32(%rsp)
	movl	$70, 24(%rsp)
	movl	$9, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$10, (%rsp)
	movl	$116, %edi
	movl	$1, %esi
	movl	$9, %edx
	movl	$74, %ecx
	movl	$10, %r8d
	movl	$38, %r9d
	callq	_KTimestamp5
	callq	_KPopCDep
	movl	$116, %edi
	callq	_KPushCDep
.Ltmp1287:
	.loc	2 1227 15               # susan.c:1227:15
	movsd	-136(%rbp), %xmm0       # 8-byte Reload
	ucomisd	-144(%rbp), %xmm0       # 8-byte Folded Reload
	jbe	.LBB14_32
.Ltmp1288:
# BB#17:                                # %if.then199
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- EBX
	#DEBUG_VALUE: susan_edges_small:y <- R14D
	movl	$1, %edi
	callq	_KWork
.Ltmp1289:
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$3, 136(%rsp)
	movl	$70, 128(%rsp)
	movl	$2, 120(%rsp)
	movl	$68, 112(%rsp)
	movl	$3, 104(%rsp)
	movl	$62, 96(%rsp)
	movl	$4, 88(%rsp)
	movl	$58, 80(%rsp)
	movl	$5, 72(%rsp)
	movl	$55, 64(%rsp)
	movl	$6, 56(%rsp)
	movl	$51, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$45, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$40, 16(%rsp)
	movl	$11, 8(%rsp)
	movl	$38, (%rsp)
	movl	$117, %edi
	movl	$11, %esi
	movl	$1, %edx
	movl	$10, %ecx
	movl	$74, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$117, %edi
	callq	_KPushCDep
	.loc	2 1229 17 is_stmt 1     # susan.c:1229:17
.Ltmp1290:
	testl	%ebx, %ebx
	je	.LBB14_18
.Ltmp1291:
# BB#19:                                # %if.else
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- EBX
	#DEBUG_VALUE: susan_edges_small:y <- R14D
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$20, %edi
	callq	_KWork
	.loc	2 1232 18               # susan.c:1232:18
.Ltmp1292:
	cvtsi2ssl	%r14d, %xmm1
	.loc	2 1232 31 is_stmt 0     # susan.c:1232:31
	cvtsi2ssl	%ebx, %xmm0
	.loc	2 1232 17               # susan.c:1232:17
	divss	%xmm0, %xmm1
.Ltmp1293:
	#DEBUG_VALUE: susan_edges_small:z <- XMM1
	movss	%xmm1, -56(%rbp)        # 4-byte Spill
.Ltmp1294:
	#DEBUG_VALUE: susan_edges_small:z <- [RBP+-56]
	movl	$23, 168(%rsp)
	movl	$70, 160(%rsp)
	movl	$22, 152(%rsp)
	movl	$68, 144(%rsp)
	movl	$22, 136(%rsp)
	movl	$65, 128(%rsp)
	movl	$23, 120(%rsp)
	movl	$62, 112(%rsp)
	movl	$24, 104(%rsp)
	movl	$58, 96(%rsp)
	movl	$25, 88(%rsp)
	movl	$55, 80(%rsp)
	movl	$26, 72(%rsp)
	movl	$51, 64(%rsp)
	movl	$25, 56(%rsp)
	movl	$48, 48(%rsp)
	movl	$27, 40(%rsp)
	movl	$45, 32(%rsp)
	movl	$30, 24(%rsp)
	movl	$40, 16(%rsp)
	movl	$31, 8(%rsp)
	movl	$38, (%rsp)
	movl	$115, %ebx
.Ltmp1295:
	movl	$115, %edi
	movl	$13, %esi
	movl	$1, %edx
	movl	$30, %ecx
	movl	$74, %r8d
	movl	$31, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	jmp	.LBB14_20
.Ltmp1296:
	.align	16, 0x90
.LBB14_33:                              # %if.else255
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 1
	movq	%rbx, -56(%rbp)         # 8-byte Spill
	movl	%r15d, -104(%rbp)       # 4-byte Spill
.Ltmp1297:
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	callq	_KPopCDep
	movq	-232(%rbp), %rax        # 8-byte Reload
	leaq	7(%r14,%rax), %rcx
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	leaq	6(%r14,%rax), %rcx
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	leaq	5(%r14,%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	-240(%rbp), %rax        # 8-byte Reload
	leaq	5(%r14,%rax), %rcx
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	leaq	3(%r14,%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	-216(%rbp), %rax        # 8-byte Reload
	leaq	3(%r14,%rax), %rcx
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	leaq	2(%r14,%rax), %rcx
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	leaq	1(%r14,%rax), %r13
	xorl	%ebx, %ebx
	jmp	.LBB14_34
.LBB14_32:                              # %if.else253
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	.loc	2 1209 13 is_stmt 1     # susan.c:1209:13
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	leaq	(%rcx,%rax), %rax
	movq	-112(%rbp), %rdx        # 8-byte Reload
	.loc	2 1215 11               # susan.c:1215:11
	leaq	1(%rdx,%rax), %rcx
	.loc	2 1220 11               # susan.c:1220:11
	leaq	2(%rdx,%rcx), %rdx
	movq	-128(%rbp), %rsi        # 8-byte Reload
.Ltmp1298:
	#DEBUG_VALUE: susan_edges_small:in <- RSI
	.loc	2 1209 13               # susan.c:1209:13
	leaq	-1(%rsi,%rax), %r13
.Ltmp1299:
	#DEBUG_VALUE: susan_edges_small:p <- R13
	.loc	2 1212 19               # susan.c:1212:19
	leaq	(%rsi,%rax), %rdi
.Ltmp1300:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-192]
	.loc	2 1213 19               # susan.c:1213:19
	movq	%rdi, -192(%rbp)        # 8-byte Spill
	leaq	1(%rsi,%rax), %rax
.Ltmp1301:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-184]
	.loc	2 1215 11               # susan.c:1215:11
	movq	%rax, -184(%rbp)        # 8-byte Spill
	leaq	(%rsi,%rcx), %rax
.Ltmp1302:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-176]
	.loc	2 1218 11               # susan.c:1218:11
	movq	%rax, -176(%rbp)        # 8-byte Spill
	leaq	2(%rsi,%rcx), %rax
.Ltmp1303:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-168]
	.loc	2 1220 11               # susan.c:1220:11
	movq	%rax, -168(%rbp)        # 8-byte Spill
	leaq	(%rsi,%rdx), %rax
.Ltmp1304:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-160]
	.loc	2 1222 19               # susan.c:1222:19
	movq	%rax, -160(%rbp)        # 8-byte Spill
	leaq	1(%rsi,%rdx), %rax
.Ltmp1305:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-152]
	.loc	2 1223 19               # susan.c:1223:19
	movq	%rax, -152(%rbp)        # 8-byte Spill
	leaq	2(%rsi,%rdx), %rax
.Ltmp1306:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-144]
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 1
	movq	%rax, -144(%rbp)        # 8-byte Spill
.Ltmp1307:
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	callq	_KPopCDep
	movl	$116, %ebx
.Ltmp1308:
.LBB14_34:                              # %if.end256
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	movl	$128, %edi
	callq	_KPushCDep
	movl	$127, %edi
	xorl	%esi, %esi
	movl	$128, %edx
	movl	$129, %ecx
	movl	%ebx, %r8d
	callq	_KPhi3To1
	movl	$1, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$132, %edi
	movl	$74, %esi
	movl	$2, %edx
	movl	$38, %ecx
	movl	$2, %r8d
	movl	$127, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movl	$132, %edi
	callq	_KPushCDep
	movl	$94, %edi
	callq	_KWork
.Ltmp1309:
	#DEBUG_VALUE: susan_edges_small:w <- 0
	#DEBUG_VALUE: susan_edges_small:y <- 0
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:p <- R13
	movl	$80, %esi
	movl	$1, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 1259 15               # susan.c:1259:15
.Ltmp1310:
	movzbl	(%r13), %eax
	movq	-56(%rbp), %r14         # 8-byte Reload
	movq	%r14, %rbx
	subq	%rax, %rbx
	movq	-88(%rbp), %r15         # 8-byte Reload
.Ltmp1311:
	#DEBUG_VALUE: susan_edges_small:bp <- R15
	leaq	(%r15,%rbx), %rdi
	movl	$81, %esi
	movl	$82, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1259 27 is_stmt 0     # susan.c:1259:27
	movzbl	(%r15,%rbx), %r12d
	movq	%r12, -136(%rbp)        # 8-byte Spill
.Ltmp1312:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-192]
	movl	$83, %esi
	movl	$1, %edx
	movq	-192(%rbp), %rbx        # 8-byte Reload
.Ltmp1313:
	#DEBUG_VALUE: susan_edges_small:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1260 15 is_stmt 1     # susan.c:1260:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1314:
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$84, %esi
	movl	$85, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1260 27 is_stmt 0     # susan.c:1260:27
	movzbl	(%r15,%rbx), %r13d
	.loc	2 1260 24               # susan.c:1260:24
	addl	%r12d, %r13d
.Ltmp1315:
	#DEBUG_VALUE: susan_edges_small:y <- R13D
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-184]
	movl	$86, %esi
	movl	$1, %edx
	movq	-184(%rbp), %rbx        # 8-byte Reload
.Ltmp1316:
	#DEBUG_VALUE: susan_edges_small:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1261 15 is_stmt 1     # susan.c:1261:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1317:
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$87, %esi
	movl	$88, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1261 25 is_stmt 0     # susan.c:1261:25
	movzbl	(%r15,%rbx), %eax
	.loc	2 1261 27               # susan.c:1261:27
	movq	%rax, -184(%rbp)        # 8-byte Spill
	addl	%eax, %r13d
.Ltmp1318:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-176]
	movl	$89, %esi
	movl	$90, %edx
	movl	$1, %ecx
	movq	-176(%rbp), %rbx        # 8-byte Reload
.Ltmp1319:
	#DEBUG_VALUE: susan_edges_small:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1264 15 is_stmt 1     # susan.c:1264:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1320:
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$91, %esi
	movl	$92, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1264 25 is_stmt 0     # susan.c:1264:25
	movzbl	(%r15,%rbx), %eax
	movl	%eax, -176(%rbp)        # 4-byte Spill
.Ltmp1321:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-168]
	movl	$93, %esi
	movl	$1, %edx
	movq	-168(%rbp), %rbx        # 8-byte Reload
.Ltmp1322:
	#DEBUG_VALUE: susan_edges_small:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1266 15 is_stmt 1     # susan.c:1266:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1323:
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$94, %esi
	movl	$95, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1266 25 is_stmt 0     # susan.c:1266:25
	movzbl	(%r15,%rbx), %eax
	movl	%eax, -168(%rbp)        # 4-byte Spill
.Ltmp1324:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-160]
	movl	$96, %esi
	movl	$97, %edx
	movl	$1, %ecx
	movq	-160(%rbp), %rbx        # 8-byte Reload
.Ltmp1325:
	#DEBUG_VALUE: susan_edges_small:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1269 15 is_stmt 1     # susan.c:1269:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1326:
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$98, %esi
	movl	$99, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1269 27 is_stmt 0     # susan.c:1269:27
	movzbl	(%r15,%rbx), %eax
	.loc	2 1269 29               # susan.c:1269:29
	movl	%eax, -160(%rbp)        # 4-byte Spill
	addl	%eax, %r13d
.Ltmp1327:
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-152]
	movl	$100, %esi
	movl	$1, %edx
	movq	-152(%rbp), %rbx        # 8-byte Reload
.Ltmp1328:
	#DEBUG_VALUE: susan_edges_small:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1270 15 is_stmt 1     # susan.c:1270:15
	movzbl	(%rbx), %eax
	movq	%r14, %rbx
.Ltmp1329:
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$101, %esi
	movl	$102, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1270 27 is_stmt 0     # susan.c:1270:27
	movzbl	(%r15,%rbx), %r12d
	.loc	2 1270 24               # susan.c:1270:24
	addl	%r13d, %r12d
.Ltmp1330:
	#DEBUG_VALUE: susan_edges_small:y <- R12D
	#DEBUG_VALUE: susan_edges_small:p <- [RBP+-144]
	movl	$103, %esi
	movl	$1, %edx
	movq	-144(%rbp), %rbx        # 8-byte Reload
.Ltmp1331:
	#DEBUG_VALUE: susan_edges_small:p <- RBX
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1271 15 is_stmt 1     # susan.c:1271:15
	movzbl	(%rbx), %eax
	subq	%rax, %r14
	leaq	(%r15,%r14), %rdi
	movl	$104, %esi
	movl	$105, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1271 25 is_stmt 0     # susan.c:1271:25
	movzbl	(%r15,%r14), %r14d
.Ltmp1332:
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	movl	$2, 104(%rsp)
	movl	$104, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$101, 80(%rsp)
	movl	$4, 72(%rsp)
	movl	$98, 64(%rsp)
	movl	$5, 56(%rsp)
	movl	$87, 48(%rsp)
	movl	$6, 40(%rsp)
	movl	$84, 32(%rsp)
	movl	$7, 24(%rsp)
	movl	$81, 16(%rsp)
	movl	$8, 8(%rsp)
	movl	$127, (%rsp)
	movl	$133, %edi
	movl	$9, %esi
	movl	$74, %edx
	movl	$9, %ecx
	movl	$38, %r8d
	movl	$9, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$133, %edi
	callq	_KPushCDep
	.loc	2 1273 15 is_stmt 1     # susan.c:1273:15
	addl	%r14d, %r12d
.Ltmp1333:
	je	.LBB14_35
.Ltmp1334:
# BB#36:                                # %if.else345
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	movq	-136(%rbp), %r13        # 8-byte Reload
	.loc	2 1261 22               # susan.c:1261:22
	movq	-184(%rbp), %rax        # 8-byte Reload
	leal	(%rax,%r13), %ebx
.Ltmp1335:
	#DEBUG_VALUE: susan_edges_small:x <- EBX
	.loc	2 1264 22               # susan.c:1264:22
	addl	-176(%rbp), %ebx        # 4-byte Folded Reload
.Ltmp1336:
	.loc	2 1266 22               # susan.c:1266:22
	addl	-168(%rbp), %ebx        # 4-byte Folded Reload
	.loc	2 1269 24               # susan.c:1269:24
	addl	-160(%rbp), %ebx        # 4-byte Folded Reload
	.loc	2 1271 22               # susan.c:1271:22
	addl	%r14d, %ebx
	movl	$20, %edi
	callq	_KWork
	.loc	2 1276 18               # susan.c:1276:18
.Ltmp1337:
	cvtsi2ssl	%ebx, %xmm1
	.loc	2 1276 31 is_stmt 0     # susan.c:1276:31
	cvtsi2ssl	%r12d, %xmm0
	.loc	2 1276 17               # susan.c:1276:17
	divss	%xmm0, %xmm1
.Ltmp1338:
	#DEBUG_VALUE: susan_edges_small:z <- XMM1
	movss	%xmm1, -56(%rbp)        # 4-byte Spill
.Ltmp1339:
	#DEBUG_VALUE: susan_edges_small:z <- [RBP+-56]
	movl	$22, 136(%rsp)
	movl	$104, 128(%rsp)
	movl	$23, 120(%rsp)
	movl	$101, 112(%rsp)
	movl	$24, 104(%rsp)
	movl	$98, 96(%rsp)
	movl	$23, 88(%rsp)
	movl	$94, 80(%rsp)
	movl	$24, 72(%rsp)
	movl	$91, 64(%rsp)
	movl	$25, 56(%rsp)
	movl	$87, 48(%rsp)
	movl	$26, 40(%rsp)
	movl	$84, 32(%rsp)
	movl	$27, 24(%rsp)
	movl	$81, 16(%rsp)
	movl	$28, 8(%rsp)
	movl	$127, (%rsp)
	movl	$131, %ebx
	movl	$131, %edi
	movl	$11, %esi
	movl	$74, %edx
	movl	$29, %ecx
	movl	$38, %r8d
	movl	$29, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-220(%rbp), %r15d       # 4-byte Reload
.Ltmp1340:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	jmp	.LBB14_37
.Ltmp1341:
.LBB14_35:                              # %if.then344
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:z <- 1.000000e+06
	#DEBUG_VALUE: susan_edges_small:w <- 0
	callq	_KPopCDep
	xorl	%ebx, %ebx
	movss	.LCPI14_1(%rip), %xmm0
	movss	%xmm0, -56(%rbp)        # 4-byte Spill
	movl	-220(%rbp), %r15d       # 4-byte Reload
.Ltmp1342:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	movq	-136(%rbp), %r13        # 8-byte Reload
.Ltmp1343:
.LBB14_37:                              # %if.end349
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	movl	$132, %edi
	callq	_KPushCDep
	movl	$130, %edi
	movl	$132, %edx
	movl	$133, %ecx
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$2, 16(%rsp)
	movl	$130, 8(%rsp)
	movl	$3, (%rsp)
	movl	$135, %edi
	movl	$74, %esi
	movl	$4, %edx
	movl	$38, %ecx
	movl	$4, %r8d
	movl	$127, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
	movl	$135, %edi
	callq	_KPushCDep
	movss	.LCPI14_2(%rip), %xmm0
	.loc	2 1277 15 is_stmt 1     # susan.c:1277:15
	ucomiss	-56(%rbp), %xmm0        # 4-byte Folded Reload
	jbe	.LBB14_39
.Ltmp1344:
# BB#38:                                # %if.then353
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	#DEBUG_VALUE: susan_edges_small:a <- 0
	#DEBUG_VALUE: susan_edges_small:b <- 1
	callq	_KPopCDep
	movl	$1, %r12d
	xorl	%r14d, %r14d
	xorl	%ebx, %ebx
.Ltmp1345:
	xorl	%r13d, %r13d
	jmp	.LBB14_42
	.align	16, 0x90
.LBB14_39:                              # %if.else354
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
.Ltmp1346:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	movl	$2, %edi
	callq	_KWork
	movl	$4, 16(%rsp)
	movl	$130, 8(%rsp)
	movl	$5, (%rsp)
	movl	$136, %edi
	movl	$74, %esi
	movl	$6, %edx
	movl	$38, %ecx
	movl	$6, %r8d
	movl	$127, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
	movl	$136, %edi
	callq	_KPushCDep
	.loc	2 1278 22               # susan.c:1278:22
.Ltmp1347:
	movss	-56(%rbp), %xmm0        # 4-byte Reload
	ucomiss	.LCPI14_3(%rip), %xmm0
	jbe	.LBB14_41
.Ltmp1348:
# BB#40:                                # %if.then358
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	#DEBUG_VALUE: susan_edges_small:a <- 1
	#DEBUG_VALUE: susan_edges_small:b <- 0
	callq	_KPopCDep
	movl	$1, %r13d
	movl	$136, %ebx
.Ltmp1349:
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	jmp	.LBB14_42
.LBB14_41:                              # %if.else359
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
.Ltmp1350:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	.loc	2 1261 32               # susan.c:1261:32
	movq	-184(%rbp), %rax        # 8-byte Reload
	subl	%eax, %r13d
.Ltmp1351:
	#DEBUG_VALUE: susan_edges_small:w <- R13D
	.loc	2 1269 34               # susan.c:1269:34
	subl	-160(%rbp), %r13d       # 4-byte Folded Reload
.Ltmp1352:
	.loc	2 1271 32               # susan.c:1271:32
	addl	%r14d, %r13d
	movl	$1, %r12d
	movl	$1, %edi
	callq	_KWork
	movl	$5, 88(%rsp)
	movl	$130, 80(%rsp)
	movl	$2, 72(%rsp)
	movl	$104, 64(%rsp)
	movl	$3, 56(%rsp)
	movl	$98, 48(%rsp)
	movl	$4, 40(%rsp)
	movl	$87, 32(%rsp)
	movl	$5, 24(%rsp)
	movl	$81, 16(%rsp)
	movl	$6, 8(%rsp)
	movl	$127, (%rsp)
	movl	$137, %r14d
	movl	$137, %edi
	movl	$8, %esi
	movl	$74, %edx
	movl	$7, %ecx
	movl	$38, %r8d
	movl	$7, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$137, %edi
	callq	_KPushCDep
	callq	_KPopCDep
	.loc	2 1279 44               # susan.c:1279:44
.Ltmp1353:
	testl	%r13d, %r13d
	movl	$1, %r13d
	movl	$-1, %eax
	.loc	2 1279 62 is_stmt 0     # susan.c:1279:62
.Ltmp1354:
	cmovgl	%eax, %r13d
	movl	$136, %ebx
.Ltmp1355:
.LBB14_42:                              # %if.end366
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	movl	$132, %edi
	callq	_KPushCDep
	movl	$134, %edi
	xorl	%esi, %esi
	movl	$132, %edx
	movl	$135, %ecx
	movl	%ebx, %r8d
	movl	%r14d, %r9d
	callq	_KPhi4To1
	movl	$138, %edi
	xorl	%esi, %esi
	movl	$132, %edx
	movl	$135, %ecx
	movl	%ebx, %r8d
	callq	_KPhi3To1
	movl	$10, %edi
	callq	_KWork
	.loc	2 1283 21 is_stmt 1     # susan.c:1283:21
.Ltmp1356:
	movq	-200(%rbp), %rax        # 8-byte Reload
	leal	(%rax,%r13), %eax
	imull	%r15d, %eax
	addl	%r12d, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %r14
	movq	-208(%rbp), %rbx        # 8-byte Reload
.Ltmp1357:
	#DEBUG_VALUE: susan_edges_small:r <- RBX
	leaq	(%rbx,%r14), %rdi
	movl	$106, %esi
	movl	$107, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1358:
	.loc	2 1283 16 is_stmt 0     # susan.c:1283:16
	movsbl	(%rbx,%r14), %ebx
.Ltmp1359:
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	callq	_KPopCDep
	movl	$1, 32(%rsp)
	movl	$106, 24(%rsp)
	movl	$2, 16(%rsp)
	movl	$127, 8(%rsp)
	movl	$1, (%rsp)
	movl	$142, %edi
	movl	$74, %esi
	movl	$3, %edx
	movl	$38, %ecx
	movl	$3, %r8d
	movl	$40, %r9d
	callq	_KTimestamp5
	movl	-104(%rbp), %eax        # 4-byte Reload
	movsbl	%al, %r14d
	cmpl	%ebx, %r14d
	jle	.LBB14_46
# BB#43:                                # %land.lhs.true376
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
.Ltmp1360:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	movl	$142, %edi
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1283 51               # susan.c:1283:51
.Ltmp1361:
	movq	-200(%rbp), %rax        # 8-byte Reload
                                        # kill: EAX<def> EAX<kill> RAX<kill>
	subl	%r13d, %eax
	imull	%r15d, %eax
	subl	%r12d, %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %r15
	movq	-208(%rbp), %rbx        # 8-byte Reload
.Ltmp1362:
	#DEBUG_VALUE: susan_edges_small:r <- RBX
	leaq	(%rbx,%r15), %rdi
	movl	$108, %esi
	movl	$109, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1283 46               # susan.c:1283:46
	movsbl	(%rbx,%r15), %ebx
.Ltmp1363:
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	movl	$1, 48(%rsp)
	movl	$108, 40(%rsp)
	movl	$2, 32(%rsp)
	movl	$106, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$127, 8(%rsp)
	movl	$2, (%rsp)
	movl	$143, %edi
	movl	$74, %esi
	movl	$4, %edx
	movl	$38, %ecx
	movl	$4, %r8d
	movl	$40, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	cmpl	%ebx, %r14d
	jl	.LBB14_46
# BB#44:                                # %if.then386
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
.Ltmp1364:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:x <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 0
	movl	$143, %edi
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	movq	-96(%rbp), %r14         # 8-byte Reload
	movq	-120(%rbp), %rbx        # 8-byte Reload
.Ltmp1365:
	leaq	(%rbx,%r14), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 1284 13 is_stmt 1     # susan.c:1284:13
.Ltmp1366:
	movb	$2, (%rbx,%r14)
	jmp	.LBB14_45
.Ltmp1367:
.LBB14_18:                              # %if.then202
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- [RBP+-220]
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:z <- 1.000000e+06
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	callq	_KPopCDep
	xorl	%ebx, %ebx
	movss	.LCPI14_1(%rip), %xmm0
	movss	%xmm0, -56(%rbp)        # 4-byte Spill
.LBB14_20:                              # %if.end205
                                        #   in Loop: Header=BB14_11 Depth=2
	movl	-220(%rbp), %r15d       # 4-byte Reload
.Ltmp1368:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$116, %edi
	callq	_KPushCDep
	movl	$114, %edi
	movl	$116, %edx
	movl	$117, %ecx
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$114, %edi
	movl	$114, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$2, 48(%rsp)
	movl	$114, 40(%rsp)
	movl	$4, 32(%rsp)
	movl	$70, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$12, (%rsp)
	movl	$120, %edi
	movl	$1, %esi
	movl	$11, %edx
	movl	$74, %ecx
	movl	$12, %r8d
	movl	$38, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	movl	$120, %edi
	callq	_KPushCDep
	xorps	%xmm0, %xmm0
	movss	-56(%rbp), %xmm1        # 4-byte Reload
	.loc	2 1233 17               # susan.c:1233:17
.Ltmp1369:
	ucomiss	%xmm1, %xmm0
	jbe	.LBB14_22
.Ltmp1370:
# BB#21:                                # %if.then208
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$2, %edi
	callq	_KWork
	.loc	2 1233 28 is_stmt 0     # susan.c:1233:28
.Ltmp1371:
	movss	-56(%rbp), %xmm0        # 4-byte Reload
	xorps	.LCPI14_4(%rip), %xmm0
.Ltmp1372:
	#DEBUG_VALUE: susan_edges_small:w <- -1
	#DEBUG_VALUE: susan_edges_small:z <- undef
	movss	%xmm0, -56(%rbp)        # 4-byte Spill
.Ltmp1373:
	#DEBUG_VALUE: susan_edges_small:z <- [RBP+-56]
	movl	$4, 48(%rsp)
	movl	$114, 40(%rsp)
	movl	$6, 32(%rsp)
	movl	$70, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$14, (%rsp)
	movl	$119, %ebx
.Ltmp1374:
	movl	$119, %edi
	movl	$1, %esi
	movl	$13, %edx
	movl	$74, %ecx
	movl	$14, %r8d
	movl	$38, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	movl	$-1, %r13d
	jmp	.LBB14_23
.Ltmp1375:
.LBB14_22:                              # %if.else210
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	#DEBUG_VALUE: susan_edges_small:w <- 1
	callq	_KPopCDep
	movl	$1, %r13d
	movl	$114, %ebx
.Ltmp1376:
.LBB14_23:                              # %if.end211
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$116, %edi
	callq	_KPushCDep
	movl	$121, %edi
	xorl	%esi, %esi
	movl	$116, %edx
	movl	$120, %ecx
	callq	_KPhi2To1
	movl	$118, %edi
	movl	$116, %edx
	movl	$120, %ecx
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$2, 48(%rsp)
	movl	$118, 40(%rsp)
	movl	$4, 32(%rsp)
	movl	$70, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$12, (%rsp)
	movl	$123, %edi
	movl	$1, %esi
	movl	$11, %edx
	movl	$74, %ecx
	movl	$12, %r8d
	movl	$38, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	movl	$123, %edi
	callq	_KPushCDep
	movss	.LCPI14_2(%rip), %xmm0
	movss	-56(%rbp), %xmm1        # 4-byte Reload
	.loc	2 1235 17 is_stmt 1     # susan.c:1235:17
	ucomiss	%xmm1, %xmm0
	jbe	.LBB14_25
.Ltmp1377:
# BB#24:                                # %if.then215
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	#DEBUG_VALUE: susan_edges_small:a <- 0
	#DEBUG_VALUE: susan_edges_small:b <- 1
	callq	_KPopCDep
	movl	$1, %r13d
	xorl	%r14d, %r14d
	xorl	%ebx, %ebx
.Ltmp1378:
	xorl	%eax, %eax
	.loc	2 1235 54 is_stmt 0     # susan.c:1235:54
.Ltmp1379:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB14_28
.Ltmp1380:
.LBB14_25:                              # %if.else216
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$2, %edi
	callq	_KWork
	movl	$4, 48(%rsp)
	movl	$118, 40(%rsp)
	movl	$6, 32(%rsp)
	movl	$70, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$14, (%rsp)
	movl	$124, %edi
	movl	$1, %esi
	movl	$13, %edx
	movl	$74, %ecx
	movl	$14, %r8d
	movl	$38, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	movl	$124, %edi
	callq	_KPushCDep
	.loc	2 1236 24 is_stmt 1     # susan.c:1236:24
.Ltmp1381:
	movss	-56(%rbp), %xmm0        # 4-byte Reload
	ucomiss	.LCPI14_3(%rip), %xmm0
	jbe	.LBB14_27
.Ltmp1382:
# BB#26:                                # %if.then220
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	#DEBUG_VALUE: susan_edges_small:a <- 1
	#DEBUG_VALUE: susan_edges_small:b <- 0
	callq	_KPopCDep
	movl	$1, %eax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	$124, %ebx
.Ltmp1383:
	xorl	%r14d, %r14d
	xorl	%r13d, %r13d
	jmp	.LBB14_28
.LBB14_27:                              # %if.else221
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
.Ltmp1384:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$1, %edi
	callq	_KWork
	movl	$1, 64(%rsp)
	movl	$121, 56(%rsp)
	movl	$5, 48(%rsp)
	movl	$118, 40(%rsp)
	movl	$7, 32(%rsp)
	movl	$70, 24(%rsp)
	movl	$14, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$15, (%rsp)
	movl	$125, %r14d
	movl	$125, %edi
	movl	$1, %esi
	movl	$14, %edx
	movl	$74, %ecx
	movl	$15, %r8d
	movl	$38, %r9d
	callq	_KTimestamp7
	callq	_KPopCDep
	movl	$125, %edi
	callq	_KPushCDep
	callq	_KPopCDep
	.loc	2 1237 47               # susan.c:1237:47
.Ltmp1385:
	testl	%r13d, %r13d
	movl	$1, %r13d
	movl	$-1, %eax
	.loc	2 1237 64 is_stmt 0     # susan.c:1237:64
.Ltmp1386:
	cmovgl	%r13d, %eax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movl	$124, %ebx
.Ltmp1387:
.LBB14_28:                              # %if.end228
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	%r13d, -136(%rbp)       # 4-byte Spill
	movl	$116, %edi
	callq	_KPushCDep
	movl	$126, %edi
	xorl	%esi, %esi
	movl	$116, %edx
	movl	$123, %ecx
	movl	%ebx, %r8d
	callq	_KPhi3To1
	movl	$122, %edi
	xorl	%esi, %esi
	movl	$116, %edx
	movl	$123, %ecx
	movl	%ebx, %r8d
	movl	%r14d, %r9d
	callq	_KPhi4To1
	movl	$10, %edi
	callq	_KWork
	movq	-200(%rbp), %r12        # 8-byte Reload
	.loc	2 1241 23 is_stmt 1     # susan.c:1241:23
.Ltmp1388:
	movq	-56(%rbp), %rax         # 8-byte Reload
	leal	(%r12,%rax), %eax
	imull	%r15d, %eax
	addl	%r13d, %eax
	movq	-48(%rbp), %r13         # 8-byte Reload
	addl	%r13d, %eax
	movslq	%eax, %rbx
.Ltmp1389:
	movq	-208(%rbp), %r15        # 8-byte Reload
.Ltmp1390:
	#DEBUG_VALUE: susan_edges_small:r <- R15
	leaq	(%r15,%rbx), %rdi
	movl	$76, %esi
	movl	$77, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1391:
	.loc	2 1241 18 is_stmt 0     # susan.c:1241:18
	movsbl	(%r15,%rbx), %ebx
	callq	_KPopCDep
	movl	$1, 48(%rsp)
	movl	$76, 40(%rsp)
	movl	$3, 32(%rsp)
	movl	$70, 24(%rsp)
	movl	$10, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$11, (%rsp)
	movl	$140, %edi
	movl	$1, %esi
	movl	$10, %edx
	movl	$74, %ecx
	movl	$11, %r8d
	movl	$38, %r9d
	callq	_KTimestamp6
	movl	-104(%rbp), %eax        # 4-byte Reload
	movsbl	%al, %r14d
	cmpl	%ebx, %r14d
	jle	.LBB14_31
.Ltmp1392:
# BB#29:                                # %land.lhs.true
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- R15
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$140, %edi
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1241 53               # susan.c:1241:53
.Ltmp1393:
	movl	%r12d, %eax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	subl	%ecx, %eax
	imull	-220(%rbp), %eax        # 4-byte Folded Reload
	subl	-136(%rbp), %eax        # 4-byte Folded Reload
	addl	%r13d, %eax
	movslq	%eax, %rbx
.Ltmp1394:
	leaq	(%r15,%rbx), %rdi
	movl	$78, %esi
	movl	$79, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1241 48               # susan.c:1241:48
	movsbl	(%r15,%rbx), %ebx
.Ltmp1395:
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	movl	$1, 64(%rsp)
	movl	$78, 56(%rsp)
	movl	$2, 48(%rsp)
	movl	$76, 40(%rsp)
	movl	$4, 32(%rsp)
	movl	$70, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$12, (%rsp)
	movl	$141, %edi
	movl	$1, %esi
	movl	$11, %edx
	movl	$74, %ecx
	movl	$12, %r8d
	movl	$38, %r9d
	callq	_KTimestamp7
	callq	_KPopCDep
	cmpl	%ebx, %r14d
	jl	.LBB14_31
# BB#30:                                # %if.then247
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
.Ltmp1396:
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$141, %edi
	callq	_KPushCDep
	movl	$4, %edi
	callq	_KWork
	movq	-96(%rbp), %r14         # 8-byte Reload
	movq	-120(%rbp), %rbx        # 8-byte Reload
.Ltmp1397:
	leaq	(%rbx,%r14), %rdi
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 1242 15 is_stmt 1     # susan.c:1242:15
.Ltmp1398:
	movb	$1, (%rbx,%r14)
	callq	_KPopCDep
.Ltmp1399:
.LBB14_31:                              # %for.inc394.critedge25
                                        #   in Loop: Header=BB14_11 Depth=2
	#DEBUG_VALUE: susan_edges_small:in <- [RBP+-128]
	#DEBUG_VALUE: susan_edges_small:r <- R15
	#DEBUG_VALUE: susan_edges_small:r <- [RBP+-208]
	#DEBUG_VALUE: susan_edges_small:bp <- [RBP+-88]
	#DEBUG_VALUE: susan_edges_small:max_no <- [RBP+-76]
	#DEBUG_VALUE: susan_edges_small:x_size <- EBX
	#DEBUG_VALUE: susan_edges_small:i <- 2
	#DEBUG_VALUE: susan_edges_small:j <- 2
	#DEBUG_VALUE: susan_edges_small:do_symmetry <- 0
	movl	$128, %edi
	callq	_KPushCDep
	movl	$127, %edi
	xorl	%esi, %esi
	movl	$128, %edx
	movl	$129, %ecx
	movl	$116, %r8d
	callq	_KPhi3To1
	movl	$1, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$132, %edi
	movl	$74, %esi
	movl	$2, %edx
	movl	$38, %ecx
	movl	$2, %r8d
	movl	$127, %r9d
	callq	_KTimestamp3
.Ltmp1400:
.LBB14_45:                              # %for.inc394
                                        #   in Loop: Header=BB14_11 Depth=2
	callq	_KPopCDep
	jmp	.LBB14_46
.LBB14_48:                              # %for.cond81.pre_exit.for.end399
	#DEBUG_VALUE: susan_edges_small:i <- 2
	movl	$1, %esi
	movabsq	$4900460201756101591, %rdi # imm = 0x4401EE96F99C8BD7
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$-2341254195971592262, %rdi # imm = 0xDF8231B698386FBA
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp1401:
	.size	susan_edges_small, .Ltmp1401-susan_edges_small
.Lfunc_end14:
	.cfi_endproc

	.globl	corner_draw
	.align	16, 0x90
	.type	corner_draw,@function
corner_draw:                            # @corner_draw
.Lfunc_begin15:
	.loc	2 1295 0                # susan.c:1295:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1402:
	.cfi_def_cfa_offset 16
.Ltmp1403:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1404:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
.Ltmp1405:
	.cfi_offset %rbx, -56
.Ltmp1406:
	.cfi_offset %r12, -48
.Ltmp1407:
	.cfi_offset %r13, -40
.Ltmp1408:
	.cfi_offset %r14, -32
.Ltmp1409:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: corner_draw:in <- RDI
	#DEBUG_VALUE: corner_draw:corner_list <- RSI
	#DEBUG_VALUE: corner_draw:x_size <- EDX
	#DEBUG_VALUE: corner_draw:drawing_mode <- ECX
	movl	%ecx, %r14d
.Ltmp1410:
	#DEBUG_VALUE: corner_draw:drawing_mode <- R14D
	movl	%edx, %ebx
.Ltmp1411:
	#DEBUG_VALUE: corner_draw:x_size <- EBX
	movq	%rsi, %r12
.Ltmp1412:
	#DEBUG_VALUE: corner_draw:corner_list <- R12
	movq	%rdi, %r13
.Ltmp1413:
	#DEBUG_VALUE: corner_draw:in <- R13
	movabsq	$-1911938491712941354, %r15 # imm = 0xE5776E12590DD2D6
	movabsq	$-4655199645262066848, %rdi # imm = 0xBF65689641A14B60
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$13, %edi
	movl	$2, %esi
	callq	_KPrepRTable
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
.Ltmp1414:
	#DEBUG_VALUE: corner_draw:n <- 0
	movl	$1, %esi
	movabsq	$-6871879966195362720, %rdi # imm = 0xA0A22D945BCD5460
	callq	_KEnterRegion
	.loc	2 1301 9 prologue_end   # susan.c:1301:9
.Ltmp1415:
	testl	%r14d, %r14d
	je	.LBB15_4
.Ltmp1416:
# BB#1:                                 # %while.cond.preheader
	#DEBUG_VALUE: corner_draw:in <- R13
	#DEBUG_VALUE: corner_draw:corner_list <- R12
	#DEBUG_VALUE: corner_draw:x_size <- EBX
	#DEBUG_VALUE: corner_draw:x_size <- [RBP+-48]
	#DEBUG_VALUE: corner_draw:n <- 0
	movq	%rbx, -48(%rbp)         # 8-byte Spill
	addq	$8, %r12
.Ltmp1417:
	xorl	%edx, %edx
	xorl	%esi, %esi
	jmp	.LBB15_2
.Ltmp1418:
	.align	16, 0x90
.LBB15_3:                               # %while.cond.backedge
                                        #   in Loop: Header=BB15_2 Depth=1
	#DEBUG_VALUE: corner_draw:in <- R13
	#DEBUG_VALUE: corner_draw:x_size <- [RBP+-48]
	#DEBUG_VALUE: corner_draw:n <- 0
	movl	$2, %esi
	movq	%r15, %r14
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$9, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	leaq	-4(%r12), %rdi
	movl	$4, %esi
	movl	$4, %edx
	callq	_KLoad0
	.loc	2 1308 11               # susan.c:1308:11
.Ltmp1419:
	movslq	-4(%r12), %rbx
	movl	$12, %edi
	movl	$2, %esi
	movl	$1, %edx
	movl	$9, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$12, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	movq	-48(%rbp), %rax         # 8-byte Reload
	movslq	%eax, %r15
	.loc	2 1308 16 is_stmt 0     # susan.c:1308:16
	imulq	%rbx, %r15
	leaq	-8(%r12), %rdi
	movl	$6, %esi
	movl	$4, %edx
	callq	_KLoad0
	.loc	2 1308 11               # susan.c:1308:11
	movslq	-8(%r12), %rbx
	addq	%r15, %rbx
	leaq	(%r13,%rbx), %rdi
.Ltmp1420:
	#DEBUG_VALUE: corner_draw:p <- RDI
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 1309 7 is_stmt 1      # susan.c:1309:7
	movb	$0, (%r13,%rbx)
	movl	$2, (%rsp)
	movl	$11, %edi
.Ltmp1421:
	movl	$2, %esi
	movl	$2, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	movl	$9, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movl	$9, %edi
	callq	_KPushCDep
	movl	$8, %edi
	movl	$11, %esi
	movl	$9, %edx
	movl	$12, %ecx
	callq	_KPhi2To1
	movl	$8, %edi
	movl	$8, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$2, %esi
	movq	%r14, %rdi
	movq	%r14, %r15
	callq	_KExitRegion
	movl	$8, %esi
	movl	$9, %edx
	addq	$24, %r12
.Ltmp1422:
.LBB15_2:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: corner_draw:in <- R13
	#DEBUG_VALUE: corner_draw:x_size <- [RBP+-48]
	#DEBUG_VALUE: corner_draw:n <- 0
	movl	$7, %edi
	callq	_KPhi1To1
	movl	$5, %edi
	callq	_KWork
	movl	$3, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1300 9                # susan.c:1300:9
	movl	(%r12), %ebx
	movl	$7, %edi
	movl	$7, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$9, %edi
	movl	$3, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	movl	$7, %edi
	movl	$9, %esi
	callq	_KPhiAddCond
	cmpl	$7, %ebx
	jne	.LBB15_3
	jmp	.LBB15_7
.Ltmp1423:
.LBB15_4:                               # %while.cond.us.preheader
	#DEBUG_VALUE: corner_draw:in <- R13
	#DEBUG_VALUE: corner_draw:corner_list <- R12
	#DEBUG_VALUE: corner_draw:x_size <- EBX
	#DEBUG_VALUE: corner_draw:n <- 0
	.loc	2 1303 38               # susan.c:1303:38
	leal	-2(%rbx), %eax
.Ltmp1424:
	#DEBUG_VALUE: corner_draw:x_size <- [RBP+-48]
	.loc	2 1303 35 is_stmt 0     # susan.c:1303:35
	movq	%rbx, -48(%rbp)         # 8-byte Spill
	cltq
	movq	%rax, -64(%rbp)         # 8-byte Spill
	addq	$8, %r12
.Ltmp1425:
	xorl	%r14d, %r14d
	xorl	%edx, %edx
	jmp	.LBB15_5
.Ltmp1426:
	.align	16, 0x90
.LBB15_6:                               # %while.cond.backedge.us
                                        #   in Loop: Header=BB15_5 Depth=1
	#DEBUG_VALUE: corner_draw:in <- R13
	#DEBUG_VALUE: corner_draw:x_size <- [RBP+-48]
	#DEBUG_VALUE: corner_draw:n <- 0
	movl	$2, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	movl	$9, %edi
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	leaq	-4(%r12), %rdi
	movl	$4, %esi
	movl	$4, %edx
	callq	_KLoad0
	.loc	2 1302 11 is_stmt 1     # susan.c:1302:11
	movslq	-4(%r12), %r14
	movl	$12, %edi
	movl	$2, %esi
	movl	$1, %edx
	movl	$9, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$12, %edi
	callq	_KPushCDep
	movl	$19, %edi
	callq	_KWork
	.loc	2 1302 17 is_stmt 0     # susan.c:1302:17
	decq	%r14
	.loc	2 1302 11               # susan.c:1302:11
	movq	-48(%rbp), %rax         # 8-byte Reload
	movslq	%eax, %rbx
	.loc	2 1302 16               # susan.c:1302:16
	imulq	%r14, %rbx
	leaq	-8(%r12), %rdi
	movl	$5, %esi
	movl	$4, %edx
	callq	_KLoad0
	.loc	2 1302 11               # susan.c:1302:11
	movslq	-8(%r12), %r15
	addq	%rbx, %r15
	leaq	-1(%r13,%r15), %rdi
.Ltmp1427:
	#DEBUG_VALUE: corner_draw:p <- RDI
	.loc	2 1303 8 is_stmt 1      # susan.c:1303:8
	leaq	(%r13,%r15), %r14
.Ltmp1428:
	#DEBUG_VALUE: corner_draw:p <- R14
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 1303 7 is_stmt 0      # susan.c:1303:7
	movb	$-1, -1(%r13,%r15)
	.loc	2 1303 18               # susan.c:1303:18
	leaq	1(%r13,%r15), %rbx
.Ltmp1429:
	#DEBUG_VALUE: corner_draw:p <- RBX
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KStoreConst
	.loc	2 1303 17               # susan.c:1303:17
	movb	$-1, (%r13,%r15)
	movl	$1, %esi
	movq	%rbx, %rdi
	callq	_KStoreConst
	.loc	2 1303 27               # susan.c:1303:27
	movb	$-1, 1(%r13,%r15)
	movq	%r12, -56(%rbp)         # 8-byte Spill
	movq	-64(%rbp), %r12         # 8-byte Reload
	.loc	2 1303 35               # susan.c:1303:35
	leaq	1(%r12,%r15), %rbx
.Ltmp1430:
	leaq	(%r13,%rbx), %rdi
.Ltmp1431:
	#DEBUG_VALUE: corner_draw:p <- RDI
	.loc	2 1304 8 is_stmt 1      # susan.c:1304:8
	leaq	1(%r13,%rbx), %r14
.Ltmp1432:
	#DEBUG_VALUE: corner_draw:p <- R14
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 1304 7 is_stmt 0      # susan.c:1304:7
	movb	$-1, (%r13,%rbx)
	.loc	2 1304 18               # susan.c:1304:18
	leaq	2(%r13,%rbx), %r15
.Ltmp1433:
	#DEBUG_VALUE: corner_draw:p <- R15
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KStoreConst
	.loc	2 1304 17               # susan.c:1304:17
	movb	$0, 1(%r13,%rbx)
	movl	$1, %esi
	movq	%r15, %rdi
	callq	_KStoreConst
	.loc	2 1304 27               # susan.c:1304:27
	movb	$-1, 2(%r13,%rbx)
	.loc	2 1304 35               # susan.c:1304:35
	leaq	2(%r12,%rbx), %rbx
	movq	-56(%rbp), %r12         # 8-byte Reload
	leaq	(%r13,%rbx), %rdi
.Ltmp1434:
	#DEBUG_VALUE: corner_draw:p <- RDI
	.loc	2 1305 8 is_stmt 1      # susan.c:1305:8
	leaq	1(%r13,%rbx), %r14
.Ltmp1435:
	#DEBUG_VALUE: corner_draw:p <- R14
	movl	$1, %esi
	callq	_KStoreConst
	.loc	2 1305 7 is_stmt 0      # susan.c:1305:7
	movb	$-1, (%r13,%rbx)
	.loc	2 1305 18               # susan.c:1305:18
	leaq	2(%r13,%rbx), %r15
.Ltmp1436:
	#DEBUG_VALUE: corner_draw:p <- R15
	movl	$1, %esi
	movq	%r14, %rdi
	callq	_KStoreConst
	.loc	2 1305 17               # susan.c:1305:17
	movb	$-1, 1(%r13,%rbx)
	movl	$1, %esi
	movq	%r15, %rdi
	callq	_KStoreConst
	.loc	2 1305 27               # susan.c:1305:27
	movb	$-1, 2(%r13,%rbx)
	movl	$2, (%rsp)
	movl	$10, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$7, %ecx
	movl	$1, %r8d
	movl	$9, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movl	$9, %edi
	callq	_KPushCDep
	movl	$8, %r14d
	movl	$8, %edi
	movl	$10, %esi
	movl	$9, %edx
	movl	$12, %ecx
	callq	_KPhi2To1
	movl	$8, %edi
	movl	$8, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-1911938491712941354, %rdi # imm = 0xE5776E12590DD2D6
	movq	%rdi, %r15
.Ltmp1437:
	callq	_KExitRegion
	movl	$9, %edx
	addq	$24, %r12
.Ltmp1438:
.LBB15_5:                               # %while.cond.us
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: corner_draw:in <- R13
	#DEBUG_VALUE: corner_draw:x_size <- [RBP+-48]
	#DEBUG_VALUE: corner_draw:n <- 0
	movl	$7, %edi
	movl	%r14d, %esi
	callq	_KPhi1To1
	movl	$5, %edi
	callq	_KWork
	movl	$3, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1300 9 is_stmt 1      # susan.c:1300:9
	movl	(%r12), %ebx
	movl	$7, %edi
	movl	$7, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$9, %edi
	movl	$3, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	movl	$7, %edi
	movl	$9, %esi
	callq	_KPhiAddCond
	cmpl	$7, %ebx
	jne	.LBB15_6
.Ltmp1439:
.LBB15_7:                               # %while.cond.pre_exit.while.end
	#DEBUG_VALUE: corner_draw:n <- 0
	movl	$1, %esi
	movabsq	$-6871879966195362720, %rdi # imm = 0xA0A22D945BCD5460
	callq	_KExitRegion
	xorl	%esi, %esi
	movabsq	$-4655199645262066848, %rdi # imm = 0xBF65689641A14B60
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp1440:
	.size	corner_draw, .Ltmp1440-corner_draw
.Lfunc_end15:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI16_0:
	.quad	4602678819172646912     # double 0.5
.LCPI16_1:
	.quad	-4620693217682128896    # double -0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI16_2:
	.long	1077936128              # float 3
.LCPI16_3:
	.long	0                       # float 0
	.text
	.globl	susan_corners
	.align	16, 0x90
	.type	susan_corners,@function
susan_corners:                          # @susan_corners
.Lfunc_begin16:
	.loc	2 1318 0                # susan.c:1318:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1441:
	.cfi_def_cfa_offset 16
.Ltmp1442:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1443:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$2056, %rsp             # imm = 0x808
.Ltmp1444:
	.cfi_offset %rbx, -56
.Ltmp1445:
	.cfi_offset %r12, -48
.Ltmp1446:
	.cfi_offset %r13, -40
.Ltmp1447:
	.cfi_offset %r14, -32
.Ltmp1448:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: susan_corners:in <- RDI
	#DEBUG_VALUE: susan_corners:r <- RSI
	#DEBUG_VALUE: susan_corners:bp <- RDX
	#DEBUG_VALUE: susan_corners:max_no <- ECX
	#DEBUG_VALUE: susan_corners:corner_list <- R8
	#DEBUG_VALUE: susan_corners:x_size <- R9D
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	movl	%r9d, %r13d
.Ltmp1449:
	#DEBUG_VALUE: susan_corners:x_size <- R13D
	movq	%r13, -752(%rbp)        # 8-byte Spill
	movq	%r8, -720(%rbp)         # 8-byte Spill
.Ltmp1450:
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	movl	%ecx, -72(%rbp)         # 4-byte Spill
.Ltmp1451:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	movq	%rdx, -120(%rbp)        # 8-byte Spill
.Ltmp1452:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	movq	%rsi, %r12
.Ltmp1453:
	#DEBUG_VALUE: susan_corners:r <- R12
	movq	%r12, -728(%rbp)        # 8-byte Spill
	movq	%rdi, -712(%rbp)        # 8-byte Spill
.Ltmp1454:
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:in <- undef
	movl	16(%rbp), %r14d
	movabsq	$-5914476984468875494, %rdi # imm = 0xADEB8E84D482571A
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$488, %edi              # imm = 0x1E8
	movl	$4, %esi
	callq	_KPrepRTable
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	movl	$6, %edi
	callq	_KWork
	.loc	2 1325 17 prologue_end  # susan.c:1325:17
.Ltmp1455:
	movl	%r14d, %ebx
	imull	%r13d, %ebx
	movl	$4, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$2, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movabsq	$-2748205943035621529, %rdi # imm = 0xD9DC694163BE8F67
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$4, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	xorl	%esi, %esi
	.loc	2 1325 3 is_stmt 0      # susan.c:1325:3
	movq	%r12, %rdi
	movl	%ebx, %edx
	callq	wccmemset
	movl	$5, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$2, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movabsq	$3985385140647393651, %rdi # imm = 0x374EEEAB81687973
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$5, %edi
	callq	_KEnqArg
	.loc	2 1327 15 is_stmt 1     # susan.c:1327:15
	movl	%ebx, %edi
	callq	wccmalloc
	movq	%rax, %r15
.Ltmp1456:
	#DEBUG_VALUE: susan_corners:cgx <- R15
	movl	$6, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$2, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movabsq	$-4665618589807079546, %rdi # imm = 0xBF40649CB1170F86
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$6, %edi
	callq	_KEnqArg
	.loc	2 1328 15               # susan.c:1328:15
	movl	%ebx, %edi
	callq	wccmalloc
	movq	%rax, %rbx
.Ltmp1457:
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:cgy <- RBX
	movl	$1, %esi
	movabsq	$3670298599387686660, %rdi # imm = 0x32EF85214C1DE704
	callq	_KEnterRegion
	.loc	2 1331 14               # susan.c:1331:14
.Ltmp1458:
	addl	$-5, %r14d
	.loc	2 1331 12 is_stmt 0     # susan.c:1331:12
	movslq	%r14d, %rax
	.loc	2 1333 16 is_stmt 1     # susan.c:1333:16
.Ltmp1459:
	movq	%rax, -472(%rbp)        # 8-byte Spill
	leal	-5(%r13), %eax
	.loc	2 1333 14 is_stmt 0     # susan.c:1333:14
	movslq	%eax, %rdi
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movslq	%r13d, %r8
.Ltmp1460:
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	movq	%r8, -480(%rbp)         # 8-byte Spill
	leaq	(%r8,%r8,4), %rax
	addq	%rax, %rbx
.Ltmp1461:
	movq	%rbx, -768(%rbp)        # 8-byte Spill
	addq	%rax, %r15
.Ltmp1462:
	movq	%r15, -760(%rbp)        # 8-byte Spill
	leaq	(%r12,%rax), %rcx
.Ltmp1463:
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	movq	-712(%rbp), %rsi        # 8-byte Reload
.Ltmp1464:
	#DEBUG_VALUE: susan_corners:in <- RSI
	addq	%rsi, %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	leal	-6(%r8), %eax
	cltq
	leaq	(%rax,%rax), %rcx
	leaq	(%r8,%r8), %rdx
	leaq	(%rdx,%rax,2), %rdx
	addq	%rsi, %rdx
	movq	%rsi, %r9
.Ltmp1465:
	#DEBUG_VALUE: susan_corners:in <- R9
	movq	%rdx, -744(%rbp)        # 8-byte Spill
	leal	-3(%r8), %edx
	movslq	%edx, %rdx
	leaq	(%rdi,%rdi), %rsi
	leaq	34(%rsi,%rdx,2), %rbx
	movq	%rbx, -488(%rbp)        # 8-byte Spill
	leaq	33(%rsi,%rdx,2), %rbx
	movq	%rbx, -496(%rbp)        # 8-byte Spill
	leaq	32(%rsi,%rdx,2), %rsi
	movq	%rsi, -504(%rbp)        # 8-byte Spill
	leaq	(%rdx,%r8,2), %rdx
	addq	%r9, %rdx
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	leaq	32(%rcx,%rdi,2), %rdx
	movq	%rdx, -512(%rbp)        # 8-byte Spill
	leaq	31(%rcx,%rdi,2), %rdx
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	leaq	30(%rcx,%rdi,2), %rdx
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	leaq	29(%rcx,%rdi,2), %rdx
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	leaq	28(%rcx,%rdi,2), %rcx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	leaq	28(%rdi,%rax,2), %rcx
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	leaq	27(%rdi,%rax,2), %rcx
	movq	%rcx, -560(%rbp)        # 8-byte Spill
	leaq	26(%rdi,%rax,2), %rcx
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	leaq	25(%rdi,%rax,2), %rcx
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	leaq	24(%rdi,%rax,2), %rcx
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	leaq	23(%rdi,%rax,2), %rcx
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	leaq	22(%rdi,%rax,2), %rcx
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	leaq	22(%rdi,%rax), %rcx
	movq	%rcx, -608(%rbp)        # 8-byte Spill
	leaq	21(%rdi,%rax), %rcx
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	leaq	20(%rdi,%rax), %rcx
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	leaq	18(%rdi,%rax), %rcx
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	leaq	17(%rdi,%rax), %rcx
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	leaq	16(%rdi,%rax), %rax
	movq	%rax, -648(%rbp)        # 8-byte Spill
	leaq	10(%rdi), %rax
	movq	%rax, -656(%rbp)        # 8-byte Spill
	leaq	(%r9,%r8,2), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
.Ltmp1466:
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	movl	$5, %eax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	movabsq	$-999493779731638065, %r15 # imm = 0xF22115B3EFE218CF
	xorl	%r14d, %r14d
	xorl	%r13d, %r13d
	movl	$5, %ebx
	jmp	.LBB16_1
.Ltmp1467:
	.align	16, 0x90
.LBB16_48:                              # %for.cond4.pre_exit.for.inc927
                                        #   in Loop: Header=BB16_1 Depth=1
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	movl	$1, %esi
	movabsq	$4325129738789734246, %rdi # imm = 0x3C05F294F80A4766
	callq	_KExitRegion
	movl	$262, %r14d             # imm = 0x106
	movl	$262, %edi              # imm = 0x106
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-672(%rbp), %rbx        # 8-byte Reload
	.loc	2 1331 3 is_stmt 1      # susan.c:1331:3
	incq	%rbx
	movl	$382, %r13d             # imm = 0x17E
	movl	$382, %edi              # imm = 0x17E
	movl	$263, %esi              # imm = 0x107
	movl	$1, %edx
	movl	$262, %ecx              # imm = 0x106
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$8817135696180688010, %rdi # imm = 0x7A5CC2335344348A
	callq	_KExitRegion
	movq	-480(%rbp), %rax        # 8-byte Reload
	addq	%rax, -664(%rbp)        # 8-byte Folded Spill
	addq	%rax, -488(%rbp)        # 8-byte Folded Spill
	addq	%rax, -496(%rbp)        # 8-byte Folded Spill
	addq	%rax, -504(%rbp)        # 8-byte Folded Spill
	addq	%rax, -512(%rbp)        # 8-byte Folded Spill
	addq	%rax, -520(%rbp)        # 8-byte Folded Spill
	addq	%rax, -528(%rbp)        # 8-byte Folded Spill
	addq	%rax, -536(%rbp)        # 8-byte Folded Spill
	addq	%rax, -544(%rbp)        # 8-byte Folded Spill
	addq	%rax, -552(%rbp)        # 8-byte Folded Spill
	addq	%rax, -560(%rbp)        # 8-byte Folded Spill
	addq	%rax, -568(%rbp)        # 8-byte Folded Spill
	addq	%rax, -576(%rbp)        # 8-byte Folded Spill
	addq	%rax, -584(%rbp)        # 8-byte Folded Spill
	addq	%rax, -592(%rbp)        # 8-byte Folded Spill
	addq	%rax, -600(%rbp)        # 8-byte Folded Spill
	addq	%rax, -608(%rbp)        # 8-byte Folded Spill
	addq	%rax, -616(%rbp)        # 8-byte Folded Spill
	addq	%rax, -624(%rbp)        # 8-byte Folded Spill
	addq	%rax, -632(%rbp)        # 8-byte Folded Spill
	addq	%rax, -640(%rbp)        # 8-byte Folded Spill
	addq	%rax, -648(%rbp)        # 8-byte Folded Spill
	addq	%rax, -656(%rbp)        # 8-byte Folded Spill
.Ltmp1468:
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	movl	$263, %edi              # imm = 0x107
	movl	%r13d, %esi
	movl	%r14d, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$262, %edi              # imm = 0x106
	movl	$3, %esi
	movl	$2, %edx
	movl	$263, %ecx              # imm = 0x107
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$263, %edi              # imm = 0x107
	movl	$262, %esi              # imm = 0x106
	callq	_KPhiAddCond
	movl	$263, %edi              # imm = 0x107
	movl	$263, %esi              # imm = 0x107
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 1331 3 is_stmt 0      # susan.c:1331:3
	cmpq	-472(%rbp), %rbx        # 8-byte Folded Reload
	jge	.LBB16_49
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	movq	%rbx, -672(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movabsq	$8817135696180688010, %rdi # imm = 0x7A5CC2335344348A
	callq	_KEnterRegion
	movl	$262, %edi              # imm = 0x106
	callq	_KPushCDep
	#DEBUG_VALUE: susan_corners:j <- 5
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$4325129738789734246, %rdi # imm = 0x3C05F294F80A4766
	callq	_KEnterRegion
	xorl	%r14d, %r14d
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	-648(%rbp), %rax        # 8-byte Reload
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	-624(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	-600(%rbp), %rax        # 8-byte Reload
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, -240(%rbp)        # 8-byte Spill
	movq	-536(%rbp), %rax        # 8-byte Reload
	movq	%rax, -248(%rbp)        # 8-byte Spill
	movq	-528(%rbp), %rax        # 8-byte Reload
	movq	%rax, -256(%rbp)        # 8-byte Spill
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, -264(%rbp)        # 8-byte Spill
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, -288(%rbp)        # 8-byte Spill
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	-664(%rbp), %rax        # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	xorl	%r12d, %r12d
	movl	$5, %ebx
	jmp	.LBB16_3
	.align	16, 0x90
.LBB16_47:                              # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
.Ltmp1469:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	movl	%eax, -72(%rbp)         # 4-byte Spill
.Ltmp1470:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	movl	$264, %r14d             # imm = 0x108
	movl	$264, %edi              # imm = 0x108
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-128(%rbp), %rbx        # 8-byte Reload
	.loc	2 1333 5 is_stmt 1      # susan.c:1333:5
.Ltmp1471:
	incq	%rbx
	movl	$383, %r12d             # imm = 0x17F
	movl	$383, %edi              # imm = 0x17F
	movl	$265, %esi              # imm = 0x109
	movl	$1, %edx
	movl	$264, %ecx              # imm = 0x108
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-999493779731638065, %r15 # imm = 0xF22115B3EFE218CF
	movq	%r15, %rdi
	callq	_KExitRegion
	incq	-80(%rbp)               # 8-byte Folded Spill
	incq	-272(%rbp)              # 8-byte Folded Spill
	incq	-288(%rbp)              # 8-byte Folded Spill
	incq	-280(%rbp)              # 8-byte Folded Spill
	incq	-232(%rbp)              # 8-byte Folded Spill
	incq	-264(%rbp)              # 8-byte Folded Spill
	incq	-256(%rbp)              # 8-byte Folded Spill
	incq	-248(%rbp)              # 8-byte Folded Spill
	incq	-240(%rbp)              # 8-byte Folded Spill
	incq	-168(%rbp)              # 8-byte Folded Spill
	incq	-224(%rbp)              # 8-byte Folded Spill
	incq	-216(%rbp)              # 8-byte Folded Spill
	incq	-208(%rbp)              # 8-byte Folded Spill
	incq	-200(%rbp)              # 8-byte Folded Spill
	incq	-192(%rbp)              # 8-byte Folded Spill
	incq	-176(%rbp)              # 8-byte Folded Spill
	incq	-56(%rbp)               # 8-byte Folded Spill
	incq	-160(%rbp)              # 8-byte Folded Spill
	incq	-152(%rbp)              # 8-byte Folded Spill
	incq	-112(%rbp)              # 8-byte Folded Spill
	incq	-104(%rbp)              # 8-byte Folded Spill
	incq	-96(%rbp)               # 8-byte Folded Spill
	incq	-88(%rbp)               # 8-byte Folded Spill
.Ltmp1472:
.LBB16_3:                               # %for.cond4
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	movl	$262, %edi              # imm = 0x106
	callq	_KPushCDep
	movl	$265, %edi              # imm = 0x109
	movl	$262, %edx              # imm = 0x106
	movl	%r12d, %esi
	movl	%r14d, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$264, %edi              # imm = 0x108
	movl	$2, %esi
	movl	$2, %edx
	movl	$262, %ecx              # imm = 0x106
	movl	$2, %r8d
	movl	$265, %r9d              # imm = 0x109
	callq	_KTimestamp3
	movl	$265, %edi              # imm = 0x109
	movl	$264, %esi              # imm = 0x108
	callq	_KPhiAddCond
	movl	$265, %edi              # imm = 0x109
	movl	$265, %esi              # imm = 0x109
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 1333 5 is_stmt 0      # susan.c:1333:5
	cmpq	-64(%rbp), %rbx         # 8-byte Folded Reload
	jge	.LBB16_48
# BB#4:                                 # %for.body7
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	movq	%rbx, -128(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	movl	$264, %edi              # imm = 0x108
	callq	_KPushCDep
	movl	$194, %edi
	callq	_KWork
.Ltmp1473:
	#DEBUG_VALUE: susan_corners:n <- 100
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	-80(%rbp), %r12         # 8-byte Reload
	leaq	-1(%r13,%r12), %r14
	movq	%r14, -304(%rbp)        # 8-byte Spill
	movq	-440(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%r12), %rdi
	movl	$7, %esi
	movl	$8, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1336 10 is_stmt 1     # susan.c:1336:10
.Ltmp1474:
	movzbl	(%rbx,%r12), %r15d
	movq	%r15, -48(%rbp)         # 8-byte Spill
	leaq	(%r13,%r12), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movl	$9, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1338 12               # susan.c:1338:12
	movzbl	-1(%r13,%r12), %eax
	movq	%r15, %rbx
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1475:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$10, %esi
	movl	$11, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1338 10 is_stmt 0     # susan.c:1338:10
	movzbl	(%r14,%rbx), %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	movl	$12, %esi
	movl	$1, %edx
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1339 12 is_stmt 1     # susan.c:1339:12
	movzbl	(%r13,%r12), %eax
	subq	%rax, %r15
	leaq	(%r14,%r15), %rdi
	movl	$13, %esi
	movl	$14, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1339 10 is_stmt 0     # susan.c:1339:10
	movzbl	(%r14,%r15), %r15d
	.loc	2 1338 7 is_stmt 1      # susan.c:1338:7
	addl	-144(%rbp), %r15d       # 4-byte Folded Reload
	leaq	1(%r13,%r12), %rdi
	movq	%rdi, -312(%rbp)        # 8-byte Spill
	movl	$15, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1340 12               # susan.c:1340:12
	movzbl	1(%r13,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$16, %esi
	movl	$17, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1340 10 is_stmt 0     # susan.c:1340:10
	movzbl	(%r14,%rbx), %r13d
	.loc	2 1339 7 is_stmt 1      # susan.c:1339:7
	addl	%r15d, %r13d
	movq	-184(%rbp), %r15        # 8-byte Reload
	leaq	1(%r15,%r12), %rdi
	movq	%rdi, -320(%rbp)        # 8-byte Spill
	movl	$18, %esi
	movl	$19, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1343 12               # susan.c:1343:12
	movzbl	1(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$20, %esi
	movl	$21, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1343 10 is_stmt 0     # susan.c:1343:10
	movzbl	(%r14,%rbx), %eax
	.loc	2 1340 7 is_stmt 1      # susan.c:1340:7
	addl	%r13d, %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	leaq	2(%r15,%r12), %rdi
	movq	%rdi, -328(%rbp)        # 8-byte Spill
	movl	$22, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1344 12               # susan.c:1344:12
	movzbl	2(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$23, %esi
	movl	$24, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1344 10 is_stmt 0     # susan.c:1344:10
	movzbl	(%r14,%rbx), %r13d
	.loc	2 1343 7 is_stmt 1      # susan.c:1343:7
	addl	-144(%rbp), %r13d       # 4-byte Folded Reload
	leaq	3(%r15,%r12), %rdi
	movq	%rdi, -336(%rbp)        # 8-byte Spill
	movl	$25, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1345 12               # susan.c:1345:12
	movzbl	3(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$26, %esi
	movl	$27, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1345 10 is_stmt 0     # susan.c:1345:10
	movzbl	(%r14,%rbx), %eax
	.loc	2 1344 7 is_stmt 1      # susan.c:1344:7
	addl	%r13d, %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	leaq	4(%r15,%r12), %rdi
	movq	%rdi, -344(%rbp)        # 8-byte Spill
	movl	$28, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1346 12               # susan.c:1346:12
	movzbl	4(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$29, %esi
	movl	$30, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1346 10 is_stmt 0     # susan.c:1346:10
	movzbl	(%r14,%rbx), %r13d
	.loc	2 1345 7 is_stmt 1      # susan.c:1345:7
	addl	-144(%rbp), %r13d       # 4-byte Folded Reload
	leaq	5(%r15,%r12), %rdi
	movq	%rdi, -352(%rbp)        # 8-byte Spill
	movl	$31, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1347 12               # susan.c:1347:12
	movzbl	5(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$32, %esi
	movl	$33, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1347 10 is_stmt 0     # susan.c:1347:10
	movzbl	(%r14,%rbx), %eax
	.loc	2 1346 7 is_stmt 1      # susan.c:1346:7
	addl	%r13d, %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	movq	%r14, %r13
.Ltmp1476:
	#DEBUG_VALUE: susan_corners:bp <- R13
	movq	-88(%rbp), %r12         # 8-byte Reload
	leaq	(%r15,%r12), %rdi
	movq	%rdi, -360(%rbp)        # 8-byte Spill
	movl	$34, %esi
	movl	$35, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1350 12               # susan.c:1350:12
	movzbl	(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$36, %esi
	movl	$37, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1350 10 is_stmt 0     # susan.c:1350:10
	movzbl	(%r13,%rbx), %r14d
	.loc	2 1347 7 is_stmt 1      # susan.c:1347:7
	addl	-144(%rbp), %r14d       # 4-byte Folded Reload
	leaq	1(%r15,%r12), %rdi
	movq	%rdi, -368(%rbp)        # 8-byte Spill
	movl	$38, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1351 12               # susan.c:1351:12
	movzbl	1(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$39, %esi
	movl	$40, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1351 10 is_stmt 0     # susan.c:1351:10
	movzbl	(%r13,%rbx), %eax
	.loc	2 1350 7 is_stmt 1      # susan.c:1350:7
	addl	%r14d, %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	leaq	2(%r15,%r12), %rdi
	movq	%rdi, -376(%rbp)        # 8-byte Spill
	movl	$41, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1352 12               # susan.c:1352:12
	movzbl	2(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$42, %esi
	movl	$43, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1352 10 is_stmt 0     # susan.c:1352:10
	movzbl	(%r13,%rbx), %r14d
	.loc	2 1351 7 is_stmt 1      # susan.c:1351:7
	addl	-144(%rbp), %r14d       # 4-byte Folded Reload
	leaq	3(%r15,%r12), %rdi
	movq	%rdi, -384(%rbp)        # 8-byte Spill
	movl	$44, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1353 12               # susan.c:1353:12
	movzbl	3(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$45, %esi
	movl	$46, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1353 10 is_stmt 0     # susan.c:1353:10
	movzbl	(%r13,%rbx), %eax
	.loc	2 1352 7 is_stmt 1      # susan.c:1352:7
	addl	%r14d, %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	leaq	4(%r15,%r12), %rdi
	movq	%rdi, -392(%rbp)        # 8-byte Spill
	movl	$47, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1354 12               # susan.c:1354:12
	movzbl	4(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$48, %esi
	movl	$49, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1354 10 is_stmt 0     # susan.c:1354:10
	movzbl	(%r13,%rbx), %r14d
	.loc	2 1353 7 is_stmt 1      # susan.c:1353:7
	addl	-144(%rbp), %r14d       # 4-byte Folded Reload
	leaq	5(%r15,%r12), %rdi
	movq	%rdi, -400(%rbp)        # 8-byte Spill
	movl	$50, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1355 12               # susan.c:1355:12
	movzbl	5(%r15,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$51, %esi
	movl	$52, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1355 10 is_stmt 0     # susan.c:1355:10
	movzbl	(%r13,%rbx), %eax
	.loc	2 1354 7 is_stmt 1      # susan.c:1354:7
	addl	%r14d, %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	leaq	6(%r15,%r12), %rdi
	movq	%rdi, -408(%rbp)        # 8-byte Spill
	movl	$53, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1356 12               # susan.c:1356:12
	movzbl	6(%r15,%r12), %eax
	movq	%r13, %r12
.Ltmp1477:
	#DEBUG_VALUE: susan_corners:bp <- R12
	movq	-48(%rbp), %r13         # 8-byte Reload
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$54, %esi
	movl	$55, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1356 10 is_stmt 0     # susan.c:1356:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 1355 7 is_stmt 1      # susan.c:1355:7
	addl	-144(%rbp), %r14d       # 4-byte Folded Reload
	movq	-96(%rbp), %rax         # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movq	%rdi, -144(%rbp)        # 8-byte Spill
	movl	$56, %esi
	movl	$57, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1359 12               # susan.c:1359:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r15,%rax), %eax
	movq	%r13, %rbx
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$58, %esi
	movl	$59, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1359 10 is_stmt 0     # susan.c:1359:10
	movzbl	(%r12,%rbx), %r13d
	.loc	2 1356 7 is_stmt 1      # susan.c:1356:7
	addl	%r14d, %r13d
	movq	-104(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movq	%rdi, -416(%rbp)        # 8-byte Spill
	movl	$60, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1360 12               # susan.c:1360:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-5(%r15,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$61, %esi
	movl	$62, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1360 10 is_stmt 0     # susan.c:1360:10
	movzbl	(%r12,%rbx), %r14d
	.loc	2 1359 7 is_stmt 1      # susan.c:1359:7
	addl	%r13d, %r14d
	movq	-112(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movq	%rdi, -424(%rbp)        # 8-byte Spill
	movl	$63, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1361 12               # susan.c:1361:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r15,%rax), %eax
	movq	%r15, %r13
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$64, %esi
	movl	$65, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1361 10 is_stmt 0     # susan.c:1361:10
	movzbl	(%r12,%rbx), %eax
.Ltmp1478:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1361 7                # susan.c:1361:7
	leal	100(%rax,%r14), %r15d
.Ltmp1479:
	#DEBUG_VALUE: susan_corners:n <- R15D
	movl	$2, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$3, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$4, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$5, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$6, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$7, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$8, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$9, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$10, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$11, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$10, (%rsp)
	movl	$467, %edi              # imm = 0x1D3
	movl	$20, %esi
	movl	$1, %edx
	movl	$1, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1480:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1362 11 is_stmt 1     # susan.c:1362:11
	cmpl	%eax, %r15d
	jge	.LBB16_47
.Ltmp1481:
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- R15D
	movl	$467, %edi              # imm = 0x1D3
	movl	%eax, %r12d
.Ltmp1482:
	#DEBUG_VALUE: susan_corners:max_no <- R12D
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movq	-152(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rdi
	movq	%rdi, -448(%rbp)        # 8-byte Spill
	movl	$66, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1364 14               # susan.c:1364:14
.Ltmp1483:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1484:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$67, %esi
	movl	$68, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1364 12 is_stmt 0     # susan.c:1364:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1485:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1364 9                # susan.c:1364:9
	addl	%r15d, %r14d
.Ltmp1486:
	#DEBUG_VALUE: susan_corners:n <- R14D
	movl	$2, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$4, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$5, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$6, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$9, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$12, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$14, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$15, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$16, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$17, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$18, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$19, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$20, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$21, 8(%rsp)
	movl	$10, (%rsp)
	movl	$468, %edi              # imm = 0x1D4
	movl	$21, %esi
	movl	$1, %edx
	movl	$3, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$21, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	%r12d, %eax
.Ltmp1487:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1365 11 is_stmt 1     # susan.c:1365:11
	cmpl	%eax, %r14d
	jge	.LBB16_47
.Ltmp1488:
# BB#6:                                 # %if.then157
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- R14D
	movl	%eax, %r12d
.Ltmp1489:
	#DEBUG_VALUE: susan_corners:max_no <- R12D
	movq	-160(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rbx
	movq	%rbx, -456(%rbp)        # 8-byte Spill
	movl	$468, %edi              # imm = 0x1D4
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$69, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1366 14               # susan.c:1366:14
.Ltmp1490:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r15        # 8-byte Reload
.Ltmp1491:
	#DEBUG_VALUE: susan_corners:bp <- R15
	leaq	(%r15,%rbx), %rdi
	movl	$70, %esi
	movl	$71, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1366 12 is_stmt 0     # susan.c:1366:12
	movzbl	(%r15,%rbx), %r15d
.Ltmp1492:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1366 9                # susan.c:1366:9
	addl	%r14d, %r15d
.Ltmp1493:
	#DEBUG_VALUE: susan_corners:n <- R15D
	movl	$2, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$4, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$6, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$7, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$8, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$9, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$10, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$11, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$12, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$13, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$21, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$22, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$23, 8(%rsp)
	movl	$10, (%rsp)
	movl	$469, %edi              # imm = 0x1D5
	movl	$22, %esi
	movl	$1, %edx
	movl	$5, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$23, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	%r12d, %eax
.Ltmp1494:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1367 11 is_stmt 1     # susan.c:1367:11
	cmpl	%eax, %r15d
	jge	.LBB16_47
.Ltmp1495:
# BB#7:                                 # %if.then167
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- R15D
	movq	-56(%rbp), %rbx         # 8-byte Reload
	leaq	(%r13,%rbx), %r14
	movq	%r14, -464(%rbp)        # 8-byte Spill
	movl	$469, %edi              # imm = 0x1D5
	movl	%eax, %r12d
.Ltmp1496:
	#DEBUG_VALUE: susan_corners:max_no <- R12D
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$72, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1368 14               # susan.c:1368:14
.Ltmp1497:
	movzbl	(%r13,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1498:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$73, %esi
	movl	$74, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1368 12 is_stmt 0     # susan.c:1368:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1499:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1368 9                # susan.c:1368:9
	addl	%r15d, %r14d
.Ltmp1500:
	#DEBUG_VALUE: susan_corners:n <- R14D
	movl	$2, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$4, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$6, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$8, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$9, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$10, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$11, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$12, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$13, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$14, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$15, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$16, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$17, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$18, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$19, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$20, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$21, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$22, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$23, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$24, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$25, 8(%rsp)
	movl	$10, (%rsp)
	movl	$470, %edi              # imm = 0x1D6
	movl	$23, %esi
	movl	$1, %edx
	movl	$7, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$25, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	%r12d, %eax
.Ltmp1501:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1369 11 is_stmt 1     # susan.c:1369:11
	cmpl	%eax, %r14d
	jge	.LBB16_47
.Ltmp1502:
# BB#8:                                 # %if.then176
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- R14D
	movl	$470, %edi              # imm = 0x1D6
	movl	%eax, %r12d
.Ltmp1503:
	#DEBUG_VALUE: susan_corners:max_no <- R12D
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	-184(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %rdi
	movq	%rdi, -680(%rbp)        # 8-byte Spill
	movl	$75, %esi
	movl	$76, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1372 14               # susan.c:1372:14
.Ltmp1504:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movzbl	-6(%rbx,%rax), %eax
	movq	%rbx, %r13
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r15        # 8-byte Reload
.Ltmp1505:
	#DEBUG_VALUE: susan_corners:bp <- R15
	leaq	(%r15,%rbx), %rdi
	movl	$77, %esi
	movl	$78, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1372 12 is_stmt 0     # susan.c:1372:12
	movzbl	(%r15,%rbx), %ebx
.Ltmp1506:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1372 9                # susan.c:1372:9
	addl	%r14d, %ebx
.Ltmp1507:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$4, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$6, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$8, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$10, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$11, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$12, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$13, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$14, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$15, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$16, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$17, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$18, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$19, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$20, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$21, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$22, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$23, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$24, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$25, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$26, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$27, 8(%rsp)
	movl	$10, (%rsp)
	movl	$471, %edi              # imm = 0x1D7
	movl	$24, %esi
	movl	$1, %edx
	movl	$9, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$27, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	%r12d, %eax
.Ltmp1508:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1373 11 is_stmt 1     # susan.c:1373:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1509:
# BB#9:                                 # %if.then189
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	%eax, %r15d
.Ltmp1510:
	#DEBUG_VALUE: susan_corners:max_no <- R15D
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	%ebx, %r12d
.Ltmp1511:
	#DEBUG_VALUE: susan_corners:n <- R12D
	leaq	(%r13,%rax), %rbx
	movq	%rbx, -688(%rbp)        # 8-byte Spill
	movl	$471, %edi              # imm = 0x1D7
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$79, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1374 14               # susan.c:1374:14
.Ltmp1512:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movzbl	-5(%r13,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1513:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$80, %esi
	movl	$81, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1374 12 is_stmt 0     # susan.c:1374:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1514:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1374 9                # susan.c:1374:9
	addl	%r12d, %ebx
.Ltmp1515:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$4, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$6, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$8, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$10, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$12, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$13, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$14, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$15, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$16, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$17, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$18, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$19, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$20, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$21, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$22, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$23, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$24, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$25, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$26, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$27, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$28, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$29, 8(%rsp)
	movl	$10, (%rsp)
	movl	$472, %edi              # imm = 0x1D8
	movl	$25, %esi
	movl	$1, %edx
	movl	$11, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$29, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	%r15d, %eax
.Ltmp1516:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1375 11 is_stmt 1     # susan.c:1375:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1517:
# BB#10:                                # %if.then199
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%r13, %r12
	leaq	(%r12,%rax), %r13
	movl	$472, %edi              # imm = 0x1D8
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$82, %esi
	movl	$1, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 1376 14               # susan.c:1376:14
.Ltmp1518:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movzbl	-4(%r12,%rax), %eax
	movl	%ebx, %r15d
.Ltmp1519:
	#DEBUG_VALUE: susan_corners:n <- R15D
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1520:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$83, %esi
	movl	$84, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1376 12 is_stmt 0     # susan.c:1376:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1521:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1376 9                # susan.c:1376:9
	addl	%r15d, %ebx
.Ltmp1522:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$4, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$6, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$8, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$10, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$12, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$14, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$15, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$16, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$17, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$18, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$19, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$20, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$21, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$22, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$23, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$24, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$25, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$26, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$27, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$28, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$29, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$30, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$31, 8(%rsp)
	movl	$10, (%rsp)
	movl	$473, %edi              # imm = 0x1D9
	movl	$26, %esi
	movl	$1, %edx
	movl	$13, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$31, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1523:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1377 11 is_stmt 1     # susan.c:1377:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1524:
# BB#11:                                # %if.then209
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%r13, %r15
	movl	%ebx, %r13d
.Ltmp1525:
	#DEBUG_VALUE: susan_corners:n <- R13D
	leaq	(%r12,%rax), %rbx
	movq	%rbx, -696(%rbp)        # 8-byte Spill
	movl	$473, %edi              # imm = 0x1D9
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$85, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1378 14               # susan.c:1378:14
.Ltmp1526:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movzbl	-3(%r12,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1527:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$86, %esi
	movl	$87, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1378 12 is_stmt 0     # susan.c:1378:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1528:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1378 9                # susan.c:1378:9
	addl	%r13d, %ebx
.Ltmp1529:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	%r15, %r13
	movl	$2, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$4, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$6, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$8, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$10, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$12, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$14, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$16, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$17, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$18, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$19, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$20, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$21, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$22, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$23, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$24, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$25, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$26, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$27, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$28, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$29, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$30, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$32, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$33, 8(%rsp)
	movl	$10, (%rsp)
	movl	$474, %edi              # imm = 0x1DA
	movl	$27, %esi
	movl	$1, %edx
	movl	$15, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$33, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1530:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1379 11 is_stmt 1     # susan.c:1379:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1531:
# BB#12:                                # %if.then219
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	-216(%rbp), %rax        # 8-byte Reload
	movl	%ebx, %r15d
.Ltmp1532:
	#DEBUG_VALUE: susan_corners:n <- R15D
	leaq	(%r12,%rax), %rbx
	movq	%rbx, -704(%rbp)        # 8-byte Spill
	movl	$474, %edi              # imm = 0x1DA
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$88, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1380 14               # susan.c:1380:14
.Ltmp1533:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movzbl	-2(%r12,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1534:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$89, %esi
	movl	$90, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1380 12 is_stmt 0     # susan.c:1380:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1535:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1380 9                # susan.c:1380:9
	addl	%r15d, %ebx
.Ltmp1536:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$4, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$6, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$8, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$10, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$12, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$14, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$16, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$18, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$19, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$20, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$21, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$22, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$23, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$24, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$25, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$26, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$27, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$28, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$29, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$30, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$31, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$32, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$33, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$34, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$35, 8(%rsp)
	movl	$10, (%rsp)
	movl	$475, %edi              # imm = 0x1DB
	movl	$28, %esi
	movl	$1, %edx
	movl	$17, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$35, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1537:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1381 11 is_stmt 1     # susan.c:1381:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1538:
# BB#13:                                # %if.then229
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%r13, %r15
	movl	%ebx, %r13d
.Ltmp1539:
	#DEBUG_VALUE: susan_corners:n <- R13D
	leaq	(%r12,%rax), %rbx
	movq	%rbx, -736(%rbp)        # 8-byte Spill
	movl	$475, %edi              # imm = 0x1DB
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$91, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1382 14               # susan.c:1382:14
.Ltmp1540:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movzbl	-1(%r12,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1541:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$92, %esi
	movl	$93, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1382 12 is_stmt 0     # susan.c:1382:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1542:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1382 9                # susan.c:1382:9
	addl	%r13d, %ebx
.Ltmp1543:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	%r15, %r13
	movl	$2, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$4, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$6, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$8, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$10, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$12, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$14, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$16, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$18, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$20, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$21, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$22, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$23, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$24, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$25, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$26, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$27, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$28, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$29, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$30, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$31, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$33, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$34, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$35, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$36, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$37, 8(%rsp)
	movl	$10, (%rsp)
	movl	$476, %edi              # imm = 0x1DC
	movl	$29, %esi
	movl	$1, %edx
	movl	$19, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$37, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1544:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1383 11 is_stmt 1     # susan.c:1383:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1545:
# BB#14:                                # %if.then239
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	%ebx, %r15d
.Ltmp1546:
	#DEBUG_VALUE: susan_corners:n <- R15D
	movq	-168(%rbp), %rbx        # 8-byte Reload
	leaq	(%r12,%rbx), %r14
	movq	%r14, -776(%rbp)        # 8-byte Spill
	movl	$476, %edi              # imm = 0x1DC
.Ltmp1547:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	callq	_KPushCDep
	movl	$94, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	movl	$11, %edi
	callq	_KWork
	.loc	2 1384 14               # susan.c:1384:14
.Ltmp1548:
	movzbl	(%r12,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1549:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$95, %esi
	movl	$96, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1384 12 is_stmt 0     # susan.c:1384:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1550:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1384 9                # susan.c:1384:9
	addl	%r15d, %ebx
.Ltmp1551:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$4, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$6, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$8, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$10, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$12, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$14, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$16, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$18, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$20, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$22, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$23, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$24, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$25, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$26, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$27, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$28, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$29, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$30, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$31, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$32, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$33, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$34, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$35, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$36, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$37, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$38, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$39, 8(%rsp)
	movl	$10, (%rsp)
	movl	$477, %edi              # imm = 0x1DD
	movl	$30, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$39, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1552:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1385 11 is_stmt 1     # susan.c:1385:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1553:
# BB#15:                                # %if.then248
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$477, %edi              # imm = 0x1DD
.Ltmp1554:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movq	-240(%rbp), %rax        # 8-byte Reload
	leaq	(%r12,%rax), %rdi
	movq	%rdi, -784(%rbp)        # 8-byte Spill
	movl	$97, %esi
	movl	$98, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1388 14               # susan.c:1388:14
.Ltmp1555:
	movq	-232(%rbp), %rax        # 8-byte Reload
	movzbl	-4(%r12,%rax), %eax
	movl	%ebx, %r15d
.Ltmp1556:
	#DEBUG_VALUE: susan_corners:n <- R15D
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1557:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$99, %esi
	movl	$100, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1388 12 is_stmt 0     # susan.c:1388:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1558:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1388 9                # susan.c:1388:9
	addl	%r15d, %ebx
.Ltmp1559:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 456(%rsp)
	movl	$99, 448(%rsp)
	movl	$4, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$6, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$8, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$10, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$12, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$14, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$16, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$18, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$20, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$22, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$24, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$25, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$26, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$27, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$28, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$29, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$30, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$31, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$32, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$33, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$34, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$35, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$36, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$37, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$38, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$39, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$40, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$41, 8(%rsp)
	movl	$10, (%rsp)
	movl	$478, %edi              # imm = 0x1DE
	movl	$31, %esi
	movl	$1, %edx
	movl	$23, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$41, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1560:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1389 11 is_stmt 1     # susan.c:1389:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1561:
# BB#16:                                # %if.then261
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	-248(%rbp), %rax        # 8-byte Reload
	movl	%ebx, %r15d
.Ltmp1562:
	#DEBUG_VALUE: susan_corners:n <- R15D
	leaq	(%r12,%rax), %rbx
	movq	%rbx, -792(%rbp)        # 8-byte Spill
	movl	$478, %edi              # imm = 0x1DE
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$101, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1390 14               # susan.c:1390:14
.Ltmp1563:
	movq	-232(%rbp), %rax        # 8-byte Reload
	movzbl	-3(%r12,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1564:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$102, %esi
	movl	$103, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1390 12 is_stmt 0     # susan.c:1390:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1565:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1390 9                # susan.c:1390:9
	addl	%r15d, %ebx
.Ltmp1566:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 472(%rsp)
	movl	$102, 464(%rsp)
	movl	$4, 456(%rsp)
	movl	$99, 448(%rsp)
	movl	$6, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$8, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$10, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$12, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$14, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$16, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$18, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$20, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$22, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$24, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$26, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$27, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$28, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$29, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$30, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$31, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$32, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$33, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$34, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$35, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$36, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$37, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$38, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$39, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$40, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$41, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$42, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$43, 8(%rsp)
	movl	$10, (%rsp)
	movl	$479, %edi              # imm = 0x1DF
	movl	$32, %esi
	movl	$1, %edx
	movl	$25, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1567:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1391 11 is_stmt 1     # susan.c:1391:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1568:
# BB#17:                                # %if.then271
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	-256(%rbp), %rax        # 8-byte Reload
	movl	%ebx, %r15d
.Ltmp1569:
	#DEBUG_VALUE: susan_corners:n <- R15D
	leaq	(%r12,%rax), %rbx
	movq	%rbx, -800(%rbp)        # 8-byte Spill
	movl	$479, %edi              # imm = 0x1DF
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$104, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1392 14               # susan.c:1392:14
.Ltmp1570:
	movq	-232(%rbp), %rax        # 8-byte Reload
	movzbl	-2(%r12,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1571:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$105, %esi
	movl	$106, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1392 12 is_stmt 0     # susan.c:1392:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1572:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1392 9                # susan.c:1392:9
	addl	%r15d, %ebx
.Ltmp1573:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 488(%rsp)
	movl	$105, 480(%rsp)
	movl	$4, 472(%rsp)
	movl	$102, 464(%rsp)
	movl	$6, 456(%rsp)
	movl	$99, 448(%rsp)
	movl	$8, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$10, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$12, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$14, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$16, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$18, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$20, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$22, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$24, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$26, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$28, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$29, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$30, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$31, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$32, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$33, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$34, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$35, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$36, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$37, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$38, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$39, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$40, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$41, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$42, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$43, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$44, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$45, 8(%rsp)
	movl	$10, (%rsp)
	movl	$480, %edi              # imm = 0x1E0
	movl	$33, %esi
	movl	$1, %edx
	movl	$27, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$45, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1574:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1393 11 is_stmt 1     # susan.c:1393:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1575:
# BB#18:                                # %if.then281
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	-264(%rbp), %rax        # 8-byte Reload
	movl	%ebx, %r15d
.Ltmp1576:
	#DEBUG_VALUE: susan_corners:n <- R15D
	leaq	(%r12,%rax), %rbx
	movq	%rbx, -808(%rbp)        # 8-byte Spill
	movl	$480, %edi              # imm = 0x1E0
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$107, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1394 14               # susan.c:1394:14
.Ltmp1577:
	movq	-232(%rbp), %rax        # 8-byte Reload
	movzbl	-1(%r12,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1578:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$108, %esi
	movl	$109, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1394 12 is_stmt 0     # susan.c:1394:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1579:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1394 9                # susan.c:1394:9
	addl	%r15d, %ebx
.Ltmp1580:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 504(%rsp)
	movl	$108, 496(%rsp)
	movl	$4, 488(%rsp)
	movl	$105, 480(%rsp)
	movl	$6, 472(%rsp)
	movl	$102, 464(%rsp)
	movl	$8, 456(%rsp)
	movl	$99, 448(%rsp)
	movl	$10, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$12, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$14, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$16, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$18, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$20, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$22, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$24, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$26, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$28, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$30, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$31, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$32, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$33, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$34, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$35, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$36, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$37, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$38, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$39, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$40, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$41, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$42, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$43, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$44, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$45, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$46, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$47, 8(%rsp)
	movl	$10, (%rsp)
	movl	$481, %edi              # imm = 0x1E1
	movl	$34, %esi
	movl	$1, %edx
	movl	$29, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$47, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1581:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1395 11 is_stmt 1     # susan.c:1395:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1582:
# BB#19:                                # %if.then291
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	%ebx, %r15d
.Ltmp1583:
	#DEBUG_VALUE: susan_corners:n <- R15D
	movq	-232(%rbp), %rbx        # 8-byte Reload
	leaq	(%r12,%rbx), %r14
	movq	%r14, -816(%rbp)        # 8-byte Spill
	movl	$481, %edi              # imm = 0x1E1
.Ltmp1584:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	callq	_KPushCDep
	movl	$110, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	movl	$11, %edi
	callq	_KWork
	.loc	2 1396 14               # susan.c:1396:14
.Ltmp1585:
	movzbl	(%r12,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1586:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$111, %esi
	movl	$112, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1396 12 is_stmt 0     # susan.c:1396:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1587:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1396 9                # susan.c:1396:9
	addl	%r15d, %ebx
.Ltmp1588:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 520(%rsp)
	movl	$111, 512(%rsp)
	movl	$4, 504(%rsp)
	movl	$108, 496(%rsp)
	movl	$6, 488(%rsp)
	movl	$105, 480(%rsp)
	movl	$8, 472(%rsp)
	movl	$102, 464(%rsp)
	movl	$10, 456(%rsp)
	movl	$99, 448(%rsp)
	movl	$12, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$14, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$16, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$18, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$20, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$22, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$24, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$26, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$28, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$30, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$32, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$33, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$34, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$35, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$36, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$37, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$38, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$39, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$40, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$41, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$42, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$43, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$10, (%rsp)
	movl	$482, %edi              # imm = 0x1E2
	movl	$35, %esi
	movl	$1, %edx
	movl	$31, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1589:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1397 11 is_stmt 1     # susan.c:1397:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1590:
# BB#20:                                # %if.then300
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$482, %edi              # imm = 0x1E2
.Ltmp1591:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movl	%ebx, %r15d
.Ltmp1592:
	#DEBUG_VALUE: susan_corners:n <- R15D
	movq	-744(%rbp), %rbx        # 8-byte Reload
	movq	-280(%rbp), %rax        # 8-byte Reload
	leaq	(%rbx,%rax), %rdi
	movq	%rdi, -824(%rbp)        # 8-byte Spill
	movl	$113, %esi
	movl	$114, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1400 14               # susan.c:1400:14
.Ltmp1593:
	movq	-272(%rbp), %rax        # 8-byte Reload
	movzbl	-2(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1594:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$115, %esi
	movl	$116, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1400 12 is_stmt 0     # susan.c:1400:12
	movzbl	(%r14,%rbx), %r12d
.Ltmp1595:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1400 9                # susan.c:1400:9
	addl	%r15d, %r12d
.Ltmp1596:
	#DEBUG_VALUE: susan_corners:n <- R12D
	movl	$2, 536(%rsp)
	movl	$115, 528(%rsp)
	movl	$4, 520(%rsp)
	movl	$111, 512(%rsp)
	movl	$6, 504(%rsp)
	movl	$108, 496(%rsp)
	movl	$8, 488(%rsp)
	movl	$105, 480(%rsp)
	movl	$10, 472(%rsp)
	movl	$102, 464(%rsp)
	movl	$12, 456(%rsp)
	movl	$99, 448(%rsp)
	movl	$14, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$16, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$18, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$20, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$22, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$24, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$26, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$28, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$30, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$32, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$34, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$35, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$36, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$37, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$38, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$39, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$40, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$41, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$42, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$46, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$47, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$48, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$49, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$50, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$51, 8(%rsp)
	movl	$10, (%rsp)
	movl	$483, %edi              # imm = 0x1E3
	movl	$36, %esi
	movl	$1, %edx
	movl	$33, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$51, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1597:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1401 11 is_stmt 1     # susan.c:1401:11
	cmpl	%eax, %r12d
	jge	.LBB16_47
.Ltmp1598:
# BB#21:                                # %if.then313
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- R12D
	movq	-744(%rbp), %rbx        # 8-byte Reload
	movl	%eax, %r15d
.Ltmp1599:
	#DEBUG_VALUE: susan_corners:max_no <- R15D
	movq	-288(%rbp), %rax        # 8-byte Reload
	leaq	(%rbx,%rax), %r14
	movq	%r14, -832(%rbp)        # 8-byte Spill
	movl	$483, %edi              # imm = 0x1E3
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$117, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1402 14               # susan.c:1402:14
.Ltmp1600:
	movq	-272(%rbp), %rax        # 8-byte Reload
	movzbl	-1(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1601:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$118, %esi
	movl	$119, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1402 12 is_stmt 0     # susan.c:1402:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1602:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1402 9                # susan.c:1402:9
	addl	%r12d, %ebx
.Ltmp1603:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 552(%rsp)
	movl	$118, 544(%rsp)
	movl	$4, 536(%rsp)
	movl	$115, 528(%rsp)
	movl	$6, 520(%rsp)
	movl	$111, 512(%rsp)
	movl	$8, 504(%rsp)
	movl	$108, 496(%rsp)
	movl	$10, 488(%rsp)
	movl	$105, 480(%rsp)
	movl	$12, 472(%rsp)
	movl	$102, 464(%rsp)
	movl	$14, 456(%rsp)
	movl	$99, 448(%rsp)
	movl	$16, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$18, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$20, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$22, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$24, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$26, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$28, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$30, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$32, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$34, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$36, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$37, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$38, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$39, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$40, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$41, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$42, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$43, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$44, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$45, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$46, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$47, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$48, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$49, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$50, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$51, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$52, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$53, 8(%rsp)
	movl	$10, (%rsp)
	movl	$484, %edi              # imm = 0x1E4
	movl	$37, %esi
	movl	$1, %edx
	movl	$35, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$53, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	%r15d, %eax
.Ltmp1604:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1403 11 is_stmt 1     # susan.c:1403:11
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1605:
# BB#22:                                # %if.then323
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movq	-744(%rbp), %r14        # 8-byte Reload
	movl	%ebx, %r12d
.Ltmp1606:
	#DEBUG_VALUE: susan_corners:n <- R12D
	movq	-272(%rbp), %rbx        # 8-byte Reload
	leaq	(%r14,%rbx), %r15
	movq	%r15, -840(%rbp)        # 8-byte Spill
	movl	$484, %edi              # imm = 0x1E4
.Ltmp1607:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$120, %esi
	movl	$1, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 1404 14               # susan.c:1404:14
.Ltmp1608:
	movzbl	(%r14,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r14        # 8-byte Reload
.Ltmp1609:
	#DEBUG_VALUE: susan_corners:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$121, %esi
	movl	$122, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1404 12 is_stmt 0     # susan.c:1404:12
	movzbl	(%r14,%rbx), %ebx
.Ltmp1610:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1404 9                # susan.c:1404:9
	addl	%r12d, %ebx
.Ltmp1611:
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$2, 568(%rsp)
	movl	$121, 560(%rsp)
	movl	$4, 552(%rsp)
	movl	$118, 544(%rsp)
	movl	$6, 536(%rsp)
	movl	$115, 528(%rsp)
	movl	$8, 520(%rsp)
	movl	$111, 512(%rsp)
	movl	$10, 504(%rsp)
	movl	$108, 496(%rsp)
	movl	$12, 488(%rsp)
	movl	$105, 480(%rsp)
	movl	$14, 472(%rsp)
	movl	$102, 464(%rsp)
	movl	$16, 456(%rsp)
	movl	$99, 448(%rsp)
	movl	$18, 440(%rsp)
	movl	$95, 432(%rsp)
	movl	$20, 424(%rsp)
	movl	$92, 416(%rsp)
	movl	$22, 408(%rsp)
	movl	$89, 400(%rsp)
	movl	$24, 392(%rsp)
	movl	$86, 384(%rsp)
	movl	$26, 376(%rsp)
	movl	$83, 368(%rsp)
	movl	$28, 360(%rsp)
	movl	$80, 352(%rsp)
	movl	$30, 344(%rsp)
	movl	$77, 336(%rsp)
	movl	$32, 328(%rsp)
	movl	$73, 320(%rsp)
	movl	$34, 312(%rsp)
	movl	$70, 304(%rsp)
	movl	$36, 296(%rsp)
	movl	$67, 288(%rsp)
	movl	$38, 280(%rsp)
	movl	$64, 272(%rsp)
	movl	$39, 264(%rsp)
	movl	$61, 256(%rsp)
	movl	$40, 248(%rsp)
	movl	$58, 240(%rsp)
	movl	$41, 232(%rsp)
	movl	$54, 224(%rsp)
	movl	$42, 216(%rsp)
	movl	$51, 208(%rsp)
	movl	$43, 200(%rsp)
	movl	$48, 192(%rsp)
	movl	$44, 184(%rsp)
	movl	$45, 176(%rsp)
	movl	$45, 168(%rsp)
	movl	$42, 160(%rsp)
	movl	$46, 152(%rsp)
	movl	$39, 144(%rsp)
	movl	$47, 136(%rsp)
	movl	$36, 128(%rsp)
	movl	$48, 120(%rsp)
	movl	$32, 112(%rsp)
	movl	$49, 104(%rsp)
	movl	$29, 96(%rsp)
	movl	$50, 88(%rsp)
	movl	$26, 80(%rsp)
	movl	$51, 72(%rsp)
	movl	$23, 64(%rsp)
	movl	$52, 56(%rsp)
	movl	$20, 48(%rsp)
	movl	$53, 40(%rsp)
	movl	$16, 32(%rsp)
	movl	$54, 24(%rsp)
	movl	$13, 16(%rsp)
	movl	$55, 8(%rsp)
	movl	$10, (%rsp)
	movl	$485, %edi              # imm = 0x1E5
	movl	$38, %esi
	movl	$1, %edx
	movl	$37, %ecx
	movl	$264, %r8d              # imm = 0x108
	movl	$55, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1612:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1406 13 is_stmt 1     # susan.c:1406:13
	cmpl	%eax, %ebx
	jge	.LBB16_47
.Ltmp1613:
# BB#23:                                # %if.then332
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- EBX
	movl	$485, %edi              # imm = 0x1E5
.Ltmp1614:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	callq	_KPushCDep
	movl	$475, %edi              # imm = 0x1DB
	callq	_KWork
.Ltmp1615:
	#DEBUG_VALUE: susan_corners:y <- 0
	#DEBUG_VALUE: susan_corners:x <- 0
	movl	$123, %esi
	movl	$1, %edx
	movq	-304(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	movq	-296(%rbp), %r15        # 8-byte Reload
	movl	%ebx, -844(%rbp)        # 4-byte Spill
.Ltmp1616:
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	movq	-80(%rbp), %r14         # 8-byte Reload
	.loc	2 1410 15               # susan.c:1410:15
.Ltmp1617:
	movzbl	-1(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r12        # 8-byte Reload
.Ltmp1618:
	#DEBUG_VALUE: susan_corners:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$124, %esi
	movl	$125, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1410 27 is_stmt 0     # susan.c:1410:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -304(%rbp)        # 4-byte Spill
	movl	$126, %esi
	movl	$1, %edx
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1411 15 is_stmt 1     # susan.c:1411:15
	movzbl	(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$127, %esi
	movl	$128, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1411 29 is_stmt 0     # susan.c:1411:29
	movzbl	(%r12,%rbx), %r15d
	.loc	2 1411 24               # susan.c:1411:24
	addl	-304(%rbp), %r15d       # 4-byte Folded Reload
	movl	$129, %esi
	movl	$1, %edx
	movq	-312(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1412 15 is_stmt 1     # susan.c:1412:15
	movq	-296(%rbp), %rax        # 8-byte Reload
	movzbl	1(%rax,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$130, %esi
	movl	$131, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1412 25 is_stmt 0     # susan.c:1412:25
	movzbl	(%r12,%rbx), %eax
	.loc	2 1412 27               # susan.c:1412:27
	movq	%rax, -856(%rbp)        # 8-byte Spill
	addl	%eax, %r15d
	movl	%r15d, -848(%rbp)       # 4-byte Spill
	movl	$132, %esi
	movl	$133, %edx
	movl	$1, %ecx
	movq	-320(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-184(%rbp), %r15        # 8-byte Reload
	.loc	2 1415 15 is_stmt 1     # susan.c:1415:15
	movzbl	1(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$134, %esi
	movl	$135, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1415 29 is_stmt 0     # susan.c:1415:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1415 27               # susan.c:1415:27
	addl	%eax, %eax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	movl	$136, %esi
	movl	$1, %edx
	movq	-328(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1416 15 is_stmt 1     # susan.c:1416:15
	movzbl	2(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$137, %esi
	movl	$138, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1416 27 is_stmt 0     # susan.c:1416:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	movl	$139, %esi
	movl	$1, %edx
	movq	-336(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1417 15 is_stmt 1     # susan.c:1417:15
	movzbl	3(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$140, %esi
	movl	$141, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1417 29 is_stmt 0     # susan.c:1417:29
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movl	$142, %esi
	movl	$1, %edx
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1418 15 is_stmt 1     # susan.c:1418:15
	movzbl	4(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$143, %esi
	movl	$144, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1418 27 is_stmt 0     # susan.c:1418:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movl	$145, %esi
	movl	$1, %edx
	movq	-352(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1419 15 is_stmt 1     # susan.c:1419:15
	movzbl	5(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$146, %esi
	movl	$147, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1419 27 is_stmt 0     # susan.c:1419:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	movl	$148, %esi
	movl	$149, %edx
	movl	$1, %ecx
	movq	-360(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-88(%rbp), %r14         # 8-byte Reload
	.loc	2 1422 15 is_stmt 1     # susan.c:1422:15
	movzbl	(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$150, %esi
	movl	$151, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1422 29 is_stmt 0     # susan.c:1422:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -344(%rbp)        # 4-byte Spill
	imull	$-3, %eax, %eax
	movl	%eax, -884(%rbp)        # 4-byte Spill
	movl	$152, %esi
	movl	$1, %edx
	movq	-368(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1423 15 is_stmt 1     # susan.c:1423:15
	movzbl	1(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$153, %esi
	movl	$154, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1423 29 is_stmt 0     # susan.c:1423:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1423 27               # susan.c:1423:27
	movq	%rax, -352(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -368(%rbp)        # 4-byte Spill
	movl	$155, %esi
	movl	$1, %edx
	movq	-376(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1424 15 is_stmt 1     # susan.c:1424:15
	movzbl	2(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$156, %esi
	movl	$157, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1424 27 is_stmt 0     # susan.c:1424:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -376(%rbp)        # 4-byte Spill
	movl	$158, %esi
	movl	$1, %edx
	movq	-384(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1425 15 is_stmt 1     # susan.c:1425:15
	movzbl	3(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$159, %esi
	movl	$160, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1425 27 is_stmt 0     # susan.c:1425:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -360(%rbp)        # 4-byte Spill
	movl	$161, %esi
	movl	$1, %edx
	movq	-392(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1426 15 is_stmt 1     # susan.c:1426:15
	movzbl	4(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$162, %esi
	movl	$163, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1426 27 is_stmt 0     # susan.c:1426:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -312(%rbp)        # 4-byte Spill
	movl	$164, %esi
	movl	$1, %edx
	movq	-400(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1427 15 is_stmt 1     # susan.c:1427:15
	movzbl	5(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$165, %esi
	movl	$166, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1427 29 is_stmt 0     # susan.c:1427:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -384(%rbp)        # 4-byte Spill
	movl	$167, %esi
	movl	$1, %edx
	movq	-408(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1428 15 is_stmt 1     # susan.c:1428:15
	movzbl	6(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$168, %esi
	movl	$169, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1428 27 is_stmt 0     # susan.c:1428:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -392(%rbp)        # 4-byte Spill
	movl	$170, %esi
	movl	$171, %edx
	movl	$1, %ecx
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-56(%rbp), %r14         # 8-byte Reload
	.loc	2 1431 15 is_stmt 1     # susan.c:1431:15
	movzbl	-6(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$172, %esi
	movl	$173, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1431 29 is_stmt 0     # susan.c:1431:29
	movzbl	(%r12,%rbx), %eax
	imull	$-3, %eax, %eax
	movl	%eax, -400(%rbp)        # 4-byte Spill
	movl	$174, %esi
	movl	$1, %edx
	movq	-416(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1432 15 is_stmt 1     # susan.c:1432:15
	movzbl	-5(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$175, %esi
	movl	$176, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1432 29 is_stmt 0     # susan.c:1432:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1432 27               # susan.c:1432:27
	addl	%eax, %eax
	movl	%eax, -408(%rbp)        # 4-byte Spill
	movl	$177, %esi
	movl	$1, %edx
	movq	-424(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1433 15 is_stmt 1     # susan.c:1433:15
	movzbl	-4(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$178, %esi
	movl	$179, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1433 25 is_stmt 0     # susan.c:1433:25
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -416(%rbp)        # 4-byte Spill
	movl	$180, %esi
	movl	$1, %edx
	movq	-448(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1435 15 is_stmt 1     # susan.c:1435:15
	movzbl	-2(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$181, %esi
	movl	$182, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1435 27 is_stmt 0     # susan.c:1435:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -888(%rbp)        # 4-byte Spill
	movl	$183, %esi
	movl	$1, %edx
	movq	-456(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1436 15 is_stmt 1     # susan.c:1436:15
	movzbl	-1(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$184, %esi
	movl	$185, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1436 29 is_stmt 0     # susan.c:1436:29
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -448(%rbp)        # 8-byte Spill
	movl	$186, %esi
	movl	$1, %edx
	movq	-464(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1437 15 is_stmt 1     # susan.c:1437:15
	movzbl	(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$187, %esi
	movl	$188, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1437 27 is_stmt 0     # susan.c:1437:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	movl	$189, %esi
	movl	$190, %edx
	movl	$1, %ecx
	movq	-680(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-168(%rbp), %r14        # 8-byte Reload
	.loc	2 1440 15 is_stmt 1     # susan.c:1440:15
	movzbl	-6(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$191, %esi
	movl	$192, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1440 29 is_stmt 0     # susan.c:1440:29
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	imull	$-3, %eax, %eax
	movl	%eax, -892(%rbp)        # 4-byte Spill
	movl	$193, %esi
	movl	$1, %edx
	movq	-688(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1441 15 is_stmt 1     # susan.c:1441:15
	movzbl	-5(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$194, %esi
	movl	$195, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1441 29 is_stmt 0     # susan.c:1441:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1441 27               # susan.c:1441:27
	movq	%rax, -456(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -688(%rbp)        # 4-byte Spill
	movl	$196, %esi
	movl	$1, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 1442 15 is_stmt 1     # susan.c:1442:15
	movzbl	-4(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$197, %esi
	movl	$198, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1442 27 is_stmt 0     # susan.c:1442:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -896(%rbp)        # 4-byte Spill
	movl	$199, %esi
	movl	$1, %edx
	movq	-696(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1443 15 is_stmt 1     # susan.c:1443:15
	movzbl	-3(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$200, %esi
	movl	$201, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1443 27 is_stmt 0     # susan.c:1443:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -680(%rbp)        # 4-byte Spill
	movl	$202, %esi
	movl	$1, %edx
	movq	-704(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1444 15 is_stmt 1     # susan.c:1444:15
	movzbl	-2(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$203, %esi
	movl	$204, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1444 27 is_stmt 0     # susan.c:1444:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -320(%rbp)        # 4-byte Spill
	movl	$205, %esi
	movl	$1, %edx
	movq	-736(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1445 15 is_stmt 1     # susan.c:1445:15
	movzbl	-1(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$206, %esi
	movl	$207, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1445 29 is_stmt 0     # susan.c:1445:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -704(%rbp)        # 4-byte Spill
	movl	$208, %esi
	movl	$1, %edx
	movq	-776(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1446 15 is_stmt 1     # susan.c:1446:15
	movzbl	(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$209, %esi
	movl	$210, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1446 27 is_stmt 0     # susan.c:1446:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	movl	$211, %esi
	movl	$212, %edx
	movl	$1, %ecx
	movq	-784(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-232(%rbp), %r14        # 8-byte Reload
	.loc	2 1449 15 is_stmt 1     # susan.c:1449:15
	movzbl	-4(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$213, %esi
	movl	$214, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1449 29 is_stmt 0     # susan.c:1449:29
	movzbl	(%r12,%rbx), %eax
	.loc	2 1449 27               # susan.c:1449:27
	movq	%rax, -696(%rbp)        # 8-byte Spill
	leal	(%rax,%rax), %eax
	movl	%eax, -736(%rbp)        # 4-byte Spill
	movl	$215, %esi
	movl	$1, %edx
	movq	-792(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1450 15 is_stmt 1     # susan.c:1450:15
	movzbl	-3(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$216, %esi
	movl	$217, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1450 27 is_stmt 0     # susan.c:1450:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -784(%rbp)        # 4-byte Spill
	movl	$218, %esi
	movl	$1, %edx
	movq	-800(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1451 15 is_stmt 1     # susan.c:1451:15
	movzbl	-2(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$219, %esi
	movl	$220, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1451 29 is_stmt 0     # susan.c:1451:29
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	movl	$221, %esi
	movl	$1, %edx
	movq	-808(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1452 15 is_stmt 1     # susan.c:1452:15
	movzbl	-1(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$222, %esi
	movl	$223, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1452 27 is_stmt 0     # susan.c:1452:27
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -792(%rbp)        # 4-byte Spill
	movl	$224, %esi
	movl	$1, %edx
	movq	-816(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1453 15 is_stmt 1     # susan.c:1453:15
	movzbl	(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$225, %esi
	movl	$226, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1453 27 is_stmt 0     # susan.c:1453:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	movl	$227, %esi
	movl	$228, %edx
	movl	$1, %ecx
	movq	-824(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-744(%rbp), %r15        # 8-byte Reload
	movq	-272(%rbp), %r14        # 8-byte Reload
	.loc	2 1456 15 is_stmt 1     # susan.c:1456:15
	movzbl	-2(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$229, %esi
	movl	$230, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1456 27 is_stmt 0     # susan.c:1456:27
	movzbl	(%r12,%rbx), %eax
	movq	%rax, -800(%rbp)        # 8-byte Spill
	movl	$231, %esi
	movl	$1, %edx
	movq	-832(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1457 15 is_stmt 1     # susan.c:1457:15
	movzbl	-1(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$232, %esi
	movl	$233, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1457 29 is_stmt 0     # susan.c:1457:29
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -808(%rbp)        # 4-byte Spill
	movl	$234, %esi
	movl	$1, %edx
	movq	-840(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad0
	.loc	2 1458 15 is_stmt 1     # susan.c:1458:15
	movzbl	(%r15,%r14), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$235, %esi
	movl	$236, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-856(%rbp), %rax        # 8-byte Reload
	.loc	2 1419 22               # susan.c:1419:22
	subl	-304(%rbp), %eax        # 4-byte Folded Reload
.Ltmp1619:
	#DEBUG_VALUE: susan_corners:x <- EAX
	movq	-864(%rbp), %r15        # 8-byte Reload
	.loc	2 1422 24               # susan.c:1422:24
	subl	%r15d, %eax
.Ltmp1620:
	movq	-872(%rbp), %r10        # 8-byte Reload
	.loc	2 1423 24               # susan.c:1423:24
	subl	%r10d, %eax
	.loc	2 1424 24               # susan.c:1424:24
	movq	-136(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	movq	-880(%rbp), %r14        # 8-byte Reload
	.loc	2 1426 24               # susan.c:1426:24
	leal	(%rax,%r14,2), %eax
	.loc	2 1427 24               # susan.c:1427:24
	addl	-884(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1428 22               # susan.c:1428:22
	subl	-368(%rbp), %eax        # 4-byte Folded Reload
	movl	-376(%rbp), %r13d       # 4-byte Reload
	.loc	2 1431 24               # susan.c:1431:24
	subl	%r13d, %eax
	.loc	2 1432 24               # susan.c:1432:24
	addl	-312(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1433 22               # susan.c:1433:22
	addl	-400(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1435 24               # susan.c:1435:24
	subl	-408(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1436 24               # susan.c:1436:24
	subl	-416(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1437 22               # susan.c:1437:22
	addl	-888(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1440 24               # susan.c:1440:24
	addl	-892(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1441 24               # susan.c:1441:24
	subl	-688(%rbp), %eax        # 4-byte Folded Reload
	movl	-896(%rbp), %r11d       # 4-byte Reload
	.loc	2 1442 24               # susan.c:1442:24
	subl	%r11d, %eax
	.loc	2 1444 24               # susan.c:1444:24
	addl	-320(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1445 24               # susan.c:1445:24
	subl	-736(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1458 25               # susan.c:1458:25
	movzbl	(%r12,%rbx), %esi
.Ltmp1621:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	movl	-392(%rbp), %r9d        # 4-byte Reload
	movq	-464(%rbp), %rdx        # 8-byte Reload
	addl	%r9d, %edx
	addl	-144(%rbp), %edx        # 4-byte Folded Reload
	leal	(%rdx,%rdx,2), %edx
	movl	-784(%rbp), %edi        # 4-byte Reload
	.loc	2 1446 22               # susan.c:1446:22
	subl	%edi, %eax
	movl	-792(%rbp), %r8d        # 4-byte Reload
	.loc	2 1449 24               # susan.c:1449:24
	addl	%r8d, %eax
	.loc	2 1450 24               # susan.c:1450:24
	movq	-328(%rbp), %rbx        # 8-byte Reload
	leal	(%rax,%rbx,2), %eax
	movq	-800(%rbp), %rcx        # 8-byte Reload
	.loc	2 1452 24               # susan.c:1452:24
	subl	%ecx, %eax
	.loc	2 1453 22               # susan.c:1453:22
	addl	%esi, %eax
	.loc	2 1456 24               # susan.c:1456:24
	addl	%edx, %eax
	movl	-384(%rbp), %ebx        # 4-byte Reload
	movq	-448(%rbp), %rdx        # 8-byte Reload
	addl	%ebx, %edx
	movl	-704(%rbp), %r12d       # 4-byte Reload
	addl	%r12d, %edx
	.loc	2 1458 22               # susan.c:1458:22
	leal	(%rax,%rdx,2), %edx
.Ltmp1622:
	#DEBUG_VALUE: susan_corners:x <- EDX
	movl	%edx, -304(%rbp)        # 4-byte Spill
	subl	-848(%rbp), %ecx        # 4-byte Folded Reload
	addl	-808(%rbp), %ecx        # 4-byte Folded Reload
	addl	%esi, %ecx
	movq	%rcx, %rsi
	movq	-776(%rbp), %rax        # 8-byte Reload
	addl	%edi, %eax
	addl	%r8d, %eax
	movq	%rax, %rdi
	.loc	2 1422 31               # susan.c:1422:31
	leal	(%r15,%r10,2), %eax
	.loc	2 1423 31               # susan.c:1423:31
	movq	-336(%rbp), %rcx        # 8-byte Reload
	leal	(%rax,%rcx,2), %eax
	.loc	2 1424 29               # susan.c:1424:29
	movq	-136(%rbp), %rcx        # 8-byte Reload
	leal	(%rax,%rcx,2), %eax
	.loc	2 1425 24               # susan.c:1425:24
	leal	(%rax,%r14,2), %eax
	.loc	2 1426 29               # susan.c:1426:29
	addl	-344(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1427 31               # susan.c:1427:31
	movq	-352(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	.loc	2 1428 29               # susan.c:1428:29
	addl	%r13d, %eax
	.loc	2 1440 31               # susan.c:1440:31
	addl	-360(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1441 31               # susan.c:1441:31
	addl	-312(%rbp), %eax        # 4-byte Folded Reload
	.loc	2 1442 29               # susan.c:1442:29
	addl	%ebx, %eax
	.loc	2 1443 24               # susan.c:1443:24
	addl	%r9d, %eax
	movq	-424(%rbp), %rcx        # 8-byte Reload
	.loc	2 1444 29               # susan.c:1444:29
	subl	%eax, %ecx
.Ltmp1623:
	#DEBUG_VALUE: susan_corners:y <- ECX
	.loc	2 1445 31               # susan.c:1445:31
	movq	-456(%rbp), %rax        # 8-byte Reload
	addl	%eax, %ecx
.Ltmp1624:
	.loc	2 1446 29               # susan.c:1446:29
	addl	%r11d, %ecx
	.loc	2 1449 31               # susan.c:1449:31
	addl	-680(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1450 29               # susan.c:1450:29
	addl	-320(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1451 24               # susan.c:1451:24
	addl	%r12d, %ecx
	.loc	2 1452 29               # susan.c:1452:29
	addl	-144(%rbp), %ecx        # 4-byte Folded Reload
	leal	(%rsi,%rsi,2), %eax
	.loc	2 1453 29               # susan.c:1453:29
	movq	-696(%rbp), %rsi        # 8-byte Reload
	leal	(%rcx,%rsi,2), %ecx
	.loc	2 1456 29               # susan.c:1456:29
	movq	-328(%rbp), %rsi        # 8-byte Reload
	leal	(%rcx,%rsi,2), %ecx
	.loc	2 1457 24               # susan.c:1457:24
	addl	%eax, %ecx
	.loc	2 1458 27               # susan.c:1458:27
	leal	(%rcx,%rdi,2), %eax
.Ltmp1625:
	#DEBUG_VALUE: susan_corners:y <- EAX
	.loc	2 1460 14               # susan.c:1460:14
	movl	%eax, -136(%rbp)        # 4-byte Spill
	movl	%edx, %r15d
.Ltmp1626:
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	imull	%r15d, %r15d
.Ltmp1627:
	#DEBUG_VALUE: susan_corners:xx <- R15D
	.loc	2 1461 14               # susan.c:1461:14
	movl	%eax, %r13d
.Ltmp1628:
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	imull	%r13d, %r13d
.Ltmp1629:
	#DEBUG_VALUE: susan_corners:yy <- R13D
	.loc	2 1462 14               # susan.c:1462:14
	leal	(%r13,%r15), %r14d
.Ltmp1630:
	#DEBUG_VALUE: susan_corners:sq <- R14D
	.loc	2 1463 23               # susan.c:1463:23
	movl	-844(%rbp), %ebx        # 4-byte Reload
	imull	%ebx, %ebx
	.loc	2 1463 22 is_stmt 0     # susan.c:1463:22
	shrl	%ebx
	movl	$7, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$8, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$9, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$10, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$11, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$20, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$19, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$20, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$23, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$24, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$25, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$26, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$25, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$23, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$26, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$29, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$30, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$31, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$30, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$31, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$32, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$34, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$34, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$35, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$36, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$38, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$40, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$42, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$44, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$46, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$48, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$50, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$52, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$54, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$56, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$58, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$60, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$62, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$64, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$66, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$68, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$70, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$72, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$74, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$75, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$76, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$77, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$78, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$79, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$80, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$81, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$82, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$83, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$84, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$85, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$86, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$87, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$88, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$89, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$90, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$91, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$91, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$73, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$12, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$194, (%rsp)
	movl	$411, %edi              # imm = 0x19B
	movl	$74, %esi
	movl	$187, %edx
	movl	$19, %ecx
	movl	$191, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1631:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	.loc	2 1463 16               # susan.c:1463:16
	cmpl	%ebx, %r14d
	jle	.LBB16_47
.Ltmp1632:
# BB#24:                                # %if.then689
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:xx <- R15D
	#DEBUG_VALUE: susan_corners:yy <- R13D
	movl	$411, %edi              # imm = 0x19B
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$8, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$9, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$10, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$11, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$12, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$21, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$20, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$21, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$24, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$25, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$26, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$27, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$26, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$24, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$27, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$30, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$31, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$32, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$31, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$32, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$33, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$35, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$35, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$36, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$37, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$39, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$41, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$43, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$45, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$47, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$49, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$51, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$53, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$55, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$57, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$59, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$61, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$63, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$65, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$67, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$69, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$71, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$73, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$75, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$76, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$77, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$78, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$79, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$80, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$81, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$82, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$83, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$84, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$85, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$86, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$87, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$88, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$89, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$90, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$91, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$92, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$92, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$74, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$14, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$15, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$194, (%rsp)
	movl	$387, %edi              # imm = 0x183
	movl	$74, %esi
	movl	$187, %edx
	movl	$20, %ecx
	movl	$191, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$387, %edi              # imm = 0x183
	callq	_KPushCDep
	.loc	2 1464 16 is_stmt 1     # susan.c:1464:16
.Ltmp1633:
	cmpl	%r15d, %r13d
	movq	-672(%rbp), %r13        # 8-byte Reload
.Ltmp1634:
	jae	.LBB16_35
.Ltmp1635:
# BB#25:                                # %if.then692
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	movl	$36, %edi
	callq	_KWork
	.loc	2 1465 22               # susan.c:1465:22
.Ltmp1636:
	movl	-136(%rbp), %eax        # 4-byte Reload
	cvtsi2ssl	%eax, %xmm1
	movl	-304(%rbp), %ecx        # 4-byte Reload
.Ltmp1637:
	#DEBUG_VALUE: susan_corners:x <- ECX
	.loc	2 1465 38 is_stmt 0     # susan.c:1465:38
	movl	%ecx, %eax
	negl	%eax
	cmovll	%ecx, %eax
	.loc	2 1465 31 discriminator 4 # susan.c:1465:31
.Ltmp1638:
	cvtsi2ssl	%eax, %xmm0
.Ltmp1639:
	.loc	2 1465 22               # susan.c:1465:22
	divss	%xmm0, %xmm1
.Ltmp1640:
	#DEBUG_VALUE: susan_corners:divide <- XMM1
	.loc	2 1466 18 is_stmt 1     # susan.c:1466:18
	movss	%xmm1, -144(%rbp)       # 4-byte Spill
	cltd
	idivl	%ecx
.Ltmp1641:
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
                                        # kill: EAX<def> EAX<kill> RAX<def>
	.loc	2 1467 29 discriminator 1 # susan.c:1467:29
	movq	%rax, -312(%rbp)        # 8-byte Spill
	xorps	%xmm0, %xmm0
	cvtss2sd	%xmm1, %xmm0
.Ltmp1642:
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$31, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$32, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$33, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$34, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$35, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$44, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$43, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$44, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$47, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$48, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$49, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$50, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$49, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$47, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$50, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$53, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$54, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$55, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$54, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$55, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$56, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$58, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$58, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$59, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$60, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$62, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$64, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$66, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$68, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$70, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$72, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$74, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$76, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$78, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$80, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$82, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$84, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$86, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$88, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$90, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$92, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$94, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$96, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$98, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$99, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$100, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$101, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$102, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$103, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$104, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$105, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$106, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$107, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$108, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$109, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$110, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$111, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$112, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$113, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$114, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$115, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$115, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$97, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$36, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$37, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$38, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$37, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$38, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$39, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$40, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$41, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$42, 8(%rsp)
	movl	$194, (%rsp)
	movl	$388, %edi              # imm = 0x184
	movl	$74, %esi
	movl	$187, %edx
	movl	$43, %ecx
	movl	$191, %r8d
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$388, %edi              # imm = 0x184
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	xorps	%xmm0, %xmm0
	.loc	2 1467 29 is_stmt 0     # susan.c:1467:29
	ucomiss	-144(%rbp), %xmm0       # 4-byte Folded Reload
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	jbe	.LBB16_27
# BB#26:                                # %cond.true709
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	.loc	2 1467 29 discriminator 1 # susan.c:1467:29
	movsd	-320(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_1(%rip), %xmm0
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$33, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$34, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$35, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$36, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$37, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$46, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$45, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$46, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$49, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$50, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$51, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$52, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$51, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$49, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$52, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$55, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$56, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$57, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$56, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$57, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$58, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$60, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$60, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$61, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$62, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$64, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$66, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$68, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$70, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$72, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$74, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$76, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$78, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$80, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$82, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$84, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$86, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$88, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$90, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$92, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$94, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$96, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$98, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$100, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$101, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$102, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$103, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$104, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$105, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$106, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$107, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$108, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$109, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$110, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$111, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$112, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$113, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$114, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$115, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$116, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$117, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$117, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$99, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$38, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$39, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$40, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$39, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$40, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$41, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$42, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$43, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$44, 8(%rsp)
	movl	$194, (%rsp)
	movl	$385, %r15d             # imm = 0x181
	movl	$385, %edi              # imm = 0x181
	jmp	.LBB16_28
.Ltmp1643:
.LBB16_35:                              # %if.else
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	movl	$40, %edi
	callq	_KWork
	.loc	2 1471 22 is_stmt 1     # susan.c:1471:22
.Ltmp1644:
	movl	-304(%rbp), %eax        # 4-byte Reload
	cvtsi2ssl	%eax, %xmm1
	movl	-136(%rbp), %ecx        # 4-byte Reload
.Ltmp1645:
	#DEBUG_VALUE: susan_corners:y <- ECX
	.loc	2 1471 38 is_stmt 0     # susan.c:1471:38
	movl	%ecx, %eax
	negl	%eax
	cmovll	%ecx, %eax
	.loc	2 1471 31 discriminator 4 # susan.c:1471:31
.Ltmp1646:
	cvtsi2ssl	%eax, %xmm0
.Ltmp1647:
	.loc	2 1471 22               # susan.c:1471:22
	divss	%xmm0, %xmm1
.Ltmp1648:
	#DEBUG_VALUE: susan_corners:divide <- XMM1
	.loc	2 1472 18 is_stmt 1     # susan.c:1472:18
	movss	%xmm1, -144(%rbp)       # 4-byte Spill
	cltd
	idivl	%ecx
.Ltmp1649:
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	movl	%eax, %r14d
	.loc	2 1473 42 discriminator 1 # susan.c:1473:42
	xorps	%xmm0, %xmm0
	cvtss2sd	%xmm1, %xmm0
.Ltmp1650:
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$31, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$32, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$33, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$34, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$35, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$44, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$43, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$44, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$47, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$48, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$49, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$50, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$49, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$47, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$50, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$53, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$54, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$55, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$54, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$55, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$56, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$58, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$58, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$59, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$60, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$62, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$64, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$66, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$68, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$70, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$72, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$74, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$76, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$78, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$80, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$82, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$84, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$86, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$88, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$90, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$92, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$94, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$96, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$98, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$99, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$100, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$101, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$102, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$103, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$104, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$105, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$106, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$107, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$108, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$109, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$110, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$111, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$112, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$113, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$114, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$115, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$115, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$97, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$36, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$37, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$38, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$37, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$38, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$39, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$40, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$41, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$42, 8(%rsp)
	movl	$194, (%rsp)
	movl	$400, %edi              # imm = 0x190
	movl	$74, %esi
	movl	$187, %edx
	movl	$43, %ecx
	movl	$191, %r8d
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$400, %edi              # imm = 0x190
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	xorps	%xmm0, %xmm0
	.loc	2 1473 42 is_stmt 0     # susan.c:1473:42
	ucomiss	-144(%rbp), %xmm0       # 4-byte Folded Reload
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	jbe	.LBB16_37
# BB#36:                                # %cond.true809
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	.loc	2 1473 42 discriminator 1 # susan.c:1473:42
	movsd	-312(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_1(%rip), %xmm0
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$33, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$34, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$35, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$36, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$37, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$46, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$45, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$46, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$49, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$50, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$51, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$52, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$51, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$49, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$52, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$55, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$56, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$57, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$56, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$57, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$58, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$60, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$60, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$61, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$62, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$64, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$66, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$68, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$70, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$72, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$74, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$76, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$78, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$80, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$82, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$84, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$86, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$88, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$90, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$92, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$94, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$96, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$98, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$100, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$101, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$102, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$103, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$104, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$105, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$106, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$107, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$108, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$109, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$110, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$111, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$112, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$113, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$114, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$115, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$116, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$117, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$117, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$99, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$38, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$39, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$40, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$39, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$40, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$41, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$42, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$43, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$44, 8(%rsp)
	movl	$194, (%rsp)
	movl	$398, %r15d             # imm = 0x18E
	movl	$398, %edi              # imm = 0x18E
	jmp	.LBB16_38
.Ltmp1651:
.LBB16_27:                              # %cond.false713
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	.loc	2 1467 29 is_stmt 1 discriminator 2 # susan.c:1467:29
	movsd	-320(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_0(%rip), %xmm0
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$33, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$34, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$35, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$36, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$37, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$46, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$45, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$46, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$49, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$50, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$51, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$52, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$51, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$49, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$52, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$55, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$56, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$57, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$56, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$57, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$58, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$60, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$60, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$61, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$62, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$64, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$66, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$68, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$70, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$72, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$74, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$76, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$78, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$80, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$82, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$84, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$86, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$88, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$90, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$92, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$94, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$96, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$98, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$100, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$101, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$102, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$103, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$104, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$105, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$106, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$107, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$108, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$109, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$110, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$111, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$112, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$113, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$114, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$115, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$116, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$117, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$117, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$99, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$38, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$39, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$40, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$39, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$40, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$41, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$42, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$43, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$44, 8(%rsp)
	movl	$194, (%rsp)
	movl	$386, %r15d             # imm = 0x182
	movl	$386, %edi              # imm = 0x182
.LBB16_28:                              # %cond.end717
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$74, %esi
	movl	$187, %edx
	movl	$45, %ecx
	movl	$191, %r8d
	movl	$45, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movq	-128(%rbp), %rbx        # 8-byte Reload
	movq	-48(%rbp), %r14         # 8-byte Reload
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	movq	%rbx, -128(%rbp)        # 8-byte Spill
	movl	$387, %edi              # imm = 0x183
	callq	_KPushCDep
	movl	$384, %edi              # imm = 0x180
	movl	$387, %edx              # imm = 0x183
	movl	$388, %ecx              # imm = 0x184
	movl	%r15d, %esi
	callq	_KPhi2To1
	movl	$26, %edi
	callq	_KWork
	.loc	2 1467 29 is_stmt 0 discriminator 1 # susan.c:1467:29
	cvttsd2si	-320(%rbp), %eax # 8-byte Folded Reload
	.loc	2 1467 23               # susan.c:1467:23
	addl	%r13d, %eax
	movq	-752(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	movq	-312(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	addl	%ebx, %eax
	movslq	%eax, %r15
	movq	-712(%rbp), %rbx        # 8-byte Reload
.Ltmp1652:
	#DEBUG_VALUE: susan_corners:in <- RBX
	leaq	(%rbx,%r15), %rdi
	movl	$237, %esi
	movl	$238, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1467 20               # susan.c:1467:20
	movzbl	(%rbx,%r15), %eax
	movq	%rbx, %r15
.Ltmp1653:
	#DEBUG_VALUE: susan_corners:in <- R15
	movq	%r14, %rbx
	subq	%rax, %rbx
	movq	-120(%rbp), %r12        # 8-byte Reload
.Ltmp1654:
	#DEBUG_VALUE: susan_corners:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$239, %esi
	movl	$240, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1467 18               # susan.c:1467:18
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -328(%rbp)        # 4-byte Spill
	.loc	2 1468 29 is_stmt 1     # susan.c:1468:29
	movss	-144(%rbp), %xmm0       # 4-byte Reload
	addss	%xmm0, %xmm0
	.loc	2 1468 29 is_stmt 0 discriminator 1 # susan.c:1468:29
	movss	%xmm0, -336(%rbp)       # 4-byte Spill
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$36, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$37, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$38, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$39, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$40, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$49, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$48, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$49, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$52, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$53, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$54, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$55, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$54, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$52, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$55, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$58, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$59, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$60, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$59, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$60, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$61, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$63, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$63, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$64, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$65, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$67, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$69, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$71, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$73, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$75, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$77, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$79, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$81, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$83, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$85, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$87, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$89, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$91, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$93, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$95, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$97, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$99, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$101, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$103, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$104, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$105, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$106, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$107, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$108, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$109, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$110, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$111, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$112, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$113, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$114, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$115, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$116, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$117, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$118, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$119, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$120, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$120, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$102, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$41, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$42, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$43, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$42, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$43, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$44, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$45, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$46, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$47, 8(%rsp)
	movl	$194, (%rsp)
	movl	$392, %edi              # imm = 0x188
	movl	$74, %esi
	movl	$187, %edx
	movl	$48, %ecx
	movl	$191, %r8d
	movl	$48, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$392, %edi              # imm = 0x188
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	xorps	%xmm0, %xmm0
	.loc	2 1468 29               # susan.c:1468:29
	ucomiss	-336(%rbp), %xmm0       # 4-byte Folded Reload
	jbe	.LBB16_30
.Ltmp1655:
# BB#29:                                # %cond.true733
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	.loc	2 1468 29 discriminator 1 # susan.c:1468:29
	movsd	-320(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_1(%rip), %xmm0
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$38, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$39, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$40, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$41, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$42, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$51, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$50, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$51, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$54, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$55, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$56, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$57, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$56, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$54, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$57, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$60, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$61, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$62, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$61, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$62, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$63, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$65, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$65, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$66, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$67, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$69, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$71, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$73, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$75, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$77, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$79, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$81, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$83, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$85, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$87, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$89, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$91, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$93, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$95, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$97, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$99, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$101, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$103, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$105, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$106, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$107, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$108, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$109, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$110, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$111, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$112, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$113, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$114, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$115, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$116, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$117, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$118, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$119, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$120, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$121, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$122, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$122, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$104, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$194, (%rsp)
	movl	$390, %ebx              # imm = 0x186
	movl	$390, %edi              # imm = 0x186
	jmp	.LBB16_31
.Ltmp1656:
.LBB16_37:                              # %cond.false813
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	.loc	2 1473 42 is_stmt 1 discriminator 2 # susan.c:1473:42
	movsd	-312(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_0(%rip), %xmm0
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$33, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$34, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$35, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$36, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$37, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$46, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$45, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$46, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$49, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$50, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$51, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$52, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$51, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$49, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$52, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$55, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$56, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$57, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$56, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$57, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$58, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$60, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$60, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$61, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$62, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$64, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$66, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$68, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$70, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$72, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$74, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$76, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$78, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$80, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$82, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$84, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$86, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$88, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$90, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$92, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$94, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$96, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$98, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$100, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$101, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$102, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$103, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$104, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$105, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$106, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$107, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$108, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$109, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$110, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$111, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$112, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$113, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$114, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$115, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$116, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$117, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$117, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$99, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$38, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$39, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$40, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$39, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$40, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$41, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$42, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$43, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$44, 8(%rsp)
	movl	$194, (%rsp)
	movl	$399, %r15d             # imm = 0x18F
	movl	$399, %edi              # imm = 0x18F
.LBB16_38:                              # %cond.end817
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$74, %esi
	movl	$187, %edx
	movl	$45, %ecx
	movl	$191, %r8d
	movl	$45, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movq	-128(%rbp), %rbx        # 8-byte Reload
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	movq	%rbx, -128(%rbp)        # 8-byte Spill
	movl	$387, %edi              # imm = 0x183
	callq	_KPushCDep
	movl	$397, %edi              # imm = 0x18D
	movl	$387, %edx              # imm = 0x183
	movl	$400, %ecx              # imm = 0x190
	movl	%r15d, %esi
	callq	_KPhi2To1
	movl	$28, %edi
	callq	_KWork
	.loc	2 1473 42 is_stmt 0 discriminator 1 # susan.c:1473:42
	cvttsd2si	-312(%rbp), %eax # 8-byte Folded Reload
	.loc	2 1473 23               # susan.c:1473:23
	movl	%r14d, %ecx
	addl	%r13d, %ecx
	movq	-752(%rbp), %rdx        # 8-byte Reload
	imull	%edx, %ecx
	addl	%eax, %ecx
	addl	%ebx, %ecx
	movslq	%ecx, %r15
	movq	-712(%rbp), %rbx        # 8-byte Reload
.Ltmp1657:
	#DEBUG_VALUE: susan_corners:in <- RBX
	leaq	(%rbx,%r15), %rdi
	movl	$249, %esi
	movl	$250, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1473 20               # susan.c:1473:20
	movzbl	(%rbx,%r15), %eax
	movq	%rbx, %r15
.Ltmp1658:
	#DEBUG_VALUE: susan_corners:in <- R15
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-120(%rbp), %r12        # 8-byte Reload
.Ltmp1659:
	#DEBUG_VALUE: susan_corners:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$251, %esi
	movl	$252, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1473 18               # susan.c:1473:18
	movzbl	(%r12,%rbx), %eax
	movl	%eax, -320(%rbp)        # 4-byte Spill
	.loc	2 1474 44 is_stmt 1     # susan.c:1474:44
	movss	-144(%rbp), %xmm0       # 4-byte Reload
	addss	%xmm0, %xmm0
	.loc	2 1474 44 is_stmt 0 discriminator 1 # susan.c:1474:44
	movss	%xmm0, -328(%rbp)       # 4-byte Spill
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$36, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$37, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$38, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$39, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$40, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$49, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$48, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$49, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$52, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$53, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$54, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$55, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$54, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$52, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$55, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$58, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$59, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$60, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$59, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$60, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$61, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$63, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$63, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$64, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$65, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$67, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$69, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$71, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$73, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$75, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$77, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$79, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$81, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$83, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$85, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$87, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$89, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$91, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$93, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$95, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$97, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$99, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$101, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$103, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$104, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$105, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$106, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$107, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$108, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$109, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$110, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$111, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$112, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$113, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$114, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$115, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$116, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$117, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$118, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$119, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$120, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$120, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$102, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$41, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$42, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$43, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$42, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$43, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$44, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$45, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$46, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$47, 8(%rsp)
	movl	$194, (%rsp)
	movl	$404, %edi              # imm = 0x194
	movl	$74, %esi
	movl	$187, %edx
	movl	$48, %ecx
	movl	$191, %r8d
	movl	$48, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$404, %edi              # imm = 0x194
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	xorps	%xmm0, %xmm0
	.loc	2 1474 44               # susan.c:1474:44
	ucomiss	-328(%rbp), %xmm0       # 4-byte Folded Reload
	jbe	.LBB16_40
.Ltmp1660:
# BB#39:                                # %cond.true834
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	.loc	2 1474 44 discriminator 1 # susan.c:1474:44
	movsd	-312(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_1(%rip), %xmm0
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$38, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$39, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$40, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$41, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$42, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$51, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$50, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$51, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$54, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$55, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$56, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$57, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$56, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$54, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$57, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$60, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$61, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$62, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$61, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$62, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$63, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$65, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$65, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$66, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$67, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$69, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$71, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$73, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$75, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$77, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$79, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$81, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$83, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$85, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$87, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$89, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$91, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$93, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$95, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$97, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$99, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$101, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$103, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$105, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$106, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$107, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$108, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$109, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$110, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$111, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$112, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$113, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$114, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$115, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$116, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$117, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$118, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$119, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$120, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$121, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$122, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$122, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$104, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$194, (%rsp)
	movl	$402, %ebx              # imm = 0x192
	movl	$402, %edi              # imm = 0x192
	jmp	.LBB16_41
.Ltmp1661:
.LBB16_30:                              # %cond.false738
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	.loc	2 1468 29 is_stmt 1 discriminator 2 # susan.c:1468:29
	movsd	-320(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_0(%rip), %xmm0
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$38, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$39, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$40, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$41, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$42, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$51, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$50, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$51, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$54, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$55, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$56, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$57, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$56, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$54, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$57, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$60, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$61, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$62, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$61, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$62, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$63, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$65, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$65, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$66, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$67, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$69, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$71, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$73, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$75, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$77, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$79, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$81, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$83, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$85, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$87, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$89, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$91, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$93, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$95, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$97, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$99, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$101, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$103, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$105, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$106, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$107, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$108, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$109, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$110, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$111, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$112, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$113, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$114, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$115, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$116, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$117, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$118, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$119, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$120, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$121, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$122, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$122, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$104, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$194, (%rsp)
	movl	$391, %ebx              # imm = 0x187
	movl	$391, %edi              # imm = 0x187
.Ltmp1662:
.LBB16_31:                              # %cond.end743
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$74, %esi
	movl	$187, %edx
	movl	$50, %ecx
	movl	$191, %r8d
	movl	$50, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp1663:
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	movl	$387, %edi              # imm = 0x183
	callq	_KPushCDep
	movl	$389, %edi              # imm = 0x185
	movl	$387, %edx              # imm = 0x183
	movl	$392, %ecx              # imm = 0x188
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$29, %edi
	callq	_KWork
	.loc	2 1468 29 is_stmt 0 discriminator 1 # susan.c:1468:29
	cvttsd2si	-320(%rbp), %eax # 8-byte Folded Reload
	.loc	2 1468 23               # susan.c:1468:23
	addl	%r13d, %eax
	movq	%r13, %r14
	movq	-752(%rbp), %rcx        # 8-byte Reload
	imull	%ecx, %eax
	movq	-312(%rbp), %rcx        # 8-byte Reload
	leal	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$241, %esi
	movl	$242, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1468 20               # susan.c:1468:20
	movzbl	(%r15,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$243, %esi
	movl	$244, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1468 18               # susan.c:1468:18
	movzbl	(%r12,%rbx), %r13d
	.loc	2 1467 18 is_stmt 1     # susan.c:1467:18
	addl	-328(%rbp), %r13d       # 4-byte Folded Reload
	movss	-144(%rbp), %xmm0       # 4-byte Reload
.Ltmp1664:
	#DEBUG_VALUE: susan_corners:divide <- XMM0
	.loc	2 1469 29               # susan.c:1469:29
	mulss	.LCPI16_2(%rip), %xmm0
.Ltmp1665:
	.loc	2 1469 29 is_stmt 0 discriminator 1 # susan.c:1469:29
	movss	%xmm0, -144(%rbp)       # 4-byte Spill
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$36, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$37, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$38, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$39, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$40, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$49, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$48, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$49, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$52, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$53, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$54, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$55, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$54, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$52, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$55, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$58, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$59, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$60, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$59, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$60, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$61, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$63, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$63, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$64, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$65, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$67, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$69, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$71, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$73, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$75, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$77, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$79, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$81, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$83, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$85, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$87, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$89, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$91, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$93, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$95, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$97, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$99, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$101, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$103, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$104, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$105, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$106, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$107, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$108, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$109, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$110, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$111, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$112, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$113, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$114, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$115, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$116, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$117, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$118, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$119, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$120, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$120, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$102, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$41, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$42, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$43, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$42, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$43, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$44, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$45, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$46, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$47, 8(%rsp)
	movl	$194, (%rsp)
	movl	$396, %edi              # imm = 0x18C
	movl	$74, %esi
	movl	$187, %edx
	movl	$48, %ecx
	movl	$191, %r8d
	movl	$48, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$396, %edi              # imm = 0x18C
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	xorps	%xmm0, %xmm0
	.loc	2 1469 29               # susan.c:1469:29
	ucomiss	-144(%rbp), %xmm0       # 4-byte Folded Reload
	jbe	.LBB16_33
.Ltmp1666:
# BB#32:                                # %cond.true761
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	.loc	2 1469 29 discriminator 1 # susan.c:1469:29
	movsd	-320(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_1(%rip), %xmm0
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$38, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$39, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$40, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$41, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$42, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$51, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$50, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$51, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$54, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$55, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$56, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$57, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$56, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$54, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$57, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$60, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$61, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$62, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$61, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$62, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$63, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$65, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$65, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$66, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$67, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$69, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$71, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$73, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$75, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$77, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$79, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$81, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$83, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$85, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$87, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$89, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$91, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$93, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$95, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$97, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$99, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$101, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$103, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$105, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$106, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$107, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$108, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$109, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$110, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$111, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$112, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$113, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$114, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$115, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$116, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$117, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$118, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$119, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$120, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$121, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$122, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$122, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$104, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$194, (%rsp)
	movl	$394, %ebx              # imm = 0x18A
	movl	$394, %edi              # imm = 0x18A
	jmp	.LBB16_34
.Ltmp1667:
.LBB16_40:                              # %cond.false839
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	.loc	2 1474 44 is_stmt 1 discriminator 2 # susan.c:1474:44
	movsd	-312(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_0(%rip), %xmm0
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$38, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$39, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$40, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$41, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$42, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$51, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$50, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$51, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$54, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$55, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$56, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$57, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$56, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$54, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$57, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$60, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$61, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$62, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$61, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$62, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$63, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$65, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$65, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$66, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$67, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$69, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$71, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$73, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$75, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$77, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$79, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$81, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$83, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$85, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$87, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$89, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$91, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$93, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$95, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$97, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$99, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$101, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$103, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$105, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$106, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$107, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$108, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$109, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$110, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$111, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$112, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$113, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$114, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$115, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$116, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$117, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$118, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$119, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$120, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$121, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$122, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$122, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$104, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$194, (%rsp)
	movl	$403, %ebx              # imm = 0x193
	movl	$403, %edi              # imm = 0x193
.Ltmp1668:
.LBB16_41:                              # %cond.end844
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$74, %esi
	movl	$187, %edx
	movl	$50, %ecx
	movl	$191, %r8d
	movl	$50, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp1669:
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	#DEBUG_VALUE: susan_corners:divide <- [RBP+-144]
	movl	$387, %edi              # imm = 0x183
	callq	_KPushCDep
	movl	$401, %edi              # imm = 0x191
	movl	$387, %edx              # imm = 0x183
	movl	$404, %ecx              # imm = 0x194
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$29, %edi
	callq	_KWork
	.loc	2 1474 44 is_stmt 0 discriminator 1 # susan.c:1474:44
	cvttsd2si	-312(%rbp), %eax # 8-byte Folded Reload
	.loc	2 1474 23               # susan.c:1474:23
	leal	(%r13,%r14,2), %ecx
	movq	-752(%rbp), %rdx        # 8-byte Reload
	imull	%edx, %ecx
	addl	%eax, %ecx
	movq	-128(%rbp), %rax        # 8-byte Reload
	addl	%eax, %ecx
	movslq	%ecx, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$253, %esi
	movl	$254, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1474 20               # susan.c:1474:20
	movzbl	(%r15,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$255, %esi
	movl	$256, %edx              # imm = 0x100
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1474 18               # susan.c:1474:18
	movzbl	(%r12,%rbx), %r13d
	.loc	2 1473 18 is_stmt 1     # susan.c:1473:18
	addl	-320(%rbp), %r13d       # 4-byte Folded Reload
	movss	-144(%rbp), %xmm0       # 4-byte Reload
.Ltmp1670:
	#DEBUG_VALUE: susan_corners:divide <- XMM0
	.loc	2 1475 44               # susan.c:1475:44
	mulss	.LCPI16_2(%rip), %xmm0
.Ltmp1671:
	.loc	2 1475 44 is_stmt 0 discriminator 1 # susan.c:1475:44
	movss	%xmm0, -144(%rbp)       # 4-byte Spill
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$36, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$37, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$38, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$39, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$40, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$49, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$48, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$49, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$52, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$53, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$54, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$55, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$54, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$52, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$55, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$58, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$59, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$60, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$59, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$60, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$61, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$63, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$63, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$64, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$65, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$67, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$69, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$71, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$73, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$75, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$77, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$79, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$81, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$83, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$85, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$87, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$89, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$91, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$93, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$95, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$97, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$99, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$101, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$103, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$104, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$105, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$106, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$107, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$108, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$109, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$110, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$111, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$112, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$113, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$114, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$115, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$116, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$117, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$118, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$119, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$120, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$120, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$102, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$41, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$42, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$43, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$42, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$43, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$44, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$45, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$46, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$47, 8(%rsp)
	movl	$194, (%rsp)
	movl	$408, %edi              # imm = 0x198
	movl	$74, %esi
	movl	$187, %edx
	movl	$48, %ecx
	movl	$191, %r8d
	movl	$48, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	$408, %edi              # imm = 0x198
	callq	_KPushCDep
	movl	$2, %edi
	callq	_KWork
	xorps	%xmm0, %xmm0
	.loc	2 1475 44               # susan.c:1475:44
	ucomiss	-144(%rbp), %xmm0       # 4-byte Folded Reload
	jbe	.LBB16_43
.Ltmp1672:
# BB#42:                                # %cond.true862
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	.loc	2 1475 44 discriminator 1 # susan.c:1475:44
	movsd	-312(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_1(%rip), %xmm0
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$38, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$39, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$40, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$41, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$42, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$51, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$50, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$51, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$54, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$55, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$56, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$57, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$56, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$54, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$57, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$60, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$61, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$62, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$61, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$62, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$63, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$65, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$65, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$66, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$67, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$69, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$71, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$73, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$75, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$77, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$79, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$81, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$83, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$85, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$87, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$89, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$91, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$93, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$95, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$97, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$99, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$101, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$103, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$105, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$106, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$107, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$108, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$109, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$110, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$111, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$112, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$113, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$114, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$115, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$116, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$117, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$118, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$119, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$120, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$121, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$122, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$122, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$104, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$194, (%rsp)
	movl	$406, %ebx              # imm = 0x196
	movl	$406, %edi              # imm = 0x196
	jmp	.LBB16_44
.Ltmp1673:
.LBB16_33:                              # %cond.false766
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	.loc	2 1469 29 is_stmt 1 discriminator 2 # susan.c:1469:29
	movsd	-320(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_0(%rip), %xmm0
	movsd	%xmm0, -320(%rbp)       # 8-byte Spill
	movl	$38, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$39, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$40, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$41, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$42, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$51, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$50, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$51, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$54, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$55, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$56, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$57, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$56, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$54, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$57, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$60, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$61, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$62, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$61, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$62, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$63, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$65, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$65, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$66, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$67, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$69, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$71, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$73, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$75, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$77, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$79, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$81, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$83, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$85, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$87, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$89, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$91, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$93, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$95, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$97, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$99, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$101, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$103, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$105, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$106, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$107, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$108, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$109, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$110, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$111, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$112, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$113, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$114, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$115, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$116, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$117, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$118, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$119, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$120, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$121, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$122, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$122, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$104, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$194, (%rsp)
	movl	$395, %ebx              # imm = 0x18B
	movl	$395, %edi              # imm = 0x18B
.Ltmp1674:
.LBB16_34:                              # %cond.end771
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$74, %esi
	movl	$187, %edx
	movl	$50, %ecx
	movl	$191, %r8d
	movl	$50, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp1675:
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	movl	$387, %edi              # imm = 0x183
	callq	_KPushCDep
	movl	$393, %edi              # imm = 0x189
	movl	$387, %edx              # imm = 0x183
	movl	$396, %ecx              # imm = 0x18C
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$17, %edi
	callq	_KWork
	.loc	2 1469 29 is_stmt 0 discriminator 1 # susan.c:1469:29
	cvttsd2si	-320(%rbp), %eax # 8-byte Folded Reload
	.loc	2 1469 54               # susan.c:1469:54
	movq	-312(%rbp), %rcx        # 8-byte Reload
	leal	(%rcx,%rcx,2), %ecx
	.loc	2 1469 23               # susan.c:1469:23
	addl	%r14d, %eax
	movq	-752(%rbp), %rdx        # 8-byte Reload
	imull	%edx, %eax
	addl	%ecx, %eax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$245, %esi
	movl	$246, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1469 20               # susan.c:1469:20
	movzbl	(%r15,%rbx), %eax
.Ltmp1676:
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$247, %esi
	movl	$248, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1469 18               # susan.c:1469:18
	movzbl	(%r12,%rbx), %eax
.Ltmp1677:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1467 18 is_stmt 1     # susan.c:1467:18
	addl	%eax, %r13d
.Ltmp1678:
	#DEBUG_VALUE: susan_corners:sq <- R13D
	movl	$1, 1192(%rsp)
	movl	$247, 1184(%rsp)
	movl	$2, 1176(%rsp)
	movl	$243, 1168(%rsp)
	movl	$2, 1160(%rsp)
	movl	$239, 1152(%rsp)
	movl	$10, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$11, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$12, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$13, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$14, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$23, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$22, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$23, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$26, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$27, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$28, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$29, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$28, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$26, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$29, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$32, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$33, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$34, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$33, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$34, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$35, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$37, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$37, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$38, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$39, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$41, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$43, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$45, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$47, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$49, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$51, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$53, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$55, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$57, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$59, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$61, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$63, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$65, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$67, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$69, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$71, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$73, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$75, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$77, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$78, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$79, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$80, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$81, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$82, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$83, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$84, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$85, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$86, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$87, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$88, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$89, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$90, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$91, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$92, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$93, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$94, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$94, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$76, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$16, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$17, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$18, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$19, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$20, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$21, 8(%rsp)
	movl	$194, (%rsp)
	movl	$409, %ebx              # imm = 0x199
	movl	$409, %edi              # imm = 0x199
	jmp	.LBB16_45
.Ltmp1679:
.LBB16_43:                              # %cond.false867
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	.loc	2 1475 44 discriminator 2 # susan.c:1475:44
	movsd	-312(%rbp), %xmm0       # 8-byte Reload
	addsd	.LCPI16_0(%rip), %xmm0
	movsd	%xmm0, -312(%rbp)       # 8-byte Spill
	movl	$38, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$39, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$40, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$41, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$42, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$51, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$50, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$51, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$54, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$55, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$56, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$57, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$56, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$54, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$57, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$60, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$61, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$62, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$61, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$62, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$63, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$65, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$65, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$66, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$67, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$69, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$71, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$73, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$75, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$77, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$79, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$81, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$83, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$85, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$87, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$89, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$91, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$93, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$95, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$97, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$99, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$101, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$103, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$105, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$106, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$107, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$108, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$109, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$110, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$111, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$112, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$113, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$114, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$115, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$116, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$117, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$118, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$119, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$120, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$121, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$122, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$122, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$104, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$194, (%rsp)
	movl	$407, %ebx              # imm = 0x197
	movl	$407, %edi              # imm = 0x197
.Ltmp1680:
.LBB16_44:                              # %cond.end872
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$74, %esi
	movl	$187, %edx
	movl	$50, %ecx
	movl	$191, %r8d
	movl	$50, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
.Ltmp1681:
	#DEBUG_VALUE: susan_corners:in <- R15
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- R12
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	movl	$387, %edi              # imm = 0x183
	callq	_KPushCDep
	movl	$405, %edi              # imm = 0x195
	movl	$387, %edx              # imm = 0x183
	movl	$408, %ecx              # imm = 0x198
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$11, %edi
	callq	_KWork
	.loc	2 1475 44 is_stmt 0 discriminator 1 # susan.c:1475:44
	cvttsd2si	-312(%rbp), %eax # 8-byte Folded Reload
	.loc	2 1475 23               # susan.c:1475:23
	leal	(%r14,%r14,2), %ecx
	movq	-672(%rbp), %rdx        # 8-byte Reload
	addl	%edx, %ecx
	movq	-752(%rbp), %rdx        # 8-byte Reload
	imull	%edx, %ecx
	addl	%eax, %ecx
	movq	-128(%rbp), %rax        # 8-byte Reload
	addl	%eax, %ecx
	movslq	%ecx, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$257, %esi              # imm = 0x101
	movl	$258, %edx              # imm = 0x102
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1475 20               # susan.c:1475:20
	movzbl	(%r15,%rbx), %eax
.Ltmp1682:
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r12,%rbx), %rdi
	movl	$259, %esi              # imm = 0x103
	movl	$260, %edx              # imm = 0x104
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1475 18               # susan.c:1475:18
	movzbl	(%r12,%rbx), %eax
.Ltmp1683:
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	.loc	2 1473 18 is_stmt 1     # susan.c:1473:18
	addl	%eax, %r13d
.Ltmp1684:
	#DEBUG_VALUE: susan_corners:sq <- R13D
	movl	$1, 1192(%rsp)
	movl	$259, 1184(%rsp)        # imm = 0x103
	movl	$2, 1176(%rsp)
	movl	$255, 1168(%rsp)
	movl	$2, 1160(%rsp)
	movl	$251, 1152(%rsp)
	movl	$10, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$11, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$12, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$13, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$14, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$23, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$22, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$23, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$26, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$27, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$28, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$29, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$28, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$26, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$29, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$32, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$33, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$34, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$33, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$34, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$35, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$37, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$37, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$38, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$39, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$41, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$43, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$45, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$47, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$49, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$51, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$53, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$55, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$57, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$59, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$61, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$63, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$65, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$67, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$69, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$71, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$73, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$75, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$77, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$78, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$79, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$80, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$81, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$82, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$83, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$84, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$85, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$86, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$87, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$88, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$89, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$90, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$91, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$92, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$93, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$94, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$94, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$76, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$16, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$17, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$18, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$19, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$20, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$21, 8(%rsp)
	movl	$194, (%rsp)
	movl	$410, %ebx              # imm = 0x19A
	movl	$410, %edi              # imm = 0x19A
.Ltmp1685:
.LBB16_45:                              # %if.end
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$77, %esi
	movl	$187, %edx
	movl	$22, %ecx
	movl	$191, %r8d
	movl	$22, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- [RBP+-844]
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	movl	$411, %edi              # imm = 0x19B
	callq	_KPushCDep
	movl	$266, %edi              # imm = 0x10A
	movl	$411, %edx              # imm = 0x19B
	movl	$387, %ecx              # imm = 0x183
	movl	%ebx, %esi
	callq	_KPhi2To1
	movl	$1, %edi
	callq	_KWork
	movl	$1, 1160(%rsp)
	movl	$266, 1152(%rsp)        # imm = 0x10A
	movl	$8, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$9, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$10, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$11, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$12, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$21, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$20, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$21, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$24, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$25, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$26, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$27, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$26, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$24, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$27, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$30, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$31, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$32, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$31, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$32, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$33, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$35, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$35, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$36, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$37, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$39, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$41, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$43, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$45, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$47, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$49, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$51, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$53, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$55, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$57, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$59, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$61, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$63, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$65, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$67, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$69, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$71, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$73, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$75, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$76, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$77, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$78, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$79, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$80, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$81, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$82, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$83, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$84, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$85, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$86, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$87, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$88, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$89, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$90, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$91, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$92, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$92, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$74, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$14, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$15, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$194, (%rsp)
	movl	$486, %edi              # imm = 0x1E6
	movl	$75, %esi
	movl	$187, %edx
	movl	$20, %ecx
	movl	$191, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1478 16               # susan.c:1478:16
	cmpl	$291, %r13d             # imm = 0x123
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1686:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	movl	-844(%rbp), %r15d       # 4-byte Reload
.Ltmp1687:
	#DEBUG_VALUE: susan_corners:n <- R15D
	jl	.LBB16_47
.Ltmp1688:
# BB#46:                                # %if.then885
                                        #   in Loop: Header=BB16_3 Depth=2
	#DEBUG_VALUE: susan_corners:in <- [RBP+-712]
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:bp <- [RBP+-120]
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:x_size <- [RBP+-752]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- R15D
	#DEBUG_VALUE: susan_corners:x <- [RBP+-304]
	#DEBUG_VALUE: susan_corners:y <- [RBP+-136]
	movl	$486, %edi              # imm = 0x1E6
.Ltmp1689:
	#DEBUG_VALUE: susan_corners:max_no <- [RBP+-72]
	callq	_KPushCDep
	movl	$37, %edi
	callq	_KWork
	.loc	2 1479 31               # susan.c:1479:31
.Ltmp1690:
	movl	-72(%rbp), %r14d        # 4-byte Reload
	subl	%r15d, %r14d
	movl	$2, 1160(%rsp)
	movl	$266, 1152(%rsp)        # imm = 0x10A
	movl	$9, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$10, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$11, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$12, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$13, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$22, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$21, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$22, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$25, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$26, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$27, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$28, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$27, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$25, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$28, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$31, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$32, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$33, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$32, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$33, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$34, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$36, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$36, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$37, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$38, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$40, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$42, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$44, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$46, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$48, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$50, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$52, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$54, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$56, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$58, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$60, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$62, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$64, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$66, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$68, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$70, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$72, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$74, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$76, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$77, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$78, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$79, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$80, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$81, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$82, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$83, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$84, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$85, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$86, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$87, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$88, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$89, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$90, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$91, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$92, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$93, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$93, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$75, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$14, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$15, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$16, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$19, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$20, 8(%rsp)
	movl	$194, (%rsp)
	movl	$261, %edi              # imm = 0x105
	movl	$75, %esi
	movl	$187, %edx
	movl	$21, %ecx
	movl	$191, %r8d
	movl	$21, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movq	-432(%rbp), %rbx        # 8-byte Reload
	movl	%r15d, %r12d
.Ltmp1691:
	#DEBUG_VALUE: susan_corners:n <- R12D
	movq	-80(%rbp), %r15         # 8-byte Reload
	leaq	(%rbx,%r15), %rsi
	movl	$261, %edi              # imm = 0x105
	movl	$1, %edx
	callq	_KStore
	.loc	2 1479 15 is_stmt 0     # susan.c:1479:15
	movb	%r14b, (%rbx,%r15)
	.loc	2 1480 34 is_stmt 1     # susan.c:1480:34
	imull	$51, -304(%rbp), %eax   # 4-byte Folded Reload
	.loc	2 1480 33 is_stmt 0     # susan.c:1480:33
	cltd
	idivl	%r12d
	movl	%eax, %r14d
	movl	$13, 1160(%rsp)
	movl	$266, 1152(%rsp)        # imm = 0x10A
	movl	$20, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$21, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$22, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$23, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$24, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$33, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$32, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$33, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$36, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$37, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$38, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$39, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$38, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$36, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$39, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$42, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$43, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$44, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$43, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$44, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$45, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$47, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$47, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$48, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$49, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$51, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$53, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$55, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$57, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$59, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$61, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$63, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$65, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$67, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$69, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$71, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$73, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$75, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$77, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$79, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$81, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$83, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$85, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$87, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$88, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$89, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$90, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$91, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$92, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$93, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$94, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$95, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$96, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$97, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$98, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$99, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$100, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$101, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$102, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$103, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$104, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$104, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$86, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$25, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$26, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$27, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$26, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$27, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$28, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$29, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$30, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$31, 8(%rsp)
	movl	$194, (%rsp)
	movl	$267, %edi              # imm = 0x10B
	movl	$75, %esi
	movl	$187, %edx
	movl	$32, %ecx
	movl	$191, %r8d
	movl	$32, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movq	-760(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%r15), %rsi
	movl	$267, %edi              # imm = 0x10B
	movl	$1, %edx
	callq	_KStore
	.loc	2 1480 15               # susan.c:1480:15
	movb	%r14b, (%rbx,%r15)
	.loc	2 1481 34 is_stmt 1     # susan.c:1481:34
	imull	$51, -136(%rbp), %eax   # 4-byte Folded Reload
	.loc	2 1481 33 is_stmt 0     # susan.c:1481:33
	cltd
	idivl	%r12d
	movl	%eax, %r14d
	movl	$13, 1160(%rsp)
	movl	$266, 1152(%rsp)        # imm = 0x10A
	movl	$20, 1144(%rsp)
	movl	$235, 1136(%rsp)
	movl	$21, 1128(%rsp)
	movl	$232, 1120(%rsp)
	movl	$22, 1112(%rsp)
	movl	$229, 1104(%rsp)
	movl	$23, 1096(%rsp)
	movl	$225, 1088(%rsp)
	movl	$24, 1080(%rsp)
	movl	$222, 1072(%rsp)
	movl	$33, 1064(%rsp)
	movl	$184, 1056(%rsp)
	movl	$32, 1048(%rsp)
	movl	$181, 1040(%rsp)
	movl	$33, 1032(%rsp)
	movl	$178, 1024(%rsp)
	movl	$36, 1016(%rsp)
	movl	$175, 1008(%rsp)
	movl	$37, 1000(%rsp)
	movl	$172, 992(%rsp)
	movl	$38, 984(%rsp)
	movl	$168, 976(%rsp)
	movl	$39, 968(%rsp)
	movl	$165, 960(%rsp)
	movl	$38, 952(%rsp)
	movl	$162, 944(%rsp)
	movl	$36, 936(%rsp)
	movl	$159, 928(%rsp)
	movl	$39, 920(%rsp)
	movl	$156, 912(%rsp)
	movl	$42, 904(%rsp)
	movl	$153, 896(%rsp)
	movl	$43, 888(%rsp)
	movl	$150, 880(%rsp)
	movl	$44, 872(%rsp)
	movl	$146, 864(%rsp)
	movl	$43, 856(%rsp)
	movl	$143, 848(%rsp)
	movl	$44, 840(%rsp)
	movl	$140, 832(%rsp)
	movl	$45, 824(%rsp)
	movl	$137, 816(%rsp)
	movl	$47, 808(%rsp)
	movl	$134, 800(%rsp)
	movl	$47, 792(%rsp)
	movl	$130, 784(%rsp)
	movl	$48, 776(%rsp)
	movl	$127, 768(%rsp)
	movl	$49, 760(%rsp)
	movl	$124, 752(%rsp)
	movl	$51, 744(%rsp)
	movl	$121, 736(%rsp)
	movl	$53, 728(%rsp)
	movl	$118, 720(%rsp)
	movl	$55, 712(%rsp)
	movl	$115, 704(%rsp)
	movl	$57, 696(%rsp)
	movl	$111, 688(%rsp)
	movl	$59, 680(%rsp)
	movl	$108, 672(%rsp)
	movl	$61, 664(%rsp)
	movl	$105, 656(%rsp)
	movl	$63, 648(%rsp)
	movl	$102, 640(%rsp)
	movl	$65, 632(%rsp)
	movl	$99, 624(%rsp)
	movl	$67, 616(%rsp)
	movl	$95, 608(%rsp)
	movl	$69, 600(%rsp)
	movl	$92, 592(%rsp)
	movl	$71, 584(%rsp)
	movl	$89, 576(%rsp)
	movl	$73, 568(%rsp)
	movl	$86, 560(%rsp)
	movl	$75, 552(%rsp)
	movl	$83, 544(%rsp)
	movl	$77, 536(%rsp)
	movl	$80, 528(%rsp)
	movl	$79, 520(%rsp)
	movl	$77, 512(%rsp)
	movl	$81, 504(%rsp)
	movl	$73, 496(%rsp)
	movl	$83, 488(%rsp)
	movl	$70, 480(%rsp)
	movl	$85, 472(%rsp)
	movl	$67, 464(%rsp)
	movl	$87, 456(%rsp)
	movl	$64, 448(%rsp)
	movl	$88, 440(%rsp)
	movl	$61, 432(%rsp)
	movl	$89, 424(%rsp)
	movl	$58, 416(%rsp)
	movl	$90, 408(%rsp)
	movl	$54, 400(%rsp)
	movl	$91, 392(%rsp)
	movl	$51, 384(%rsp)
	movl	$92, 376(%rsp)
	movl	$48, 368(%rsp)
	movl	$93, 360(%rsp)
	movl	$45, 352(%rsp)
	movl	$94, 344(%rsp)
	movl	$42, 336(%rsp)
	movl	$95, 328(%rsp)
	movl	$39, 320(%rsp)
	movl	$96, 312(%rsp)
	movl	$36, 304(%rsp)
	movl	$97, 296(%rsp)
	movl	$32, 288(%rsp)
	movl	$98, 280(%rsp)
	movl	$29, 272(%rsp)
	movl	$99, 264(%rsp)
	movl	$26, 256(%rsp)
	movl	$100, 248(%rsp)
	movl	$23, 240(%rsp)
	movl	$101, 232(%rsp)
	movl	$20, 224(%rsp)
	movl	$102, 216(%rsp)
	movl	$16, 208(%rsp)
	movl	$103, 200(%rsp)
	movl	$13, 192(%rsp)
	movl	$104, 184(%rsp)
	movl	$10, 176(%rsp)
	movl	$104, 168(%rsp)
	movl	$264, 160(%rsp)         # imm = 0x108
	movl	$86, 152(%rsp)
	movl	$1, 144(%rsp)
	movl	$25, 136(%rsp)
	movl	$219, 128(%rsp)
	movl	$26, 120(%rsp)
	movl	$216, 112(%rsp)
	movl	$27, 104(%rsp)
	movl	$213, 96(%rsp)
	movl	$26, 88(%rsp)
	movl	$209, 80(%rsp)
	movl	$27, 72(%rsp)
	movl	$206, 64(%rsp)
	movl	$28, 56(%rsp)
	movl	$203, 48(%rsp)
	movl	$29, 40(%rsp)
	movl	$200, 32(%rsp)
	movl	$30, 24(%rsp)
	movl	$197, 16(%rsp)
	movl	$31, 8(%rsp)
	movl	$194, (%rsp)
	movl	$268, %edi              # imm = 0x10C
	movl	$75, %esi
	movl	$187, %edx
	movl	$32, %ecx
	movl	$191, %r8d
	movl	$32, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movq	-768(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%r15), %rsi
	movl	$268, %edi              # imm = 0x10C
	movl	$1, %edx
	callq	_KStore
	.loc	2 1481 15               # susan.c:1481:15
	movb	%r14b, (%rbx,%r15)
	callq	_KPopCDep
	movl	-72(%rbp), %eax         # 4-byte Reload
.Ltmp1692:
	#DEBUG_VALUE: susan_corners:max_no <- EAX
	jmp	.LBB16_47
.Ltmp1693:
.LBB16_49:                              # %for.cond.pre_exit.for.end929
	#DEBUG_VALUE: susan_corners:r <- [RBP+-728]
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	movabsq	$-2647907730456134883, %rbx # imm = 0xDB40BDF2C826BB1D
	movl	$1, %esi
	movabsq	$3670298599387686660, %rdi # imm = 0x32EF85214C1DE704
	callq	_KExitRegion
.Ltmp1694:
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$1, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
.Ltmp1695:
	#DEBUG_VALUE: susan_corners:r <- RCX
	leaq	(%rcx,%rax,8), %rdx
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	imulq	$7, %rax, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	leaq	(%rax,%rax,2), %rdx
	leaq	(%rcx,%rdx,2), %rsi
	movq	%rsi, -520(%rbp)        # 8-byte Spill
	leaq	(%rcx,%rax,4), %rsi
	movq	%rsi, -512(%rbp)        # 8-byte Spill
	addq	%rcx, %rdx
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	leaq	(%rcx,%rax,2), %r13
	movq	%r13, -448(%rbp)        # 8-byte Spill
	movl	$5, %eax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	movabsq	$-7548364403287060845, %r15 # imm = 0x973ED29172DF0E93
	movabsq	$4956539898367861315, %r12 # imm = 0x44C92AC6D5446243
	xorl	%eax, %eax
	movq	%rax, -456(%rbp)        # 8-byte Spill
	xorl	%ebx, %ebx
	xorl	%r14d, %r14d
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	jmp	.LBB16_50
.Ltmp1696:
	.align	16, 0x90
.LBB16_157:                             # %for.cond935.pre_exit.for.inc1454
                                        #   in Loop: Header=BB16_50 Depth=1
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$1, %esi
	movabsq	$4956539898367861315, %r12 # imm = 0x44C92AC6D5446243
	movq	%r12, %rdi
	callq	_KExitRegion
	movl	$369, %ebx              # imm = 0x171
	movl	$369, %edi              # imm = 0x171
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$412, %r14d             # imm = 0x19C
	movl	$412, %edi              # imm = 0x19C
	movl	$370, %esi              # imm = 0x172
	movl	$1, %edx
	movl	$369, %ecx              # imm = 0x171
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-7548364403287060845, %r15 # imm = 0x973ED29172DF0E93
	movq	%r15, %rdi
	callq	_KExitRegion
	movq	-456(%rbp), %rax        # 8-byte Reload
	addq	-480(%rbp), %rax        # 8-byte Folded Reload
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$414, %esi              # imm = 0x19E
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, -464(%rbp)        # 8-byte Spill
.LBB16_50:                              # %for.cond930
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_52 Depth 2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$413, %edi              # imm = 0x19D
                                        # kill: ESI<def> ESI<kill> RSI<kill>
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$370, %edi              # imm = 0x172
	movl	%r14d, %esi
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$370, %edi              # imm = 0x172
	movl	$370, %esi              # imm = 0x172
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$369, %edi              # imm = 0x171
	movl	$3, %esi
	movl	$2, %edx
	movl	$370, %ecx              # imm = 0x172
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$413, %edi              # imm = 0x19D
	movl	$369, %esi              # imm = 0x171
	callq	_KPhiAddCond
	movl	$413, %edi              # imm = 0x19D
	movl	$413, %esi              # imm = 0x19D
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$370, %edi              # imm = 0x172
	movl	$369, %esi              # imm = 0x171
	callq	_KPhiAddCond
	movq	-464(%rbp), %rax        # 8-byte Reload
	.loc	2 1492 3 is_stmt 1      # susan.c:1492:3
.Ltmp1697:
	cmpq	-472(%rbp), %rax        # 8-byte Folded Reload
	movq	%rax, %rbx
	jge	.LBB16_158
# BB#51:                                # %for.body934
                                        #   in Loop: Header=BB16_50 Depth=1
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$2, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	movl	$369, %edi              # imm = 0x171
	callq	_KPushCDep
	#DEBUG_VALUE: susan_corners:j <- 5
	callq	_KPopCDep
	movl	$1, %esi
	movq	%r12, %rdi
	callq	_KEnterRegion
	.loc	2 1556 20               # susan.c:1556:20
.Ltmp1698:
	leaq	1(%rbx), %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	movl	$413, %r12d             # imm = 0x19D
	xorl	%r15d, %r15d
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
	xorl	%ebx, %ebx
	movl	$5, %r14d
	jmp	.LBB16_52
.Ltmp1699:
	.align	16, 0x90
.LBB16_156:                             # %for.inc1451
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$371, %r15d             # imm = 0x173
	movl	$371, %edi              # imm = 0x173
	callq	_KPushCDep
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	%eax, 368(%rsp)
	movl	-88(%rbp), %eax         # 4-byte Reload
	movl	%eax, 360(%rsp)
	movl	-96(%rbp), %eax         # 4-byte Reload
	movl	%eax, 352(%rsp)
	movl	-104(%rbp), %eax        # 4-byte Reload
	movl	%eax, 344(%rsp)
	movl	-112(%rbp), %eax        # 4-byte Reload
	movl	%eax, 336(%rsp)
	movl	-120(%rbp), %eax        # 4-byte Reload
	movl	%eax, 328(%rsp)
	movl	-128(%rbp), %eax        # 4-byte Reload
	movl	%eax, 320(%rsp)
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, 312(%rsp)
	movl	-144(%rbp), %eax        # 4-byte Reload
	movl	%eax, 304(%rsp)
	movl	-152(%rbp), %eax        # 4-byte Reload
	movl	%eax, 296(%rsp)
	movl	-160(%rbp), %eax        # 4-byte Reload
	movl	%eax, 288(%rsp)
	movl	-168(%rbp), %eax        # 4-byte Reload
	movl	%eax, 280(%rsp)
	movl	-176(%rbp), %eax        # 4-byte Reload
	movl	%eax, 272(%rsp)
	movl	-184(%rbp), %eax        # 4-byte Reload
	movl	%eax, 264(%rsp)
	movl	-192(%rbp), %eax        # 4-byte Reload
	movl	%eax, 256(%rsp)
	movl	-200(%rbp), %eax        # 4-byte Reload
	movl	%eax, 248(%rsp)
	movl	-208(%rbp), %eax        # 4-byte Reload
	movl	%eax, 240(%rsp)
	movl	-216(%rbp), %eax        # 4-byte Reload
	movl	%eax, 232(%rsp)
	movl	-224(%rbp), %eax        # 4-byte Reload
	movl	%eax, 224(%rsp)
	movl	-232(%rbp), %eax        # 4-byte Reload
	movl	%eax, 216(%rsp)
	movl	-296(%rbp), %eax        # 4-byte Reload
	movl	%eax, 208(%rsp)
	movl	-240(%rbp), %eax        # 4-byte Reload
	movl	%eax, 200(%rsp)
	movl	-248(%rbp), %eax        # 4-byte Reload
	movl	%eax, 192(%rsp)
	movl	-256(%rbp), %eax        # 4-byte Reload
	movl	%eax, 184(%rsp)
	movl	-264(%rbp), %eax        # 4-byte Reload
	movl	%eax, 176(%rsp)
	movl	-272(%rbp), %eax        # 4-byte Reload
	movl	%eax, 168(%rsp)
	movl	-280(%rbp), %eax        # 4-byte Reload
	movl	%eax, 160(%rsp)
	movl	-288(%rbp), %eax        # 4-byte Reload
	movl	%eax, 152(%rsp)
	movl	-304(%rbp), %eax        # 4-byte Reload
	movl	%eax, 144(%rsp)
	movl	-312(%rbp), %eax        # 4-byte Reload
	movl	%eax, 136(%rsp)
	movl	-320(%rbp), %eax        # 4-byte Reload
	movl	%eax, 128(%rsp)
	movl	-328(%rbp), %eax        # 4-byte Reload
	movl	%eax, 120(%rsp)
	movl	-336(%rbp), %eax        # 4-byte Reload
	movl	%eax, 112(%rsp)
	movl	-352(%rbp), %eax        # 4-byte Reload
	movl	%eax, 104(%rsp)
	movl	-360(%rbp), %eax        # 4-byte Reload
	movl	%eax, 96(%rsp)
	movl	-376(%rbp), %eax        # 4-byte Reload
	movl	%eax, 88(%rsp)
	movl	%r13d, 80(%rsp)
	movl	-392(%rbp), %eax        # 4-byte Reload
	movl	%eax, 72(%rsp)
	movl	-416(%rbp), %eax        # 4-byte Reload
	movl	%eax, 64(%rsp)
	movl	-424(%rbp), %eax        # 4-byte Reload
	movl	%eax, 56(%rsp)
	movl	-408(%rbp), %eax        # 4-byte Reload
	movl	%eax, 48(%rsp)
	movl	%r14d, 40(%rsp)
	movl	%r12d, 32(%rsp)
	movl	-400(%rbp), %eax        # 4-byte Reload
	movl	%eax, 24(%rsp)
	movl	-384(%rbp), %eax        # 4-byte Reload
	movl	%eax, 16(%rsp)
	movl	-368(%rbp), %eax        # 4-byte Reload
	movl	%eax, 8(%rsp)
	movl	-344(%rbp), %eax        # 4-byte Reload
	movl	%eax, (%rsp)
	movl	$416, %r12d             # imm = 0x1A0
	movl	$416, %edi              # imm = 0x1A0
	movl	$50, %edx
	movl	$371, %ecx              # imm = 0x173
	movl	$418, %r8d              # imm = 0x1A2
	xorl	%eax, %eax
	movl	-80(%rbp), %esi         # 4-byte Reload
	movl	%ebx, %r9d
	callq	_KPhi
	movl	$1, %edi
	callq	_KWork
	movq	-72(%rbp), %r14         # 8-byte Reload
	.loc	2 1494 5                # susan.c:1494:5
	incq	%r14
	movl	$416, %edi              # imm = 0x1A0
	movl	$416, %esi              # imm = 0x1A0
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$415, %ebx              # imm = 0x19F
	movl	$415, %edi              # imm = 0x19F
	movl	$368, %esi              # imm = 0x170
	movl	$1, %edx
	movl	$371, %ecx              # imm = 0x173
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-7010515502161530810, %rdi # imm = 0x9EB5A54B494AF046
	callq	_KExitRegion
	incq	-48(%rbp)               # 8-byte Folded Spill
	movq	-448(%rbp), %r13        # 8-byte Reload
.Ltmp1700:
.LBB16_52:                              # %for.cond935
                                        #   Parent Loop BB16_50 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$369, %edi              # imm = 0x171
	callq	_KPushCDep
	movl	$414, %edi              # imm = 0x19E
	movl	$369, %edx              # imm = 0x171
	movl	%r12d, %esi
	movl	%r15d, %ecx
	callq	_KPhi2To1
	movl	$368, %edi              # imm = 0x170
	movl	$369, %edx              # imm = 0x171
	movl	%ebx, %esi
	movl	%r15d, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$371, %edi              # imm = 0x173
	movl	$2, %esi
	movl	$2, %edx
	movl	$369, %ecx              # imm = 0x171
	movl	$2, %r8d
	movl	$368, %r9d              # imm = 0x170
	callq	_KTimestamp3
	movl	$368, %edi              # imm = 0x170
	movl	$368, %esi              # imm = 0x170
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$414, %edi              # imm = 0x19E
	movl	$371, %esi              # imm = 0x173
	callq	_KPhiAddCond
	movl	$368, %edi              # imm = 0x170
	movl	$371, %esi              # imm = 0x173
	callq	_KPhiAddCond
	movl	$414, %edi              # imm = 0x19E
	movl	$414, %esi              # imm = 0x19E
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 1494 5 is_stmt 0      # susan.c:1494:5
	cmpq	-64(%rbp), %r14         # 8-byte Folded Reload
	jge	.LBB16_157
# BB#53:                                # %for.body939
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movq	%r14, -72(%rbp)         # 8-byte Spill
	movl	$2, %esi
	movabsq	$-7010515502161530810, %rdi # imm = 0x9EB5A54B494AF046
	callq	_KEnterRegion
	movl	$371, %edi              # imm = 0x173
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
	movq	-48(%rbp), %r14         # 8-byte Reload
	leaq	5(%rbx,%r14), %rdi
	movl	$269, %esi              # imm = 0x10D
	movl	$270, %edx              # imm = 0x10E
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1495 11 is_stmt 1     # susan.c:1495:11
.Ltmp1701:
	movb	5(%rbx,%r14), %bl
	movl	$418, %edi              # imm = 0x1A2
	movl	$371, %esi              # imm = 0x173
	movl	$1, %edx
	movl	$269, %ecx              # imm = 0x10D
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$414, -80(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x19E
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	.loc	2 1496 11               # susan.c:1496:11
	testb	%bl, %bl
	jle	.LBB16_54
# BB#55:                                # %if.then947
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$418, %edi              # imm = 0x1A2
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	2(%r13,%r14), %rdi
	movl	$271, %esi              # imm = 0x10F
	movl	$272, %edx              # imm = 0x110
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1525 13               # susan.c:1525:13
.Ltmp1702:
	movsbl	2(%r13,%r14), %r12d
	movl	$1, (%rsp)
	movl	$419, %edi              # imm = 0x1A3
	movl	$371, %esi              # imm = 0x173
	movl	$2, %edx
	movl	$269, %ecx              # imm = 0x10D
	movl	$2, %r8d
	movl	$271, %r9d              # imm = 0x10F
	callq	_KTimestamp3
	callq	_KPopCDep
	movsbl	%bl, %r15d
	cmpl	%r12d, %r15d
	jle	.LBB16_56
# BB#57:                                # %land.lhs.true
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$419, %edi              # imm = 0x1A3
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	3(%r13,%r14), %rdi
	movl	$273, %esi              # imm = 0x111
	movl	$274, %edx              # imm = 0x112
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	3(%r13,%r14), %ebx
	movl	$1, 16(%rsp)
	movl	$273, 8(%rsp)           # imm = 0x111
	movl	$2, (%rsp)
	movl	$420, %edi              # imm = 0x1A4
	movl	$371, %esi              # imm = 0x173
	movl	$3, %edx
	movl	$269, %ecx              # imm = 0x10D
	movl	$3, %r8d
	movl	$271, %r9d              # imm = 0x10F
	callq	_KTimestamp4
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_58
# BB#59:                                # %land.lhs.true966
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$420, %edi              # imm = 0x1A4
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	4(%r13,%r14), %rdi
	movl	$275, %esi              # imm = 0x113
	movl	$276, %edx              # imm = 0x114
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	4(%r13,%r14), %ebx
	movl	$1, 32(%rsp)
	movl	$275, 24(%rsp)          # imm = 0x113
	movl	$2, 16(%rsp)
	movl	$273, 8(%rsp)           # imm = 0x111
	movl	$3, (%rsp)
	movl	$421, %edi              # imm = 0x1A5
	movl	$371, %esi              # imm = 0x173
	movl	$4, %edx
	movl	$269, %ecx              # imm = 0x10D
	movl	$4, %r8d
	movl	$271, %r9d              # imm = 0x10F
	callq	_KTimestamp5
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_60
# BB#62:                                # %land.lhs.true976
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$421, %edi              # imm = 0x1A5
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	leaq	5(%r13,%r14), %rdi
	movl	$277, %esi              # imm = 0x115
	movl	$278, %edx              # imm = 0x116
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	5(%r13,%r14), %ebx
	movl	$1, 48(%rsp)
	movl	$277, 40(%rsp)          # imm = 0x115
	movl	$2, 32(%rsp)
	movl	$275, 24(%rsp)          # imm = 0x113
	movl	$3, 16(%rsp)
	movl	$273, 8(%rsp)           # imm = 0x111
	movl	$4, (%rsp)
	movl	$422, %edi              # imm = 0x1A6
	movl	$371, %esi              # imm = 0x173
	movl	$5, %edx
	movl	$269, %ecx              # imm = 0x10D
	movl	$5, %r8d
	movl	$271, %r9d              # imm = 0x10F
	callq	_KTimestamp6
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_63
# BB#64:                                # %land.lhs.true985
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$422, %edi              # imm = 0x1A6
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	6(%r13,%r14), %rdi
	movl	$279, %esi              # imm = 0x117
	movl	$280, %edx              # imm = 0x118
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	6(%r13,%r14), %ebx
	movl	$1, 64(%rsp)
	movl	$279, 56(%rsp)          # imm = 0x117
	movl	$2, 48(%rsp)
	movl	$277, 40(%rsp)          # imm = 0x115
	movl	$3, 32(%rsp)
	movl	$275, 24(%rsp)          # imm = 0x113
	movl	$4, 16(%rsp)
	movl	$273, 8(%rsp)           # imm = 0x111
	movl	$5, (%rsp)
	movl	$423, %edi              # imm = 0x1A7
	movl	$371, %esi              # imm = 0x173
	movl	$6, %edx
	movl	$269, %ecx              # imm = 0x10D
	movl	$6, %r8d
	movl	$271, %r9d              # imm = 0x10F
	callq	_KTimestamp7
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_65
# BB#66:                                # %land.lhs.true995
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$423, %edi              # imm = 0x1A7
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	7(%r13,%r14), %rdi
	movl	$281, %esi              # imm = 0x119
	movl	$282, %edx              # imm = 0x11A
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	7(%r13,%r14), %ebx
	movl	$1, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$2, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$3, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$4, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$5, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$6, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$424, %edi              # imm = 0x1A8
	movl	$8, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$7, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$7, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_67
# BB#68:                                # %land.lhs.true1005
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$424, %edi              # imm = 0x1A8
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	8(%r13,%r14), %rdi
	movl	$283, %esi              # imm = 0x11B
	movl	$284, %edx              # imm = 0x11C
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	8(%r13,%r14), %ebx
	movl	$1, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$2, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$3, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$4, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$5, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$6, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$7, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$425, %edi              # imm = 0x1A9
	movl	$9, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$8, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$8, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_69
# BB#70:                                # %land.lhs.true1015
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$425, %edi              # imm = 0x1A9
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-496(%rbp), %r12        # 8-byte Reload
	leaq	2(%r12,%r14), %rdi
	movl	$285, %esi              # imm = 0x11D
	movl	$286, %edx              # imm = 0x11E
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	2(%r12,%r14), %ebx
	movl	$1, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$2, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$3, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$4, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$5, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$6, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$7, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$8, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$426, %edi              # imm = 0x1AA
	movl	$10, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$9, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$9, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_71
# BB#72:                                # %land.lhs.true1025
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$426, %edi              # imm = 0x1AA
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	3(%r12,%r14), %rdi
	movl	$287, %esi              # imm = 0x11F
	movl	$288, %edx              # imm = 0x120
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	3(%r12,%r14), %ebx
	movl	$1, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$2, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$3, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$4, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$5, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$6, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$7, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$8, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$9, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$427, %edi              # imm = 0x1AB
	movl	$11, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$10, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_73
# BB#74:                                # %land.lhs.true1035
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$427, %edi              # imm = 0x1AB
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	4(%r12,%r14), %rdi
	movl	$289, %esi              # imm = 0x121
	movl	$290, %edx              # imm = 0x122
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	4(%r12,%r14), %ebx
	movl	$1, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$2, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$3, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$4, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$5, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$6, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$7, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$8, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$9, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$10, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$428, %edi              # imm = 0x1AC
	movl	$12, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$11, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_75
# BB#76:                                # %land.lhs.true1045
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$428, %edi              # imm = 0x1AC
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	leaq	5(%r12,%r14), %rdi
	movl	$291, %esi              # imm = 0x123
	movl	$292, %edx              # imm = 0x124
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	5(%r12,%r14), %ebx
	movl	$1, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$2, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$3, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$4, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$5, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$6, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$7, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$8, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$9, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$10, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$11, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$429, %edi              # imm = 0x1AD
	movl	$13, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$12, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$12, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_77
# BB#78:                                # %land.lhs.true1054
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$429, %edi              # imm = 0x1AD
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	6(%r12,%r14), %rdi
	movl	$293, %esi              # imm = 0x125
	movl	$294, %edx              # imm = 0x126
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	6(%r12,%r14), %ebx
	movl	$1, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$2, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$3, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$4, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$5, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$6, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$7, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$8, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$9, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$10, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$11, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$12, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$430, %edi              # imm = 0x1AE
	movl	$14, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$13, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$13, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_79
# BB#80:                                # %land.lhs.true1064
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$430, %edi              # imm = 0x1AE
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	7(%r12,%r14), %rdi
	movl	$295, %esi              # imm = 0x127
	movl	$296, %edx              # imm = 0x128
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	7(%r12,%r14), %ebx
	movl	$1, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$2, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$3, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$4, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$5, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$6, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$7, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$8, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$9, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$10, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$11, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$12, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$13, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$431, %edi              # imm = 0x1AF
	movl	$15, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$14, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_81
# BB#82:                                # %land.lhs.true1074
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$431, %edi              # imm = 0x1AF
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	8(%r12,%r14), %rdi
	movl	$297, %esi              # imm = 0x129
	movl	$298, %edx              # imm = 0x12A
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	8(%r12,%r14), %ebx
	movl	$1, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$2, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$3, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$4, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$5, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$6, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$7, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$8, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$9, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$10, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$11, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$12, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$13, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$14, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$432, %edi              # imm = 0x1B0
	movl	$16, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$15, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_83
# BB#84:                                # %land.lhs.true1084
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$432, %edi              # imm = 0x1B0
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-512(%rbp), %r12        # 8-byte Reload
	leaq	2(%r12,%r14), %rdi
	movl	$299, %esi              # imm = 0x12B
	movl	$300, %edx              # imm = 0x12C
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	2(%r12,%r14), %ebx
	movl	$1, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$2, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$3, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$4, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$5, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$6, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$7, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$8, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$9, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$10, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$11, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$12, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$13, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$14, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$15, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$433, %edi              # imm = 0x1B1
	movl	$17, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$16, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$16, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_85
# BB#86:                                # %land.lhs.true1094
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$433, %edi              # imm = 0x1B1
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	3(%r12,%r14), %rdi
	movl	$301, %esi              # imm = 0x12D
	movl	$302, %edx              # imm = 0x12E
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	3(%r12,%r14), %ebx
	movl	$1, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$2, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$3, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$4, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$5, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$6, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$7, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$8, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$9, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$10, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$11, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$12, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$13, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$14, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$15, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$16, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$434, %edi              # imm = 0x1B2
	movl	$18, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$17, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_87
# BB#88:                                # %land.lhs.true1104
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$434, %edi              # imm = 0x1B2
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	4(%r12,%r14), %rdi
	movl	$303, %esi              # imm = 0x12F
	movl	$304, %edx              # imm = 0x130
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	4(%r12,%r14), %ebx
	movl	$1, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$2, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$3, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$4, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$5, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$6, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$7, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$8, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$9, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$10, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$11, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$12, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$13, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$14, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$15, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$16, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$17, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$435, %edi              # imm = 0x1B3
	movl	$19, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$18, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_89
# BB#90:                                # %land.lhs.true1114
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$435, %edi              # imm = 0x1B3
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	leaq	5(%r12,%r14), %rdi
	movl	$305, %esi              # imm = 0x131
	movl	$306, %edx              # imm = 0x132
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	5(%r12,%r14), %ebx
	movl	$1, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$2, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$3, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$4, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$5, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$6, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$7, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$8, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$9, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$10, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$11, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$12, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$13, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$14, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$15, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$16, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$17, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$18, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$436, %edi              # imm = 0x1B4
	movl	$20, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$19, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_91
# BB#92:                                # %land.lhs.true1123
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$436, %edi              # imm = 0x1B4
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	6(%r12,%r14), %rdi
	movl	$307, %esi              # imm = 0x133
	movl	$308, %edx              # imm = 0x134
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	6(%r12,%r14), %ebx
	movl	$1, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$2, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$3, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$4, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$5, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$6, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$7, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$8, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$9, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$10, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$11, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$12, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$13, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$14, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$15, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$16, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$17, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$18, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$19, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$437, %edi              # imm = 0x1B5
	movl	$21, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$20, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_93
# BB#94:                                # %land.lhs.true1133
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$437, %edi              # imm = 0x1B5
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	7(%r12,%r14), %rdi
	movl	$309, %esi              # imm = 0x135
	movl	$310, %edx              # imm = 0x136
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	7(%r12,%r14), %ebx
	movl	$1, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$2, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$3, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$4, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$5, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$6, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$7, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$8, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$9, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$10, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$11, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$12, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$13, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$14, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$15, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$16, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$17, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$18, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$19, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$20, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$438, %edi              # imm = 0x1B6
	movl	$22, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$21, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$21, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_95
# BB#96:                                # %land.lhs.true1143
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$438, %edi              # imm = 0x1B6
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	leaq	8(%r12,%r14), %rdi
	movl	$311, %esi              # imm = 0x137
	movl	$312, %edx              # imm = 0x138
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	8(%r12,%r14), %ebx
	movl	$1, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$2, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$3, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$4, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$5, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$6, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$7, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$8, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$9, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$10, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$11, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$12, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$13, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$14, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$15, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$16, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$17, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$18, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$19, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$20, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$21, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$439, %edi              # imm = 0x1B7
	movl	$23, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$22, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$22, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_97
# BB#98:                                # %land.lhs.true1153
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$439, %edi              # imm = 0x1B7
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
	leaq	2(%rbx,%r14), %rdi
	movl	$313, %esi              # imm = 0x139
	movl	$314, %edx              # imm = 0x13A
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	2(%rbx,%r14), %r12d
	movl	$1, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$2, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$3, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$4, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$5, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$6, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$7, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$8, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$9, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$10, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$11, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$12, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$13, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$14, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$15, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$16, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$17, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$18, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$19, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$20, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$21, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$22, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$440, %edi              # imm = 0x1B8
	movl	$24, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$23, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$23, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%r12d, %r15d
	jle	.LBB16_99
# BB#103:                               # %land.lhs.true1162
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$440, %edi              # imm = 0x1B8
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	leaq	3(%rbx,%r14), %rdi
	movl	$315, %esi              # imm = 0x13B
	movl	$316, %edx              # imm = 0x13C
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	3(%rbx,%r14), %r12d
	movl	$1, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$2, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$3, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$4, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$5, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$6, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$7, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$8, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$9, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$10, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$11, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$12, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$13, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$14, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$15, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$16, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$17, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$18, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$19, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$20, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$21, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$22, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$23, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$441, %edi              # imm = 0x1B9
	movl	$25, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$24, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$24, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%r12d, %r15d
	jle	.LBB16_104
# BB#105:                               # %land.lhs.true1171
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$441, %edi              # imm = 0x1B9
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	leaq	4(%rbx,%r14), %rdi
	movl	$317, %esi              # imm = 0x13D
	movl	$318, %edx              # imm = 0x13E
	movl	$1, %ecx
	callq	_KLoad1
	movsbl	4(%rbx,%r14), %ebx
	movl	$1, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$2, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$3, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$4, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$5, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$6, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$7, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$8, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$9, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$10, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$11, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$12, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$13, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$14, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$15, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$16, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$17, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$18, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$19, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$20, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$21, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$22, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$23, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$24, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$442, %edi              # imm = 0x1BA
	movl	$26, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$25, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$25, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jle	.LBB16_106
# BB#107:                               # %land.lhs.true1180
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$442, %edi              # imm = 0x1BA
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	6(%r14,%rbx), %rdi
	movl	$319, %esi              # imm = 0x13F
	movl	$320, %edx              # imm = 0x140
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1552 14               # susan.c:1552:14
.Ltmp1703:
	movsbl	6(%r14,%rbx), %ebx
	movl	$1, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$2, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$3, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$4, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$5, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$6, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$7, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$8, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$9, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$10, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$11, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$12, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$13, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$14, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$15, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$16, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$17, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$18, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$19, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$20, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$21, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$22, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$23, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$24, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$25, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$443, %edi              # imm = 0x1BB
	movl	$27, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$26, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$26, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_109
# BB#108:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	jmp	.LBB16_156
	.align	16, 0x90
.LBB16_54:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -344(%rbp)          # 4-byte Folded Spill
	xorl	%ebx, %ebx
	jmp	.LBB16_156
	.align	16, 0x90
.LBB16_56:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -344(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	jmp	.LBB16_156
.LBB16_58:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	jmp	.LBB16_156
.LBB16_60:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	jmp	.LBB16_61
.LBB16_63:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	jmp	.LBB16_61
.LBB16_65:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	jmp	.LBB16_61
.LBB16_67:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	xorl	%r14d, %r14d
.LBB16_61:                              # %for.inc1451
                                        #   in Loop: Header=BB16_52 Depth=2
	xorl	%r13d, %r13d
	movl	$419, %ebx              # imm = 0x1A3
	jmp	.LBB16_156
.LBB16_69:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	jmp	.LBB16_102
.LBB16_71:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$0, -424(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	jmp	.LBB16_101
.LBB16_73:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	jmp	.LBB16_101
.LBB16_75:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	jmp	.LBB16_101
.LBB16_77:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	jmp	.LBB16_101
.LBB16_79:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	jmp	.LBB16_100
.LBB16_81:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	jmp	.LBB16_100
.LBB16_83:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	jmp	.LBB16_100
.LBB16_85:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	jmp	.LBB16_100
.LBB16_87:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	jmp	.LBB16_100
.LBB16_89:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	jmp	.LBB16_100
.LBB16_91:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	jmp	.LBB16_100
.LBB16_93:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	jmp	.LBB16_100
.LBB16_95:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	jmp	.LBB16_100
.LBB16_97:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	jmp	.LBB16_100
.LBB16_99:                              #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$425, %r14d             # imm = 0x1A9
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
.LBB16_100:                             # %for.inc1451
                                        #   in Loop: Header=BB16_52 Depth=2
	movl	$430, %r13d             # imm = 0x1AE
.LBB16_101:                             # %for.inc1451
                                        #   in Loop: Header=BB16_52 Depth=2
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
.LBB16_102:                             # %for.inc1451
                                        #   in Loop: Header=BB16_52 Depth=2
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	jmp	.LBB16_156
.LBB16_104:                             #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	jmp	.LBB16_156
.LBB16_106:                             #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	jmp	.LBB16_156
.LBB16_109:                             # %land.lhs.true1189
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$443, %edi              # imm = 0x1BB
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	7(%r14,%rbx), %rdi
	movl	$321, %esi              # imm = 0x141
	movl	$322, %edx              # imm = 0x142
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1553 14               # susan.c:1553:14
	movsbl	7(%r14,%rbx), %ebx
	movl	$1, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$2, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$3, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$4, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$5, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$6, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$7, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$8, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$9, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$10, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$11, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$12, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$13, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$14, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$15, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$16, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$17, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$18, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$19, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$20, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$21, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$22, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$23, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$24, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$25, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$26, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$444, %edi              # imm = 0x1BC
	movl	$28, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$27, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$27, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_111
# BB#110:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	jmp	.LBB16_156
.LBB16_111:                             # %land.lhs.true1198
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$444, %edi              # imm = 0x1BC
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	8(%r14,%rbx), %rdi
	movl	$323, %esi              # imm = 0x143
	movl	$324, %edx              # imm = 0x144
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1554 14               # susan.c:1554:14
	movsbl	8(%r14,%rbx), %ebx
	movl	$1, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$2, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$3, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$4, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$5, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$6, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$7, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$8, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$9, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$10, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$11, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$12, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$13, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$14, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$15, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$16, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$17, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$18, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$19, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$20, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$21, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$22, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$23, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$24, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$25, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$26, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$27, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$445, %edi              # imm = 0x1BD
	movl	$29, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$28, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$28, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_113
# BB#112:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	jmp	.LBB16_156
.LBB16_113:                             # %land.lhs.true1207
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$445, %edi              # imm = 0x1BD
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-520(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	2(%r14,%rbx), %rdi
	movl	$325, %esi              # imm = 0x145
	movl	$326, %edx              # imm = 0x146
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1556 14               # susan.c:1556:14
	movsbl	2(%r14,%rbx), %ebx
	movl	$1, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$2, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$3, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$4, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$5, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$6, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$7, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$8, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$9, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$10, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$11, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$12, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$13, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$14, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$15, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$16, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$17, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$18, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$19, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$20, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$21, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$22, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$23, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$24, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$25, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$26, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$27, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$28, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$446, %edi              # imm = 0x1BE
	movl	$30, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$29, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$29, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_115
# BB#114:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	jmp	.LBB16_156
.LBB16_115:                             # %land.lhs.true1217
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$446, %edi              # imm = 0x1BE
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-520(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	3(%r14,%rbx), %rdi
	movl	$327, %esi              # imm = 0x147
	movl	$328, %edx              # imm = 0x148
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1557 14               # susan.c:1557:14
	movsbl	3(%r14,%rbx), %ebx
	movl	$1, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$2, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$3, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$4, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$5, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$6, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$7, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$8, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$9, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$10, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$11, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$12, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$13, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$14, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$15, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$16, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$17, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$18, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$19, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$20, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$21, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$22, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$23, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$24, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$25, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$26, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$27, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$28, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$29, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$447, %edi              # imm = 0x1BF
	movl	$31, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$30, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$30, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_117
# BB#116:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	jmp	.LBB16_156
.LBB16_117:                             # %land.lhs.true1227
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$447, %edi              # imm = 0x1BF
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-520(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	4(%r14,%rbx), %rdi
	movl	$329, %esi              # imm = 0x149
	movl	$330, %edx              # imm = 0x14A
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1558 14               # susan.c:1558:14
	movsbl	4(%r14,%rbx), %ebx
	movl	$1, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$2, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$3, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$4, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$5, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$6, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$7, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$8, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$9, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$10, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$11, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$12, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$13, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$14, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$15, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$16, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$17, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$18, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$19, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$20, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$21, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$22, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$23, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$24, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$25, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$26, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$27, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$28, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$29, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$30, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$448, %edi              # imm = 0x1C0
	movl	$32, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$31, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$31, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_119
# BB#118:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	jmp	.LBB16_156
.LBB16_119:                             # %land.lhs.true1237
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$448, %edi              # imm = 0x1C0
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-520(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	5(%r14,%rbx), %rdi
	movl	$331, %esi              # imm = 0x14B
	movl	$332, %edx              # imm = 0x14C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1559 14               # susan.c:1559:14
	movsbl	5(%r14,%rbx), %ebx
	movl	$1, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$2, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$3, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$4, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$5, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$6, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$7, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$8, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$9, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$10, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$11, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$12, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$13, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$14, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$15, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$16, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$17, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$18, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$19, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$20, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$21, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$22, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$23, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$24, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$25, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$26, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$27, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$28, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$29, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$30, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$31, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$449, %edi              # imm = 0x1C1
	movl	$33, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$32, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$32, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_121
# BB#120:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	jmp	.LBB16_156
.LBB16_121:                             # %land.lhs.true1246
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$449, %edi              # imm = 0x1C1
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-520(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	6(%r14,%rbx), %rdi
	movl	$333, %esi              # imm = 0x14D
	movl	$334, %edx              # imm = 0x14E
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1560 14               # susan.c:1560:14
	movsbl	6(%r14,%rbx), %ebx
	movl	$1, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$2, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$3, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$4, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$5, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$6, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$7, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$8, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$9, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$10, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$11, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$12, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$13, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$14, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$15, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$16, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$17, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$18, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$19, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$20, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$21, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$22, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$23, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$24, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$25, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$26, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$27, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$28, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$29, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$30, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$31, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$32, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$450, %edi              # imm = 0x1C2
	movl	$34, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$33, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$33, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_123
# BB#122:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	jmp	.LBB16_156
.LBB16_123:                             # %land.lhs.true1256
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$450, %edi              # imm = 0x1C2
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-520(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	7(%r14,%rbx), %rdi
	movl	$335, %esi              # imm = 0x14F
	movl	$336, %edx              # imm = 0x150
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1561 14               # susan.c:1561:14
	movsbl	7(%r14,%rbx), %ebx
	movl	$1, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$2, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$3, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$4, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$5, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$6, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$7, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$8, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$9, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$10, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$11, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$12, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$13, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$14, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$15, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$16, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$17, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$18, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$19, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$20, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$21, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$22, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$23, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$24, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$25, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$26, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$27, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$28, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$29, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$30, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$31, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$32, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$33, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$451, %edi              # imm = 0x1C3
	movl	$35, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$34, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$34, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_125
# BB#124:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	jmp	.LBB16_156
.LBB16_125:                             # %land.lhs.true1266
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$451, %edi              # imm = 0x1C3
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-520(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	8(%r14,%rbx), %rdi
	movl	$337, %esi              # imm = 0x151
	movl	$338, %edx              # imm = 0x152
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1562 14               # susan.c:1562:14
	movsbl	8(%r14,%rbx), %ebx
	movl	$1, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$2, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$3, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$4, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$5, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$6, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$7, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$8, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$9, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$10, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$11, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$12, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$13, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$14, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$15, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$16, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$17, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$18, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$19, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$20, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$21, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$22, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$23, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$24, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$25, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$26, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$27, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$28, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$29, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$30, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$31, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$32, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$33, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$34, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$452, %edi              # imm = 0x1C4
	movl	$36, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$35, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$35, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_127
# BB#126:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	jmp	.LBB16_156
.LBB16_127:                             # %land.lhs.true1276
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$452, %edi              # imm = 0x1C4
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-536(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	2(%r14,%rbx), %rdi
	movl	$339, %esi              # imm = 0x153
	movl	$340, %edx              # imm = 0x154
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1564 14               # susan.c:1564:14
	movsbl	2(%r14,%rbx), %ebx
	movl	$1, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$2, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$3, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$4, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$5, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$6, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$7, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$8, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$9, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$10, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$11, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$12, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$13, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$14, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$15, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$16, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$17, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$18, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$19, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$20, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$21, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$22, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$23, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$24, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$25, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$26, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$27, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$28, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$29, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$30, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$31, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$32, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$33, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$34, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$35, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$453, %edi              # imm = 0x1C5
	movl	$37, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$36, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$36, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_129
# BB#128:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	jmp	.LBB16_156
.LBB16_129:                             # %land.lhs.true1286
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$453, %edi              # imm = 0x1C5
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-536(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	3(%r14,%rbx), %rdi
	movl	$341, %esi              # imm = 0x155
	movl	$342, %edx              # imm = 0x156
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1565 14               # susan.c:1565:14
	movsbl	3(%r14,%rbx), %ebx
	movl	$1, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$2, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$3, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$4, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$5, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$6, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$7, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$8, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$9, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$10, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$11, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$12, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$13, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$14, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$15, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$16, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$17, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$18, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$19, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$20, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$21, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$22, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$23, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$24, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$25, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$26, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$27, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$28, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$29, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$30, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$31, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$32, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$33, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$34, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$35, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$36, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$454, %edi              # imm = 0x1C6
	movl	$38, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$37, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$37, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_131
# BB#130:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	jmp	.LBB16_156
.LBB16_131:                             # %land.lhs.true1296
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$454, %edi              # imm = 0x1C6
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-536(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	4(%r14,%rbx), %rdi
	movl	$343, %esi              # imm = 0x157
	movl	$344, %edx              # imm = 0x158
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1566 14               # susan.c:1566:14
	movsbl	4(%r14,%rbx), %ebx
	movl	$1, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$2, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$3, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$4, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$5, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$6, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$7, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$8, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$9, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$10, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$11, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$12, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$13, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$14, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$15, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$16, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$17, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$18, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$19, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$20, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$21, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$22, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$23, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$24, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$25, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$26, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$27, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$28, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$29, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$30, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$31, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$32, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$33, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$34, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$35, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$36, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$37, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$455, %edi              # imm = 0x1C7
	movl	$39, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$38, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$38, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_133
# BB#132:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	jmp	.LBB16_156
.LBB16_133:                             # %land.lhs.true1306
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$455, %edi              # imm = 0x1C7
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-536(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	5(%r14,%rbx), %rdi
	movl	$345, %esi              # imm = 0x159
	movl	$346, %edx              # imm = 0x15A
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1567 14               # susan.c:1567:14
	movsbl	5(%r14,%rbx), %ebx
	movl	$1, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$2, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$3, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$4, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$5, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$6, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$7, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$8, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$9, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$10, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$11, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$12, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$13, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$14, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$15, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$16, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$17, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$18, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$19, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$20, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$21, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$22, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$23, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$24, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$25, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$26, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$27, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$28, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$29, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$30, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$31, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$32, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$33, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$34, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$35, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$36, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$37, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$38, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$456, %edi              # imm = 0x1C8
	movl	$40, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$39, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$39, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_135
# BB#134:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	jmp	.LBB16_156
.LBB16_135:                             # %land.lhs.true1315
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$456, %edi              # imm = 0x1C8
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-536(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	6(%r14,%rbx), %rdi
	movl	$347, %esi              # imm = 0x15B
	movl	$348, %edx              # imm = 0x15C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1568 14               # susan.c:1568:14
	movsbl	6(%r14,%rbx), %ebx
	movl	$1, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$2, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$3, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$4, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$5, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$6, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$7, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$8, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$9, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$10, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$11, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$12, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$13, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$14, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$15, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$16, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$17, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$18, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$19, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$20, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$21, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$22, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$23, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$24, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$25, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$26, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$27, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$28, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$29, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$30, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$31, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$32, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$33, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$34, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$35, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$36, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$37, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$38, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$39, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$457, %edi              # imm = 0x1C9
	movl	$41, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$40, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$40, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_137
# BB#136:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	jmp	.LBB16_156
.LBB16_137:                             # %land.lhs.true1325
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$457, %edi              # imm = 0x1C9
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-536(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	7(%r14,%rbx), %rdi
	movl	$349, %esi              # imm = 0x15D
	movl	$350, %edx              # imm = 0x15E
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1569 14               # susan.c:1569:14
	movsbl	7(%r14,%rbx), %ebx
	movl	$1, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$2, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$3, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$4, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$5, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$6, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$7, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$8, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$9, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$10, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$11, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$12, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$13, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$14, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$15, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$16, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$17, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$18, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$19, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$20, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$21, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$22, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$23, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$24, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$25, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$26, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$27, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$28, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$29, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$30, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$31, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$32, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$33, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$34, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$35, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$36, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$37, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$38, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$39, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$40, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$458, %edi              # imm = 0x1CA
	movl	$42, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$41, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$41, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_139
# BB#138:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	movl	$458, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CA
	jmp	.LBB16_156
.LBB16_139:                             # %land.lhs.true1335
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$458, %edi              # imm = 0x1CA
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-536(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	8(%r14,%rbx), %rdi
	movl	$351, %esi              # imm = 0x15F
	movl	$352, %edx              # imm = 0x160
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1570 14               # susan.c:1570:14
	movsbl	8(%r14,%rbx), %ebx
	movl	$1, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$2, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$3, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$4, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$5, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$6, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$7, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$8, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$9, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$10, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$11, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$12, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$13, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$14, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$15, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$16, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$17, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$18, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$19, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$20, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$21, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$22, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$23, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$24, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$25, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$26, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$27, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$28, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$29, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$30, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$31, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$32, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$33, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$34, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$35, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$36, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$37, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$38, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$39, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$40, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$41, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$459, %edi              # imm = 0x1CB
	movl	$43, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$42, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$42, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_141
# BB#140:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	movl	$458, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CA
	movl	$459, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CB
	jmp	.LBB16_156
.LBB16_141:                             # %land.lhs.true1345
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$459, %edi              # imm = 0x1CB
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-528(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	2(%r14,%rbx), %rdi
	movl	$353, %esi              # imm = 0x161
	movl	$354, %edx              # imm = 0x162
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1572 14               # susan.c:1572:14
	movsbl	2(%r14,%rbx), %ebx
	movl	$1, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$2, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$3, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$4, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$5, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$6, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$7, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$8, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$9, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$10, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$11, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$12, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$13, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$14, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$15, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$16, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$17, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$18, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$19, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$20, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$21, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$22, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$23, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$24, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$25, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$26, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$27, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$28, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$29, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$30, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$31, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$32, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$33, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$34, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$35, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$36, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$37, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$38, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$39, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$40, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$41, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$42, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$460, %edi              # imm = 0x1CC
	movl	$44, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$43, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_143
# BB#142:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	movl	$458, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CA
	movl	$459, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CB
	movl	$460, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CC
	jmp	.LBB16_156
.LBB16_143:                             # %land.lhs.true1355
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$460, %edi              # imm = 0x1CC
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-528(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	3(%r14,%rbx), %rdi
	movl	$355, %esi              # imm = 0x163
	movl	$356, %edx              # imm = 0x164
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1573 14               # susan.c:1573:14
	movsbl	3(%r14,%rbx), %ebx
	movl	$1, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$2, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$3, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$4, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$5, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$6, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$7, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$8, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$9, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$10, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$11, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$12, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$13, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$14, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$15, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$16, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$17, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$18, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$19, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$20, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$21, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$22, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$23, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$24, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$25, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$26, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$27, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$28, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$29, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$30, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$31, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$32, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$33, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$34, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$35, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$36, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$37, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$38, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$39, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$40, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$41, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$42, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$43, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$461, %edi              # imm = 0x1CD
	movl	$45, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$44, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$44, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_145
# BB#144:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	movl	$458, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CA
	movl	$459, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CB
	movl	$460, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CC
	movl	$461, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CD
	jmp	.LBB16_156
.LBB16_145:                             # %land.lhs.true1365
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$461, %edi              # imm = 0x1CD
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-528(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	4(%r14,%rbx), %rdi
	movl	$357, %esi              # imm = 0x165
	movl	$358, %edx              # imm = 0x166
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1574 14               # susan.c:1574:14
	movsbl	4(%r14,%rbx), %ebx
	movl	$1, 696(%rsp)
	movl	$357, 688(%rsp)         # imm = 0x165
	movl	$2, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$3, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$4, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$5, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$6, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$7, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$8, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$9, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$10, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$11, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$12, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$13, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$14, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$15, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$16, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$17, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$18, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$19, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$20, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$21, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$22, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$23, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$24, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$25, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$26, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$27, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$28, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$29, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$30, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$31, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$32, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$33, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$34, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$35, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$36, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$37, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$38, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$39, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$40, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$41, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$42, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$43, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$44, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$462, %edi              # imm = 0x1CE
	movl	$46, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$45, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$45, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_147
# BB#146:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	movl	$458, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CA
	movl	$459, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CB
	movl	$460, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CC
	movl	$461, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CD
	movl	$462, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CE
	jmp	.LBB16_156
.LBB16_147:                             # %land.lhs.true1375
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$462, %edi              # imm = 0x1CE
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-528(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	5(%r14,%rbx), %rdi
	movl	$359, %esi              # imm = 0x167
	movl	$360, %edx              # imm = 0x168
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1575 14               # susan.c:1575:14
	movsbl	5(%r14,%rbx), %ebx
	movl	$1, 712(%rsp)
	movl	$359, 704(%rsp)         # imm = 0x167
	movl	$2, 696(%rsp)
	movl	$357, 688(%rsp)         # imm = 0x165
	movl	$3, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$4, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$5, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$6, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$7, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$8, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$9, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$10, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$11, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$12, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$13, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$14, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$15, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$16, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$17, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$18, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$19, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$20, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$21, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$22, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$23, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$24, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$25, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$26, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$27, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$28, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$29, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$30, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$31, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$32, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$33, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$34, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$35, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$36, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$37, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$38, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$39, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$40, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$41, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$42, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$43, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$44, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$45, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$463, %edi              # imm = 0x1CF
	movl	$47, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$46, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$46, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_149
# BB#148:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	movl	$458, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CA
	movl	$459, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CB
	movl	$460, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CC
	movl	$461, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CD
	movl	$462, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CE
	movl	$463, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CF
	jmp	.LBB16_156
.LBB16_149:                             # %land.lhs.true1384
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$463, %edi              # imm = 0x1CF
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-528(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	6(%r14,%rbx), %rdi
	movl	$361, %esi              # imm = 0x169
	movl	$362, %edx              # imm = 0x16A
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1576 14               # susan.c:1576:14
	movsbl	6(%r14,%rbx), %ebx
	movl	$1, 728(%rsp)
	movl	$361, 720(%rsp)         # imm = 0x169
	movl	$2, 712(%rsp)
	movl	$359, 704(%rsp)         # imm = 0x167
	movl	$3, 696(%rsp)
	movl	$357, 688(%rsp)         # imm = 0x165
	movl	$4, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$5, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$6, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$7, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$8, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$9, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$10, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$11, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$12, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$13, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$14, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$15, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$16, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$17, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$18, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$19, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$20, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$21, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$22, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$23, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$24, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$25, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$26, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$27, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$28, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$29, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$30, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$31, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$32, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$33, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$34, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$35, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$36, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$37, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$38, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$39, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$40, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$41, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$42, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$43, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$44, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$45, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$46, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$464, %edi              # imm = 0x1D0
	movl	$48, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$47, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$47, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jge	.LBB16_151
# BB#150:                               #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	movl	$458, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CA
	movl	$459, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CB
	movl	$460, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CC
	movl	$461, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CD
	movl	$462, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CE
	movl	$463, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CF
	movl	$464, -96(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1D0
	jmp	.LBB16_156
.LBB16_151:                             # %land.lhs.true1394
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$464, %edi              # imm = 0x1D0
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-528(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	7(%r14,%rbx), %rdi
	movl	$363, %esi              # imm = 0x16B
	movl	$364, %edx              # imm = 0x16C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1577 14               # susan.c:1577:14
	movsbl	7(%r14,%rbx), %ebx
	movl	$1, 744(%rsp)
	movl	$363, 736(%rsp)         # imm = 0x16B
	movl	$2, 728(%rsp)
	movl	$361, 720(%rsp)         # imm = 0x169
	movl	$3, 712(%rsp)
	movl	$359, 704(%rsp)         # imm = 0x167
	movl	$4, 696(%rsp)
	movl	$357, 688(%rsp)         # imm = 0x165
	movl	$5, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$6, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$7, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$8, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$9, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$10, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$11, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$12, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$13, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$14, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$15, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$16, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$17, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$18, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$19, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$20, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$21, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$22, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$23, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$24, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$25, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$26, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$27, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$28, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$29, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$30, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$31, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$32, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$33, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$34, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$35, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$36, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$37, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$38, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$39, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$40, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$41, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$42, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$43, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$44, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$45, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$46, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$47, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$0, -56(%rbp)           # 4-byte Folded Spill
	movl	$465, %edi              # imm = 0x1D1
	movl	$49, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$48, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$48, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jl	.LBB16_155
# BB#152:                               # %land.lhs.true1404
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$465, %edi              # imm = 0x1D1
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-528(%rbp), %r14        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	8(%r14,%rbx), %rdi
	movl	$365, %esi              # imm = 0x16D
	movl	$366, %edx              # imm = 0x16E
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1578 14               # susan.c:1578:14
	movsbl	8(%r14,%rbx), %ebx
	movl	$1, 760(%rsp)
	movl	$365, 752(%rsp)         # imm = 0x16D
	movl	$2, 744(%rsp)
	movl	$363, 736(%rsp)         # imm = 0x16B
	movl	$3, 728(%rsp)
	movl	$361, 720(%rsp)         # imm = 0x169
	movl	$4, 712(%rsp)
	movl	$359, 704(%rsp)         # imm = 0x167
	movl	$5, 696(%rsp)
	movl	$357, 688(%rsp)         # imm = 0x165
	movl	$6, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$7, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$8, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$9, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$10, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$11, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$12, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$13, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$14, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$15, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$16, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$17, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$18, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$19, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$20, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$21, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$22, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$23, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$24, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$25, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$26, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$27, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$28, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$29, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$30, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$31, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$32, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$33, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$34, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$35, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$36, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$37, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$38, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$39, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$40, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$41, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$42, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$43, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$44, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$45, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$46, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$47, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$48, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$466, -56(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1D2
	movl	$466, %edi              # imm = 0x1D2
	movl	$50, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$49, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r15d
	jl	.LBB16_155
# BB#153:                               # %if.then1414
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$466, -56(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1D2
	movl	$466, %edi              # imm = 0x1D2
	callq	_KPushCDep
	movl	$29, %edi
	callq	_KWork
	movq	-504(%rbp), %r14        # 8-byte Reload
	.loc	2 1581 11               # susan.c:1581:11
.Ltmp1704:
	movslq	%r14d, %r14
	leaq	(%r14,%r14,2), %r12
	movq	-720(%rbp), %r13        # 8-byte Reload
.Ltmp1705:
	#DEBUG_VALUE: susan_corners:corner_list <- R13
	leaq	(%r13,%r12,8), %rbx
	leaq	8(%r13,%r12,8), %rdi
	movl	$4, %esi
	callq	_KStoreConst
	movl	$0, 8(%r13,%r12,8)
	movl	$1, 776(%rsp)
	movl	$365, 768(%rsp)         # imm = 0x16D
	movl	$2, 760(%rsp)
	movl	$363, 752(%rsp)         # imm = 0x16B
	movl	$3, 744(%rsp)
	movl	$361, 736(%rsp)         # imm = 0x169
	movl	$4, 728(%rsp)
	movl	$359, 720(%rsp)         # imm = 0x167
	movl	$5, 712(%rsp)
	movl	$357, 704(%rsp)         # imm = 0x165
	movl	$6, 696(%rsp)
	movl	$355, 688(%rsp)         # imm = 0x163
	movl	$7, 680(%rsp)
	movl	$353, 672(%rsp)         # imm = 0x161
	movl	$8, 664(%rsp)
	movl	$351, 656(%rsp)         # imm = 0x15F
	movl	$9, 648(%rsp)
	movl	$349, 640(%rsp)         # imm = 0x15D
	movl	$10, 632(%rsp)
	movl	$347, 624(%rsp)         # imm = 0x15B
	movl	$11, 616(%rsp)
	movl	$345, 608(%rsp)         # imm = 0x159
	movl	$12, 600(%rsp)
	movl	$343, 592(%rsp)         # imm = 0x157
	movl	$13, 584(%rsp)
	movl	$341, 576(%rsp)         # imm = 0x155
	movl	$14, 568(%rsp)
	movl	$339, 560(%rsp)         # imm = 0x153
	movl	$15, 552(%rsp)
	movl	$337, 544(%rsp)         # imm = 0x151
	movl	$16, 536(%rsp)
	movl	$335, 528(%rsp)         # imm = 0x14F
	movl	$17, 520(%rsp)
	movl	$333, 512(%rsp)         # imm = 0x14D
	movl	$18, 504(%rsp)
	movl	$331, 496(%rsp)         # imm = 0x14B
	movl	$19, 488(%rsp)
	movl	$329, 480(%rsp)         # imm = 0x149
	movl	$20, 472(%rsp)
	movl	$327, 464(%rsp)         # imm = 0x147
	movl	$21, 456(%rsp)
	movl	$325, 448(%rsp)         # imm = 0x145
	movl	$22, 440(%rsp)
	movl	$323, 432(%rsp)         # imm = 0x143
	movl	$23, 424(%rsp)
	movl	$321, 416(%rsp)         # imm = 0x141
	movl	$24, 408(%rsp)
	movl	$319, 400(%rsp)         # imm = 0x13F
	movl	$25, 392(%rsp)
	movl	$317, 384(%rsp)         # imm = 0x13D
	movl	$26, 376(%rsp)
	movl	$315, 368(%rsp)         # imm = 0x13B
	movl	$27, 360(%rsp)
	movl	$313, 352(%rsp)         # imm = 0x139
	movl	$28, 344(%rsp)
	movl	$311, 336(%rsp)         # imm = 0x137
	movl	$29, 328(%rsp)
	movl	$309, 320(%rsp)         # imm = 0x135
	movl	$30, 312(%rsp)
	movl	$307, 304(%rsp)         # imm = 0x133
	movl	$31, 296(%rsp)
	movl	$305, 288(%rsp)         # imm = 0x131
	movl	$32, 280(%rsp)
	movl	$303, 272(%rsp)         # imm = 0x12F
	movl	$33, 264(%rsp)
	movl	$301, 256(%rsp)         # imm = 0x12D
	movl	$34, 248(%rsp)
	movl	$299, 240(%rsp)         # imm = 0x12B
	movl	$35, 232(%rsp)
	movl	$297, 224(%rsp)         # imm = 0x129
	movl	$36, 216(%rsp)
	movl	$295, 208(%rsp)         # imm = 0x127
	movl	$37, 200(%rsp)
	movl	$293, 192(%rsp)         # imm = 0x125
	movl	$38, 184(%rsp)
	movl	$291, 176(%rsp)         # imm = 0x123
	movl	$39, 168(%rsp)
	movl	$289, 160(%rsp)         # imm = 0x121
	movl	$40, 152(%rsp)
	movl	$287, 144(%rsp)         # imm = 0x11F
	movl	$41, 136(%rsp)
	movl	$285, 128(%rsp)         # imm = 0x11D
	movl	$42, 120(%rsp)
	movl	$283, 112(%rsp)         # imm = 0x11B
	movl	$43, 104(%rsp)
	movl	$281, 96(%rsp)          # imm = 0x119
	movl	$44, 88(%rsp)
	movl	$279, 80(%rsp)          # imm = 0x117
	movl	$45, 72(%rsp)
	movl	$277, 64(%rsp)          # imm = 0x115
	movl	$46, 56(%rsp)
	movl	$275, 48(%rsp)          # imm = 0x113
	movl	$47, 40(%rsp)
	movl	$273, 32(%rsp)          # imm = 0x111
	movl	$48, 24(%rsp)
	movl	$271, 16(%rsp)          # imm = 0x10F
	movl	$49, 8(%rsp)
	movl	$269, (%rsp)            # imm = 0x10D
	movl	$367, %edi              # imm = 0x16F
	movl	$51, %esi
	movl	$368, %edx              # imm = 0x170
	xorl	%ecx, %ecx
	movl	$371, %r8d              # imm = 0x173
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$367, %edi              # imm = 0x16F
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	.loc	2 1582 11               # susan.c:1582:11
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	%eax, (%r13,%r12,8)
	.loc	2 1583 11               # susan.c:1583:11
	leaq	4(%r13,%r12,8), %rbx
	movl	$1, 776(%rsp)
	movl	$365, 768(%rsp)         # imm = 0x16D
	movl	$2, 760(%rsp)
	movl	$363, 752(%rsp)         # imm = 0x16B
	movl	$3, 744(%rsp)
	movl	$361, 736(%rsp)         # imm = 0x169
	movl	$4, 728(%rsp)
	movl	$359, 720(%rsp)         # imm = 0x167
	movl	$5, 712(%rsp)
	movl	$357, 704(%rsp)         # imm = 0x165
	movl	$6, 696(%rsp)
	movl	$355, 688(%rsp)         # imm = 0x163
	movl	$7, 680(%rsp)
	movl	$353, 672(%rsp)         # imm = 0x161
	movl	$8, 664(%rsp)
	movl	$351, 656(%rsp)         # imm = 0x15F
	movl	$9, 648(%rsp)
	movl	$349, 640(%rsp)         # imm = 0x15D
	movl	$10, 632(%rsp)
	movl	$347, 624(%rsp)         # imm = 0x15B
	movl	$11, 616(%rsp)
	movl	$345, 608(%rsp)         # imm = 0x159
	movl	$12, 600(%rsp)
	movl	$343, 592(%rsp)         # imm = 0x157
	movl	$13, 584(%rsp)
	movl	$341, 576(%rsp)         # imm = 0x155
	movl	$14, 568(%rsp)
	movl	$339, 560(%rsp)         # imm = 0x153
	movl	$15, 552(%rsp)
	movl	$337, 544(%rsp)         # imm = 0x151
	movl	$16, 536(%rsp)
	movl	$335, 528(%rsp)         # imm = 0x14F
	movl	$17, 520(%rsp)
	movl	$333, 512(%rsp)         # imm = 0x14D
	movl	$18, 504(%rsp)
	movl	$331, 496(%rsp)         # imm = 0x14B
	movl	$19, 488(%rsp)
	movl	$329, 480(%rsp)         # imm = 0x149
	movl	$20, 472(%rsp)
	movl	$327, 464(%rsp)         # imm = 0x147
	movl	$21, 456(%rsp)
	movl	$325, 448(%rsp)         # imm = 0x145
	movl	$22, 440(%rsp)
	movl	$323, 432(%rsp)         # imm = 0x143
	movl	$23, 424(%rsp)
	movl	$321, 416(%rsp)         # imm = 0x141
	movl	$24, 408(%rsp)
	movl	$319, 400(%rsp)         # imm = 0x13F
	movl	$25, 392(%rsp)
	movl	$317, 384(%rsp)         # imm = 0x13D
	movl	$26, 376(%rsp)
	movl	$315, 368(%rsp)         # imm = 0x13B
	movl	$27, 360(%rsp)
	movl	$313, 352(%rsp)         # imm = 0x139
	movl	$28, 344(%rsp)
	movl	$311, 336(%rsp)         # imm = 0x137
	movl	$29, 328(%rsp)
	movl	$309, 320(%rsp)         # imm = 0x135
	movl	$30, 312(%rsp)
	movl	$307, 304(%rsp)         # imm = 0x133
	movl	$31, 296(%rsp)
	movl	$305, 288(%rsp)         # imm = 0x131
	movl	$32, 280(%rsp)
	movl	$303, 272(%rsp)         # imm = 0x12F
	movl	$33, 264(%rsp)
	movl	$301, 256(%rsp)         # imm = 0x12D
	movl	$34, 248(%rsp)
	movl	$299, 240(%rsp)         # imm = 0x12B
	movl	$35, 232(%rsp)
	movl	$297, 224(%rsp)         # imm = 0x129
	movl	$36, 216(%rsp)
	movl	$295, 208(%rsp)         # imm = 0x127
	movl	$37, 200(%rsp)
	movl	$293, 192(%rsp)         # imm = 0x125
	movl	$38, 184(%rsp)
	movl	$291, 176(%rsp)         # imm = 0x123
	movl	$39, 168(%rsp)
	movl	$289, 160(%rsp)         # imm = 0x121
	movl	$40, 152(%rsp)
	movl	$287, 144(%rsp)         # imm = 0x11F
	movl	$41, 136(%rsp)
	movl	$285, 128(%rsp)         # imm = 0x11D
	movl	$42, 120(%rsp)
	movl	$283, 112(%rsp)         # imm = 0x11B
	movl	$43, 104(%rsp)
	movl	$281, 96(%rsp)          # imm = 0x119
	movl	$44, 88(%rsp)
	movl	$279, 80(%rsp)          # imm = 0x117
	movl	$45, 72(%rsp)
	movl	$277, 64(%rsp)          # imm = 0x115
	movl	$46, 56(%rsp)
	movl	$275, 48(%rsp)          # imm = 0x113
	movl	$47, 40(%rsp)
	movl	$273, 32(%rsp)          # imm = 0x111
	movl	$48, 24(%rsp)
	movl	$271, 16(%rsp)          # imm = 0x10F
	movl	$49, 8(%rsp)
	movl	$269, (%rsp)            # imm = 0x10D
	movl	$372, %edi              # imm = 0x174
	movl	$51, %esi
	movl	$370, %edx              # imm = 0x172
	xorl	%ecx, %ecx
	movl	$371, %r8d              # imm = 0x173
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$372, %edi              # imm = 0x174
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movq	-464(%rbp), %rax        # 8-byte Reload
	movl	%eax, 4(%r13,%r12,8)
	movq	-760(%rbp), %r15        # 8-byte Reload
	movq	-48(%rbp), %rbx         # 8-byte Reload
	leaq	5(%r15,%rbx), %rdi
	movl	$373, %esi              # imm = 0x175
	movl	$374, %edx              # imm = 0x176
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1584 29               # susan.c:1584:29
	movsbl	5(%r15,%rbx), %r15d
	.loc	2 1584 11 is_stmt 0     # susan.c:1584:11
	leaq	12(%r13,%r12,8), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movl	$0, 776(%rsp)
	movl	$373, 768(%rsp)         # imm = 0x175
	movl	$1, 760(%rsp)
	movl	$365, 752(%rsp)         # imm = 0x16D
	movl	$2, 744(%rsp)
	movl	$363, 736(%rsp)         # imm = 0x16B
	movl	$3, 728(%rsp)
	movl	$361, 720(%rsp)         # imm = 0x169
	movl	$4, 712(%rsp)
	movl	$359, 704(%rsp)         # imm = 0x167
	movl	$5, 696(%rsp)
	movl	$357, 688(%rsp)         # imm = 0x165
	movl	$6, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$7, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$8, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$9, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$10, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$11, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$12, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$13, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$14, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$15, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$16, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$17, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$18, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$19, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$20, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$21, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$22, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$23, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$24, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$25, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$26, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$27, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$28, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$29, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$30, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$31, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$32, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$33, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$34, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$35, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$36, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$37, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$38, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$39, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$40, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$41, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$42, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$43, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$44, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$45, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$46, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$47, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$48, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$375, %edi              # imm = 0x177
	movl	$51, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$49, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$375, %edi              # imm = 0x177
	movl	$4, %edx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	callq	_KStore
	movl	%r15d, 12(%r13,%r12,8)
	movq	-768(%rbp), %r15        # 8-byte Reload
	leaq	5(%r15,%rbx), %rdi
	movl	$376, %esi              # imm = 0x178
	movl	$377, %edx              # imm = 0x179
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1585 29 is_stmt 1     # susan.c:1585:29
	movsbl	5(%r15,%rbx), %r15d
	.loc	2 1585 11 is_stmt 0     # susan.c:1585:11
	leaq	16(%r13,%r12,8), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movl	$0, 776(%rsp)
	movl	$376, 768(%rsp)         # imm = 0x178
	movl	$1, 760(%rsp)
	movl	$365, 752(%rsp)         # imm = 0x16D
	movl	$2, 744(%rsp)
	movl	$363, 736(%rsp)         # imm = 0x16B
	movl	$3, 728(%rsp)
	movl	$361, 720(%rsp)         # imm = 0x169
	movl	$4, 712(%rsp)
	movl	$359, 704(%rsp)         # imm = 0x167
	movl	$5, 696(%rsp)
	movl	$357, 688(%rsp)         # imm = 0x165
	movl	$6, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$7, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$8, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$9, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$10, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$11, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$12, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$13, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$14, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$15, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$16, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$17, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$18, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$19, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$20, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$21, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$22, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$23, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$24, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$25, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$26, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$27, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$28, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$29, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$30, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$31, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$32, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$33, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$34, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$35, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$36, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$37, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$38, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$39, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$40, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$41, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$42, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$43, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$44, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$45, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$46, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$47, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$48, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$378, %edi              # imm = 0x17A
	movl	$51, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$49, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$378, %edi              # imm = 0x17A
	movl	$4, %edx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	callq	_KStore
	movl	%r15d, 16(%r13,%r12,8)
	movq	-440(%rbp), %r15        # 8-byte Reload
	leaq	5(%r15,%rbx), %rdi
	movl	$379, %esi              # imm = 0x17B
	movl	$380, %edx              # imm = 0x17C
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1586 28 is_stmt 1     # susan.c:1586:28
	movzbl	5(%r15,%rbx), %r15d
	.loc	2 1586 11 is_stmt 0     # susan.c:1586:11
	leaq	20(%r13,%r12,8), %rbx
	movl	$0, 776(%rsp)
	movl	$379, 768(%rsp)         # imm = 0x17B
	movl	$1, 760(%rsp)
	movl	$365, 752(%rsp)         # imm = 0x16D
	movl	$2, 744(%rsp)
	movl	$363, 736(%rsp)         # imm = 0x16B
	movl	$3, 728(%rsp)
	movl	$361, 720(%rsp)         # imm = 0x169
	movl	$4, 712(%rsp)
	movl	$359, 704(%rsp)         # imm = 0x167
	movl	$5, 696(%rsp)
	movl	$357, 688(%rsp)         # imm = 0x165
	movl	$6, 680(%rsp)
	movl	$355, 672(%rsp)         # imm = 0x163
	movl	$7, 664(%rsp)
	movl	$353, 656(%rsp)         # imm = 0x161
	movl	$8, 648(%rsp)
	movl	$351, 640(%rsp)         # imm = 0x15F
	movl	$9, 632(%rsp)
	movl	$349, 624(%rsp)         # imm = 0x15D
	movl	$10, 616(%rsp)
	movl	$347, 608(%rsp)         # imm = 0x15B
	movl	$11, 600(%rsp)
	movl	$345, 592(%rsp)         # imm = 0x159
	movl	$12, 584(%rsp)
	movl	$343, 576(%rsp)         # imm = 0x157
	movl	$13, 568(%rsp)
	movl	$341, 560(%rsp)         # imm = 0x155
	movl	$14, 552(%rsp)
	movl	$339, 544(%rsp)         # imm = 0x153
	movl	$15, 536(%rsp)
	movl	$337, 528(%rsp)         # imm = 0x151
	movl	$16, 520(%rsp)
	movl	$335, 512(%rsp)         # imm = 0x14F
	movl	$17, 504(%rsp)
	movl	$333, 496(%rsp)         # imm = 0x14D
	movl	$18, 488(%rsp)
	movl	$331, 480(%rsp)         # imm = 0x14B
	movl	$19, 472(%rsp)
	movl	$329, 464(%rsp)         # imm = 0x149
	movl	$20, 456(%rsp)
	movl	$327, 448(%rsp)         # imm = 0x147
	movl	$21, 440(%rsp)
	movl	$325, 432(%rsp)         # imm = 0x145
	movl	$22, 424(%rsp)
	movl	$323, 416(%rsp)         # imm = 0x143
	movl	$23, 408(%rsp)
	movl	$321, 400(%rsp)         # imm = 0x141
	movl	$24, 392(%rsp)
	movl	$319, 384(%rsp)         # imm = 0x13F
	movl	$25, 376(%rsp)
	movl	$317, 368(%rsp)         # imm = 0x13D
	movl	$26, 360(%rsp)
	movl	$315, 352(%rsp)         # imm = 0x13B
	movl	$27, 344(%rsp)
	movl	$313, 336(%rsp)         # imm = 0x139
	movl	$28, 328(%rsp)
	movl	$311, 320(%rsp)         # imm = 0x137
	movl	$29, 312(%rsp)
	movl	$309, 304(%rsp)         # imm = 0x135
	movl	$30, 296(%rsp)
	movl	$307, 288(%rsp)         # imm = 0x133
	movl	$31, 280(%rsp)
	movl	$305, 272(%rsp)         # imm = 0x131
	movl	$32, 264(%rsp)
	movl	$303, 256(%rsp)         # imm = 0x12F
	movl	$33, 248(%rsp)
	movl	$301, 240(%rsp)         # imm = 0x12D
	movl	$34, 232(%rsp)
	movl	$299, 224(%rsp)         # imm = 0x12B
	movl	$35, 216(%rsp)
	movl	$297, 208(%rsp)         # imm = 0x129
	movl	$36, 200(%rsp)
	movl	$295, 192(%rsp)         # imm = 0x127
	movl	$37, 184(%rsp)
	movl	$293, 176(%rsp)         # imm = 0x125
	movl	$38, 168(%rsp)
	movl	$291, 160(%rsp)         # imm = 0x123
	movl	$39, 152(%rsp)
	movl	$289, 144(%rsp)         # imm = 0x121
	movl	$40, 136(%rsp)
	movl	$287, 128(%rsp)         # imm = 0x11F
	movl	$41, 120(%rsp)
	movl	$285, 112(%rsp)         # imm = 0x11D
	movl	$42, 104(%rsp)
	movl	$283, 96(%rsp)          # imm = 0x11B
	movl	$43, 88(%rsp)
	movl	$281, 80(%rsp)          # imm = 0x119
	movl	$44, 72(%rsp)
	movl	$279, 64(%rsp)          # imm = 0x117
	movl	$45, 56(%rsp)
	movl	$277, 48(%rsp)          # imm = 0x115
	movl	$46, 40(%rsp)
	movl	$275, 32(%rsp)          # imm = 0x113
	movl	$47, 24(%rsp)
	movl	$273, 16(%rsp)          # imm = 0x111
	movl	$48, 8(%rsp)
	movl	$271, (%rsp)            # imm = 0x10F
	movl	$381, %edi              # imm = 0x17D
	movl	$51, %esi
	movl	$371, %edx              # imm = 0x173
	movl	$49, %ecx
	movl	$269, %r8d              # imm = 0x10D
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$381, %edi              # imm = 0x17D
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r15d, 20(%r13,%r12,8)
.Ltmp1706:
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	.loc	2 1587 11 is_stmt 1     # susan.c:1587:11
	incl	%r14d
.Ltmp1707:
	#DEBUG_VALUE: susan_corners:n <- R14D
	movq	%r14, -504(%rbp)        # 8-byte Spill
	movl	$2, 776(%rsp)
	movl	$365, 768(%rsp)         # imm = 0x16D
	movl	$3, 760(%rsp)
	movl	$363, 752(%rsp)         # imm = 0x16B
	movl	$4, 744(%rsp)
	movl	$361, 736(%rsp)         # imm = 0x169
	movl	$5, 728(%rsp)
	movl	$359, 720(%rsp)         # imm = 0x167
	movl	$6, 712(%rsp)
	movl	$357, 704(%rsp)         # imm = 0x165
	movl	$7, 696(%rsp)
	movl	$355, 688(%rsp)         # imm = 0x163
	movl	$8, 680(%rsp)
	movl	$353, 672(%rsp)         # imm = 0x161
	movl	$9, 664(%rsp)
	movl	$351, 656(%rsp)         # imm = 0x15F
	movl	$10, 648(%rsp)
	movl	$349, 640(%rsp)         # imm = 0x15D
	movl	$11, 632(%rsp)
	movl	$347, 624(%rsp)         # imm = 0x15B
	movl	$12, 616(%rsp)
	movl	$345, 608(%rsp)         # imm = 0x159
	movl	$13, 600(%rsp)
	movl	$343, 592(%rsp)         # imm = 0x157
	movl	$14, 584(%rsp)
	movl	$341, 576(%rsp)         # imm = 0x155
	movl	$15, 568(%rsp)
	movl	$339, 560(%rsp)         # imm = 0x153
	movl	$16, 552(%rsp)
	movl	$337, 544(%rsp)         # imm = 0x151
	movl	$17, 536(%rsp)
	movl	$335, 528(%rsp)         # imm = 0x14F
	movl	$18, 520(%rsp)
	movl	$333, 512(%rsp)         # imm = 0x14D
	movl	$19, 504(%rsp)
	movl	$331, 496(%rsp)         # imm = 0x14B
	movl	$20, 488(%rsp)
	movl	$329, 480(%rsp)         # imm = 0x149
	movl	$21, 472(%rsp)
	movl	$327, 464(%rsp)         # imm = 0x147
	movl	$22, 456(%rsp)
	movl	$325, 448(%rsp)         # imm = 0x145
	movl	$23, 440(%rsp)
	movl	$323, 432(%rsp)         # imm = 0x143
	movl	$24, 424(%rsp)
	movl	$321, 416(%rsp)         # imm = 0x141
	movl	$25, 408(%rsp)
	movl	$319, 400(%rsp)         # imm = 0x13F
	movl	$26, 392(%rsp)
	movl	$317, 384(%rsp)         # imm = 0x13D
	movl	$27, 376(%rsp)
	movl	$315, 368(%rsp)         # imm = 0x13B
	movl	$28, 360(%rsp)
	movl	$313, 352(%rsp)         # imm = 0x139
	movl	$29, 344(%rsp)
	movl	$311, 336(%rsp)         # imm = 0x137
	movl	$30, 328(%rsp)
	movl	$309, 320(%rsp)         # imm = 0x135
	movl	$31, 312(%rsp)
	movl	$307, 304(%rsp)         # imm = 0x133
	movl	$32, 296(%rsp)
	movl	$305, 288(%rsp)         # imm = 0x131
	movl	$33, 280(%rsp)
	movl	$303, 272(%rsp)         # imm = 0x12F
	movl	$34, 264(%rsp)
	movl	$301, 256(%rsp)         # imm = 0x12D
	movl	$35, 248(%rsp)
	movl	$299, 240(%rsp)         # imm = 0x12B
	movl	$36, 232(%rsp)
	movl	$297, 224(%rsp)         # imm = 0x129
	movl	$37, 216(%rsp)
	movl	$295, 208(%rsp)         # imm = 0x127
	movl	$38, 200(%rsp)
	movl	$293, 192(%rsp)         # imm = 0x125
	movl	$39, 184(%rsp)
	movl	$291, 176(%rsp)         # imm = 0x123
	movl	$40, 168(%rsp)
	movl	$289, 160(%rsp)         # imm = 0x121
	movl	$41, 152(%rsp)
	movl	$287, 144(%rsp)         # imm = 0x11F
	movl	$42, 136(%rsp)
	movl	$285, 128(%rsp)         # imm = 0x11D
	movl	$43, 120(%rsp)
	movl	$283, 112(%rsp)         # imm = 0x11B
	movl	$44, 104(%rsp)
	movl	$281, 96(%rsp)          # imm = 0x119
	movl	$45, 88(%rsp)
	movl	$279, 80(%rsp)          # imm = 0x117
	movl	$46, 72(%rsp)
	movl	$277, 64(%rsp)          # imm = 0x115
	movl	$47, 56(%rsp)
	movl	$275, 48(%rsp)          # imm = 0x113
	movl	$48, 40(%rsp)
	movl	$273, 32(%rsp)          # imm = 0x111
	movl	$49, 24(%rsp)
	movl	$271, 16(%rsp)          # imm = 0x10F
	movl	$50, 8(%rsp)
	movl	$269, (%rsp)            # imm = 0x10D
	movl	$417, -80(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1A1
	movl	$417, %edi              # imm = 0x1A1
	movl	$51, %esi
	movl	$414, %edx              # imm = 0x19E
	movl	$1, %ecx
	movl	$371, %r8d              # imm = 0x173
	movl	$50, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$3, 776(%rsp)
	movl	$365, 768(%rsp)         # imm = 0x16D
	movl	$4, 760(%rsp)
	movl	$363, 752(%rsp)         # imm = 0x16B
	movl	$5, 744(%rsp)
	movl	$361, 736(%rsp)         # imm = 0x169
	movl	$6, 728(%rsp)
	movl	$359, 720(%rsp)         # imm = 0x167
	movl	$7, 712(%rsp)
	movl	$357, 704(%rsp)         # imm = 0x165
	movl	$8, 696(%rsp)
	movl	$355, 688(%rsp)         # imm = 0x163
	movl	$9, 680(%rsp)
	movl	$353, 672(%rsp)         # imm = 0x161
	movl	$10, 664(%rsp)
	movl	$351, 656(%rsp)         # imm = 0x15F
	movl	$11, 648(%rsp)
	movl	$349, 640(%rsp)         # imm = 0x15D
	movl	$12, 632(%rsp)
	movl	$347, 624(%rsp)         # imm = 0x15B
	movl	$13, 616(%rsp)
	movl	$345, 608(%rsp)         # imm = 0x159
	movl	$14, 600(%rsp)
	movl	$343, 592(%rsp)         # imm = 0x157
	movl	$15, 584(%rsp)
	movl	$341, 576(%rsp)         # imm = 0x155
	movl	$16, 568(%rsp)
	movl	$339, 560(%rsp)         # imm = 0x153
	movl	$17, 552(%rsp)
	movl	$337, 544(%rsp)         # imm = 0x151
	movl	$18, 536(%rsp)
	movl	$335, 528(%rsp)         # imm = 0x14F
	movl	$19, 520(%rsp)
	movl	$333, 512(%rsp)         # imm = 0x14D
	movl	$20, 504(%rsp)
	movl	$331, 496(%rsp)         # imm = 0x14B
	movl	$21, 488(%rsp)
	movl	$329, 480(%rsp)         # imm = 0x149
	movl	$22, 472(%rsp)
	movl	$327, 464(%rsp)         # imm = 0x147
	movl	$23, 456(%rsp)
	movl	$325, 448(%rsp)         # imm = 0x145
	movl	$24, 440(%rsp)
	movl	$323, 432(%rsp)         # imm = 0x143
	movl	$25, 424(%rsp)
	movl	$321, 416(%rsp)         # imm = 0x141
	movl	$26, 408(%rsp)
	movl	$319, 400(%rsp)         # imm = 0x13F
	movl	$27, 392(%rsp)
	movl	$317, 384(%rsp)         # imm = 0x13D
	movl	$28, 376(%rsp)
	movl	$315, 368(%rsp)         # imm = 0x13B
	movl	$29, 360(%rsp)
	movl	$313, 352(%rsp)         # imm = 0x139
	movl	$30, 344(%rsp)
	movl	$311, 336(%rsp)         # imm = 0x137
	movl	$31, 328(%rsp)
	movl	$309, 320(%rsp)         # imm = 0x135
	movl	$32, 312(%rsp)
	movl	$307, 304(%rsp)         # imm = 0x133
	movl	$33, 296(%rsp)
	movl	$305, 288(%rsp)         # imm = 0x131
	movl	$34, 280(%rsp)
	movl	$303, 272(%rsp)         # imm = 0x12F
	movl	$35, 264(%rsp)
	movl	$301, 256(%rsp)         # imm = 0x12D
	movl	$36, 248(%rsp)
	movl	$299, 240(%rsp)         # imm = 0x12B
	movl	$37, 232(%rsp)
	movl	$297, 224(%rsp)         # imm = 0x129
	movl	$38, 216(%rsp)
	movl	$295, 208(%rsp)         # imm = 0x127
	movl	$39, 200(%rsp)
	movl	$293, 192(%rsp)         # imm = 0x125
	movl	$40, 184(%rsp)
	movl	$291, 176(%rsp)         # imm = 0x123
	movl	$41, 168(%rsp)
	movl	$289, 160(%rsp)         # imm = 0x121
	movl	$42, 152(%rsp)
	movl	$287, 144(%rsp)         # imm = 0x11F
	movl	$43, 136(%rsp)
	movl	$285, 128(%rsp)         # imm = 0x11D
	movl	$44, 120(%rsp)
	movl	$283, 112(%rsp)         # imm = 0x11B
	movl	$45, 104(%rsp)
	movl	$281, 96(%rsp)          # imm = 0x119
	movl	$46, 88(%rsp)
	movl	$279, 80(%rsp)          # imm = 0x117
	movl	$47, 72(%rsp)
	movl	$277, 64(%rsp)          # imm = 0x115
	movl	$48, 56(%rsp)
	movl	$275, 48(%rsp)          # imm = 0x113
	movl	$49, 40(%rsp)
	movl	$273, 32(%rsp)          # imm = 0x111
	movl	$50, 24(%rsp)
	movl	$271, 16(%rsp)          # imm = 0x10F
	movl	$51, 8(%rsp)
	movl	$269, (%rsp)            # imm = 0x10D
	movl	$487, %edi              # imm = 0x1E7
	movl	$51, %esi
	movl	$414, %edx              # imm = 0x19E
	movl	$2, %ecx
	movl	$371, %r8d              # imm = 0x173
	movl	$51, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1588 14               # susan.c:1588:14
	cmpl	$15000, %r14d           # imm = 0x3A98
.Ltmp1708:
	#DEBUG_VALUE: susan_corners:n <- [RBP+-504]
	jne	.LBB16_155
# BB#154:                               # %if.then1447
                                        #   in Loop: Header=BB16_52 Depth=2
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
	#DEBUG_VALUE: susan_corners:j <- 5
	movl	$487, %edi              # imm = 0x1E7
	callq	_KPushCDep
	xorl	%esi, %esi
	movabsq	$-644353428324144536, %rdi # imm = 0xF70ECBF88AEF2A68
	callq	_KPrepCall
	xorl	%esi, %esi
	movabsq	$-7131228994629441968, %r15 # imm = 0x9D08C90323256650
	.loc	2 1589 13               # susan.c:1589:13
.Ltmp1709:
	movq	%r15, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
.Ltmp1710:
	#DEBUG_VALUE: exit_error:j <- 1
	#DEBUG_VALUE: exit_error:i <- 0
	xorl	%esi, %esi
	movq	%r15, %rdi
	callq	_KExitRegion
	callq	_KPopCDep
	movl	$15000, %eax            # imm = 0x3A98
	movq	%rax, -504(%rbp)        # 8-byte Spill
.Ltmp1711:
.LBB16_155:                             # %for.inc1451
                                        #   in Loop: Header=BB16_52 Depth=2
	movl	$419, %ebx              # imm = 0x1A3
	movl	$420, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A4
	movl	$421, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A5
	movl	$422, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A6
	movl	$423, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A7
	movl	$424, %r12d             # imm = 0x1A8
	movl	$425, %r14d             # imm = 0x1A9
	movl	$426, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AA
	movl	$427, -424(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AB
	movl	$428, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AC
	movl	$429, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AD
	movl	$431, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1AF
	movl	$430, %r13d             # imm = 0x1AE
	movl	$432, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B0
	movl	$433, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B1
	movl	$434, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B2
	movl	$435, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B3
	movl	$436, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B4
	movl	$437, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B5
	movl	$438, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B6
	movl	$439, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B7
	movl	$440, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B8
	movl	$441, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1B9
	movl	$442, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BA
	movl	$443, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BB
	movl	$444, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BC
	movl	$445, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BD
	movl	$447, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BF
	movl	$448, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C0
	movl	$449, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C1
	movl	$450, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C2
	movl	$446, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1BE
	movl	$451, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C3
	movl	$452, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C4
	movl	$453, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C5
	movl	$454, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C6
	movl	$455, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C7
	movl	$456, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C8
	movl	$457, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1C9
	movl	$458, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CA
	movl	$459, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CB
	movl	$460, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CC
	movl	$461, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CD
	movl	$462, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CE
	movl	$463, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1CF
	movl	$464, -96(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1D0
	movl	$465, -88(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1D1
	jmp	.LBB16_156
.LBB16_158:                             # %for.cond930.pre_exit.for.end1456
	#DEBUG_VALUE: susan_corners:corner_list <- [RBP+-720]
	#DEBUG_VALUE: susan_corners:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners:i <- 5
.Ltmp1712:
	#DEBUG_VALUE: susan_corners:n <- 0
	movl	$1, %esi
	movabsq	$-2647907730456134883, %rdi # imm = 0xDB40BDF2C826BB1D
	callq	_KExitRegion
	movl	$1, %edi
	callq	_KWork
	.loc	2 1595 3                # susan.c:1595:3
	movq	-504(%rbp), %rax        # 8-byte Reload
	cltq
	leaq	(%rax,%rax,2), %r14
	movq	-720(%rbp), %rbx        # 8-byte Reload
.Ltmp1713:
	#DEBUG_VALUE: susan_corners:corner_list <- RBX
	leaq	8(%rbx,%r14,8), %rdi
	movl	$4, %esi
	callq	_KStoreConst
	movl	$7, 8(%rbx,%r14,8)
	xorl	%esi, %esi
	movabsq	$-5914476984468875494, %rdi # imm = 0xADEB8E84D482571A
	addq	$2056, %rsp             # imm = 0x808
	popq	%rbx
.Ltmp1714:
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp1715:
.Ltmp1716:
	.size	susan_corners, .Ltmp1716-susan_corners
.Lfunc_end16:
	.cfi_endproc

	.globl	susan_corners_quick
	.align	16, 0x90
	.type	susan_corners_quick,@function
susan_corners_quick:                    # @susan_corners_quick
.Lfunc_begin17:
	.loc	2 1601 0                # susan.c:1601:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1717:
	.cfi_def_cfa_offset 16
.Ltmp1718:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1719:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1672, %rsp             # imm = 0x688
.Ltmp1720:
	.cfi_offset %rbx, -56
.Ltmp1721:
	.cfi_offset %r12, -48
.Ltmp1722:
	.cfi_offset %r13, -40
.Ltmp1723:
	.cfi_offset %r14, -32
.Ltmp1724:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: susan_corners_quick:in <- RDI
	#DEBUG_VALUE: susan_corners_quick:r <- RSI
	#DEBUG_VALUE: susan_corners_quick:bp <- RDX
	#DEBUG_VALUE: susan_corners_quick:max_no <- ECX
	#DEBUG_VALUE: susan_corners_quick:corner_list <- R8
	#DEBUG_VALUE: susan_corners_quick:x_size <- R9D
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	movl	%r9d, %r13d
.Ltmp1725:
	#DEBUG_VALUE: susan_corners_quick:x_size <- R13D
	movq	%r8, -520(%rbp)         # 8-byte Spill
.Ltmp1726:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	movl	%ecx, -280(%rbp)        # 4-byte Spill
.Ltmp1727:
	#DEBUG_VALUE: susan_corners_quick:max_no <- [RBP+-280]
	movq	%rdx, -112(%rbp)        # 8-byte Spill
.Ltmp1728:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	movq	%rsi, %rbx
.Ltmp1729:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	movq	%rbx, -432(%rbp)        # 8-byte Spill
	movq	%rdi, %r14
.Ltmp1730:
	#DEBUG_VALUE: susan_corners_quick:in <- R14
	movq	%r14, -544(%rbp)        # 8-byte Spill
	movl	16(%rbp), %r15d
	movabsq	$616325544190534889, %rdi # imm = 0x88DA0D12779E4E9
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$440, %edi              # imm = 0x1B8
	movl	$4, %esi
	callq	_KPrepRTable
	movl	$2, %edi
	callq	_KWork
	movl	$3, %edi
	callq	_KDeqArg
	movl	$2, %edi
	callq	_KDeqArg
	movl	$1, %edi
	callq	_KDeqArg
	.loc	2 1605 17 prologue_end  # susan.c:1605:17
.Ltmp1731:
	movl	%r15d, %r12d
	imull	%r13d, %r12d
	movabsq	$3854183169786403627, %rdi # imm = 0x357CCF2C2E685B2B
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$4, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$3, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$4, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	xorl	%esi, %esi
	.loc	2 1605 3 is_stmt 0      # susan.c:1605:3
	movq	%rbx, %rdi
	movl	%r12d, %edx
	callq	wccmemset
.Ltmp1732:
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	.loc	2 1608 8 is_stmt 1      # susan.c:1608:8
	movslq	%r13d, %r12
	movq	%r12, -456(%rbp)        # 8-byte Spill
	movl	$1, %esi
	movabsq	$-3251964215135791327, %rdi # imm = 0xD2DEB3C6A68C9721
	callq	_KEnterRegion
	.loc	2 1608 14 is_stmt 0     # susan.c:1608:14
.Ltmp1733:
	addl	$-7, %r15d
	.loc	2 1608 12               # susan.c:1608:12
	movslq	%r15d, %rax
	.loc	2 1610 16 is_stmt 1     # susan.c:1610:16
.Ltmp1734:
	movq	%rax, -448(%rbp)        # 8-byte Spill
	leal	-7(%r12), %eax
	.loc	2 1610 14 is_stmt 0     # susan.c:1610:14
	cltq
	movq	%rax, -64(%rbp)         # 8-byte Spill
	imulq	$7, %r12, %rax
	leaq	(%rbx,%rax), %rcx
	movq	%rcx, -536(%rbp)        # 8-byte Spill
.Ltmp1735:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	addq	%r14, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	leal	-6(%r12), %eax
	cltq
	leaq	(%rax,%rax), %rcx
	leaq	(,%r12,4), %rdx
	leaq	(%rdx,%rax,2), %rdx
	addq	%r14, %rdx
	movq	%rdx, -528(%rbp)        # 8-byte Spill
	leal	-3(%r12), %edx
	movslq	%edx, %rdx
	leal	-5(%r12), %esi
	movslq	%esi, %rdi
	leaq	(%rdi,%rdi), %rsi
	leaq	36(%rsi,%rdx,2), %rbx
	movq	%rbx, -312(%rbp)        # 8-byte Spill
	leaq	35(%rsi,%rdx,2), %rbx
	movq	%rbx, -320(%rbp)        # 8-byte Spill
	leaq	34(%rsi,%rdx,2), %rsi
	movq	%rsi, -328(%rbp)        # 8-byte Spill
	leaq	(%rdx,%r12,4), %rdx
	addq	%r14, %rdx
	movq	%rdx, -160(%rbp)        # 8-byte Spill
	leaq	34(%rcx,%rdi,2), %rdx
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	leaq	33(%rcx,%rdi,2), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	leaq	32(%rcx,%rdi,2), %rdx
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	leaq	31(%rcx,%rdi,2), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	leaq	30(%rcx,%rdi,2), %rcx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	leaq	30(%rdi,%rax,2), %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	leaq	29(%rdi,%rax,2), %rcx
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	leaq	28(%rdi,%rax,2), %rcx
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	leaq	27(%rdi,%rax,2), %rcx
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	leaq	26(%rdi,%rax,2), %rcx
	movq	%rcx, -408(%rbp)        # 8-byte Spill
	leaq	25(%rdi,%rax,2), %rcx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	leaq	24(%rdi,%rax,2), %rcx
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	leaq	24(%rdi,%rax), %rcx
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	leaq	23(%rdi,%rax), %rcx
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	leaq	22(%rdi,%rax), %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	leaq	20(%rdi,%rax), %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	leaq	19(%rdi,%rax), %rcx
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	leaq	18(%rdi,%rax), %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	addq	$12, %rdi
	movq	%rdi, -304(%rbp)        # 8-byte Spill
	leaq	(%r14,%r12,4), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
.Ltmp1736:
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	movl	$7, %r15d
	movl	$6, %eax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	movabsq	$-2853806452918082912, %rbx # imm = 0xD8653E26B419A2A0
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	jmp	.LBB17_1
.Ltmp1737:
	.align	16, 0x90
.LBB17_25:                              # %for.cond1.pre_exit.for.inc354
                                        #   in Loop: Header=BB17_1 Depth=1
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- [RBP+-280]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	movl	$1, %esi
	movabsq	$2562856678099083450, %rdi # imm = 0x23911891F45560BA
	callq	_KExitRegion
	movl	$122, %r14d
	movl	$122, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-512(%rbp), %r15        # 8-byte Reload
	.loc	2 1608 3 is_stmt 1      # susan.c:1608:3
	incq	%r15
	movl	$363, %r12d             # imm = 0x16B
	movl	$363, %edi              # imm = 0x16B
	movl	$123, %esi
	movl	$1, %edx
	movl	$122, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$5583795650748522656, %rdi # imm = 0x4D7DA08F653CA0A0
	callq	_KExitRegion
	movq	-456(%rbp), %rax        # 8-byte Reload
	addq	%rax, -504(%rbp)        # 8-byte Folded Spill
	addq	%rax, -312(%rbp)        # 8-byte Folded Spill
	addq	%rax, -320(%rbp)        # 8-byte Folded Spill
	addq	%rax, -328(%rbp)        # 8-byte Folded Spill
	addq	%rax, -336(%rbp)        # 8-byte Folded Spill
	addq	%rax, -344(%rbp)        # 8-byte Folded Spill
	addq	%rax, -352(%rbp)        # 8-byte Folded Spill
	addq	%rax, -360(%rbp)        # 8-byte Folded Spill
	addq	%rax, -368(%rbp)        # 8-byte Folded Spill
	addq	%rax, -376(%rbp)        # 8-byte Folded Spill
	addq	%rax, -384(%rbp)        # 8-byte Folded Spill
	addq	%rax, -392(%rbp)        # 8-byte Folded Spill
	addq	%rax, -400(%rbp)        # 8-byte Folded Spill
	addq	%rax, -408(%rbp)        # 8-byte Folded Spill
	addq	%rax, -416(%rbp)        # 8-byte Folded Spill
	addq	%rax, -424(%rbp)        # 8-byte Folded Spill
	addq	%rax, -440(%rbp)        # 8-byte Folded Spill
	addq	%rax, -464(%rbp)        # 8-byte Folded Spill
	addq	%rax, -472(%rbp)        # 8-byte Folded Spill
	addq	%rax, -480(%rbp)        # 8-byte Folded Spill
	addq	%rax, -488(%rbp)        # 8-byte Folded Spill
	addq	%rax, -496(%rbp)        # 8-byte Folded Spill
	addq	%rax, -304(%rbp)        # 8-byte Folded Spill
.Ltmp1738:
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- [RBP+-280]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	movl	$123, %edi
	movl	%r12d, %esi
	movl	%r14d, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$122, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$123, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$123, %edi
	movl	$122, %esi
	callq	_KPhiAddCond
	movl	$123, %edi
	movl	$123, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 1608 3 is_stmt 0      # susan.c:1608:3
	cmpq	-448(%rbp), %r15        # 8-byte Folded Reload
	jge	.LBB17_26
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- [RBP+-280]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	movq	%r15, -512(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movabsq	$5583795650748522656, %rdi # imm = 0x4D7DA08F653CA0A0
	callq	_KEnterRegion
	movl	$122, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	callq	_KPopCDep
	movl	$1, %esi
	movabsq	$2562856678099083450, %rdi # imm = 0x23911891F45560BA
	callq	_KEnterRegion
	xorl	%r14d, %r14d
	movq	-304(%rbp), %rax        # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, -176(%rbp)        # 8-byte Spill
	movq	-408(%rbp), %rax        # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	-384(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	-376(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, -240(%rbp)        # 8-byte Spill
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, -248(%rbp)        # 8-byte Spill
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, -264(%rbp)        # 8-byte Spill
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, -256(%rbp)        # 8-byte Spill
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	xorl	%r12d, %r12d
	movl	$7, %r13d
	jmp	.LBB17_3
	.align	16, 0x90
.LBB17_24:                              # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
.Ltmp1739:
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:max_no <- [RBP+-280]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	movl	$124, %r14d
	movl	$124, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movq	-120(%rbp), %r13        # 8-byte Reload
	.loc	2 1610 5 is_stmt 1      # susan.c:1610:5
.Ltmp1740:
	incq	%r13
	movl	$364, %r12d             # imm = 0x16C
	movl	$364, %edi              # imm = 0x16C
	movl	$125, %esi
	movl	$1, %edx
	movl	$124, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-2853806452918082912, %rbx # imm = 0xD8653E26B419A2A0
	movq	%rbx, %rdi
	callq	_KExitRegion
	incq	-72(%rbp)               # 8-byte Folded Spill
	incq	-256(%rbp)              # 8-byte Folded Spill
	incq	-272(%rbp)              # 8-byte Folded Spill
	incq	-264(%rbp)              # 8-byte Folded Spill
	incq	-216(%rbp)              # 8-byte Folded Spill
	incq	-248(%rbp)              # 8-byte Folded Spill
	incq	-240(%rbp)              # 8-byte Folded Spill
	incq	-232(%rbp)              # 8-byte Folded Spill
	incq	-224(%rbp)              # 8-byte Folded Spill
	incq	-152(%rbp)              # 8-byte Folded Spill
	incq	-208(%rbp)              # 8-byte Folded Spill
	incq	-200(%rbp)              # 8-byte Folded Spill
	incq	-192(%rbp)              # 8-byte Folded Spill
	incq	-184(%rbp)              # 8-byte Folded Spill
	incq	-176(%rbp)              # 8-byte Folded Spill
	incq	-168(%rbp)              # 8-byte Folded Spill
	incq	-56(%rbp)               # 8-byte Folded Spill
	incq	-144(%rbp)              # 8-byte Folded Spill
	incq	-136(%rbp)              # 8-byte Folded Spill
	incq	-104(%rbp)              # 8-byte Folded Spill
	incq	-96(%rbp)               # 8-byte Folded Spill
	incq	-88(%rbp)               # 8-byte Folded Spill
	incq	-80(%rbp)               # 8-byte Folded Spill
.Ltmp1741:
.LBB17_3:                               # %for.cond1
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- [RBP+-280]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	movl	$122, %edi
	callq	_KPushCDep
	movl	$125, %edi
	movl	$122, %ecx
	movl	%r12d, %esi
	movl	%r14d, %edx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$1, (%rsp)
	movl	$124, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$122, %ecx
	movl	$2, %r8d
	movl	$125, %r9d
	callq	_KTimestamp3
	movl	$125, %edi
	movl	$124, %esi
	callq	_KPhiAddCond
	movl	$125, %edi
	movl	$125, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 1610 5 is_stmt 0      # susan.c:1610:5
	cmpq	-64(%rbp), %r13         # 8-byte Folded Reload
	jge	.LBB17_25
# BB#4:                                 # %for.body4
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- [RBP+-280]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	movq	%r13, -120(%rbp)        # 8-byte Spill
	movl	$2, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$124, %edi
	callq	_KPushCDep
	movl	$194, %edi
	callq	_KWork
.Ltmp1742:
	#DEBUG_VALUE: susan_corners_quick:n <- 100
	movq	-288(%rbp), %rbx        # 8-byte Reload
	movq	-72(%rbp), %r13         # 8-byte Reload
	leaq	1(%rbx,%r13), %rdi
	movl	$5, %esi
	movl	$6, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1613 10 is_stmt 1     # susan.c:1613:10
.Ltmp1743:
	movzbl	1(%rbx,%r13), %eax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rax, %r14
	movq	-296(%rbp), %r15        # 8-byte Reload
	leaq	(%r15,%r13), %rdi
	movl	$7, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1615 12               # susan.c:1615:12
	movzbl	(%r15,%r13), %eax
	movq	%r14, %rbx
	movq	%r14, %r12
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1744:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$8, %esi
	movl	$9, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1615 10 is_stmt 0     # susan.c:1615:10
	movzbl	(%r14,%rbx), %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	leaq	1(%r15,%r13), %rdi
	movl	$10, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1616 12 is_stmt 1     # susan.c:1616:12
	movzbl	1(%r15,%r13), %eax
	movq	%r12, %rbx
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$11, %esi
	movl	$12, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1616 10 is_stmt 0     # susan.c:1616:10
	movzbl	(%r14,%rbx), %r12d
	.loc	2 1615 7 is_stmt 1      # susan.c:1615:7
	addl	-128(%rbp), %r12d       # 4-byte Folded Reload
	leaq	2(%r15,%r13), %rdi
	movl	$13, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1617 12               # susan.c:1617:12
	movzbl	2(%r15,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$14, %esi
	movl	$15, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1617 10 is_stmt 0     # susan.c:1617:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 1616 7 is_stmt 1      # susan.c:1616:7
	addl	%r12d, %r15d
	movq	-160(%rbp), %r12        # 8-byte Reload
	leaq	2(%r12,%r13), %rdi
	movl	$16, %esi
	movl	$17, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1620 12               # susan.c:1620:12
	movzbl	2(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$18, %esi
	movl	$19, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1620 10 is_stmt 0     # susan.c:1620:10
	movzbl	(%r14,%rbx), %eax
	.loc	2 1617 7 is_stmt 1      # susan.c:1617:7
	addl	%r15d, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	leaq	3(%r12,%r13), %rdi
	movl	$20, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1621 12               # susan.c:1621:12
	movzbl	3(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$21, %esi
	movl	$22, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1621 10 is_stmt 0     # susan.c:1621:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 1620 7 is_stmt 1      # susan.c:1620:7
	addl	-128(%rbp), %r15d       # 4-byte Folded Reload
	leaq	4(%r12,%r13), %rdi
	movl	$23, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1622 12               # susan.c:1622:12
	movzbl	4(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$24, %esi
	movl	$25, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1622 10 is_stmt 0     # susan.c:1622:10
	movzbl	(%r14,%rbx), %eax
	.loc	2 1621 7 is_stmt 1      # susan.c:1621:7
	addl	%r15d, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	leaq	5(%r12,%r13), %rdi
	movl	$26, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1623 12               # susan.c:1623:12
	movzbl	5(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$27, %esi
	movl	$28, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1623 10 is_stmt 0     # susan.c:1623:10
	movzbl	(%r14,%rbx), %r15d
	.loc	2 1622 7 is_stmt 1      # susan.c:1622:7
	addl	-128(%rbp), %r15d       # 4-byte Folded Reload
	leaq	6(%r12,%r13), %rdi
	movl	$29, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1624 12               # susan.c:1624:12
	movzbl	6(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r14,%rbx), %rdi
	movl	$30, %esi
	movl	$31, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1624 10 is_stmt 0     # susan.c:1624:10
	movzbl	(%r14,%rbx), %eax
	.loc	2 1623 7 is_stmt 1      # susan.c:1623:7
	addl	%r15d, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	movq	%r14, %r15
.Ltmp1745:
	#DEBUG_VALUE: susan_corners_quick:bp <- R15
	movq	-80(%rbp), %r13         # 8-byte Reload
	leaq	(%r12,%r13), %rdi
	movl	$32, %esi
	movl	$33, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1627 12               # susan.c:1627:12
	movzbl	(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$34, %esi
	movl	$35, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1627 10 is_stmt 0     # susan.c:1627:10
	movzbl	(%r15,%rbx), %r14d
	.loc	2 1624 7 is_stmt 1      # susan.c:1624:7
	addl	-128(%rbp), %r14d       # 4-byte Folded Reload
	leaq	1(%r12,%r13), %rdi
	movl	$36, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1628 12               # susan.c:1628:12
	movzbl	1(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$37, %esi
	movl	$38, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1628 10 is_stmt 0     # susan.c:1628:10
	movzbl	(%r15,%rbx), %eax
	.loc	2 1627 7 is_stmt 1      # susan.c:1627:7
	addl	%r14d, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	leaq	2(%r12,%r13), %rdi
	movl	$39, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1629 12               # susan.c:1629:12
	movzbl	2(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$40, %esi
	movl	$41, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1629 10 is_stmt 0     # susan.c:1629:10
	movzbl	(%r15,%rbx), %r14d
	.loc	2 1628 7 is_stmt 1      # susan.c:1628:7
	addl	-128(%rbp), %r14d       # 4-byte Folded Reload
	leaq	3(%r12,%r13), %rdi
	movl	$42, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1630 12               # susan.c:1630:12
	movzbl	3(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$43, %esi
	movl	$44, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1630 10 is_stmt 0     # susan.c:1630:10
	movzbl	(%r15,%rbx), %eax
	.loc	2 1629 7 is_stmt 1      # susan.c:1629:7
	addl	%r14d, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	leaq	4(%r12,%r13), %rdi
	movl	$45, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1631 12               # susan.c:1631:12
	movzbl	4(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$46, %esi
	movl	$47, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1631 10 is_stmt 0     # susan.c:1631:10
	movzbl	(%r15,%rbx), %r14d
	.loc	2 1630 7 is_stmt 1      # susan.c:1630:7
	addl	-128(%rbp), %r14d       # 4-byte Folded Reload
	leaq	5(%r12,%r13), %rdi
	movl	$48, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1632 12               # susan.c:1632:12
	movzbl	5(%r12,%r13), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r15,%rbx), %rdi
	movl	$49, %esi
	movl	$50, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1632 10 is_stmt 0     # susan.c:1632:10
	movzbl	(%r15,%rbx), %eax
	.loc	2 1631 7 is_stmt 1      # susan.c:1631:7
	addl	%r14d, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	leaq	6(%r12,%r13), %rdi
	movl	$51, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1633 12               # susan.c:1633:12
	movzbl	6(%r12,%r13), %eax
	movq	%r15, %r13
.Ltmp1746:
	#DEBUG_VALUE: susan_corners_quick:bp <- R13
	movq	-48(%rbp), %r15         # 8-byte Reload
	movq	%r15, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$52, %esi
	movl	$53, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1633 10 is_stmt 0     # susan.c:1633:10
	movzbl	(%r13,%rbx), %r14d
	.loc	2 1632 7 is_stmt 1      # susan.c:1632:7
	addl	-128(%rbp), %r14d       # 4-byte Folded Reload
	movq	-88(%rbp), %rax         # 8-byte Reload
	leaq	(%r12,%rax), %rdi
	movl	$54, %esi
	movl	$55, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1636 12               # susan.c:1636:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-6(%r12,%rax), %eax
	movq	%r15, %rbx
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$56, %esi
	movl	$57, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1636 10 is_stmt 0     # susan.c:1636:10
	movzbl	(%r13,%rbx), %r15d
	.loc	2 1633 7 is_stmt 1      # susan.c:1633:7
	addl	%r14d, %r15d
	movq	-96(%rbp), %rax         # 8-byte Reload
	leaq	(%r12,%rax), %rdi
	movl	$58, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1637 12               # susan.c:1637:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-5(%r12,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$59, %esi
	movl	$60, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1637 10 is_stmt 0     # susan.c:1637:10
	movzbl	(%r13,%rbx), %r14d
	.loc	2 1636 7 is_stmt 1      # susan.c:1636:7
	addl	%r15d, %r14d
	movq	-104(%rbp), %rax        # 8-byte Reload
	leaq	(%r12,%rax), %rdi
	movl	$61, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1638 12               # susan.c:1638:12
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-4(%r12,%rax), %eax
	movq	%r12, %r15
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	leaq	(%r13,%rbx), %rdi
	movl	$62, %esi
	movl	$63, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1638 10 is_stmt 0     # susan.c:1638:10
	movzbl	(%r13,%rbx), %eax
.Ltmp1747:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1638 7                # susan.c:1638:7
	leal	100(%rax,%r14), %r12d
.Ltmp1748:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$3, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$4, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$5, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$6, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$7, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$8, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$9, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$10, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$11, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$8, (%rsp)
	movl	$420, %edi              # imm = 0x1A4
	movl	$20, %esi
	movl	$1, %edx
	movl	$1, %ecx
	movl	$124, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	movl	-280(%rbp), %r13d       # 4-byte Reload
.Ltmp1749:
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	.loc	2 1639 11 is_stmt 1     # susan.c:1639:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1750:
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$420, %edi              # imm = 0x1A4
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movq	-136(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rdi
	movl	$64, %esi
	movl	$1, %edx
	callq	_KLoad0
	.loc	2 1641 14               # susan.c:1641:14
.Ltmp1751:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-2(%r15,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1752:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$65, %esi
	movl	$66, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1641 12 is_stmt 0     # susan.c:1641:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1753:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1641 9                # susan.c:1641:9
	addl	%r12d, %r14d
.Ltmp1754:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$4, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$5, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$6, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$9, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$12, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$14, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$15, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$16, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$17, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$18, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$19, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$20, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$21, 8(%rsp)
	movl	$8, (%rsp)
	movl	$421, %edi              # imm = 0x1A5
	movl	$21, %esi
	movl	$1, %edx
	movl	$3, %ecx
	movl	$124, %r8d
	movl	$21, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1642 11 is_stmt 1     # susan.c:1642:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1755:
# BB#6:                                 # %if.then154
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movq	-144(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %r12
	movl	$421, %edi              # imm = 0x1A5
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$67, %esi
	movl	$1, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1643 14               # susan.c:1643:14
.Ltmp1756:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r15,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1757:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$68, %esi
	movl	$69, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1643 12 is_stmt 0     # susan.c:1643:12
	movzbl	(%r12,%rbx), %r12d
.Ltmp1758:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1643 9                # susan.c:1643:9
	addl	%r14d, %r12d
.Ltmp1759:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$4, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$6, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$7, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$8, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$9, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$10, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$11, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$12, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$13, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$21, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$22, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$23, 8(%rsp)
	movl	$8, (%rsp)
	movl	$422, %edi              # imm = 0x1A6
	movl	$22, %esi
	movl	$1, %edx
	movl	$5, %ecx
	movl	$124, %r8d
	movl	$23, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1644 11 is_stmt 1     # susan.c:1644:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1760:
# BB#7:                                 # %if.then164
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movq	-56(%rbp), %rbx         # 8-byte Reload
	leaq	(%r15,%rbx), %r14
	movl	$422, %edi              # imm = 0x1A6
	callq	_KPushCDep
	movl	$70, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	movl	$11, %edi
	callq	_KWork
	.loc	2 1645 14               # susan.c:1645:14
.Ltmp1761:
	movzbl	(%r15,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1762:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$71, %esi
	movl	$72, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1645 12 is_stmt 0     # susan.c:1645:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1763:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1645 9                # susan.c:1645:9
	addl	%r12d, %r14d
.Ltmp1764:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$4, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$6, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$8, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$9, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$10, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$11, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$12, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$13, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$14, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$15, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$16, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$17, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$18, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$19, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$20, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$21, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$22, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$23, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$24, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$25, 8(%rsp)
	movl	$8, (%rsp)
	movl	$423, %edi              # imm = 0x1A7
	movl	$23, %esi
	movl	$1, %edx
	movl	$7, %ecx
	movl	$124, %r8d
	movl	$25, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1646 11 is_stmt 1     # susan.c:1646:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1765:
# BB#8:                                 # %if.then173
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$423, %edi              # imm = 0x1A7
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %rdi
	movl	$73, %esi
	movl	$74, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1649 14               # susan.c:1649:14
.Ltmp1766:
	movq	-152(%rbp), %rax        # 8-byte Reload
	movzbl	-6(%rbx,%rax), %eax
	movq	%rbx, %r15
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1767:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$75, %esi
	movl	$76, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1649 12 is_stmt 0     # susan.c:1649:12
	movzbl	(%r12,%rbx), %r12d
.Ltmp1768:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1649 9                # susan.c:1649:9
	addl	%r14d, %r12d
.Ltmp1769:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$4, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$6, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$8, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$10, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$11, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$12, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$13, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$14, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$15, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$16, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$17, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$18, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$19, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$20, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$21, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$22, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$23, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$24, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$25, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$26, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$27, 8(%rsp)
	movl	$8, (%rsp)
	movl	$424, %edi              # imm = 0x1A8
	movl	$24, %esi
	movl	$1, %edx
	movl	$9, %ecx
	movl	$124, %r8d
	movl	$27, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1650 11 is_stmt 1     # susan.c:1650:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1770:
# BB#9:                                 # %if.then186
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movq	-176(%rbp), %rax        # 8-byte Reload
	leaq	(%r15,%rax), %rbx
	movl	$424, %edi              # imm = 0x1A8
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$77, %esi
	movl	$1, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1651 14               # susan.c:1651:14
.Ltmp1771:
	movq	-152(%rbp), %rax        # 8-byte Reload
	movzbl	-5(%r15,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1772:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$78, %esi
	movl	$79, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1651 12 is_stmt 0     # susan.c:1651:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1773:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1651 9                # susan.c:1651:9
	addl	%r12d, %r14d
.Ltmp1774:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$4, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$6, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$8, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$10, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$12, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$13, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$14, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$15, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$16, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$17, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$18, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$19, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$20, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$21, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$22, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$23, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$24, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$25, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$26, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$27, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$28, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$29, 8(%rsp)
	movl	$8, (%rsp)
	movl	$425, %edi              # imm = 0x1A9
	movl	$25, %esi
	movl	$1, %edx
	movl	$11, %ecx
	movl	$124, %r8d
	movl	$29, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1652 11 is_stmt 1     # susan.c:1652:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1775:
# BB#10:                                # %if.then196
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %r12
	movl	$425, %edi              # imm = 0x1A9
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$80, %esi
	movl	$1, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1653 14               # susan.c:1653:14
.Ltmp1776:
	movq	-152(%rbp), %rax        # 8-byte Reload
	movzbl	-4(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1777:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$81, %esi
	movl	$82, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1653 12 is_stmt 0     # susan.c:1653:12
	movzbl	(%r12,%rbx), %r12d
.Ltmp1778:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1653 9                # susan.c:1653:9
	addl	%r14d, %r12d
.Ltmp1779:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$4, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$6, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$8, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$10, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$12, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$14, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$15, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$16, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$17, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$18, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$19, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$20, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$21, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$22, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$23, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$24, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$25, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$26, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$27, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$28, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$29, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$30, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$31, 8(%rsp)
	movl	$8, (%rsp)
	movl	$426, %edi              # imm = 0x1AA
	movl	$26, %esi
	movl	$1, %edx
	movl	$13, %ecx
	movl	$124, %r8d
	movl	$31, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1654 11 is_stmt 1     # susan.c:1654:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1780:
# BB#11:                                # %if.then206
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %r14
	movl	$426, %edi              # imm = 0x1AA
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$83, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1655 14               # susan.c:1655:14
.Ltmp1781:
	movq	-152(%rbp), %rax        # 8-byte Reload
	movzbl	-3(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1782:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$84, %esi
	movl	$85, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1655 12 is_stmt 0     # susan.c:1655:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1783:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1655 9                # susan.c:1655:9
	addl	%r12d, %r14d
.Ltmp1784:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$4, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$6, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$8, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$10, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$12, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$14, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$16, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$17, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$18, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$19, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$20, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$21, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$22, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$23, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$24, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$25, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$26, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$27, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$28, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$29, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$30, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$32, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$33, 8(%rsp)
	movl	$8, (%rsp)
	movl	$427, %edi              # imm = 0x1AB
	movl	$27, %esi
	movl	$1, %edx
	movl	$15, %ecx
	movl	$124, %r8d
	movl	$33, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1656 11 is_stmt 1     # susan.c:1656:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1785:
# BB#12:                                # %if.then216
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %r12
	movl	$427, %edi              # imm = 0x1AB
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$86, %esi
	movl	$1, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1657 14               # susan.c:1657:14
.Ltmp1786:
	movq	-152(%rbp), %rax        # 8-byte Reload
	movzbl	-2(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1787:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$87, %esi
	movl	$88, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1657 12 is_stmt 0     # susan.c:1657:12
	movzbl	(%r12,%rbx), %r12d
.Ltmp1788:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1657 9                # susan.c:1657:9
	addl	%r14d, %r12d
.Ltmp1789:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$4, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$6, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$8, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$10, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$12, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$14, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$16, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$18, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$19, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$20, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$21, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$22, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$23, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$24, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$25, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$26, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$27, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$28, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$29, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$30, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$31, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$32, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$33, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$34, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$35, 8(%rsp)
	movl	$8, (%rsp)
	movl	$428, %edi              # imm = 0x1AC
	movl	$28, %esi
	movl	$1, %edx
	movl	$17, %ecx
	movl	$124, %r8d
	movl	$35, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1658 11 is_stmt 1     # susan.c:1658:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1790:
# BB#13:                                # %if.then226
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %r14
	movl	$428, %edi              # imm = 0x1AC
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$89, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1659 14               # susan.c:1659:14
.Ltmp1791:
	movq	-152(%rbp), %rax        # 8-byte Reload
	movzbl	-1(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1792:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$90, %esi
	movl	$91, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1659 12 is_stmt 0     # susan.c:1659:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1793:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1659 9                # susan.c:1659:9
	addl	%r12d, %r14d
.Ltmp1794:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$4, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$6, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$8, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$10, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$12, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$14, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$16, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$18, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$20, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$21, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$22, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$23, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$24, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$25, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$26, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$27, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$28, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$29, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$30, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$31, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$33, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$34, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$35, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$36, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$37, 8(%rsp)
	movl	$8, (%rsp)
	movl	$429, %edi              # imm = 0x1AD
	movl	$29, %esi
	movl	$1, %edx
	movl	$19, %ecx
	movl	$124, %r8d
	movl	$37, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1660 11 is_stmt 1     # susan.c:1660:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1795:
# BB#14:                                # %if.then236
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movq	-152(%rbp), %r15        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%r15), %r12
	movl	$429, %edi              # imm = 0x1AD
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$92, %esi
	movl	$1, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1661 14               # susan.c:1661:14
.Ltmp1796:
	movzbl	(%rbx,%r15), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1797:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$93, %esi
	movl	$94, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1661 12 is_stmt 0     # susan.c:1661:12
	movzbl	(%r12,%rbx), %r12d
.Ltmp1798:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1661 9                # susan.c:1661:9
	addl	%r14d, %r12d
.Ltmp1799:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$4, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$6, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$8, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$10, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$12, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$14, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$16, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$18, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$20, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$22, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$23, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$24, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$25, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$26, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$27, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$28, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$29, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$30, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$31, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$32, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$33, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$34, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$35, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$36, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$37, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$38, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$39, 8(%rsp)
	movl	$8, (%rsp)
	movl	$430, %edi              # imm = 0x1AE
	movl	$30, %esi
	movl	$1, %edx
	movl	$21, %ecx
	movl	$124, %r8d
	movl	$39, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1662 11 is_stmt 1     # susan.c:1662:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1800:
# BB#15:                                # %if.then245
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$430, %edi              # imm = 0x1AE
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %rdi
	movl	$95, %esi
	movl	$96, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1665 14               # susan.c:1665:14
.Ltmp1801:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movzbl	-4(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1802:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$97, %esi
	movl	$98, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1665 12 is_stmt 0     # susan.c:1665:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1803:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1665 9                # susan.c:1665:9
	addl	%r12d, %r14d
.Ltmp1804:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$4, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$6, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$8, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$10, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$12, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$14, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$16, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$18, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$20, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$22, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$24, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$25, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$26, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$27, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$28, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$29, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$30, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$31, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$32, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$33, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$34, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$35, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$36, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$37, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$38, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$39, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$40, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$41, 8(%rsp)
	movl	$8, (%rsp)
	movl	$431, %edi              # imm = 0x1AF
	movl	$31, %esi
	movl	$1, %edx
	movl	$23, %ecx
	movl	$124, %r8d
	movl	$41, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1666 11 is_stmt 1     # susan.c:1666:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1805:
# BB#16:                                # %if.then258
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %r12
	movl	$431, %edi              # imm = 0x1AF
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$99, %esi
	movl	$1, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1667 14               # susan.c:1667:14
.Ltmp1806:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movzbl	-3(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1807:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$100, %esi
	movl	$101, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1667 12 is_stmt 0     # susan.c:1667:12
	movzbl	(%r12,%rbx), %r12d
.Ltmp1808:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1667 9                # susan.c:1667:9
	addl	%r14d, %r12d
.Ltmp1809:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$4, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$6, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$8, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$10, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$12, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$14, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$16, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$18, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$20, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$22, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$24, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$26, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$27, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$28, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$29, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$30, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$31, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$32, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$33, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$34, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$35, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$36, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$37, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$38, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$39, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$40, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$41, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$42, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$43, 8(%rsp)
	movl	$8, (%rsp)
	movl	$432, %edi              # imm = 0x1B0
	movl	$32, %esi
	movl	$1, %edx
	movl	$25, %ecx
	movl	$124, %r8d
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1668 11 is_stmt 1     # susan.c:1668:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1810:
# BB#17:                                # %if.then268
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %r14
	movl	$432, %edi              # imm = 0x1B0
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$102, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1669 14               # susan.c:1669:14
.Ltmp1811:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movzbl	-2(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1812:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$103, %esi
	movl	$104, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1669 12 is_stmt 0     # susan.c:1669:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1813:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1669 9                # susan.c:1669:9
	addl	%r12d, %r14d
.Ltmp1814:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$4, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$6, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$8, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$10, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$12, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$14, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$16, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$18, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$20, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$22, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$24, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$26, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$28, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$29, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$30, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$31, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$32, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$33, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$34, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$35, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$36, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$37, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$38, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$39, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$40, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$41, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$42, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$43, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$44, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$45, 8(%rsp)
	movl	$8, (%rsp)
	movl	$433, %edi              # imm = 0x1B1
	movl	$33, %esi
	movl	$1, %edx
	movl	$27, %ecx
	movl	$124, %r8d
	movl	$45, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1670 11 is_stmt 1     # susan.c:1670:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1815:
# BB#18:                                # %if.then278
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rbx        # 8-byte Reload
	leaq	(%rbx,%rax), %r12
	movl	$433, %edi              # imm = 0x1B1
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$105, %esi
	movl	$1, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1671 14               # susan.c:1671:14
.Ltmp1816:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movzbl	-1(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1817:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$106, %esi
	movl	$107, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1671 12 is_stmt 0     # susan.c:1671:12
	movzbl	(%r12,%rbx), %r12d
.Ltmp1818:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1671 9                # susan.c:1671:9
	addl	%r14d, %r12d
.Ltmp1819:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 504(%rsp)
	movl	$106, 496(%rsp)
	movl	$4, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$6, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$8, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$10, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$12, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$14, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$16, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$18, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$20, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$22, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$24, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$26, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$28, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$30, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$31, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$32, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$33, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$34, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$35, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$36, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$37, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$38, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$39, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$40, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$41, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$42, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$43, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$44, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$45, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$46, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$47, 8(%rsp)
	movl	$8, (%rsp)
	movl	$434, %edi              # imm = 0x1B2
	movl	$34, %esi
	movl	$1, %edx
	movl	$29, %ecx
	movl	$124, %r8d
	movl	$47, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1672 11 is_stmt 1     # susan.c:1672:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1820:
# BB#19:                                # %if.then288
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movq	-216(%rbp), %rbx        # 8-byte Reload
	movq	-160(%rbp), %r15        # 8-byte Reload
	leaq	(%r15,%rbx), %r14
	movl	$434, %edi              # imm = 0x1B2
	callq	_KPushCDep
	movl	$108, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	movl	$11, %edi
	callq	_KWork
	.loc	2 1673 14               # susan.c:1673:14
.Ltmp1821:
	movzbl	(%r15,%rbx), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1822:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$109, %esi
	movl	$110, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1673 12 is_stmt 0     # susan.c:1673:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1823:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1673 9                # susan.c:1673:9
	addl	%r12d, %r14d
.Ltmp1824:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 520(%rsp)
	movl	$109, 512(%rsp)
	movl	$4, 504(%rsp)
	movl	$106, 496(%rsp)
	movl	$6, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$8, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$10, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$12, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$14, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$16, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$18, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$20, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$22, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$24, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$26, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$28, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$30, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$32, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$33, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$34, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$35, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$36, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$37, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$38, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$39, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$40, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$41, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$42, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$43, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$8, (%rsp)
	movl	$435, %edi              # imm = 0x1B3
	movl	$35, %esi
	movl	$1, %edx
	movl	$31, %ecx
	movl	$124, %r8d
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1674 11 is_stmt 1     # susan.c:1674:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1825:
# BB#20:                                # %if.then297
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$435, %edi              # imm = 0x1B3
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movq	-528(%rbp), %rbx        # 8-byte Reload
	movq	-264(%rbp), %rax        # 8-byte Reload
	leaq	(%rbx,%rax), %rdi
	movl	$111, %esi
	movl	$112, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1677 14               # susan.c:1677:14
.Ltmp1826:
	movq	-256(%rbp), %rax        # 8-byte Reload
	movzbl	-2(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1827:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$113, %esi
	movl	$114, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1677 12 is_stmt 0     # susan.c:1677:12
	movzbl	(%r12,%rbx), %r12d
.Ltmp1828:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1677 9                # susan.c:1677:9
	addl	%r14d, %r12d
.Ltmp1829:
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movl	$2, 536(%rsp)
	movl	$113, 528(%rsp)
	movl	$4, 520(%rsp)
	movl	$109, 512(%rsp)
	movl	$6, 504(%rsp)
	movl	$106, 496(%rsp)
	movl	$8, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$10, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$12, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$14, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$16, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$18, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$20, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$22, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$24, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$26, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$28, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$30, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$32, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$34, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$35, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$36, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$37, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$38, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$39, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$40, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$41, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$42, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$46, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$47, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$48, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$49, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$50, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$51, 8(%rsp)
	movl	$8, (%rsp)
	movl	$436, %edi              # imm = 0x1B4
	movl	$36, %esi
	movl	$1, %edx
	movl	$33, %ecx
	movl	$124, %r8d
	movl	$51, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1678 11 is_stmt 1     # susan.c:1678:11
	cmpl	%r13d, %r12d
	jge	.LBB17_24
.Ltmp1830:
# BB#21:                                # %if.then310
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R12D
	movq	-528(%rbp), %rbx        # 8-byte Reload
	movq	-272(%rbp), %rax        # 8-byte Reload
	leaq	(%rbx,%rax), %r14
	movl	$436, %edi              # imm = 0x1B4
	callq	_KPushCDep
	movl	$11, %edi
	callq	_KWork
	movl	$115, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1679 14               # susan.c:1679:14
.Ltmp1831:
	movq	-256(%rbp), %rax        # 8-byte Reload
	movzbl	-1(%rbx,%rax), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r14        # 8-byte Reload
.Ltmp1832:
	#DEBUG_VALUE: susan_corners_quick:bp <- R14
	leaq	(%r14,%rbx), %rdi
	movl	$116, %esi
	movl	$117, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1679 12 is_stmt 0     # susan.c:1679:12
	movzbl	(%r14,%rbx), %r14d
.Ltmp1833:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1679 9                # susan.c:1679:9
	addl	%r12d, %r14d
.Ltmp1834:
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movl	$2, 552(%rsp)
	movl	$116, 544(%rsp)
	movl	$4, 536(%rsp)
	movl	$113, 528(%rsp)
	movl	$6, 520(%rsp)
	movl	$109, 512(%rsp)
	movl	$8, 504(%rsp)
	movl	$106, 496(%rsp)
	movl	$10, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$12, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$14, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$16, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$18, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$20, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$22, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$24, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$26, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$28, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$30, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$32, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$34, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$36, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$37, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$38, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$39, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$40, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$41, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$42, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$43, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$44, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$45, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$46, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$47, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$48, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$49, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$50, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$51, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$52, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$53, 8(%rsp)
	movl	$8, (%rsp)
	movl	$437, %edi              # imm = 0x1B5
	movl	$37, %esi
	movl	$1, %edx
	movl	$35, %ecx
	movl	$124, %r8d
	movl	$53, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1680 11 is_stmt 1     # susan.c:1680:11
	cmpl	%r13d, %r14d
	jge	.LBB17_24
.Ltmp1835:
# BB#22:                                # %if.then320
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- R14D
	movq	-528(%rbp), %rbx        # 8-byte Reload
	movq	-256(%rbp), %r12        # 8-byte Reload
	leaq	(%rbx,%r12), %r15
	movl	$437, %edi              # imm = 0x1B5
	callq	_KPushCDep
	movl	$118, %esi
	movl	$1, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	movl	$11, %edi
	callq	_KWork
	.loc	2 1681 14               # susan.c:1681:14
.Ltmp1836:
	movzbl	(%rbx,%r12), %eax
	movq	-48(%rbp), %rbx         # 8-byte Reload
	subq	%rax, %rbx
	movq	-112(%rbp), %r12        # 8-byte Reload
.Ltmp1837:
	#DEBUG_VALUE: susan_corners_quick:bp <- R12
	leaq	(%r12,%rbx), %rdi
	movl	$119, %esi
	movl	$120, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1681 12 is_stmt 0     # susan.c:1681:12
	movzbl	(%r12,%rbx), %ebx
.Ltmp1838:
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	.loc	2 1681 9                # susan.c:1681:9
	addl	%r14d, %ebx
.Ltmp1839:
	#DEBUG_VALUE: susan_corners_quick:n <- EBX
	movl	$2, 568(%rsp)
	movl	$119, 560(%rsp)
	movl	$4, 552(%rsp)
	movl	$116, 544(%rsp)
	movl	$6, 536(%rsp)
	movl	$113, 528(%rsp)
	movl	$8, 520(%rsp)
	movl	$109, 512(%rsp)
	movl	$10, 504(%rsp)
	movl	$106, 496(%rsp)
	movl	$12, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$14, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$16, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$18, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$20, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$22, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$24, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$26, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$28, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$30, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$32, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$34, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$36, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$38, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$39, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$40, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$41, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$42, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$43, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$44, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$45, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$46, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$47, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$48, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$49, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$50, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$51, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$52, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$53, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$54, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$55, 8(%rsp)
	movl	$8, (%rsp)
	movl	$438, %edi              # imm = 0x1B6
	movl	$38, %esi
	movl	$1, %edx
	movl	$37, %ecx
	movl	$124, %r8d
	movl	$55, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1683 13 is_stmt 1     # susan.c:1683:13
	cmpl	%r13d, %ebx
	jge	.LBB17_24
.Ltmp1840:
# BB#23:                                # %if.then329
                                        #   in Loop: Header=BB17_3 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:bp <- [RBP+-112]
	#DEBUG_VALUE: susan_corners_quick:max_no <- R13D
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- EBX
	movl	$438, %edi              # imm = 0x1B6
	callq	_KPushCDep
	movl	$5, %edi
	callq	_KWork
	.loc	2 1684 27               # susan.c:1684:27
.Ltmp1841:
	movl	%r13d, %r12d
	subl	%ebx, %r12d
	movl	$3, 568(%rsp)
	movl	$119, 560(%rsp)
	movl	$5, 552(%rsp)
	movl	$116, 544(%rsp)
	movl	$7, 536(%rsp)
	movl	$113, 528(%rsp)
	movl	$9, 520(%rsp)
	movl	$109, 512(%rsp)
	movl	$11, 504(%rsp)
	movl	$106, 496(%rsp)
	movl	$13, 488(%rsp)
	movl	$103, 480(%rsp)
	movl	$15, 472(%rsp)
	movl	$100, 464(%rsp)
	movl	$17, 456(%rsp)
	movl	$97, 448(%rsp)
	movl	$19, 440(%rsp)
	movl	$93, 432(%rsp)
	movl	$21, 424(%rsp)
	movl	$90, 416(%rsp)
	movl	$23, 408(%rsp)
	movl	$87, 400(%rsp)
	movl	$25, 392(%rsp)
	movl	$84, 384(%rsp)
	movl	$27, 376(%rsp)
	movl	$81, 368(%rsp)
	movl	$29, 360(%rsp)
	movl	$78, 352(%rsp)
	movl	$31, 344(%rsp)
	movl	$75, 336(%rsp)
	movl	$33, 328(%rsp)
	movl	$71, 320(%rsp)
	movl	$35, 312(%rsp)
	movl	$68, 304(%rsp)
	movl	$37, 296(%rsp)
	movl	$65, 288(%rsp)
	movl	$39, 280(%rsp)
	movl	$62, 272(%rsp)
	movl	$40, 264(%rsp)
	movl	$59, 256(%rsp)
	movl	$41, 248(%rsp)
	movl	$56, 240(%rsp)
	movl	$42, 232(%rsp)
	movl	$52, 224(%rsp)
	movl	$43, 216(%rsp)
	movl	$49, 208(%rsp)
	movl	$44, 200(%rsp)
	movl	$46, 192(%rsp)
	movl	$45, 184(%rsp)
	movl	$43, 176(%rsp)
	movl	$46, 168(%rsp)
	movl	$40, 160(%rsp)
	movl	$47, 152(%rsp)
	movl	$37, 144(%rsp)
	movl	$48, 136(%rsp)
	movl	$34, 128(%rsp)
	movl	$49, 120(%rsp)
	movl	$30, 112(%rsp)
	movl	$50, 104(%rsp)
	movl	$27, 96(%rsp)
	movl	$51, 88(%rsp)
	movl	$24, 80(%rsp)
	movl	$52, 72(%rsp)
	movl	$21, 64(%rsp)
	movl	$53, 56(%rsp)
	movl	$18, 48(%rsp)
	movl	$54, 40(%rsp)
	movl	$14, 32(%rsp)
	movl	$55, 24(%rsp)
	movl	$11, 16(%rsp)
	movl	$56, 8(%rsp)
	movl	$8, (%rsp)
	movl	$121, %edi
	movl	$38, %esi
	movl	$1, %edx
	movl	$38, %ecx
	movl	$124, %r8d
	movl	$56, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movq	-536(%rbp), %r14        # 8-byte Reload
	movq	-72(%rbp), %rbx         # 8-byte Reload
.Ltmp1842:
	leaq	1(%r14,%rbx), %rsi
	movl	$121, %edi
	movl	$1, %edx
	callq	_KStore
	.loc	2 1684 11 is_stmt 0     # susan.c:1684:11
	movb	%r12b, 1(%r14,%rbx)
	callq	_KPopCDep
	jmp	.LBB17_24
.Ltmp1843:
.LBB17_26:                              # %for.cond.pre_exit.for.end356
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	movabsq	$3779321495530723695, %rbx # imm = 0x3472D8E0611B596F
	movl	$1, %esi
	movabsq	$-3251964215135791327, %rdi # imm = 0xD2DEB3C6A68C9721
	callq	_KExitRegion
.Ltmp1844:
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$1, %esi
	movq	%rbx, %rdi
	callq	_KEnterRegion
	movl	$7, %r13d
	movabsq	$-456863682311370709, %r15 # imm = 0xF9A8E4E6C90DC82B
	movabsq	$493109782085414187, %r12 # imm = 0x6D7E0BBF478AD2B
	xorl	%r14d, %r14d
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	jmp	.LBB17_27
	.align	16, 0x90
.LBB17_136:                             # %for.cond362.pre_exit.for.inc1369
                                        #   in Loop: Header=BB17_27 Depth=1
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$1, %esi
	movabsq	$-456863682311370709, %r15 # imm = 0xF9A8E4E6C90DC82B
	movq	%r15, %rdi
	callq	_KExitRegion
	movl	$226, %ebx
	movl	$226, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$365, %r14d             # imm = 0x16D
	movl	$365, %edi              # imm = 0x16D
	movl	$227, %esi
	movl	$1, %edx
	movl	$226, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$493109782085414187, %r12 # imm = 0x6D7E0BBF478AD2B
	movq	%r12, %rdi
	callq	_KExitRegion
	movl	$367, %esi              # imm = 0x16F
	movq	-464(%rbp), %r13        # 8-byte Reload
.LBB17_27:                              # %for.cond357
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_29 Depth 2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$366, %edi              # imm = 0x16E
                                        # kill: ESI<def> ESI<kill> RSI<kill>
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$227, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	callq	_KPhi1To1
	movl	$2, %edi
	callq	_KWork
	movl	$227, %edi
	movl	$227, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$226, %edi
	movl	$3, %esi
	movl	$2, %edx
	movl	$227, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	movl	$366, %edi              # imm = 0x16E
	movl	$366, %esi              # imm = 0x16E
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$366, %edi              # imm = 0x16E
	movl	$226, %esi
	callq	_KPhiAddCond
	movl	$227, %edi
	movl	$226, %esi
	callq	_KPhiAddCond
	.loc	2 1693 3 is_stmt 1      # susan.c:1693:3
.Ltmp1845:
	cmpq	-448(%rbp), %r13        # 8-byte Folded Reload
	movq	%r13, %rbx
	jge	.LBB17_137
# BB#28:                                # %for.body361
                                        #   in Loop: Header=BB17_27 Depth=1
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$2, %esi
	movq	%r12, %rdi
	callq	_KEnterRegion
	movl	$226, %edi
	callq	_KPushCDep
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	callq	_KPopCDep
	movl	$1, %esi
	movq	%r15, %rdi
	callq	_KEnterRegion
	.loc	2 1696 13               # susan.c:1696:13
.Ltmp1846:
	movq	%rbx, %rcx
	movq	-456(%rbp), %rax        # 8-byte Reload
	imulq	%rax, %rcx
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	.loc	2 1726 19               # susan.c:1726:19
.Ltmp1847:
	leaq	-3(%rbx), %rcx
	.loc	2 1726 18 is_stmt 0     # susan.c:1726:18
	imulq	%rax, %rcx
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	.loc	2 1734 19 is_stmt 1     # susan.c:1734:19
	leaq	-2(%rbx), %rcx
	.loc	2 1734 18 is_stmt 0     # susan.c:1734:18
	imulq	%rax, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	.loc	2 1742 19 is_stmt 1     # susan.c:1742:19
	leaq	-1(%rbx), %rcx
	.loc	2 1742 18 is_stmt 0     # susan.c:1742:18
	imulq	%rax, %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	.loc	2 1757 20 is_stmt 1     # susan.c:1757:20
	leaq	1(%rbx), %rcx
	.loc	2 1757 19 is_stmt 0     # susan.c:1757:19
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	imulq	%rax, %rcx
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	.loc	2 1765 20 is_stmt 1     # susan.c:1765:20
	leaq	2(%rbx), %rcx
	.loc	2 1765 19 is_stmt 0     # susan.c:1765:19
	imulq	%rax, %rcx
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	.loc	2 1773 20 is_stmt 1     # susan.c:1773:20
	leaq	3(%rbx), %rcx
	.loc	2 1773 19 is_stmt 0     # susan.c:1773:19
	movq	%rbx, -496(%rbp)        # 8-byte Spill
	imulq	%rax, %rcx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movl	$366, %r15d             # imm = 0x16E
	xorl	%r12d, %r12d
	xorl	%r14d, %r14d
	movl	$7, %r13d
	jmp	.LBB17_29
.Ltmp1848:
	.align	16, 0x90
.LBB17_135:                             # %for.inc1366
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$228, %r12d
	movl	$228, %edi
	callq	_KPushCDep
	movl	-256(%rbp), %eax        # 4-byte Reload
	movl	%eax, 368(%rsp)
	movl	-80(%rbp), %eax         # 4-byte Reload
	movl	%eax, 360(%rsp)
	movl	-88(%rbp), %eax         # 4-byte Reload
	movl	%eax, 352(%rsp)
	movl	-96(%rbp), %eax         # 4-byte Reload
	movl	%eax, 344(%rsp)
	movl	-112(%rbp), %eax        # 4-byte Reload
	movl	%eax, 336(%rsp)
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, 328(%rsp)
	movl	-160(%rbp), %eax        # 4-byte Reload
	movl	%eax, 320(%rsp)
	movl	-184(%rbp), %eax        # 4-byte Reload
	movl	%eax, 312(%rsp)
	movl	-208(%rbp), %eax        # 4-byte Reload
	movl	%eax, 304(%rsp)
	movl	-240(%rbp), %eax        # 4-byte Reload
	movl	%eax, 296(%rsp)
	movl	-280(%rbp), %eax        # 4-byte Reload
	movl	%eax, 288(%rsp)
	movl	-312(%rbp), %eax        # 4-byte Reload
	movl	%eax, 280(%rsp)
	movl	-352(%rbp), %eax        # 4-byte Reload
	movl	%eax, 272(%rsp)
	movl	-360(%rbp), %eax        # 4-byte Reload
	movl	%eax, 264(%rsp)
	movl	-368(%rbp), %eax        # 4-byte Reload
	movl	%eax, 256(%rsp)
	movl	-376(%rbp), %eax        # 4-byte Reload
	movl	%eax, 248(%rsp)
	movl	-384(%rbp), %eax        # 4-byte Reload
	movl	%eax, 240(%rsp)
	movl	-392(%rbp), %eax        # 4-byte Reload
	movl	%eax, 232(%rsp)
	movl	-400(%rbp), %eax        # 4-byte Reload
	movl	%eax, 224(%rsp)
	movl	-408(%rbp), %eax        # 4-byte Reload
	movl	%eax, 216(%rsp)
	movl	-168(%rbp), %eax        # 4-byte Reload
	movl	%eax, 208(%rsp)
	movl	-416(%rbp), %eax        # 4-byte Reload
	movl	%eax, 200(%rsp)
	movl	%r13d, 192(%rsp)
	movl	%r14d, 184(%rsp)
	movl	%r15d, 176(%rsp)
	movl	-48(%rbp), %eax         # 4-byte Reload
	movl	%eax, 168(%rsp)
	movl	-104(%rbp), %eax        # 4-byte Reload
	movl	%eax, 160(%rsp)
	movl	-120(%rbp), %eax        # 4-byte Reload
	movl	%eax, 152(%rsp)
	movl	-128(%rbp), %eax        # 4-byte Reload
	movl	%eax, 144(%rsp)
	movl	-144(%rbp), %eax        # 4-byte Reload
	movl	%eax, 136(%rsp)
	movl	-152(%rbp), %eax        # 4-byte Reload
	movl	%eax, 128(%rsp)
	movl	-176(%rbp), %eax        # 4-byte Reload
	movl	%eax, 120(%rsp)
	movl	-192(%rbp), %eax        # 4-byte Reload
	movl	%eax, 112(%rsp)
	movl	-200(%rbp), %eax        # 4-byte Reload
	movl	%eax, 104(%rsp)
	movl	-232(%rbp), %eax        # 4-byte Reload
	movl	%eax, 96(%rsp)
	movl	-248(%rbp), %eax        # 4-byte Reload
	movl	%eax, 88(%rsp)
	movl	-328(%rbp), %eax        # 4-byte Reload
	movl	%eax, 80(%rsp)
	movl	-272(%rbp), %eax        # 4-byte Reload
	movl	%eax, 72(%rsp)
	movl	-288(%rbp), %eax        # 4-byte Reload
	movl	%eax, 64(%rsp)
	movl	-296(%rbp), %eax        # 4-byte Reload
	movl	%eax, 56(%rsp)
	movl	-304(%rbp), %eax        # 4-byte Reload
	movl	%eax, 48(%rsp)
	movl	-320(%rbp), %eax        # 4-byte Reload
	movl	%eax, 40(%rsp)
	movl	-344(%rbp), %eax        # 4-byte Reload
	movl	%eax, 32(%rsp)
	movl	-336(%rbp), %eax        # 4-byte Reload
	movl	%eax, 24(%rsp)
	movl	-224(%rbp), %eax        # 4-byte Reload
	movl	%eax, 16(%rsp)
	movl	-216(%rbp), %eax        # 4-byte Reload
	movl	%eax, 8(%rsp)
	movl	-264(%rbp), %eax        # 4-byte Reload
	movl	%eax, (%rsp)
	movl	$369, %r15d             # imm = 0x171
	movl	$369, %edi              # imm = 0x171
	movl	$50, %edx
	movl	$228, %ecx
	movl	$371, %r8d              # imm = 0x173
	xorl	%eax, %eax
	movl	-72(%rbp), %esi         # 4-byte Reload
	movl	%ebx, %r9d
	callq	_KPhi
	movl	$1, %edi
	callq	_KWork
	movq	-56(%rbp), %r13         # 8-byte Reload
	.loc	2 1695 5 is_stmt 1      # susan.c:1695:5
	incq	%r13
	movl	$369, %edi              # imm = 0x171
	movl	$369, %esi              # imm = 0x171
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$368, %r14d             # imm = 0x170
	movl	$368, %edi              # imm = 0x170
	movl	$225, %esi
	movl	$1, %edx
	movl	$228, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$2, %esi
	movabsq	$-8721591340556801836, %rdi # imm = 0x86F6AEE27DFD28D4
	callq	_KExitRegion
.Ltmp1849:
.LBB17_29:                              # %for.cond362
                                        #   Parent Loop BB17_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$226, %edi
	callq	_KPushCDep
	movl	$367, %edi              # imm = 0x16F
	movl	$226, %edx
	movl	%r15d, %esi
	movl	%r12d, %ecx
	callq	_KPhi2To1
	movl	$225, %edi
	movl	$226, %edx
	movl	%r14d, %esi
	movl	%r12d, %ecx
	callq	_KPhi2To1
	movl	$2, %edi
	callq	_KWork
	movl	$225, %edi
	movl	$225, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$1, (%rsp)
	movl	$228, %edi
	movl	$2, %esi
	movl	$2, %edx
	movl	$226, %ecx
	movl	$2, %r8d
	movl	$225, %r9d
	callq	_KTimestamp3
	movl	$367, %edi              # imm = 0x16F
	movl	$228, %esi
	callq	_KPhiAddCond
	movl	$225, %edi
	movl	$228, %esi
	callq	_KPhiAddCond
	movl	$367, %edi              # imm = 0x16F
	movl	$367, %esi              # imm = 0x16F
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	.loc	2 1695 5 is_stmt 0      # susan.c:1695:5
	cmpq	-64(%rbp), %r13         # 8-byte Folded Reload
	jge	.LBB17_136
# BB#30:                                # %for.body366
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$2, %esi
	movabsq	$-8721591340556801836, %rdi # imm = 0x86F6AEE27DFD28D4
	callq	_KEnterRegion
	movl	$228, %edi
	callq	_KPushCDep
	movl	$8, %edi
	callq	_KWork
	.loc	2 1696 13 is_stmt 1     # susan.c:1696:13
.Ltmp1850:
	movq	-424(%rbp), %rax        # 8-byte Reload
	leaq	(%r13,%rax), %rbx
	movq	-432(%rbp), %r15        # 8-byte Reload
.Ltmp1851:
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	.loc	2 1696 11 is_stmt 0     # susan.c:1696:11
	leaq	(%r15,%rbx), %rdi
	movl	$126, %esi
	movl	$127, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movb	(%r15,%rbx), %r12b
	movl	$371, %edi              # imm = 0x173
	movl	$228, %esi
	movl	$1, %edx
	movl	$126, %ecx
	movl	$1, %r8d
	callq	_KTimestamp2
	callq	_KPopCDep
	movl	$367, -72(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x16F
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	.loc	2 1697 11 is_stmt 1     # susan.c:1697:11
	testb	%r12b, %r12b
	jle	.LBB17_31
.Ltmp1852:
# BB#32:                                # %if.then374
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movl	$371, %edi              # imm = 0x173
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1726 18               # susan.c:1726:18
.Ltmp1853:
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%r13, -56(%rbp)         # 8-byte Spill
	leaq	(%r13,%rax), %r14
	.loc	2 1726 16 is_stmt 0     # susan.c:1726:16
	leaq	-3(%r15,%r14), %rdi
	movl	$128, %esi
	movl	$129, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	%r15, %r13
.Ltmp1854:
	#DEBUG_VALUE: susan_corners_quick:r <- R13
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-3(%r13,%r14), %r15d
	movl	$1, (%rsp)
	movl	$372, %edi              # imm = 0x174
	movl	$228, %esi
	movl	$2, %edx
	movl	$126, %ecx
	movl	$2, %r8d
	movl	$128, %r9d
	callq	_KTimestamp3
	callq	_KPopCDep
	movsbl	%r12b, %r12d
	cmpl	%r15d, %r12d
	jle	.LBB17_33
.Ltmp1855:
# BB#35:                                # %land.lhs.true
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R13
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$372, %edi              # imm = 0x174
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1727 16 is_stmt 1     # susan.c:1727:16
.Ltmp1856:
	leaq	-2(%r14,%r13), %rdi
	movl	$130, %esi
	movl	$131, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1857:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-2(%r14,%r13), %ebx
	movl	$1, 16(%rsp)
	movl	$130, 8(%rsp)
	movl	$2, (%rsp)
	movl	$373, %edi              # imm = 0x175
	movl	$228, %esi
	movl	$3, %edx
	movl	$126, %ecx
	movl	$3, %r8d
	movl	$128, %r9d
	callq	_KTimestamp4
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	movq	%r13, %r15
.Ltmp1858:
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	jle	.LBB17_36
.Ltmp1859:
# BB#37:                                # %land.lhs.true393
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$373, %edi              # imm = 0x175
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1728 16               # susan.c:1728:16
.Ltmp1860:
	leaq	-1(%r14,%r15), %rdi
	movl	$132, %esi
	movl	$133, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1861:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-1(%r14,%r15), %ebx
	movl	$1, 32(%rsp)
	movl	$132, 24(%rsp)
	movl	$2, 16(%rsp)
	movl	$130, 8(%rsp)
	movl	$3, (%rsp)
	movl	$374, %edi              # imm = 0x176
	movl	$228, %esi
	movl	$4, %edx
	movl	$126, %ecx
	movl	$4, %r8d
	movl	$128, %r9d
	callq	_KTimestamp5
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_38
.Ltmp1862:
# BB#39:                                # %land.lhs.true403
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$374, %edi              # imm = 0x176
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	.loc	2 1729 16               # susan.c:1729:16
.Ltmp1863:
	leaq	(%r15,%r14), %rdi
	movl	$134, %esi
	movl	$135, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1864:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	(%r15,%r14), %ebx
	movl	$1, 48(%rsp)
	movl	$134, 40(%rsp)
	movl	$2, 32(%rsp)
	movl	$132, 24(%rsp)
	movl	$3, 16(%rsp)
	movl	$130, 8(%rsp)
	movl	$4, (%rsp)
	movl	$375, %edi              # imm = 0x177
	movl	$228, %esi
	movl	$5, %edx
	movl	$126, %ecx
	movl	$5, %r8d
	movl	$128, %r9d
	callq	_KTimestamp6
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_40
.Ltmp1865:
# BB#41:                                # %land.lhs.true412
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$375, %edi              # imm = 0x177
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1730 16               # susan.c:1730:16
.Ltmp1866:
	leaq	1(%r14,%r15), %rdi
	movl	$136, %esi
	movl	$137, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1867:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	1(%r14,%r15), %ebx
	movl	$1, 64(%rsp)
	movl	$136, 56(%rsp)
	movl	$2, 48(%rsp)
	movl	$134, 40(%rsp)
	movl	$3, 32(%rsp)
	movl	$132, 24(%rsp)
	movl	$4, 16(%rsp)
	movl	$130, 8(%rsp)
	movl	$5, (%rsp)
	movl	$376, %edi              # imm = 0x178
	movl	$228, %esi
	movl	$6, %edx
	movl	$126, %ecx
	movl	$6, %r8d
	movl	$128, %r9d
	callq	_KTimestamp7
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_42
.Ltmp1868:
# BB#43:                                # %land.lhs.true422
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$376, %edi              # imm = 0x178
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1731 16               # susan.c:1731:16
.Ltmp1869:
	leaq	2(%r14,%r15), %rdi
	movl	$138, %esi
	movl	$139, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1870:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	2(%r14,%r15), %ebx
	movl	$1, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$2, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$3, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$4, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$5, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$6, 8(%rsp)
	movl	$128, (%rsp)
	movl	$377, %edi              # imm = 0x179
	movl	$8, %esi
	movl	$228, %edx
	movl	$7, %ecx
	movl	$126, %r8d
	movl	$7, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_44
.Ltmp1871:
# BB#45:                                # %land.lhs.true432
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$377, %edi              # imm = 0x179
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1732 16               # susan.c:1732:16
.Ltmp1872:
	leaq	3(%r14,%r15), %rdi
	movl	$140, %esi
	movl	$141, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1873:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	3(%r14,%r15), %ebx
	movl	$1, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$3, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$4, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$5, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$6, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$7, 8(%rsp)
	movl	$128, (%rsp)
	movl	$378, %edi              # imm = 0x17A
	movl	$9, %esi
	movl	$228, %edx
	movl	$8, %ecx
	movl	$126, %r8d
	movl	$8, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_46
.Ltmp1874:
# BB#47:                                # %land.lhs.true442
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$378, %edi              # imm = 0x17A
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1734 18               # susan.c:1734:18
.Ltmp1875:
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	-56(%rbp), %r14         # 8-byte Reload
	movq	%r14, %r13
	leaq	(%r13,%rax), %r14
	.loc	2 1734 16 is_stmt 0     # susan.c:1734:16
	leaq	-3(%r15,%r14), %rdi
	movl	$142, %esi
	movl	$143, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1876:
	.loc	2 1726 13 is_stmt 1     # susan.c:1726:13
	movsbl	-3(%r15,%r14), %ebx
	movl	$1, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$4, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$5, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$6, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$7, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$8, 8(%rsp)
	movl	$128, (%rsp)
	movl	$379, %edi              # imm = 0x17B
	movl	$10, %esi
	movl	$228, %edx
	movl	$9, %ecx
	movl	$126, %r8d
	movl	$9, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_48
.Ltmp1877:
# BB#49:                                # %land.lhs.true452
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$379, %edi              # imm = 0x17B
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1735 16               # susan.c:1735:16
.Ltmp1878:
	leaq	-2(%r15,%r14), %rdi
	movl	$144, %esi
	movl	$145, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1879:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-2(%r15,%r14), %ebx
	movl	$1, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$2, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$3, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$4, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$5, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$6, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$8, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$9, 8(%rsp)
	movl	$128, (%rsp)
	movl	$380, %edi              # imm = 0x17C
	movl	$11, %esi
	movl	$228, %edx
	movl	$10, %ecx
	movl	$126, %r8d
	movl	$10, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_50
.Ltmp1880:
# BB#51:                                # %land.lhs.true462
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$380, %edi              # imm = 0x17C
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1736 16               # susan.c:1736:16
.Ltmp1881:
	leaq	-1(%r15,%r14), %rdi
	movl	$146, %esi
	movl	$147, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1882:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-1(%r15,%r14), %ebx
	movl	$1, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$2, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$3, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$4, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$6, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$7, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$8, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$9, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$10, 8(%rsp)
	movl	$128, (%rsp)
	movl	$381, %edi              # imm = 0x17D
	movl	$12, %esi
	movl	$228, %edx
	movl	$11, %ecx
	movl	$126, %r8d
	movl	$11, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_52
.Ltmp1883:
# BB#53:                                # %land.lhs.true472
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$381, %edi              # imm = 0x17D
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	.loc	2 1737 16               # susan.c:1737:16
.Ltmp1884:
	leaq	(%r15,%r14), %rdi
	movl	$148, %esi
	movl	$149, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1885:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	(%r15,%r14), %ebx
	movl	$1, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$2, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$3, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$4, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$5, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$7, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$8, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$9, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$10, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$11, 8(%rsp)
	movl	$128, (%rsp)
	movl	$382, %edi              # imm = 0x17E
	movl	$13, %esi
	movl	$228, %edx
	movl	$12, %ecx
	movl	$126, %r8d
	movl	$12, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_54
.Ltmp1886:
# BB#55:                                # %land.lhs.true481
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$382, %edi              # imm = 0x17E
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1738 16               # susan.c:1738:16
.Ltmp1887:
	leaq	1(%r15,%r14), %rdi
	movl	$150, %esi
	movl	$151, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1888:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	1(%r15,%r14), %ebx
	movl	$1, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$2, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$3, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$4, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$5, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$6, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$7, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$8, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$9, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$10, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$11, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$12, 8(%rsp)
	movl	$128, (%rsp)
	movl	$383, %edi              # imm = 0x17F
	movl	$14, %esi
	movl	$228, %edx
	movl	$13, %ecx
	movl	$126, %r8d
	movl	$13, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_56
.Ltmp1889:
# BB#59:                                # %land.lhs.true491
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$383, %edi              # imm = 0x17F
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1739 16               # susan.c:1739:16
.Ltmp1890:
	leaq	2(%r15,%r14), %rdi
	movl	$152, %esi
	movl	$153, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1891:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	2(%r15,%r14), %ebx
	movl	$1, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$2, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$3, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$4, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$5, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$6, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$7, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$8, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$9, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$10, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$12, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$13, 8(%rsp)
	movl	$128, (%rsp)
	movl	$384, %edi              # imm = 0x180
	movl	$15, %esi
	movl	$228, %edx
	movl	$14, %ecx
	movl	$126, %r8d
	movl	$14, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_60
.Ltmp1892:
# BB#61:                                # %land.lhs.true501
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$384, %edi              # imm = 0x180
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1740 16               # susan.c:1740:16
.Ltmp1893:
	leaq	3(%r14,%r15), %rdi
	movl	$154, %esi
	movl	$155, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1894:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	3(%r14,%r15), %ebx
	movl	$1, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$2, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$3, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$4, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$5, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$6, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$7, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$8, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$9, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$10, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$11, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$12, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$13, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$14, 8(%rsp)
	movl	$128, (%rsp)
	movl	$385, %edi              # imm = 0x181
	movl	$16, %esi
	movl	$228, %edx
	movl	$15, %ecx
	movl	$126, %r8d
	movl	$15, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_62
.Ltmp1895:
# BB#63:                                # %land.lhs.true511
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$385, %edi              # imm = 0x181
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1742 18               # susan.c:1742:18
.Ltmp1896:
	movq	-480(%rbp), %rax        # 8-byte Reload
	movl	%r12d, -88(%rbp)        # 4-byte Spill
	leaq	(%r13,%rax), %r13
	.loc	2 1742 16 is_stmt 0     # susan.c:1742:16
	leaq	-3(%r15,%r13), %rdi
	movl	$156, %esi
	movl	$157, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1897:
	.loc	2 1726 13 is_stmt 1     # susan.c:1726:13
	movsbl	-3(%r15,%r13), %ebx
	movl	$1, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$2, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$3, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$4, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$5, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$6, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$7, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$8, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$9, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$10, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$11, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$12, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$13, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$14, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$15, 8(%rsp)
	movl	$128, (%rsp)
	movl	$386, %edi              # imm = 0x182
	movl	$17, %esi
	movl	$228, %edx
	movl	$16, %ecx
	movl	$126, %r8d
	movl	$16, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, %r12d
	jle	.LBB17_64
.Ltmp1898:
# BB#65:                                # %land.lhs.true521
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$386, %edi              # imm = 0x182
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1743 16               # susan.c:1743:16
.Ltmp1899:
	leaq	-2(%r15,%r13), %rdi
	movl	$158, %esi
	movl	$159, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1900:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-2(%r15,%r13), %ebx
	movl	$1, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$2, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$3, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$4, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$5, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$6, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$7, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$8, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$9, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$10, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$11, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$12, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$13, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$14, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$15, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$16, 8(%rsp)
	movl	$128, (%rsp)
	movl	$387, %edi              # imm = 0x183
	movl	$18, %esi
	movl	$228, %edx
	movl	$17, %ecx
	movl	$126, %r8d
	movl	$17, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jle	.LBB17_66
.Ltmp1901:
# BB#67:                                # %land.lhs.true531
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$387, %edi              # imm = 0x183
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1744 16               # susan.c:1744:16
.Ltmp1902:
	leaq	-1(%r15,%r13), %rdi
	movl	$160, %esi
	movl	$161, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1903:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-1(%r15,%r13), %ebx
	movl	$1, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$2, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$3, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$4, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$5, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$6, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$7, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$8, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$9, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$10, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$11, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$12, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$13, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$14, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$16, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$17, 8(%rsp)
	movl	$128, (%rsp)
	movl	$388, %edi              # imm = 0x184
	movl	$19, %esi
	movl	$228, %edx
	movl	$18, %ecx
	movl	$126, %r8d
	movl	$18, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jle	.LBB17_68
.Ltmp1904:
# BB#69:                                # %land.lhs.true541
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$388, %edi              # imm = 0x184
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	.loc	2 1745 16               # susan.c:1745:16
.Ltmp1905:
	leaq	(%r15,%r13), %rdi
	movl	$162, %esi
	movl	$163, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1906:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	(%r15,%r13), %ebx
	movl	$1, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$2, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$3, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$4, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$5, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$6, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$7, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$8, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$9, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$10, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$11, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$12, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$13, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$14, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$15, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$16, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$17, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$18, 8(%rsp)
	movl	$128, (%rsp)
	movl	$389, %edi              # imm = 0x185
	movl	$20, %esi
	movl	$228, %edx
	movl	$19, %ecx
	movl	$126, %r8d
	movl	$19, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jle	.LBB17_70
.Ltmp1907:
# BB#71:                                # %land.lhs.true550
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$389, %edi              # imm = 0x185
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1746 16               # susan.c:1746:16
.Ltmp1908:
	leaq	1(%r15,%r13), %rdi
	movl	$164, %esi
	movl	$165, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1909:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	1(%r15,%r13), %ebx
	movl	$1, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$2, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$3, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$4, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$5, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$6, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$7, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$8, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$9, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$10, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$11, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$12, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$13, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$14, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$15, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$16, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$17, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$18, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$19, 8(%rsp)
	movl	$128, (%rsp)
	movl	$390, %edi              # imm = 0x186
	movl	$21, %esi
	movl	$228, %edx
	movl	$20, %ecx
	movl	$126, %r8d
	movl	$20, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jle	.LBB17_72
.Ltmp1910:
# BB#73:                                # %land.lhs.true560
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$390, %edi              # imm = 0x186
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1747 16               # susan.c:1747:16
.Ltmp1911:
	leaq	2(%r15,%r13), %rdi
	movl	$166, %esi
	movl	$167, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1912:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	2(%r15,%r13), %ebx
	movl	$1, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$2, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$3, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$4, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$5, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$6, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$7, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$8, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$9, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$10, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$11, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$12, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$13, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$14, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$15, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$16, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$17, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$18, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$19, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$20, 8(%rsp)
	movl	$128, (%rsp)
	movl	$391, %edi              # imm = 0x187
	movl	$22, %esi
	movl	$228, %edx
	movl	$21, %ecx
	movl	$126, %r8d
	movl	$21, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jle	.LBB17_74
.Ltmp1913:
# BB#75:                                # %land.lhs.true570
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$391, %edi              # imm = 0x187
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1748 16               # susan.c:1748:16
.Ltmp1914:
	leaq	3(%r13,%r15), %rdi
	movl	$168, %esi
	movl	$169, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1915:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	3(%r13,%r15), %ebx
	movl	$1, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$2, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$3, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$4, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$5, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$6, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$7, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$8, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$9, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$10, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$11, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$12, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$13, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$14, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$15, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$16, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$17, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$18, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$19, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$20, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$21, 8(%rsp)
	movl	$128, (%rsp)
	movl	$392, %edi              # imm = 0x188
	movl	$23, %esi
	movl	$228, %edx
	movl	$22, %ecx
	movl	$126, %r8d
	movl	$22, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jle	.LBB17_76
.Ltmp1916:
# BB#77:                                # %land.lhs.true580
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$392, %edi              # imm = 0x188
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-80(%rbp), %rbx         # 8-byte Reload
	.loc	2 1750 16               # susan.c:1750:16
.Ltmp1917:
	leaq	-3(%rbx,%r15), %rdi
	movl	$170, %esi
	movl	$171, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1918:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-3(%rbx,%r15), %r12d
	movl	$1, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$2, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$3, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$4, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$5, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$6, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$7, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$8, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$9, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$10, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$11, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$12, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$13, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$14, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$15, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$16, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$17, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$18, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$19, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$20, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$21, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$22, 8(%rsp)
	movl	$128, (%rsp)
	movl	$393, %edi              # imm = 0x189
	movl	$24, %esi
	movl	$228, %edx
	movl	$23, %ecx
	movl	$126, %r8d
	movl	$23, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%r12d, -88(%rbp)        # 4-byte Folded Reload
	jle	.LBB17_78
.Ltmp1919:
# BB#80:                                # %land.lhs.true589
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$393, %edi              # imm = 0x189
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	.loc	2 1751 16               # susan.c:1751:16
.Ltmp1920:
	leaq	-2(%r15,%rbx), %rdi
	movl	$172, %esi
	movl	$173, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1921:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-2(%r15,%rbx), %r12d
	movl	$1, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$2, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$3, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$4, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$5, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$6, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$7, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$8, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$9, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$10, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$11, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$12, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$13, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$14, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$15, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$16, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$17, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$18, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$19, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$20, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$21, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$22, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$23, 8(%rsp)
	movl	$128, (%rsp)
	movl	$394, -48(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x18A
	movl	$394, %edi              # imm = 0x18A
	movl	$25, %esi
	movl	$228, %edx
	movl	$24, %ecx
	movl	$126, %r8d
	movl	$24, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%r12d, -88(%rbp)        # 4-byte Folded Reload
	jle	.LBB17_81
.Ltmp1922:
# BB#82:                                # %land.lhs.true598
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- R15
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movq	%r14, -96(%rbp)         # 8-byte Spill
	movl	$394, -48(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x18A
	movl	$394, %edi              # imm = 0x18A
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	.loc	2 1752 16               # susan.c:1752:16
.Ltmp1923:
	leaq	-1(%r15,%rbx), %rdi
	movl	$174, %esi
	movl	$175, %edx
	movl	$1, %ecx
	callq	_KLoad1
.Ltmp1924:
	.loc	2 1726 13               # susan.c:1726:13
	movsbl	-1(%r15,%rbx), %r15d
.Ltmp1925:
	movq	%rbx, %r12
.Ltmp1926:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$2, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$3, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$4, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$5, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$6, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$7, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$8, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$9, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$10, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$11, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$12, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$13, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$14, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$15, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$16, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$17, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$18, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$19, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$20, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$21, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$22, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$23, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$24, 8(%rsp)
	movl	$128, (%rsp)
	movl	$395, %edi              # imm = 0x18B
	movl	$26, %esi
	movl	$228, %edx
	movl	$25, %ecx
	movl	$126, %r8d
	movl	$25, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%r15d, -88(%rbp)        # 4-byte Folded Reload
	jle	.LBB17_83
# BB#84:                                # %land.lhs.true607
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$395, %edi              # imm = 0x18B
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1927:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1753 17               # susan.c:1753:17
	leaq	1(%rbx,%r12), %rdi
	movl	$176, %esi
	movl	$177, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1753 14 is_stmt 0     # susan.c:1753:14
	movsbl	1(%rbx,%r12), %ebx
.Ltmp1928:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$2, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$3, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$4, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$5, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$6, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$7, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$8, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$9, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$10, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$11, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$12, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$13, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$14, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$15, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$16, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$17, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$18, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$19, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$20, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$21, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$22, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$23, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$24, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$25, 8(%rsp)
	movl	$128, (%rsp)
	movl	$396, %edi              # imm = 0x18C
	movl	$27, %esi
	movl	$228, %edx
	movl	$26, %ecx
	movl	$126, %r8d
	movl	$26, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_86
# BB#85:                                #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	jmp	.LBB17_135
	.align	16, 0x90
.LBB17_31:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movq	%r13, -56(%rbp)         # 8-byte Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -344(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	xorl	%ebx, %ebx
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	jmp	.LBB17_34
	.align	16, 0x90
.LBB17_33:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -344(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -264(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
.LBB17_34:                              # %for.inc1366
                                        #   in Loop: Header=BB17_29 Depth=2
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	xorl	%r15d, %r15d
	jmp	.LBB17_135
.LBB17_36:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -344(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -216(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	jmp	.LBB17_58
.LBB17_38:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -344(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -224(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	jmp	.LBB17_58
.LBB17_40:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -344(%rbp)          # 4-byte Folded Spill
	movl	$0, -336(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	jmp	.LBB17_58
.LBB17_42:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -344(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	jmp	.LBB17_58
.LBB17_44:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -320(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	jmp	.LBB17_58
.LBB17_46:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -304(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	jmp	.LBB17_58
.LBB17_48:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -296(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	jmp	.LBB17_58
.LBB17_50:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -288(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	jmp	.LBB17_58
.LBB17_52:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -272(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	jmp	.LBB17_58
.LBB17_54:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -328(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	jmp	.LBB17_58
.LBB17_56:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -248(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	jmp	.LBB17_57
.LBB17_60:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -232(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
.LBB17_57:                              # %for.inc1366
                                        #   in Loop: Header=BB17_29 Depth=2
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	jmp	.LBB17_58
.LBB17_62:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -200(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	jmp	.LBB17_79
.LBB17_64:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -192(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	jmp	.LBB17_79
.LBB17_66:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -176(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	jmp	.LBB17_79
.LBB17_68:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -152(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	jmp	.LBB17_79
.LBB17_70:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -144(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	jmp	.LBB17_79
.LBB17_72:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -128(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	jmp	.LBB17_79
.LBB17_74:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -120(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	jmp	.LBB17_79
.LBB17_76:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -104(%rbp)          # 4-byte Folded Spill
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	jmp	.LBB17_79
.LBB17_78:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -48(%rbp)           # 4-byte Folded Spill
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
.LBB17_79:                              # %for.inc1366
                                        #   in Loop: Header=BB17_29 Depth=2
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	.align	16, 0x90
.LBB17_58:                              # %for.inc1366
                                        #   in Loop: Header=BB17_29 Depth=2
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	xorl	%r15d, %r15d
	movl	$372, %ebx              # imm = 0x174
	jmp	.LBB17_135
.LBB17_81:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	xorl	%r15d, %r15d
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_83:                              #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$395, %r15d             # imm = 0x18B
	jmp	.LBB17_135
.LBB17_86:                              # %land.lhs.true616
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$396, %edi              # imm = 0x18C
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1929:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1754 17 is_stmt 1     # susan.c:1754:17
	leaq	2(%rbx,%r12), %rdi
	movl	$178, %esi
	movl	$179, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1754 14 is_stmt 0     # susan.c:1754:14
	movsbl	2(%rbx,%r12), %ebx
.Ltmp1930:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$2, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$3, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$4, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$5, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$6, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$7, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$8, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$9, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$10, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$11, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$12, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$13, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$14, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$15, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$16, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$17, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$18, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$19, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$20, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$21, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$22, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$23, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$24, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$25, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$26, 8(%rsp)
	movl	$128, (%rsp)
	movl	$397, %edi              # imm = 0x18D
	movl	$28, %esi
	movl	$228, %edx
	movl	$27, %ecx
	movl	$126, %r8d
	movl	$27, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_88
# BB#87:                                #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	movl	$0, -416(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	jmp	.LBB17_135
.LBB17_88:                              # %land.lhs.true625
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$397, %edi              # imm = 0x18D
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1931:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1755 17 is_stmt 1     # susan.c:1755:17
	leaq	3(%r12,%rbx), %rdi
	movl	$180, %esi
	movl	$181, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1755 14 is_stmt 0     # susan.c:1755:14
	movsbl	3(%r12,%rbx), %ebx
.Ltmp1932:
	movq	%r12, %r15
.Ltmp1933:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$2, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$3, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$4, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$5, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$6, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$7, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$8, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$9, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$10, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$11, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$12, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$13, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$14, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$15, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$16, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$17, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$18, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$19, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$20, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$21, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$22, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$23, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$24, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$25, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$26, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$27, 8(%rsp)
	movl	$128, (%rsp)
	movl	$398, %edi              # imm = 0x18E
	movl	$29, %esi
	movl	$228, %edx
	movl	$28, %ecx
	movl	$126, %r8d
	movl	$28, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_90
# BB#89:                                #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$0, -168(%rbp)          # 4-byte Folded Spill
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	jmp	.LBB17_135
.LBB17_90:                              # %land.lhs.true634
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$398, %edi              # imm = 0x18E
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1757 19 is_stmt 1     # susan.c:1757:19
	movq	-488(%rbp), %rax        # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	leaq	(%rcx,%rax), %r12
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1934:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1757 17 is_stmt 0     # susan.c:1757:17
	leaq	-3(%rbx,%r12), %rdi
	movl	$182, %esi
	movl	$183, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1757 14               # susan.c:1757:14
	movsbl	-3(%rbx,%r12), %ebx
.Ltmp1935:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$2, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$3, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$4, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$5, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$6, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$7, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$8, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$9, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$10, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$11, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$12, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$13, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$14, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$15, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$16, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$17, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$18, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$19, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$20, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$21, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$22, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$23, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$24, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$25, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$26, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$27, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$28, 8(%rsp)
	movl	$128, (%rsp)
	movl	$399, %edi              # imm = 0x18F
	movl	$30, %esi
	movl	$228, %edx
	movl	$29, %ecx
	movl	$126, %r8d
	movl	$29, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_92
# BB#91:                                #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$0, -408(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_92:                              # %land.lhs.true644
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$399, %edi              # imm = 0x18F
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1936:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1758 17 is_stmt 1     # susan.c:1758:17
	leaq	-2(%rbx,%r12), %rdi
	movl	$184, %esi
	movl	$185, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1758 14 is_stmt 0     # susan.c:1758:14
	movsbl	-2(%rbx,%r12), %ebx
.Ltmp1937:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$2, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$3, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$4, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$5, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$6, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$7, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$8, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$9, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$10, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$11, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$12, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$13, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$14, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$15, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$16, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$17, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$18, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$19, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$20, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$21, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$22, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$23, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$24, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$25, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$26, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$27, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$28, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$29, 8(%rsp)
	movl	$128, (%rsp)
	movl	$400, %edi              # imm = 0x190
	movl	$31, %esi
	movl	$228, %edx
	movl	$30, %ecx
	movl	$126, %r8d
	movl	$30, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_94
# BB#93:                                #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$0, -400(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_94:                              # %land.lhs.true654
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$400, %edi              # imm = 0x190
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1938:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1759 17 is_stmt 1     # susan.c:1759:17
	leaq	-1(%rbx,%r12), %rdi
	movl	$186, %esi
	movl	$187, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1759 14 is_stmt 0     # susan.c:1759:14
	movsbl	-1(%rbx,%r12), %ebx
.Ltmp1939:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$2, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$3, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$4, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$5, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$6, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$7, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$8, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$9, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$10, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$11, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$12, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$13, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$14, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$15, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$16, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$17, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$18, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$19, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$20, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$21, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$22, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$23, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$24, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$25, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$26, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$27, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$28, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$29, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$30, 8(%rsp)
	movl	$128, (%rsp)
	movl	$401, %edi              # imm = 0x191
	movl	$32, %esi
	movl	$228, %edx
	movl	$31, %ecx
	movl	$126, %r8d
	movl	$31, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_96
# BB#95:                                #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$0, -392(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_96:                              # %land.lhs.true664
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$401, %edi              # imm = 0x191
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1940:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1760 17 is_stmt 1     # susan.c:1760:17
	leaq	(%rbx,%r12), %rdi
	movl	$188, %esi
	movl	$189, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1760 14 is_stmt 0     # susan.c:1760:14
	movsbl	(%rbx,%r12), %ebx
.Ltmp1941:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$2, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$3, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$4, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$5, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$6, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$7, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$8, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$9, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$10, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$11, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$12, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$13, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$14, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$15, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$16, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$17, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$18, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$19, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$20, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$21, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$22, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$23, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$24, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$25, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$26, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$27, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$28, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$29, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$30, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$31, 8(%rsp)
	movl	$128, (%rsp)
	movl	$402, %edi              # imm = 0x192
	movl	$33, %esi
	movl	$228, %edx
	movl	$32, %ecx
	movl	$126, %r8d
	movl	$32, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_98
# BB#97:                                #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$0, -384(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_98:                              # %land.lhs.true673
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$402, %edi              # imm = 0x192
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1942:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1761 17 is_stmt 1     # susan.c:1761:17
	leaq	1(%rbx,%r12), %rdi
	movl	$190, %esi
	movl	$191, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1761 14 is_stmt 0     # susan.c:1761:14
	movsbl	1(%rbx,%r12), %ebx
.Ltmp1943:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$2, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$3, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$4, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$5, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$6, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$7, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$8, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$9, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$10, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$11, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$12, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$13, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$14, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$15, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$16, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$17, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$18, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$19, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$20, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$21, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$22, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$23, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$24, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$25, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$26, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$27, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$28, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$29, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$30, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$31, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$32, 8(%rsp)
	movl	$128, (%rsp)
	movl	$403, %edi              # imm = 0x193
	movl	$34, %esi
	movl	$228, %edx
	movl	$33, %ecx
	movl	$126, %r8d
	movl	$33, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_100
# BB#99:                                #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$0, -376(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_100:                             # %land.lhs.true683
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$403, %edi              # imm = 0x193
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1944:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1762 17 is_stmt 1     # susan.c:1762:17
	leaq	2(%rbx,%r12), %rdi
	movl	$192, %esi
	movl	$193, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1762 14 is_stmt 0     # susan.c:1762:14
	movsbl	2(%rbx,%r12), %ebx
.Ltmp1945:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$2, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$3, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$4, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$5, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$6, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$7, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$8, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$9, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$10, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$11, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$12, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$13, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$14, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$15, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$16, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$17, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$18, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$19, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$20, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$21, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$22, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$23, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$24, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$25, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$26, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$27, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$28, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$29, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$30, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$32, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$33, 8(%rsp)
	movl	$128, (%rsp)
	movl	$404, %edi              # imm = 0x194
	movl	$35, %esi
	movl	$228, %edx
	movl	$34, %ecx
	movl	$126, %r8d
	movl	$34, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_102
# BB#101:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$0, -368(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_102:                             # %land.lhs.true693
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$404, %edi              # imm = 0x194
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1946:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1763 17 is_stmt 1     # susan.c:1763:17
	movq	%r12, -104(%rbp)        # 8-byte Spill
	leaq	3(%r12,%rbx), %rdi
	movl	$194, %esi
	movl	$195, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1763 14 is_stmt 0     # susan.c:1763:14
	movsbl	3(%r12,%rbx), %ebx
.Ltmp1947:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$2, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$3, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$4, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$5, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$6, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$7, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$8, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$9, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$10, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$11, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$12, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$13, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$14, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$15, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$16, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$17, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$18, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$19, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$20, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$21, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$22, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$23, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$24, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$25, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$26, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$27, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$28, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$29, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$30, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$31, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$33, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$34, 8(%rsp)
	movl	$128, (%rsp)
	movl	$405, %edi              # imm = 0x195
	movl	$36, %esi
	movl	$228, %edx
	movl	$35, %ecx
	movl	$126, %r8d
	movl	$35, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_104
# BB#103:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$0, -360(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_104:                             # %land.lhs.true703
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$405, %edi              # imm = 0x195
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1765 19 is_stmt 1     # susan.c:1765:19
	movq	-504(%rbp), %rax        # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	leaq	(%rcx,%rax), %r12
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1948:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1765 17 is_stmt 0     # susan.c:1765:17
	leaq	-3(%rbx,%r12), %rdi
	movl	$196, %esi
	movl	$197, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1765 14               # susan.c:1765:14
	movsbl	-3(%rbx,%r12), %ebx
.Ltmp1949:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$2, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$3, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$4, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$5, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$6, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$7, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$8, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$9, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$10, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$11, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$12, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$13, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$14, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$15, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$16, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$17, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$18, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$19, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$20, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$21, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$22, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$23, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$24, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$25, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$26, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$27, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$28, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$29, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$30, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$31, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$32, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$33, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$34, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$35, 8(%rsp)
	movl	$128, (%rsp)
	movl	$406, %edi              # imm = 0x196
	movl	$37, %esi
	movl	$228, %edx
	movl	$36, %ecx
	movl	$126, %r8d
	movl	$36, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_106
# BB#105:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$0, -352(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_106:                             # %land.lhs.true713
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$406, %edi              # imm = 0x196
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1950:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1766 17 is_stmt 1     # susan.c:1766:17
	leaq	-2(%rbx,%r12), %rdi
	movl	$198, %esi
	movl	$199, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1766 14 is_stmt 0     # susan.c:1766:14
	movsbl	-2(%rbx,%r12), %ebx
.Ltmp1951:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$2, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$3, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$4, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$5, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$6, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$7, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$8, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$9, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$10, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$11, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$12, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$13, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$14, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$15, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$16, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$17, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$18, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$19, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$20, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$21, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$22, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$23, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$24, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$25, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$26, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$27, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$28, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$29, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$30, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$31, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$32, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$33, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$34, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$35, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$36, 8(%rsp)
	movl	$128, (%rsp)
	movl	$407, %edi              # imm = 0x197
	movl	$38, %esi
	movl	$228, %edx
	movl	$37, %ecx
	movl	$126, %r8d
	movl	$37, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_108
# BB#107:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$0, -312(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_108:                             # %land.lhs.true723
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$407, %edi              # imm = 0x197
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1952:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1767 17 is_stmt 1     # susan.c:1767:17
	leaq	-1(%rbx,%r12), %rdi
	movl	$200, %esi
	movl	$201, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1767 14 is_stmt 0     # susan.c:1767:14
	movsbl	-1(%rbx,%r12), %ebx
.Ltmp1953:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$2, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$3, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$4, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$5, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$6, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$7, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$8, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$9, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$10, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$11, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$12, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$13, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$14, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$15, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$16, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$17, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$18, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$19, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$20, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$21, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$22, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$23, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$24, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$25, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$26, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$27, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$28, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$29, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$30, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$31, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$33, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$34, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$35, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$36, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$37, 8(%rsp)
	movl	$128, (%rsp)
	movl	$408, %edi              # imm = 0x198
	movl	$39, %esi
	movl	$228, %edx
	movl	$38, %ecx
	movl	$126, %r8d
	movl	$38, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_110
# BB#109:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$0, -280(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_110:                             # %land.lhs.true733
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$408, %edi              # imm = 0x198
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1954:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1768 17 is_stmt 1     # susan.c:1768:17
	leaq	(%rbx,%r12), %rdi
	movl	$202, %esi
	movl	$203, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1768 14 is_stmt 0     # susan.c:1768:14
	movsbl	(%rbx,%r12), %ebx
.Ltmp1955:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$2, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$3, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$4, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$5, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$6, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$7, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$8, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$9, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$10, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$11, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$12, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$13, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$14, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$15, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$16, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$17, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$18, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$19, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$20, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$21, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$22, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$23, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$24, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$25, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$26, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$27, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$28, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$29, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$30, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$31, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$32, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$33, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$34, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$35, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$36, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$37, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$38, 8(%rsp)
	movl	$128, (%rsp)
	movl	$409, %edi              # imm = 0x199
	movl	$40, %esi
	movl	$228, %edx
	movl	$39, %ecx
	movl	$126, %r8d
	movl	$39, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_112
# BB#111:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$0, -240(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_112:                             # %land.lhs.true742
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$409, %edi              # imm = 0x199
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1956:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1769 17 is_stmt 1     # susan.c:1769:17
	movq	%r12, -112(%rbp)        # 8-byte Spill
	leaq	1(%rbx,%r12), %rdi
	movl	$204, %esi
	movl	$205, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1769 14 is_stmt 0     # susan.c:1769:14
	movsbl	1(%rbx,%r12), %ebx
.Ltmp1957:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$2, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$3, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$4, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$5, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$6, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$7, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$8, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$9, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$10, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$11, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$12, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$13, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$14, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$15, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$16, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$17, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$18, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$19, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$20, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$21, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$22, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$23, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$24, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$25, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$26, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$27, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$28, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$29, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$30, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$31, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$32, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$33, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$34, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$35, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$36, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$37, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$38, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$39, 8(%rsp)
	movl	$128, (%rsp)
	movl	$410, %edi              # imm = 0x19A
	movl	$41, %esi
	movl	$228, %edx
	movl	$40, %ecx
	movl	$126, %r8d
	movl	$40, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_114
# BB#113:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$0, -208(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_114:                             # %land.lhs.true752
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$410, %edi              # imm = 0x19A
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %r12        # 8-byte Reload
.Ltmp1958:
	#DEBUG_VALUE: susan_corners_quick:r <- R12
	movq	-112(%rbp), %rbx        # 8-byte Reload
	.loc	2 1770 17 is_stmt 1     # susan.c:1770:17
	leaq	2(%r12,%rbx), %rdi
	movl	$206, %esi
	movl	$207, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1770 14 is_stmt 0     # susan.c:1770:14
	movsbl	2(%r12,%rbx), %ebx
.Ltmp1959:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$2, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$3, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$4, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$5, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$6, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$7, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$8, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$9, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$10, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$11, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$12, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$13, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$14, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$15, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$16, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$17, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$18, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$19, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$20, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$21, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$22, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$23, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$24, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$25, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$26, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$27, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$28, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$29, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$30, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$31, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$32, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$33, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$34, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$35, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$36, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$37, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$38, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$39, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$40, 8(%rsp)
	movl	$128, (%rsp)
	movl	$411, %edi              # imm = 0x19B
	movl	$42, %esi
	movl	$228, %edx
	movl	$41, %ecx
	movl	$126, %r8d
	movl	$41, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_116
# BB#115:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$0, -184(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_135
.LBB17_116:                             # %land.lhs.true762
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$411, %edi              # imm = 0x19B
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %r12        # 8-byte Reload
.Ltmp1960:
	#DEBUG_VALUE: susan_corners_quick:r <- R12
	movq	-112(%rbp), %rbx        # 8-byte Reload
	.loc	2 1771 17 is_stmt 1     # susan.c:1771:17
	leaq	3(%rbx,%r12), %rdi
	movl	$208, %esi
	movl	$209, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1771 14 is_stmt 0     # susan.c:1771:14
	movsbl	3(%rbx,%r12), %ebx
.Ltmp1961:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$2, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$3, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$4, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$5, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$6, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$7, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$8, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$9, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$10, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$11, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$12, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$13, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$14, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$15, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$16, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$17, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$18, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$19, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$20, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$21, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$22, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$23, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$24, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$25, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$26, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$27, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$28, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$29, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$30, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$31, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$32, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$33, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$34, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$35, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$36, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$37, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$38, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$39, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$40, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$41, 8(%rsp)
	movl	$128, (%rsp)
	movl	$412, %edi              # imm = 0x19C
	movl	$43, %esi
	movl	$228, %edx
	movl	$42, %ecx
	movl	$126, %r8d
	movl	$42, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_118
# BB#117:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$0, -160(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$412, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19C
	jmp	.LBB17_135
.LBB17_118:                             # %land.lhs.true772
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$412, %edi              # imm = 0x19C
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	.loc	2 1773 19 is_stmt 1     # susan.c:1773:19
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	leaq	(%rcx,%rax), %r14
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1962:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1773 17 is_stmt 0     # susan.c:1773:17
	leaq	-3(%rbx,%r14), %rdi
	movl	$210, %esi
	movl	$211, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1773 14               # susan.c:1773:14
	movsbl	-3(%rbx,%r14), %ebx
.Ltmp1963:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$2, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$3, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$4, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$5, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$6, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$7, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$8, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$9, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$10, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$11, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$12, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$13, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$14, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$15, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$16, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$17, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$18, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$19, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$20, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$21, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$22, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$23, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$24, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$25, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$26, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$27, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$28, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$29, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$30, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$31, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$32, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$33, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$34, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$35, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$36, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$37, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$38, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$39, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$40, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$41, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$42, 8(%rsp)
	movl	$128, (%rsp)
	movl	$413, %edi              # imm = 0x19D
	movl	$44, %esi
	movl	$228, %edx
	movl	$43, %ecx
	movl	$126, %r8d
	movl	$43, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_120
# BB#119:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$0, -136(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$412, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19C
	movl	$413, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19D
	jmp	.LBB17_135
.LBB17_120:                             # %land.lhs.true782
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$413, %edi              # imm = 0x19D
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1964:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1774 17 is_stmt 1     # susan.c:1774:17
	leaq	-2(%r14,%rbx), %rdi
	movl	$212, %esi
	movl	$213, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1774 14 is_stmt 0     # susan.c:1774:14
	movsbl	-2(%r14,%rbx), %ebx
.Ltmp1965:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$2, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$3, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$4, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$5, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$6, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$7, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$8, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$9, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$10, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$11, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$12, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$13, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$14, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$15, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$16, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$17, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$18, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$19, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$20, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$21, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$22, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$23, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$24, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$25, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$26, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$27, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$28, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$29, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$30, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$31, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$32, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$33, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$34, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$35, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$36, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$37, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$38, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$39, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$40, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$41, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$42, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$43, 8(%rsp)
	movl	$128, (%rsp)
	movl	$414, %edi              # imm = 0x19E
	movl	$45, %esi
	movl	$228, %edx
	movl	$44, %ecx
	movl	$126, %r8d
	movl	$44, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_122
# BB#121:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$0, -112(%rbp)          # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$412, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19C
	movl	$413, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19D
	movl	$414, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19E
	jmp	.LBB17_135
.LBB17_122:                             # %land.lhs.true792
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$414, %edi              # imm = 0x19E
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1966:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1775 17 is_stmt 1     # susan.c:1775:17
	leaq	-1(%r14,%rbx), %rdi
	movl	$214, %esi
	movl	$215, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1775 14 is_stmt 0     # susan.c:1775:14
	movsbl	-1(%r14,%rbx), %ebx
.Ltmp1967:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 696(%rsp)
	movl	$214, 688(%rsp)
	movl	$2, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$3, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$4, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$5, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$6, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$7, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$8, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$9, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$10, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$11, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$12, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$13, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$14, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$15, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$16, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$17, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$18, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$19, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$20, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$21, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$22, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$23, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$24, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$25, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$26, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$27, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$28, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$29, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$30, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$31, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$32, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$33, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$34, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$35, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$36, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$37, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$38, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$39, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$40, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$41, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$42, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$43, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$44, 8(%rsp)
	movl	$128, (%rsp)
	movl	$415, %edi              # imm = 0x19F
	movl	$46, %esi
	movl	$228, %edx
	movl	$45, %ecx
	movl	$126, %r8d
	movl	$45, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_124
# BB#123:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$0, -96(%rbp)           # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$412, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19C
	movl	$413, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19D
	movl	$414, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19E
	movl	$415, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19F
	jmp	.LBB17_135
.LBB17_124:                             # %land.lhs.true802
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$415, %edi              # imm = 0x19F
	callq	_KPushCDep
	movl	$9, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1968:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1776 17 is_stmt 1     # susan.c:1776:17
	leaq	(%rbx,%r14), %rdi
	movl	$216, %esi
	movl	$217, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1776 14 is_stmt 0     # susan.c:1776:14
	movsbl	(%rbx,%r14), %ebx
.Ltmp1969:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 712(%rsp)
	movl	$216, 704(%rsp)
	movl	$2, 696(%rsp)
	movl	$214, 688(%rsp)
	movl	$3, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$4, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$5, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$6, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$7, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$8, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$9, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$10, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$11, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$12, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$13, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$14, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$15, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$16, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$17, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$18, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$19, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$20, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$21, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$22, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$23, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$24, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$25, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$26, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$27, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$28, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$29, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$30, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$31, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$32, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$33, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$34, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$35, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$36, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$37, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$38, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$39, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$40, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$41, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$42, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$43, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$44, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$45, 8(%rsp)
	movl	$128, (%rsp)
	movl	$416, %edi              # imm = 0x1A0
	movl	$47, %esi
	movl	$228, %edx
	movl	$46, %ecx
	movl	$126, %r8d
	movl	$46, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_126
# BB#125:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$0, -88(%rbp)           # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$412, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19C
	movl	$413, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19D
	movl	$414, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19E
	movl	$415, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19F
	movl	$416, -96(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1A0
	jmp	.LBB17_135
.LBB17_126:                             # %land.lhs.true811
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$416, %edi              # imm = 0x1A0
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1970:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1777 17 is_stmt 1     # susan.c:1777:17
	leaq	1(%r14,%rbx), %rdi
	movl	$218, %esi
	movl	$219, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1777 14 is_stmt 0     # susan.c:1777:14
	movsbl	1(%r14,%rbx), %ebx
.Ltmp1971:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 728(%rsp)
	movl	$218, 720(%rsp)
	movl	$2, 712(%rsp)
	movl	$216, 704(%rsp)
	movl	$3, 696(%rsp)
	movl	$214, 688(%rsp)
	movl	$4, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$5, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$6, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$7, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$8, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$9, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$10, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$11, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$12, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$13, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$14, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$15, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$16, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$17, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$18, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$19, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$20, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$21, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$22, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$23, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$24, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$25, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$26, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$27, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$28, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$29, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$30, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$31, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$32, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$33, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$34, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$35, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$36, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$37, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$38, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$39, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$40, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$41, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$42, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$43, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$44, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$45, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$46, 8(%rsp)
	movl	$128, (%rsp)
	movl	$417, %edi              # imm = 0x1A1
	movl	$48, %esi
	movl	$228, %edx
	movl	$47, %ecx
	movl	$126, %r8d
	movl	$47, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_128
# BB#127:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$0, -80(%rbp)           # 4-byte Folded Spill
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	movl	$412, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19C
	movl	$413, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19D
	movl	$414, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19E
	movl	$415, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19F
	movl	$416, -96(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1A0
	movl	$417, -88(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1A1
	jmp	.LBB17_135
.LBB17_128:                             # %land.lhs.true821
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$417, %edi              # imm = 0x1A1
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1972:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1778 17 is_stmt 1     # susan.c:1778:17
	leaq	2(%r14,%rbx), %rdi
	movl	$220, %esi
	movl	$221, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1778 14 is_stmt 0     # susan.c:1778:14
	movsbl	2(%r14,%rbx), %ebx
.Ltmp1973:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 744(%rsp)
	movl	$220, 736(%rsp)
	movl	$2, 728(%rsp)
	movl	$218, 720(%rsp)
	movl	$3, 712(%rsp)
	movl	$216, 704(%rsp)
	movl	$4, 696(%rsp)
	movl	$214, 688(%rsp)
	movl	$5, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$6, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$7, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$8, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$9, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$10, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$11, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$12, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$13, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$14, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$15, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$16, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$17, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$18, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$19, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$20, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$21, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$22, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$23, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$24, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$25, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$26, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$27, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$28, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$29, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$30, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$31, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$32, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$33, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$34, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$35, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$36, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$37, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$38, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$39, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$40, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$41, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$42, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$43, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$44, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$45, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$46, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$47, 8(%rsp)
	movl	$128, (%rsp)
	movl	$418, %edi              # imm = 0x1A2
	movl	$49, %esi
	movl	$228, %edx
	movl	$48, %ecx
	movl	$126, %r8d
	movl	$48, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jge	.LBB17_130
# BB#129:                               #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$0, -256(%rbp)          # 4-byte Folded Spill
	jmp	.LBB17_134
.LBB17_130:                             # %land.lhs.true831
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$418, %edi              # imm = 0x1A2
	callq	_KPushCDep
	movl	$10, %edi
	callq	_KWork
	movq	-432(%rbp), %rbx        # 8-byte Reload
.Ltmp1974:
	#DEBUG_VALUE: susan_corners_quick:r <- RBX
	.loc	2 1779 17 is_stmt 1     # susan.c:1779:17
	leaq	3(%r14,%rbx), %rdi
	movl	$222, %esi
	movl	$223, %edx
	movl	$1, %ecx
	callq	_KLoad1
	.loc	2 1779 14 is_stmt 0     # susan.c:1779:14
	movsbl	3(%r14,%rbx), %ebx
.Ltmp1975:
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	movl	$1, 760(%rsp)
	movl	$222, 752(%rsp)
	movl	$2, 744(%rsp)
	movl	$220, 736(%rsp)
	movl	$3, 728(%rsp)
	movl	$218, 720(%rsp)
	movl	$4, 712(%rsp)
	movl	$216, 704(%rsp)
	movl	$5, 696(%rsp)
	movl	$214, 688(%rsp)
	movl	$6, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$7, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$8, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$9, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$10, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$11, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$12, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$13, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$14, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$15, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$16, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$17, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$18, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$19, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$20, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$21, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$22, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$23, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$24, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$25, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$26, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$27, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$28, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$29, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$30, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$31, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$32, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$33, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$34, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$35, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$36, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$37, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$38, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$39, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$40, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$41, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$42, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$43, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$44, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$45, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$46, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$47, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$48, 8(%rsp)
	movl	$128, (%rsp)
	movl	$419, %edi              # imm = 0x1A3
	movl	$50, %esi
	movl	$228, %edx
	movl	$49, %ecx
	movl	$126, %r8d
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	cmpl	%ebx, -88(%rbp)         # 4-byte Folded Reload
	jl	.LBB17_133
# BB#131:                               # %if.then841
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movq	-96(%rbp), %rax         # 8-byte Reload
	.loc	2 1735 18 is_stmt 1     # susan.c:1735:18
	leaq	-2(%rax), %rcx
	.loc	2 1736 18               # susan.c:1736:18
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	leaq	-1(%rax), %rcx
	.loc	2 1738 18               # susan.c:1738:18
	movq	%rcx, -160(%rbp)        # 8-byte Spill
	leaq	1(%rax), %rcx
	.loc	2 1739 18               # susan.c:1739:18
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	leaq	2(%rax), %rcx
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	movq	%rax, %r14
	.loc	2 1743 18               # susan.c:1743:18
	movq	%r13, -224(%rbp)        # 8-byte Spill
	leaq	-2(%r13), %rax
	.loc	2 1744 18               # susan.c:1744:18
	movq	%rax, -88(%rbp)         # 8-byte Spill
	leaq	-1(%r13), %rax
	.loc	2 1746 18               # susan.c:1746:18
	movq	%rax, -72(%rbp)         # 8-byte Spill
	leaq	1(%r13), %rax
	.loc	2 1747 18               # susan.c:1747:18
	movq	%rax, -120(%rbp)        # 8-byte Spill
	leaq	2(%r13), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	.loc	2 1751 18               # susan.c:1751:18
	leaq	-2(%r15), %rax
	.loc	2 1752 18               # susan.c:1752:18
	movq	%rax, -264(%rbp)        # 8-byte Spill
	leaq	-1(%r15), %rax
	.loc	2 1753 19               # susan.c:1753:19
	movq	%rax, -240(%rbp)        # 8-byte Spill
	leaq	1(%r15), %rax
	.loc	2 1754 19               # susan.c:1754:19
	movq	%rax, -248(%rbp)        # 8-byte Spill
	leaq	2(%r15), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	movq	-104(%rbp), %rax        # 8-byte Reload
	.loc	2 1758 19               # susan.c:1758:19
	leaq	-2(%rax), %rcx
	.loc	2 1759 19               # susan.c:1759:19
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	leaq	-1(%rax), %rcx
	.loc	2 1761 19               # susan.c:1761:19
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	leaq	1(%rax), %rcx
	.loc	2 1762 19               # susan.c:1762:19
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	leaq	2(%rax), %rcx
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	-112(%rbp), %rax        # 8-byte Reload
	.loc	2 1766 19               # susan.c:1766:19
	leaq	-2(%rax), %rcx
	.loc	2 1767 19               # susan.c:1767:19
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	leaq	-1(%rax), %rcx
	.loc	2 1769 19               # susan.c:1769:19
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	leaq	1(%rax), %rcx
	.loc	2 1770 19               # susan.c:1770:19
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	leaq	2(%rax), %rcx
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movl	$419, %edi              # imm = 0x1A3
	callq	_KPushCDep
	movl	$669, %edi              # imm = 0x29D
	callq	_KWork
	movq	-528(%rbp), %rax        # 8-byte Reload
	.loc	2 1782 11               # susan.c:1782:11
.Ltmp1976:
	cltq
	movq	%rax, -528(%rbp)        # 8-byte Spill
	leaq	(%rax,%rax,2), %r12
	movq	%r12, -280(%rbp)        # 8-byte Spill
	movq	-520(%rbp), %rbx        # 8-byte Reload
.Ltmp1977:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- RBX
	leaq	(%rbx,%r12,8), %r13
	leaq	8(%rbx,%r12,8), %rdi
	movl	$4, %esi
	callq	_KStoreConst
	movl	$0, 8(%rbx,%r12,8)
	movl	$1, 776(%rsp)
	movl	$222, 768(%rsp)
	movl	$2, 760(%rsp)
	movl	$220, 752(%rsp)
	movl	$3, 744(%rsp)
	movl	$218, 736(%rsp)
	movl	$4, 728(%rsp)
	movl	$216, 720(%rsp)
	movl	$5, 712(%rsp)
	movl	$214, 704(%rsp)
	movl	$6, 696(%rsp)
	movl	$212, 688(%rsp)
	movl	$7, 680(%rsp)
	movl	$210, 672(%rsp)
	movl	$8, 664(%rsp)
	movl	$208, 656(%rsp)
	movl	$9, 648(%rsp)
	movl	$206, 640(%rsp)
	movl	$10, 632(%rsp)
	movl	$204, 624(%rsp)
	movl	$11, 616(%rsp)
	movl	$202, 608(%rsp)
	movl	$12, 600(%rsp)
	movl	$200, 592(%rsp)
	movl	$13, 584(%rsp)
	movl	$198, 576(%rsp)
	movl	$14, 568(%rsp)
	movl	$196, 560(%rsp)
	movl	$15, 552(%rsp)
	movl	$194, 544(%rsp)
	movl	$16, 536(%rsp)
	movl	$192, 528(%rsp)
	movl	$17, 520(%rsp)
	movl	$190, 512(%rsp)
	movl	$18, 504(%rsp)
	movl	$188, 496(%rsp)
	movl	$19, 488(%rsp)
	movl	$186, 480(%rsp)
	movl	$20, 472(%rsp)
	movl	$184, 464(%rsp)
	movl	$21, 456(%rsp)
	movl	$182, 448(%rsp)
	movl	$22, 440(%rsp)
	movl	$180, 432(%rsp)
	movl	$23, 424(%rsp)
	movl	$178, 416(%rsp)
	movl	$24, 408(%rsp)
	movl	$176, 400(%rsp)
	movl	$25, 392(%rsp)
	movl	$174, 384(%rsp)
	movl	$26, 376(%rsp)
	movl	$172, 368(%rsp)
	movl	$27, 360(%rsp)
	movl	$170, 352(%rsp)
	movl	$28, 344(%rsp)
	movl	$168, 336(%rsp)
	movl	$29, 328(%rsp)
	movl	$166, 320(%rsp)
	movl	$30, 312(%rsp)
	movl	$164, 304(%rsp)
	movl	$31, 296(%rsp)
	movl	$162, 288(%rsp)
	movl	$32, 280(%rsp)
	movl	$160, 272(%rsp)
	movl	$33, 264(%rsp)
	movl	$158, 256(%rsp)
	movl	$34, 248(%rsp)
	movl	$156, 240(%rsp)
	movl	$35, 232(%rsp)
	movl	$154, 224(%rsp)
	movl	$36, 216(%rsp)
	movl	$152, 208(%rsp)
	movl	$37, 200(%rsp)
	movl	$150, 192(%rsp)
	movl	$38, 184(%rsp)
	movl	$148, 176(%rsp)
	movl	$39, 168(%rsp)
	movl	$146, 160(%rsp)
	movl	$40, 152(%rsp)
	movl	$144, 144(%rsp)
	movl	$41, 136(%rsp)
	movl	$142, 128(%rsp)
	movl	$42, 120(%rsp)
	movl	$140, 112(%rsp)
	movl	$43, 104(%rsp)
	movl	$138, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$136, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$134, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$132, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$130, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$128, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$126, (%rsp)
	movl	$224, %edi
	movl	$51, %esi
	movl	$225, %edx
	xorl	%ecx, %ecx
	movl	$228, %r8d
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$224, %edi
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	.loc	2 1783 11               # susan.c:1783:11
	movq	-56(%rbp), %rax         # 8-byte Reload
	movl	%eax, (%rbx,%r12,8)
	.loc	2 1784 11               # susan.c:1784:11
	leaq	4(%rbx,%r12,8), %r13
	movl	$1, 776(%rsp)
	movl	$222, 768(%rsp)
	movl	$2, 760(%rsp)
	movl	$220, 752(%rsp)
	movl	$3, 744(%rsp)
	movl	$218, 736(%rsp)
	movl	$4, 728(%rsp)
	movl	$216, 720(%rsp)
	movl	$5, 712(%rsp)
	movl	$214, 704(%rsp)
	movl	$6, 696(%rsp)
	movl	$212, 688(%rsp)
	movl	$7, 680(%rsp)
	movl	$210, 672(%rsp)
	movl	$8, 664(%rsp)
	movl	$208, 656(%rsp)
	movl	$9, 648(%rsp)
	movl	$206, 640(%rsp)
	movl	$10, 632(%rsp)
	movl	$204, 624(%rsp)
	movl	$11, 616(%rsp)
	movl	$202, 608(%rsp)
	movl	$12, 600(%rsp)
	movl	$200, 592(%rsp)
	movl	$13, 584(%rsp)
	movl	$198, 576(%rsp)
	movl	$14, 568(%rsp)
	movl	$196, 560(%rsp)
	movl	$15, 552(%rsp)
	movl	$194, 544(%rsp)
	movl	$16, 536(%rsp)
	movl	$192, 528(%rsp)
	movl	$17, 520(%rsp)
	movl	$190, 512(%rsp)
	movl	$18, 504(%rsp)
	movl	$188, 496(%rsp)
	movl	$19, 488(%rsp)
	movl	$186, 480(%rsp)
	movl	$20, 472(%rsp)
	movl	$184, 464(%rsp)
	movl	$21, 456(%rsp)
	movl	$182, 448(%rsp)
	movl	$22, 440(%rsp)
	movl	$180, 432(%rsp)
	movl	$23, 424(%rsp)
	movl	$178, 416(%rsp)
	movl	$24, 408(%rsp)
	movl	$176, 400(%rsp)
	movl	$25, 392(%rsp)
	movl	$174, 384(%rsp)
	movl	$26, 376(%rsp)
	movl	$172, 368(%rsp)
	movl	$27, 360(%rsp)
	movl	$170, 352(%rsp)
	movl	$28, 344(%rsp)
	movl	$168, 336(%rsp)
	movl	$29, 328(%rsp)
	movl	$166, 320(%rsp)
	movl	$30, 312(%rsp)
	movl	$164, 304(%rsp)
	movl	$31, 296(%rsp)
	movl	$162, 288(%rsp)
	movl	$32, 280(%rsp)
	movl	$160, 272(%rsp)
	movl	$33, 264(%rsp)
	movl	$158, 256(%rsp)
	movl	$34, 248(%rsp)
	movl	$156, 240(%rsp)
	movl	$35, 232(%rsp)
	movl	$154, 224(%rsp)
	movl	$36, 216(%rsp)
	movl	$152, 208(%rsp)
	movl	$37, 200(%rsp)
	movl	$150, 192(%rsp)
	movl	$38, 184(%rsp)
	movl	$148, 176(%rsp)
	movl	$39, 168(%rsp)
	movl	$146, 160(%rsp)
	movl	$40, 152(%rsp)
	movl	$144, 144(%rsp)
	movl	$41, 136(%rsp)
	movl	$142, 128(%rsp)
	movl	$42, 120(%rsp)
	movl	$140, 112(%rsp)
	movl	$43, 104(%rsp)
	movl	$138, 96(%rsp)
	movl	$44, 88(%rsp)
	movl	$136, 80(%rsp)
	movl	$45, 72(%rsp)
	movl	$134, 64(%rsp)
	movl	$46, 56(%rsp)
	movl	$132, 48(%rsp)
	movl	$47, 40(%rsp)
	movl	$130, 32(%rsp)
	movl	$48, 24(%rsp)
	movl	$128, 16(%rsp)
	movl	$49, 8(%rsp)
	movl	$126, (%rsp)
	movl	$229, %edi
	movl	$51, %esi
	movl	$227, %edx
	xorl	%ecx, %ecx
	movl	$228, %r8d
	movl	$49, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$229, %edi
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	movq	-496(%rbp), %rax        # 8-byte Reload
	movl	%eax, 4(%rbx,%r12,8)
.Ltmp1978:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	movq	-544(%rbp), %r13        # 8-byte Reload
.Ltmp1979:
	#DEBUG_VALUE: susan_corners_quick:in <- R13
	movq	-136(%rbp), %rdi        # 8-byte Reload
	.loc	2 1785 15               # susan.c:1785:15
	addq	%r13, %rdi
	movq	%rdi, -136(%rbp)        # 8-byte Spill
	movl	$230, %esi
	movl	$231, %edx
	movl	$1, %ecx
	callq	_KLoad1
	leaq	(%r13,%r14), %rbx
	movq	%rbx, -296(%rbp)        # 8-byte Spill
	movzbl	-2(%r13,%r14), %r15d
	movq	-160(%rbp), %rdi        # 8-byte Reload
	.loc	2 1785 38 is_stmt 0     # susan.c:1785:38
	addq	%r13, %rdi
	movq	%rdi, -160(%rbp)        # 8-byte Spill
	movl	$232, %esi
	movl	$233, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r13,%r14), %eax
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r15d, %eax
	movl	%eax, %r15d
	movl	$234, %esi
	movl	$235, %edx
	movl	$1, %ecx
	movq	%rbx, %rdi
	callq	_KLoad1
	.loc	2 1785 61               # susan.c:1785:61
	movzbl	(%r13,%r14), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r15d, %ebx
	movq	-144(%rbp), %rdi        # 8-byte Reload
	.loc	2 1785 82               # susan.c:1785:82
	addq	%r13, %rdi
	movq	%rdi, -144(%rbp)        # 8-byte Spill
	movl	$236, %esi
	movl	$237, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r13,%r14), %r15d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %r15d
	movq	-152(%rbp), %rdi        # 8-byte Reload
	.loc	2 1785 105              # susan.c:1785:105
	addq	%r13, %rdi
	movq	%rdi, -152(%rbp)        # 8-byte Spill
	movl	$238, %esi
	movl	$239, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	2(%r13,%r14), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r15d, %ebx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	.loc	2 1786 15 is_stmt 1     # susan.c:1786:15
	addq	%r13, %rdi
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movl	$240, %esi
	movl	$241, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-224(%rbp), %r15        # 8-byte Reload
	leaq	(%r13,%r15), %r14
	movq	%r14, -288(%rbp)        # 8-byte Spill
	movzbl	-2(%r13,%r15), %ecx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %ecx
	movl	%ecx, %ebx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	.loc	2 1786 38               # susan.c:1786:38
	addq	%r13, %rdi
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movl	$242, %esi
	movl	$243, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r13,%r15), %r12d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %r12d
	movl	$244, %esi
	movl	$245, %edx
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	.loc	2 1786 61               # susan.c:1786:61
	movzbl	(%r13,%r15), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r12d, %ebx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	.loc	2 1786 82               # susan.c:1786:82
	addq	%r13, %rdi
	movq	%rdi, -120(%rbp)        # 8-byte Spill
	movl	$246, %esi
	movl	$247, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r13,%r15), %r14d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %r14d
	movq	-128(%rbp), %rdi        # 8-byte Reload
	.loc	2 1786 105              # susan.c:1786:105
	addq	%r13, %rdi
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movl	$248, %esi
	movl	$249, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	2(%r13,%r15), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r14d, %ebx
	movq	-264(%rbp), %rdi        # 8-byte Reload
	.loc	2 1787 15               # susan.c:1787:15
	addq	%r13, %rdi
	movq	%rdi, -264(%rbp)        # 8-byte Spill
	movl	$250, %esi
	movl	$251, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movq	-80(%rbp), %rax         # 8-byte Reload
	leaq	(%r13,%rax), %r14
	movzbl	-2(%r13,%rax), %ecx
	movq	%rax, %r15
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %ecx
	movl	%ecx, %r12d
	movq	-240(%rbp), %rdi        # 8-byte Reload
	.loc	2 1787 38               # susan.c:1787:38
	addq	%r13, %rdi
	movq	%rdi, -240(%rbp)        # 8-byte Spill
	movl	$252, %esi
	movl	$253, %edx
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r13,%r15), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r12d, %ebx
	movl	$254, %esi
	movl	$255, %edx
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	.loc	2 1787 61               # susan.c:1787:61
	movzbl	(%r13,%r15), %r12d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %r12d
	movq	-248(%rbp), %rdi        # 8-byte Reload
	.loc	2 1787 82               # susan.c:1787:82
	addq	%r13, %rdi
	movq	%rdi, -248(%rbp)        # 8-byte Spill
	movl	$256, %esi              # imm = 0x100
	movl	$257, %edx              # imm = 0x101
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r13,%r15), %r14d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r12d, %r14d
	movq	-256(%rbp), %rdi        # 8-byte Reload
	.loc	2 1787 105              # susan.c:1787:105
	addq	%r13, %rdi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movl	$258, %esi              # imm = 0x102
	movl	$259, %edx              # imm = 0x103
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	2(%r13,%r15), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r14d, %ebx
	movq	-184(%rbp), %rdi        # 8-byte Reload
	.loc	2 1788 15               # susan.c:1788:15
	addq	%r13, %rdi
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movl	$260, %esi              # imm = 0x104
	movl	$261, %edx              # imm = 0x105
	movl	$1, %ecx
	callq	_KLoad1
	movq	-104(%rbp), %r15        # 8-byte Reload
	leaq	(%r13,%r15), %r14
	movq	%r14, -304(%rbp)        # 8-byte Spill
	movzbl	-2(%r13,%r15), %ecx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %ecx
	movl	%ecx, %r12d
	movq	-168(%rbp), %rdi        # 8-byte Reload
	.loc	2 1788 38               # susan.c:1788:38
	addq	%r13, %rdi
	movq	%rdi, -168(%rbp)        # 8-byte Spill
	movl	$262, %esi              # imm = 0x106
	movl	$263, %edx              # imm = 0x107
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r13,%r15), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r12d, %ebx
	movl	$264, %esi              # imm = 0x108
	movl	$265, %edx              # imm = 0x109
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	.loc	2 1788 61               # susan.c:1788:61
	movzbl	(%r13,%r15), %r12d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %r12d
	movq	-176(%rbp), %rdi        # 8-byte Reload
	.loc	2 1788 82               # susan.c:1788:82
	addq	%r13, %rdi
	movq	%rdi, -176(%rbp)        # 8-byte Spill
	movl	$266, %esi              # imm = 0x10A
	movl	$267, %edx              # imm = 0x10B
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r13,%r15), %r14d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r12d, %r14d
	movq	-192(%rbp), %rdi        # 8-byte Reload
	.loc	2 1788 105              # susan.c:1788:105
	addq	%r13, %rdi
	movq	%rdi, -192(%rbp)        # 8-byte Spill
	movl	$268, %esi              # imm = 0x10C
	movl	$269, %edx              # imm = 0x10D
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	2(%r13,%r15), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r14d, %ebx
	movq	-216(%rbp), %rdi        # 8-byte Reload
	.loc	2 1789 15               # susan.c:1789:15
	addq	%r13, %rdi
	movq	%rdi, -216(%rbp)        # 8-byte Spill
	movl	$270, %esi              # imm = 0x10E
	movl	$271, %edx              # imm = 0x10F
	movl	$1, %ecx
	callq	_KLoad1
	movq	-112(%rbp), %r15        # 8-byte Reload
	leaq	(%r13,%r15), %r14
	movq	%r14, -312(%rbp)        # 8-byte Spill
	movzbl	-2(%r13,%r15), %eax
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %eax
	movl	%eax, %r12d
	movq	-232(%rbp), %rdi        # 8-byte Reload
	.loc	2 1789 38               # susan.c:1789:38
	addq	%r13, %rdi
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movl	$272, %esi              # imm = 0x110
	movl	$273, %edx              # imm = 0x111
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	-1(%r13,%r15), %ebx
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r12d, %ebx
	movl	$274, %esi              # imm = 0x112
	movl	$275, %edx              # imm = 0x113
	movl	$1, %ecx
	movq	%r14, %rdi
	callq	_KLoad1
	.loc	2 1789 61               # susan.c:1789:61
	movzbl	(%r13,%r15), %r12d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%ebx, %r12d
	movq	-208(%rbp), %rdi        # 8-byte Reload
	.loc	2 1789 82               # susan.c:1789:82
	addq	%r13, %rdi
	movq	%rdi, -208(%rbp)        # 8-byte Spill
	movl	$276, %esi              # imm = 0x114
	movl	$277, %edx              # imm = 0x115
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	1(%r13,%r15), %r14d
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r12d, %r14d
	movq	-200(%rbp), %rdi        # 8-byte Reload
	.loc	2 1789 105              # susan.c:1789:105
	addq	%r13, %rdi
	movq	%rdi, -200(%rbp)        # 8-byte Spill
	movl	$278, %esi              # imm = 0x116
	movl	$279, %edx              # imm = 0x117
	movl	$1, %ecx
	callq	_KLoad1
	movzbl	2(%r13,%r15), %eax
	.loc	2 1785 15               # susan.c:1785:15
	addl	%r14d, %eax
.Ltmp1980:
	#DEBUG_VALUE: susan_corners_quick:x <- EAX
	.loc	2 1791 28               # susan.c:1791:28
	cltq
.Ltmp1981:
	imulq	$1374389535, %rax, %rbx # imm = 0x51EB851F
	movq	%rbx, %rax
	shrq	$63, %rax
	shrq	$32, %rbx
	sarl	$3, %ebx
	addl	%eax, %ebx
	movq	-520(%rbp), %r15        # 8-byte Reload
.Ltmp1982:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- R15
	movq	-280(%rbp), %r14        # 8-byte Reload
	.loc	2 1791 11 is_stmt 0     # susan.c:1791:11
	leaq	20(%r15,%r14,8), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movl	$11, 1160(%rsp)
	movl	$278, 1152(%rsp)        # imm = 0x116
	movl	$12, 1144(%rsp)
	movl	$276, 1136(%rsp)        # imm = 0x114
	movl	$13, 1128(%rsp)
	movl	$274, 1120(%rsp)        # imm = 0x112
	movl	$14, 1112(%rsp)
	movl	$272, 1104(%rsp)        # imm = 0x110
	movl	$15, 1096(%rsp)
	movl	$270, 1088(%rsp)        # imm = 0x10E
	movl	$16, 1080(%rsp)
	movl	$268, 1072(%rsp)        # imm = 0x10C
	movl	$17, 1064(%rsp)
	movl	$266, 1056(%rsp)        # imm = 0x10A
	movl	$18, 1048(%rsp)
	movl	$264, 1040(%rsp)        # imm = 0x108
	movl	$19, 1032(%rsp)
	movl	$262, 1024(%rsp)        # imm = 0x106
	movl	$20, 1016(%rsp)
	movl	$260, 1008(%rsp)        # imm = 0x104
	movl	$21, 1000(%rsp)
	movl	$258, 992(%rsp)         # imm = 0x102
	movl	$22, 984(%rsp)
	movl	$256, 976(%rsp)         # imm = 0x100
	movl	$23, 968(%rsp)
	movl	$254, 960(%rsp)
	movl	$24, 952(%rsp)
	movl	$252, 944(%rsp)
	movl	$25, 936(%rsp)
	movl	$250, 928(%rsp)
	movl	$26, 920(%rsp)
	movl	$248, 912(%rsp)
	movl	$27, 904(%rsp)
	movl	$246, 896(%rsp)
	movl	$28, 888(%rsp)
	movl	$244, 880(%rsp)
	movl	$29, 872(%rsp)
	movl	$242, 864(%rsp)
	movl	$30, 856(%rsp)
	movl	$240, 848(%rsp)
	movl	$31, 840(%rsp)
	movl	$238, 832(%rsp)
	movl	$32, 824(%rsp)
	movl	$236, 816(%rsp)
	movl	$33, 808(%rsp)
	movl	$234, 800(%rsp)
	movl	$34, 792(%rsp)
	movl	$232, 784(%rsp)
	movl	$34, 776(%rsp)
	movl	$230, 768(%rsp)
	movl	$35, 760(%rsp)
	movl	$222, 752(%rsp)
	movl	$36, 744(%rsp)
	movl	$220, 736(%rsp)
	movl	$37, 728(%rsp)
	movl	$218, 720(%rsp)
	movl	$38, 712(%rsp)
	movl	$216, 704(%rsp)
	movl	$39, 696(%rsp)
	movl	$214, 688(%rsp)
	movl	$40, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$41, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$42, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$43, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$44, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$45, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$46, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$47, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$48, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$49, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$50, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$51, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$52, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$53, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$54, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$55, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$56, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$57, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$58, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$59, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$60, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$61, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$62, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$63, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$64, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$65, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$66, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$67, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$68, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$69, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$70, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$71, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$72, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$73, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$74, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$75, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$76, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$77, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$78, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$79, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$80, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$81, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$82, 8(%rsp)
	movl	$128, (%rsp)
	movl	$280, %edi              # imm = 0x118
	movl	$75, %esi
	movl	$228, %edx
	movl	$83, %ecx
	movl	$126, %r8d
	movl	$83, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$280, %edi              # imm = 0x118
	movl	$4, %edx
	movq	-272(%rbp), %rsi        # 8-byte Reload
	callq	_KStore
	movl	%ebx, 20(%r15,%r14,8)
.Ltmp1983:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	movl	$281, %esi              # imm = 0x119
	movl	$282, %edx              # imm = 0x11A
	movl	$1, %ecx
	movq	-152(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-96(%rbp), %r12         # 8-byte Reload
	.loc	2 1793 15 is_stmt 1     # susan.c:1793:15
	movzbl	2(%r13,%r12), %eax
	movl	%eax, -320(%rbp)        # 4-byte Spill
	movl	$283, %esi              # imm = 0x11B
	movl	$284, %edx              # imm = 0x11C
	movl	$1, %ecx
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-224(%rbp), %rbx        # 8-byte Reload
	.loc	2 1793 38 is_stmt 0     # susan.c:1793:38
	movzbl	2(%r13,%rbx), %eax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movl	$285, %esi              # imm = 0x11D
	movl	$286, %edx              # imm = 0x11E
	movl	$1, %ecx
	movq	-256(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-80(%rbp), %r15         # 8-byte Reload
	.loc	2 1793 61               # susan.c:1793:61
	movzbl	2(%r13,%r15), %eax
	movl	%eax, -256(%rbp)        # 4-byte Spill
	movl	$287, %esi              # imm = 0x11F
	movl	$288, %edx              # imm = 0x120
	movl	$1, %ecx
	movq	-192(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-104(%rbp), %r14        # 8-byte Reload
	.loc	2 1793 82               # susan.c:1793:82
	movzbl	2(%r13,%r14), %eax
	movl	%eax, -328(%rbp)        # 4-byte Spill
	movl	$289, %esi              # imm = 0x121
	movl	$290, %edx              # imm = 0x122
	movl	$1, %ecx
	movq	-200(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1793 105              # susan.c:1793:105
	movq	-112(%rbp), %rax        # 8-byte Reload
	movzbl	2(%r13,%rax), %eax
	movl	%eax, -336(%rbp)        # 4-byte Spill
	movl	$291, %esi              # imm = 0x123
	movl	$292, %edx              # imm = 0x124
	movl	$1, %ecx
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1794 15 is_stmt 1     # susan.c:1794:15
	movzbl	-2(%r13,%r12), %eax
	movl	%eax, -344(%rbp)        # 4-byte Spill
	movl	$293, %esi              # imm = 0x125
	movl	$294, %edx              # imm = 0x126
	movl	$1, %ecx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_KLoad1
	.loc	2 1794 38 is_stmt 0     # susan.c:1794:38
	movzbl	-2(%r13,%rbx), %eax
	movl	%eax, -352(%rbp)        # 4-byte Spill
	movl	$295, %esi              # imm = 0x127
	movl	$296, %edx              # imm = 0x128
	movl	$1, %ecx
	movq	-264(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1794 61               # susan.c:1794:61
	movzbl	-2(%r13,%r15), %eax
	movl	%eax, -264(%rbp)        # 4-byte Spill
	movq	%r15, %r12
	movl	$297, %esi              # imm = 0x129
	movl	$298, %edx              # imm = 0x12A
	movl	$1, %ecx
	movq	-184(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1794 82               # susan.c:1794:82
	movzbl	-2(%r13,%r14), %ebx
	movl	$299, %esi              # imm = 0x12B
	movl	$300, %edx              # imm = 0x12C
	movl	$1, %ecx
	movq	-216(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-112(%rbp), %r14        # 8-byte Reload
	.loc	2 1794 105              # susan.c:1794:105
	movzbl	-2(%r13,%r14), %eax
	movq	-272(%rbp), %rcx        # 8-byte Reload
	.loc	2 1794 15               # susan.c:1794:15
	addl	-320(%rbp), %ecx        # 4-byte Folded Reload
	addl	-256(%rbp), %ecx        # 4-byte Folded Reload
	addl	-328(%rbp), %ecx        # 4-byte Folded Reload
	addl	-336(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1793 15 is_stmt 1     # susan.c:1793:15
	subl	-344(%rbp), %ecx        # 4-byte Folded Reload
	subl	-352(%rbp), %ecx        # 4-byte Folded Reload
	subl	-264(%rbp), %ecx        # 4-byte Folded Reload
	subl	%ebx, %ecx
	subl	%eax, %ecx
.Ltmp1984:
	#DEBUG_VALUE: susan_corners_quick:x <- ECX
	movq	%rcx, -272(%rbp)        # 8-byte Spill
.Ltmp1985:
	#DEBUG_VALUE: susan_corners_quick:x <- [RBP+-272]
	movl	$301, %esi              # imm = 0x12D
	movl	$302, %edx              # imm = 0x12E
	movl	$1, %ecx
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-96(%rbp), %rbx         # 8-byte Reload
	.loc	2 1795 20               # susan.c:1795:20
	movzbl	1(%r13,%rbx), %eax
	movl	%eax, -256(%rbp)        # 4-byte Spill
	movl	$303, %esi              # imm = 0x12F
	movl	$304, %edx              # imm = 0x130
	movl	$1, %ecx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-224(%rbp), %r15        # 8-byte Reload
	.loc	2 1795 43 is_stmt 0     # susan.c:1795:43
	movzbl	1(%r13,%r15), %eax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	movl	$305, %esi              # imm = 0x131
	movl	$306, %edx              # imm = 0x132
	movl	$1, %ecx
	movq	-248(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1795 66               # susan.c:1795:66
	movzbl	1(%r13,%r12), %eax
	movl	%eax, -248(%rbp)        # 4-byte Spill
	movl	$307, %esi              # imm = 0x133
	movl	$308, %edx              # imm = 0x134
	movl	$1, %ecx
	movq	-176(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-104(%rbp), %r12        # 8-byte Reload
	.loc	2 1795 87               # susan.c:1795:87
	movzbl	1(%r13,%r12), %eax
	movl	%eax, -320(%rbp)        # 4-byte Spill
	movl	$309, %esi              # imm = 0x135
	movl	$310, %edx              # imm = 0x136
	movl	$1, %ecx
	movq	-208(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1795 110              # susan.c:1795:110
	movzbl	1(%r13,%r14), %eax
	movl	%eax, -328(%rbp)        # 4-byte Spill
	movl	$311, %esi              # imm = 0x137
	movl	$312, %edx              # imm = 0x138
	movl	$1, %ecx
	movq	-160(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1796 20 is_stmt 1     # susan.c:1796:20
	movzbl	-1(%r13,%rbx), %eax
	movl	%eax, -336(%rbp)        # 4-byte Spill
	movl	$313, %esi              # imm = 0x139
	movl	$314, %edx              # imm = 0x13A
	movl	$1, %ecx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_KLoad1
	.loc	2 1796 43 is_stmt 0     # susan.c:1796:43
	movzbl	-1(%r13,%r15), %eax
	movl	%eax, -344(%rbp)        # 4-byte Spill
	movl	$315, %esi              # imm = 0x13B
	movl	$316, %edx              # imm = 0x13C
	movl	$1, %ecx
	movq	-240(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1796 66               # susan.c:1796:66
	movq	-80(%rbp), %rax         # 8-byte Reload
	movzbl	-1(%r13,%rax), %eax
	movl	%eax, -80(%rbp)         # 4-byte Spill
	movl	$317, %esi              # imm = 0x13D
	movl	$318, %edx              # imm = 0x13E
	movl	$1, %ecx
	movq	-168(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1796 87               # susan.c:1796:87
	movzbl	-1(%r13,%r12), %ebx
	movl	$319, %esi              # imm = 0x13F
	movl	$320, %edx              # imm = 0x140
	movl	$1, %ecx
	movq	-232(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rdi
	callq	_KLoad1
	.loc	2 1796 110              # susan.c:1796:110
	movzbl	-1(%r13,%r14), %eax
	movq	-264(%rbp), %rcx        # 8-byte Reload
	.loc	2 1796 20               # susan.c:1796:20
	addl	-256(%rbp), %ecx        # 4-byte Folded Reload
	addl	-248(%rbp), %ecx        # 4-byte Folded Reload
	addl	-320(%rbp), %ecx        # 4-byte Folded Reload
	.loc	2 1795 16 is_stmt 1     # susan.c:1795:16
	addl	-328(%rbp), %ecx        # 4-byte Folded Reload
	subl	-336(%rbp), %ecx        # 4-byte Folded Reload
	subl	-344(%rbp), %ecx        # 4-byte Folded Reload
	subl	-80(%rbp), %ecx         # 4-byte Folded Reload
	subl	%ebx, %ecx
	subl	%eax, %ecx
	.loc	2 1795 11 is_stmt 0     # susan.c:1795:11
	movq	-272(%rbp), %rax        # 8-byte Reload
	leal	(%rcx,%rax,2), %eax
.Ltmp1986:
	#DEBUG_VALUE: susan_corners_quick:x <- [RBP+-80]
	movl	%eax, -80(%rbp)         # 4-byte Spill
	movl	$321, %esi              # imm = 0x141
	movl	$322, %edx              # imm = 0x142
	movl	$1, %ecx
	movq	-216(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1798 15 is_stmt 1     # susan.c:1798:15
	movzbl	-2(%r13,%r14), %eax
	movl	%eax, -216(%rbp)        # 4-byte Spill
	movl	$323, %esi              # imm = 0x143
	movl	$324, %edx              # imm = 0x144
	movl	$1, %ecx
	movq	%r15, %rdi
	callq	_KLoad1
	.loc	2 1798 38 is_stmt 0     # susan.c:1798:38
	movzbl	-1(%r13,%r14), %r15d
	movl	$325, %esi              # imm = 0x145
	movl	$326, %edx              # imm = 0x146
	movl	$1, %ecx
	movq	-312(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1798 61               # susan.c:1798:61
	movzbl	(%r13,%r14), %eax
	movl	%eax, -232(%rbp)        # 4-byte Spill
	movl	$327, %esi              # imm = 0x147
	movl	$328, %edx              # imm = 0x148
	movl	$1, %ecx
	movq	-208(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1798 82               # susan.c:1798:82
	movzbl	1(%r13,%r14), %eax
	movl	%eax, -208(%rbp)        # 4-byte Spill
	movl	$329, %esi              # imm = 0x149
	movl	$330, %edx              # imm = 0x14A
	movl	$1, %ecx
	movq	-200(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1798 105              # susan.c:1798:105
	movzbl	2(%r13,%r14), %r14d
	movl	$331, %esi              # imm = 0x14B
	movl	$332, %edx              # imm = 0x14C
	movl	$1, %ecx
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-96(%rbp), %rbx         # 8-byte Reload
	.loc	2 1799 15 is_stmt 1     # susan.c:1799:15
	movzbl	-2(%r13,%rbx), %eax
	movl	%eax, -112(%rbp)        # 4-byte Spill
	movl	$333, %esi              # imm = 0x14D
	movl	$334, %edx              # imm = 0x14E
	movl	$1, %ecx
	movq	-160(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1799 38 is_stmt 0     # susan.c:1799:38
	movzbl	-1(%r13,%rbx), %eax
	movl	%eax, -136(%rbp)        # 4-byte Spill
	movl	$335, %esi              # imm = 0x14F
	movl	$336, %edx              # imm = 0x150
	movl	$1, %ecx
	movq	-296(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1799 61               # susan.c:1799:61
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -160(%rbp)        # 4-byte Spill
	movl	$337, %esi              # imm = 0x151
	movl	$338, %edx              # imm = 0x152
	movl	$1, %ecx
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1799 82               # susan.c:1799:82
	movzbl	1(%r13,%rbx), %r12d
	movl	$339, %esi              # imm = 0x153
	movl	$340, %edx              # imm = 0x154
	movl	$1, %ecx
	movq	-152(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1799 105              # susan.c:1799:105
	movzbl	2(%r13,%rbx), %eax
	.loc	2 1799 15               # susan.c:1799:15
	addl	-216(%rbp), %r15d       # 4-byte Folded Reload
	addl	-232(%rbp), %r15d       # 4-byte Folded Reload
	addl	-208(%rbp), %r15d       # 4-byte Folded Reload
	addl	%r14d, %r15d
	.loc	2 1798 15 is_stmt 1     # susan.c:1798:15
	subl	-112(%rbp), %r15d       # 4-byte Folded Reload
	subl	-136(%rbp), %r15d       # 4-byte Folded Reload
	subl	-160(%rbp), %r15d       # 4-byte Folded Reload
	subl	%r12d, %r15d
	subl	%eax, %r15d
.Ltmp1987:
	#DEBUG_VALUE: susan_corners_quick:y <- R15D
	movl	$341, %esi              # imm = 0x155
	movl	$342, %edx              # imm = 0x156
	movl	$1, %ecx
	movq	-184(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	movq	-104(%rbp), %rbx        # 8-byte Reload
	.loc	2 1800 20               # susan.c:1800:20
	movzbl	-2(%r13,%rbx), %r14d
	movl	$343, %esi              # imm = 0x157
	movl	$344, %edx              # imm = 0x158
	movl	$1, %ecx
	movq	-168(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1800 43 is_stmt 0     # susan.c:1800:43
	movzbl	-1(%r13,%rbx), %r12d
	movl	$345, %esi              # imm = 0x159
	movl	$346, %edx              # imm = 0x15A
	movl	$1, %ecx
	movq	-304(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1800 66               # susan.c:1800:66
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -96(%rbp)         # 4-byte Spill
	movl	$347, %esi              # imm = 0x15B
	movl	$348, %edx              # imm = 0x15C
	movl	$1, %ecx
	movq	-176(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1800 87               # susan.c:1800:87
	movzbl	1(%r13,%rbx), %eax
	movl	%eax, -112(%rbp)        # 4-byte Spill
	movl	$349, %esi              # imm = 0x15D
	movl	$350, %edx              # imm = 0x15E
	movl	$1, %ecx
	movq	-192(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1800 110              # susan.c:1800:110
	movzbl	2(%r13,%rbx), %eax
	movl	%eax, -104(%rbp)        # 4-byte Spill
	movl	$351, %esi              # imm = 0x15F
	movl	$352, %edx              # imm = 0x160
	movl	$1, %ecx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_KLoad1
	movq	-224(%rbp), %rbx        # 8-byte Reload
	.loc	2 1801 20 is_stmt 1     # susan.c:1801:20
	movzbl	-2(%r13,%rbx), %eax
	movl	%eax, -88(%rbp)         # 4-byte Spill
	movl	$353, %esi              # imm = 0x161
	movl	$354, %edx              # imm = 0x162
	movl	$1, %ecx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_KLoad1
	.loc	2 1801 43 is_stmt 0     # susan.c:1801:43
	movzbl	-1(%r13,%rbx), %eax
	movl	%eax, -72(%rbp)         # 4-byte Spill
	movl	$355, %esi              # imm = 0x163
	movl	$356, %edx              # imm = 0x164
	movl	$1, %ecx
	movq	-288(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1801 66               # susan.c:1801:66
	movzbl	(%r13,%rbx), %eax
	movl	%eax, -136(%rbp)        # 4-byte Spill
	movl	$357, %esi              # imm = 0x165
	movl	$358, %edx              # imm = 0x166
	movl	$1, %ecx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1801 87               # susan.c:1801:87
	movzbl	1(%r13,%rbx), %eax
	movl	%eax, -120(%rbp)        # 4-byte Spill
	movl	$359, %esi              # imm = 0x167
	movl	$360, %edx              # imm = 0x168
	movl	$1, %ecx
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	_KLoad1
	.loc	2 1801 20               # susan.c:1801:20
	addl	%r14d, %r12d
	addl	-96(%rbp), %r12d        # 4-byte Folded Reload
	addl	-112(%rbp), %r12d       # 4-byte Folded Reload
	.loc	2 1800 16 is_stmt 1     # susan.c:1800:16
	addl	-104(%rbp), %r12d       # 4-byte Folded Reload
	subl	-88(%rbp), %r12d        # 4-byte Folded Reload
	subl	-72(%rbp), %r12d        # 4-byte Folded Reload
	subl	-136(%rbp), %r12d       # 4-byte Folded Reload
	subl	-120(%rbp), %r12d       # 4-byte Folded Reload
	.loc	2 1801 110              # susan.c:1801:110
	movzbl	2(%r13,%rbx), %eax
.Ltmp1988:
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	.loc	2 1800 16               # susan.c:1800:16
	subl	%eax, %r12d
	.loc	2 1800 11 is_stmt 0     # susan.c:1800:11
	leal	(%r12,%r15,2), %r15d
.Ltmp1989:
	.loc	2 1802 29 is_stmt 1     # susan.c:1802:29
	movslq	-80(%rbp), %r12         # 4-byte Folded Reload
	imulq	$-2004318071, %r12, %rax # imm = 0xFFFFFFFF88888889
	shrq	$32, %rax
	addl	%eax, %r12d
	movl	%r12d, %eax
	shrl	$31, %eax
	sarl	$3, %r12d
	addl	%eax, %r12d
	movq	-280(%rbp), %rbx        # 8-byte Reload
	movq	-520(%rbp), %r14        # 8-byte Reload
.Ltmp1990:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- R14
	.loc	2 1802 11 is_stmt 0     # susan.c:1802:11
	leaq	12(%r14,%rbx,8), %r13
	movl	$13, 1080(%rsp)
	movl	$319, 1072(%rsp)        # imm = 0x13F
	movl	$14, 1064(%rsp)
	movl	$317, 1056(%rsp)        # imm = 0x13D
	movl	$15, 1048(%rsp)
	movl	$315, 1040(%rsp)        # imm = 0x13B
	movl	$16, 1032(%rsp)
	movl	$313, 1024(%rsp)        # imm = 0x139
	movl	$16, 1016(%rsp)
	movl	$311, 1008(%rsp)        # imm = 0x137
	movl	$13, 1000(%rsp)
	movl	$309, 992(%rsp)         # imm = 0x135
	movl	$14, 984(%rsp)
	movl	$307, 976(%rsp)         # imm = 0x133
	movl	$15, 968(%rsp)
	movl	$305, 960(%rsp)         # imm = 0x131
	movl	$16, 952(%rsp)
	movl	$303, 944(%rsp)         # imm = 0x12F
	movl	$17, 936(%rsp)
	movl	$301, 928(%rsp)         # imm = 0x12D
	movl	$19, 920(%rsp)
	movl	$299, 912(%rsp)         # imm = 0x12B
	movl	$20, 904(%rsp)
	movl	$297, 896(%rsp)         # imm = 0x129
	movl	$21, 888(%rsp)
	movl	$295, 880(%rsp)         # imm = 0x127
	movl	$22, 872(%rsp)
	movl	$293, 864(%rsp)         # imm = 0x125
	movl	$22, 856(%rsp)
	movl	$291, 848(%rsp)         # imm = 0x123
	movl	$19, 840(%rsp)
	movl	$289, 832(%rsp)         # imm = 0x121
	movl	$20, 824(%rsp)
	movl	$287, 816(%rsp)         # imm = 0x11F
	movl	$21, 808(%rsp)
	movl	$285, 800(%rsp)         # imm = 0x11D
	movl	$22, 792(%rsp)
	movl	$283, 784(%rsp)         # imm = 0x11B
	movl	$22, 776(%rsp)
	movl	$281, 768(%rsp)         # imm = 0x119
	movl	$23, 760(%rsp)
	movl	$222, 752(%rsp)
	movl	$24, 744(%rsp)
	movl	$220, 736(%rsp)
	movl	$25, 728(%rsp)
	movl	$218, 720(%rsp)
	movl	$26, 712(%rsp)
	movl	$216, 704(%rsp)
	movl	$27, 696(%rsp)
	movl	$214, 688(%rsp)
	movl	$28, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$29, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$30, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$31, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$32, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$33, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$34, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$35, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$36, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$37, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$38, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$39, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$40, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$41, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$42, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$43, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$44, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$45, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$46, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$47, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$48, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$49, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$50, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$51, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$52, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$53, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$54, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$55, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$56, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$57, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$58, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$59, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$60, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$61, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$62, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$63, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$64, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$65, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$66, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$67, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$68, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$69, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$70, 8(%rsp)
	movl	$128, (%rsp)
	movl	$361, %edi              # imm = 0x169
	movl	$70, %esi
	movl	$228, %edx
	movl	$71, %ecx
	movl	$126, %r8d
	movl	$71, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$361, %edi              # imm = 0x169
	movl	$4, %edx
	movq	%r13, %rsi
	callq	_KStore
	movq	%rbx, %rcx
	movq	%r14, %rdx
.Ltmp1991:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- RDX
	movl	%r12d, 12(%rdx,%rcx,8)
	.loc	2 1803 29 is_stmt 1     # susan.c:1803:29
	movslq	%r15d, %r12
	imulq	$-2004318071, %r12, %rax # imm = 0xFFFFFFFF88888889
	shrq	$32, %rax
	addl	%eax, %r12d
	movl	%r12d, %eax
	shrl	$31, %eax
	sarl	$3, %r12d
	addl	%eax, %r12d
	.loc	2 1803 11 is_stmt 0     # susan.c:1803:11
	leaq	16(%rdx,%rcx,8), %rbx
	movq	%rdx, %r15
.Ltmp1992:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- R15
	movq	%rcx, %r14
	movl	$13, 1080(%rsp)
	movl	$359, 1072(%rsp)        # imm = 0x167
	movl	$14, 1064(%rsp)
	movl	$357, 1056(%rsp)        # imm = 0x165
	movl	$15, 1048(%rsp)
	movl	$355, 1040(%rsp)        # imm = 0x163
	movl	$16, 1032(%rsp)
	movl	$353, 1024(%rsp)        # imm = 0x161
	movl	$16, 1016(%rsp)
	movl	$351, 1008(%rsp)        # imm = 0x15F
	movl	$13, 1000(%rsp)
	movl	$349, 992(%rsp)         # imm = 0x15D
	movl	$14, 984(%rsp)
	movl	$347, 976(%rsp)         # imm = 0x15B
	movl	$15, 968(%rsp)
	movl	$345, 960(%rsp)         # imm = 0x159
	movl	$16, 952(%rsp)
	movl	$343, 944(%rsp)         # imm = 0x157
	movl	$17, 936(%rsp)
	movl	$341, 928(%rsp)         # imm = 0x155
	movl	$19, 920(%rsp)
	movl	$339, 912(%rsp)         # imm = 0x153
	movl	$20, 904(%rsp)
	movl	$337, 896(%rsp)         # imm = 0x151
	movl	$21, 888(%rsp)
	movl	$335, 880(%rsp)         # imm = 0x14F
	movl	$22, 872(%rsp)
	movl	$333, 864(%rsp)         # imm = 0x14D
	movl	$22, 856(%rsp)
	movl	$331, 848(%rsp)         # imm = 0x14B
	movl	$19, 840(%rsp)
	movl	$329, 832(%rsp)         # imm = 0x149
	movl	$20, 824(%rsp)
	movl	$327, 816(%rsp)         # imm = 0x147
	movl	$21, 808(%rsp)
	movl	$325, 800(%rsp)         # imm = 0x145
	movl	$22, 792(%rsp)
	movl	$323, 784(%rsp)         # imm = 0x143
	movl	$22, 776(%rsp)
	movl	$321, 768(%rsp)         # imm = 0x141
	movl	$23, 760(%rsp)
	movl	$222, 752(%rsp)
	movl	$24, 744(%rsp)
	movl	$220, 736(%rsp)
	movl	$25, 728(%rsp)
	movl	$218, 720(%rsp)
	movl	$26, 712(%rsp)
	movl	$216, 704(%rsp)
	movl	$27, 696(%rsp)
	movl	$214, 688(%rsp)
	movl	$28, 680(%rsp)
	movl	$212, 672(%rsp)
	movl	$29, 664(%rsp)
	movl	$210, 656(%rsp)
	movl	$30, 648(%rsp)
	movl	$208, 640(%rsp)
	movl	$31, 632(%rsp)
	movl	$206, 624(%rsp)
	movl	$32, 616(%rsp)
	movl	$204, 608(%rsp)
	movl	$33, 600(%rsp)
	movl	$202, 592(%rsp)
	movl	$34, 584(%rsp)
	movl	$200, 576(%rsp)
	movl	$35, 568(%rsp)
	movl	$198, 560(%rsp)
	movl	$36, 552(%rsp)
	movl	$196, 544(%rsp)
	movl	$37, 536(%rsp)
	movl	$194, 528(%rsp)
	movl	$38, 520(%rsp)
	movl	$192, 512(%rsp)
	movl	$39, 504(%rsp)
	movl	$190, 496(%rsp)
	movl	$40, 488(%rsp)
	movl	$188, 480(%rsp)
	movl	$41, 472(%rsp)
	movl	$186, 464(%rsp)
	movl	$42, 456(%rsp)
	movl	$184, 448(%rsp)
	movl	$43, 440(%rsp)
	movl	$182, 432(%rsp)
	movl	$44, 424(%rsp)
	movl	$180, 416(%rsp)
	movl	$45, 408(%rsp)
	movl	$178, 400(%rsp)
	movl	$46, 392(%rsp)
	movl	$176, 384(%rsp)
	movl	$47, 376(%rsp)
	movl	$174, 368(%rsp)
	movl	$48, 360(%rsp)
	movl	$172, 352(%rsp)
	movl	$49, 344(%rsp)
	movl	$170, 336(%rsp)
	movl	$50, 328(%rsp)
	movl	$168, 320(%rsp)
	movl	$51, 312(%rsp)
	movl	$166, 304(%rsp)
	movl	$52, 296(%rsp)
	movl	$164, 288(%rsp)
	movl	$53, 280(%rsp)
	movl	$162, 272(%rsp)
	movl	$54, 264(%rsp)
	movl	$160, 256(%rsp)
	movl	$55, 248(%rsp)
	movl	$158, 240(%rsp)
	movl	$56, 232(%rsp)
	movl	$156, 224(%rsp)
	movl	$57, 216(%rsp)
	movl	$154, 208(%rsp)
	movl	$58, 200(%rsp)
	movl	$152, 192(%rsp)
	movl	$59, 184(%rsp)
	movl	$150, 176(%rsp)
	movl	$60, 168(%rsp)
	movl	$148, 160(%rsp)
	movl	$61, 152(%rsp)
	movl	$146, 144(%rsp)
	movl	$62, 136(%rsp)
	movl	$144, 128(%rsp)
	movl	$63, 120(%rsp)
	movl	$142, 112(%rsp)
	movl	$64, 104(%rsp)
	movl	$140, 96(%rsp)
	movl	$65, 88(%rsp)
	movl	$138, 80(%rsp)
	movl	$66, 72(%rsp)
	movl	$136, 64(%rsp)
	movl	$67, 56(%rsp)
	movl	$134, 48(%rsp)
	movl	$68, 40(%rsp)
	movl	$132, 32(%rsp)
	movl	$69, 24(%rsp)
	movl	$130, 16(%rsp)
	movl	$70, 8(%rsp)
	movl	$128, (%rsp)
	movl	$362, %edi              # imm = 0x16A
	movl	$70, %esi
	movl	$228, %edx
	movl	$71, %ecx
	movl	$126, %r8d
	movl	$71, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$362, %edi              # imm = 0x16A
	movl	$4, %edx
	movq	%rbx, %rsi
	callq	_KStore
	movl	%r12d, 16(%r15,%r14,8)
.Ltmp1993:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	movq	-528(%rbp), %rax        # 8-byte Reload
	.loc	2 1804 11 is_stmt 1     # susan.c:1804:11
	incl	%eax
.Ltmp1994:
	#DEBUG_VALUE: susan_corners_quick:n <- EAX
	movq	%rax, -528(%rbp)        # 8-byte Spill
	movq	%rax, %rbx
.Ltmp1995:
	#DEBUG_VALUE: susan_corners_quick:n <- EBX
	movl	$2, 776(%rsp)
	movl	$222, 768(%rsp)
	movl	$3, 760(%rsp)
	movl	$220, 752(%rsp)
	movl	$4, 744(%rsp)
	movl	$218, 736(%rsp)
	movl	$5, 728(%rsp)
	movl	$216, 720(%rsp)
	movl	$6, 712(%rsp)
	movl	$214, 704(%rsp)
	movl	$7, 696(%rsp)
	movl	$212, 688(%rsp)
	movl	$8, 680(%rsp)
	movl	$210, 672(%rsp)
	movl	$9, 664(%rsp)
	movl	$208, 656(%rsp)
	movl	$10, 648(%rsp)
	movl	$206, 640(%rsp)
	movl	$11, 632(%rsp)
	movl	$204, 624(%rsp)
	movl	$12, 616(%rsp)
	movl	$202, 608(%rsp)
	movl	$13, 600(%rsp)
	movl	$200, 592(%rsp)
	movl	$14, 584(%rsp)
	movl	$198, 576(%rsp)
	movl	$15, 568(%rsp)
	movl	$196, 560(%rsp)
	movl	$16, 552(%rsp)
	movl	$194, 544(%rsp)
	movl	$17, 536(%rsp)
	movl	$192, 528(%rsp)
	movl	$18, 520(%rsp)
	movl	$190, 512(%rsp)
	movl	$19, 504(%rsp)
	movl	$188, 496(%rsp)
	movl	$20, 488(%rsp)
	movl	$186, 480(%rsp)
	movl	$21, 472(%rsp)
	movl	$184, 464(%rsp)
	movl	$22, 456(%rsp)
	movl	$182, 448(%rsp)
	movl	$23, 440(%rsp)
	movl	$180, 432(%rsp)
	movl	$24, 424(%rsp)
	movl	$178, 416(%rsp)
	movl	$25, 408(%rsp)
	movl	$176, 400(%rsp)
	movl	$26, 392(%rsp)
	movl	$174, 384(%rsp)
	movl	$27, 376(%rsp)
	movl	$172, 368(%rsp)
	movl	$28, 360(%rsp)
	movl	$170, 352(%rsp)
	movl	$29, 344(%rsp)
	movl	$168, 336(%rsp)
	movl	$30, 328(%rsp)
	movl	$166, 320(%rsp)
	movl	$31, 312(%rsp)
	movl	$164, 304(%rsp)
	movl	$32, 296(%rsp)
	movl	$162, 288(%rsp)
	movl	$33, 280(%rsp)
	movl	$160, 272(%rsp)
	movl	$34, 264(%rsp)
	movl	$158, 256(%rsp)
	movl	$35, 248(%rsp)
	movl	$156, 240(%rsp)
	movl	$36, 232(%rsp)
	movl	$154, 224(%rsp)
	movl	$37, 216(%rsp)
	movl	$152, 208(%rsp)
	movl	$38, 200(%rsp)
	movl	$150, 192(%rsp)
	movl	$39, 184(%rsp)
	movl	$148, 176(%rsp)
	movl	$40, 168(%rsp)
	movl	$146, 160(%rsp)
	movl	$41, 152(%rsp)
	movl	$144, 144(%rsp)
	movl	$42, 136(%rsp)
	movl	$142, 128(%rsp)
	movl	$43, 120(%rsp)
	movl	$140, 112(%rsp)
	movl	$44, 104(%rsp)
	movl	$138, 96(%rsp)
	movl	$45, 88(%rsp)
	movl	$136, 80(%rsp)
	movl	$46, 72(%rsp)
	movl	$134, 64(%rsp)
	movl	$47, 56(%rsp)
	movl	$132, 48(%rsp)
	movl	$48, 40(%rsp)
	movl	$130, 32(%rsp)
	movl	$49, 24(%rsp)
	movl	$128, 16(%rsp)
	movl	$50, 8(%rsp)
	movl	$126, (%rsp)
	movl	$370, -72(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x172
	movl	$370, %edi              # imm = 0x172
	movl	$51, %esi
	movl	$367, %edx              # imm = 0x16F
	movl	$1, %ecx
	movl	$228, %r8d
	movl	$50, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	movl	$3, 776(%rsp)
	movl	$222, 768(%rsp)
	movl	$4, 760(%rsp)
	movl	$220, 752(%rsp)
	movl	$5, 744(%rsp)
	movl	$218, 736(%rsp)
	movl	$6, 728(%rsp)
	movl	$216, 720(%rsp)
	movl	$7, 712(%rsp)
	movl	$214, 704(%rsp)
	movl	$8, 696(%rsp)
	movl	$212, 688(%rsp)
	movl	$9, 680(%rsp)
	movl	$210, 672(%rsp)
	movl	$10, 664(%rsp)
	movl	$208, 656(%rsp)
	movl	$11, 648(%rsp)
	movl	$206, 640(%rsp)
	movl	$12, 632(%rsp)
	movl	$204, 624(%rsp)
	movl	$13, 616(%rsp)
	movl	$202, 608(%rsp)
	movl	$14, 600(%rsp)
	movl	$200, 592(%rsp)
	movl	$15, 584(%rsp)
	movl	$198, 576(%rsp)
	movl	$16, 568(%rsp)
	movl	$196, 560(%rsp)
	movl	$17, 552(%rsp)
	movl	$194, 544(%rsp)
	movl	$18, 536(%rsp)
	movl	$192, 528(%rsp)
	movl	$19, 520(%rsp)
	movl	$190, 512(%rsp)
	movl	$20, 504(%rsp)
	movl	$188, 496(%rsp)
	movl	$21, 488(%rsp)
	movl	$186, 480(%rsp)
	movl	$22, 472(%rsp)
	movl	$184, 464(%rsp)
	movl	$23, 456(%rsp)
	movl	$182, 448(%rsp)
	movl	$24, 440(%rsp)
	movl	$180, 432(%rsp)
	movl	$25, 424(%rsp)
	movl	$178, 416(%rsp)
	movl	$26, 408(%rsp)
	movl	$176, 400(%rsp)
	movl	$27, 392(%rsp)
	movl	$174, 384(%rsp)
	movl	$28, 376(%rsp)
	movl	$172, 368(%rsp)
	movl	$29, 360(%rsp)
	movl	$170, 352(%rsp)
	movl	$30, 344(%rsp)
	movl	$168, 336(%rsp)
	movl	$31, 328(%rsp)
	movl	$166, 320(%rsp)
	movl	$32, 312(%rsp)
	movl	$164, 304(%rsp)
	movl	$33, 296(%rsp)
	movl	$162, 288(%rsp)
	movl	$34, 280(%rsp)
	movl	$160, 272(%rsp)
	movl	$35, 264(%rsp)
	movl	$158, 256(%rsp)
	movl	$36, 248(%rsp)
	movl	$156, 240(%rsp)
	movl	$37, 232(%rsp)
	movl	$154, 224(%rsp)
	movl	$38, 216(%rsp)
	movl	$152, 208(%rsp)
	movl	$39, 200(%rsp)
	movl	$150, 192(%rsp)
	movl	$40, 184(%rsp)
	movl	$148, 176(%rsp)
	movl	$41, 168(%rsp)
	movl	$146, 160(%rsp)
	movl	$42, 152(%rsp)
	movl	$144, 144(%rsp)
	movl	$43, 136(%rsp)
	movl	$142, 128(%rsp)
	movl	$44, 120(%rsp)
	movl	$140, 112(%rsp)
	movl	$45, 104(%rsp)
	movl	$138, 96(%rsp)
	movl	$46, 88(%rsp)
	movl	$136, 80(%rsp)
	movl	$47, 72(%rsp)
	movl	$134, 64(%rsp)
	movl	$48, 56(%rsp)
	movl	$132, 48(%rsp)
	movl	$49, 40(%rsp)
	movl	$130, 32(%rsp)
	movl	$50, 24(%rsp)
	movl	$128, 16(%rsp)
	movl	$51, 8(%rsp)
	movl	$126, (%rsp)
	movl	$439, %edi              # imm = 0x1B7
	movl	$51, %esi
	movl	$367, %edx              # imm = 0x16F
	movl	$2, %ecx
	movl	$228, %r8d
	movl	$51, %r9d
	xorl	%eax, %eax
	callq	_KTimestamp
	callq	_KPopCDep
	.loc	2 1805 14               # susan.c:1805:14
	cmpl	$15000, %ebx            # imm = 0x3A98
.Ltmp1996:
	#DEBUG_VALUE: susan_corners_quick:n <- [RBP+-528]
	jne	.LBB17_133
# BB#132:                               # %if.then1362
                                        #   in Loop: Header=BB17_29 Depth=2
	#DEBUG_VALUE: susan_corners_quick:in <- [RBP+-544]
	#DEBUG_VALUE: susan_corners_quick:r <- [RBP+-432]
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
	#DEBUG_VALUE: susan_corners_quick:j <- 7
	movl	$439, %edi              # imm = 0x1B7
	callq	_KPushCDep
	xorl	%esi, %esi
	movabsq	$-6997356554104042603, %rdi # imm = 0x9EE46549A1E08B95
	callq	_KPrepCall
	xorl	%esi, %esi
	movabsq	$-7131228994629441968, %r12 # imm = 0x9D08C90323256650
	.loc	2 1806 13               # susan.c:1806:13
.Ltmp1997:
	movq	%r12, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
.Ltmp1998:
	#DEBUG_VALUE: exit_error:j <- 1
	#DEBUG_VALUE: exit_error:i <- 0
	xorl	%esi, %esi
	movq	%r12, %rdi
	callq	_KExitRegion
	callq	_KPopCDep
	movl	$15000, %eax            # imm = 0x3A98
	movq	%rax, -528(%rbp)        # 8-byte Spill
.Ltmp1999:
.LBB17_133:                             # %for.inc1366
                                        #   in Loop: Header=BB17_29 Depth=2
	movl	$372, %ebx              # imm = 0x174
	movl	$373, -264(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x175
	movl	$374, -216(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x176
	movl	$375, -224(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x177
	movl	$376, -336(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x178
	movl	$377, -344(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x179
	movl	$378, -320(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17A
	movl	$379, -304(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17B
	movl	$380, -296(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17C
	movl	$381, -288(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17D
	movl	$382, -272(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17E
	movl	$384, -248(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x180
	movl	$383, -328(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x17F
	movl	$385, -232(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x181
	movl	$386, -200(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x182
	movl	$387, -192(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x183
	movl	$388, -176(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x184
	movl	$389, -152(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x185
	movl	$390, -144(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x186
	movl	$391, -128(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x187
	movl	$392, -120(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x188
	movl	$393, -104(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x189
	movl	$399, -168(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18F
	movl	$395, %r15d             # imm = 0x18B
	movl	$396, %r14d             # imm = 0x18C
	movl	$397, %r13d             # imm = 0x18D
	movl	$398, -416(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x18E
	movl	$400, -408(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x190
	movl	$401, -400(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x191
	movl	$402, -392(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x192
	movl	$403, -384(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x193
	movl	$404, -376(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x194
	movl	$405, -368(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x195
	movl	$406, -360(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x196
	movl	$407, -352(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x197
	movl	$408, -312(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x198
	movl	$409, -280(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x199
	movl	$410, -240(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19A
	movl	$411, -208(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19B
	movl	$419, -256(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x1A3
.LBB17_134:                             # %for.inc1366
                                        #   in Loop: Header=BB17_29 Depth=2
	movl	$412, -184(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19C
	movl	$413, -160(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19D
	movl	$414, -136(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19E
	movl	$415, -112(%rbp)        # 4-byte Folded Spill
                                        # imm = 0x19F
	movl	$416, -96(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1A0
	movl	$417, -88(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1A1
	movl	$418, -80(%rbp)         # 4-byte Folded Spill
                                        # imm = 0x1A2
	jmp	.LBB17_135
.LBB17_137:                             # %for.cond357.pre_exit.for.end1371
	#DEBUG_VALUE: susan_corners_quick:corner_list <- [RBP+-520]
	#DEBUG_VALUE: susan_corners_quick:y_size <- [RBP+16]
	#DEBUG_VALUE: susan_corners_quick:i <- 7
.Ltmp2000:
	#DEBUG_VALUE: susan_corners_quick:n <- 0
	movl	$1, %esi
	movabsq	$3779321495530723695, %rdi # imm = 0x3472D8E0611B596F
	callq	_KExitRegion
	movl	$1, %edi
	callq	_KWork
	.loc	2 1812 3                # susan.c:1812:3
	movq	-528(%rbp), %rax        # 8-byte Reload
	cltq
	leaq	(%rax,%rax,2), %r14
	movq	-520(%rbp), %rbx        # 8-byte Reload
.Ltmp2001:
	#DEBUG_VALUE: susan_corners_quick:corner_list <- RBX
	leaq	8(%rbx,%r14,8), %rdi
	movl	$4, %esi
	callq	_KStoreConst
	movl	$7, 8(%rbx,%r14,8)
	xorl	%esi, %esi
	movabsq	$616325544190534889, %rdi # imm = 0x88DA0D12779E4E9
	addq	$1672, %rsp             # imm = 0x688
	popq	%rbx
.Ltmp2002:
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_KExitRegion            # TAILCALL
.Ltmp2003:
.Ltmp2004:
	.size	susan_corners_quick, .Ltmp2004-susan_corners_quick
.Lfunc_end17:
	.cfi_endproc

	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI18_0:
	.long	1082130432              # float 4
	.text
	.globl	call_susan
	.align	16, 0x90
	.type	call_susan,@function
call_susan:                             # @call_susan
.Lfunc_begin18:
	.loc	2 1817 0                # susan.c:1817:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp2005:
	.cfi_def_cfa_offset 16
.Ltmp2006:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2007:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$360072, %rsp           # imm = 0x57E88
.Ltmp2008:
	.cfi_offset %rbx, -56
.Ltmp2009:
	.cfi_offset %r12, -48
.Ltmp2010:
	.cfi_offset %r13, -40
.Ltmp2011:
	.cfi_offset %r14, -32
.Ltmp2012:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: call_susan:inputFile <- RDI
	#DEBUG_VALUE: call_susan:mode <- ESI
	movl	%esi, %r14d
.Ltmp2013:
	#DEBUG_VALUE: call_susan:mode <- R14D
	movq	%rdi, %rbx
.Ltmp2014:
	#DEBUG_VALUE: call_susan:inputFile <- RBX
	movabsq	$-4271825962218635103, %rdi # imm = 0xC4B76CEBA3AAC0A1
	xorl	%esi, %esi
	callq	_KEnterRegion
	movl	$62, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
	movl	$2, %edi
	callq	_KWork
	movl	$1, %edi
	callq	_KDeqArg
.Ltmp2015:
	#DEBUG_VALUE: call_susan:max_no_edges <- 50
	#DEBUG_VALUE: call_susan:max_no_corners <- 50
	#DEBUG_VALUE: call_susan:susan_quick <- 0
	#DEBUG_VALUE: call_susan:drawing_mode <- 0
	#DEBUG_VALUE: call_susan:three_by_three <- 0
	#DEBUG_VALUE: call_susan:thin_post_proc <- 1
	#DEBUG_VALUE: call_susan:principle <- 0
	#DEBUG_VALUE: call_susan:bt <- 20
	#DEBUG_VALUE: call_susan:argindex <- 3
	#DEBUG_VALUE: call_susan:dt <- 4.000000e+00
	movabsq	$5915470643581796794, %rdi # imm = 0x5217F93575F1C1BA
	xorl	%esi, %esi
	callq	_KPrepCall
	leaq	-48(%rbp), %r13
.Ltmp2016:
	#DEBUG_VALUE: call_susan:in <- [R13+0]
	leaq	-60(%rbp), %r15
.Ltmp2017:
	#DEBUG_VALUE: call_susan:x_size <- [R15+0]
	leaq	-64(%rbp), %r12
.Ltmp2018:
	#DEBUG_VALUE: call_susan:y_size <- [R12+0]
	.loc	2 1833 3 prologue_end   # susan.c:1833:3
	movq	%rbx, %rdi
.Ltmp2019:
	#DEBUG_VALUE: call_susan:inputFile <- RDI
	movq	%r13, %rsi
	movq	%r15, %rdx
	movq	%r12, %rcx
	callq	get_image
	movl	$54, %edi
.Ltmp2020:
	callq	_KTimestamp0
	movl	$6, %edi
	xorl	%esi, %esi
	movl	$54, %edx
	callq	_KPhi1To1
	movl	$3, %edi
	callq	_KWork
	movl	$6, %edi
	movl	$6, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$55, %edi
	movl	$1, %esi
	movl	$2, %edx
	callq	_KTimestamp1
	movl	$1, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$10, %edi
	movl	$1, %esi
	movl	$55, %edx
	callq	_KPhi1To1
	movl	$10, %edi
	movl	$10, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	.loc	2 1853 3                # susan.c:1853:3
	testl	%r14d, %r14d
	je	.LBB18_4
.Ltmp2021:
# BB#1:                                 # %entry
	#DEBUG_VALUE: call_susan:mode <- R14D
	#DEBUG_VALUE: call_susan:dt <- 4.000000e+00
	#DEBUG_VALUE: call_susan:argindex <- 3
	#DEBUG_VALUE: call_susan:bt <- 20
	#DEBUG_VALUE: call_susan:principle <- 0
	#DEBUG_VALUE: call_susan:thin_post_proc <- 1
	#DEBUG_VALUE: call_susan:three_by_three <- 0
	#DEBUG_VALUE: call_susan:drawing_mode <- 0
	#DEBUG_VALUE: call_susan:susan_quick <- 0
	#DEBUG_VALUE: call_susan:max_no_corners <- 50
	#DEBUG_VALUE: call_susan:max_no_edges <- 50
	#DEBUG_VALUE: call_susan:in <- [R13+0]
	#DEBUG_VALUE: call_susan:x_size <- [R15+0]
	#DEBUG_VALUE: call_susan:y_size <- [R12+0]
	cmpl	$1, %r14d
	jne	.LBB18_2
.Ltmp2022:
# BB#5:                                 # %sw.bb5
	#DEBUG_VALUE: call_susan:dt <- 4.000000e+00
	#DEBUG_VALUE: call_susan:argindex <- 3
	#DEBUG_VALUE: call_susan:bt <- 20
	#DEBUG_VALUE: call_susan:principle <- 0
	#DEBUG_VALUE: call_susan:thin_post_proc <- 1
	#DEBUG_VALUE: call_susan:three_by_three <- 0
	#DEBUG_VALUE: call_susan:drawing_mode <- 0
	#DEBUG_VALUE: call_susan:susan_quick <- 0
	#DEBUG_VALUE: call_susan:max_no_corners <- 50
	#DEBUG_VALUE: call_susan:max_no_edges <- 50
	movl	$10, %edi
	callq	_KPushCDep
	leaq	-60(%rbp), %rdi
.Ltmp2023:
	#DEBUG_VALUE: call_susan:x_size <- [RDI+0]
	movl	$7, %esi
	movl	$4, %edx
	movq	%rdi, %r14
.Ltmp2024:
	#DEBUG_VALUE: call_susan:x_size <- [R14+0]
	callq	_KLoad0
	movl	$11, %edi
	callq	_KWork
	.loc	2 1864 32               # susan.c:1864:32
.Ltmp2025:
	movl	-60(%rbp), %ebx
	leaq	-64(%rbp), %rdi
.Ltmp2026:
	#DEBUG_VALUE: call_susan:y_size <- [RDI+0]
	movl	$8, %esi
	movl	$4, %edx
	movq	%rdi, %r15
.Ltmp2027:
	#DEBUG_VALUE: call_susan:y_size <- [R15+0]
	callq	_KLoad0
	imull	-64(%rbp), %ebx
	movl	$2, (%rsp)
	movl	$9, %edi
	movl	$10, %esi
	movl	$2, %edx
	movl	$7, %ecx
	movl	$2, %r8d
	movl	$8, %r9d
	callq	_KTimestamp3
	movabsq	$3941447858462508346, %rdi # imm = 0x36B2D5F1D061C53A
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$9, %edi
	callq	_KEnqArg
	.loc	2 1864 22 is_stmt 0     # susan.c:1864:22
	movl	%ebx, %edi
	callq	wccmalloc
	movq	%rax, -360080(%rbp)     # 8-byte Spill
.Ltmp2028:
	#DEBUG_VALUE: call_susan:r <- [RBP+-360080]
	movabsq	$-2712400678897304693, %rdi # imm = 0xDA5B9DF415CC3B8B
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	callq	_KEnqArgConst
	leaq	-56(%rbp), %r13
.Ltmp2029:
	#DEBUG_VALUE: call_susan:bp <- [R13+0]
	movl	$20, %esi
	movl	$6, %edx
	.loc	2 1865 7 is_stmt 1      # susan.c:1865:7
	movq	%r13, %rdi
	callq	setup_brightness_lut
	movl	$56, %edi
	movl	$10, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$56, %edi
	callq	_KPushCDep
	movl	$19, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	movl	$37, %edi
	callq	_KWork
	.loc	2 1874 34               # susan.c:1874:34
.Ltmp2030:
	movl	-60(%rbp), %ebx
	movl	$20, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	movq	%r15, %r12
.Ltmp2031:
	#DEBUG_VALUE: call_susan:y_size <- [R12+0]
	callq	_KLoad0
	imull	-64(%rbp), %ebx
	movl	$2, (%rsp)
	movl	$21, %edi
	movl	$10, %esi
	movl	$3, %edx
	movl	$19, %ecx
	movl	$2, %r8d
	movl	$20, %r9d
	callq	_KTimestamp3
	movabsq	$-114456112742001098, %rdi # imm = 0xFE695EC599A41636
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$21, %edi
	callq	_KEnqArg
	.loc	2 1874 24 is_stmt 0     # susan.c:1874:24
	movl	%ebx, %edi
	callq	wccmalloc
	movq	%rax, %r15
.Ltmp2032:
	#DEBUG_VALUE: call_susan:mid <- R15
	movq	%r15, -360072(%rbp)     # 8-byte Spill
	movl	$22, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1875 27 is_stmt 1     # susan.c:1875:27
	movl	-60(%rbp), %ebx
	movl	$23, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	imull	-64(%rbp), %ebx
	movl	$2, (%rsp)
	movl	$24, %edi
	movl	$10, %esi
	movl	$3, %edx
	movl	$22, %ecx
	movl	$2, %r8d
	movl	$23, %r9d
	callq	_KTimestamp3
	movabsq	$-2877813073539120164, %rdi # imm = 0xD80FF441C5B9C3DC
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$24, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	movl	$100, %esi
	.loc	2 1875 9 is_stmt 0      # susan.c:1875:9
	movq	%r15, %rdi
.Ltmp2033:
	#DEBUG_VALUE: call_susan:mid <- [RBP+-360072]
	movl	%ebx, %edx
	callq	wccmemset
	leaq	-48(%rbp), %rdi
.Ltmp2034:
	#DEBUG_VALUE: call_susan:in <- [RDI+0]
	movl	$25, %esi
	movl	$8, %edx
.Ltmp2035:
	#DEBUG_VALUE: call_susan:in <- undef
	callq	_KLoad0
	.loc	2 1878 29 is_stmt 1     # susan.c:1878:29
.Ltmp2036:
	movq	-48(%rbp), %rax
	movq	%rax, -360088(%rbp)     # 8-byte Spill
	movl	$26, %esi
	movl	$8, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 1878 38 is_stmt 0     # susan.c:1878:38
	movq	-56(%rbp), %rax
	movq	%rax, -360096(%rbp)     # 8-byte Spill
	movl	$27, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	movq	%r14, %r15
.Ltmp2037:
	#DEBUG_VALUE: call_susan:x_size <- [R15+0]
	callq	_KLoad0
	.loc	2 1878 54               # susan.c:1878:54
	movl	-60(%rbp), %r14d
	movl	$28, %esi
	movl	$4, %edx
	movq	%r12, %rdi
.Ltmp2038:
	#DEBUG_VALUE: call_susan:y_size <- undef
	callq	_KLoad0
	.loc	2 1878 61               # susan.c:1878:61
	movl	-64(%rbp), %ebx
	movl	$27, %edi
	movl	$27, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$28, %edi
	movl	$28, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$58, %edi
	movl	$6, %esi
	movl	$1, %edx
	movl	$10, %ecx
	movl	$2, %r8d
	callq	_KTimestamp2
	movl	$58, %edi
	callq	_KPushCDep
	movabsq	$2378929846948022393, %rdi # imm = 0x2103A81778E94879
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$28, %edi
	callq	_KEnqArg
	movl	$27, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	.loc	2 1880 11 is_stmt 1     # susan.c:1880:11
	movl	%ebx, (%rsp)
	movl	$50, %r8d
	movq	-360088(%rbp), %rdi     # 8-byte Reload
	movq	-360080(%rbp), %r13     # 8-byte Reload
.Ltmp2039:
	#DEBUG_VALUE: call_susan:r <- R13
	movq	%r13, %rsi
	movq	-360072(%rbp), %rbx     # 8-byte Reload
.Ltmp2040:
	#DEBUG_VALUE: call_susan:mid <- RBX
	movq	%rbx, %rdx
	movq	-360096(%rbp), %rcx     # 8-byte Reload
	movl	%r14d, %r9d
	callq	susan_edges
	callq	_KPopCDep
	movl	$56, %edi
	callq	_KPushCDep
	movl	$1, %edi
	callq	_KWork
	movl	$59, %edi
	movl	$10, %esi
	movl	$2, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$59, %edi
	callq	_KPushCDep
	movl	$29, %esi
	movl	$4, %edx
	movq	%r15, %rdi
.Ltmp2041:
	#DEBUG_VALUE: call_susan:x_size <- undef
	callq	_KLoad0
	movl	$8, %edi
	callq	_KWork
.Ltmp2042:
	.loc	2 1882 28               # susan.c:1882:28
	movl	-60(%rbp), %r14d
	movl	$30, %esi
	movl	$4, %edx
	leaq	-64(%rbp), %r15
.Ltmp2043:
	#DEBUG_VALUE: call_susan:y_size <- [R15+0]
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 1882 35 is_stmt 0     # susan.c:1882:35
	movl	-64(%rbp), %r12d
	movl	$29, %edi
	movl	$29, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$30, %edi
	movl	$30, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movabsq	$7563716473656760285, %rdi # imm = 0x68F7B80EFA14D7DD
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$30, %edi
	callq	_KEnqArg
	movl	$29, %edi
	callq	_KEnqArg
	.loc	2 1882 11               # susan.c:1882:11
	movq	%r13, %rdi
	movq	%rbx, %rsi
.Ltmp2044:
	#DEBUG_VALUE: call_susan:mid <- [RBP+-360072]
	movl	%r14d, %edx
	movl	%r12d, %ecx
	callq	susan_thin
	callq	_KPopCDep
	movl	$56, %edi
	callq	_KPushCDep
	movl	$12, %edi
	callq	_KWork
	movl	$31, %esi
	movl	$8, %edx
	leaq	-48(%rbp), %rdi
	callq	_KLoad0
.Ltmp2045:
	.loc	2 1883 19 is_stmt 1     # susan.c:1883:19
	movq	-48(%rbp), %rax
	movq	%rax, -360080(%rbp)     # 8-byte Spill
	movl	$32, %esi
	movl	$4, %edx
	leaq	-60(%rbp), %r13
.Ltmp2046:
	#DEBUG_VALUE: call_susan:x_size <- [R13+0]
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 1883 26 is_stmt 0     # susan.c:1883:26
	movl	-60(%rbp), %r14d
	movl	$33, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 1883 33               # susan.c:1883:33
	movl	-64(%rbp), %ebx
	movl	$33, %edi
	movl	$33, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movabsq	$-7731710197510450563, %rdi # imm = 0x94B3728A2B1FD27D
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	movl	$33, %edi
	callq	_KEnqArg
	movl	$32, %edi
	movl	$32, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$32, %edi
	callq	_KEnqArg
	xorl	%r8d, %r8d
	.loc	2 1883 9                # susan.c:1883:9
	movq	-360080(%rbp), %rdi     # 8-byte Reload
	movq	-360072(%rbp), %rsi     # 8-byte Reload
	movq	%r15, %r12
.Ltmp2047:
	#DEBUG_VALUE: call_susan:y_size <- [R12+0]
	movl	%r14d, %edx
	movq	%r13, %r15
.Ltmp2048:
	#DEBUG_VALUE: call_susan:x_size <- [R15+0]
	leaq	-48(%rbp), %r13
.Ltmp2049:
	#DEBUG_VALUE: call_susan:in <- [R13+0]
	movl	%ebx, %ecx
	callq	edge_draw
	jmp	.LBB18_6
.Ltmp2050:
.LBB18_4:                               # %sw.bb
	#DEBUG_VALUE: call_susan:dt <- 4.000000e+00
	#DEBUG_VALUE: call_susan:argindex <- 3
	#DEBUG_VALUE: call_susan:bt <- 20
	#DEBUG_VALUE: call_susan:principle <- 0
	#DEBUG_VALUE: call_susan:thin_post_proc <- 1
	#DEBUG_VALUE: call_susan:three_by_three <- 0
	#DEBUG_VALUE: call_susan:drawing_mode <- 0
	#DEBUG_VALUE: call_susan:susan_quick <- 0
	#DEBUG_VALUE: call_susan:max_no_corners <- 50
	#DEBUG_VALUE: call_susan:max_no_edges <- 50
	movl	$10, %edi
	callq	_KPushCDep
	movabsq	$370228915239537430, %rdi # imm = 0x523513CA26E4B16
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	callq	_KEnqArgConst
	movl	$16, %edi
	callq	_KWork
	leaq	-56(%rbp), %r15
.Ltmp2051:
	#DEBUG_VALUE: call_susan:bp <- [R15+0]
	movl	$20, %esi
	movl	$2, %edx
	.loc	2 1857 7 is_stmt 1      # susan.c:1857:7
	movq	%r15, %rdi
	callq	setup_brightness_lut
	leaq	-48(%rbp), %r13
.Ltmp2052:
	#DEBUG_VALUE: call_susan:in <- [R13+0]
	movl	$2, %esi
	movl	$8, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 1858 38               # susan.c:1858:38
	movq	-48(%rbp), %rax
	movq	%rax, -360072(%rbp)     # 8-byte Spill
	leaq	-60(%rbp), %rdi
.Ltmp2053:
	#DEBUG_VALUE: call_susan:x_size <- [RDI+0]
	movl	$3, %esi
	movl	$4, %edx
.Ltmp2054:
	#DEBUG_VALUE: call_susan:x_size <- undef
	callq	_KLoad0
	.loc	2 1858 44 is_stmt 0     # susan.c:1858:44
	movl	-60(%rbp), %ebx
	leaq	-64(%rbp), %r12
.Ltmp2055:
	#DEBUG_VALUE: call_susan:y_size <- [R12+0]
	movl	$4, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1858 51               # susan.c:1858:51
	movl	-64(%rbp), %r14d
	movl	$5, %esi
	movl	$8, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 1858 58               # susan.c:1858:58
	movq	-56(%rbp), %r15
.Ltmp2056:
	movl	$3, %edi
	movl	$3, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$4, %edi
	movl	$4, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movabsq	$4283709515041408721, %rdi # imm = 0x3B72CB1B9D0106D1
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$4, %edi
	callq	_KEnqArg
	movl	$3, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	movl	$6, %edi
	callq	_KEnqArg
	movss	.LCPI18_0(%rip), %xmm0
	xorl	%edi, %edi
	.loc	2 1858 7                # susan.c:1858:7
	movq	-360072(%rbp), %rsi     # 8-byte Reload
	movl	%ebx, %edx
	movl	%r14d, %ecx
	movq	%r15, %r8
	leaq	-60(%rbp), %r15
.Ltmp2057:
	#DEBUG_VALUE: call_susan:x_size <- [R15+0]
	callq	susan_smoothing
	jmp	.LBB18_6
.Ltmp2058:
.LBB18_2:                               # %entry
	#DEBUG_VALUE: call_susan:mode <- R14D
	#DEBUG_VALUE: call_susan:dt <- 4.000000e+00
	#DEBUG_VALUE: call_susan:argindex <- 3
	#DEBUG_VALUE: call_susan:bt <- 20
	#DEBUG_VALUE: call_susan:principle <- 0
	#DEBUG_VALUE: call_susan:thin_post_proc <- 1
	#DEBUG_VALUE: call_susan:three_by_three <- 0
	#DEBUG_VALUE: call_susan:drawing_mode <- 0
	#DEBUG_VALUE: call_susan:susan_quick <- 0
	#DEBUG_VALUE: call_susan:max_no_corners <- 50
	#DEBUG_VALUE: call_susan:max_no_edges <- 50
	#DEBUG_VALUE: call_susan:in <- [R13+0]
	#DEBUG_VALUE: call_susan:x_size <- [R15+0]
	#DEBUG_VALUE: call_susan:y_size <- [R12+0]
	cmpl	$2, %r14d
	jne	.LBB18_7
.Ltmp2059:
# BB#3:                                 # %sw.bb23
	#DEBUG_VALUE: call_susan:dt <- 4.000000e+00
	#DEBUG_VALUE: call_susan:argindex <- 3
	#DEBUG_VALUE: call_susan:bt <- 20
	#DEBUG_VALUE: call_susan:principle <- 0
	#DEBUG_VALUE: call_susan:thin_post_proc <- 1
	#DEBUG_VALUE: call_susan:three_by_three <- 0
	#DEBUG_VALUE: call_susan:drawing_mode <- 0
	#DEBUG_VALUE: call_susan:susan_quick <- 0
	#DEBUG_VALUE: call_susan:max_no_corners <- 50
	#DEBUG_VALUE: call_susan:max_no_edges <- 50
	movl	$10, %edi
	callq	_KPushCDep
	leaq	-60(%rbp), %r14
.Ltmp2060:
	#DEBUG_VALUE: call_susan:x_size <- [R14+0]
	movl	$34, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	movl	$11, %edi
	callq	_KWork
	.loc	2 1890 32 is_stmt 1     # susan.c:1890:32
	movl	-60(%rbp), %ebx
	leaq	-64(%rbp), %r12
.Ltmp2061:
	#DEBUG_VALUE: call_susan:y_size <- [R12+0]
	movl	$35, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	imull	-64(%rbp), %ebx
	movabsq	$183414878862115025, %rdi # imm = 0x28B9EDC4D1900D1
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$2, (%rsp)
	movl	$36, %edi
	movl	$10, %esi
	movl	$2, %edx
	movl	$34, %ecx
	movl	$2, %r8d
	movl	$35, %r9d
	callq	_KTimestamp3
	movl	$36, %edi
	callq	_KEnqArg
	.loc	2 1890 22 is_stmt 0     # susan.c:1890:22
	movl	%ebx, %edi
	callq	wccmalloc
	movq	%rax, -360072(%rbp)     # 8-byte Spill
.Ltmp2062:
	#DEBUG_VALUE: call_susan:r <- [RBP+-360072]
	movabsq	$-3587014197302453105, %rdi # imm = 0xCE385D97A5811C8F
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	callq	_KEnqArgConst
	leaq	-56(%rbp), %rbx
.Ltmp2063:
	#DEBUG_VALUE: call_susan:bp <- [RBX+0]
	movl	$20, %esi
	movl	$6, %edx
	.loc	2 1891 7 is_stmt 1      # susan.c:1891:7
	movq	%rbx, %rdi
	callq	setup_brightness_lut
	movl	$60, %edi
	movl	$10, %esi
	movl	$1, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$60, %edi
	callq	_KPushCDep
	movl	$17, %edi
	callq	_KWork
	leaq	-48(%rbp), %r13
.Ltmp2064:
	#DEBUG_VALUE: call_susan:in <- [R13+0]
	movl	$45, %esi
	movl	$8, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	.loc	2 1898 31               # susan.c:1898:31
.Ltmp2065:
	movq	-48(%rbp), %rax
	movq	%rax, -360080(%rbp)     # 8-byte Spill
	movl	$46, %esi
	movl	$8, %edx
	movq	%rbx, %rdi
	callq	_KLoad0
	.loc	2 1898 36 is_stmt 0     # susan.c:1898:36
	movq	-56(%rbp), %rax
	movq	%rax, -360088(%rbp)     # 8-byte Spill
	movl	$47, %esi
	movl	$4, %edx
	movq	%r14, %rdi
	callq	_KLoad0
	.loc	2 1898 66               # susan.c:1898:66
	movl	-60(%rbp), %r15d
	movl	$48, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1898 73               # susan.c:1898:73
	movl	-64(%rbp), %ebx
.Ltmp2066:
	movl	$47, %edi
	movl	$47, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$48, %edi
	movl	$48, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	callq	_KPopCDep
	movl	$61, %edi
	movl	$10, %esi
	movl	$2, %edx
	callq	_KTimestamp1
	movl	$61, %edi
	callq	_KPushCDep
	movabsq	$3758822231979533904, %rdi # imm = 0x342A04E7A6FB2650
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$48, %edi
	callq	_KEnqArg
	movl	$47, %edi
	callq	_KEnqArg
	callq	_KEnqArgConst
	.loc	2 1900 11 is_stmt 1     # susan.c:1900:11
	movl	%ebx, (%rsp)
	leaq	-360064(%rbp), %r8
	movl	$50, %ecx
	movq	-360080(%rbp), %rdi     # 8-byte Reload
	movq	-360072(%rbp), %rsi     # 8-byte Reload
	movq	-360088(%rbp), %rdx     # 8-byte Reload
	movl	%r15d, %r9d
	movq	%r14, %r15
.Ltmp2067:
	#DEBUG_VALUE: call_susan:x_size <- [R15+0]
	callq	susan_corners
	callq	_KPopCDep
	movl	$60, %edi
	callq	_KPushCDep
	movl	$49, %esi
	movl	$8, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	movl	$8, %edi
	callq	_KWork
.Ltmp2068:
	.loc	2 1901 21               # susan.c:1901:21
	movq	-48(%rbp), %r14
	movl	$50, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 1901 36 is_stmt 0     # susan.c:1901:36
	movl	-60(%rbp), %ebx
	movl	$50, %edi
	movl	$50, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movabsq	$-4297150774169841780, %rdi # imm = 0xC45D74235F4FCF8C
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	movl	$50, %edi
	callq	_KEnqArg
	xorl	%ecx, %ecx
	.loc	2 1901 9                # susan.c:1901:9
	movq	%r14, %rdi
	leaq	-360064(%rbp), %rsi
	movl	%ebx, %edx
	callq	corner_draw
.Ltmp2069:
.LBB18_6:                               # %sw.epilog
	callq	_KPopCDep
.LBB18_7:                               # %sw.epilog
	#DEBUG_VALUE: call_susan:dt <- 4.000000e+00
	#DEBUG_VALUE: call_susan:argindex <- 3
	#DEBUG_VALUE: call_susan:bt <- 20
	#DEBUG_VALUE: call_susan:principle <- 0
	#DEBUG_VALUE: call_susan:thin_post_proc <- 1
	#DEBUG_VALUE: call_susan:three_by_three <- 0
	#DEBUG_VALUE: call_susan:drawing_mode <- 0
	#DEBUG_VALUE: call_susan:susan_quick <- 0
	#DEBUG_VALUE: call_susan:max_no_corners <- 50
	#DEBUG_VALUE: call_susan:max_no_edges <- 50
	movl	$51, %esi
	movl	$8, %edx
	movq	%r13, %rdi
	callq	_KLoad0
	movl	$12, %edi
	callq	_KWork
	movl	$52, %esi
	movl	$4, %edx
	movq	%r15, %rdi
	callq	_KLoad0
	.loc	2 1907 16 is_stmt 1     # susan.c:1907:16
	movl	-60(%rbp), %r14d
	movl	$53, %esi
	movl	$4, %edx
	movq	%r12, %rdi
	callq	_KLoad0
	.loc	2 1907 23 is_stmt 0     # susan.c:1907:23
	movl	-64(%rbp), %ebx
	movabsq	$3587440459261100649, %rdi # imm = 0x31C92617331F4269
	xorl	%esi, %esi
	callq	_KPrepCall
	movl	$53, %edi
	movl	$53, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$53, %edi
	callq	_KEnqArg
	movl	$52, %edi
	movl	$52, %esi
	xorl	%edx, %edx
	callq	_KTimestamp1
	movl	$52, %edi
	callq	_KEnqArg
	.loc	2 1907 3                # susan.c:1907:3
	movl	%r14d, %esi
	movl	%ebx, %edx
	callq	put_image
	xorl	%esi, %esi
	movabsq	$-4271825962218635103, %rdi # imm = 0xC4B76CEBA3AAC0A1
	callq	_KExitRegion
	.loc	2 1908 1 is_stmt 1      # susan.c:1908:1
	addq	$360072, %rsp           # imm = 0x57E88
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Ltmp2070:
.Ltmp2071:
	.size	call_susan, .Ltmp2071-call_susan
.Lfunc_end18:
	.cfi_endproc

	.globl	__main
	.align	16, 0x90
	.type	__main,@function
__main:                                 # @__main
.Lfunc_begin19:
	.loc	2 1911 0                # susan.c:1911:0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp2072:
	.cfi_def_cfa_offset 16
.Ltmp2073:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2074:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
.Ltmp2075:
	.cfi_offset %rbx, -32
.Ltmp2076:
	.cfi_offset %r14, -24
	callq	_KInit
	movabsq	$-3677947425469889523, %r14 # imm = 0xCCF54E4D9A4E040D
	xorl	%esi, %esi
	movq	%r14, %rdi
	callq	_KEnterRegion
	movl	$1, %edi
	xorl	%esi, %esi
	callq	_KPrepRTable
	movl	$3, %edi
	callq	_KWork
	leaq	-40(%rbp), %rbx
.Ltmp2077:
	#DEBUG_VALUE: main:file <- [RBX+0]
	movl	$8, %esi
	movq	%rbx, %rdi
	callq	_KStoreConst
	.loc	2 1913 3 prologue_end   # susan.c:1913:3
.Ltmp2078:
	movq	$input, -40(%rbp)
	.loc	2 1914 3                # susan.c:1914:3
	leaq	-32(%rbp), %rdi
	movl	$8, %esi
	callq	_KStoreConst
	movq	$7292, -32(%rbp)        # imm = 0x1C7C
	.loc	2 1915 3                # susan.c:1915:3
	leaq	-24(%rbp), %rdi
	movl	$4, %esi
	callq	_KStoreConst
	movl	$0, -24(%rbp)
	movabsq	$1137530745062933609, %rdi # imm = 0xFC9522F8C8FC469
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	xorl	%esi, %esi
	.loc	2 1917 3                # susan.c:1917:3
	movq	%rbx, %rdi
	callq	call_susan
	movabsq	$-5515354176153687670, %rdi # imm = 0xB37586992FE4698A
	xorl	%esi, %esi
	callq	_KPrepCall
	.loc	2 1918 3                # susan.c:1918:3
	callq	wccfreeall
	movabsq	$7260736730293643739, %rdi # imm = 0x64C3519650C8A9DB
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	movl	$1, %esi
	.loc	2 1919 3                # susan.c:1919:3
	movq	%rbx, %rdi
	callq	call_susan
	movabsq	$-1893980994232697060, %rdi # imm = 0xE5B73A520B6B3F1C
	xorl	%esi, %esi
	callq	_KPrepCall
	.loc	2 1920 3                # susan.c:1920:3
	callq	wccfreeall
	movabsq	$7115326149195703725, %rdi # imm = 0x62BEB76F1FDBA5AD
	xorl	%esi, %esi
	callq	_KPrepCall
	callq	_KEnqArgConst
	movl	$2, %esi
	.loc	2 1921 3                # susan.c:1921:3
	movq	%rbx, %rdi
	callq	call_susan
	movabsq	$336454909520979311, %rdi # imm = 0x4AB53F524EF256F
	xorl	%esi, %esi
	callq	_KPrepCall
	.loc	2 1922 3                # susan.c:1922:3
	callq	wccfreeall
	callq	_KReturnConst
	xorl	%esi, %esi
	movq	%r14, %rdi
	callq	_KExitRegion
	callq	_KDeinit
	xorl	%eax, %eax
	.loc	2 1924 3                # susan.c:1924:3
	addq	$32, %rsp
	popq	%rbx
.Ltmp2079:
	popq	%r14
	popq	%rbp
	retq
.Ltmp2080:
.Ltmp2081:
	.size	__main, .Ltmp2081-__main
.Lfunc_end19:
	.cfi_endproc

	.type	krem_prefix697271013d38fb7d_krem_callsiteId_krem_susan.c_krem_getint_krem_307_krem_307_krem_,@object # @krem_prefix697271013d38fb7d_krem_callsiteId_krem_susan.c_krem_getint_krem_307_krem_307_krem_
	.bss
	.globl	krem_prefix697271013d38fb7d_krem_callsiteId_krem_susan.c_krem_getint_krem_307_krem_307_krem_
krem_prefix697271013d38fb7d_krem_callsiteId_krem_susan.c_krem_getint_krem_307_krem_307_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix697271013d38fb7d_krem_callsiteId_krem_susan.c_krem_getint_krem_307_krem_307_krem_, 1

	.type	krem_prefix322586d24c6e7d5c_krem_callsiteId_krem_susan.c_krem_getint_krem_311_krem_311_krem_,@object # @krem_prefix322586d24c6e7d5c_krem_callsiteId_krem_susan.c_krem_getint_krem_311_krem_311_krem_
	.globl	krem_prefix322586d24c6e7d5c_krem_callsiteId_krem_susan.c_krem_getint_krem_311_krem_311_krem_
krem_prefix322586d24c6e7d5c_krem_callsiteId_krem_susan.c_krem_getint_krem_311_krem_311_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix322586d24c6e7d5c_krem_callsiteId_krem_susan.c_krem_getint_krem_311_krem_311_krem_, 1

	.type	krem_prefix9cbf9cb2ce8c7216_krem_callsiteId_krem_susan.c_krem_getint_krem_313_krem_313_krem_,@object # @krem_prefix9cbf9cb2ce8c7216_krem_callsiteId_krem_susan.c_krem_getint_krem_313_krem_313_krem_
	.globl	krem_prefix9cbf9cb2ce8c7216_krem_callsiteId_krem_susan.c_krem_getint_krem_313_krem_313_krem_
krem_prefix9cbf9cb2ce8c7216_krem_callsiteId_krem_susan.c_krem_getint_krem_313_krem_313_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix9cbf9cb2ce8c7216_krem_callsiteId_krem_susan.c_krem_getint_krem_313_krem_313_krem_, 1

	.type	krem_prefixaa47c4bbe7ac656d_krem_callsiteId_krem_susan.c_krem_getint_krem_316_krem_316_krem_,@object # @krem_prefixaa47c4bbe7ac656d_krem_callsiteId_krem_susan.c_krem_getint_krem_316_krem_316_krem_
	.globl	krem_prefixaa47c4bbe7ac656d_krem_callsiteId_krem_susan.c_krem_getint_krem_316_krem_316_krem_
krem_prefixaa47c4bbe7ac656d_krem_callsiteId_krem_susan.c_krem_getint_krem_316_krem_316_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixaa47c4bbe7ac656d_krem_callsiteId_krem_susan.c_krem_getint_krem_316_krem_316_krem_, 1

	.type	krem_prefixf1505083f6e45df3_krem_callsiteId_krem_susan.c_krem_getint_krem_324_krem_324_krem_,@object # @krem_prefixf1505083f6e45df3_krem_callsiteId_krem_susan.c_krem_getint_krem_324_krem_324_krem_
	.globl	krem_prefixf1505083f6e45df3_krem_callsiteId_krem_susan.c_krem_getint_krem_324_krem_324_krem_
krem_prefixf1505083f6e45df3_krem_callsiteId_krem_susan.c_krem_getint_krem_324_krem_324_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf1505083f6e45df3_krem_callsiteId_krem_susan.c_krem_getint_krem_324_krem_324_krem_, 1

	.type	krem_prefixe6ae5c0ba80db501_krem_callsiteId_krem_susan.c_krem_get_image_krem_339_krem_339_krem_,@object # @krem_prefixe6ae5c0ba80db501_krem_callsiteId_krem_susan.c_krem_get_image_krem_339_krem_339_krem_
	.globl	krem_prefixe6ae5c0ba80db501_krem_callsiteId_krem_susan.c_krem_get_image_krem_339_krem_339_krem_
krem_prefixe6ae5c0ba80db501_krem_callsiteId_krem_susan.c_krem_get_image_krem_339_krem_339_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe6ae5c0ba80db501_krem_callsiteId_krem_susan.c_krem_get_image_krem_339_krem_339_krem_, 1

	.type	krem_prefix0b9467c4076bf2d3_krem_callsiteId_krem_susan.c_krem_get_image_krem_343_krem_343_krem_,@object # @krem_prefix0b9467c4076bf2d3_krem_callsiteId_krem_susan.c_krem_get_image_krem_343_krem_343_krem_
	.globl	krem_prefix0b9467c4076bf2d3_krem_callsiteId_krem_susan.c_krem_get_image_krem_343_krem_343_krem_
krem_prefix0b9467c4076bf2d3_krem_callsiteId_krem_susan.c_krem_get_image_krem_343_krem_343_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix0b9467c4076bf2d3_krem_callsiteId_krem_susan.c_krem_get_image_krem_343_krem_343_krem_, 1

	.type	krem_prefix983919e9f5459e11_krem_callsiteId_krem_susan.c_krem_get_image_krem_344_krem_344_krem_,@object # @krem_prefix983919e9f5459e11_krem_callsiteId_krem_susan.c_krem_get_image_krem_344_krem_344_krem_
	.globl	krem_prefix983919e9f5459e11_krem_callsiteId_krem_susan.c_krem_get_image_krem_344_krem_344_krem_
krem_prefix983919e9f5459e11_krem_callsiteId_krem_susan.c_krem_get_image_krem_344_krem_344_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix983919e9f5459e11_krem_callsiteId_krem_susan.c_krem_get_image_krem_344_krem_344_krem_, 1

	.type	krem_prefixb3f74d47b59ab00c_krem_callsiteId_krem_susan.c_krem_get_image_krem_346_krem_346_krem_,@object # @krem_prefixb3f74d47b59ab00c_krem_callsiteId_krem_susan.c_krem_get_image_krem_346_krem_346_krem_
	.globl	krem_prefixb3f74d47b59ab00c_krem_callsiteId_krem_susan.c_krem_get_image_krem_346_krem_346_krem_
krem_prefixb3f74d47b59ab00c_krem_callsiteId_krem_susan.c_krem_get_image_krem_346_krem_346_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixb3f74d47b59ab00c_krem_callsiteId_krem_susan.c_krem_get_image_krem_346_krem_346_krem_, 1

	.type	krem_prefixd7c9ad067ec60f3d_krem_callsiteId_krem_susan.c_krem_get_image_krem_348_krem_348_krem_,@object # @krem_prefixd7c9ad067ec60f3d_krem_callsiteId_krem_susan.c_krem_get_image_krem_348_krem_348_krem_
	.globl	krem_prefixd7c9ad067ec60f3d_krem_callsiteId_krem_susan.c_krem_get_image_krem_348_krem_348_krem_
krem_prefixd7c9ad067ec60f3d_krem_callsiteId_krem_susan.c_krem_get_image_krem_348_krem_348_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd7c9ad067ec60f3d_krem_callsiteId_krem_susan.c_krem_get_image_krem_348_krem_348_krem_, 1

	.type	krem_prefix1f12bc67c0332e7b_krem_callsiteId_krem_susan.c_krem_get_image_krem_349_krem_349_krem_,@object # @krem_prefix1f12bc67c0332e7b_krem_callsiteId_krem_susan.c_krem_get_image_krem_349_krem_349_krem_
	.globl	krem_prefix1f12bc67c0332e7b_krem_callsiteId_krem_susan.c_krem_get_image_krem_349_krem_349_krem_
krem_prefix1f12bc67c0332e7b_krem_callsiteId_krem_susan.c_krem_get_image_krem_349_krem_349_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix1f12bc67c0332e7b_krem_callsiteId_krem_susan.c_krem_get_image_krem_349_krem_349_krem_, 1

	.type	krem_prefix9abed872d6d7effa_krem_callsiteId_krem_susan.c_krem_get_image_krem_350_krem_350_krem_,@object # @krem_prefix9abed872d6d7effa_krem_callsiteId_krem_susan.c_krem_get_image_krem_350_krem_350_krem_
	.globl	krem_prefix9abed872d6d7effa_krem_callsiteId_krem_susan.c_krem_get_image_krem_350_krem_350_krem_
krem_prefix9abed872d6d7effa_krem_callsiteId_krem_susan.c_krem_get_image_krem_350_krem_350_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix9abed872d6d7effa_krem_callsiteId_krem_susan.c_krem_get_image_krem_350_krem_350_krem_, 1

	.type	krem_prefix95b59efc9369df42_krem_callsiteId_krem_susan.c_krem_get_image_krem_354_krem_354_krem_,@object # @krem_prefix95b59efc9369df42_krem_callsiteId_krem_susan.c_krem_get_image_krem_354_krem_354_krem_
	.globl	krem_prefix95b59efc9369df42_krem_callsiteId_krem_susan.c_krem_get_image_krem_354_krem_354_krem_
krem_prefix95b59efc9369df42_krem_callsiteId_krem_susan.c_krem_get_image_krem_354_krem_354_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix95b59efc9369df42_krem_callsiteId_krem_susan.c_krem_get_image_krem_354_krem_354_krem_, 1

	.type	krem_prefix77b5d984911281c6_krem_callsiteId_krem_susan.c_krem_get_image_krem_356_krem_356_krem_,@object # @krem_prefix77b5d984911281c6_krem_callsiteId_krem_susan.c_krem_get_image_krem_356_krem_356_krem_
	.globl	krem_prefix77b5d984911281c6_krem_callsiteId_krem_susan.c_krem_get_image_krem_356_krem_356_krem_
krem_prefix77b5d984911281c6_krem_callsiteId_krem_susan.c_krem_get_image_krem_356_krem_356_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix77b5d984911281c6_krem_callsiteId_krem_susan.c_krem_get_image_krem_356_krem_356_krem_, 1

	.type	krem_prefix50d16ca6a9b1799c_krem_callsiteId_krem_susan.c_krem_get_image_krem_357_krem_357_krem_,@object # @krem_prefix50d16ca6a9b1799c_krem_callsiteId_krem_susan.c_krem_get_image_krem_357_krem_357_krem_
	.globl	krem_prefix50d16ca6a9b1799c_krem_callsiteId_krem_susan.c_krem_get_image_krem_357_krem_357_krem_
krem_prefix50d16ca6a9b1799c_krem_callsiteId_krem_susan.c_krem_get_image_krem_357_krem_357_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix50d16ca6a9b1799c_krem_callsiteId_krem_susan.c_krem_get_image_krem_357_krem_357_krem_, 1

	.type	krem_prefix06e8c42ec1343f0c_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_398_krem_398_krem_,@object # @krem_prefix06e8c42ec1343f0c_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_398_krem_398_krem_
	.globl	krem_prefix06e8c42ec1343f0c_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_398_krem_398_krem_
krem_prefix06e8c42ec1343f0c_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_398_krem_398_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix06e8c42ec1343f0c_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_398_krem_398_krem_, 1

	.type	krem_prefix10c5c11ec605fc01_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_407_krem_407_krem_,@object # @krem_prefix10c5c11ec605fc01_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_407_krem_407_krem_
	.globl	krem_prefix10c5c11ec605fc01_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_407_krem_407_krem_
krem_prefix10c5c11ec605fc01_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_407_krem_407_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix10c5c11ec605fc01_krem_callsiteId_krem_susan.c_krem_setup_brightness_lut_krem_407_krem_407_krem_, 1

	.type	krem_prefixd2116685ed12f7ea_krem_callsiteId_krem_susan.c_krem_susan_principle_krem_419_krem_419_krem_,@object # @krem_prefixd2116685ed12f7ea_krem_callsiteId_krem_susan.c_krem_susan_principle_krem_419_krem_419_krem_
	.globl	krem_prefixd2116685ed12f7ea_krem_callsiteId_krem_susan.c_krem_susan_principle_krem_419_krem_419_krem_
krem_prefixd2116685ed12f7ea_krem_callsiteId_krem_susan.c_krem_susan_principle_krem_419_krem_419_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd2116685ed12f7ea_krem_callsiteId_krem_susan.c_krem_susan_principle_krem_419_krem_419_krem_, 1

	.type	krem_prefix6a09f5fd575bfa81_krem_callsiteId_krem_susan.c_krem_susan_principle_small_krem_492_krem_492_krem_,@object # @krem_prefix6a09f5fd575bfa81_krem_callsiteId_krem_susan.c_krem_susan_principle_small_krem_492_krem_492_krem_
	.globl	krem_prefix6a09f5fd575bfa81_krem_callsiteId_krem_susan.c_krem_susan_principle_small_krem_492_krem_492_krem_
krem_prefix6a09f5fd575bfa81_krem_callsiteId_krem_susan.c_krem_susan_principle_small_krem_492_krem_492_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix6a09f5fd575bfa81_krem_callsiteId_krem_susan.c_krem_susan_principle_small_krem_492_krem_492_krem_, 1

	.type	krem_prefix0a194dd95a322771_krem_callsiteId_krem_susan.c_krem_enlarge_krem_560_krem_560_krem_,@object # @krem_prefix0a194dd95a322771_krem_callsiteId_krem_susan.c_krem_enlarge_krem_560_krem_560_krem_
	.globl	krem_prefix0a194dd95a322771_krem_callsiteId_krem_susan.c_krem_enlarge_krem_560_krem_560_krem_
krem_prefix0a194dd95a322771_krem_callsiteId_krem_susan.c_krem_enlarge_krem_560_krem_560_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix0a194dd95a322771_krem_callsiteId_krem_susan.c_krem_enlarge_krem_560_krem_560_krem_, 1

	.type	krem_prefix110024511486a2ac_krem_callsiteId_krem_susan.c_krem_enlarge_krem_566_krem_566_krem_,@object # @krem_prefix110024511486a2ac_krem_callsiteId_krem_susan.c_krem_enlarge_krem_566_krem_566_krem_
	.globl	krem_prefix110024511486a2ac_krem_callsiteId_krem_susan.c_krem_enlarge_krem_566_krem_566_krem_
krem_prefix110024511486a2ac_krem_callsiteId_krem_susan.c_krem_enlarge_krem_566_krem_566_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix110024511486a2ac_krem_callsiteId_krem_susan.c_krem_enlarge_krem_566_krem_566_krem_, 1

	.type	krem_prefix856139bd5a302b00_krem_callsiteId_krem_susan.c_krem_enlarge_krem_568_krem_568_krem_,@object # @krem_prefix856139bd5a302b00_krem_callsiteId_krem_susan.c_krem_enlarge_krem_568_krem_568_krem_
	.globl	krem_prefix856139bd5a302b00_krem_callsiteId_krem_susan.c_krem_enlarge_krem_568_krem_568_krem_
krem_prefix856139bd5a302b00_krem_callsiteId_krem_susan.c_krem_enlarge_krem_568_krem_568_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix856139bd5a302b00_krem_callsiteId_krem_susan.c_krem_enlarge_krem_568_krem_568_krem_, 1

	.type	krem_prefix7829eac4caea6a2c_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_606_krem_606_krem_,@object # @krem_prefix7829eac4caea6a2c_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_606_krem_606_krem_
	.globl	krem_prefix7829eac4caea6a2c_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_606_krem_606_krem_
krem_prefix7829eac4caea6a2c_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_606_krem_606_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix7829eac4caea6a2c_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_606_krem_606_krem_, 1

	.type	krem_prefix61a2ea1de623b4e9_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_612_krem_612_krem_,@object # @krem_prefix61a2ea1de623b4e9_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_612_krem_612_krem_
	.globl	krem_prefix61a2ea1de623b4e9_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_612_krem_612_krem_
krem_prefix61a2ea1de623b4e9_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_612_krem_612_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix61a2ea1de623b4e9_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_612_krem_612_krem_, 1

	.type	krem_prefix98981119139df098_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_615_krem_615_krem_,@object # @krem_prefix98981119139df098_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_615_krem_615_krem_
	.globl	krem_prefix98981119139df098_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_615_krem_615_krem_
krem_prefix98981119139df098_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_615_krem_615_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix98981119139df098_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_615_krem_615_krem_, 1

	.type	krem_prefix232ed05e7e36ebd1_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_616_krem_616_krem_,@object # @krem_prefix232ed05e7e36ebd1_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_616_krem_616_krem_
	.globl	krem_prefix232ed05e7e36ebd1_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_616_krem_616_krem_
krem_prefix232ed05e7e36ebd1_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_616_krem_616_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix232ed05e7e36ebd1_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_616_krem_616_krem_, 1

	.type	krem_prefixc1d71a8bf7f829f7_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_626_krem_626_krem_,@object # @krem_prefixc1d71a8bf7f829f7_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_626_krem_626_krem_
	.globl	krem_prefixc1d71a8bf7f829f7_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_626_krem_626_krem_
krem_prefixc1d71a8bf7f829f7_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_626_krem_626_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixc1d71a8bf7f829f7_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_626_krem_626_krem_, 1

	.type	krem_prefixe7a9f1ade134406f_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_634_krem_634_krem_,@object # @krem_prefixe7a9f1ade134406f_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_634_krem_634_krem_
	.globl	krem_prefixe7a9f1ade134406f_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_634_krem_634_krem_
krem_prefixe7a9f1ade134406f_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_634_krem_634_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe7a9f1ade134406f_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_634_krem_634_krem_, 1

	.type	krem_prefixff559b94ff2ca438_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_664_krem_664_krem_,@object # @krem_prefixff559b94ff2ca438_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_664_krem_664_krem_
	.globl	krem_prefixff559b94ff2ca438_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_664_krem_664_krem_
krem_prefixff559b94ff2ca438_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_664_krem_664_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixff559b94ff2ca438_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_664_krem_664_krem_, 1

	.type	krem_prefix4e6b5de72159f8a0_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_698_krem_698_krem_,@object # @krem_prefix4e6b5de72159f8a0_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_698_krem_698_krem_
	.globl	krem_prefix4e6b5de72159f8a0_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_698_krem_698_krem_
krem_prefix4e6b5de72159f8a0_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_698_krem_698_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix4e6b5de72159f8a0_krem_callsiteId_krem_susan.c_krem_susan_smoothing_krem_698_krem_698_krem_, 1

	.type	krem_prefix0465c62732d69b74_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_935_krem_935_krem_,@object # @krem_prefix0465c62732d69b74_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_935_krem_935_krem_
	.globl	krem_prefix0465c62732d69b74_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_935_krem_935_krem_
krem_prefix0465c62732d69b74_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_935_krem_935_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix0465c62732d69b74_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_935_krem_935_krem_, 1

	.type	krem_prefix2f870bb1c0124e75_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_1063_krem_1063_krem_,@object # @krem_prefix2f870bb1c0124e75_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_1063_krem_1063_krem_
	.globl	krem_prefix2f870bb1c0124e75_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_1063_krem_1063_krem_
krem_prefix2f870bb1c0124e75_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_1063_krem_1063_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix2f870bb1c0124e75_krem_callsiteId_krem_susan.c_krem_susan_edges_krem_1063_krem_1063_krem_, 1

	.type	krem_prefixaa3b424d9a1421ba_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1169_krem_1169_krem_,@object # @krem_prefixaa3b424d9a1421ba_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1169_krem_1169_krem_
	.globl	krem_prefixaa3b424d9a1421ba_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1169_krem_1169_krem_
krem_prefixaa3b424d9a1421ba_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1169_krem_1169_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixaa3b424d9a1421ba_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1169_krem_1169_krem_, 1

	.type	krem_prefix0c9bbb77b0734ea6_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1226_krem_1226_krem_,@object # @krem_prefix0c9bbb77b0734ea6_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1226_krem_1226_krem_
	.globl	krem_prefix0c9bbb77b0734ea6_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1226_krem_1226_krem_
krem_prefix0c9bbb77b0734ea6_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1226_krem_1226_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix0c9bbb77b0734ea6_krem_callsiteId_krem_susan.c_krem_susan_edges_small_krem_1226_krem_1226_krem_, 1

	.type	krem_prefixd9dc694163be8f67_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1325_krem_1325_krem_,@object # @krem_prefixd9dc694163be8f67_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1325_krem_1325_krem_
	.globl	krem_prefixd9dc694163be8f67_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1325_krem_1325_krem_
krem_prefixd9dc694163be8f67_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1325_krem_1325_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd9dc694163be8f67_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1325_krem_1325_krem_, 1

	.type	krem_prefix374eeeab81687973_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1327_krem_1327_krem_,@object # @krem_prefix374eeeab81687973_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1327_krem_1327_krem_
	.globl	krem_prefix374eeeab81687973_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1327_krem_1327_krem_
krem_prefix374eeeab81687973_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1327_krem_1327_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix374eeeab81687973_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1327_krem_1327_krem_, 1

	.type	krem_prefixbf40649cb1170f86_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1328_krem_1328_krem_,@object # @krem_prefixbf40649cb1170f86_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1328_krem_1328_krem_
	.globl	krem_prefixbf40649cb1170f86_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1328_krem_1328_krem_
krem_prefixbf40649cb1170f86_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1328_krem_1328_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixbf40649cb1170f86_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1328_krem_1328_krem_, 1

	.type	krem_prefixf70ecbf88aef2a68_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1589_krem_1589_krem_,@object # @krem_prefixf70ecbf88aef2a68_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1589_krem_1589_krem_
	.globl	krem_prefixf70ecbf88aef2a68_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1589_krem_1589_krem_
krem_prefixf70ecbf88aef2a68_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1589_krem_1589_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf70ecbf88aef2a68_krem_callsiteId_krem_susan.c_krem_susan_corners_krem_1589_krem_1589_krem_, 1

	.type	krem_prefix357ccf2c2e685b2b_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1605_krem_1605_krem_,@object # @krem_prefix357ccf2c2e685b2b_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1605_krem_1605_krem_
	.globl	krem_prefix357ccf2c2e685b2b_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1605_krem_1605_krem_
krem_prefix357ccf2c2e685b2b_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1605_krem_1605_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix357ccf2c2e685b2b_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1605_krem_1605_krem_, 1

	.type	krem_prefix9ee46549a1e08b95_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1806_krem_1806_krem_,@object # @krem_prefix9ee46549a1e08b95_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1806_krem_1806_krem_
	.globl	krem_prefix9ee46549a1e08b95_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1806_krem_1806_krem_
krem_prefix9ee46549a1e08b95_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1806_krem_1806_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix9ee46549a1e08b95_krem_callsiteId_krem_susan.c_krem_susan_corners_quick_krem_1806_krem_1806_krem_, 1

	.type	krem_prefix5217f93575f1c1ba_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1833_krem_1833_krem_,@object # @krem_prefix5217f93575f1c1ba_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1833_krem_1833_krem_
	.globl	krem_prefix5217f93575f1c1ba_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1833_krem_1833_krem_
krem_prefix5217f93575f1c1ba_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1833_krem_1833_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix5217f93575f1c1ba_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1833_krem_1833_krem_, 1

	.type	krem_prefix0523513ca26e4b16_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1857_krem_1857_krem_,@object # @krem_prefix0523513ca26e4b16_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1857_krem_1857_krem_
	.globl	krem_prefix0523513ca26e4b16_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1857_krem_1857_krem_
krem_prefix0523513ca26e4b16_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1857_krem_1857_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix0523513ca26e4b16_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1857_krem_1857_krem_, 1

	.type	krem_prefix3b72cb1b9d0106d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1858_krem_1858_krem_,@object # @krem_prefix3b72cb1b9d0106d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1858_krem_1858_krem_
	.globl	krem_prefix3b72cb1b9d0106d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1858_krem_1858_krem_
krem_prefix3b72cb1b9d0106d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1858_krem_1858_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix3b72cb1b9d0106d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1858_krem_1858_krem_, 1

	.type	krem_prefix36b2d5f1d061c53a_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1864_krem_1864_krem_,@object # @krem_prefix36b2d5f1d061c53a_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1864_krem_1864_krem_
	.globl	krem_prefix36b2d5f1d061c53a_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1864_krem_1864_krem_
krem_prefix36b2d5f1d061c53a_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1864_krem_1864_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix36b2d5f1d061c53a_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1864_krem_1864_krem_, 1

	.type	krem_prefixda5b9df415cc3b8b_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1865_krem_1865_krem_,@object # @krem_prefixda5b9df415cc3b8b_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1865_krem_1865_krem_
	.globl	krem_prefixda5b9df415cc3b8b_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1865_krem_1865_krem_
krem_prefixda5b9df415cc3b8b_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1865_krem_1865_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixda5b9df415cc3b8b_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1865_krem_1865_krem_, 1

	.type	krem_prefix31dc9c25b10f2fe6_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1869_krem_1869_krem_,@object # @krem_prefix31dc9c25b10f2fe6_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1869_krem_1869_krem_
	.globl	krem_prefix31dc9c25b10f2fe6_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1869_krem_1869_krem_
krem_prefix31dc9c25b10f2fe6_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1869_krem_1869_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix31dc9c25b10f2fe6_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1869_krem_1869_krem_, 1

	.type	krem_prefixd07f2d2cbd401099_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1871_krem_1871_krem_,@object # @krem_prefixd07f2d2cbd401099_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1871_krem_1871_krem_
	.globl	krem_prefixd07f2d2cbd401099_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1871_krem_1871_krem_
krem_prefixd07f2d2cbd401099_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1871_krem_1871_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd07f2d2cbd401099_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1871_krem_1871_krem_, 1

	.type	krem_prefix4530e7aea9c1b6ac_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1872_krem_1872_krem_,@object # @krem_prefix4530e7aea9c1b6ac_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1872_krem_1872_krem_
	.globl	krem_prefix4530e7aea9c1b6ac_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1872_krem_1872_krem_
krem_prefix4530e7aea9c1b6ac_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1872_krem_1872_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix4530e7aea9c1b6ac_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1872_krem_1872_krem_, 1

	.type	krem_prefixfe695ec599a41636_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1874_krem_1874_krem_,@object # @krem_prefixfe695ec599a41636_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1874_krem_1874_krem_
	.globl	krem_prefixfe695ec599a41636_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1874_krem_1874_krem_
krem_prefixfe695ec599a41636_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1874_krem_1874_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixfe695ec599a41636_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1874_krem_1874_krem_, 1

	.type	krem_prefixd80ff441c5b9c3dc_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1875_krem_1875_krem_,@object # @krem_prefixd80ff441c5b9c3dc_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1875_krem_1875_krem_
	.globl	krem_prefixd80ff441c5b9c3dc_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1875_krem_1875_krem_
krem_prefixd80ff441c5b9c3dc_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1875_krem_1875_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd80ff441c5b9c3dc_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1875_krem_1875_krem_, 1

	.type	krem_prefixf37834f91bc3a7eb_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1878_krem_1878_krem_,@object # @krem_prefixf37834f91bc3a7eb_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1878_krem_1878_krem_
	.globl	krem_prefixf37834f91bc3a7eb_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1878_krem_1878_krem_
krem_prefixf37834f91bc3a7eb_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1878_krem_1878_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf37834f91bc3a7eb_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1878_krem_1878_krem_, 1

	.type	krem_prefix2103a81778e94879_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1880_krem_1880_krem_,@object # @krem_prefix2103a81778e94879_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1880_krem_1880_krem_
	.globl	krem_prefix2103a81778e94879_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1880_krem_1880_krem_
krem_prefix2103a81778e94879_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1880_krem_1880_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix2103a81778e94879_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1880_krem_1880_krem_, 1

	.type	krem_prefix68f7b80efa14d7dd_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1882_krem_1882_krem_,@object # @krem_prefix68f7b80efa14d7dd_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1882_krem_1882_krem_
	.globl	krem_prefix68f7b80efa14d7dd_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1882_krem_1882_krem_
krem_prefix68f7b80efa14d7dd_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1882_krem_1882_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix68f7b80efa14d7dd_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1882_krem_1882_krem_, 1

	.type	krem_prefix94b3728a2b1fd27d_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1883_krem_1883_krem_,@object # @krem_prefix94b3728a2b1fd27d_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1883_krem_1883_krem_
	.globl	krem_prefix94b3728a2b1fd27d_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1883_krem_1883_krem_
krem_prefix94b3728a2b1fd27d_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1883_krem_1883_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix94b3728a2b1fd27d_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1883_krem_1883_krem_, 1

	.type	krem_prefix028b9edc4d1900d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1890_krem_1890_krem_,@object # @krem_prefix028b9edc4d1900d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1890_krem_1890_krem_
	.globl	krem_prefix028b9edc4d1900d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1890_krem_1890_krem_
krem_prefix028b9edc4d1900d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1890_krem_1890_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix028b9edc4d1900d1_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1890_krem_1890_krem_, 1

	.type	krem_prefixce385d97a5811c8f_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1891_krem_1891_krem_,@object # @krem_prefixce385d97a5811c8f_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1891_krem_1891_krem_
	.globl	krem_prefixce385d97a5811c8f_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1891_krem_1891_krem_
krem_prefixce385d97a5811c8f_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1891_krem_1891_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixce385d97a5811c8f_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1891_krem_1891_krem_, 1

	.type	krem_prefix6556c04a95510dc9_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1894_krem_1894_krem_,@object # @krem_prefix6556c04a95510dc9_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1894_krem_1894_krem_
	.globl	krem_prefix6556c04a95510dc9_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1894_krem_1894_krem_
krem_prefix6556c04a95510dc9_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1894_krem_1894_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix6556c04a95510dc9_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1894_krem_1894_krem_, 1

	.type	krem_prefix0ab38b77f2cc4a20_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1895_krem_1895_krem_,@object # @krem_prefix0ab38b77f2cc4a20_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1895_krem_1895_krem_
	.globl	krem_prefix0ab38b77f2cc4a20_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1895_krem_1895_krem_
krem_prefix0ab38b77f2cc4a20_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1895_krem_1895_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix0ab38b77f2cc4a20_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1895_krem_1895_krem_, 1

	.type	krem_prefixcf47f14a20101f61_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1898_krem_1898_krem_,@object # @krem_prefixcf47f14a20101f61_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1898_krem_1898_krem_
	.globl	krem_prefixcf47f14a20101f61_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1898_krem_1898_krem_
krem_prefixcf47f14a20101f61_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1898_krem_1898_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixcf47f14a20101f61_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1898_krem_1898_krem_, 1

	.type	krem_prefix342a04e7a6fb2650_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1900_krem_1900_krem_,@object # @krem_prefix342a04e7a6fb2650_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1900_krem_1900_krem_
	.globl	krem_prefix342a04e7a6fb2650_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1900_krem_1900_krem_
krem_prefix342a04e7a6fb2650_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1900_krem_1900_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix342a04e7a6fb2650_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1900_krem_1900_krem_, 1

	.type	krem_prefixc45d74235f4fcf8c_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1901_krem_1901_krem_,@object # @krem_prefixc45d74235f4fcf8c_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1901_krem_1901_krem_
	.globl	krem_prefixc45d74235f4fcf8c_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1901_krem_1901_krem_
krem_prefixc45d74235f4fcf8c_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1901_krem_1901_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixc45d74235f4fcf8c_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1901_krem_1901_krem_, 1

	.type	krem_prefix31c92617331f4269_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1907_krem_1907_krem_,@object # @krem_prefix31c92617331f4269_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1907_krem_1907_krem_
	.globl	krem_prefix31c92617331f4269_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1907_krem_1907_krem_
krem_prefix31c92617331f4269_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1907_krem_1907_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix31c92617331f4269_krem_callsiteId_krem_susan.c_krem_call_susan_krem_1907_krem_1907_krem_, 1

	.type	krem_prefix0fc9522f8c8fc469_krem_callsiteId_krem_susan.c_krem_main_krem_1917_krem_1917_krem_,@object # @krem_prefix0fc9522f8c8fc469_krem_callsiteId_krem_susan.c_krem_main_krem_1917_krem_1917_krem_
	.globl	krem_prefix0fc9522f8c8fc469_krem_callsiteId_krem_susan.c_krem_main_krem_1917_krem_1917_krem_
krem_prefix0fc9522f8c8fc469_krem_callsiteId_krem_susan.c_krem_main_krem_1917_krem_1917_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix0fc9522f8c8fc469_krem_callsiteId_krem_susan.c_krem_main_krem_1917_krem_1917_krem_, 1

	.type	krem_prefixb37586992fe4698a_krem_callsiteId_krem_susan.c_krem_main_krem_1918_krem_1918_krem_,@object # @krem_prefixb37586992fe4698a_krem_callsiteId_krem_susan.c_krem_main_krem_1918_krem_1918_krem_
	.globl	krem_prefixb37586992fe4698a_krem_callsiteId_krem_susan.c_krem_main_krem_1918_krem_1918_krem_
krem_prefixb37586992fe4698a_krem_callsiteId_krem_susan.c_krem_main_krem_1918_krem_1918_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixb37586992fe4698a_krem_callsiteId_krem_susan.c_krem_main_krem_1918_krem_1918_krem_, 1

	.type	krem_prefix64c3519650c8a9db_krem_callsiteId_krem_susan.c_krem_main_krem_1919_krem_1919_krem_,@object # @krem_prefix64c3519650c8a9db_krem_callsiteId_krem_susan.c_krem_main_krem_1919_krem_1919_krem_
	.globl	krem_prefix64c3519650c8a9db_krem_callsiteId_krem_susan.c_krem_main_krem_1919_krem_1919_krem_
krem_prefix64c3519650c8a9db_krem_callsiteId_krem_susan.c_krem_main_krem_1919_krem_1919_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix64c3519650c8a9db_krem_callsiteId_krem_susan.c_krem_main_krem_1919_krem_1919_krem_, 1

	.type	krem_prefixe5b73a520b6b3f1c_krem_callsiteId_krem_susan.c_krem_main_krem_1920_krem_1920_krem_,@object # @krem_prefixe5b73a520b6b3f1c_krem_callsiteId_krem_susan.c_krem_main_krem_1920_krem_1920_krem_
	.globl	krem_prefixe5b73a520b6b3f1c_krem_callsiteId_krem_susan.c_krem_main_krem_1920_krem_1920_krem_
krem_prefixe5b73a520b6b3f1c_krem_callsiteId_krem_susan.c_krem_main_krem_1920_krem_1920_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe5b73a520b6b3f1c_krem_callsiteId_krem_susan.c_krem_main_krem_1920_krem_1920_krem_, 1

	.type	krem_prefix62beb76f1fdba5ad_krem_callsiteId_krem_susan.c_krem_main_krem_1921_krem_1921_krem_,@object # @krem_prefix62beb76f1fdba5ad_krem_callsiteId_krem_susan.c_krem_main_krem_1921_krem_1921_krem_
	.globl	krem_prefix62beb76f1fdba5ad_krem_callsiteId_krem_susan.c_krem_main_krem_1921_krem_1921_krem_
krem_prefix62beb76f1fdba5ad_krem_callsiteId_krem_susan.c_krem_main_krem_1921_krem_1921_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix62beb76f1fdba5ad_krem_callsiteId_krem_susan.c_krem_main_krem_1921_krem_1921_krem_, 1

	.type	krem_prefix04ab53f524ef256f_krem_callsiteId_krem_susan.c_krem_main_krem_1922_krem_1922_krem_,@object # @krem_prefix04ab53f524ef256f_krem_callsiteId_krem_susan.c_krem_main_krem_1922_krem_1922_krem_
	.globl	krem_prefix04ab53f524ef256f_krem_callsiteId_krem_susan.c_krem_main_krem_1922_krem_1922_krem_
krem_prefix04ab53f524ef256f_krem_callsiteId_krem_susan.c_krem_main_krem_1922_krem_1922_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix04ab53f524ef256f_krem_callsiteId_krem_susan.c_krem_main_krem_1922_krem_1922_krem_, 1

	.type	krem_prefix00d3284b301d64fb_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_,@object # @krem_prefix00d3284b301d64fb_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_
	.globl	krem_prefix00d3284b301d64fb_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_
krem_prefix00d3284b301d64fb_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix00d3284b301d64fb_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_, 1

	.type	krem_prefix02584994435cd176_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_,@object # @krem_prefix02584994435cd176_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_
	.globl	krem_prefix02584994435cd176_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_
krem_prefix02584994435cd176_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix02584994435cd176_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_, 1

	.type	krem_prefix06d7e0bbf478ad2b_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_,@object # @krem_prefix06d7e0bbf478ad2b_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_
	.globl	krem_prefix06d7e0bbf478ad2b_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_
krem_prefix06d7e0bbf478ad2b_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix06d7e0bbf478ad2b_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_, 1

	.type	krem_prefix08364a255f0b0f4a_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_,@object # @krem_prefix08364a255f0b0f4a_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_
	.globl	krem_prefix08364a255f0b0f4a_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_
krem_prefix08364a255f0b0f4a_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix08364a255f0b0f4a_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_, 1

	.type	krem_prefix088da0d12779e4e9_krem_func_krem_susan.c_krem_susan_corners_quick_krem_1599_krem_1599_krem_,@object # @krem_prefix088da0d12779e4e9_krem_func_krem_susan.c_krem_susan_corners_quick_krem_1599_krem_1599_krem_
	.globl	krem_prefix088da0d12779e4e9_krem_func_krem_susan.c_krem_susan_corners_quick_krem_1599_krem_1599_krem_
krem_prefix088da0d12779e4e9_krem_func_krem_susan.c_krem_susan_corners_quick_krem_1599_krem_1599_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix088da0d12779e4e9_krem_func_krem_susan.c_krem_susan_corners_quick_krem_1599_krem_1599_krem_, 1

	.type	krem_prefix10052a385178d0f2_krem_loop_krem_susan.c_krem_getint_krem_304_krem_326_krem_,@object # @krem_prefix10052a385178d0f2_krem_loop_krem_susan.c_krem_getint_krem_304_krem_326_krem_
	.globl	krem_prefix10052a385178d0f2_krem_loop_krem_susan.c_krem_getint_krem_304_krem_326_krem_
krem_prefix10052a385178d0f2_krem_loop_krem_susan.c_krem_getint_krem_304_krem_326_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix10052a385178d0f2_krem_loop_krem_susan.c_krem_getint_krem_304_krem_326_krem_, 1

	.type	krem_prefix12d27e303e5e1fba_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_,@object # @krem_prefix12d27e303e5e1fba_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_
	.globl	krem_prefix12d27e303e5e1fba_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_
krem_prefix12d27e303e5e1fba_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix12d27e303e5e1fba_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_, 1

	.type	krem_prefix130706ee4d410741_krem_func_krem_susan.c_krem_get_image_krem_333_krem_333_krem_,@object # @krem_prefix130706ee4d410741_krem_func_krem_susan.c_krem_get_image_krem_333_krem_333_krem_
	.globl	krem_prefix130706ee4d410741_krem_func_krem_susan.c_krem_get_image_krem_333_krem_333_krem_
krem_prefix130706ee4d410741_krem_func_krem_susan.c_krem_get_image_krem_333_krem_333_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix130706ee4d410741_krem_func_krem_susan.c_krem_get_image_krem_333_krem_333_krem_, 1

	.type	krem_prefix16a734b75fea7773_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_,@object # @krem_prefix16a734b75fea7773_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_
	.globl	krem_prefix16a734b75fea7773_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_
krem_prefix16a734b75fea7773_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix16a734b75fea7773_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_, 1

	.type	krem_prefix1787c71f04e69853_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_,@object # @krem_prefix1787c71f04e69853_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_
	.globl	krem_prefix1787c71f04e69853_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_
krem_prefix1787c71f04e69853_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix1787c71f04e69853_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_, 1

	.type	krem_prefix1840cebfe6d560b5_krem_loop_krem_susan.c_krem_put_image_krem_363_krem_366_krem_,@object # @krem_prefix1840cebfe6d560b5_krem_loop_krem_susan.c_krem_put_image_krem_363_krem_366_krem_
	.globl	krem_prefix1840cebfe6d560b5_krem_loop_krem_susan.c_krem_put_image_krem_363_krem_366_krem_
krem_prefix1840cebfe6d560b5_krem_loop_krem_susan.c_krem_put_image_krem_363_krem_366_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix1840cebfe6d560b5_krem_loop_krem_susan.c_krem_put_image_krem_363_krem_366_krem_, 1

	.type	krem_prefix1a902338c67cb517_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_,@object # @krem_prefix1a902338c67cb517_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_
	.globl	krem_prefix1a902338c67cb517_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_
krem_prefix1a902338c67cb517_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix1a902338c67cb517_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_, 1

	.type	krem_prefix1b8fdcafd56d3f5f_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_,@object # @krem_prefix1b8fdcafd56d3f5f_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_
	.globl	krem_prefix1b8fdcafd56d3f5f_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_
krem_prefix1b8fdcafd56d3f5f_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix1b8fdcafd56d3f5f_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_, 1

	.type	krem_prefix1cfbfd3d85d8d315_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_,@object # @krem_prefix1cfbfd3d85d8d315_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_
	.globl	krem_prefix1cfbfd3d85d8d315_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_
krem_prefix1cfbfd3d85d8d315_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix1cfbfd3d85d8d315_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_, 1

	.type	krem_prefix1d7bcbb42458a5a4_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_,@object # @krem_prefix1d7bcbb42458a5a4_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_
	.globl	krem_prefix1d7bcbb42458a5a4_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_
krem_prefix1d7bcbb42458a5a4_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix1d7bcbb42458a5a4_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_, 1

	.type	krem_prefix206a7819b62182ab_krem_func_krem_susan.c_krem_put_image_krem_361_krem_361_krem_,@object # @krem_prefix206a7819b62182ab_krem_func_krem_susan.c_krem_put_image_krem_361_krem_361_krem_
	.globl	krem_prefix206a7819b62182ab_krem_func_krem_susan.c_krem_put_image_krem_361_krem_361_krem_
krem_prefix206a7819b62182ab_krem_func_krem_susan.c_krem_put_image_krem_361_krem_361_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix206a7819b62182ab_krem_func_krem_susan.c_krem_put_image_krem_361_krem_361_krem_, 1

	.type	krem_prefix21d98f77ee6b33db_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_,@object # @krem_prefix21d98f77ee6b33db_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_
	.globl	krem_prefix21d98f77ee6b33db_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_
krem_prefix21d98f77ee6b33db_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix21d98f77ee6b33db_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_, 1

	.type	krem_prefix22895870e03941aa_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_,@object # @krem_prefix22895870e03941aa_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_
	.globl	krem_prefix22895870e03941aa_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_
krem_prefix22895870e03941aa_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix22895870e03941aa_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_569_krem_, 1

	.type	krem_prefix23911891f45560ba_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_,@object # @krem_prefix23911891f45560ba_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_
	.globl	krem_prefix23911891f45560ba_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_
krem_prefix23911891f45560ba_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix23911891f45560ba_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_, 1

	.type	krem_prefix255ea87b2f2743af_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_,@object # @krem_prefix255ea87b2f2743af_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_
	.globl	krem_prefix255ea87b2f2743af_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_
krem_prefix255ea87b2f2743af_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix255ea87b2f2743af_krem_loop_body_krem_susan.c_krem_edge_draw_krem_710_krem_734_krem_, 1

	.type	krem_prefix2abc82f303895636_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_,@object # @krem_prefix2abc82f303895636_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_
	.globl	krem_prefix2abc82f303895636_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_
krem_prefix2abc82f303895636_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix2abc82f303895636_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_, 1

	.type	krem_prefix2b9138f51c4e6c5c_krem_loop_body_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_,@object # @krem_prefix2b9138f51c4e6c5c_krem_loop_body_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_
	.globl	krem_prefix2b9138f51c4e6c5c_krem_loop_body_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_
krem_prefix2b9138f51c4e6c5c_krem_loop_body_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix2b9138f51c4e6c5c_krem_loop_body_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_, 1

	.type	krem_prefix2df33e326b4be7d9_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_,@object # @krem_prefix2df33e326b4be7d9_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_
	.globl	krem_prefix2df33e326b4be7d9_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_
krem_prefix2df33e326b4be7d9_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix2df33e326b4be7d9_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_, 1

	.type	krem_prefix326edda5dc83e70b_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_,@object # @krem_prefix326edda5dc83e70b_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_
	.globl	krem_prefix326edda5dc83e70b_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_
krem_prefix326edda5dc83e70b_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix326edda5dc83e70b_krem_loop_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_, 1

	.type	krem_prefix32ef85214c1de704_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_,@object # @krem_prefix32ef85214c1de704_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_
	.globl	krem_prefix32ef85214c1de704_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_
krem_prefix32ef85214c1de704_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix32ef85214c1de704_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_, 1

	.type	krem_prefix3472d8e0611b596f_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_,@object # @krem_prefix3472d8e0611b596f_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_
	.globl	krem_prefix3472d8e0611b596f_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_
krem_prefix3472d8e0611b596f_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix3472d8e0611b596f_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_, 1

	.type	krem_prefix3c05f294f80a4766_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_,@object # @krem_prefix3c05f294f80a4766_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_
	.globl	krem_prefix3c05f294f80a4766_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_
krem_prefix3c05f294f80a4766_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix3c05f294f80a4766_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_, 1

	.type	krem_prefix3d7f9fd1e372cf2b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_,@object # @krem_prefix3d7f9fd1e372cf2b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_
	.globl	krem_prefix3d7f9fd1e372cf2b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_
krem_prefix3d7f9fd1e372cf2b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix3d7f9fd1e372cf2b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_, 1

	.type	krem_prefix41cc6de51bc13f86_krem_func_krem_susan.c_krem_edge_draw_krem_707_krem_707_krem_,@object # @krem_prefix41cc6de51bc13f86_krem_func_krem_susan.c_krem_edge_draw_krem_707_krem_707_krem_
	.globl	krem_prefix41cc6de51bc13f86_krem_func_krem_susan.c_krem_edge_draw_krem_707_krem_707_krem_
krem_prefix41cc6de51bc13f86_krem_func_krem_susan.c_krem_edge_draw_krem_707_krem_707_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix41cc6de51bc13f86_krem_func_krem_susan.c_krem_edge_draw_krem_707_krem_707_krem_, 1

	.type	krem_prefix4401ee96f99c8bd7_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_,@object # @krem_prefix4401ee96f99c8bd7_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_
	.globl	krem_prefix4401ee96f99c8bd7_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_
krem_prefix4401ee96f99c8bd7_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix4401ee96f99c8bd7_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_, 1

	.type	krem_prefix44c92ac6d5446243_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_,@object # @krem_prefix44c92ac6d5446243_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_
	.globl	krem_prefix44c92ac6d5446243_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_
krem_prefix44c92ac6d5446243_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix44c92ac6d5446243_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_, 1

	.type	krem_prefix49e1c4293d2ef528_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_,@object # @krem_prefix49e1c4293d2ef528_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_
	.globl	krem_prefix49e1c4293d2ef528_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_
krem_prefix49e1c4293d2ef528_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix49e1c4293d2ef528_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_, 1

	.type	krem_prefix4bfb517c88c04a17_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_,@object # @krem_prefix4bfb517c88c04a17_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_
	.globl	krem_prefix4bfb517c88c04a17_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_
krem_prefix4bfb517c88c04a17_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix4bfb517c88c04a17_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_, 1

	.type	krem_prefix4d7da08f653ca0a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_,@object # @krem_prefix4d7da08f653ca0a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_
	.globl	krem_prefix4d7da08f653ca0a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_
krem_prefix4d7da08f653ca0a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix4d7da08f653ca0a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_, 1

	.type	krem_prefix4fb113928f7e5d21_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_,@object # @krem_prefix4fb113928f7e5d21_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_
	.globl	krem_prefix4fb113928f7e5d21_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_
krem_prefix4fb113928f7e5d21_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix4fb113928f7e5d21_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_, 1

	.type	krem_prefix5283adf0054fe06f_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_,@object # @krem_prefix5283adf0054fe06f_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_
	.globl	krem_prefix5283adf0054fe06f_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_
krem_prefix5283adf0054fe06f_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix5283adf0054fe06f_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_, 1

	.type	krem_prefix576b499ac4764e93_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_,@object # @krem_prefix576b499ac4764e93_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_
	.globl	krem_prefix576b499ac4764e93_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_
krem_prefix576b499ac4764e93_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix576b499ac4764e93_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_, 1

	.type	krem_prefix5e527d50cd8ac38f_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_,@object # @krem_prefix5e527d50cd8ac38f_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_
	.globl	krem_prefix5e527d50cd8ac38f_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_
krem_prefix5e527d50cd8ac38f_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix5e527d50cd8ac38f_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_, 1

	.type	krem_prefix6011a0323d507953_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_,@object # @krem_prefix6011a0323d507953_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_
	.globl	krem_prefix6011a0323d507953_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_
krem_prefix6011a0323d507953_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix6011a0323d507953_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_, 1

	.type	krem_prefix617963a9b3c40133_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_,@object # @krem_prefix617963a9b3c40133_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_
	.globl	krem_prefix617963a9b3c40133_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_
krem_prefix617963a9b3c40133_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix617963a9b3c40133_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_, 1

	.type	krem_prefix64e3285a99e5c824_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_,@object # @krem_prefix64e3285a99e5c824_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_
	.globl	krem_prefix64e3285a99e5c824_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_
krem_prefix64e3285a99e5c824_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix64e3285a99e5c824_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_, 1

	.type	krem_prefix65065e05a8a1e86f_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_,@object # @krem_prefix65065e05a8a1e86f_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_
	.globl	krem_prefix65065e05a8a1e86f_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_
krem_prefix65065e05a8a1e86f_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix65065e05a8a1e86f_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_660_krem_, 1

	.type	krem_prefix6575e1a147404ce4_krem_loop_body_krem_susan.c_krem_put_image_krem_363_krem_366_krem_,@object # @krem_prefix6575e1a147404ce4_krem_loop_body_krem_susan.c_krem_put_image_krem_363_krem_366_krem_
	.globl	krem_prefix6575e1a147404ce4_krem_loop_body_krem_susan.c_krem_put_image_krem_363_krem_366_krem_
krem_prefix6575e1a147404ce4_krem_loop_body_krem_susan.c_krem_put_image_krem_363_krem_366_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix6575e1a147404ce4_krem_loop_body_krem_susan.c_krem_put_image_krem_363_krem_366_krem_, 1

	.type	krem_prefix6a28d15cf40e059d_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_,@object # @krem_prefix6a28d15cf40e059d_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_
	.globl	krem_prefix6a28d15cf40e059d_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_
krem_prefix6a28d15cf40e059d_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix6a28d15cf40e059d_krem_loop_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_, 1

	.type	krem_prefix6c630d28a473d599_krem_loop_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_,@object # @krem_prefix6c630d28a473d599_krem_loop_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_
	.globl	krem_prefix6c630d28a473d599_krem_loop_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_
krem_prefix6c630d28a473d599_krem_loop_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix6c630d28a473d599_krem_loop_krem_susan.c_krem_setup_brightness_lut_krem_395_krem_408_krem_, 1

	.type	krem_prefix6d2534bbe86c207f_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_,@object # @krem_prefix6d2534bbe86c207f_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_
	.globl	krem_prefix6d2534bbe86c207f_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_
krem_prefix6d2534bbe86c207f_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix6d2534bbe86c207f_krem_loop_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_, 1

	.type	krem_prefix7076f448b13282e5_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_,@object # @krem_prefix7076f448b13282e5_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_
	.globl	krem_prefix7076f448b13282e5_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_
krem_prefix7076f448b13282e5_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix7076f448b13282e5_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_, 1

	.type	krem_prefix720df259347f5f3d_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_,@object # @krem_prefix720df259347f5f3d_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_
	.globl	krem_prefix720df259347f5f3d_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_
krem_prefix720df259347f5f3d_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix720df259347f5f3d_krem_loop_body_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_, 1

	.type	krem_prefix73ea9b23d2e044f5_krem_func_krem_susan.c_krem_susan_edges_krem_928_krem_928_krem_,@object # @krem_prefix73ea9b23d2e044f5_krem_func_krem_susan.c_krem_susan_edges_krem_928_krem_928_krem_
	.globl	krem_prefix73ea9b23d2e044f5_krem_func_krem_susan.c_krem_susan_edges_krem_928_krem_928_krem_
krem_prefix73ea9b23d2e044f5_krem_func_krem_susan.c_krem_susan_edges_krem_928_krem_928_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix73ea9b23d2e044f5_krem_func_krem_susan.c_krem_susan_edges_krem_928_krem_928_krem_, 1

	.type	krem_prefix75bdeb4a200d8938_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_,@object # @krem_prefix75bdeb4a200d8938_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_
	.globl	krem_prefix75bdeb4a200d8938_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_
krem_prefix75bdeb4a200d8938_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix75bdeb4a200d8938_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_, 1

	.type	krem_prefix7a5cc2335344348a_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_,@object # @krem_prefix7a5cc2335344348a_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_
	.globl	krem_prefix7a5cc2335344348a_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_
krem_prefix7a5cc2335344348a_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix7a5cc2335344348a_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_, 1

	.type	krem_prefix7b3eb97bc7762e61_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_,@object # @krem_prefix7b3eb97bc7762e61_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_
	.globl	krem_prefix7b3eb97bc7762e61_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_
krem_prefix7b3eb97bc7762e61_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix7b3eb97bc7762e61_krem_loop_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_, 1

	.type	krem_prefix7ba3c7231c4b25a3_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_,@object # @krem_prefix7ba3c7231c4b25a3_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_
	.globl	krem_prefix7ba3c7231c4b25a3_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_
krem_prefix7ba3c7231c4b25a3_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix7ba3c7231c4b25a3_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_, 1

	.type	krem_prefix80192756d42ac7f5_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_,@object # @krem_prefix80192756d42ac7f5_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_
	.globl	krem_prefix80192756d42ac7f5_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_
krem_prefix80192756d42ac7f5_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix80192756d42ac7f5_krem_loop_krem_susan.c_krem_edge_draw_krem_710_krem_724_krem_, 1

	.type	krem_prefix8133c0295e6d1506_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_,@object # @krem_prefix8133c0295e6d1506_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_
	.globl	krem_prefix8133c0295e6d1506_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_
krem_prefix8133c0295e6d1506_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix8133c0295e6d1506_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_, 1

	.type	krem_prefix86f6aee27dfd28d4_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_,@object # @krem_prefix86f6aee27dfd28d4_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_
	.globl	krem_prefix86f6aee27dfd28d4_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_
krem_prefix86f6aee27dfd28d4_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix86f6aee27dfd28d4_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_, 1

	.type	krem_prefix890a13de2e3b6b96_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_,@object # @krem_prefix890a13de2e3b6b96_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_
	.globl	krem_prefix890a13de2e3b6b96_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_
krem_prefix890a13de2e3b6b96_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix890a13de2e3b6b96_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_, 1

	.type	krem_prefix8add427c55568bc6_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_,@object # @krem_prefix8add427c55568bc6_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_
	.globl	krem_prefix8add427c55568bc6_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_
krem_prefix8add427c55568bc6_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix8add427c55568bc6_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_, 1

	.type	krem_prefix94275f41b6c29bdc_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_,@object # @krem_prefix94275f41b6c29bdc_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_
	.globl	krem_prefix94275f41b6c29bdc_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_
krem_prefix94275f41b6c29bdc_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix94275f41b6c29bdc_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_, 1

	.type	krem_prefix95024daa5618a23c_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_,@object # @krem_prefix95024daa5618a23c_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_
	.globl	krem_prefix95024daa5618a23c_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_
krem_prefix95024daa5618a23c_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix95024daa5618a23c_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_, 1

	.type	krem_prefix973ed29172df0e93_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_,@object # @krem_prefix973ed29172df0e93_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_
	.globl	krem_prefix973ed29172df0e93_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_
krem_prefix973ed29172df0e93_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix973ed29172df0e93_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_, 1

	.type	krem_prefix9d08c90323256650_krem_func_krem_susan.c_krem_exit_error_krem_294_krem_294_krem_,@object # @krem_prefix9d08c90323256650_krem_func_krem_susan.c_krem_exit_error_krem_294_krem_294_krem_
	.globl	krem_prefix9d08c90323256650_krem_func_krem_susan.c_krem_exit_error_krem_294_krem_294_krem_
krem_prefix9d08c90323256650_krem_func_krem_susan.c_krem_exit_error_krem_294_krem_294_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix9d08c90323256650_krem_func_krem_susan.c_krem_exit_error_krem_294_krem_294_krem_, 1

	.type	krem_prefix9d1fc6b86d0bfded_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_,@object # @krem_prefix9d1fc6b86d0bfded_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_
	.globl	krem_prefix9d1fc6b86d0bfded_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_
krem_prefix9d1fc6b86d0bfded_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix9d1fc6b86d0bfded_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_658_krem_, 1

	.type	krem_prefix9eb5a54b494af046_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_,@object # @krem_prefix9eb5a54b494af046_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_
	.globl	krem_prefix9eb5a54b494af046_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_
krem_prefix9eb5a54b494af046_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_:
	.byte	0                       # 0x0
	.size	krem_prefix9eb5a54b494af046_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_, 1

	.type	krem_prefixa0a22d945bcd5460_krem_loop_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_,@object # @krem_prefixa0a22d945bcd5460_krem_loop_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_
	.globl	krem_prefixa0a22d945bcd5460_krem_loop_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_
krem_prefixa0a22d945bcd5460_krem_loop_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixa0a22d945bcd5460_krem_loop_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_, 1

	.type	krem_prefixa34870b832f496eb_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_,@object # @krem_prefixa34870b832f496eb_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_
	.globl	krem_prefixa34870b832f496eb_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_
krem_prefixa34870b832f496eb_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixa34870b832f496eb_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_, 1

	.type	krem_prefixa6cdd6512322d2bd_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_,@object # @krem_prefixa6cdd6512322d2bd_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_
	.globl	krem_prefixa6cdd6512322d2bd_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_
krem_prefixa6cdd6512322d2bd_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixa6cdd6512322d2bd_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_, 1

	.type	krem_prefixa86a18390cc7c62c_krem_func_krem_susan.c_krem_susan_principle_krem_413_krem_413_krem_,@object # @krem_prefixa86a18390cc7c62c_krem_func_krem_susan.c_krem_susan_principle_krem_413_krem_413_krem_
	.globl	krem_prefixa86a18390cc7c62c_krem_func_krem_susan.c_krem_susan_principle_krem_413_krem_413_krem_
krem_prefixa86a18390cc7c62c_krem_func_krem_susan.c_krem_susan_principle_krem_413_krem_413_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixa86a18390cc7c62c_krem_func_krem_susan.c_krem_susan_principle_krem_413_krem_413_krem_, 1

	.type	krem_prefixa98c97b281211aa8_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_,@object # @krem_prefixa98c97b281211aa8_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_
	.globl	krem_prefixa98c97b281211aa8_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_
krem_prefixa98c97b281211aa8_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixa98c97b281211aa8_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_, 1

	.type	krem_prefixadeb8e84d482571a_krem_func_krem_susan.c_krem_susan_corners_krem_1316_krem_1316_krem_,@object # @krem_prefixadeb8e84d482571a_krem_func_krem_susan.c_krem_susan_corners_krem_1316_krem_1316_krem_
	.globl	krem_prefixadeb8e84d482571a_krem_func_krem_susan.c_krem_susan_corners_krem_1316_krem_1316_krem_
krem_prefixadeb8e84d482571a_krem_func_krem_susan.c_krem_susan_corners_krem_1316_krem_1316_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixadeb8e84d482571a_krem_func_krem_susan.c_krem_susan_corners_krem_1316_krem_1316_krem_, 1

	.type	krem_prefixaf8738a95ebf8c5b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_,@object # @krem_prefixaf8738a95ebf8c5b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_
	.globl	krem_prefixaf8738a95ebf8c5b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_
krem_prefixaf8738a95ebf8c5b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixaf8738a95ebf8c5b_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_666_krem_, 1

	.type	krem_prefixb3b618a068f74464_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_,@object # @krem_prefixb3b618a068f74464_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_
	.globl	krem_prefixb3b618a068f74464_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_
krem_prefixb3b618a068f74464_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixb3b618a068f74464_krem_loop_body_krem_susan.c_krem_susan_principle_krem_416_krem_480_krem_, 1

	.type	krem_prefixb78384b7335d19d1_krem_func_krem_susan.c_krem_susan_smoothing_krem_587_krem_587_krem_,@object # @krem_prefixb78384b7335d19d1_krem_func_krem_susan.c_krem_susan_smoothing_krem_587_krem_587_krem_
	.globl	krem_prefixb78384b7335d19d1_krem_func_krem_susan.c_krem_susan_smoothing_krem_587_krem_587_krem_
krem_prefixb78384b7335d19d1_krem_func_krem_susan.c_krem_susan_smoothing_krem_587_krem_587_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixb78384b7335d19d1_krem_func_krem_susan.c_krem_susan_smoothing_krem_587_krem_587_krem_, 1

	.type	krem_prefixbb7dad3dc83e0876_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_326_krem_,@object # @krem_prefixbb7dad3dc83e0876_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_326_krem_
	.globl	krem_prefixbb7dad3dc83e0876_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_326_krem_
krem_prefixbb7dad3dc83e0876_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_326_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixbb7dad3dc83e0876_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_326_krem_, 1

	.type	krem_prefixbcc114cd540a74f2_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_,@object # @krem_prefixbcc114cd540a74f2_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_
	.globl	krem_prefixbcc114cd540a74f2_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_
krem_prefixbcc114cd540a74f2_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixbcc114cd540a74f2_krem_loop_body_krem_susan.c_krem_susan_thin_krem_741_krem_918_krem_, 1

	.type	krem_prefixbf65689641a14b60_krem_func_krem_susan.c_krem_corner_draw_krem_1293_krem_1293_krem_,@object # @krem_prefixbf65689641a14b60_krem_func_krem_susan.c_krem_corner_draw_krem_1293_krem_1293_krem_
	.globl	krem_prefixbf65689641a14b60_krem_func_krem_susan.c_krem_corner_draw_krem_1293_krem_1293_krem_
krem_prefixbf65689641a14b60_krem_func_krem_susan.c_krem_corner_draw_krem_1293_krem_1293_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixbf65689641a14b60_krem_func_krem_susan.c_krem_corner_draw_krem_1293_krem_1293_krem_, 1

	.type	krem_prefixc1ac270e3e23b9ba_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_,@object # @krem_prefixc1ac270e3e23b9ba_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_
	.globl	krem_prefixc1ac270e3e23b9ba_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_
krem_prefixc1ac270e3e23b9ba_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixc1ac270e3e23b9ba_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_, 1

	.type	krem_prefixc4b76ceba3aac0a1_krem_func_krem_susan.c_krem_call_susan_krem_1816_krem_1816_krem_,@object # @krem_prefixc4b76ceba3aac0a1_krem_func_krem_susan.c_krem_call_susan_krem_1816_krem_1816_krem_
	.globl	krem_prefixc4b76ceba3aac0a1_krem_func_krem_susan.c_krem_call_susan_krem_1816_krem_1816_krem_
krem_prefixc4b76ceba3aac0a1_krem_func_krem_susan.c_krem_call_susan_krem_1816_krem_1816_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixc4b76ceba3aac0a1_krem_func_krem_susan.c_krem_call_susan_krem_1816_krem_1816_krem_, 1

	.type	krem_prefixcc1a2d853fc249fe_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_,@object # @krem_prefixcc1a2d853fc249fe_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_
	.globl	krem_prefixcc1a2d853fc249fe_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_
krem_prefixcc1a2d853fc249fe_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixcc1a2d853fc249fe_krem_loop_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_, 1

	.type	krem_prefixccf54e4d9a4e040d_krem_func_krem_susan.c_krem_main_krem_1910_krem_1910_krem_,@object # @krem_prefixccf54e4d9a4e040d_krem_func_krem_susan.c_krem_main_krem_1910_krem_1910_krem_
	.globl	krem_prefixccf54e4d9a4e040d_krem_func_krem_susan.c_krem_main_krem_1910_krem_1910_krem_
krem_prefixccf54e4d9a4e040d_krem_func_krem_susan.c_krem_main_krem_1910_krem_1910_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixccf54e4d9a4e040d_krem_func_krem_susan.c_krem_main_krem_1910_krem_1910_krem_, 1

	.type	krem_prefixcd25ba1a6d423e7e_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_316_krem_,@object # @krem_prefixcd25ba1a6d423e7e_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_316_krem_
	.globl	krem_prefixcd25ba1a6d423e7e_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_316_krem_
krem_prefixcd25ba1a6d423e7e_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_316_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixcd25ba1a6d423e7e_krem_loop_body_krem_susan.c_krem_getint_krem_304_krem_316_krem_, 1

	.type	krem_prefixd1f2f5c1ab57fbad_krem_loop_krem_susan.c_krem_getint_krem_304_krem_316_krem_,@object # @krem_prefixd1f2f5c1ab57fbad_krem_loop_krem_susan.c_krem_getint_krem_304_krem_316_krem_
	.globl	krem_prefixd1f2f5c1ab57fbad_krem_loop_krem_susan.c_krem_getint_krem_304_krem_316_krem_
krem_prefixd1f2f5c1ab57fbad_krem_loop_krem_susan.c_krem_getint_krem_304_krem_316_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd1f2f5c1ab57fbad_krem_loop_krem_susan.c_krem_getint_krem_304_krem_316_krem_, 1

	.type	krem_prefixd1f9d445bb96c752_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_,@object # @krem_prefixd1f9d445bb96c752_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_
	.globl	krem_prefixd1f9d445bb96c752_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_
krem_prefixd1f9d445bb96c752_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd1f9d445bb96c752_krem_loop_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_, 1

	.type	krem_prefixd2deb3c6a68c9721_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_,@object # @krem_prefixd2deb3c6a68c9721_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_
	.globl	krem_prefixd2deb3c6a68c9721_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_
krem_prefixd2deb3c6a68c9721_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd2deb3c6a68c9721_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_, 1

	.type	krem_prefixd44e0b16924fc27d_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_,@object # @krem_prefixd44e0b16924fc27d_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_
	.globl	krem_prefixd44e0b16924fc27d_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_
krem_prefixd44e0b16924fc27d_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd44e0b16924fc27d_krem_loop_body_krem_susan.c_krem_susan_thin_krem_745_krem_809_krem_, 1

	.type	krem_prefixd798ffea9040fd0d_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_,@object # @krem_prefixd798ffea9040fd0d_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_
	.globl	krem_prefixd798ffea9040fd0d_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_
krem_prefixd798ffea9040fd0d_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd798ffea9040fd0d_krem_loop_krem_susan.c_krem_enlarge_krem_556_krem_577_krem_, 1

	.type	krem_prefixd8653e26b419a2a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_,@object # @krem_prefixd8653e26b419a2a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_
	.globl	krem_prefixd8653e26b419a2a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_
krem_prefixd8653e26b419a2a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixd8653e26b419a2a0_krem_loop_body_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1685_krem_, 1

	.type	krem_prefixdadcb2ff9c2bedc1_krem_func_krem_susan.c_krem_int_to_uchar_krem_372_krem_372_krem_,@object # @krem_prefixdadcb2ff9c2bedc1_krem_func_krem_susan.c_krem_int_to_uchar_krem_372_krem_372_krem_
	.globl	krem_prefixdadcb2ff9c2bedc1_krem_func_krem_susan.c_krem_int_to_uchar_krem_372_krem_372_krem_
krem_prefixdadcb2ff9c2bedc1_krem_func_krem_susan.c_krem_int_to_uchar_krem_372_krem_372_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixdadcb2ff9c2bedc1_krem_func_krem_susan.c_krem_int_to_uchar_krem_372_krem_372_krem_, 1

	.type	krem_prefixdb129cf7c34837ee_krem_func_krem_susan.c_krem_susan_thin_krem_739_krem_739_krem_,@object # @krem_prefixdb129cf7c34837ee_krem_func_krem_susan.c_krem_susan_thin_krem_739_krem_739_krem_
	.globl	krem_prefixdb129cf7c34837ee_krem_func_krem_susan.c_krem_susan_thin_krem_739_krem_739_krem_
krem_prefixdb129cf7c34837ee_krem_func_krem_susan.c_krem_susan_thin_krem_739_krem_739_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixdb129cf7c34837ee_krem_func_krem_susan.c_krem_susan_thin_krem_739_krem_739_krem_, 1

	.type	krem_prefixdb40bdf2c826bb1d_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_,@object # @krem_prefixdb40bdf2c826bb1d_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_
	.globl	krem_prefixdb40bdf2c826bb1d_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_
krem_prefixdb40bdf2c826bb1d_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixdb40bdf2c826bb1d_krem_loop_krem_susan.c_krem_susan_corners_krem_1319_krem_1590_krem_, 1

	.type	krem_prefixdeaa5b84da7a1313_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_,@object # @krem_prefixdeaa5b84da7a1313_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_
	.globl	krem_prefixdeaa5b84da7a1313_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_
krem_prefixdeaa5b84da7a1313_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixdeaa5b84da7a1313_krem_loop_body_krem_susan.c_krem_median_krem_525_krem_544_krem_, 1

	.type	krem_prefixdf8231b698386fba_krem_func_krem_susan.c_krem_susan_edges_small_krem_1162_krem_1162_krem_,@object # @krem_prefixdf8231b698386fba_krem_func_krem_susan.c_krem_susan_edges_small_krem_1162_krem_1162_krem_
	.globl	krem_prefixdf8231b698386fba_krem_func_krem_susan.c_krem_susan_edges_small_krem_1162_krem_1162_krem_
krem_prefixdf8231b698386fba_krem_func_krem_susan.c_krem_susan_edges_small_krem_1162_krem_1162_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixdf8231b698386fba_krem_func_krem_susan.c_krem_susan_edges_small_krem_1162_krem_1162_krem_, 1

	.type	krem_prefixe05c5bf68f32ea8f_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_,@object # @krem_prefixe05c5bf68f32ea8f_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_
	.globl	krem_prefixe05c5bf68f32ea8f_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_
krem_prefixe05c5bf68f32ea8f_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe05c5bf68f32ea8f_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_, 1

	.type	krem_prefixe09ef0455d147b1a_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_,@object # @krem_prefixe09ef0455d147b1a_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_
	.globl	krem_prefixe09ef0455d147b1a_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_
krem_prefixe09ef0455d147b1a_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe09ef0455d147b1a_krem_loop_krem_susan.c_krem_susan_principle_small_krem_489_krem_517_krem_, 1

	.type	krem_prefixe12ffb08049a2060_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_,@object # @krem_prefixe12ffb08049a2060_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_
	.globl	krem_prefixe12ffb08049a2060_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_
krem_prefixe12ffb08049a2060_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe12ffb08049a2060_krem_loop_body_krem_susan.c_krem_enlarge_krem_556_krem_561_krem_, 1

	.type	krem_prefixe228adb1366040c5_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_,@object # @krem_prefixe228adb1366040c5_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_
	.globl	krem_prefixe228adb1366040c5_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_
krem_prefixe228adb1366040c5_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe228adb1366040c5_krem_loop_krem_susan.c_krem_median_krem_525_krem_544_krem_, 1

	.type	krem_prefixe3a63b321160501a_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_,@object # @krem_prefixe3a63b321160501a_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_
	.globl	krem_prefixe3a63b321160501a_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_
krem_prefixe3a63b321160501a_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe3a63b321160501a_krem_loop_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_, 1

	.type	krem_prefixe5776e12590dd2d6_krem_loop_body_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_,@object # @krem_prefixe5776e12590dd2d6_krem_loop_body_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_
	.globl	krem_prefixe5776e12590dd2d6_krem_loop_body_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_
krem_prefixe5776e12590dd2d6_krem_loop_body_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe5776e12590dd2d6_krem_loop_body_krem_susan.c_krem_corner_draw_krem_1296_krem_1310_krem_, 1

	.type	krem_prefixe7ce62e9f8a5c3ca_krem_func_krem_susan.c_krem_enlarge_krem_553_krem_553_krem_,@object # @krem_prefixe7ce62e9f8a5c3ca_krem_func_krem_susan.c_krem_enlarge_krem_553_krem_553_krem_
	.globl	krem_prefixe7ce62e9f8a5c3ca_krem_func_krem_susan.c_krem_enlarge_krem_553_krem_553_krem_
krem_prefixe7ce62e9f8a5c3ca_krem_func_krem_susan.c_krem_enlarge_krem_553_krem_553_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe7ce62e9f8a5c3ca_krem_func_krem_susan.c_krem_enlarge_krem_553_krem_553_krem_, 1

	.type	krem_prefixe89c19a1a3db32a5_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_,@object # @krem_prefixe89c19a1a3db32a5_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_
	.globl	krem_prefixe89c19a1a3db32a5_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_
krem_prefixe89c19a1a3db32a5_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixe89c19a1a3db32a5_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_388_krem_, 1

	.type	krem_prefixecf397eb0b4ddcf4_krem_func_krem_susan.c_krem_median_krem_523_krem_523_krem_,@object # @krem_prefixecf397eb0b4ddcf4_krem_func_krem_susan.c_krem_median_krem_523_krem_523_krem_
	.globl	krem_prefixecf397eb0b4ddcf4_krem_func_krem_susan.c_krem_median_krem_523_krem_523_krem_
krem_prefixecf397eb0b4ddcf4_krem_func_krem_susan.c_krem_median_krem_523_krem_523_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixecf397eb0b4ddcf4_krem_func_krem_susan.c_krem_median_krem_523_krem_523_krem_, 1

	.type	krem_prefixed286ecf2d48f89a_krem_func_krem_susan.c_krem_getint_krem_302_krem_302_krem_,@object # @krem_prefixed286ecf2d48f89a_krem_func_krem_susan.c_krem_getint_krem_302_krem_302_krem_
	.globl	krem_prefixed286ecf2d48f89a_krem_func_krem_susan.c_krem_getint_krem_302_krem_302_krem_
krem_prefixed286ecf2d48f89a_krem_func_krem_susan.c_krem_getint_krem_302_krem_302_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixed286ecf2d48f89a_krem_func_krem_susan.c_krem_getint_krem_302_krem_302_krem_, 1

	.type	krem_prefixef68ab812c11292b_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_,@object # @krem_prefixef68ab812c11292b_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_
	.globl	krem_prefixef68ab812c11292b_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_
krem_prefixef68ab812c11292b_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixef68ab812c11292b_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1165_krem_1285_krem_, 1

	.type	krem_prefixf1a250f1a13404d0_krem_func_krem_susan.c_krem_susan_principle_small_krem_486_krem_486_krem_,@object # @krem_prefixf1a250f1a13404d0_krem_func_krem_susan.c_krem_susan_principle_small_krem_486_krem_486_krem_
	.globl	krem_prefixf1a250f1a13404d0_krem_func_krem_susan.c_krem_susan_principle_small_krem_486_krem_486_krem_
krem_prefixf1a250f1a13404d0_krem_func_krem_susan.c_krem_susan_principle_small_krem_486_krem_486_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf1a250f1a13404d0_krem_func_krem_susan.c_krem_susan_principle_small_krem_486_krem_486_krem_, 1

	.type	krem_prefixf22115b3efe218cf_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_,@object # @krem_prefixf22115b3efe218cf_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_
	.globl	krem_prefixf22115b3efe218cf_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_
krem_prefixf22115b3efe218cf_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf22115b3efe218cf_krem_loop_body_krem_susan.c_krem_susan_corners_krem_1319_krem_1482_krem_, 1

	.type	krem_prefixf4bd4e56bdf9f90d_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_,@object # @krem_prefixf4bd4e56bdf9f90d_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_
	.globl	krem_prefixf4bd4e56bdf9f90d_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_
krem_prefixf4bd4e56bdf9f90d_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf4bd4e56bdf9f90d_krem_loop_body_krem_susan.c_krem_int_to_uchar_krem_374_krem_381_krem_, 1

	.type	krem_prefixf6a1662b7ad62183_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_,@object # @krem_prefixf6a1662b7ad62183_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_
	.globl	krem_prefixf6a1662b7ad62183_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_
krem_prefixf6a1662b7ad62183_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf6a1662b7ad62183_krem_loop_body_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_, 1

	.type	krem_prefixf82b347d311ee136_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_,@object # @krem_prefixf82b347d311ee136_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_
	.globl	krem_prefixf82b347d311ee136_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_
krem_prefixf82b347d311ee136_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf82b347d311ee136_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_700_krem_, 1

	.type	krem_prefixf8b879748e30781a_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_,@object # @krem_prefixf8b879748e30781a_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_
	.globl	krem_prefixf8b879748e30781a_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_
krem_prefixf8b879748e30781a_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf8b879748e30781a_krem_loop_krem_susan.c_krem_susan_edges_krem_932_krem_996_krem_, 1

	.type	krem_prefixf9a8e4e6c90dc82b_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_,@object # @krem_prefixf9a8e4e6c90dc82b_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_
	.globl	krem_prefixf9a8e4e6c90dc82b_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_
krem_prefixf9a8e4e6c90dc82b_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixf9a8e4e6c90dc82b_krem_loop_krem_susan.c_krem_susan_corners_quick_krem_1602_krem_1807_krem_, 1

	.type	krem_prefixfc1053313fd12388_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_,@object # @krem_prefixfc1053313fd12388_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_
	.globl	krem_prefixfc1053313fd12388_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_
krem_prefixfc1053313fd12388_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixfc1053313fd12388_krem_loop_body_krem_susan.c_krem_susan_smoothing_krem_592_krem_635_krem_, 1

	.type	krem_prefixfcd6fb75f75bf761_krem_func_krem_susan.c_krem_setup_brightness_lut_krem_393_krem_393_krem_,@object # @krem_prefixfcd6fb75f75bf761_krem_func_krem_susan.c_krem_setup_brightness_lut_krem_393_krem_393_krem_
	.globl	krem_prefixfcd6fb75f75bf761_krem_func_krem_susan.c_krem_setup_brightness_lut_krem_393_krem_393_krem_
krem_prefixfcd6fb75f75bf761_krem_func_krem_susan.c_krem_setup_brightness_lut_krem_393_krem_393_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixfcd6fb75f75bf761_krem_func_krem_susan.c_krem_setup_brightness_lut_krem_393_krem_393_krem_, 1

	.type	krem_prefixfdca72ddbf7f0264_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_,@object # @krem_prefixfdca72ddbf7f0264_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_
	.globl	krem_prefixfdca72ddbf7f0264_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_
krem_prefixfdca72ddbf7f0264_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixfdca72ddbf7f0264_krem_loop_body_krem_susan.c_krem_susan_edges_krem_931_krem_1154_krem_, 1

	.type	krem_prefixfdcc5a422d601ee3_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_,@object # @krem_prefixfdcc5a422d601ee3_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_
	.globl	krem_prefixfdcc5a422d601ee3_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_
krem_prefixfdcc5a422d601ee3_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_:
	.byte	0                       # 0x0
	.size	krem_prefixfdcc5a422d601ee3_krem_loop_body_krem_susan.c_krem_susan_edges_small_krem_1166_krem_1195_krem_, 1

	.text
.Ldebug_end0:
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 3.6.1 (tags/RELEASE_361/final)"
.Linfo_string1:
	.asciz	"susan.c"
.Linfo_string2:
	.asciz	"/home/patmos/github/bachelor_project_HLS/candidates/tacle-bench/sequential/susan"
.Linfo_string3:
	.asciz	"WCCSEEK_SET"
.Linfo_string4:
	.asciz	"WCCSEEK_CUR"
.Linfo_string5:
	.asciz	"WCCSEEK_END"
.Linfo_string6:
	.asciz	"_Origin_"
.Linfo_string7:
	.asciz	"unsigned char"
.Linfo_string8:
	.asciz	"uchar"
.Linfo_string9:
	.asciz	"int"
.Linfo_string10:
	.asciz	"float"
.Linfo_string11:
	.asciz	"char"
.Linfo_string12:
	.asciz	"exit_error"
.Linfo_string13:
	.asciz	"getint"
.Linfo_string14:
	.asciz	"get_image"
.Linfo_string15:
	.asciz	"put_image"
.Linfo_string16:
	.asciz	"int_to_uchar"
.Linfo_string17:
	.asciz	"setup_brightness_lut"
.Linfo_string18:
	.asciz	"susan_principle"
.Linfo_string19:
	.asciz	"susan_principle_small"
.Linfo_string20:
	.asciz	"median"
.Linfo_string21:
	.asciz	"enlarge"
.Linfo_string22:
	.asciz	"susan_smoothing"
.Linfo_string23:
	.asciz	"edge_draw"
.Linfo_string24:
	.asciz	"susan_thin"
.Linfo_string25:
	.asciz	"susan_edges"
.Linfo_string26:
	.asciz	"susan_edges_small"
.Linfo_string27:
	.asciz	"corner_draw"
.Linfo_string28:
	.asciz	"susan_corners"
.Linfo_string29:
	.asciz	"susan_corners_quick"
.Linfo_string30:
	.asciz	"call_susan"
.Linfo_string31:
	.asciz	"main"
.Linfo_string32:
	.asciz	"dummy"
.Linfo_string33:
	.asciz	"sizetype"
.Linfo_string34:
	.asciz	"fd"
.Linfo_string35:
	.asciz	"data"
.Linfo_string36:
	.asciz	"size"
.Linfo_string37:
	.asciz	"long unsigned int"
.Linfo_string38:
	.asciz	"cur_pos"
.Linfo_string39:
	.asciz	"unsigned int"
.Linfo_string40:
	.asciz	"wccFILE"
.Linfo_string41:
	.asciz	"c"
.Linfo_string42:
	.asciz	"i"
.Linfo_string43:
	.asciz	"header"
.Linfo_string44:
	.asciz	"in"
.Linfo_string45:
	.asciz	"x_size"
.Linfo_string46:
	.asciz	"y_size"
.Linfo_string47:
	.asciz	"r"
.Linfo_string48:
	.asciz	"max_r"
.Linfo_string49:
	.asciz	"bp"
.Linfo_string50:
	.asciz	"thresh"
.Linfo_string51:
	.asciz	"form"
.Linfo_string52:
	.asciz	"k"
.Linfo_string53:
	.asciz	"temp"
.Linfo_string54:
	.asciz	"max_no"
.Linfo_string55:
	.asciz	"j"
.Linfo_string56:
	.asciz	"n"
.Linfo_string57:
	.asciz	"p"
.Linfo_string58:
	.asciz	"l"
.Linfo_string59:
	.asciz	"tmp"
.Linfo_string60:
	.asciz	"tmp_image"
.Linfo_string61:
	.asciz	"border"
.Linfo_string62:
	.asciz	"three_by_three"
.Linfo_string63:
	.asciz	"dt"
.Linfo_string64:
	.asciz	"out"
.Linfo_string65:
	.asciz	"mask_size"
.Linfo_string66:
	.asciz	"total"
.Linfo_string67:
	.asciz	"TOTAL_TYPE"
.Linfo_string68:
	.asciz	"n_max"
.Linfo_string69:
	.asciz	"area"
.Linfo_string70:
	.asciz	"dp"
.Linfo_string71:
	.asciz	"dpt"
.Linfo_string72:
	.asciz	"y"
.Linfo_string73:
	.asciz	"x"
.Linfo_string74:
	.asciz	"increment"
.Linfo_string75:
	.asciz	"ip"
.Linfo_string76:
	.asciz	"brightness"
.Linfo_string77:
	.asciz	"centre"
.Linfo_string78:
	.asciz	"mid"
.Linfo_string79:
	.asciz	"drawing_mode"
.Linfo_string80:
	.asciz	"midp"
.Linfo_string81:
	.asciz	"inp"
.Linfo_string82:
	.asciz	"mp"
.Linfo_string83:
	.asciz	"m"
.Linfo_string84:
	.asciz	"p1"
.Linfo_string85:
	.asciz	"p2"
.Linfo_string86:
	.asciz	"p3"
.Linfo_string87:
	.asciz	"p4"
.Linfo_string88:
	.asciz	"z"
.Linfo_string89:
	.asciz	"do_symmetry"
.Linfo_string90:
	.asciz	"w"
.Linfo_string91:
	.asciz	"a"
.Linfo_string92:
	.asciz	"b"
.Linfo_string93:
	.asciz	"corner_list"
.Linfo_string94:
	.asciz	"info"
.Linfo_string95:
	.asciz	"dx"
.Linfo_string96:
	.asciz	"dy"
.Linfo_string97:
	.asciz	"I"
.Linfo_string98:
	.asciz	"cgx"
.Linfo_string99:
	.asciz	"cgy"
.Linfo_string100:
	.asciz	"xx"
.Linfo_string101:
	.asciz	"yy"
.Linfo_string102:
	.asciz	"sq"
.Linfo_string103:
	.asciz	"divide"
.Linfo_string104:
	.asciz	"CORNER_LIST"
.Linfo_string105:
	.asciz	"inputFile"
.Linfo_string106:
	.asciz	"mode"
.Linfo_string107:
	.asciz	"max_no_edges"
.Linfo_string108:
	.asciz	"max_no_corners"
.Linfo_string109:
	.asciz	"susan_quick"
.Linfo_string110:
	.asciz	"thin_post_proc"
.Linfo_string111:
	.asciz	"principle"
.Linfo_string112:
	.asciz	"bt"
.Linfo_string113:
	.asciz	"argindex"
.Linfo_string114:
	.asciz	"file"
	.section	.debug_info,"",@progbits
.L.debug_info_begin0:
	.long	3885                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.Lsection_abbrev        # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0xf26 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.long	.Lline_table_start0     # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.long	.Lfunc_end19-.Lfunc_begin1 # DW_AT_high_pc
	.byte	2                       # Abbrev [2] 0x2a:0x1b DW_TAG_enumeration_type
	.long	.Linfo_string6          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	1                       # DW_AT_decl_file
	.byte	4                       # DW_AT_decl_line
	.byte	3                       # Abbrev [3] 0x32:0x6 DW_TAG_enumerator
	.long	.Linfo_string3          # DW_AT_name
	.byte	0                       # DW_AT_const_value
	.byte	3                       # Abbrev [3] 0x38:0x6 DW_TAG_enumerator
	.long	.Linfo_string4          # DW_AT_name
	.byte	1                       # DW_AT_const_value
	.byte	3                       # Abbrev [3] 0x3e:0x6 DW_TAG_enumerator
	.long	.Linfo_string5          # DW_AT_name
	.byte	2                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0x45:0x5 DW_TAG_pointer_type
	.long	74                      # DW_AT_type
	.byte	5                       # Abbrev [5] 0x4a:0xc DW_TAG_typedef
	.long	86                      # DW_AT_type
	.long	.Linfo_string8          # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	289                     # DW_AT_decl_line
	.byte	6                       # Abbrev [6] 0x56:0x7 DW_TAG_base_type
	.long	.Linfo_string7          # DW_AT_name
	.byte	8                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	6                       # Abbrev [6] 0x5d:0x7 DW_TAG_base_type
	.long	.Linfo_string9          # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	4                       # Abbrev [4] 0x64:0x5 DW_TAG_pointer_type
	.long	86                      # DW_AT_type
	.byte	6                       # Abbrev [6] 0x69:0x7 DW_TAG_base_type
	.long	.Linfo_string10         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	4                       # Abbrev [4] 0x70:0x5 DW_TAG_pointer_type
	.long	117                     # DW_AT_type
	.byte	6                       # Abbrev [6] 0x75:0x7 DW_TAG_base_type
	.long	.Linfo_string11         # DW_AT_name
	.byte	6                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	7                       # Abbrev [7] 0x7c:0x5c DW_TAG_subprogram
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.long	.Lfunc_end1-.Lfunc_begin1 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string13         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	302                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	93                      # DW_AT_type
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x96:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc0            # DW_AT_location
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	302                     # DW_AT_decl_line
	.long	3647                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0xa6:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\300\261\177"
	.long	.Linfo_string32         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.long	3627                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0xb7:0x10 DW_TAG_variable
	.long	.Ldebug_loc1            # DW_AT_location
	.long	.Linfo_string41         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	304                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xc7:0x10 DW_TAG_variable
	.long	.Ldebug_loc2            # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	304                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xd8:0x67 DW_TAG_subprogram
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.long	.Lfunc_end2-.Lfunc_begin2 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string14         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	333                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0xee:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc3            # DW_AT_location
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	333                     # DW_AT_decl_line
	.long	3647                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0xfe:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc4            # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	334                     # DW_AT_decl_line
	.long	3723                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0x10e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc5            # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	334                     # DW_AT_decl_line
	.long	3728                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0x11e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc6            # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	334                     # DW_AT_decl_line
	.long	3728                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x12e:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\360~"
	.long	.Linfo_string43         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	336                     # DW_AT_decl_line
	.long	3711                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x13f:0x54 DW_TAG_subprogram
	.quad	.Lfunc_begin3           # DW_AT_low_pc
	.long	.Lfunc_end3-.Lfunc_begin3 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string15         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	361                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x155:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc7            # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	361                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x165:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc8            # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	361                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x175:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc9            # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	361                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x185:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	363                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x193:0x63 DW_TAG_subprogram
	.quad	.Lfunc_begin4           # DW_AT_low_pc
	.long	.Lfunc_end4-.Lfunc_begin4 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string16         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	372                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x1a9:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc10           # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	372                     # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0x1b9:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc11           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	372                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x1c9:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc12           # DW_AT_location
	.long	.Linfo_string36         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	372                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x1d9:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	374                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1e6:0xf DW_TAG_variable
	.byte	2                       # DW_AT_location
	.byte	145
	.byte	84
	.long	.Linfo_string48         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	374                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x1f6:0x65 DW_TAG_subprogram
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.long	.Lfunc_end5-.Lfunc_begin5 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string17         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	393                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x20c:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc13           # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	393                     # DW_AT_decl_line
	.long	3733                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0x21c:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc14           # DW_AT_location
	.long	.Linfo_string50         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	393                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x22c:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc15           # DW_AT_location
	.long	.Linfo_string51         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	393                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x23c:0xe DW_TAG_variable
	.ascii	"\200~"                 # DW_AT_const_value
	.long	.Linfo_string52         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	395                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x24a:0x10 DW_TAG_variable
	.long	.Ldebug_loc16           # DW_AT_location
	.long	.Linfo_string53         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	396                     # DW_AT_decl_line
	.long	105                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x25b:0xa1 DW_TAG_subprogram
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.long	.Lfunc_end6-.Lfunc_begin6 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string18         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	413                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x271:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc17           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	413                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x281:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc18           # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	413                     # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0x291:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc19           # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	413                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x2a1:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc20           # DW_AT_location
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	414                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x2b1:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc21           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	414                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x2c1:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc22           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	414                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x2d1:0xd DW_TAG_variable
	.byte	3                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	416                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x2de:0xd DW_TAG_variable
	.byte	3                       # DW_AT_const_value
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	416                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x2eb:0x10 DW_TAG_variable
	.long	.Ldebug_loc23           # DW_AT_location
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	416                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x2fc:0xa1 DW_TAG_subprogram
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.long	.Lfunc_end7-.Lfunc_begin7 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string19         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	486                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x312:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc24           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	486                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x322:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc25           # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	486                     # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0x332:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc26           # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	486                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x342:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc27           # DW_AT_location
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	487                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x352:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc28           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	487                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x362:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc29           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	487                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x372:0xd DW_TAG_variable
	.byte	1                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	489                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x37f:0xd DW_TAG_variable
	.byte	1                       # DW_AT_const_value
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	489                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x38c:0x10 DW_TAG_variable
	.long	.Ldebug_loc30           # DW_AT_location
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	489                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	7                       # Abbrev [7] 0x39d:0x98 DW_TAG_subprogram
	.quad	.Lfunc_begin8           # DW_AT_low_pc
	.long	.Lfunc_end8-.Lfunc_begin8 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string20         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	523                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	74                      # DW_AT_type
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x3b7:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc31           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	523                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x3c7:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc32           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	523                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x3d7:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc33           # DW_AT_location
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	523                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x3e7:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc34           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	523                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x3f7:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\260\177"
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	525                     # DW_AT_decl_line
	.long	3738                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x407:0x10 DW_TAG_variable
	.long	.Ldebug_loc35           # DW_AT_location
	.long	.Linfo_string52         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	525                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x417:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string58         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	525                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x424:0x10 DW_TAG_variable
	.long	.Ldebug_loc36           # DW_AT_location
	.long	.Linfo_string59         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	525                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x435:0x87 DW_TAG_subprogram
	.quad	.Lfunc_begin9           # DW_AT_low_pc
	.long	.Lfunc_end9-.Lfunc_begin9 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string21         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	553                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x44b:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc37           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	553                     # DW_AT_decl_line
	.long	3733                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0x45b:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc38           # DW_AT_location
	.long	.Linfo_string60         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	553                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x46b:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc39           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	554                     # DW_AT_decl_line
	.long	3728                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0x47b:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc40           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	554                     # DW_AT_decl_line
	.long	3728                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0x48b:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc41           # DW_AT_location
	.long	.Linfo_string61         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	554                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x49b:0x10 DW_TAG_variable
	.long	.Ldebug_loc42           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	556                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x4ab:0x10 DW_TAG_variable
	.long	.Ldebug_loc43           # DW_AT_location
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	556                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x4bc:0x197 DW_TAG_subprogram
	.quad	.Lfunc_begin10          # DW_AT_low_pc
	.long	.Lfunc_end10-.Lfunc_begin10 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string22         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	587                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x4d2:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc44           # DW_AT_location
	.long	.Linfo_string62         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	587                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x4e2:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc45           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	587                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x4f2:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc46           # DW_AT_location
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	587                     # DW_AT_decl_line
	.long	105                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0x502:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc47           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	588                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x512:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc48           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	588                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x522:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc49           # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	588                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x532:0x10 DW_TAG_variable
	.long	.Ldebug_loc50           # DW_AT_location
	.long	.Linfo_string64         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	593                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x542:0x10 DW_TAG_variable
	.long	.Ldebug_loc51           # DW_AT_location
	.long	.Linfo_string65         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	591                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x552:0x10 DW_TAG_variable
	.long	.Ldebug_loc52           # DW_AT_location
	.long	.Linfo_string66         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	595                     # DW_AT_decl_line
	.long	3750                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x562:0x10 DW_TAG_variable
	.long	.Ldebug_loc53           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x572:0x10 DW_TAG_variable
	.long	.Ldebug_loc54           # DW_AT_location
	.long	.Linfo_string68         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	591                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x582:0x10 DW_TAG_variable
	.long	.Ldebug_loc55           # DW_AT_location
	.long	.Linfo_string60         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	594                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x592:0x10 DW_TAG_variable
	.long	.Ldebug_loc56           # DW_AT_location
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x5a2:0x10 DW_TAG_variable
	.long	.Ldebug_loc57           # DW_AT_location
	.long	.Linfo_string69         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x5b2:0x10 DW_TAG_variable
	.long	.Ldebug_loc58           # DW_AT_location
	.long	.Linfo_string70         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	593                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x5c2:0x10 DW_TAG_variable
	.long	.Ldebug_loc59           # DW_AT_location
	.long	.Linfo_string71         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	593                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x5d2:0x10 DW_TAG_variable
	.long	.Ldebug_loc60           # DW_AT_location
	.long	.Linfo_string53         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	590                     # DW_AT_decl_line
	.long	105                     # DW_AT_type
	.byte	10                      # Abbrev [10] 0x5e2:0x10 DW_TAG_variable
	.long	.Ldebug_loc61           # DW_AT_location
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x5f2:0x10 DW_TAG_variable
	.long	.Ldebug_loc62           # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x602:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\350~"
	.long	.Linfo_string74         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	591                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x612:0x10 DW_TAG_variable
	.long	.Ldebug_loc63           # DW_AT_location
	.long	.Linfo_string75         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	593                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x622:0x10 DW_TAG_variable
	.long	.Ldebug_loc64           # DW_AT_location
	.long	.Linfo_string76         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x632:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\200\177"
	.long	.Linfo_string59         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x642:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\210\177"
	.long	.Linfo_string77         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x653:0x94 DW_TAG_subprogram
	.quad	.Lfunc_begin11          # DW_AT_low_pc
	.long	.Lfunc_end11-.Lfunc_begin11 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	707                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x669:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc65           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	707                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x679:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc66           # DW_AT_location
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	707                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x689:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc67           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	708                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x699:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc68           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	708                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x6a9:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc69           # DW_AT_location
	.long	.Linfo_string79         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	708                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x6b9:0x10 DW_TAG_variable
	.long	.Ldebug_loc70           # DW_AT_location
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	711                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x6c9:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	710                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x6d6:0x10 DW_TAG_variable
	.long	.Ldebug_loc71           # DW_AT_location
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	711                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x6e7:0x101 DW_TAG_subprogram
	.quad	.Lfunc_begin12          # DW_AT_low_pc
	.long	.Lfunc_end12-.Lfunc_begin12 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	739                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x6fd:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc72           # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	739                     # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0x70d:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc73           # DW_AT_location
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	739                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x71d:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc74           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	739                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x72d:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc75           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	739                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x73d:0x10 DW_TAG_variable
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\260\177"
	.long	.Linfo_string58         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	741                     # DW_AT_decl_line
	.long	3762                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x74d:0x10 DW_TAG_variable
	.long	.Ldebug_loc76           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	745                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x75d:0x10 DW_TAG_variable
	.long	.Ldebug_loc77           # DW_AT_location
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	745                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x76d:0x10 DW_TAG_variable
	.long	.Ldebug_loc78           # DW_AT_location
	.long	.Linfo_string82         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	746                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x77d:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	745                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x78a:0x10 DW_TAG_variable
	.long	.Ldebug_loc79           # DW_AT_location
	.long	.Linfo_string83         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	745                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0x79a:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	745                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x7a7:0x10 DW_TAG_variable
	.long	.Ldebug_loc80           # DW_AT_location
	.long	.Linfo_string84         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	743                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x7b7:0x10 DW_TAG_variable
	.long	.Ldebug_loc81           # DW_AT_location
	.long	.Linfo_string85         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	743                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x7c7:0x10 DW_TAG_variable
	.long	.Ldebug_loc82           # DW_AT_location
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	743                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x7d7:0x10 DW_TAG_variable
	.long	.Ldebug_loc83           # DW_AT_location
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	743                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x7e8:0x137 DW_TAG_subprogram
	.quad	.Lfunc_begin13          # DW_AT_low_pc
	.long	.Lfunc_end13-.Lfunc_begin13 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	928                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x7fe:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc84           # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	928                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x80e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc85           # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	928                     # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0x81e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc86           # DW_AT_location
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	928                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x82e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc87           # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	928                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x83e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc88           # DW_AT_location
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	929                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x84e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc89           # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	929                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x85e:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc90           # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	929                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x86e:0x10 DW_TAG_variable
	.long	.Ldebug_loc91           # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x87e:0x10 DW_TAG_variable
	.long	.Ldebug_loc92           # DW_AT_location
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x88e:0x10 DW_TAG_variable
	.long	.Ldebug_loc93           # DW_AT_location
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x89e:0x10 DW_TAG_variable
	.long	.Ldebug_loc94           # DW_AT_location
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x8ae:0x10 DW_TAG_variable
	.long	.Ldebug_loc95           # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x8be:0x10 DW_TAG_variable
	.long	.Ldebug_loc96           # DW_AT_location
	.long	.Linfo_string88         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	931                     # DW_AT_decl_line
	.long	105                     # DW_AT_type
	.byte	10                      # Abbrev [10] 0x8ce:0x10 DW_TAG_variable
	.long	.Ldebug_loc97           # DW_AT_location
	.long	.Linfo_string89         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x8de:0x10 DW_TAG_variable
	.long	.Ldebug_loc98           # DW_AT_location
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	933                     # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x8ee:0x10 DW_TAG_variable
	.long	.Ldebug_loc99           # DW_AT_location
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x8fe:0x10 DW_TAG_variable
	.long	.Ldebug_loc100          # DW_AT_location
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x90e:0x10 DW_TAG_variable
	.long	.Ldebug_loc101          # DW_AT_location
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	932                     # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0x91f:0x137 DW_TAG_subprogram
	.quad	.Lfunc_begin14          # DW_AT_low_pc
	.long	.Lfunc_end14-.Lfunc_begin14 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string26         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1162                    # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0x935:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc102          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1162                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x945:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc103          # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1162                    # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0x955:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc104          # DW_AT_location
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1162                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x965:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc105          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1162                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x975:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc106          # DW_AT_location
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1163                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x985:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc107          # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1163                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0x995:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc108          # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1163                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x9a5:0x10 DW_TAG_variable
	.long	.Ldebug_loc109          # DW_AT_location
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x9b5:0x10 DW_TAG_variable
	.long	.Ldebug_loc110          # DW_AT_location
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x9c5:0x10 DW_TAG_variable
	.long	.Ldebug_loc111          # DW_AT_location
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x9d5:0x10 DW_TAG_variable
	.long	.Ldebug_loc112          # DW_AT_location
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x9e5:0x10 DW_TAG_variable
	.long	.Ldebug_loc113          # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x9f5:0x10 DW_TAG_variable
	.long	.Ldebug_loc114          # DW_AT_location
	.long	.Linfo_string88         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1165                    # DW_AT_decl_line
	.long	105                     # DW_AT_type
	.byte	10                      # Abbrev [10] 0xa05:0x10 DW_TAG_variable
	.long	.Ldebug_loc115          # DW_AT_location
	.long	.Linfo_string89         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xa15:0x10 DW_TAG_variable
	.long	.Ldebug_loc116          # DW_AT_location
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1167                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xa25:0x10 DW_TAG_variable
	.long	.Ldebug_loc117          # DW_AT_location
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xa35:0x10 DW_TAG_variable
	.long	.Ldebug_loc118          # DW_AT_location
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xa45:0x10 DW_TAG_variable
	.long	.Ldebug_loc119          # DW_AT_location
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1166                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xa56:0x74 DW_TAG_subprogram
	.quad	.Lfunc_begin15          # DW_AT_low_pc
	.long	.Lfunc_end15-.Lfunc_begin15 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string27         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1293                    # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0xa6c:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc120          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1293                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0xa7c:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc121          # DW_AT_location
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1293                    # DW_AT_decl_line
	.long	3774                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0xa8c:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc122          # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1294                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0xa9c:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc123          # DW_AT_location
	.long	.Linfo_string79         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1294                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xaac:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1297                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xab9:0x10 DW_TAG_variable
	.long	.Ldebug_loc124          # DW_AT_location
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1296                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xaca:0x130 DW_TAG_subprogram
	.quad	.Lfunc_begin16          # DW_AT_low_pc
	.long	.Lfunc_end16-.Lfunc_begin16 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string28         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1316                    # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0xae0:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc125          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1316                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0xaf0:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc126          # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1316                    # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0xb00:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc127          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1316                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0xb10:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc128          # DW_AT_location
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1317                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0xb20:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc129          # DW_AT_location
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1317                    # DW_AT_decl_line
	.long	3774                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0xb30:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc130          # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1317                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	13                      # Abbrev [13] 0xb40:0xf DW_TAG_formal_parameter
	.byte	2                       # DW_AT_location
	.byte	145
	.byte	16
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1317                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xb4f:0x10 DW_TAG_variable
	.long	.Ldebug_loc131          # DW_AT_location
	.long	.Linfo_string98         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1323                    # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	12                      # Abbrev [12] 0xb5f:0xd DW_TAG_variable
	.byte	5                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1320                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xb6c:0x10 DW_TAG_variable
	.long	.Ldebug_loc132          # DW_AT_location
	.long	.Linfo_string99         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1323                    # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	12                      # Abbrev [12] 0xb7c:0xd DW_TAG_variable
	.byte	5                       # DW_AT_const_value
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1320                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xb89:0x10 DW_TAG_variable
	.long	.Ldebug_loc133          # DW_AT_location
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1319                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xb99:0x10 DW_TAG_variable
	.long	.Ldebug_loc134          # DW_AT_location
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1319                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xba9:0x10 DW_TAG_variable
	.long	.Ldebug_loc135          # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1319                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xbb9:0x10 DW_TAG_variable
	.long	.Ldebug_loc136          # DW_AT_location
	.long	.Linfo_string100        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1319                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xbc9:0x10 DW_TAG_variable
	.long	.Ldebug_loc137          # DW_AT_location
	.long	.Linfo_string101        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1319                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xbd9:0x10 DW_TAG_variable
	.long	.Ldebug_loc138          # DW_AT_location
	.long	.Linfo_string102        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1319                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xbe9:0x10 DW_TAG_variable
	.long	.Ldebug_loc139          # DW_AT_location
	.long	.Linfo_string103        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1321                    # DW_AT_decl_line
	.long	105                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xbfa:0xd0 DW_TAG_subprogram
	.quad	.Lfunc_begin17          # DW_AT_low_pc
	.long	.Lfunc_end17-.Lfunc_begin17 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string29         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1599                    # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0xc10:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc140          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1599                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0xc20:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc141          # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1599                    # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	8                       # Abbrev [8] 0xc30:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc142          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1599                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0xc40:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc143          # DW_AT_location
	.long	.Linfo_string54         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1600                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	8                       # Abbrev [8] 0xc50:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc144          # DW_AT_location
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1600                    # DW_AT_decl_line
	.long	3774                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0xc60:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc145          # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1600                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	13                      # Abbrev [13] 0xc70:0xf DW_TAG_formal_parameter
	.byte	2                       # DW_AT_location
	.byte	145
	.byte	16
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1600                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xc7f:0xd DW_TAG_variable
	.byte	7                       # DW_AT_const_value
	.long	.Linfo_string42         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1602                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xc8c:0xd DW_TAG_variable
	.byte	7                       # DW_AT_const_value
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1602                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xc99:0x10 DW_TAG_variable
	.long	.Ldebug_loc146          # DW_AT_location
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1602                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xca9:0x10 DW_TAG_variable
	.long	.Ldebug_loc147          # DW_AT_location
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1602                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xcb9:0x10 DW_TAG_variable
	.long	.Ldebug_loc148          # DW_AT_location
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1602                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xcca:0x12e DW_TAG_subprogram
	.quad	.Lfunc_begin18          # DW_AT_low_pc
	.long	.Lfunc_end18-.Lfunc_begin18 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string30         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1816                    # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	8                       # Abbrev [8] 0xce0:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc149          # DW_AT_location
	.long	.Linfo_string105        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1816                    # DW_AT_decl_line
	.long	3647                    # DW_AT_type
	.byte	8                       # Abbrev [8] 0xcf0:0x10 DW_TAG_formal_parameter
	.long	.Ldebug_loc150          # DW_AT_location
	.long	.Linfo_string106        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1816                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0xd00:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\200\203j"
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1831                    # DW_AT_decl_line
	.long	3863                    # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd11:0xd DW_TAG_variable
	.byte	50                      # DW_AT_const_value
	.long	.Linfo_string107        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1828                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd1e:0xd DW_TAG_variable
	.byte	50                      # DW_AT_const_value
	.long	.Linfo_string108        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1827                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd2b:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string109        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1826                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd38:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string79         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1825                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd45:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string62         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1824                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd52:0xd DW_TAG_variable
	.byte	1                       # DW_AT_const_value
	.long	.Linfo_string110        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1823                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd5f:0xd DW_TAG_variable
	.byte	0                       # DW_AT_const_value
	.long	.Linfo_string111        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1822                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd6c:0xd DW_TAG_variable
	.byte	20                      # DW_AT_const_value
	.long	.Linfo_string112        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1821                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	12                      # Abbrev [12] 0xd79:0xd DW_TAG_variable
	.byte	3                       # DW_AT_const_value
	.long	.Linfo_string113        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1820                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	14                      # Abbrev [14] 0xd86:0x11 DW_TAG_variable
	.byte	4                       # DW_AT_const_value
	.byte	0
	.byte	0
	.byte	128
	.byte	64
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1819                    # DW_AT_decl_line
	.long	105                     # DW_AT_type
	.byte	10                      # Abbrev [10] 0xd97:0x10 DW_TAG_variable
	.long	.Ldebug_loc151          # DW_AT_location
	.long	.Linfo_string44         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1818                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xda7:0x10 DW_TAG_variable
	.long	.Ldebug_loc152          # DW_AT_location
	.long	.Linfo_string45         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1829                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xdb7:0x10 DW_TAG_variable
	.long	.Ldebug_loc153          # DW_AT_location
	.long	.Linfo_string46         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1829                    # DW_AT_decl_line
	.long	93                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xdc7:0x10 DW_TAG_variable
	.long	.Ldebug_loc154          # DW_AT_location
	.long	.Linfo_string47         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1830                    # DW_AT_decl_line
	.long	112                     # DW_AT_type
	.byte	10                      # Abbrev [10] 0xdd7:0x10 DW_TAG_variable
	.long	.Ldebug_loc155          # DW_AT_location
	.long	.Linfo_string49         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1818                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0xde7:0x10 DW_TAG_variable
	.long	.Ldebug_loc156          # DW_AT_location
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1818                    # DW_AT_decl_line
	.long	69                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	7                       # Abbrev [7] 0xdf8:0x2b DW_TAG_subprogram
	.quad	.Lfunc_begin19          # DW_AT_low_pc
	.long	.Lfunc_end19-.Lfunc_begin19 # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1910                    # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	93                      # DW_AT_type
                                        # DW_AT_external
	.byte	10                      # Abbrev [10] 0xe12:0x10 DW_TAG_variable
	.long	.Ldebug_loc157          # DW_AT_location
	.long	.Linfo_string114        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	1912                    # DW_AT_decl_line
	.long	3652                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	15                      # Abbrev [15] 0xe23:0x8 DW_TAG_subprogram
	.long	.Linfo_string12         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	294                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	16                      # Abbrev [16] 0xe2b:0xd DW_TAG_array_type
	.long	117                     # DW_AT_type
	.byte	17                      # Abbrev [17] 0xe30:0x7 DW_TAG_subrange_type
	.long	3640                    # DW_AT_type
	.short	10000                   # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	18                      # Abbrev [18] 0xe38:0x7 DW_TAG_base_type
	.long	.Linfo_string33         # DW_AT_name
	.byte	8                       # DW_AT_byte_size
	.byte	7                       # DW_AT_encoding
	.byte	4                       # Abbrev [4] 0xe3f:0x5 DW_TAG_pointer_type
	.long	3652                    # DW_AT_type
	.byte	19                      # Abbrev [19] 0xe44:0x2d DW_TAG_structure_type
	.long	.Linfo_string40         # DW_AT_name
	.byte	24                      # DW_AT_byte_size
	.byte	1                       # DW_AT_decl_file
	.byte	10                      # DW_AT_decl_line
	.byte	20                      # Abbrev [20] 0xe4c:0xc DW_TAG_member
	.long	.Linfo_string35         # DW_AT_name
	.long	112                     # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	20                      # Abbrev [20] 0xe58:0xc DW_TAG_member
	.long	.Linfo_string36         # DW_AT_name
	.long	3697                    # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	12                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	20                      # Abbrev [20] 0xe64:0xc DW_TAG_member
	.long	.Linfo_string38         # DW_AT_name
	.long	3704                    # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	13                      # DW_AT_decl_line
	.byte	16                      # DW_AT_data_member_location
	.byte	0                       # End Of Children Mark
	.byte	6                       # Abbrev [6] 0xe71:0x7 DW_TAG_base_type
	.long	.Linfo_string37         # DW_AT_name
	.byte	7                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	6                       # Abbrev [6] 0xe78:0x7 DW_TAG_base_type
	.long	.Linfo_string39         # DW_AT_name
	.byte	7                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	16                      # Abbrev [16] 0xe7f:0xc DW_TAG_array_type
	.long	117                     # DW_AT_type
	.byte	21                      # Abbrev [21] 0xe84:0x6 DW_TAG_subrange_type
	.long	3640                    # DW_AT_type
	.byte	100                     # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0xe8b:0x5 DW_TAG_pointer_type
	.long	100                     # DW_AT_type
	.byte	4                       # Abbrev [4] 0xe90:0x5 DW_TAG_pointer_type
	.long	93                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0xe95:0x5 DW_TAG_pointer_type
	.long	69                      # DW_AT_type
	.byte	16                      # Abbrev [16] 0xe9a:0xc DW_TAG_array_type
	.long	93                      # DW_AT_type
	.byte	21                      # Abbrev [21] 0xe9f:0x6 DW_TAG_subrange_type
	.long	3640                    # DW_AT_type
	.byte	8                       # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	5                       # Abbrev [5] 0xea6:0xc DW_TAG_typedef
	.long	93                      # DW_AT_type
	.long	.Linfo_string67         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	279                     # DW_AT_decl_line
	.byte	16                      # Abbrev [16] 0xeb2:0xc DW_TAG_array_type
	.long	93                      # DW_AT_type
	.byte	21                      # Abbrev [21] 0xeb7:0x6 DW_TAG_subrange_type
	.long	3640                    # DW_AT_type
	.byte	9                       # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0xebe:0x5 DW_TAG_pointer_type
	.long	3779                    # DW_AT_type
	.byte	22                      # Abbrev [22] 0xec3:0x54 DW_TAG_structure_type
	.byte	24                      # DW_AT_byte_size
	.byte	2                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.byte	23                      # Abbrev [23] 0xec8:0xd DW_TAG_member
	.long	.Linfo_string73         # DW_AT_name
	.long	93                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	23                      # Abbrev [23] 0xed5:0xd DW_TAG_member
	.long	.Linfo_string72         # DW_AT_name
	.long	93                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	23                      # Abbrev [23] 0xee2:0xd DW_TAG_member
	.long	.Linfo_string94         # DW_AT_name
	.long	93                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	23                      # Abbrev [23] 0xeef:0xd DW_TAG_member
	.long	.Linfo_string95         # DW_AT_name
	.long	93                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.byte	12                      # DW_AT_data_member_location
	.byte	23                      # Abbrev [23] 0xefc:0xd DW_TAG_member
	.long	.Linfo_string96         # DW_AT_name
	.long	93                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.byte	16                      # DW_AT_data_member_location
	.byte	23                      # Abbrev [23] 0xf09:0xd DW_TAG_member
	.long	.Linfo_string97         # DW_AT_name
	.long	93                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.byte	20                      # DW_AT_data_member_location
	.byte	0                       # End Of Children Mark
	.byte	5                       # Abbrev [5] 0xf17:0xc DW_TAG_typedef
	.long	3875                    # DW_AT_type
	.long	.Linfo_string104        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	290                     # DW_AT_decl_line
	.byte	16                      # Abbrev [16] 0xf23:0xd DW_TAG_array_type
	.long	3779                    # DW_AT_type
	.byte	17                      # Abbrev [17] 0xf28:0x7 DW_TAG_subrange_type
	.long	3640                    # DW_AT_type
	.short	15000                   # DW_AT_count
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.section	.debug_abbrev,"",@progbits
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	4                       # DW_TAG_enumeration_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	40                      # DW_TAG_enumerator
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	22                      # DW_TAG_typedef
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	64                      # DW_AT_frame_base
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	6                       # DW_FORM_data4
	.byte	64                      # DW_AT_frame_base
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	2                       # DW_AT_location
	.byte	24                      # DW_FORM_exprloc
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	28                      # DW_AT_const_value
	.byte	10                      # DW_FORM_block1
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	55                      # DW_AT_count
	.byte	5                       # DW_FORM_data2
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	20                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	21                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	55                      # DW_AT_count
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	22                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	23                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
	.section	.debug_ranges,"",@progbits
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin1-.Lfunc_begin1
	.quad	.Ltmp13-.Lfunc_begin1
	.short	.Ltmp2083-.Ltmp2082     # Loc expr size
.Ltmp2082:
	.byte	85                      # DW_OP_reg5
.Ltmp2083:
	.quad	.Ltmp13-.Lfunc_begin1
	.quad	.Ltmp15-.Lfunc_begin1
	.short	.Ltmp2085-.Ltmp2084     # Loc expr size
.Ltmp2084:
	.byte	83                      # DW_OP_reg3
.Ltmp2085:
	.quad	.Ltmp15-.Lfunc_begin1
	.quad	.Lfunc_end1-.Lfunc_begin1
	.short	.Ltmp2087-.Ltmp2086     # Loc expr size
.Ltmp2086:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\261\177"          # -10056
.Ltmp2087:
	.quad	0
	.quad	0
.Ldebug_loc1:
	.quad	.Ltmp16-.Lfunc_begin1
	.quad	.Ltmp17-.Lfunc_begin1
	.short	.Ltmp2089-.Ltmp2088     # Loc expr size
.Ltmp2088:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2089:
	.quad	.Ltmp19-.Lfunc_begin1
	.quad	.Ltmp20-.Lfunc_begin1
	.short	.Ltmp2091-.Ltmp2090     # Loc expr size
.Ltmp2090:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2091:
	.quad	.Ltmp30-.Lfunc_begin1
	.quad	.Ltmp34-.Lfunc_begin1
	.short	.Ltmp2093-.Ltmp2092     # Loc expr size
.Ltmp2092:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2093:
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Ltmp27-.Lfunc_begin1
	.quad	.Ltmp29-.Lfunc_begin1
	.short	.Ltmp2095-.Ltmp2094     # Loc expr size
.Ltmp2094:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2095:
	.quad	.Ltmp29-.Lfunc_begin1
	.quad	.Ltmp32-.Lfunc_begin1
	.short	.Ltmp2097-.Ltmp2096     # Loc expr size
.Ltmp2096:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2097:
	.quad	.Ltmp32-.Lfunc_begin1
	.quad	.Ltmp33-.Lfunc_begin1
	.short	.Ltmp2099-.Ltmp2098     # Loc expr size
.Ltmp2098:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\261\177"          # -10064
.Ltmp2099:
	.quad	.Ltmp33-.Lfunc_begin1
	.quad	.Ltmp36-.Lfunc_begin1
	.short	.Ltmp2101-.Ltmp2100     # Loc expr size
.Ltmp2100:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2101:
	.quad	.Ltmp37-.Lfunc_begin1
	.quad	.Ltmp38-.Lfunc_begin1
	.short	.Ltmp2103-.Ltmp2102     # Loc expr size
.Ltmp2102:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2103:
	.quad	0
	.quad	0
.Ldebug_loc3:
	.quad	.Lfunc_begin2-.Lfunc_begin1
	.quad	.Ltmp52-.Lfunc_begin1
	.short	.Ltmp2105-.Ltmp2104     # Loc expr size
.Ltmp2104:
	.byte	85                      # DW_OP_reg5
.Ltmp2105:
	.quad	.Ltmp52-.Lfunc_begin1
	.quad	.Ltmp65-.Lfunc_begin1
	.short	.Ltmp2107-.Ltmp2106     # Loc expr size
.Ltmp2106:
	.byte	95                      # DW_OP_reg15
.Ltmp2107:
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Lfunc_begin2-.Lfunc_begin1
	.quad	.Ltmp51-.Lfunc_begin1
	.short	.Ltmp2109-.Ltmp2108     # Loc expr size
.Ltmp2108:
	.byte	84                      # DW_OP_reg4
.Ltmp2109:
	.quad	.Ltmp51-.Lfunc_begin1
	.quad	.Ltmp60-.Lfunc_begin1
	.short	.Ltmp2111-.Ltmp2110     # Loc expr size
.Ltmp2110:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp2111:
	.quad	.Ltmp60-.Lfunc_begin1
	.quad	.Ltmp63-.Lfunc_begin1
	.short	.Ltmp2113-.Ltmp2112     # Loc expr size
.Ltmp2112:
	.byte	83                      # DW_OP_reg3
.Ltmp2113:
	.quad	0
	.quad	0
.Ldebug_loc5:
	.quad	.Lfunc_begin2-.Lfunc_begin1
	.quad	.Ltmp50-.Lfunc_begin1
	.short	.Ltmp2115-.Ltmp2114     # Loc expr size
.Ltmp2114:
	.byte	81                      # DW_OP_reg1
.Ltmp2115:
	.quad	.Ltmp50-.Lfunc_begin1
	.quad	.Ltmp62-.Lfunc_begin1
	.short	.Ltmp2117-.Ltmp2116     # Loc expr size
.Ltmp2116:
	.byte	93                      # DW_OP_reg13
.Ltmp2117:
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin2-.Lfunc_begin1
	.quad	.Ltmp49-.Lfunc_begin1
	.short	.Ltmp2119-.Ltmp2118     # Loc expr size
.Ltmp2118:
	.byte	82                      # DW_OP_reg2
.Ltmp2119:
	.quad	.Ltmp49-.Lfunc_begin1
	.quad	.Ltmp59-.Lfunc_begin1
	.short	.Ltmp2121-.Ltmp2120     # Loc expr size
.Ltmp2120:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340~"                 # -160
.Ltmp2121:
	.quad	.Ltmp59-.Lfunc_begin1
	.quad	.Ltmp65-.Lfunc_begin1
	.short	.Ltmp2123-.Ltmp2122     # Loc expr size
.Ltmp2122:
	.byte	92                      # DW_OP_reg12
.Ltmp2123:
	.quad	0
	.quad	0
.Ldebug_loc7:
	.quad	.Lfunc_begin3-.Lfunc_begin1
	.quad	.Ltmp80-.Lfunc_begin1
	.short	.Ltmp2125-.Ltmp2124     # Loc expr size
.Ltmp2124:
	.byte	85                      # DW_OP_reg5
.Ltmp2125:
	.quad	.Ltmp85-.Lfunc_begin1
	.quad	.Ltmp87-.Lfunc_begin1
	.short	.Ltmp2127-.Ltmp2126     # Loc expr size
.Ltmp2126:
	.byte	85                      # DW_OP_reg5
.Ltmp2127:
	.quad	.Ltmp88-.Lfunc_begin1
	.quad	.Ltmp89-.Lfunc_begin1
	.short	.Ltmp2129-.Ltmp2128     # Loc expr size
.Ltmp2128:
	.byte	85                      # DW_OP_reg5
.Ltmp2129:
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Lfunc_begin3-.Lfunc_begin1
	.quad	.Ltmp79-.Lfunc_begin1
	.short	.Ltmp2131-.Ltmp2130     # Loc expr size
.Ltmp2130:
	.byte	84                      # super-register DW_OP_reg4
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2131:
	.quad	.Ltmp79-.Lfunc_begin1
	.quad	.Ltmp83-.Lfunc_begin1
	.short	.Ltmp2133-.Ltmp2132     # Loc expr size
.Ltmp2132:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2133:
	.quad	0
	.quad	0
.Ldebug_loc9:
	.quad	.Lfunc_begin3-.Lfunc_begin1
	.quad	.Ltmp78-.Lfunc_begin1
	.short	.Ltmp2135-.Ltmp2134     # Loc expr size
.Ltmp2134:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2135:
	.quad	.Ltmp78-.Lfunc_begin1
	.quad	.Ltmp85-.Lfunc_begin1
	.short	.Ltmp2137-.Ltmp2136     # Loc expr size
.Ltmp2136:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2137:
	.quad	0
	.quad	0
.Ldebug_loc10:
	.quad	.Lfunc_begin4-.Lfunc_begin1
	.quad	.Ltmp101-.Lfunc_begin1
	.short	.Ltmp2139-.Ltmp2138     # Loc expr size
.Ltmp2138:
	.byte	85                      # DW_OP_reg5
.Ltmp2139:
	.quad	.Ltmp101-.Lfunc_begin1
	.quad	.Ltmp123-.Lfunc_begin1
	.short	.Ltmp2141-.Ltmp2140     # Loc expr size
.Ltmp2140:
	.byte	93                      # DW_OP_reg13
.Ltmp2141:
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Lfunc_begin4-.Lfunc_begin1
	.quad	.Ltmp100-.Lfunc_begin1
	.short	.Ltmp2143-.Ltmp2142     # Loc expr size
.Ltmp2142:
	.byte	84                      # DW_OP_reg4
.Ltmp2143:
	.quad	.Ltmp100-.Lfunc_begin1
	.quad	.Ltmp120-.Lfunc_begin1
	.short	.Ltmp2145-.Ltmp2144     # Loc expr size
.Ltmp2144:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2145:
	.quad	.Ltmp120-.Lfunc_begin1
	.quad	.Ltmp123-.Lfunc_begin1
	.short	.Ltmp2147-.Ltmp2146     # Loc expr size
.Ltmp2146:
	.byte	92                      # DW_OP_reg12
.Ltmp2147:
	.quad	0
	.quad	0
.Ldebug_loc12:
	.quad	.Lfunc_begin4-.Lfunc_begin1
	.quad	.Ltmp99-.Lfunc_begin1
	.short	.Ltmp2149-.Ltmp2148     # Loc expr size
.Ltmp2148:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2149:
	.quad	.Ltmp99-.Lfunc_begin1
	.quad	.Ltmp104-.Lfunc_begin1
	.short	.Ltmp2151-.Ltmp2150     # Loc expr size
.Ltmp2150:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2151:
	.quad	.Ltmp104-.Lfunc_begin1
	.quad	.Lfunc_end4-.Lfunc_begin1
	.short	.Ltmp2153-.Ltmp2152     # Loc expr size
.Ltmp2152:
	.byte	118                     # DW_OP_breg6
	.ascii	"\274\177"              # -68
.Ltmp2153:
	.quad	0
	.quad	0
.Ldebug_loc13:
	.quad	.Lfunc_begin5-.Lfunc_begin1
	.quad	.Ltmp138-.Lfunc_begin1
	.short	.Ltmp2155-.Ltmp2154     # Loc expr size
.Ltmp2154:
	.byte	85                      # DW_OP_reg5
.Ltmp2155:
	.quad	.Ltmp138-.Lfunc_begin1
	.quad	.Ltmp140-.Lfunc_begin1
	.short	.Ltmp2157-.Ltmp2156     # Loc expr size
.Ltmp2156:
	.byte	94                      # DW_OP_reg14
.Ltmp2157:
	.quad	.Ltmp140-.Lfunc_begin1
	.quad	.Ltmp151-.Lfunc_begin1
	.short	.Ltmp2159-.Ltmp2158     # Loc expr size
.Ltmp2158:
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
.Ltmp2159:
	.quad	.Ltmp151-.Lfunc_begin1
	.quad	.Ltmp152-.Lfunc_begin1
	.short	.Ltmp2161-.Ltmp2160     # Loc expr size
.Ltmp2160:
	.byte	83                      # DW_OP_reg3
.Ltmp2161:
	.quad	.Ltmp152-.Lfunc_begin1
	.quad	.Ltmp160-.Lfunc_begin1
	.short	.Ltmp2163-.Ltmp2162     # Loc expr size
.Ltmp2162:
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
.Ltmp2163:
	.quad	.Ltmp160-.Lfunc_begin1
	.quad	.Ltmp161-.Lfunc_begin1
	.short	.Ltmp2165-.Ltmp2164     # Loc expr size
.Ltmp2164:
	.byte	83                      # DW_OP_reg3
.Ltmp2165:
	.quad	.Ltmp161-.Lfunc_begin1
	.quad	.Lfunc_end5-.Lfunc_begin1
	.short	.Ltmp2167-.Ltmp2166     # Loc expr size
.Ltmp2166:
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
.Ltmp2167:
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Lfunc_begin5-.Lfunc_begin1
	.quad	.Ltmp137-.Lfunc_begin1
	.short	.Ltmp2169-.Ltmp2168     # Loc expr size
.Ltmp2168:
	.byte	84                      # super-register DW_OP_reg4
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2169:
	.quad	.Ltmp137-.Lfunc_begin1
	.quad	.Ltmp142-.Lfunc_begin1
	.short	.Ltmp2171-.Ltmp2170     # Loc expr size
.Ltmp2170:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2171:
	.quad	0
	.quad	0
.Ldebug_loc15:
	.quad	.Lfunc_begin5-.Lfunc_begin1
	.quad	.Ltmp136-.Lfunc_begin1
	.short	.Ltmp2173-.Ltmp2172     # Loc expr size
.Ltmp2172:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2173:
	.quad	.Ltmp136-.Lfunc_begin1
	.quad	.Lfunc_end5-.Lfunc_begin1
	.short	.Ltmp2175-.Ltmp2174     # Loc expr size
.Ltmp2174:
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
.Ltmp2175:
	.quad	0
	.quad	0
.Ldebug_loc16:
	.quad	.Ltmp143-.Lfunc_begin1
	.quad	.Ltmp144-.Lfunc_begin1
	.short	.Ltmp2177-.Ltmp2176     # Loc expr size
.Ltmp2176:
	.byte	97                      # DW_OP_reg17
.Ltmp2177:
	.quad	.Ltmp145-.Lfunc_begin1
	.quad	.Ltmp146-.Lfunc_begin1
	.short	.Ltmp2179-.Ltmp2178     # Loc expr size
.Ltmp2178:
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
.Ltmp2179:
	.quad	.Ltmp146-.Lfunc_begin1
	.quad	.Ltmp147-.Lfunc_begin1
	.short	.Ltmp2181-.Ltmp2180     # Loc expr size
.Ltmp2180:
	.byte	98                      # DW_OP_reg18
.Ltmp2181:
	.quad	.Ltmp147-.Lfunc_begin1
	.quad	.Ltmp148-.Lfunc_begin1
	.short	.Ltmp2183-.Ltmp2182     # Loc expr size
.Ltmp2182:
	.byte	97                      # DW_OP_reg17
.Ltmp2183:
	.quad	.Ltmp148-.Lfunc_begin1
	.quad	.Ltmp150-.Lfunc_begin1
	.short	.Ltmp2185-.Ltmp2184     # Loc expr size
.Ltmp2184:
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
.Ltmp2185:
	.quad	.Ltmp150-.Lfunc_begin1
	.quad	.Ltmp154-.Lfunc_begin1
	.short	.Ltmp2187-.Ltmp2186     # Loc expr size
.Ltmp2186:
	.byte	97                      # DW_OP_reg17
.Ltmp2187:
	.quad	.Ltmp156-.Lfunc_begin1
	.quad	.Ltmp157-.Lfunc_begin1
	.short	.Ltmp2189-.Ltmp2188     # Loc expr size
.Ltmp2188:
	.byte	97                      # DW_OP_reg17
.Ltmp2189:
	.quad	.Ltmp158-.Lfunc_begin1
	.quad	.Ltmp159-.Lfunc_begin1
	.short	.Ltmp2191-.Ltmp2190     # Loc expr size
.Ltmp2190:
	.byte	118                     # DW_OP_breg6
	.byte	84                      # -44
.Ltmp2191:
	.quad	.Ltmp159-.Lfunc_begin1
	.quad	.Ltmp163-.Lfunc_begin1
	.short	.Ltmp2193-.Ltmp2192     # Loc expr size
.Ltmp2192:
	.byte	97                      # DW_OP_reg17
.Ltmp2193:
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Lfunc_begin6-.Lfunc_begin1
	.quad	.Ltmp179-.Lfunc_begin1
	.short	.Ltmp2195-.Ltmp2194     # Loc expr size
.Ltmp2194:
	.byte	85                      # DW_OP_reg5
.Ltmp2195:
	.quad	.Ltmp179-.Lfunc_begin1
	.quad	.Ltmp186-.Lfunc_begin1
	.short	.Ltmp2197-.Ltmp2196     # Loc expr size
.Ltmp2196:
	.byte	94                      # DW_OP_reg14
.Ltmp2197:
	.quad	.Ltmp186-.Lfunc_begin1
	.quad	.Ltmp193-.Lfunc_begin1
	.short	.Ltmp2199-.Ltmp2198     # Loc expr size
.Ltmp2198:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200~"                 # -256
.Ltmp2199:
	.quad	.Ltmp193-.Lfunc_begin1
	.quad	.Ltmp195-.Lfunc_begin1
	.short	.Ltmp2201-.Ltmp2200     # Loc expr size
.Ltmp2200:
	.byte	94                      # DW_OP_reg14
.Ltmp2201:
	.quad	.Ltmp195-.Lfunc_begin1
	.quad	.Lfunc_end6-.Lfunc_begin1
	.short	.Ltmp2203-.Ltmp2202     # Loc expr size
.Ltmp2202:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200~"                 # -256
.Ltmp2203:
	.quad	0
	.quad	0
.Ldebug_loc18:
	.quad	.Lfunc_begin6-.Lfunc_begin1
	.quad	.Ltmp178-.Lfunc_begin1
	.short	.Ltmp2205-.Ltmp2204     # Loc expr size
.Ltmp2204:
	.byte	84                      # DW_OP_reg4
.Ltmp2205:
	.quad	.Ltmp178-.Lfunc_begin1
	.quad	.Ltmp185-.Lfunc_begin1
	.short	.Ltmp2207-.Ltmp2206     # Loc expr size
.Ltmp2206:
	.byte	92                      # DW_OP_reg12
.Ltmp2207:
	.quad	0
	.quad	0
.Ldebug_loc19:
	.quad	.Lfunc_begin6-.Lfunc_begin1
	.quad	.Ltmp177-.Lfunc_begin1
	.short	.Ltmp2209-.Ltmp2208     # Loc expr size
.Ltmp2208:
	.byte	81                      # DW_OP_reg1
.Ltmp2209:
	.quad	.Ltmp177-.Lfunc_begin1
	.quad	.Ltmp194-.Lfunc_begin1
	.short	.Ltmp2211-.Ltmp2210     # Loc expr size
.Ltmp2210:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320}"                 # -304
.Ltmp2211:
	.quad	.Ltmp194-.Lfunc_begin1
	.quad	.Ltmp196-.Lfunc_begin1
	.short	.Ltmp2213-.Ltmp2212     # Loc expr size
.Ltmp2212:
	.byte	92                      # DW_OP_reg12
.Ltmp2213:
	.quad	.Ltmp196-.Lfunc_begin1
	.quad	.Lfunc_end6-.Lfunc_begin1
	.short	.Ltmp2215-.Ltmp2214     # Loc expr size
.Ltmp2214:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320}"                 # -304
.Ltmp2215:
	.quad	0
	.quad	0
.Ldebug_loc20:
	.quad	.Lfunc_begin6-.Lfunc_begin1
	.quad	.Ltmp176-.Lfunc_begin1
	.short	.Ltmp2217-.Ltmp2216     # Loc expr size
.Ltmp2216:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2217:
	.quad	.Ltmp176-.Lfunc_begin1
	.quad	.Lfunc_end6-.Lfunc_begin1
	.short	.Ltmp2219-.Ltmp2218     # Loc expr size
.Ltmp2218:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220~"                 # -240
.Ltmp2219:
	.quad	0
	.quad	0
.Ldebug_loc21:
	.quad	.Lfunc_begin6-.Lfunc_begin1
	.quad	.Ltmp175-.Lfunc_begin1
	.short	.Ltmp2221-.Ltmp2220     # Loc expr size
.Ltmp2220:
	.byte	88                      # super-register DW_OP_reg8
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2221:
	.quad	.Ltmp175-.Lfunc_begin1
	.quad	.Ltmp187-.Lfunc_begin1
	.short	.Ltmp2223-.Ltmp2222     # Loc expr size
.Ltmp2222:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2223:
	.quad	0
	.quad	0
.Ldebug_loc22:
	.quad	.Lfunc_begin6-.Lfunc_begin1
	.quad	.Ltmp174-.Lfunc_begin1
	.short	.Ltmp2225-.Ltmp2224     # Loc expr size
.Ltmp2224:
	.byte	89                      # super-register DW_OP_reg9
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2225:
	.quad	.Ltmp174-.Lfunc_begin1
	.quad	.Ltmp183-.Lfunc_begin1
	.short	.Ltmp2227-.Ltmp2226     # Loc expr size
.Ltmp2226:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2227:
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Ltmp191-.Lfunc_begin1
	.quad	.Ltmp197-.Lfunc_begin1
	.short	.Ltmp2229-.Ltmp2228     # Loc expr size
.Ltmp2228:
	.byte	17                      # DW_OP_consts
	.asciz	"\344"                  # 100
	.byte	159                     # DW_OP_stack_value
.Ltmp2229:
	.quad	.Ltmp197-.Lfunc_begin1
	.quad	.Ltmp200-.Lfunc_begin1
	.short	.Ltmp2231-.Ltmp2230     # Loc expr size
.Ltmp2230:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2231:
	.quad	0
	.quad	0
.Ldebug_loc24:
	.quad	.Lfunc_begin7-.Lfunc_begin1
	.quad	.Ltmp216-.Lfunc_begin1
	.short	.Ltmp2233-.Ltmp2232     # Loc expr size
.Ltmp2232:
	.byte	85                      # DW_OP_reg5
.Ltmp2233:
	.quad	.Ltmp216-.Lfunc_begin1
	.quad	.Ltmp225-.Lfunc_begin1
	.short	.Ltmp2235-.Ltmp2234     # Loc expr size
.Ltmp2234:
	.byte	94                      # DW_OP_reg14
.Ltmp2235:
	.quad	.Ltmp225-.Lfunc_begin1
	.quad	.Ltmp232-.Lfunc_begin1
	.short	.Ltmp2237-.Ltmp2236     # Loc expr size
.Ltmp2236:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2237:
	.quad	.Ltmp232-.Lfunc_begin1
	.quad	.Ltmp234-.Lfunc_begin1
	.short	.Ltmp2239-.Ltmp2238     # Loc expr size
.Ltmp2238:
	.byte	93                      # DW_OP_reg13
.Ltmp2239:
	.quad	.Ltmp234-.Lfunc_begin1
	.quad	.Lfunc_end7-.Lfunc_begin1
	.short	.Ltmp2241-.Ltmp2240     # Loc expr size
.Ltmp2240:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2241:
	.quad	0
	.quad	0
.Ldebug_loc25:
	.quad	.Lfunc_begin7-.Lfunc_begin1
	.quad	.Ltmp215-.Lfunc_begin1
	.short	.Ltmp2243-.Ltmp2242     # Loc expr size
.Ltmp2242:
	.byte	84                      # DW_OP_reg4
.Ltmp2243:
	.quad	.Ltmp215-.Lfunc_begin1
	.quad	.Ltmp224-.Lfunc_begin1
	.short	.Ltmp2245-.Ltmp2244     # Loc expr size
.Ltmp2244:
	.byte	92                      # DW_OP_reg12
.Ltmp2245:
	.quad	0
	.quad	0
.Ldebug_loc26:
	.quad	.Lfunc_begin7-.Lfunc_begin1
	.quad	.Ltmp214-.Lfunc_begin1
	.short	.Ltmp2247-.Ltmp2246     # Loc expr size
.Ltmp2246:
	.byte	81                      # DW_OP_reg1
.Ltmp2247:
	.quad	.Ltmp214-.Lfunc_begin1
	.quad	.Ltmp233-.Lfunc_begin1
	.short	.Ltmp2249-.Ltmp2248     # Loc expr size
.Ltmp2248:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp2249:
	.quad	.Ltmp233-.Lfunc_begin1
	.quad	.Ltmp235-.Lfunc_begin1
	.short	.Ltmp2251-.Ltmp2250     # Loc expr size
.Ltmp2250:
	.byte	92                      # DW_OP_reg12
.Ltmp2251:
	.quad	.Ltmp235-.Lfunc_begin1
	.quad	.Lfunc_end7-.Lfunc_begin1
	.short	.Ltmp2253-.Ltmp2252     # Loc expr size
.Ltmp2252:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp2253:
	.quad	0
	.quad	0
.Ldebug_loc27:
	.quad	.Lfunc_begin7-.Lfunc_begin1
	.quad	.Ltmp213-.Lfunc_begin1
	.short	.Ltmp2255-.Ltmp2254     # Loc expr size
.Ltmp2254:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2255:
	.quad	.Ltmp213-.Lfunc_begin1
	.quad	.Lfunc_end7-.Lfunc_begin1
	.short	.Ltmp2257-.Ltmp2256     # Loc expr size
.Ltmp2256:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2257:
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Lfunc_begin7-.Lfunc_begin1
	.quad	.Ltmp212-.Lfunc_begin1
	.short	.Ltmp2259-.Ltmp2258     # Loc expr size
.Ltmp2258:
	.byte	88                      # super-register DW_OP_reg8
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2259:
	.quad	.Ltmp212-.Lfunc_begin1
	.quad	.Ltmp223-.Lfunc_begin1
	.short	.Ltmp2261-.Ltmp2260     # Loc expr size
.Ltmp2260:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2261:
	.quad	0
	.quad	0
.Ldebug_loc29:
	.quad	.Lfunc_begin7-.Lfunc_begin1
	.quad	.Ltmp211-.Lfunc_begin1
	.short	.Ltmp2263-.Ltmp2262     # Loc expr size
.Ltmp2262:
	.byte	89                      # super-register DW_OP_reg9
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2263:
	.quad	.Ltmp211-.Lfunc_begin1
	.quad	.Ltmp220-.Lfunc_begin1
	.short	.Ltmp2265-.Ltmp2264     # Loc expr size
.Ltmp2264:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2265:
	.quad	0
	.quad	0
.Ldebug_loc30:
	.quad	.Ltmp230-.Lfunc_begin1
	.quad	.Ltmp236-.Lfunc_begin1
	.short	.Ltmp2267-.Ltmp2266     # Loc expr size
.Ltmp2266:
	.byte	17                      # DW_OP_consts
	.asciz	"\344"                  # 100
	.byte	159                     # DW_OP_stack_value
.Ltmp2267:
	.quad	.Ltmp236-.Lfunc_begin1
	.quad	.Ltmp239-.Lfunc_begin1
	.short	.Ltmp2269-.Ltmp2268     # Loc expr size
.Ltmp2268:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2269:
	.quad	0
	.quad	0
.Ldebug_loc31:
	.quad	.Lfunc_begin8-.Lfunc_begin1
	.quad	.Ltmp253-.Lfunc_begin1
	.short	.Ltmp2271-.Ltmp2270     # Loc expr size
.Ltmp2270:
	.byte	85                      # DW_OP_reg5
.Ltmp2271:
	.quad	.Ltmp253-.Lfunc_begin1
	.quad	.Ltmp260-.Lfunc_begin1
	.short	.Ltmp2273-.Ltmp2272     # Loc expr size
.Ltmp2272:
	.byte	93                      # DW_OP_reg13
.Ltmp2273:
	.quad	0
	.quad	0
.Ldebug_loc32:
	.quad	.Lfunc_begin8-.Lfunc_begin1
	.quad	.Ltmp252-.Lfunc_begin1
	.short	.Ltmp2275-.Ltmp2274     # Loc expr size
.Ltmp2274:
	.byte	84                      # super-register DW_OP_reg4
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2275:
	.quad	.Ltmp252-.Lfunc_begin1
	.quad	.Ltmp258-.Lfunc_begin1
	.short	.Ltmp2277-.Ltmp2276     # Loc expr size
.Ltmp2276:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2277:
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Lfunc_begin8-.Lfunc_begin1
	.quad	.Ltmp251-.Lfunc_begin1
	.short	.Ltmp2279-.Ltmp2278     # Loc expr size
.Ltmp2278:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2279:
	.quad	.Ltmp251-.Lfunc_begin1
	.quad	.Ltmp256-.Lfunc_begin1
	.short	.Ltmp2281-.Ltmp2280     # Loc expr size
.Ltmp2280:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2281:
	.quad	.Ltmp256-.Lfunc_begin1
	.quad	.Lfunc_end8-.Lfunc_begin1
	.short	.Ltmp2283-.Ltmp2282     # Loc expr size
.Ltmp2282:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244\177"              # -92
.Ltmp2283:
	.quad	0
	.quad	0
.Ldebug_loc34:
	.quad	.Lfunc_begin8-.Lfunc_begin1
	.quad	.Ltmp250-.Lfunc_begin1
	.short	.Ltmp2285-.Ltmp2284     # Loc expr size
.Ltmp2284:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2285:
	.quad	.Ltmp250-.Lfunc_begin1
	.quad	.Ltmp255-.Lfunc_begin1
	.short	.Ltmp2287-.Ltmp2286     # Loc expr size
.Ltmp2286:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2287:
	.quad	.Ltmp255-.Lfunc_begin1
	.quad	.Ltmp257-.Lfunc_begin1
	.short	.Ltmp2289-.Ltmp2288     # Loc expr size
.Ltmp2288:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240\177"              # -96
.Ltmp2289:
	.quad	.Ltmp257-.Lfunc_begin1
	.quad	.Ltmp261-.Lfunc_begin1
	.short	.Ltmp2291-.Ltmp2290     # Loc expr size
.Ltmp2290:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2291:
	.quad	0
	.quad	0
.Ldebug_loc35:
	.quad	.Ltmp259-.Lfunc_begin1
	.quad	.Ltmp264-.Lfunc_begin1
	.short	.Ltmp2293-.Ltmp2292     # Loc expr size
.Ltmp2292:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2293:
	.quad	.Ltmp264-.Lfunc_begin1
	.quad	.Ltmp265-.Lfunc_begin1
	.short	.Ltmp2295-.Ltmp2294     # Loc expr size
.Ltmp2294:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2295:
	.quad	.Ltmp265-.Lfunc_begin1
	.quad	.Lfunc_end8-.Lfunc_begin1
	.short	.Ltmp2297-.Ltmp2296     # Loc expr size
.Ltmp2296:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2297:
	.quad	0
	.quad	0
.Ldebug_loc36:
	.quad	.Ltmp271-.Lfunc_begin1
	.quad	.Ltmp272-.Lfunc_begin1
	.short	.Ltmp2299-.Ltmp2298     # Loc expr size
.Ltmp2298:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2299:
	.quad	0
	.quad	0
.Ldebug_loc37:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Ltmp288-.Lfunc_begin1
	.short	.Ltmp2301-.Ltmp2300     # Loc expr size
.Ltmp2300:
	.byte	85                      # DW_OP_reg5
.Ltmp2301:
	.quad	.Ltmp288-.Lfunc_begin1
	.quad	.Ltmp288-.Lfunc_begin1
	.short	.Ltmp2303-.Ltmp2302     # Loc expr size
.Ltmp2302:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"              # -128
.Ltmp2303:
	.quad	.Ltmp292-.Lfunc_begin1
	.quad	.Ltmp296-.Lfunc_begin1
	.short	.Ltmp2305-.Ltmp2304     # Loc expr size
.Ltmp2304:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"              # -128
.Ltmp2305:
	.quad	.Ltmp296-.Lfunc_begin1
	.quad	.Ltmp297-.Lfunc_begin1
	.short	.Ltmp2307-.Ltmp2306     # Loc expr size
.Ltmp2306:
	.byte	83                      # DW_OP_reg3
.Ltmp2307:
	.quad	.Ltmp297-.Lfunc_begin1
	.quad	.Ltmp314-.Lfunc_begin1
	.short	.Ltmp2309-.Ltmp2308     # Loc expr size
.Ltmp2308:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"              # -128
.Ltmp2309:
	.quad	.Ltmp314-.Lfunc_begin1
	.quad	.Ltmp317-.Lfunc_begin1
	.short	.Ltmp2311-.Ltmp2310     # Loc expr size
.Ltmp2310:
	.byte	92                      # DW_OP_reg12
.Ltmp2311:
	.quad	.Ltmp317-.Lfunc_begin1
	.quad	.Ltmp351-.Lfunc_begin1
	.short	.Ltmp2313-.Ltmp2312     # Loc expr size
.Ltmp2312:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"              # -128
.Ltmp2313:
	.quad	.Ltmp351-.Lfunc_begin1
	.quad	.Ltmp352-.Lfunc_begin1
	.short	.Ltmp2315-.Ltmp2314     # Loc expr size
.Ltmp2314:
	.byte	83                      # DW_OP_reg3
.Ltmp2315:
	.quad	0
	.quad	0
.Ldebug_loc38:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Ltmp287-.Lfunc_begin1
	.short	.Ltmp2317-.Ltmp2316     # Loc expr size
.Ltmp2316:
	.byte	84                      # DW_OP_reg4
.Ltmp2317:
	.quad	.Ltmp287-.Lfunc_begin1
	.quad	.Ltmp287-.Lfunc_begin1
	.short	.Ltmp2319-.Ltmp2318     # Loc expr size
.Ltmp2318:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp2319:
	.quad	.Ltmp292-.Lfunc_begin1
	.quad	.Ltmp294-.Lfunc_begin1
	.short	.Ltmp2321-.Ltmp2320     # Loc expr size
.Ltmp2320:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp2321:
	.quad	.Ltmp294-.Lfunc_begin1
	.quad	.Ltmp301-.Lfunc_begin1
	.short	.Ltmp2323-.Ltmp2322     # Loc expr size
.Ltmp2322:
	.byte	80                      # DW_OP_reg0
.Ltmp2323:
	.quad	.Ltmp305-.Lfunc_begin1
	.quad	.Ltmp330-.Lfunc_begin1
	.short	.Ltmp2325-.Ltmp2324     # Loc expr size
.Ltmp2324:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp2325:
	.quad	.Ltmp330-.Lfunc_begin1
	.quad	.Ltmp353-.Lfunc_begin1
	.short	.Ltmp2327-.Ltmp2326     # Loc expr size
.Ltmp2326:
	.byte	94                      # DW_OP_reg14
.Ltmp2327:
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Ltmp286-.Lfunc_begin1
	.short	.Ltmp2329-.Ltmp2328     # Loc expr size
.Ltmp2328:
	.byte	81                      # DW_OP_reg1
.Ltmp2329:
	.quad	.Ltmp286-.Lfunc_begin1
	.quad	.Ltmp295-.Lfunc_begin1
	.short	.Ltmp2331-.Ltmp2330     # Loc expr size
.Ltmp2330:
	.byte	83                      # DW_OP_reg3
.Ltmp2331:
	.quad	.Ltmp295-.Lfunc_begin1
	.quad	.Ltmp299-.Lfunc_begin1
	.short	.Ltmp2333-.Ltmp2332     # Loc expr size
.Ltmp2332:
	.byte	93                      # DW_OP_reg13
.Ltmp2333:
	.quad	.Ltmp299-.Lfunc_begin1
	.quad	.Ltmp306-.Lfunc_begin1
	.short	.Ltmp2335-.Ltmp2334     # Loc expr size
.Ltmp2334:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp2335:
	.quad	.Ltmp306-.Lfunc_begin1
	.quad	.Ltmp310-.Lfunc_begin1
	.short	.Ltmp2337-.Ltmp2336     # Loc expr size
.Ltmp2336:
	.byte	83                      # DW_OP_reg3
.Ltmp2337:
	.quad	.Ltmp310-.Lfunc_begin1
	.quad	.Ltmp313-.Lfunc_begin1
	.short	.Ltmp2339-.Ltmp2338     # Loc expr size
.Ltmp2338:
	.byte	92                      # DW_OP_reg12
.Ltmp2339:
	.quad	.Ltmp313-.Lfunc_begin1
	.quad	.Ltmp318-.Lfunc_begin1
	.short	.Ltmp2341-.Ltmp2340     # Loc expr size
.Ltmp2340:
	.byte	93                      # DW_OP_reg13
.Ltmp2341:
	.quad	.Ltmp318-.Lfunc_begin1
	.quad	.Ltmp326-.Lfunc_begin1
	.short	.Ltmp2343-.Ltmp2342     # Loc expr size
.Ltmp2342:
	.byte	92                      # DW_OP_reg12
.Ltmp2343:
	.quad	.Ltmp326-.Lfunc_begin1
	.quad	.Ltmp336-.Lfunc_begin1
	.short	.Ltmp2345-.Ltmp2344     # Loc expr size
.Ltmp2344:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp2345:
	.quad	.Ltmp336-.Lfunc_begin1
	.quad	.Ltmp339-.Lfunc_begin1
	.short	.Ltmp2347-.Ltmp2346     # Loc expr size
.Ltmp2346:
	.byte	93                      # DW_OP_reg13
.Ltmp2347:
	.quad	.Ltmp339-.Lfunc_begin1
	.quad	.Ltmp350-.Lfunc_begin1
	.short	.Ltmp2349-.Ltmp2348     # Loc expr size
.Ltmp2348:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp2349:
	.quad	.Ltmp350-.Lfunc_begin1
	.quad	.Ltmp351-.Lfunc_begin1
	.short	.Ltmp2351-.Ltmp2350     # Loc expr size
.Ltmp2350:
	.byte	83                      # DW_OP_reg3
.Ltmp2351:
	.quad	0
	.quad	0
.Ldebug_loc40:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Ltmp285-.Lfunc_begin1
	.short	.Ltmp2353-.Ltmp2352     # Loc expr size
.Ltmp2352:
	.byte	82                      # DW_OP_reg2
.Ltmp2353:
	.quad	.Ltmp285-.Lfunc_begin1
	.quad	.Ltmp291-.Lfunc_begin1
	.short	.Ltmp2355-.Ltmp2354     # Loc expr size
.Ltmp2354:
	.byte	94                      # DW_OP_reg14
.Ltmp2355:
	.quad	.Ltmp291-.Lfunc_begin1
	.quad	.Ltmp304-.Lfunc_begin1
	.short	.Ltmp2357-.Ltmp2356     # Loc expr size
.Ltmp2356:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2357:
	.quad	.Ltmp304-.Lfunc_begin1
	.quad	.Ltmp305-.Lfunc_begin1
	.short	.Ltmp2359-.Ltmp2358     # Loc expr size
.Ltmp2358:
	.byte	83                      # DW_OP_reg3
.Ltmp2359:
	.quad	.Ltmp305-.Lfunc_begin1
	.quad	.Ltmp316-.Lfunc_begin1
	.short	.Ltmp2361-.Ltmp2360     # Loc expr size
.Ltmp2360:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2361:
	.quad	.Ltmp316-.Lfunc_begin1
	.quad	.Ltmp319-.Lfunc_begin1
	.short	.Ltmp2363-.Ltmp2362     # Loc expr size
.Ltmp2362:
	.byte	95                      # DW_OP_reg15
.Ltmp2363:
	.quad	.Ltmp319-.Lfunc_begin1
	.quad	.Ltmp331-.Lfunc_begin1
	.short	.Ltmp2365-.Ltmp2364     # Loc expr size
.Ltmp2364:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2365:
	.quad	.Ltmp331-.Lfunc_begin1
	.quad	.Ltmp337-.Lfunc_begin1
	.short	.Ltmp2367-.Ltmp2366     # Loc expr size
.Ltmp2366:
	.byte	95                      # DW_OP_reg15
.Ltmp2367:
	.quad	.Ltmp338-.Lfunc_begin1
	.quad	.Ltmp340-.Lfunc_begin1
	.short	.Ltmp2369-.Ltmp2368     # Loc expr size
.Ltmp2368:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2369:
	.quad	.Ltmp340-.Lfunc_begin1
	.quad	.Ltmp354-.Lfunc_begin1
	.short	.Ltmp2371-.Ltmp2370     # Loc expr size
.Ltmp2370:
	.byte	95                      # DW_OP_reg15
.Ltmp2371:
	.quad	0
	.quad	0
.Ldebug_loc41:
	.quad	.Lfunc_begin9-.Lfunc_begin1
	.quad	.Ltmp284-.Lfunc_begin1
	.short	.Ltmp2373-.Ltmp2372     # Loc expr size
.Ltmp2372:
	.byte	88                      # super-register DW_OP_reg8
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2373:
	.quad	.Ltmp284-.Lfunc_begin1
	.quad	.Ltmp298-.Lfunc_begin1
	.short	.Ltmp2375-.Ltmp2374     # Loc expr size
.Ltmp2374:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2375:
	.quad	.Ltmp298-.Lfunc_begin1
	.quad	.Ltmp300-.Lfunc_begin1
	.short	.Ltmp2377-.Ltmp2376     # Loc expr size
.Ltmp2376:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230\177"              # -104
.Ltmp2377:
	.quad	.Ltmp300-.Lfunc_begin1
	.quad	.Ltmp315-.Lfunc_begin1
	.short	.Ltmp2379-.Ltmp2378     # Loc expr size
.Ltmp2378:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2379:
	.quad	.Ltmp315-.Lfunc_begin1
	.quad	.Ltmp320-.Lfunc_begin1
	.short	.Ltmp2381-.Ltmp2380     # Loc expr size
.Ltmp2380:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230\177"              # -104
.Ltmp2381:
	.quad	.Ltmp320-.Lfunc_begin1
	.quad	.Ltmp329-.Lfunc_begin1
	.short	.Ltmp2383-.Ltmp2382     # Loc expr size
.Ltmp2382:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2383:
	.quad	.Ltmp329-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	.Ltmp2385-.Ltmp2384     # Loc expr size
.Ltmp2384:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230\177"              # -104
.Ltmp2385:
	.quad	0
	.quad	0
.Ldebug_loc42:
	.quad	.Ltmp289-.Lfunc_begin1
	.quad	.Ltmp302-.Lfunc_begin1
	.short	.Ltmp2387-.Ltmp2386     # Loc expr size
.Ltmp2386:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2387:
	.quad	.Ltmp302-.Lfunc_begin1
	.quad	.Ltmp308-.Lfunc_begin1
	.short	.Ltmp2389-.Ltmp2388     # Loc expr size
.Ltmp2388:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2389:
	.quad	.Ltmp308-.Lfunc_begin1
	.quad	.Ltmp322-.Lfunc_begin1
	.short	.Ltmp2391-.Ltmp2390     # Loc expr size
.Ltmp2390:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2391:
	.quad	.Ltmp323-.Lfunc_begin1
	.quad	.Ltmp325-.Lfunc_begin1
	.short	.Ltmp2393-.Ltmp2392     # Loc expr size
.Ltmp2392:
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
.Ltmp2393:
	.quad	.Ltmp325-.Lfunc_begin1
	.quad	.Ltmp346-.Lfunc_begin1
	.short	.Ltmp2395-.Ltmp2394     # Loc expr size
.Ltmp2394:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2395:
	.quad	.Ltmp346-.Lfunc_begin1
	.quad	.Ltmp348-.Lfunc_begin1
	.short	.Ltmp2397-.Ltmp2396     # Loc expr size
.Ltmp2396:
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
.Ltmp2397:
	.quad	.Ltmp348-.Lfunc_begin1
	.quad	.Ltmp349-.Lfunc_begin1
	.short	.Ltmp2399-.Ltmp2398     # Loc expr size
.Ltmp2398:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2399:
	.quad	.Ltmp349-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	.Ltmp2401-.Ltmp2400     # Loc expr size
.Ltmp2400:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2401:
	.quad	0
	.quad	0
.Ldebug_loc43:
	.quad	.Ltmp334-.Lfunc_begin1
	.quad	.Ltmp342-.Lfunc_begin1
	.short	.Ltmp2403-.Ltmp2402     # Loc expr size
.Ltmp2402:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2403:
	.quad	.Ltmp342-.Lfunc_begin1
	.quad	.Ltmp343-.Lfunc_begin1
	.short	.Ltmp2405-.Ltmp2404     # Loc expr size
.Ltmp2404:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2405:
	.quad	.Ltmp343-.Lfunc_begin1
	.quad	.Lfunc_end9-.Lfunc_begin1
	.short	.Ltmp2407-.Ltmp2406     # Loc expr size
.Ltmp2406:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2407:
	.quad	0
	.quad	0
.Ldebug_loc44:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Ltmp370-.Lfunc_begin1
	.short	.Ltmp2409-.Ltmp2408     # Loc expr size
.Ltmp2408:
	.byte	85                      # super-register DW_OP_reg5
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2409:
	.quad	.Ltmp370-.Lfunc_begin1
	.quad	.Ltmp374-.Lfunc_begin1
	.short	.Ltmp2411-.Ltmp2410     # Loc expr size
.Ltmp2410:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2411:
	.quad	.Ltmp374-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2413-.Ltmp2412     # Loc expr size
.Ltmp2412:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2413:
	.quad	0
	.quad	0
.Ldebug_loc45:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Ltmp369-.Lfunc_begin1
	.short	.Ltmp2415-.Ltmp2414     # Loc expr size
.Ltmp2414:
	.byte	84                      # DW_OP_reg4
.Ltmp2415:
	.quad	.Ltmp369-.Lfunc_begin1
	.quad	.Ltmp371-.Lfunc_begin1
	.short	.Ltmp2417-.Ltmp2416     # Loc expr size
.Ltmp2416:
	.byte	83                      # DW_OP_reg3
.Ltmp2417:
	.quad	.Ltmp371-.Lfunc_begin1
	.quad	.Ltmp375-.Lfunc_begin1
	.short	.Ltmp2419-.Ltmp2418     # Loc expr size
.Ltmp2418:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp2419:
	.quad	.Ltmp400-.Lfunc_begin1
	.quad	.Ltmp401-.Lfunc_begin1
	.short	.Ltmp2421-.Ltmp2420     # Loc expr size
.Ltmp2420:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp2421:
	.quad	.Ltmp410-.Lfunc_begin1
	.quad	.Ltmp415-.Lfunc_begin1
	.short	.Ltmp2423-.Ltmp2422     # Loc expr size
.Ltmp2422:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2423:
	.quad	.Ltmp415-.Lfunc_begin1
	.quad	.Ltmp419-.Lfunc_begin1
	.short	.Ltmp2425-.Ltmp2424     # Loc expr size
.Ltmp2424:
	.byte	115                     # DW_OP_breg3
	.byte	0                       # 0
.Ltmp2425:
	.quad	.Ltmp422-.Lfunc_begin1
	.quad	.Ltmp433-.Lfunc_begin1
	.short	.Ltmp2427-.Ltmp2426     # Loc expr size
.Ltmp2426:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2427:
	.quad	.Ltmp434-.Lfunc_begin1
	.quad	.Ltmp472-.Lfunc_begin1
	.short	.Ltmp2429-.Ltmp2428     # Loc expr size
.Ltmp2428:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp2429:
	.quad	.Ltmp472-.Lfunc_begin1
	.quad	.Ltmp477-.Lfunc_begin1
	.short	.Ltmp2431-.Ltmp2430     # Loc expr size
.Ltmp2430:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp2431:
	.quad	.Ltmp477-.Lfunc_begin1
	.quad	.Ltmp482-.Lfunc_begin1
	.short	.Ltmp2433-.Ltmp2432     # Loc expr size
.Ltmp2432:
	.byte	115                     # DW_OP_breg3
	.byte	0                       # 0
.Ltmp2433:
	.quad	.Ltmp482-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2435-.Ltmp2434     # Loc expr size
.Ltmp2434:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp2435:
	.quad	0
	.quad	0
.Ldebug_loc46:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Ltmp368-.Lfunc_begin1
	.short	.Ltmp2437-.Ltmp2436     # Loc expr size
.Ltmp2436:
	.byte	97                      # DW_OP_reg17
.Ltmp2437:
	.quad	.Ltmp368-.Lfunc_begin1
	.quad	.Ltmp380-.Lfunc_begin1
	.short	.Ltmp2439-.Ltmp2438     # Loc expr size
.Ltmp2438:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp2439:
	.quad	.Ltmp381-.Lfunc_begin1
	.quad	.Ltmp443-.Lfunc_begin1
	.short	.Ltmp2441-.Ltmp2440     # Loc expr size
.Ltmp2440:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp2441:
	.quad	.Ltmp443-.Lfunc_begin1
	.quad	.Ltmp444-.Lfunc_begin1
	.short	.Ltmp2443-.Ltmp2442     # Loc expr size
.Ltmp2442:
	.byte	97                      # DW_OP_reg17
.Ltmp2443:
	.quad	0
	.quad	0
.Ldebug_loc47:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Ltmp367-.Lfunc_begin1
	.short	.Ltmp2445-.Ltmp2444     # Loc expr size
.Ltmp2444:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2445:
	.quad	.Ltmp367-.Lfunc_begin1
	.quad	.Ltmp375-.Lfunc_begin1
	.short	.Ltmp2447-.Ltmp2446     # Loc expr size
.Ltmp2446:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2447:
	.quad	.Ltmp387-.Lfunc_begin1
	.quad	.Ltmp388-.Lfunc_begin1
	.short	.Ltmp2449-.Ltmp2448     # Loc expr size
.Ltmp2448:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp2449:
	.quad	.Ltmp397-.Lfunc_begin1
	.quad	.Ltmp402-.Lfunc_begin1
	.short	.Ltmp2451-.Ltmp2450     # Loc expr size
.Ltmp2450:
	.byte	126                     # DW_OP_breg14
	.byte	0                       # 0
.Ltmp2451:
	.quad	.Ltmp405-.Lfunc_begin1
	.quad	.Ltmp405-.Lfunc_begin1
	.short	.Ltmp2453-.Ltmp2452     # Loc expr size
.Ltmp2452:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp2453:
	.quad	.Ltmp405-.Lfunc_begin1
	.quad	.Ltmp411-.Lfunc_begin1
	.short	.Ltmp2455-.Ltmp2454     # Loc expr size
.Ltmp2454:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2455:
	.quad	.Ltmp411-.Lfunc_begin1
	.quad	.Ltmp417-.Lfunc_begin1
	.short	.Ltmp2457-.Ltmp2456     # Loc expr size
.Ltmp2456:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp2457:
	.quad	.Ltmp417-.Lfunc_begin1
	.quad	.Ltmp418-.Lfunc_begin1
	.short	.Ltmp2459-.Ltmp2458     # Loc expr size
.Ltmp2458:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp2459:
	.quad	.Ltmp422-.Lfunc_begin1
	.quad	.Ltmp433-.Lfunc_begin1
	.short	.Ltmp2461-.Ltmp2460     # Loc expr size
.Ltmp2460:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2461:
	.quad	.Ltmp435-.Lfunc_begin1
	.quad	.Ltmp438-.Lfunc_begin1
	.short	.Ltmp2463-.Ltmp2462     # Loc expr size
.Ltmp2462:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2463:
	.quad	.Ltmp438-.Lfunc_begin1
	.quad	.Ltmp441-.Lfunc_begin1
	.short	.Ltmp2465-.Ltmp2464     # Loc expr size
.Ltmp2464:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp2465:
	.quad	.Ltmp466-.Lfunc_begin1
	.quad	.Ltmp466-.Lfunc_begin1
	.short	.Ltmp2467-.Ltmp2466     # Loc expr size
.Ltmp2466:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp2467:
	.quad	.Ltmp466-.Lfunc_begin1
	.quad	.Ltmp474-.Lfunc_begin1
	.short	.Ltmp2469-.Ltmp2468     # Loc expr size
.Ltmp2468:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2469:
	.quad	.Ltmp474-.Lfunc_begin1
	.quad	.Ltmp481-.Lfunc_begin1
	.short	.Ltmp2471-.Ltmp2470     # Loc expr size
.Ltmp2470:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp2471:
	.quad	.Ltmp481-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2473-.Ltmp2472     # Loc expr size
.Ltmp2472:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2473:
	.quad	0
	.quad	0
.Ldebug_loc48:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Ltmp366-.Lfunc_begin1
	.short	.Ltmp2475-.Ltmp2474     # Loc expr size
.Ltmp2474:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2475:
	.quad	.Ltmp366-.Lfunc_begin1
	.quad	.Ltmp375-.Lfunc_begin1
	.short	.Ltmp2477-.Ltmp2476     # Loc expr size
.Ltmp2476:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2477:
	.quad	.Ltmp390-.Lfunc_begin1
	.quad	.Ltmp391-.Lfunc_begin1
	.short	.Ltmp2479-.Ltmp2478     # Loc expr size
.Ltmp2478:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp2479:
	.quad	.Ltmp398-.Lfunc_begin1
	.quad	.Ltmp402-.Lfunc_begin1
	.short	.Ltmp2481-.Ltmp2480     # Loc expr size
.Ltmp2480:
	.byte	124                     # DW_OP_breg12
	.byte	0                       # 0
.Ltmp2481:
	.quad	0
	.quad	0
.Ldebug_loc49:
	.quad	.Lfunc_begin10-.Lfunc_begin1
	.quad	.Ltmp365-.Lfunc_begin1
	.short	.Ltmp2483-.Ltmp2482     # Loc expr size
.Ltmp2482:
	.byte	88                      # DW_OP_reg8
.Ltmp2483:
	.quad	.Ltmp365-.Lfunc_begin1
	.quad	.Ltmp420-.Lfunc_begin1
	.short	.Ltmp2485-.Ltmp2484     # Loc expr size
.Ltmp2484:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp2485:
	.quad	.Ltmp420-.Lfunc_begin1
	.quad	.Ltmp421-.Lfunc_begin1
	.short	.Ltmp2487-.Ltmp2486     # Loc expr size
.Ltmp2486:
	.byte	92                      # DW_OP_reg12
.Ltmp2487:
	.quad	.Ltmp421-.Lfunc_begin1
	.quad	.Ltmp493-.Lfunc_begin1
	.short	.Ltmp2489-.Ltmp2488     # Loc expr size
.Ltmp2488:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp2489:
	.quad	.Ltmp493-.Lfunc_begin1
	.quad	.Ltmp494-.Lfunc_begin1
	.short	.Ltmp2491-.Ltmp2490     # Loc expr size
.Ltmp2490:
	.byte	93                      # DW_OP_reg13
.Ltmp2491:
	.quad	.Ltmp494-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2493-.Ltmp2492     # Loc expr size
.Ltmp2492:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp2493:
	.quad	0
	.quad	0
.Ldebug_loc50:
	.quad	.Ltmp373-.Lfunc_begin1
	.quad	.Ltmp404-.Lfunc_begin1
	.short	.Ltmp2495-.Ltmp2494     # Loc expr size
.Ltmp2494:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340~"                 # -160
.Ltmp2495:
	.quad	.Ltmp404-.Lfunc_begin1
	.quad	.Ltmp405-.Lfunc_begin1
	.short	.Ltmp2497-.Ltmp2496     # Loc expr size
.Ltmp2496:
	.byte	92                      # DW_OP_reg12
.Ltmp2497:
	.quad	.Ltmp437-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2499-.Ltmp2498     # Loc expr size
.Ltmp2498:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340~"                 # -160
.Ltmp2499:
	.quad	0
	.quad	0
.Ldebug_loc51:
	.quad	.Ltmp375-.Lfunc_begin1
	.quad	.Ltmp377-.Lfunc_begin1
	.short	.Ltmp2501-.Ltmp2500     # Loc expr size
.Ltmp2500:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp2501:
	.quad	.Ltmp377-.Lfunc_begin1
	.quad	.Ltmp378-.Lfunc_begin1
	.short	.Ltmp2503-.Ltmp2502     # Loc expr size
.Ltmp2502:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2503:
	.quad	0
	.quad	0
.Ldebug_loc52:
	.quad	.Ltmp379-.Lfunc_begin1
	.quad	.Ltmp423-.Lfunc_begin1
	.short	.Ltmp2505-.Ltmp2504     # Loc expr size
.Ltmp2504:
	.byte	16                      # DW_OP_constu
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2505:
	.quad	.Ltmp423-.Lfunc_begin1
	.quad	.Ltmp424-.Lfunc_begin1
	.short	.Ltmp2507-.Ltmp2506     # Loc expr size
.Ltmp2506:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2507:
	.quad	.Ltmp424-.Lfunc_begin1
	.quad	.Ltmp425-.Lfunc_begin1
	.short	.Ltmp2509-.Ltmp2508     # Loc expr size
.Ltmp2508:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2509:
	.quad	.Ltmp425-.Lfunc_begin1
	.quad	.Ltmp426-.Lfunc_begin1
	.short	.Ltmp2511-.Ltmp2510     # Loc expr size
.Ltmp2510:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2511:
	.quad	.Ltmp426-.Lfunc_begin1
	.quad	.Ltmp427-.Lfunc_begin1
	.short	.Ltmp2513-.Ltmp2512     # Loc expr size
.Ltmp2512:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2513:
	.quad	.Ltmp427-.Lfunc_begin1
	.quad	.Ltmp428-.Lfunc_begin1
	.short	.Ltmp2515-.Ltmp2514     # Loc expr size
.Ltmp2514:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2515:
	.quad	.Ltmp428-.Lfunc_begin1
	.quad	.Ltmp429-.Lfunc_begin1
	.short	.Ltmp2517-.Ltmp2516     # Loc expr size
.Ltmp2516:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2517:
	.quad	.Ltmp429-.Lfunc_begin1
	.quad	.Ltmp430-.Lfunc_begin1
	.short	.Ltmp2519-.Ltmp2518     # Loc expr size
.Ltmp2518:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2519:
	.quad	.Ltmp430-.Lfunc_begin1
	.quad	.Ltmp431-.Lfunc_begin1
	.short	.Ltmp2521-.Ltmp2520     # Loc expr size
.Ltmp2520:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2521:
	.quad	.Ltmp431-.Lfunc_begin1
	.quad	.Ltmp433-.Lfunc_begin1
	.short	.Ltmp2523-.Ltmp2522     # Loc expr size
.Ltmp2522:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2523:
	.quad	.Ltmp433-.Lfunc_begin1
	.quad	.Ltmp497-.Lfunc_begin1
	.short	.Ltmp2525-.Ltmp2524     # Loc expr size
.Ltmp2524:
	.byte	16                      # DW_OP_constu
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2525:
	.quad	.Ltmp497-.Lfunc_begin1
	.quad	.Ltmp500-.Lfunc_begin1
	.short	.Ltmp2527-.Ltmp2526     # Loc expr size
.Ltmp2526:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"              # -128
.Ltmp2527:
	.quad	.Ltmp500-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2529-.Ltmp2528     # Loc expr size
.Ltmp2528:
	.byte	16                      # DW_OP_constu
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2529:
	.quad	0
	.quad	0
.Ldebug_loc53:
	.quad	.Ltmp385-.Lfunc_begin1
	.quad	.Ltmp402-.Lfunc_begin1
	.short	.Ltmp2531-.Ltmp2530     # Loc expr size
.Ltmp2530:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2531:
	.quad	.Ltmp403-.Lfunc_begin1
	.quad	.Ltmp407-.Lfunc_begin1
	.short	.Ltmp2533-.Ltmp2532     # Loc expr size
.Ltmp2532:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp2533:
	.quad	.Ltmp407-.Lfunc_begin1
	.quad	.Ltmp408-.Lfunc_begin1
	.short	.Ltmp2535-.Ltmp2534     # Loc expr size
.Ltmp2534:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2535:
	.quad	.Ltmp408-.Lfunc_begin1
	.quad	.Ltmp437-.Lfunc_begin1
	.short	.Ltmp2537-.Ltmp2536     # Loc expr size
.Ltmp2536:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp2537:
	.quad	.Ltmp437-.Lfunc_begin1
	.quad	.Ltmp447-.Lfunc_begin1
	.short	.Ltmp2539-.Ltmp2538     # Loc expr size
.Ltmp2538:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2539:
	.quad	.Ltmp447-.Lfunc_begin1
	.quad	.Ltmp448-.Lfunc_begin1
	.short	.Ltmp2541-.Ltmp2540     # Loc expr size
.Ltmp2540:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2541:
	.quad	.Ltmp448-.Lfunc_begin1
	.quad	.Ltmp451-.Lfunc_begin1
	.short	.Ltmp2543-.Ltmp2542     # Loc expr size
.Ltmp2542:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2543:
	.quad	.Ltmp451-.Lfunc_begin1
	.quad	.Ltmp452-.Lfunc_begin1
	.short	.Ltmp2545-.Ltmp2544     # Loc expr size
.Ltmp2544:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2545:
	.quad	.Ltmp452-.Lfunc_begin1
	.quad	.Ltmp468-.Lfunc_begin1
	.short	.Ltmp2547-.Ltmp2546     # Loc expr size
.Ltmp2546:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2547:
	.quad	.Ltmp468-.Lfunc_begin1
	.quad	.Ltmp469-.Lfunc_begin1
	.short	.Ltmp2549-.Ltmp2548     # Loc expr size
.Ltmp2548:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2549:
	.quad	.Ltmp469-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2551-.Ltmp2550     # Loc expr size
.Ltmp2550:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2551:
	.quad	0
	.quad	0
.Ldebug_loc54:
	.quad	.Ltmp386-.Lfunc_begin1
	.quad	.Ltmp396-.Lfunc_begin1
	.short	.Ltmp2553-.Ltmp2552     # Loc expr size
.Ltmp2552:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2553:
	.quad	.Ltmp396-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2555-.Ltmp2554     # Loc expr size
.Ltmp2554:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp2555:
	.quad	0
	.quad	0
.Ldebug_loc55:
	.quad	.Ltmp399-.Lfunc_begin1
	.quad	.Ltmp402-.Lfunc_begin1
	.short	.Ltmp2557-.Ltmp2556     # Loc expr size
.Ltmp2556:
	.byte	83                      # DW_OP_reg3
.Ltmp2557:
	.quad	0
	.quad	0
.Ldebug_loc56:
	.quad	.Ltmp405-.Lfunc_begin1
	.quad	.Ltmp447-.Lfunc_begin1
	.short	.Ltmp2559-.Ltmp2558     # Loc expr size
.Ltmp2558:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp2559:
	.quad	.Ltmp447-.Lfunc_begin1
	.quad	.Ltmp448-.Lfunc_begin1
	.short	.Ltmp2561-.Ltmp2560     # Loc expr size
.Ltmp2560:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2561:
	.quad	.Ltmp448-.Lfunc_begin1
	.quad	.Ltmp459-.Lfunc_begin1
	.short	.Ltmp2563-.Ltmp2562     # Loc expr size
.Ltmp2562:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2563:
	.quad	.Ltmp459-.Lfunc_begin1
	.quad	.Ltmp461-.Lfunc_begin1
	.short	.Ltmp2565-.Ltmp2564     # Loc expr size
.Ltmp2564:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2565:
	.quad	.Ltmp461-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2567-.Ltmp2566     # Loc expr size
.Ltmp2566:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2567:
	.quad	0
	.quad	0
.Ldebug_loc57:
	.quad	.Ltmp410-.Lfunc_begin1
	.quad	.Ltmp496-.Lfunc_begin1
	.short	.Ltmp2569-.Ltmp2568     # Loc expr size
.Ltmp2568:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2569:
	.quad	.Ltmp496-.Lfunc_begin1
	.quad	.Ltmp500-.Lfunc_begin1
	.short	.Ltmp2571-.Ltmp2570     # Loc expr size
.Ltmp2570:
	.byte	118                     # DW_OP_breg6
	.ascii	"\234\177"              # -100
.Ltmp2571:
	.quad	.Ltmp500-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2573-.Ltmp2572     # Loc expr size
.Ltmp2572:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2573:
	.quad	0
	.quad	0
.Ldebug_loc58:
	.quad	.Ltmp442-.Lfunc_begin1
	.quad	.Ltmp442-.Lfunc_begin1
	.short	.Ltmp2575-.Ltmp2574     # Loc expr size
.Ltmp2574:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"                 # -200
.Ltmp2575:
	.quad	.Ltmp449-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2577-.Ltmp2576     # Loc expr size
.Ltmp2576:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"                 # -200
.Ltmp2577:
	.quad	0
	.quad	0
.Ldebug_loc59:
	.quad	.Ltmp442-.Lfunc_begin1
	.quad	.Ltmp442-.Lfunc_begin1
	.short	.Ltmp2579-.Ltmp2578     # Loc expr size
.Ltmp2578:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"                 # -200
.Ltmp2579:
	.quad	.Ltmp449-.Lfunc_begin1
	.quad	.Ltmp455-.Lfunc_begin1
	.short	.Ltmp2581-.Ltmp2580     # Loc expr size
.Ltmp2580:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"                 # -200
.Ltmp2581:
	.quad	.Ltmp455-.Lfunc_begin1
	.quad	.Ltmp456-.Lfunc_begin1
	.short	.Ltmp2583-.Ltmp2582     # Loc expr size
.Ltmp2582:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2583:
	.quad	.Ltmp456-.Lfunc_begin1
	.quad	.Ltmp457-.Lfunc_begin1
	.short	.Ltmp2585-.Ltmp2584     # Loc expr size
.Ltmp2584:
	.byte	83                      # DW_OP_reg3
.Ltmp2585:
	.quad	.Ltmp461-.Lfunc_begin1
	.quad	.Ltmp490-.Lfunc_begin1
	.short	.Ltmp2587-.Ltmp2586     # Loc expr size
.Ltmp2586:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"                 # -200
.Ltmp2587:
	.quad	.Ltmp490-.Lfunc_begin1
	.quad	.Ltmp491-.Lfunc_begin1
	.short	.Ltmp2589-.Ltmp2588     # Loc expr size
.Ltmp2588:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp2589:
	.quad	.Ltmp491-.Lfunc_begin1
	.quad	.Ltmp492-.Lfunc_begin1
	.short	.Ltmp2591-.Ltmp2590     # Loc expr size
.Ltmp2590:
	.byte	83                      # DW_OP_reg3
.Ltmp2591:
	.quad	.Ltmp500-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2593-.Ltmp2592     # Loc expr size
.Ltmp2592:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"                 # -200
.Ltmp2593:
	.quad	0
	.quad	0
.Ldebug_loc60:
	.quad	.Ltmp445-.Lfunc_begin1
	.quad	.Ltmp446-.Lfunc_begin1
	.short	.Ltmp2595-.Ltmp2594     # Loc expr size
.Ltmp2594:
	.byte	97                      # DW_OP_reg17
.Ltmp2595:
	.quad	.Ltmp446-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2597-.Ltmp2596     # Loc expr size
.Ltmp2596:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp2597:
	.quad	0
	.quad	0
.Ldebug_loc61:
	.quad	.Ltmp447-.Lfunc_begin1
	.quad	.Ltmp448-.Lfunc_begin1
	.short	.Ltmp2599-.Ltmp2598     # Loc expr size
.Ltmp2598:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2599:
	.quad	.Ltmp448-.Lfunc_begin1
	.quad	.Ltmp485-.Lfunc_begin1
	.short	.Ltmp2601-.Ltmp2600     # Loc expr size
.Ltmp2600:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2601:
	.quad	.Ltmp485-.Lfunc_begin1
	.quad	.Ltmp486-.Lfunc_begin1
	.short	.Ltmp2603-.Ltmp2602     # Loc expr size
.Ltmp2602:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2603:
	.quad	.Ltmp486-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2605-.Ltmp2604     # Loc expr size
.Ltmp2604:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2605:
	.quad	0
	.quad	0
.Ldebug_loc62:
	.quad	.Ltmp447-.Lfunc_begin1
	.quad	.Ltmp448-.Lfunc_begin1
	.short	.Ltmp2607-.Ltmp2606     # Loc expr size
.Ltmp2606:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2607:
	.quad	.Ltmp448-.Lfunc_begin1
	.quad	.Ltmp455-.Lfunc_begin1
	.short	.Ltmp2609-.Ltmp2608     # Loc expr size
.Ltmp2608:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2609:
	.quad	.Ltmp455-.Lfunc_begin1
	.quad	.Ltmp460-.Lfunc_begin1
	.short	.Ltmp2611-.Ltmp2610     # Loc expr size
.Ltmp2610:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2611:
	.quad	.Ltmp461-.Lfunc_begin1
	.quad	.Ltmp498-.Lfunc_begin1
	.short	.Ltmp2613-.Ltmp2612     # Loc expr size
.Ltmp2612:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2613:
	.quad	.Ltmp498-.Lfunc_begin1
	.quad	.Ltmp500-.Lfunc_begin1
	.short	.Ltmp2615-.Ltmp2614     # Loc expr size
.Ltmp2614:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp2615:
	.quad	.Ltmp500-.Lfunc_begin1
	.quad	.Lfunc_end10-.Lfunc_begin1
	.short	.Ltmp2617-.Ltmp2616     # Loc expr size
.Ltmp2616:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2617:
	.quad	0
	.quad	0
.Ldebug_loc63:
	.quad	.Ltmp479-.Lfunc_begin1
	.quad	.Ltmp480-.Lfunc_begin1
	.short	.Ltmp2619-.Ltmp2618     # Loc expr size
.Ltmp2618:
	.byte	80                      # DW_OP_reg0
.Ltmp2619:
	.quad	.Ltmp480-.Lfunc_begin1
	.quad	.Ltmp488-.Lfunc_begin1
	.short	.Ltmp2621-.Ltmp2620     # Loc expr size
.Ltmp2620:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2621:
	.quad	.Ltmp488-.Lfunc_begin1
	.quad	.Ltmp490-.Lfunc_begin1
	.short	.Ltmp2623-.Ltmp2622     # Loc expr size
.Ltmp2622:
	.byte	83                      # DW_OP_reg3
.Ltmp2623:
	.quad	0
	.quad	0
.Ldebug_loc64:
	.quad	.Ltmp490-.Lfunc_begin1
	.quad	.Ltmp499-.Lfunc_begin1
	.short	.Ltmp2625-.Ltmp2624     # Loc expr size
.Ltmp2624:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2625:
	.quad	0
	.quad	0
.Ldebug_loc65:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Ltmp520-.Lfunc_begin1
	.short	.Ltmp2627-.Ltmp2626     # Loc expr size
.Ltmp2626:
	.byte	85                      # DW_OP_reg5
.Ltmp2627:
	.quad	.Ltmp520-.Lfunc_begin1
	.quad	.Ltmp555-.Lfunc_begin1
	.short	.Ltmp2629-.Ltmp2628     # Loc expr size
.Ltmp2628:
	.byte	95                      # DW_OP_reg15
.Ltmp2629:
	.quad	0
	.quad	0
.Ldebug_loc66:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Ltmp519-.Lfunc_begin1
	.short	.Ltmp2631-.Ltmp2630     # Loc expr size
.Ltmp2630:
	.byte	84                      # DW_OP_reg4
.Ltmp2631:
	.quad	.Ltmp519-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	.Ltmp2633-.Ltmp2632     # Loc expr size
.Ltmp2632:
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
.Ltmp2633:
	.quad	0
	.quad	0
.Ldebug_loc67:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Ltmp518-.Lfunc_begin1
	.short	.Ltmp2635-.Ltmp2634     # Loc expr size
.Ltmp2634:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2635:
	.quad	.Ltmp518-.Lfunc_begin1
	.quad	.Ltmp527-.Lfunc_begin1
	.short	.Ltmp2637-.Ltmp2636     # Loc expr size
.Ltmp2636:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp2637:
	.quad	.Ltmp527-.Lfunc_begin1
	.quad	.Ltmp530-.Lfunc_begin1
	.short	.Ltmp2639-.Ltmp2638     # Loc expr size
.Ltmp2638:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2639:
	.quad	0
	.quad	0
.Ldebug_loc68:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Ltmp517-.Lfunc_begin1
	.short	.Ltmp2641-.Ltmp2640     # Loc expr size
.Ltmp2640:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2641:
	.quad	.Ltmp517-.Lfunc_begin1
	.quad	.Ltmp524-.Lfunc_begin1
	.short	.Ltmp2643-.Ltmp2642     # Loc expr size
.Ltmp2642:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2643:
	.quad	.Ltmp525-.Lfunc_begin1
	.quad	.Ltmp528-.Lfunc_begin1
	.short	.Ltmp2645-.Ltmp2644     # Loc expr size
.Ltmp2644:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2645:
	.quad	0
	.quad	0
.Ldebug_loc69:
	.quad	.Lfunc_begin11-.Lfunc_begin1
	.quad	.Ltmp516-.Lfunc_begin1
	.short	.Ltmp2647-.Ltmp2646     # Loc expr size
.Ltmp2646:
	.byte	88                      # super-register DW_OP_reg8
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2647:
	.quad	.Ltmp516-.Lfunc_begin1
	.quad	.Ltmp522-.Lfunc_begin1
	.short	.Ltmp2649-.Ltmp2648     # Loc expr size
.Ltmp2648:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2649:
	.quad	0
	.quad	0
.Ldebug_loc70:
	.quad	.Ltmp515-.Lfunc_begin1
	.quad	.Ltmp519-.Lfunc_begin1
	.short	.Ltmp2651-.Ltmp2650     # Loc expr size
.Ltmp2650:
	.byte	84                      # DW_OP_reg4
.Ltmp2651:
	.quad	.Ltmp519-.Lfunc_begin1
	.quad	.Lfunc_end11-.Lfunc_begin1
	.short	.Ltmp2653-.Ltmp2652     # Loc expr size
.Ltmp2652:
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
.Ltmp2653:
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Ltmp537-.Lfunc_begin1
	.quad	.Ltmp538-.Lfunc_begin1
	.short	.Ltmp2655-.Ltmp2654     # Loc expr size
.Ltmp2654:
	.byte	85                      # DW_OP_reg5
.Ltmp2655:
	.quad	.Ltmp538-.Lfunc_begin1
	.quad	.Ltmp539-.Lfunc_begin1
	.short	.Ltmp2657-.Ltmp2656     # Loc expr size
.Ltmp2656:
	.byte	94                      # DW_OP_reg14
.Ltmp2657:
	.quad	.Ltmp539-.Lfunc_begin1
	.quad	.Ltmp540-.Lfunc_begin1
	.short	.Ltmp2659-.Ltmp2658     # Loc expr size
.Ltmp2658:
	.byte	93                      # DW_OP_reg13
.Ltmp2659:
	.quad	.Ltmp540-.Lfunc_begin1
	.quad	.Ltmp541-.Lfunc_begin1
	.short	.Ltmp2661-.Ltmp2660     # Loc expr size
.Ltmp2660:
	.byte	85                      # DW_OP_reg5
.Ltmp2661:
	.quad	.Ltmp541-.Lfunc_begin1
	.quad	.Ltmp542-.Lfunc_begin1
	.short	.Ltmp2663-.Ltmp2662     # Loc expr size
.Ltmp2662:
	.byte	94                      # DW_OP_reg14
.Ltmp2663:
	.quad	.Ltmp542-.Lfunc_begin1
	.quad	.Ltmp543-.Lfunc_begin1
	.short	.Ltmp2665-.Ltmp2664     # Loc expr size
.Ltmp2664:
	.byte	93                      # DW_OP_reg13
.Ltmp2665:
	.quad	.Ltmp543-.Lfunc_begin1
	.quad	.Ltmp544-.Lfunc_begin1
	.short	.Ltmp2667-.Ltmp2666     # Loc expr size
.Ltmp2666:
	.byte	85                      # DW_OP_reg5
.Ltmp2667:
	.quad	.Ltmp544-.Lfunc_begin1
	.quad	.Ltmp545-.Lfunc_begin1
	.short	.Ltmp2669-.Ltmp2668     # Loc expr size
.Ltmp2668:
	.byte	94                      # DW_OP_reg14
.Ltmp2669:
	.quad	.Ltmp545-.Lfunc_begin1
	.quad	.Ltmp546-.Lfunc_begin1
	.short	.Ltmp2671-.Ltmp2670     # Loc expr size
.Ltmp2670:
	.byte	93                      # DW_OP_reg13
.Ltmp2671:
	.quad	0
	.quad	0
.Ldebug_loc72:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Ltmp568-.Lfunc_begin1
	.short	.Ltmp2673-.Ltmp2672     # Loc expr size
.Ltmp2672:
	.byte	85                      # DW_OP_reg5
.Ltmp2673:
	.quad	.Ltmp568-.Lfunc_begin1
	.quad	.Ltmp588-.Lfunc_begin1
	.short	.Ltmp2675-.Ltmp2674     # Loc expr size
.Ltmp2674:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240~"                 # -224
.Ltmp2675:
	.quad	.Ltmp588-.Lfunc_begin1
	.quad	.Ltmp589-.Lfunc_begin1
	.short	.Ltmp2677-.Ltmp2676     # Loc expr size
.Ltmp2676:
	.byte	94                      # DW_OP_reg14
.Ltmp2677:
	.quad	.Ltmp589-.Lfunc_begin1
	.quad	.Ltmp597-.Lfunc_begin1
	.short	.Ltmp2679-.Ltmp2678     # Loc expr size
.Ltmp2678:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240~"                 # -224
.Ltmp2679:
	.quad	.Ltmp597-.Lfunc_begin1
	.quad	.Ltmp598-.Lfunc_begin1
	.short	.Ltmp2681-.Ltmp2680     # Loc expr size
.Ltmp2680:
	.byte	95                      # DW_OP_reg15
.Ltmp2681:
	.quad	.Ltmp598-.Lfunc_begin1
	.quad	.Ltmp814-.Lfunc_begin1
	.short	.Ltmp2683-.Ltmp2682     # Loc expr size
.Ltmp2682:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240~"                 # -224
.Ltmp2683:
	.quad	.Ltmp814-.Lfunc_begin1
	.quad	.Ltmp815-.Lfunc_begin1
	.short	.Ltmp2685-.Ltmp2684     # Loc expr size
.Ltmp2684:
	.byte	83                      # DW_OP_reg3
.Ltmp2685:
	.quad	.Ltmp815-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	.Ltmp2687-.Ltmp2686     # Loc expr size
.Ltmp2686:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240~"                 # -224
.Ltmp2687:
	.quad	0
	.quad	0
.Ldebug_loc73:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Ltmp567-.Lfunc_begin1
	.short	.Ltmp2689-.Ltmp2688     # Loc expr size
.Ltmp2688:
	.byte	84                      # DW_OP_reg4
.Ltmp2689:
	.quad	.Ltmp567-.Lfunc_begin1
	.quad	.Ltmp585-.Lfunc_begin1
	.short	.Ltmp2691-.Ltmp2690     # Loc expr size
.Ltmp2690:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2691:
	.quad	.Ltmp585-.Lfunc_begin1
	.quad	.Ltmp590-.Lfunc_begin1
	.short	.Ltmp2693-.Ltmp2692     # Loc expr size
.Ltmp2692:
	.byte	83                      # DW_OP_reg3
.Ltmp2693:
	.quad	.Ltmp590-.Lfunc_begin1
	.quad	.Ltmp593-.Lfunc_begin1
	.short	.Ltmp2695-.Ltmp2694     # Loc expr size
.Ltmp2694:
	.byte	94                      # DW_OP_reg14
.Ltmp2695:
	.quad	.Ltmp593-.Lfunc_begin1
	.quad	.Ltmp599-.Lfunc_begin1
	.short	.Ltmp2697-.Ltmp2696     # Loc expr size
.Ltmp2696:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2697:
	.quad	.Ltmp599-.Lfunc_begin1
	.quad	.Ltmp601-.Lfunc_begin1
	.short	.Ltmp2699-.Ltmp2698     # Loc expr size
.Ltmp2698:
	.byte	94                      # DW_OP_reg14
.Ltmp2699:
	.quad	.Ltmp601-.Lfunc_begin1
	.quad	.Ltmp615-.Lfunc_begin1
	.short	.Ltmp2701-.Ltmp2700     # Loc expr size
.Ltmp2700:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2701:
	.quad	.Ltmp615-.Lfunc_begin1
	.quad	.Ltmp616-.Lfunc_begin1
	.short	.Ltmp2703-.Ltmp2702     # Loc expr size
.Ltmp2702:
	.byte	83                      # DW_OP_reg3
.Ltmp2703:
	.quad	.Ltmp616-.Lfunc_begin1
	.quad	.Ltmp617-.Lfunc_begin1
	.short	.Ltmp2705-.Ltmp2704     # Loc expr size
.Ltmp2704:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2705:
	.quad	.Ltmp617-.Lfunc_begin1
	.quad	.Ltmp620-.Lfunc_begin1
	.short	.Ltmp2707-.Ltmp2706     # Loc expr size
.Ltmp2706:
	.byte	94                      # DW_OP_reg14
.Ltmp2707:
	.quad	.Ltmp620-.Lfunc_begin1
	.quad	.Ltmp634-.Lfunc_begin1
	.short	.Ltmp2709-.Ltmp2708     # Loc expr size
.Ltmp2708:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2709:
	.quad	.Ltmp634-.Lfunc_begin1
	.quad	.Ltmp637-.Lfunc_begin1
	.short	.Ltmp2711-.Ltmp2710     # Loc expr size
.Ltmp2710:
	.byte	94                      # DW_OP_reg14
.Ltmp2711:
	.quad	.Ltmp637-.Lfunc_begin1
	.quad	.Ltmp651-.Lfunc_begin1
	.short	.Ltmp2713-.Ltmp2712     # Loc expr size
.Ltmp2712:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2713:
	.quad	.Ltmp651-.Lfunc_begin1
	.quad	.Ltmp654-.Lfunc_begin1
	.short	.Ltmp2715-.Ltmp2714     # Loc expr size
.Ltmp2714:
	.byte	94                      # DW_OP_reg14
.Ltmp2715:
	.quad	.Ltmp654-.Lfunc_begin1
	.quad	.Ltmp668-.Lfunc_begin1
	.short	.Ltmp2717-.Ltmp2716     # Loc expr size
.Ltmp2716:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2717:
	.quad	.Ltmp668-.Lfunc_begin1
	.quad	.Ltmp671-.Lfunc_begin1
	.short	.Ltmp2719-.Ltmp2718     # Loc expr size
.Ltmp2718:
	.byte	94                      # DW_OP_reg14
.Ltmp2719:
	.quad	.Ltmp671-.Lfunc_begin1
	.quad	.Ltmp685-.Lfunc_begin1
	.short	.Ltmp2721-.Ltmp2720     # Loc expr size
.Ltmp2720:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2721:
	.quad	.Ltmp685-.Lfunc_begin1
	.quad	.Ltmp688-.Lfunc_begin1
	.short	.Ltmp2723-.Ltmp2722     # Loc expr size
.Ltmp2722:
	.byte	94                      # DW_OP_reg14
.Ltmp2723:
	.quad	.Ltmp688-.Lfunc_begin1
	.quad	.Ltmp702-.Lfunc_begin1
	.short	.Ltmp2725-.Ltmp2724     # Loc expr size
.Ltmp2724:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2725:
	.quad	.Ltmp702-.Lfunc_begin1
	.quad	.Ltmp705-.Lfunc_begin1
	.short	.Ltmp2727-.Ltmp2726     # Loc expr size
.Ltmp2726:
	.byte	94                      # DW_OP_reg14
.Ltmp2727:
	.quad	.Ltmp705-.Lfunc_begin1
	.quad	.Ltmp719-.Lfunc_begin1
	.short	.Ltmp2729-.Ltmp2728     # Loc expr size
.Ltmp2728:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2729:
	.quad	.Ltmp719-.Lfunc_begin1
	.quad	.Ltmp722-.Lfunc_begin1
	.short	.Ltmp2731-.Ltmp2730     # Loc expr size
.Ltmp2730:
	.byte	94                      # DW_OP_reg14
.Ltmp2731:
	.quad	.Ltmp722-.Lfunc_begin1
	.quad	.Ltmp744-.Lfunc_begin1
	.short	.Ltmp2733-.Ltmp2732     # Loc expr size
.Ltmp2732:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2733:
	.quad	.Ltmp744-.Lfunc_begin1
	.quad	.Ltmp745-.Lfunc_begin1
	.short	.Ltmp2735-.Ltmp2734     # Loc expr size
.Ltmp2734:
	.byte	83                      # DW_OP_reg3
.Ltmp2735:
	.quad	.Ltmp745-.Lfunc_begin1
	.quad	.Ltmp746-.Lfunc_begin1
	.short	.Ltmp2737-.Ltmp2736     # Loc expr size
.Ltmp2736:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2737:
	.quad	.Ltmp746-.Lfunc_begin1
	.quad	.Ltmp747-.Lfunc_begin1
	.short	.Ltmp2739-.Ltmp2738     # Loc expr size
.Ltmp2738:
	.byte	83                      # DW_OP_reg3
.Ltmp2739:
	.quad	.Ltmp747-.Lfunc_begin1
	.quad	.Ltmp768-.Lfunc_begin1
	.short	.Ltmp2741-.Ltmp2740     # Loc expr size
.Ltmp2740:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2741:
	.quad	.Ltmp768-.Lfunc_begin1
	.quad	.Ltmp771-.Lfunc_begin1
	.short	.Ltmp2743-.Ltmp2742     # Loc expr size
.Ltmp2742:
	.byte	94                      # DW_OP_reg14
.Ltmp2743:
	.quad	.Ltmp771-.Lfunc_begin1
	.quad	.Ltmp782-.Lfunc_begin1
	.short	.Ltmp2745-.Ltmp2744     # Loc expr size
.Ltmp2744:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2745:
	.quad	.Ltmp782-.Lfunc_begin1
	.quad	.Ltmp788-.Lfunc_begin1
	.short	.Ltmp2747-.Ltmp2746     # Loc expr size
.Ltmp2746:
	.byte	83                      # DW_OP_reg3
.Ltmp2747:
	.quad	.Ltmp788-.Lfunc_begin1
	.quad	.Ltmp797-.Lfunc_begin1
	.short	.Ltmp2749-.Ltmp2748     # Loc expr size
.Ltmp2748:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2749:
	.quad	.Ltmp797-.Lfunc_begin1
	.quad	.Ltmp803-.Lfunc_begin1
	.short	.Ltmp2751-.Ltmp2750     # Loc expr size
.Ltmp2750:
	.byte	95                      # DW_OP_reg15
.Ltmp2751:
	.quad	.Ltmp803-.Lfunc_begin1
	.quad	.Ltmp819-.Lfunc_begin1
	.short	.Ltmp2753-.Ltmp2752     # Loc expr size
.Ltmp2752:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2753:
	.quad	.Ltmp819-.Lfunc_begin1
	.quad	.Ltmp821-.Lfunc_begin1
	.short	.Ltmp2755-.Ltmp2754     # Loc expr size
.Ltmp2754:
	.byte	83                      # DW_OP_reg3
.Ltmp2755:
	.quad	.Ltmp821-.Lfunc_begin1
	.quad	.Ltmp822-.Lfunc_begin1
	.short	.Ltmp2757-.Ltmp2756     # Loc expr size
.Ltmp2756:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2757:
	.quad	.Ltmp822-.Lfunc_begin1
	.quad	.Ltmp824-.Lfunc_begin1
	.short	.Ltmp2759-.Ltmp2758     # Loc expr size
.Ltmp2758:
	.byte	83                      # DW_OP_reg3
.Ltmp2759:
	.quad	.Ltmp824-.Lfunc_begin1
	.quad	.Ltmp825-.Lfunc_begin1
	.short	.Ltmp2761-.Ltmp2760     # Loc expr size
.Ltmp2760:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2761:
	.quad	.Ltmp825-.Lfunc_begin1
	.quad	.Ltmp827-.Lfunc_begin1
	.short	.Ltmp2763-.Ltmp2762     # Loc expr size
.Ltmp2762:
	.byte	83                      # DW_OP_reg3
.Ltmp2763:
	.quad	.Ltmp827-.Lfunc_begin1
	.quad	.Ltmp829-.Lfunc_begin1
	.short	.Ltmp2765-.Ltmp2764     # Loc expr size
.Ltmp2764:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2765:
	.quad	.Ltmp829-.Lfunc_begin1
	.quad	.Ltmp830-.Lfunc_begin1
	.short	.Ltmp2767-.Ltmp2766     # Loc expr size
.Ltmp2766:
	.byte	93                      # DW_OP_reg13
.Ltmp2767:
	.quad	.Ltmp830-.Lfunc_begin1
	.quad	.Ltmp832-.Lfunc_begin1
	.short	.Ltmp2769-.Ltmp2768     # Loc expr size
.Ltmp2768:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2769:
	.quad	.Ltmp832-.Lfunc_begin1
	.quad	.Ltmp842-.Lfunc_begin1
	.short	.Ltmp2771-.Ltmp2770     # Loc expr size
.Ltmp2770:
	.byte	93                      # DW_OP_reg13
.Ltmp2771:
	.quad	.Ltmp842-.Lfunc_begin1
	.quad	.Ltmp843-.Lfunc_begin1
	.short	.Ltmp2773-.Ltmp2772     # Loc expr size
.Ltmp2772:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2773:
	.quad	.Ltmp843-.Lfunc_begin1
	.quad	.Ltmp843-.Lfunc_begin1
	.short	.Ltmp2775-.Ltmp2774     # Loc expr size
.Ltmp2774:
	.byte	95                      # DW_OP_reg15
.Ltmp2775:
	.quad	.Ltmp843-.Lfunc_begin1
	.quad	.Ltmp852-.Lfunc_begin1
	.short	.Ltmp2777-.Ltmp2776     # Loc expr size
.Ltmp2776:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2777:
	.quad	.Ltmp852-.Lfunc_begin1
	.quad	.Ltmp875-.Lfunc_begin1
	.short	.Ltmp2779-.Ltmp2778     # Loc expr size
.Ltmp2778:
	.byte	93                      # DW_OP_reg13
.Ltmp2779:
	.quad	.Ltmp875-.Lfunc_begin1
	.quad	.Ltmp877-.Lfunc_begin1
	.short	.Ltmp2781-.Ltmp2780     # Loc expr size
.Ltmp2780:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2781:
	.quad	.Ltmp877-.Lfunc_begin1
	.quad	.Ltmp878-.Lfunc_begin1
	.short	.Ltmp2783-.Ltmp2782     # Loc expr size
.Ltmp2782:
	.byte	93                      # DW_OP_reg13
.Ltmp2783:
	.quad	.Ltmp878-.Lfunc_begin1
	.quad	.Ltmp879-.Lfunc_begin1
	.short	.Ltmp2785-.Ltmp2784     # Loc expr size
.Ltmp2784:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2785:
	.quad	.Ltmp879-.Lfunc_begin1
	.quad	.Ltmp880-.Lfunc_begin1
	.short	.Ltmp2787-.Ltmp2786     # Loc expr size
.Ltmp2786:
	.byte	93                      # DW_OP_reg13
.Ltmp2787:
	.quad	.Ltmp880-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	.Ltmp2789-.Ltmp2788     # Loc expr size
.Ltmp2788:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp2789:
	.quad	0
	.quad	0
.Ldebug_loc74:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Ltmp566-.Lfunc_begin1
	.short	.Ltmp2791-.Ltmp2790     # Loc expr size
.Ltmp2790:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2791:
	.quad	.Ltmp566-.Lfunc_begin1
	.quad	.Ltmp575-.Lfunc_begin1
	.short	.Ltmp2793-.Ltmp2792     # Loc expr size
.Ltmp2792:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2793:
	.quad	.Ltmp575-.Lfunc_begin1
	.quad	.Ltmp583-.Lfunc_begin1
	.short	.Ltmp2795-.Ltmp2794     # Loc expr size
.Ltmp2794:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp2795:
	.quad	.Ltmp584-.Lfunc_begin1
	.quad	.Ltmp766-.Lfunc_begin1
	.short	.Ltmp2797-.Ltmp2796     # Loc expr size
.Ltmp2796:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp2797:
	.quad	.Ltmp767-.Lfunc_begin1
	.quad	.Ltmp784-.Lfunc_begin1
	.short	.Ltmp2799-.Ltmp2798     # Loc expr size
.Ltmp2798:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp2799:
	.quad	.Ltmp785-.Lfunc_begin1
	.quad	.Ltmp796-.Lfunc_begin1
	.short	.Ltmp2801-.Ltmp2800     # Loc expr size
.Ltmp2800:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp2801:
	.quad	.Ltmp798-.Lfunc_begin1
	.quad	.Ltmp799-.Lfunc_begin1
	.short	.Ltmp2803-.Ltmp2802     # Loc expr size
.Ltmp2802:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp2803:
	.quad	.Ltmp808-.Lfunc_begin1
	.quad	.Ltmp850-.Lfunc_begin1
	.short	.Ltmp2805-.Ltmp2804     # Loc expr size
.Ltmp2804:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp2805:
	.quad	.Ltmp850-.Lfunc_begin1
	.quad	.Ltmp851-.Lfunc_begin1
	.short	.Ltmp2807-.Ltmp2806     # Loc expr size
.Ltmp2806:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2807:
	.quad	.Ltmp851-.Lfunc_begin1
	.quad	.Ltmp853-.Lfunc_begin1
	.short	.Ltmp2809-.Ltmp2808     # Loc expr size
.Ltmp2808:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2809:
	.quad	.Ltmp853-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	.Ltmp2811-.Ltmp2810     # Loc expr size
.Ltmp2810:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp2811:
	.quad	0
	.quad	0
.Ldebug_loc75:
	.quad	.Lfunc_begin12-.Lfunc_begin1
	.quad	.Ltmp565-.Lfunc_begin1
	.short	.Ltmp2813-.Ltmp2812     # Loc expr size
.Ltmp2812:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2813:
	.quad	.Ltmp565-.Lfunc_begin1
	.quad	.Ltmp571-.Lfunc_begin1
	.short	.Ltmp2815-.Ltmp2814     # Loc expr size
.Ltmp2814:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2815:
	.quad	0
	.quad	0
.Ldebug_loc76:
	.quad	.Ltmp569-.Lfunc_begin1
	.quad	.Ltmp577-.Lfunc_begin1
	.short	.Ltmp2817-.Ltmp2816     # Loc expr size
.Ltmp2816:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2817:
	.quad	.Ltmp577-.Lfunc_begin1
	.quad	.Ltmp578-.Lfunc_begin1
	.short	.Ltmp2819-.Ltmp2818     # Loc expr size
.Ltmp2818:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2819:
	.quad	.Ltmp578-.Lfunc_begin1
	.quad	.Ltmp752-.Lfunc_begin1
	.short	.Ltmp2821-.Ltmp2820     # Loc expr size
.Ltmp2820:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2821:
	.quad	.Ltmp752-.Lfunc_begin1
	.quad	.Ltmp755-.Lfunc_begin1
	.short	.Ltmp2823-.Ltmp2822     # Loc expr size
.Ltmp2822:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2823:
	.quad	.Ltmp755-.Lfunc_begin1
	.quad	.Ltmp756-.Lfunc_begin1
	.short	.Ltmp2825-.Ltmp2824     # Loc expr size
.Ltmp2824:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2825:
	.quad	.Ltmp757-.Lfunc_begin1
	.quad	.Ltmp765-.Lfunc_begin1
	.short	.Ltmp2827-.Ltmp2826     # Loc expr size
.Ltmp2826:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2827:
	.quad	.Ltmp765-.Lfunc_begin1
	.quad	.Ltmp766-.Lfunc_begin1
	.short	.Ltmp2829-.Ltmp2828     # Loc expr size
.Ltmp2828:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2829:
	.quad	.Ltmp766-.Lfunc_begin1
	.quad	.Ltmp780-.Lfunc_begin1
	.short	.Ltmp2831-.Ltmp2830     # Loc expr size
.Ltmp2830:
	.byte	118                     # DW_OP_breg6
	.ascii	"\274~"                 # -196
.Ltmp2831:
	.quad	.Ltmp780-.Lfunc_begin1
	.quad	.Ltmp781-.Lfunc_begin1
	.short	.Ltmp2833-.Ltmp2832     # Loc expr size
.Ltmp2832:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2833:
	.quad	.Ltmp781-.Lfunc_begin1
	.quad	.Ltmp806-.Lfunc_begin1
	.short	.Ltmp2835-.Ltmp2834     # Loc expr size
.Ltmp2834:
	.byte	118                     # DW_OP_breg6
	.ascii	"\274~"                 # -196
.Ltmp2835:
	.quad	.Ltmp806-.Lfunc_begin1
	.quad	.Ltmp848-.Lfunc_begin1
	.short	.Ltmp2837-.Ltmp2836     # Loc expr size
.Ltmp2836:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2837:
	.quad	.Ltmp848-.Lfunc_begin1
	.quad	.Ltmp849-.Lfunc_begin1
	.short	.Ltmp2839-.Ltmp2838     # Loc expr size
.Ltmp2838:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2839:
	.quad	.Ltmp849-.Lfunc_begin1
	.quad	.Ltmp873-.Lfunc_begin1
	.short	.Ltmp2841-.Ltmp2840     # Loc expr size
.Ltmp2840:
	.byte	118                     # DW_OP_breg6
	.ascii	"\330~"                 # -168
.Ltmp2841:
	.quad	.Ltmp873-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	.Ltmp2843-.Ltmp2842     # Loc expr size
.Ltmp2842:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2843:
	.quad	0
	.quad	0
.Ldebug_loc77:
	.quad	.Ltmp576-.Lfunc_begin1
	.quad	.Ltmp580-.Lfunc_begin1
	.short	.Ltmp2845-.Ltmp2844     # Loc expr size
.Ltmp2844:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2845:
	.quad	.Ltmp580-.Lfunc_begin1
	.quad	.Ltmp581-.Lfunc_begin1
	.short	.Ltmp2847-.Ltmp2846     # Loc expr size
.Ltmp2846:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2847:
	.quad	.Ltmp581-.Lfunc_begin1
	.quad	.Ltmp753-.Lfunc_begin1
	.short	.Ltmp2849-.Ltmp2848     # Loc expr size
.Ltmp2848:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2849:
	.quad	.Ltmp753-.Lfunc_begin1
	.quad	.Ltmp754-.Lfunc_begin1
	.short	.Ltmp2851-.Ltmp2850     # Loc expr size
.Ltmp2850:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2851:
	.quad	.Ltmp754-.Lfunc_begin1
	.quad	.Ltmp758-.Lfunc_begin1
	.short	.Ltmp2853-.Ltmp2852     # Loc expr size
.Ltmp2852:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2853:
	.quad	.Ltmp758-.Lfunc_begin1
	.quad	.Ltmp759-.Lfunc_begin1
	.short	.Ltmp2855-.Ltmp2854     # Loc expr size
.Ltmp2854:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2855:
	.quad	.Ltmp761-.Lfunc_begin1
	.quad	.Ltmp762-.Lfunc_begin1
	.short	.Ltmp2857-.Ltmp2856     # Loc expr size
.Ltmp2856:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2857:
	.quad	.Ltmp763-.Lfunc_begin1
	.quad	.Ltmp763-.Lfunc_begin1
	.short	.Ltmp2859-.Ltmp2858     # Loc expr size
.Ltmp2858:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2859:
	.quad	.Ltmp763-.Lfunc_begin1
	.quad	.Ltmp804-.Lfunc_begin1
	.short	.Ltmp2861-.Ltmp2860     # Loc expr size
.Ltmp2860:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2861:
	.quad	.Ltmp804-.Lfunc_begin1
	.quad	.Ltmp809-.Lfunc_begin1
	.short	.Ltmp2863-.Ltmp2862     # Loc expr size
.Ltmp2862:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2863:
	.quad	.Ltmp810-.Lfunc_begin1
	.quad	.Ltmp844-.Lfunc_begin1
	.short	.Ltmp2865-.Ltmp2864     # Loc expr size
.Ltmp2864:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2865:
	.quad	.Ltmp844-.Lfunc_begin1
	.quad	.Ltmp845-.Lfunc_begin1
	.short	.Ltmp2867-.Ltmp2866     # Loc expr size
.Ltmp2866:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2867:
	.quad	.Ltmp845-.Lfunc_begin1
	.quad	.Ltmp846-.Lfunc_begin1
	.short	.Ltmp2869-.Ltmp2868     # Loc expr size
.Ltmp2868:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2869:
	.quad	.Ltmp846-.Lfunc_begin1
	.quad	.Ltmp871-.Lfunc_begin1
	.short	.Ltmp2871-.Ltmp2870     # Loc expr size
.Ltmp2870:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2871:
	.quad	.Ltmp871-.Lfunc_begin1
	.quad	.Ltmp875-.Lfunc_begin1
	.short	.Ltmp2873-.Ltmp2872     # Loc expr size
.Ltmp2872:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2873:
	.quad	.Ltmp876-.Lfunc_begin1
	.quad	.Ltmp879-.Lfunc_begin1
	.short	.Ltmp2875-.Ltmp2874     # Loc expr size
.Ltmp2874:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp2875:
	.quad	.Ltmp879-.Lfunc_begin1
	.quad	.Ltmp879-.Lfunc_begin1
	.short	.Ltmp2877-.Ltmp2876     # Loc expr size
.Ltmp2876:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2877:
	.quad	.Ltmp879-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	.Ltmp2879-.Ltmp2878     # Loc expr size
.Ltmp2878:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp2879:
	.quad	0
	.quad	0
.Ldebug_loc78:
	.quad	.Ltmp591-.Lfunc_begin1
	.quad	.Ltmp592-.Lfunc_begin1
	.short	.Ltmp2881-.Ltmp2880     # Loc expr size
.Ltmp2880:
	.byte	85                      # DW_OP_reg5
.Ltmp2881:
	.quad	0
	.quad	0
.Ldebug_loc79:
	.quad	.Ltmp732-.Lfunc_begin1
	.quad	.Ltmp740-.Lfunc_begin1
	.short	.Ltmp2883-.Ltmp2882     # Loc expr size
.Ltmp2882:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2883:
	.quad	.Ltmp740-.Lfunc_begin1
	.quad	.Ltmp741-.Lfunc_begin1
	.short	.Ltmp2885-.Ltmp2884     # Loc expr size
.Ltmp2884:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230\177"              # -104
.Ltmp2885:
	.quad	.Ltmp741-.Lfunc_begin1
	.quad	.Lfunc_end12-.Lfunc_begin1
	.short	.Ltmp2887-.Ltmp2886     # Loc expr size
.Ltmp2886:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp2887:
	.quad	0
	.quad	0
.Ldebug_loc80:
	.quad	.Ltmp862-.Lfunc_begin1
	.quad	.Ltmp866-.Lfunc_begin1
	.short	.Ltmp2889-.Ltmp2888     # Loc expr size
.Ltmp2888:
	.byte	85                      # super-register DW_OP_reg5
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2889:
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Ltmp863-.Lfunc_begin1
	.quad	.Ltmp869-.Lfunc_begin1
	.short	.Ltmp2891-.Ltmp2890     # Loc expr size
.Ltmp2890:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2891:
	.quad	0
	.quad	0
.Ldebug_loc82:
	.quad	.Ltmp864-.Lfunc_begin1
	.quad	.Ltmp867-.Lfunc_begin1
	.short	.Ltmp2893-.Ltmp2892     # Loc expr size
.Ltmp2892:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2893:
	.quad	0
	.quad	0
.Ldebug_loc83:
	.quad	.Ltmp865-.Lfunc_begin1
	.quad	.Ltmp869-.Lfunc_begin1
	.short	.Ltmp2895-.Ltmp2894     # Loc expr size
.Ltmp2894:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2895:
	.quad	0
	.quad	0
.Ldebug_loc84:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Ltmp896-.Lfunc_begin1
	.short	.Ltmp2897-.Ltmp2896     # Loc expr size
.Ltmp2896:
	.byte	85                      # DW_OP_reg5
.Ltmp2897:
	.quad	.Ltmp896-.Lfunc_begin1
	.quad	.Ltmp905-.Lfunc_begin1
	.short	.Ltmp2899-.Ltmp2898     # Loc expr size
.Ltmp2898:
	.byte	92                      # DW_OP_reg12
.Ltmp2899:
	.quad	.Ltmp905-.Lfunc_begin1
	.quad	.Ltmp914-.Lfunc_begin1
	.short	.Ltmp2901-.Ltmp2900     # Loc expr size
.Ltmp2900:
	.byte	118                     # DW_OP_breg6
	.ascii	"\330|"                 # -424
.Ltmp2901:
	.quad	.Ltmp914-.Lfunc_begin1
	.quad	.Ltmp916-.Lfunc_begin1
	.short	.Ltmp2903-.Ltmp2902     # Loc expr size
.Ltmp2902:
	.byte	95                      # DW_OP_reg15
.Ltmp2903:
	.quad	.Ltmp916-.Lfunc_begin1
	.quad	.Ltmp928-.Lfunc_begin1
	.short	.Ltmp2905-.Ltmp2904     # Loc expr size
.Ltmp2904:
	.byte	118                     # DW_OP_breg6
	.ascii	"\330|"                 # -424
.Ltmp2905:
	.quad	.Ltmp928-.Lfunc_begin1
	.quad	.Ltmp929-.Lfunc_begin1
	.short	.Ltmp2907-.Ltmp2906     # Loc expr size
.Ltmp2906:
	.byte	88                      # DW_OP_reg8
.Ltmp2907:
	.quad	.Ltmp929-.Lfunc_begin1
	.quad	.Ltmp976-.Lfunc_begin1
	.short	.Ltmp2909-.Ltmp2908     # Loc expr size
.Ltmp2908:
	.byte	118                     # DW_OP_breg6
	.ascii	"\330|"                 # -424
.Ltmp2909:
	.quad	.Ltmp976-.Lfunc_begin1
	.quad	.Ltmp1013-.Lfunc_begin1
	.short	.Ltmp2911-.Ltmp2910     # Loc expr size
.Ltmp2910:
	.byte	85                      # DW_OP_reg5
.Ltmp2911:
	.quad	.Ltmp1013-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp2913-.Ltmp2912     # Loc expr size
.Ltmp2912:
	.byte	118                     # DW_OP_breg6
	.ascii	"\330|"                 # -424
.Ltmp2913:
	.quad	0
	.quad	0
.Ldebug_loc85:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Ltmp895-.Lfunc_begin1
	.short	.Ltmp2915-.Ltmp2914     # Loc expr size
.Ltmp2914:
	.byte	84                      # DW_OP_reg4
.Ltmp2915:
	.quad	.Ltmp895-.Lfunc_begin1
	.quad	.Ltmp904-.Lfunc_begin1
	.short	.Ltmp2917-.Ltmp2916     # Loc expr size
.Ltmp2916:
	.byte	95                      # DW_OP_reg15
.Ltmp2917:
	.quad	.Ltmp904-.Lfunc_begin1
	.quad	.Ltmp929-.Lfunc_begin1
	.short	.Ltmp2919-.Ltmp2918     # Loc expr size
.Ltmp2918:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2919:
	.quad	.Ltmp930-.Lfunc_begin1
	.quad	.Ltmp932-.Lfunc_begin1
	.short	.Ltmp2921-.Ltmp2920     # Loc expr size
.Ltmp2920:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2921:
	.quad	.Ltmp933-.Lfunc_begin1
	.quad	.Ltmp1155-.Lfunc_begin1
	.short	.Ltmp2923-.Ltmp2922     # Loc expr size
.Ltmp2922:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2923:
	.quad	.Ltmp1155-.Lfunc_begin1
	.quad	.Ltmp1157-.Lfunc_begin1
	.short	.Ltmp2925-.Ltmp2924     # Loc expr size
.Ltmp2924:
	.byte	83                      # DW_OP_reg3
.Ltmp2925:
	.quad	.Ltmp1157-.Lfunc_begin1
	.quad	.Ltmp1160-.Lfunc_begin1
	.short	.Ltmp2927-.Ltmp2926     # Loc expr size
.Ltmp2926:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2927:
	.quad	.Ltmp1160-.Lfunc_begin1
	.quad	.Ltmp1161-.Lfunc_begin1
	.short	.Ltmp2929-.Ltmp2928     # Loc expr size
.Ltmp2928:
	.byte	93                      # DW_OP_reg13
.Ltmp2929:
	.quad	.Ltmp1161-.Lfunc_begin1
	.quad	.Ltmp1163-.Lfunc_begin1
	.short	.Ltmp2931-.Ltmp2930     # Loc expr size
.Ltmp2930:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2931:
	.quad	.Ltmp1163-.Lfunc_begin1
	.quad	.Ltmp1165-.Lfunc_begin1
	.short	.Ltmp2933-.Ltmp2932     # Loc expr size
.Ltmp2932:
	.byte	83                      # DW_OP_reg3
.Ltmp2933:
	.quad	.Ltmp1165-.Lfunc_begin1
	.quad	.Ltmp1168-.Lfunc_begin1
	.short	.Ltmp2935-.Ltmp2934     # Loc expr size
.Ltmp2934:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2935:
	.quad	.Ltmp1168-.Lfunc_begin1
	.quad	.Ltmp1169-.Lfunc_begin1
	.short	.Ltmp2937-.Ltmp2936     # Loc expr size
.Ltmp2936:
	.byte	83                      # DW_OP_reg3
.Ltmp2937:
	.quad	.Ltmp1169-.Lfunc_begin1
	.quad	.Ltmp1187-.Lfunc_begin1
	.short	.Ltmp2939-.Ltmp2938     # Loc expr size
.Ltmp2938:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2939:
	.quad	.Ltmp1187-.Lfunc_begin1
	.quad	.Ltmp1195-.Lfunc_begin1
	.short	.Ltmp2941-.Ltmp2940     # Loc expr size
.Ltmp2940:
	.byte	95                      # DW_OP_reg15
.Ltmp2941:
	.quad	.Ltmp1195-.Lfunc_begin1
	.quad	.Ltmp1199-.Lfunc_begin1
	.short	.Ltmp2943-.Ltmp2942     # Loc expr size
.Ltmp2942:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2943:
	.quad	.Ltmp1199-.Lfunc_begin1
	.quad	.Ltmp1200-.Lfunc_begin1
	.short	.Ltmp2945-.Ltmp2944     # Loc expr size
.Ltmp2944:
	.byte	95                      # DW_OP_reg15
.Ltmp2945:
	.quad	.Ltmp1200-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp2947-.Ltmp2946     # Loc expr size
.Ltmp2946:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300|"                 # -448
.Ltmp2947:
	.quad	0
	.quad	0
.Ldebug_loc86:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Ltmp894-.Lfunc_begin1
	.short	.Ltmp2949-.Ltmp2948     # Loc expr size
.Ltmp2948:
	.byte	81                      # DW_OP_reg1
.Ltmp2949:
	.quad	.Ltmp894-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp2951-.Ltmp2950     # Loc expr size
.Ltmp2950:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360{"                 # -528
.Ltmp2951:
	.quad	0
	.quad	0
.Ldebug_loc87:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Ltmp893-.Lfunc_begin1
	.short	.Ltmp2953-.Ltmp2952     # Loc expr size
.Ltmp2952:
	.byte	82                      # DW_OP_reg2
.Ltmp2953:
	.quad	.Ltmp893-.Lfunc_begin1
	.quad	.Ltmp915-.Lfunc_begin1
	.short	.Ltmp2955-.Ltmp2954     # Loc expr size
.Ltmp2954:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200~"                 # -256
.Ltmp2955:
	.quad	.Ltmp915-.Lfunc_begin1
	.quad	.Ltmp917-.Lfunc_begin1
	.short	.Ltmp2957-.Ltmp2956     # Loc expr size
.Ltmp2956:
	.byte	94                      # DW_OP_reg14
.Ltmp2957:
	.quad	.Ltmp917-.Lfunc_begin1
	.quad	.Ltmp951-.Lfunc_begin1
	.short	.Ltmp2959-.Ltmp2958     # Loc expr size
.Ltmp2958:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200~"                 # -256
.Ltmp2959:
	.quad	.Ltmp951-.Lfunc_begin1
	.quad	.Ltmp954-.Lfunc_begin1
	.short	.Ltmp2961-.Ltmp2960     # Loc expr size
.Ltmp2960:
	.byte	93                      # DW_OP_reg13
.Ltmp2961:
	.quad	.Ltmp954-.Lfunc_begin1
	.quad	.Ltmp1017-.Lfunc_begin1
	.short	.Ltmp2963-.Ltmp2962     # Loc expr size
.Ltmp2962:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200~"                 # -256
.Ltmp2963:
	.quad	.Ltmp1017-.Lfunc_begin1
	.quad	.Ltmp1129-.Lfunc_begin1
	.short	.Ltmp2965-.Ltmp2964     # Loc expr size
.Ltmp2964:
	.byte	92                      # DW_OP_reg12
.Ltmp2965:
	.quad	.Ltmp1129-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp2967-.Ltmp2966     # Loc expr size
.Ltmp2966:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200~"                 # -256
.Ltmp2967:
	.quad	0
	.quad	0
.Ldebug_loc88:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Ltmp892-.Lfunc_begin1
	.short	.Ltmp2969-.Ltmp2968     # Loc expr size
.Ltmp2968:
	.byte	88                      # super-register DW_OP_reg8
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2969:
	.quad	.Ltmp892-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp2971-.Ltmp2970     # Loc expr size
.Ltmp2970:
	.byte	118                     # DW_OP_breg6
	.ascii	"\254\177"              # -84
.Ltmp2971:
	.quad	0
	.quad	0
.Ldebug_loc89:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Ltmp891-.Lfunc_begin1
	.short	.Ltmp2973-.Ltmp2972     # Loc expr size
.Ltmp2972:
	.byte	89                      # super-register DW_OP_reg9
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2973:
	.quad	.Ltmp891-.Lfunc_begin1
	.quad	.Ltmp899-.Lfunc_begin1
	.short	.Ltmp2975-.Ltmp2974     # Loc expr size
.Ltmp2974:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2975:
	.quad	.Ltmp906-.Lfunc_begin1
	.quad	.Ltmp907-.Lfunc_begin1
	.short	.Ltmp2977-.Ltmp2976     # Loc expr size
.Ltmp2976:
	.byte	118                     # DW_OP_breg6
	.ascii	"\224{"                 # -620
.Ltmp2977:
	.quad	.Ltmp907-.Lfunc_begin1
	.quad	.Ltmp909-.Lfunc_begin1
	.short	.Ltmp2979-.Ltmp2978     # Loc expr size
.Ltmp2978:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2979:
	.quad	.Ltmp909-.Lfunc_begin1
	.quad	.Ltmp922-.Lfunc_begin1
	.short	.Ltmp2981-.Ltmp2980     # Loc expr size
.Ltmp2980:
	.byte	118                     # DW_OP_breg6
	.ascii	"\224{"                 # -620
.Ltmp2981:
	.quad	.Ltmp922-.Lfunc_begin1
	.quad	.Ltmp923-.Lfunc_begin1
	.short	.Ltmp2983-.Ltmp2982     # Loc expr size
.Ltmp2982:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2983:
	.quad	.Ltmp930-.Lfunc_begin1
	.quad	.Ltmp931-.Lfunc_begin1
	.short	.Ltmp2985-.Ltmp2984     # Loc expr size
.Ltmp2984:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2985:
	.quad	.Ltmp932-.Lfunc_begin1
	.quad	.Ltmp935-.Lfunc_begin1
	.short	.Ltmp2987-.Ltmp2986     # Loc expr size
.Ltmp2986:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2987:
	.quad	.Ltmp936-.Lfunc_begin1
	.quad	.Ltmp937-.Lfunc_begin1
	.short	.Ltmp2989-.Ltmp2988     # Loc expr size
.Ltmp2988:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2989:
	.quad	.Ltmp938-.Lfunc_begin1
	.quad	.Ltmp940-.Lfunc_begin1
	.short	.Ltmp2991-.Ltmp2990     # Loc expr size
.Ltmp2990:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2991:
	.quad	.Ltmp942-.Lfunc_begin1
	.quad	.Ltmp945-.Lfunc_begin1
	.short	.Ltmp2993-.Ltmp2992     # Loc expr size
.Ltmp2992:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2993:
	.quad	.Ltmp946-.Lfunc_begin1
	.quad	.Ltmp948-.Lfunc_begin1
	.short	.Ltmp2995-.Ltmp2994     # Loc expr size
.Ltmp2994:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2995:
	.quad	.Ltmp948-.Lfunc_begin1
	.quad	.Ltmp974-.Lfunc_begin1
	.short	.Ltmp2997-.Ltmp2996     # Loc expr size
.Ltmp2996:
	.byte	118                     # DW_OP_breg6
	.ascii	"\224{"                 # -620
.Ltmp2997:
	.quad	.Ltmp974-.Lfunc_begin1
	.quad	.Ltmp975-.Lfunc_begin1
	.short	.Ltmp2999-.Ltmp2998     # Loc expr size
.Ltmp2998:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp2999:
	.quad	.Ltmp975-.Lfunc_begin1
	.quad	.Ltmp1140-.Lfunc_begin1
	.short	.Ltmp3001-.Ltmp3000     # Loc expr size
.Ltmp3000:
	.byte	118                     # DW_OP_breg6
	.ascii	"\224{"                 # -620
.Ltmp3001:
	.quad	.Ltmp1140-.Lfunc_begin1
	.quad	.Ltmp1142-.Lfunc_begin1
	.short	.Ltmp3003-.Ltmp3002     # Loc expr size
.Ltmp3002:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3003:
	.quad	.Ltmp1143-.Lfunc_begin1
	.quad	.Ltmp1146-.Lfunc_begin1
	.short	.Ltmp3005-.Ltmp3004     # Loc expr size
.Ltmp3004:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3005:
	.quad	.Ltmp1148-.Lfunc_begin1
	.quad	.Ltmp1149-.Lfunc_begin1
	.short	.Ltmp3007-.Ltmp3006     # Loc expr size
.Ltmp3006:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3007:
	.quad	.Ltmp1153-.Lfunc_begin1
	.quad	.Ltmp1155-.Lfunc_begin1
	.short	.Ltmp3009-.Ltmp3008     # Loc expr size
.Ltmp3008:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3009:
	.quad	.Ltmp1158-.Lfunc_begin1
	.quad	.Ltmp1163-.Lfunc_begin1
	.short	.Ltmp3011-.Ltmp3010     # Loc expr size
.Ltmp3010:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3011:
	.quad	.Ltmp1166-.Lfunc_begin1
	.quad	.Ltmp1168-.Lfunc_begin1
	.short	.Ltmp3013-.Ltmp3012     # Loc expr size
.Ltmp3012:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3013:
	.quad	.Ltmp1170-.Lfunc_begin1
	.quad	.Ltmp1171-.Lfunc_begin1
	.short	.Ltmp3015-.Ltmp3014     # Loc expr size
.Ltmp3014:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3015:
	.quad	.Ltmp1172-.Lfunc_begin1
	.quad	.Ltmp1185-.Lfunc_begin1
	.short	.Ltmp3017-.Ltmp3016     # Loc expr size
.Ltmp3016:
	.byte	118                     # DW_OP_breg6
	.ascii	"\224{"                 # -620
.Ltmp3017:
	.quad	.Ltmp1186-.Lfunc_begin1
	.quad	.Ltmp1196-.Lfunc_begin1
	.short	.Ltmp3019-.Ltmp3018     # Loc expr size
.Ltmp3018:
	.byte	118                     # DW_OP_breg6
	.ascii	"\224{"                 # -620
.Ltmp3019:
	.quad	.Ltmp1196-.Lfunc_begin1
	.quad	.Ltmp1198-.Lfunc_begin1
	.short	.Ltmp3021-.Ltmp3020     # Loc expr size
.Ltmp3020:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3021:
	.quad	.Ltmp1201-.Lfunc_begin1
	.quad	.Ltmp1202-.Lfunc_begin1
	.short	.Ltmp3023-.Ltmp3022     # Loc expr size
.Ltmp3022:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3023:
	.quad	0
	.quad	0
.Ldebug_loc90:
	.quad	.Lfunc_begin13-.Lfunc_begin1
	.quad	.Ltmp901-.Lfunc_begin1
	.short	.Ltmp3025-.Ltmp3024     # Loc expr size
.Ltmp3024:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3025:
	.quad	.Ltmp925-.Lfunc_begin1
	.quad	.Ltmp926-.Lfunc_begin1
	.short	.Ltmp3027-.Ltmp3026     # Loc expr size
.Ltmp3026:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3027:
	.quad	0
	.quad	0
.Ldebug_loc91:
	.quad	.Ltmp898-.Lfunc_begin1
	.quad	.Ltmp924-.Lfunc_begin1
	.short	.Ltmp3029-.Ltmp3028     # Loc expr size
.Ltmp3028:
	.byte	17                      # DW_OP_consts
	.byte	3                       # 3
	.byte	159                     # DW_OP_stack_value
.Ltmp3029:
	.quad	.Ltmp924-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3031-.Ltmp3030     # Loc expr size
.Ltmp3030:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp3031:
	.quad	0
	.quad	0
.Ldebug_loc92:
	.quad	.Ltmp906-.Lfunc_begin1
	.quad	.Ltmp930-.Lfunc_begin1
	.short	.Ltmp3033-.Ltmp3032     # Loc expr size
.Ltmp3032:
	.byte	17                      # DW_OP_consts
	.byte	3                       # 3
	.byte	159                     # DW_OP_stack_value
.Ltmp3033:
	.quad	.Ltmp930-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3035-.Ltmp3034     # Loc expr size
.Ltmp3034:
	.byte	17                      # DW_OP_consts
	.byte	4                       # 4
	.byte	159                     # DW_OP_stack_value
.Ltmp3035:
	.quad	0
	.quad	0
.Ldebug_loc93:
	.quad	.Ltmp912-.Lfunc_begin1
	.quad	.Ltmp918-.Lfunc_begin1
	.short	.Ltmp3037-.Ltmp3036     # Loc expr size
.Ltmp3036:
	.byte	17                      # DW_OP_consts
	.asciz	"\344"                  # 100
	.byte	159                     # DW_OP_stack_value
.Ltmp3037:
	.quad	.Ltmp918-.Lfunc_begin1
	.quad	.Ltmp921-.Lfunc_begin1
	.short	.Ltmp3039-.Ltmp3038     # Loc expr size
.Ltmp3038:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3039:
	.quad	.Ltmp944-.Lfunc_begin1
	.quad	.Ltmp947-.Lfunc_begin1
	.short	.Ltmp3041-.Ltmp3040     # Loc expr size
.Ltmp3040:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3041:
	.quad	.Ltmp947-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3043-.Ltmp3042     # Loc expr size
.Ltmp3042:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300}"                 # -320
.Ltmp3043:
	.quad	0
	.quad	0
.Ldebug_loc94:
	.quad	.Ltmp949-.Lfunc_begin1
	.quad	.Ltmp957-.Lfunc_begin1
	.short	.Ltmp3045-.Ltmp3044     # Loc expr size
.Ltmp3044:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3045:
	.quad	.Ltmp957-.Lfunc_begin1
	.quad	.Ltmp958-.Lfunc_begin1
	.short	.Ltmp3047-.Ltmp3046     # Loc expr size
.Ltmp3046:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3047:
	.quad	.Ltmp959-.Lfunc_begin1
	.quad	.Ltmp960-.Lfunc_begin1
	.short	.Ltmp3049-.Ltmp3048     # Loc expr size
.Ltmp3048:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3049:
	.quad	.Ltmp961-.Lfunc_begin1
	.quad	.Ltmp973-.Lfunc_begin1
	.short	.Ltmp3051-.Ltmp3050     # Loc expr size
.Ltmp3050:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3051:
	.quad	.Ltmp1015-.Lfunc_begin1
	.quad	.Ltmp1123-.Lfunc_begin1
	.short	.Ltmp3053-.Ltmp3052     # Loc expr size
.Ltmp3052:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3053:
	.quad	.Ltmp1123-.Lfunc_begin1
	.quad	.Ltmp1124-.Lfunc_begin1
	.short	.Ltmp3055-.Ltmp3054     # Loc expr size
.Ltmp3054:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3055:
	.quad	.Ltmp1125-.Lfunc_begin1
	.quad	.Ltmp1130-.Lfunc_begin1
	.short	.Ltmp3057-.Ltmp3056     # Loc expr size
.Ltmp3056:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310|"                 # -440
.Ltmp3057:
	.quad	.Ltmp1130-.Lfunc_begin1
	.quad	.Ltmp1131-.Lfunc_begin1
	.short	.Ltmp3059-.Ltmp3058     # Loc expr size
.Ltmp3058:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3059:
	.quad	0
	.quad	0
.Ldebug_loc95:
	.quad	.Ltmp949-.Lfunc_begin1
	.quad	.Ltmp952-.Lfunc_begin1
	.short	.Ltmp3061-.Ltmp3060     # Loc expr size
.Ltmp3060:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3061:
	.quad	.Ltmp952-.Lfunc_begin1
	.quad	.Ltmp953-.Lfunc_begin1
	.short	.Ltmp3063-.Ltmp3062     # Loc expr size
.Ltmp3062:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3063:
	.quad	.Ltmp955-.Lfunc_begin1
	.quad	.Ltmp956-.Lfunc_begin1
	.short	.Ltmp3065-.Ltmp3064     # Loc expr size
.Ltmp3064:
	.byte	84                      # super-register DW_OP_reg4
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3065:
	.quad	.Ltmp956-.Lfunc_begin1
	.quad	.Ltmp974-.Lfunc_begin1
	.short	.Ltmp3067-.Ltmp3066     # Loc expr size
.Ltmp3066:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3067:
	.quad	.Ltmp1015-.Lfunc_begin1
	.quad	.Ltmp1132-.Lfunc_begin1
	.short	.Ltmp3069-.Ltmp3068     # Loc expr size
.Ltmp3068:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3069:
	.quad	.Ltmp1132-.Lfunc_begin1
	.quad	.Ltmp1133-.Lfunc_begin1
	.short	.Ltmp3071-.Ltmp3070     # Loc expr size
.Ltmp3070:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3071:
	.quad	.Ltmp1134-.Lfunc_begin1
	.quad	.Ltmp1135-.Lfunc_begin1
	.short	.Ltmp3073-.Ltmp3072     # Loc expr size
.Ltmp3072:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3073:
	.quad	.Ltmp1139-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3075-.Ltmp3074     # Loc expr size
.Ltmp3074:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3075:
	.quad	0
	.quad	0
.Ldebug_loc96:
	.quad	.Ltmp963-.Lfunc_begin1
	.quad	.Ltmp964-.Lfunc_begin1
	.short	.Ltmp3077-.Ltmp3076     # Loc expr size
.Ltmp3076:
	.byte	97                      # DW_OP_reg17
.Ltmp3077:
	.quad	.Ltmp971-.Lfunc_begin1
	.quad	.Ltmp972-.Lfunc_begin1
	.short	.Ltmp3079-.Ltmp3078     # Loc expr size
.Ltmp3078:
	.byte	98                      # DW_OP_reg18
.Ltmp3079:
	.quad	.Ltmp972-.Lfunc_begin1
	.quad	.Ltmp1137-.Lfunc_begin1
	.short	.Ltmp3081-.Ltmp3080     # Loc expr size
.Ltmp3080:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp3081:
	.quad	.Ltmp1137-.Lfunc_begin1
	.quad	.Ltmp1138-.Lfunc_begin1
	.short	.Ltmp3083-.Ltmp3082     # Loc expr size
.Ltmp3082:
	.byte	98                      # DW_OP_reg18
.Ltmp3083:
	.quad	.Ltmp1138-.Lfunc_begin1
	.quad	.Ltmp1139-.Lfunc_begin1
	.short	.Ltmp3085-.Ltmp3084     # Loc expr size
.Ltmp3084:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp3085:
	.quad	.Ltmp1139-.Lfunc_begin1
	.quad	.Ltmp1175-.Lfunc_begin1
	.short	.Ltmp3087-.Ltmp3086     # Loc expr size
.Ltmp3086:
.Ltmp3087:
	.quad	.Ltmp1176-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3089-.Ltmp3088     # Loc expr size
.Ltmp3088:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp3089:
	.quad	0
	.quad	0
.Ldebug_loc97:
	.quad	.Ltmp967-.Lfunc_begin1
	.quad	.Ltmp974-.Lfunc_begin1
	.short	.Ltmp3091-.Ltmp3090     # Loc expr size
.Ltmp3090:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3091:
	.quad	.Ltmp974-.Lfunc_begin1
	.quad	.Ltmp1172-.Lfunc_begin1
	.short	.Ltmp3093-.Ltmp3092     # Loc expr size
.Ltmp3092:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3093:
	.quad	.Ltmp1172-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3095-.Ltmp3094     # Loc expr size
.Ltmp3094:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3095:
	.quad	0
	.quad	0
.Ldebug_loc98:
	.quad	.Ltmp977-.Lfunc_begin1
	.quad	.Ltmp978-.Lfunc_begin1
	.short	.Ltmp3097-.Ltmp3096     # Loc expr size
.Ltmp3096:
	.byte	95                      # DW_OP_reg15
.Ltmp3097:
	.quad	.Ltmp978-.Lfunc_begin1
	.quad	.Ltmp979-.Lfunc_begin1
	.short	.Ltmp3099-.Ltmp3098     # Loc expr size
.Ltmp3098:
	.byte	94                      # DW_OP_reg14
.Ltmp3099:
	.quad	.Ltmp979-.Lfunc_begin1
	.quad	.Ltmp980-.Lfunc_begin1
	.short	.Ltmp3101-.Ltmp3100     # Loc expr size
.Ltmp3100:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210|"                 # -504
.Ltmp3101:
	.quad	.Ltmp980-.Lfunc_begin1
	.quad	.Ltmp981-.Lfunc_begin1
	.short	.Ltmp3103-.Ltmp3102     # Loc expr size
.Ltmp3102:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250}"                 # -344
.Ltmp3103:
	.quad	.Ltmp981-.Lfunc_begin1
	.quad	.Ltmp982-.Lfunc_begin1
	.short	.Ltmp3105-.Ltmp3104     # Loc expr size
.Ltmp3104:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp3105:
	.quad	.Ltmp982-.Lfunc_begin1
	.quad	.Ltmp983-.Lfunc_begin1
	.short	.Ltmp3107-.Ltmp3106     # Loc expr size
.Ltmp3106:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350{"                 # -536
.Ltmp3107:
	.quad	.Ltmp983-.Lfunc_begin1
	.quad	.Ltmp984-.Lfunc_begin1
	.short	.Ltmp3109-.Ltmp3108     # Loc expr size
.Ltmp3108:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320}"                 # -304
.Ltmp3109:
	.quad	.Ltmp984-.Lfunc_begin1
	.quad	.Ltmp985-.Lfunc_begin1
	.short	.Ltmp3111-.Ltmp3110     # Loc expr size
.Ltmp3110:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310}"                 # -312
.Ltmp3111:
	.quad	.Ltmp985-.Lfunc_begin1
	.quad	.Ltmp986-.Lfunc_begin1
	.short	.Ltmp3113-.Ltmp3112     # Loc expr size
.Ltmp3112:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3113:
	.quad	.Ltmp986-.Lfunc_begin1
	.quad	.Ltmp987-.Lfunc_begin1
	.short	.Ltmp3115-.Ltmp3114     # Loc expr size
.Ltmp3114:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp3115:
	.quad	.Ltmp987-.Lfunc_begin1
	.quad	.Ltmp988-.Lfunc_begin1
	.short	.Ltmp3117-.Ltmp3116     # Loc expr size
.Ltmp3116:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300}"                 # -320
.Ltmp3117:
	.quad	.Ltmp988-.Lfunc_begin1
	.quad	.Ltmp989-.Lfunc_begin1
	.short	.Ltmp3119-.Ltmp3118     # Loc expr size
.Ltmp3118:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250{"                 # -600
.Ltmp3119:
	.quad	.Ltmp989-.Lfunc_begin1
	.quad	.Ltmp990-.Lfunc_begin1
	.short	.Ltmp3121-.Ltmp3120     # Loc expr size
.Ltmp3120:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270}"                 # -328
.Ltmp3121:
	.quad	.Ltmp990-.Lfunc_begin1
	.quad	.Ltmp991-.Lfunc_begin1
	.short	.Ltmp3123-.Ltmp3122     # Loc expr size
.Ltmp3122:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360|"                 # -400
.Ltmp3123:
	.quad	.Ltmp991-.Lfunc_begin1
	.quad	.Ltmp992-.Lfunc_begin1
	.short	.Ltmp3125-.Ltmp3124     # Loc expr size
.Ltmp3124:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260}"                 # -336
.Ltmp3125:
	.quad	.Ltmp992-.Lfunc_begin1
	.quad	.Ltmp993-.Lfunc_begin1
	.short	.Ltmp3127-.Ltmp3126     # Loc expr size
.Ltmp3126:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240{"                 # -608
.Ltmp3127:
	.quad	.Ltmp993-.Lfunc_begin1
	.quad	.Ltmp994-.Lfunc_begin1
	.short	.Ltmp3129-.Ltmp3128     # Loc expr size
.Ltmp3128:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260{"                 # -592
.Ltmp3129:
	.quad	.Ltmp994-.Lfunc_begin1
	.quad	.Ltmp995-.Lfunc_begin1
	.short	.Ltmp3131-.Ltmp3130     # Loc expr size
.Ltmp3130:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270{"                 # -584
.Ltmp3131:
	.quad	.Ltmp995-.Lfunc_begin1
	.quad	.Ltmp996-.Lfunc_begin1
	.short	.Ltmp3133-.Ltmp3132     # Loc expr size
.Ltmp3132:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300{"                 # -576
.Ltmp3133:
	.quad	.Ltmp996-.Lfunc_begin1
	.quad	.Ltmp997-.Lfunc_begin1
	.short	.Ltmp3135-.Ltmp3134     # Loc expr size
.Ltmp3134:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320{"                 # -560
.Ltmp3135:
	.quad	.Ltmp997-.Lfunc_begin1
	.quad	.Ltmp998-.Lfunc_begin1
	.short	.Ltmp3137-.Ltmp3136     # Loc expr size
.Ltmp3136:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340{"                 # -544
.Ltmp3137:
	.quad	.Ltmp998-.Lfunc_begin1
	.quad	.Ltmp999-.Lfunc_begin1
	.short	.Ltmp3139-.Ltmp3138     # Loc expr size
.Ltmp3138:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240}"                 # -352
.Ltmp3139:
	.quad	.Ltmp999-.Lfunc_begin1
	.quad	.Ltmp1000-.Lfunc_begin1
	.short	.Ltmp3141-.Ltmp3140     # Loc expr size
.Ltmp3140:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230}"                 # -360
.Ltmp3141:
	.quad	.Ltmp1000-.Lfunc_begin1
	.quad	.Ltmp1001-.Lfunc_begin1
	.short	.Ltmp3143-.Ltmp3142     # Loc expr size
.Ltmp3142:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210}"                 # -376
.Ltmp3143:
	.quad	.Ltmp1001-.Lfunc_begin1
	.quad	.Ltmp1002-.Lfunc_begin1
	.short	.Ltmp3145-.Ltmp3144     # Loc expr size
.Ltmp3144:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370{"                 # -520
.Ltmp3145:
	.quad	.Ltmp1002-.Lfunc_begin1
	.quad	.Ltmp1003-.Lfunc_begin1
	.short	.Ltmp3147-.Ltmp3146     # Loc expr size
.Ltmp3146:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220}"                 # -368
.Ltmp3147:
	.quad	.Ltmp1003-.Lfunc_begin1
	.quad	.Ltmp1004-.Lfunc_begin1
	.short	.Ltmp3149-.Ltmp3148     # Loc expr size
.Ltmp3148:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200|"                 # -512
.Ltmp3149:
	.quad	.Ltmp1004-.Lfunc_begin1
	.quad	.Ltmp1005-.Lfunc_begin1
	.short	.Ltmp3151-.Ltmp3150     # Loc expr size
.Ltmp3150:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370|"                 # -392
.Ltmp3151:
	.quad	.Ltmp1005-.Lfunc_begin1
	.quad	.Ltmp1006-.Lfunc_begin1
	.short	.Ltmp3153-.Ltmp3152     # Loc expr size
.Ltmp3152:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200}"                 # -384
.Ltmp3153:
	.quad	.Ltmp1006-.Lfunc_begin1
	.quad	.Ltmp1007-.Lfunc_begin1
	.short	.Ltmp3155-.Ltmp3154     # Loc expr size
.Ltmp3154:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220|"                 # -496
.Ltmp3155:
	.quad	.Ltmp1007-.Lfunc_begin1
	.quad	.Ltmp1008-.Lfunc_begin1
	.short	.Ltmp3157-.Ltmp3156     # Loc expr size
.Ltmp3156:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230|"                 # -488
.Ltmp3157:
	.quad	.Ltmp1008-.Lfunc_begin1
	.quad	.Ltmp1009-.Lfunc_begin1
	.short	.Ltmp3159-.Ltmp3158     # Loc expr size
.Ltmp3158:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350|"                 # -408
.Ltmp3159:
	.quad	.Ltmp1009-.Lfunc_begin1
	.quad	.Ltmp1010-.Lfunc_begin1
	.short	.Ltmp3161-.Ltmp3160     # Loc expr size
.Ltmp3160:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240\177"              # -96
.Ltmp3161:
	.quad	.Ltmp1010-.Lfunc_begin1
	.quad	.Ltmp1011-.Lfunc_begin1
	.short	.Ltmp3163-.Ltmp3162     # Loc expr size
.Ltmp3162:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240|"                 # -480
.Ltmp3163:
	.quad	.Ltmp1011-.Lfunc_begin1
	.quad	.Ltmp1012-.Lfunc_begin1
	.short	.Ltmp3165-.Ltmp3164     # Loc expr size
.Ltmp3164:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250|"                 # -472
.Ltmp3165:
	.quad	.Ltmp1012-.Lfunc_begin1
	.quad	.Ltmp1015-.Lfunc_begin1
	.short	.Ltmp3167-.Ltmp3166     # Loc expr size
.Ltmp3166:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260|"                 # -464
.Ltmp3167:
	.quad	.Ltmp1015-.Lfunc_begin1
	.quad	.Ltmp1018-.Lfunc_begin1
	.short	.Ltmp3169-.Ltmp3168     # Loc expr size
.Ltmp3168:
	.byte	95                      # DW_OP_reg15
.Ltmp3169:
	.quad	.Ltmp1019-.Lfunc_begin1
	.quad	.Ltmp1020-.Lfunc_begin1
	.short	.Ltmp3171-.Ltmp3170     # Loc expr size
.Ltmp3170:
	.byte	94                      # DW_OP_reg14
.Ltmp3171:
	.quad	.Ltmp1021-.Lfunc_begin1
	.quad	.Ltmp1022-.Lfunc_begin1
	.short	.Ltmp3173-.Ltmp3172     # Loc expr size
.Ltmp3172:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210|"                 # -504
.Ltmp3173:
	.quad	.Ltmp1022-.Lfunc_begin1
	.quad	.Ltmp1023-.Lfunc_begin1
	.short	.Ltmp3175-.Ltmp3174     # Loc expr size
.Ltmp3174:
	.byte	83                      # DW_OP_reg3
.Ltmp3175:
	.quad	.Ltmp1024-.Lfunc_begin1
	.quad	.Ltmp1025-.Lfunc_begin1
	.short	.Ltmp3177-.Ltmp3176     # Loc expr size
.Ltmp3176:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250}"                 # -344
.Ltmp3177:
	.quad	.Ltmp1025-.Lfunc_begin1
	.quad	.Ltmp1026-.Lfunc_begin1
	.short	.Ltmp3179-.Ltmp3178     # Loc expr size
.Ltmp3178:
	.byte	83                      # DW_OP_reg3
.Ltmp3179:
	.quad	.Ltmp1027-.Lfunc_begin1
	.quad	.Ltmp1028-.Lfunc_begin1
	.short	.Ltmp3181-.Ltmp3180     # Loc expr size
.Ltmp3180:
	.byte	118                     # DW_OP_breg6
	.byte	64                      # -64
.Ltmp3181:
	.quad	.Ltmp1028-.Lfunc_begin1
	.quad	.Ltmp1029-.Lfunc_begin1
	.short	.Ltmp3183-.Ltmp3182     # Loc expr size
.Ltmp3182:
	.byte	83                      # DW_OP_reg3
.Ltmp3183:
	.quad	.Ltmp1030-.Lfunc_begin1
	.quad	.Ltmp1031-.Lfunc_begin1
	.short	.Ltmp3185-.Ltmp3184     # Loc expr size
.Ltmp3184:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350{"                 # -536
.Ltmp3185:
	.quad	.Ltmp1031-.Lfunc_begin1
	.quad	.Ltmp1032-.Lfunc_begin1
	.short	.Ltmp3187-.Ltmp3186     # Loc expr size
.Ltmp3186:
	.byte	83                      # DW_OP_reg3
.Ltmp3187:
	.quad	.Ltmp1033-.Lfunc_begin1
	.quad	.Ltmp1034-.Lfunc_begin1
	.short	.Ltmp3189-.Ltmp3188     # Loc expr size
.Ltmp3188:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320}"                 # -304
.Ltmp3189:
	.quad	.Ltmp1034-.Lfunc_begin1
	.quad	.Ltmp1035-.Lfunc_begin1
	.short	.Ltmp3191-.Ltmp3190     # Loc expr size
.Ltmp3190:
	.byte	83                      # DW_OP_reg3
.Ltmp3191:
	.quad	.Ltmp1036-.Lfunc_begin1
	.quad	.Ltmp1037-.Lfunc_begin1
	.short	.Ltmp3193-.Ltmp3192     # Loc expr size
.Ltmp3192:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310}"                 # -312
.Ltmp3193:
	.quad	.Ltmp1037-.Lfunc_begin1
	.quad	.Ltmp1038-.Lfunc_begin1
	.short	.Ltmp3195-.Ltmp3194     # Loc expr size
.Ltmp3194:
	.byte	83                      # DW_OP_reg3
.Ltmp3195:
	.quad	.Ltmp1039-.Lfunc_begin1
	.quad	.Ltmp1040-.Lfunc_begin1
	.short	.Ltmp3197-.Ltmp3196     # Loc expr size
.Ltmp3196:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3197:
	.quad	.Ltmp1040-.Lfunc_begin1
	.quad	.Ltmp1041-.Lfunc_begin1
	.short	.Ltmp3199-.Ltmp3198     # Loc expr size
.Ltmp3198:
	.byte	83                      # DW_OP_reg3
.Ltmp3199:
	.quad	.Ltmp1042-.Lfunc_begin1
	.quad	.Ltmp1043-.Lfunc_begin1
	.short	.Ltmp3201-.Ltmp3200     # Loc expr size
.Ltmp3200:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp3201:
	.quad	.Ltmp1043-.Lfunc_begin1
	.quad	.Ltmp1044-.Lfunc_begin1
	.short	.Ltmp3203-.Ltmp3202     # Loc expr size
.Ltmp3202:
	.byte	83                      # DW_OP_reg3
.Ltmp3203:
	.quad	.Ltmp1045-.Lfunc_begin1
	.quad	.Ltmp1046-.Lfunc_begin1
	.short	.Ltmp3205-.Ltmp3204     # Loc expr size
.Ltmp3204:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300}"                 # -320
.Ltmp3205:
	.quad	.Ltmp1046-.Lfunc_begin1
	.quad	.Ltmp1047-.Lfunc_begin1
	.short	.Ltmp3207-.Ltmp3206     # Loc expr size
.Ltmp3206:
	.byte	83                      # DW_OP_reg3
.Ltmp3207:
	.quad	.Ltmp1048-.Lfunc_begin1
	.quad	.Ltmp1049-.Lfunc_begin1
	.short	.Ltmp3209-.Ltmp3208     # Loc expr size
.Ltmp3208:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250{"                 # -600
.Ltmp3209:
	.quad	.Ltmp1049-.Lfunc_begin1
	.quad	.Ltmp1050-.Lfunc_begin1
	.short	.Ltmp3211-.Ltmp3210     # Loc expr size
.Ltmp3210:
	.byte	83                      # DW_OP_reg3
.Ltmp3211:
	.quad	.Ltmp1051-.Lfunc_begin1
	.quad	.Ltmp1052-.Lfunc_begin1
	.short	.Ltmp3213-.Ltmp3212     # Loc expr size
.Ltmp3212:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270}"                 # -328
.Ltmp3213:
	.quad	.Ltmp1052-.Lfunc_begin1
	.quad	.Ltmp1053-.Lfunc_begin1
	.short	.Ltmp3215-.Ltmp3214     # Loc expr size
.Ltmp3214:
	.byte	83                      # DW_OP_reg3
.Ltmp3215:
	.quad	.Ltmp1054-.Lfunc_begin1
	.quad	.Ltmp1055-.Lfunc_begin1
	.short	.Ltmp3217-.Ltmp3216     # Loc expr size
.Ltmp3216:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360|"                 # -400
.Ltmp3217:
	.quad	.Ltmp1055-.Lfunc_begin1
	.quad	.Ltmp1056-.Lfunc_begin1
	.short	.Ltmp3219-.Ltmp3218     # Loc expr size
.Ltmp3218:
	.byte	83                      # DW_OP_reg3
.Ltmp3219:
	.quad	.Ltmp1057-.Lfunc_begin1
	.quad	.Ltmp1058-.Lfunc_begin1
	.short	.Ltmp3221-.Ltmp3220     # Loc expr size
.Ltmp3220:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260}"                 # -336
.Ltmp3221:
	.quad	.Ltmp1058-.Lfunc_begin1
	.quad	.Ltmp1059-.Lfunc_begin1
	.short	.Ltmp3223-.Ltmp3222     # Loc expr size
.Ltmp3222:
	.byte	83                      # DW_OP_reg3
.Ltmp3223:
	.quad	.Ltmp1060-.Lfunc_begin1
	.quad	.Ltmp1061-.Lfunc_begin1
	.short	.Ltmp3225-.Ltmp3224     # Loc expr size
.Ltmp3224:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240{"                 # -608
.Ltmp3225:
	.quad	.Ltmp1061-.Lfunc_begin1
	.quad	.Ltmp1062-.Lfunc_begin1
	.short	.Ltmp3227-.Ltmp3226     # Loc expr size
.Ltmp3226:
	.byte	83                      # DW_OP_reg3
.Ltmp3227:
	.quad	.Ltmp1063-.Lfunc_begin1
	.quad	.Ltmp1064-.Lfunc_begin1
	.short	.Ltmp3229-.Ltmp3228     # Loc expr size
.Ltmp3228:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260{"                 # -592
.Ltmp3229:
	.quad	.Ltmp1064-.Lfunc_begin1
	.quad	.Ltmp1065-.Lfunc_begin1
	.short	.Ltmp3231-.Ltmp3230     # Loc expr size
.Ltmp3230:
	.byte	83                      # DW_OP_reg3
.Ltmp3231:
	.quad	.Ltmp1066-.Lfunc_begin1
	.quad	.Ltmp1067-.Lfunc_begin1
	.short	.Ltmp3233-.Ltmp3232     # Loc expr size
.Ltmp3232:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270{"                 # -584
.Ltmp3233:
	.quad	.Ltmp1067-.Lfunc_begin1
	.quad	.Ltmp1068-.Lfunc_begin1
	.short	.Ltmp3235-.Ltmp3234     # Loc expr size
.Ltmp3234:
	.byte	83                      # DW_OP_reg3
.Ltmp3235:
	.quad	.Ltmp1069-.Lfunc_begin1
	.quad	.Ltmp1070-.Lfunc_begin1
	.short	.Ltmp3237-.Ltmp3236     # Loc expr size
.Ltmp3236:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300{"                 # -576
.Ltmp3237:
	.quad	.Ltmp1070-.Lfunc_begin1
	.quad	.Ltmp1071-.Lfunc_begin1
	.short	.Ltmp3239-.Ltmp3238     # Loc expr size
.Ltmp3238:
	.byte	83                      # DW_OP_reg3
.Ltmp3239:
	.quad	.Ltmp1072-.Lfunc_begin1
	.quad	.Ltmp1073-.Lfunc_begin1
	.short	.Ltmp3241-.Ltmp3240     # Loc expr size
.Ltmp3240:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320{"                 # -560
.Ltmp3241:
	.quad	.Ltmp1073-.Lfunc_begin1
	.quad	.Ltmp1074-.Lfunc_begin1
	.short	.Ltmp3243-.Ltmp3242     # Loc expr size
.Ltmp3242:
	.byte	83                      # DW_OP_reg3
.Ltmp3243:
	.quad	.Ltmp1075-.Lfunc_begin1
	.quad	.Ltmp1076-.Lfunc_begin1
	.short	.Ltmp3245-.Ltmp3244     # Loc expr size
.Ltmp3244:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340{"                 # -544
.Ltmp3245:
	.quad	.Ltmp1076-.Lfunc_begin1
	.quad	.Ltmp1077-.Lfunc_begin1
	.short	.Ltmp3247-.Ltmp3246     # Loc expr size
.Ltmp3246:
	.byte	83                      # DW_OP_reg3
.Ltmp3247:
	.quad	.Ltmp1078-.Lfunc_begin1
	.quad	.Ltmp1079-.Lfunc_begin1
	.short	.Ltmp3249-.Ltmp3248     # Loc expr size
.Ltmp3248:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240}"                 # -352
.Ltmp3249:
	.quad	.Ltmp1079-.Lfunc_begin1
	.quad	.Ltmp1080-.Lfunc_begin1
	.short	.Ltmp3251-.Ltmp3250     # Loc expr size
.Ltmp3250:
	.byte	83                      # DW_OP_reg3
.Ltmp3251:
	.quad	.Ltmp1081-.Lfunc_begin1
	.quad	.Ltmp1082-.Lfunc_begin1
	.short	.Ltmp3253-.Ltmp3252     # Loc expr size
.Ltmp3252:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230}"                 # -360
.Ltmp3253:
	.quad	.Ltmp1082-.Lfunc_begin1
	.quad	.Ltmp1083-.Lfunc_begin1
	.short	.Ltmp3255-.Ltmp3254     # Loc expr size
.Ltmp3254:
	.byte	83                      # DW_OP_reg3
.Ltmp3255:
	.quad	.Ltmp1084-.Lfunc_begin1
	.quad	.Ltmp1085-.Lfunc_begin1
	.short	.Ltmp3257-.Ltmp3256     # Loc expr size
.Ltmp3256:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210}"                 # -376
.Ltmp3257:
	.quad	.Ltmp1085-.Lfunc_begin1
	.quad	.Ltmp1086-.Lfunc_begin1
	.short	.Ltmp3259-.Ltmp3258     # Loc expr size
.Ltmp3258:
	.byte	83                      # DW_OP_reg3
.Ltmp3259:
	.quad	.Ltmp1087-.Lfunc_begin1
	.quad	.Ltmp1088-.Lfunc_begin1
	.short	.Ltmp3261-.Ltmp3260     # Loc expr size
.Ltmp3260:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370{"                 # -520
.Ltmp3261:
	.quad	.Ltmp1088-.Lfunc_begin1
	.quad	.Ltmp1089-.Lfunc_begin1
	.short	.Ltmp3263-.Ltmp3262     # Loc expr size
.Ltmp3262:
	.byte	83                      # DW_OP_reg3
.Ltmp3263:
	.quad	.Ltmp1090-.Lfunc_begin1
	.quad	.Ltmp1091-.Lfunc_begin1
	.short	.Ltmp3265-.Ltmp3264     # Loc expr size
.Ltmp3264:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220}"                 # -368
.Ltmp3265:
	.quad	.Ltmp1091-.Lfunc_begin1
	.quad	.Ltmp1092-.Lfunc_begin1
	.short	.Ltmp3267-.Ltmp3266     # Loc expr size
.Ltmp3266:
	.byte	83                      # DW_OP_reg3
.Ltmp3267:
	.quad	.Ltmp1093-.Lfunc_begin1
	.quad	.Ltmp1094-.Lfunc_begin1
	.short	.Ltmp3269-.Ltmp3268     # Loc expr size
.Ltmp3268:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200|"                 # -512
.Ltmp3269:
	.quad	.Ltmp1094-.Lfunc_begin1
	.quad	.Ltmp1095-.Lfunc_begin1
	.short	.Ltmp3271-.Ltmp3270     # Loc expr size
.Ltmp3270:
	.byte	83                      # DW_OP_reg3
.Ltmp3271:
	.quad	.Ltmp1096-.Lfunc_begin1
	.quad	.Ltmp1097-.Lfunc_begin1
	.short	.Ltmp3273-.Ltmp3272     # Loc expr size
.Ltmp3272:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370|"                 # -392
.Ltmp3273:
	.quad	.Ltmp1097-.Lfunc_begin1
	.quad	.Ltmp1098-.Lfunc_begin1
	.short	.Ltmp3275-.Ltmp3274     # Loc expr size
.Ltmp3274:
	.byte	83                      # DW_OP_reg3
.Ltmp3275:
	.quad	.Ltmp1099-.Lfunc_begin1
	.quad	.Ltmp1100-.Lfunc_begin1
	.short	.Ltmp3277-.Ltmp3276     # Loc expr size
.Ltmp3276:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200}"                 # -384
.Ltmp3277:
	.quad	.Ltmp1100-.Lfunc_begin1
	.quad	.Ltmp1101-.Lfunc_begin1
	.short	.Ltmp3279-.Ltmp3278     # Loc expr size
.Ltmp3278:
	.byte	83                      # DW_OP_reg3
.Ltmp3279:
	.quad	.Ltmp1102-.Lfunc_begin1
	.quad	.Ltmp1103-.Lfunc_begin1
	.short	.Ltmp3281-.Ltmp3280     # Loc expr size
.Ltmp3280:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220|"                 # -496
.Ltmp3281:
	.quad	.Ltmp1103-.Lfunc_begin1
	.quad	.Ltmp1104-.Lfunc_begin1
	.short	.Ltmp3283-.Ltmp3282     # Loc expr size
.Ltmp3282:
	.byte	83                      # DW_OP_reg3
.Ltmp3283:
	.quad	.Ltmp1105-.Lfunc_begin1
	.quad	.Ltmp1106-.Lfunc_begin1
	.short	.Ltmp3285-.Ltmp3284     # Loc expr size
.Ltmp3284:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230|"                 # -488
.Ltmp3285:
	.quad	.Ltmp1106-.Lfunc_begin1
	.quad	.Ltmp1107-.Lfunc_begin1
	.short	.Ltmp3287-.Ltmp3286     # Loc expr size
.Ltmp3286:
	.byte	83                      # DW_OP_reg3
.Ltmp3287:
	.quad	.Ltmp1108-.Lfunc_begin1
	.quad	.Ltmp1109-.Lfunc_begin1
	.short	.Ltmp3289-.Ltmp3288     # Loc expr size
.Ltmp3288:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350|"                 # -408
.Ltmp3289:
	.quad	.Ltmp1109-.Lfunc_begin1
	.quad	.Ltmp1110-.Lfunc_begin1
	.short	.Ltmp3291-.Ltmp3290     # Loc expr size
.Ltmp3290:
	.byte	83                      # DW_OP_reg3
.Ltmp3291:
	.quad	.Ltmp1111-.Lfunc_begin1
	.quad	.Ltmp1112-.Lfunc_begin1
	.short	.Ltmp3293-.Ltmp3292     # Loc expr size
.Ltmp3292:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240\177"              # -96
.Ltmp3293:
	.quad	.Ltmp1112-.Lfunc_begin1
	.quad	.Ltmp1113-.Lfunc_begin1
	.short	.Ltmp3295-.Ltmp3294     # Loc expr size
.Ltmp3294:
	.byte	83                      # DW_OP_reg3
.Ltmp3295:
	.quad	.Ltmp1114-.Lfunc_begin1
	.quad	.Ltmp1115-.Lfunc_begin1
	.short	.Ltmp3297-.Ltmp3296     # Loc expr size
.Ltmp3296:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240|"                 # -480
.Ltmp3297:
	.quad	.Ltmp1115-.Lfunc_begin1
	.quad	.Ltmp1116-.Lfunc_begin1
	.short	.Ltmp3299-.Ltmp3298     # Loc expr size
.Ltmp3298:
	.byte	83                      # DW_OP_reg3
.Ltmp3299:
	.quad	.Ltmp1117-.Lfunc_begin1
	.quad	.Ltmp1118-.Lfunc_begin1
	.short	.Ltmp3301-.Ltmp3300     # Loc expr size
.Ltmp3300:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250|"                 # -472
.Ltmp3301:
	.quad	.Ltmp1118-.Lfunc_begin1
	.quad	.Ltmp1119-.Lfunc_begin1
	.short	.Ltmp3303-.Ltmp3302     # Loc expr size
.Ltmp3302:
	.byte	83                      # DW_OP_reg3
.Ltmp3303:
	.quad	.Ltmp1120-.Lfunc_begin1
	.quad	.Ltmp1121-.Lfunc_begin1
	.short	.Ltmp3305-.Ltmp3304     # Loc expr size
.Ltmp3304:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260|"                 # -464
.Ltmp3305:
	.quad	.Ltmp1121-.Lfunc_begin1
	.quad	.Ltmp1122-.Lfunc_begin1
	.short	.Ltmp3307-.Ltmp3306     # Loc expr size
.Ltmp3306:
	.byte	83                      # DW_OP_reg3
.Ltmp3307:
	.quad	0
	.quad	0
.Ldebug_loc99:
	.quad	.Ltmp1015-.Lfunc_begin1
	.quad	.Ltmp1126-.Lfunc_begin1
	.short	.Ltmp3309-.Ltmp3308     # Loc expr size
.Ltmp3308:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3309:
	.quad	.Ltmp1126-.Lfunc_begin1
	.quad	.Ltmp1127-.Lfunc_begin1
	.short	.Ltmp3311-.Ltmp3310     # Loc expr size
.Ltmp3310:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3311:
	.quad	.Ltmp1128-.Lfunc_begin1
	.quad	.Ltmp1149-.Lfunc_begin1
	.short	.Ltmp3313-.Ltmp3312     # Loc expr size
.Ltmp3312:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260|"                 # -464
.Ltmp3313:
	.quad	.Ltmp1149-.Lfunc_begin1
	.quad	.Ltmp1150-.Lfunc_begin1
	.short	.Ltmp3315-.Ltmp3314     # Loc expr size
.Ltmp3314:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3315:
	.quad	.Ltmp1175-.Lfunc_begin1
	.quad	.Ltmp1177-.Lfunc_begin1
	.short	.Ltmp3317-.Ltmp3316     # Loc expr size
.Ltmp3316:
	.byte	17                      # DW_OP_consts
	.byte	127                     # -1
	.byte	159                     # DW_OP_stack_value
.Ltmp3317:
	.quad	.Ltmp1177-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3319-.Ltmp3318     # Loc expr size
.Ltmp3318:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3319:
	.quad	0
	.quad	0
.Ldebug_loc100:
	.quad	.Ltmp1141-.Lfunc_begin1
	.quad	.Ltmp1145-.Lfunc_begin1
	.short	.Ltmp3321-.Ltmp3320     # Loc expr size
.Ltmp3320:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3321:
	.quad	.Ltmp1145-.Lfunc_begin1
	.quad	.Ltmp1178-.Lfunc_begin1
	.short	.Ltmp3323-.Ltmp3322     # Loc expr size
.Ltmp3322:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3323:
	.quad	.Ltmp1178-.Lfunc_begin1
	.quad	.Ltmp1180-.Lfunc_begin1
	.short	.Ltmp3325-.Ltmp3324     # Loc expr size
.Ltmp3324:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3325:
	.quad	.Ltmp1180-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3327-.Ltmp3326     # Loc expr size
.Ltmp3326:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3327:
	.quad	0
	.quad	0
.Ldebug_loc101:
	.quad	.Ltmp1141-.Lfunc_begin1
	.quad	.Ltmp1145-.Lfunc_begin1
	.short	.Ltmp3329-.Ltmp3328     # Loc expr size
.Ltmp3328:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3329:
	.quad	.Ltmp1145-.Lfunc_begin1
	.quad	.Ltmp1178-.Lfunc_begin1
	.short	.Ltmp3331-.Ltmp3330     # Loc expr size
.Ltmp3330:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3331:
	.quad	.Ltmp1178-.Lfunc_begin1
	.quad	.Ltmp1180-.Lfunc_begin1
	.short	.Ltmp3333-.Ltmp3332     # Loc expr size
.Ltmp3332:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3333:
	.quad	.Ltmp1180-.Lfunc_begin1
	.quad	.Lfunc_end13-.Lfunc_begin1
	.short	.Ltmp3335-.Ltmp3334     # Loc expr size
.Ltmp3334:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3335:
	.quad	0
	.quad	0
.Ldebug_loc102:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Ltmp1217-.Lfunc_begin1
	.short	.Ltmp3337-.Ltmp3336     # Loc expr size
.Ltmp3336:
	.byte	85                      # DW_OP_reg5
.Ltmp3337:
	.quad	.Ltmp1217-.Lfunc_begin1
	.quad	.Ltmp1224-.Lfunc_begin1
	.short	.Ltmp3339-.Ltmp3338     # Loc expr size
.Ltmp3338:
	.byte	92                      # DW_OP_reg12
.Ltmp3339:
	.quad	.Ltmp1224-.Lfunc_begin1
	.quad	.Ltmp1235-.Lfunc_begin1
	.short	.Ltmp3341-.Ltmp3340     # Loc expr size
.Ltmp3340:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"              # -128
.Ltmp3341:
	.quad	.Ltmp1235-.Lfunc_begin1
	.quad	.Ltmp1237-.Lfunc_begin1
	.short	.Ltmp3343-.Ltmp3342     # Loc expr size
.Ltmp3342:
	.byte	95                      # DW_OP_reg15
.Ltmp3343:
	.quad	.Ltmp1237-.Lfunc_begin1
	.quad	.Ltmp1298-.Lfunc_begin1
	.short	.Ltmp3345-.Ltmp3344     # Loc expr size
.Ltmp3344:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"              # -128
.Ltmp3345:
	.quad	.Ltmp1298-.Lfunc_begin1
	.quad	.Ltmp1307-.Lfunc_begin1
	.short	.Ltmp3347-.Ltmp3346     # Loc expr size
.Ltmp3346:
	.byte	84                      # DW_OP_reg4
.Ltmp3347:
	.quad	.Ltmp1307-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3349-.Ltmp3348     # Loc expr size
.Ltmp3348:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"              # -128
.Ltmp3349:
	.quad	0
	.quad	0
.Ldebug_loc103:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Ltmp1216-.Lfunc_begin1
	.short	.Ltmp3351-.Ltmp3350     # Loc expr size
.Ltmp3350:
	.byte	84                      # DW_OP_reg4
.Ltmp3351:
	.quad	.Ltmp1216-.Lfunc_begin1
	.quad	.Ltmp1226-.Lfunc_begin1
	.short	.Ltmp3353-.Ltmp3352     # Loc expr size
.Ltmp3352:
	.byte	95                      # DW_OP_reg15
.Ltmp3353:
	.quad	.Ltmp1226-.Lfunc_begin1
	.quad	.Ltmp1228-.Lfunc_begin1
	.short	.Ltmp3355-.Ltmp3354     # Loc expr size
.Ltmp3354:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260~"                 # -208
.Ltmp3355:
	.quad	.Ltmp1228-.Lfunc_begin1
	.quad	.Ltmp1230-.Lfunc_begin1
	.short	.Ltmp3357-.Ltmp3356     # Loc expr size
.Ltmp3356:
	.byte	95                      # DW_OP_reg15
.Ltmp3357:
	.quad	.Ltmp1230-.Lfunc_begin1
	.quad	.Ltmp1244-.Lfunc_begin1
	.short	.Ltmp3359-.Ltmp3358     # Loc expr size
.Ltmp3358:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260~"                 # -208
.Ltmp3359:
	.quad	.Ltmp1244-.Lfunc_begin1
	.quad	.Ltmp1248-.Lfunc_begin1
	.short	.Ltmp3361-.Ltmp3360     # Loc expr size
.Ltmp3360:
	.byte	95                      # DW_OP_reg15
.Ltmp3361:
	.quad	.Ltmp1248-.Lfunc_begin1
	.quad	.Ltmp1357-.Lfunc_begin1
	.short	.Ltmp3363-.Ltmp3362     # Loc expr size
.Ltmp3362:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260~"                 # -208
.Ltmp3363:
	.quad	.Ltmp1357-.Lfunc_begin1
	.quad	.Ltmp1359-.Lfunc_begin1
	.short	.Ltmp3365-.Ltmp3364     # Loc expr size
.Ltmp3364:
	.byte	83                      # DW_OP_reg3
.Ltmp3365:
	.quad	.Ltmp1359-.Lfunc_begin1
	.quad	.Ltmp1362-.Lfunc_begin1
	.short	.Ltmp3367-.Ltmp3366     # Loc expr size
.Ltmp3366:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260~"                 # -208
.Ltmp3367:
	.quad	.Ltmp1362-.Lfunc_begin1
	.quad	.Ltmp1363-.Lfunc_begin1
	.short	.Ltmp3369-.Ltmp3368     # Loc expr size
.Ltmp3368:
	.byte	83                      # DW_OP_reg3
.Ltmp3369:
	.quad	.Ltmp1363-.Lfunc_begin1
	.quad	.Ltmp1390-.Lfunc_begin1
	.short	.Ltmp3371-.Ltmp3370     # Loc expr size
.Ltmp3370:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260~"                 # -208
.Ltmp3371:
	.quad	.Ltmp1390-.Lfunc_begin1
	.quad	.Ltmp1395-.Lfunc_begin1
	.short	.Ltmp3373-.Ltmp3372     # Loc expr size
.Ltmp3372:
	.byte	95                      # DW_OP_reg15
.Ltmp3373:
	.quad	.Ltmp1395-.Lfunc_begin1
	.quad	.Ltmp1399-.Lfunc_begin1
	.short	.Ltmp3375-.Ltmp3374     # Loc expr size
.Ltmp3374:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260~"                 # -208
.Ltmp3375:
	.quad	.Ltmp1399-.Lfunc_begin1
	.quad	.Ltmp1399-.Lfunc_begin1
	.short	.Ltmp3377-.Ltmp3376     # Loc expr size
.Ltmp3376:
	.byte	95                      # DW_OP_reg15
.Ltmp3377:
	.quad	.Ltmp1399-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3379-.Ltmp3378     # Loc expr size
.Ltmp3378:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260~"                 # -208
.Ltmp3379:
	.quad	0
	.quad	0
.Ldebug_loc104:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Ltmp1215-.Lfunc_begin1
	.short	.Ltmp3381-.Ltmp3380     # Loc expr size
.Ltmp3380:
	.byte	81                      # DW_OP_reg1
.Ltmp3381:
	.quad	.Ltmp1215-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3383-.Ltmp3382     # Loc expr size
.Ltmp3382:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200~"                 # -256
.Ltmp3383:
	.quad	0
	.quad	0
.Ldebug_loc105:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Ltmp1214-.Lfunc_begin1
	.short	.Ltmp3385-.Ltmp3384     # Loc expr size
.Ltmp3384:
	.byte	82                      # DW_OP_reg2
.Ltmp3385:
	.quad	.Ltmp1214-.Lfunc_begin1
	.quad	.Ltmp1236-.Lfunc_begin1
	.short	.Ltmp3387-.Ltmp3386     # Loc expr size
.Ltmp3386:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp3387:
	.quad	.Ltmp1236-.Lfunc_begin1
	.quad	.Ltmp1238-.Lfunc_begin1
	.short	.Ltmp3389-.Ltmp3388     # Loc expr size
.Ltmp3388:
	.byte	93                      # DW_OP_reg13
.Ltmp3389:
	.quad	.Ltmp1238-.Lfunc_begin1
	.quad	.Ltmp1271-.Lfunc_begin1
	.short	.Ltmp3391-.Ltmp3390     # Loc expr size
.Ltmp3390:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp3391:
	.quad	.Ltmp1271-.Lfunc_begin1
	.quad	.Ltmp1280-.Lfunc_begin1
	.short	.Ltmp3393-.Ltmp3392     # Loc expr size
.Ltmp3392:
	.byte	92                      # DW_OP_reg12
.Ltmp3393:
	.quad	.Ltmp1280-.Lfunc_begin1
	.quad	.Ltmp1311-.Lfunc_begin1
	.short	.Ltmp3395-.Ltmp3394     # Loc expr size
.Ltmp3394:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp3395:
	.quad	.Ltmp1311-.Lfunc_begin1
	.quad	.Ltmp1332-.Lfunc_begin1
	.short	.Ltmp3397-.Ltmp3396     # Loc expr size
.Ltmp3396:
	.byte	95                      # DW_OP_reg15
.Ltmp3397:
	.quad	.Ltmp1332-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3399-.Ltmp3398     # Loc expr size
.Ltmp3398:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250\177"              # -88
.Ltmp3399:
	.quad	0
	.quad	0
.Ldebug_loc106:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Ltmp1213-.Lfunc_begin1
	.short	.Ltmp3401-.Ltmp3400     # Loc expr size
.Ltmp3400:
	.byte	88                      # super-register DW_OP_reg8
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3401:
	.quad	.Ltmp1213-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3403-.Ltmp3402     # Loc expr size
.Ltmp3402:
	.byte	118                     # DW_OP_breg6
	.ascii	"\264\177"              # -76
.Ltmp3403:
	.quad	0
	.quad	0
.Ldebug_loc107:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Ltmp1212-.Lfunc_begin1
	.short	.Ltmp3405-.Ltmp3404     # Loc expr size
.Ltmp3404:
	.byte	89                      # super-register DW_OP_reg9
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3405:
	.quad	.Ltmp1212-.Lfunc_begin1
	.quad	.Ltmp1225-.Lfunc_begin1
	.short	.Ltmp3407-.Ltmp3406     # Loc expr size
.Ltmp3406:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3407:
	.quad	.Ltmp1226-.Lfunc_begin1
	.quad	.Ltmp1227-.Lfunc_begin1
	.short	.Ltmp3409-.Ltmp3408     # Loc expr size
.Ltmp3408:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244~"                 # -220
.Ltmp3409:
	.quad	.Ltmp1227-.Lfunc_begin1
	.quad	.Ltmp1230-.Lfunc_begin1
	.short	.Ltmp3411-.Ltmp3410     # Loc expr size
.Ltmp3410:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3411:
	.quad	.Ltmp1230-.Lfunc_begin1
	.quad	.Ltmp1244-.Lfunc_begin1
	.short	.Ltmp3413-.Ltmp3412     # Loc expr size
.Ltmp3412:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244~"                 # -220
.Ltmp3413:
	.quad	.Ltmp1244-.Lfunc_begin1
	.quad	.Ltmp1249-.Lfunc_begin1
	.short	.Ltmp3415-.Ltmp3414     # Loc expr size
.Ltmp3414:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3415:
	.quad	.Ltmp1250-.Lfunc_begin1
	.quad	.Ltmp1251-.Lfunc_begin1
	.short	.Ltmp3417-.Ltmp3416     # Loc expr size
.Ltmp3416:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3417:
	.quad	.Ltmp1252-.Lfunc_begin1
	.quad	.Ltmp1255-.Lfunc_begin1
	.short	.Ltmp3419-.Ltmp3418     # Loc expr size
.Ltmp3418:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3419:
	.quad	.Ltmp1256-.Lfunc_begin1
	.quad	.Ltmp1257-.Lfunc_begin1
	.short	.Ltmp3421-.Ltmp3420     # Loc expr size
.Ltmp3420:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3421:
	.quad	.Ltmp1258-.Lfunc_begin1
	.quad	.Ltmp1260-.Lfunc_begin1
	.short	.Ltmp3423-.Ltmp3422     # Loc expr size
.Ltmp3422:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3423:
	.quad	.Ltmp1262-.Lfunc_begin1
	.quad	.Ltmp1263-.Lfunc_begin1
	.short	.Ltmp3425-.Ltmp3424     # Loc expr size
.Ltmp3424:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3425:
	.quad	.Ltmp1266-.Lfunc_begin1
	.quad	.Ltmp1268-.Lfunc_begin1
	.short	.Ltmp3427-.Ltmp3426     # Loc expr size
.Ltmp3426:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3427:
	.quad	.Ltmp1268-.Lfunc_begin1
	.quad	.Ltmp1296-.Lfunc_begin1
	.short	.Ltmp3429-.Ltmp3428     # Loc expr size
.Ltmp3428:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244~"                 # -220
.Ltmp3429:
	.quad	.Ltmp1296-.Lfunc_begin1
	.quad	.Ltmp1297-.Lfunc_begin1
	.short	.Ltmp3431-.Ltmp3430     # Loc expr size
.Ltmp3430:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3431:
	.quad	.Ltmp1297-.Lfunc_begin1
	.quad	.Ltmp1340-.Lfunc_begin1
	.short	.Ltmp3433-.Ltmp3432     # Loc expr size
.Ltmp3432:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244~"                 # -220
.Ltmp3433:
	.quad	.Ltmp1340-.Lfunc_begin1
	.quad	.Ltmp1341-.Lfunc_begin1
	.short	.Ltmp3435-.Ltmp3434     # Loc expr size
.Ltmp3434:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3435:
	.quad	.Ltmp1341-.Lfunc_begin1
	.quad	.Ltmp1342-.Lfunc_begin1
	.short	.Ltmp3437-.Ltmp3436     # Loc expr size
.Ltmp3436:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244~"                 # -220
.Ltmp3437:
	.quad	.Ltmp1342-.Lfunc_begin1
	.quad	.Ltmp1345-.Lfunc_begin1
	.short	.Ltmp3439-.Ltmp3438     # Loc expr size
.Ltmp3438:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3439:
	.quad	.Ltmp1346-.Lfunc_begin1
	.quad	.Ltmp1349-.Lfunc_begin1
	.short	.Ltmp3441-.Ltmp3440     # Loc expr size
.Ltmp3440:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3441:
	.quad	.Ltmp1350-.Lfunc_begin1
	.quad	.Ltmp1357-.Lfunc_begin1
	.short	.Ltmp3443-.Ltmp3442     # Loc expr size
.Ltmp3442:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3443:
	.quad	.Ltmp1360-.Lfunc_begin1
	.quad	.Ltmp1362-.Lfunc_begin1
	.short	.Ltmp3445-.Ltmp3444     # Loc expr size
.Ltmp3444:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3445:
	.quad	.Ltmp1364-.Lfunc_begin1
	.quad	.Ltmp1365-.Lfunc_begin1
	.short	.Ltmp3447-.Ltmp3446     # Loc expr size
.Ltmp3446:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3447:
	.quad	.Ltmp1367-.Lfunc_begin1
	.quad	.Ltmp1368-.Lfunc_begin1
	.short	.Ltmp3449-.Ltmp3448     # Loc expr size
.Ltmp3448:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244~"                 # -220
.Ltmp3449:
	.quad	.Ltmp1368-.Lfunc_begin1
	.quad	.Ltmp1374-.Lfunc_begin1
	.short	.Ltmp3451-.Ltmp3450     # Loc expr size
.Ltmp3450:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3451:
	.quad	.Ltmp1375-.Lfunc_begin1
	.quad	.Ltmp1378-.Lfunc_begin1
	.short	.Ltmp3453-.Ltmp3452     # Loc expr size
.Ltmp3452:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3453:
	.quad	.Ltmp1380-.Lfunc_begin1
	.quad	.Ltmp1383-.Lfunc_begin1
	.short	.Ltmp3455-.Ltmp3454     # Loc expr size
.Ltmp3454:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3455:
	.quad	.Ltmp1384-.Lfunc_begin1
	.quad	.Ltmp1389-.Lfunc_begin1
	.short	.Ltmp3457-.Ltmp3456     # Loc expr size
.Ltmp3456:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3457:
	.quad	.Ltmp1392-.Lfunc_begin1
	.quad	.Ltmp1394-.Lfunc_begin1
	.short	.Ltmp3459-.Ltmp3458     # Loc expr size
.Ltmp3458:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3459:
	.quad	.Ltmp1396-.Lfunc_begin1
	.quad	.Ltmp1397-.Lfunc_begin1
	.short	.Ltmp3461-.Ltmp3460     # Loc expr size
.Ltmp3460:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3461:
	.quad	.Ltmp1399-.Lfunc_begin1
	.quad	.Ltmp1400-.Lfunc_begin1
	.short	.Ltmp3463-.Ltmp3462     # Loc expr size
.Ltmp3462:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3463:
	.quad	0
	.quad	0
.Ldebug_loc108:
	.quad	.Lfunc_begin14-.Lfunc_begin1
	.quad	.Ltmp1221-.Lfunc_begin1
	.short	.Ltmp3465-.Ltmp3464     # Loc expr size
.Ltmp3464:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3465:
	.quad	.Ltmp1246-.Lfunc_begin1
	.quad	.Ltmp1247-.Lfunc_begin1
	.short	.Ltmp3467-.Ltmp3466     # Loc expr size
.Ltmp3466:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3467:
	.quad	0
	.quad	0
.Ldebug_loc109:
	.quad	.Ltmp1219-.Lfunc_begin1
	.quad	.Ltmp1245-.Lfunc_begin1
	.short	.Ltmp3469-.Ltmp3468     # Loc expr size
.Ltmp3468:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3469:
	.quad	.Ltmp1245-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3471-.Ltmp3470     # Loc expr size
.Ltmp3470:
	.byte	17                      # DW_OP_consts
	.byte	2                       # 2
	.byte	159                     # DW_OP_stack_value
.Ltmp3471:
	.quad	0
	.quad	0
.Ldebug_loc110:
	.quad	.Ltmp1226-.Lfunc_begin1
	.quad	.Ltmp1250-.Lfunc_begin1
	.short	.Ltmp3473-.Ltmp3472     # Loc expr size
.Ltmp3472:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3473:
	.quad	.Ltmp1250-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3475-.Ltmp3474     # Loc expr size
.Ltmp3474:
	.byte	17                      # DW_OP_consts
	.byte	2                       # 2
	.byte	159                     # DW_OP_stack_value
.Ltmp3475:
	.quad	0
	.quad	0
.Ldebug_loc111:
	.quad	.Ltmp1233-.Lfunc_begin1
	.quad	.Ltmp1239-.Lfunc_begin1
	.short	.Ltmp3477-.Ltmp3476     # Loc expr size
.Ltmp3476:
	.byte	17                      # DW_OP_consts
	.asciz	"\344"                  # 100
	.byte	159                     # DW_OP_stack_value
.Ltmp3477:
	.quad	.Ltmp1239-.Lfunc_begin1
	.quad	.Ltmp1243-.Lfunc_begin1
	.short	.Ltmp3479-.Ltmp3478     # Loc expr size
.Ltmp3478:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3479:
	.quad	.Ltmp1265-.Lfunc_begin1
	.quad	.Ltmp1267-.Lfunc_begin1
	.short	.Ltmp3481-.Ltmp3480     # Loc expr size
.Ltmp3480:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3481:
	.quad	.Ltmp1267-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3483-.Ltmp3482     # Loc expr size
.Ltmp3482:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp3483:
	.quad	0
	.quad	0
.Ldebug_loc112:
	.quad	.Ltmp1269-.Lfunc_begin1
	.quad	.Ltmp1277-.Lfunc_begin1
	.short	.Ltmp3485-.Ltmp3484     # Loc expr size
.Ltmp3484:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3485:
	.quad	.Ltmp1277-.Lfunc_begin1
	.quad	.Ltmp1278-.Lfunc_begin1
	.short	.Ltmp3487-.Ltmp3486     # Loc expr size
.Ltmp3486:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3487:
	.quad	.Ltmp1278-.Lfunc_begin1
	.quad	.Ltmp1279-.Lfunc_begin1
	.short	.Ltmp3489-.Ltmp3488     # Loc expr size
.Ltmp3488:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3489:
	.quad	.Ltmp1279-.Lfunc_begin1
	.quad	.Ltmp1283-.Lfunc_begin1
	.short	.Ltmp3491-.Ltmp3490     # Loc expr size
.Ltmp3490:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3491:
	.quad	.Ltmp1284-.Lfunc_begin1
	.quad	.Ltmp1296-.Lfunc_begin1
	.short	.Ltmp3493-.Ltmp3492     # Loc expr size
.Ltmp3492:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3493:
	.quad	.Ltmp1309-.Lfunc_begin1
	.quad	.Ltmp1315-.Lfunc_begin1
	.short	.Ltmp3495-.Ltmp3494     # Loc expr size
.Ltmp3494:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3495:
	.quad	.Ltmp1315-.Lfunc_begin1
	.quad	.Ltmp1318-.Lfunc_begin1
	.short	.Ltmp3497-.Ltmp3496     # Loc expr size
.Ltmp3496:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3497:
	.quad	.Ltmp1330-.Lfunc_begin1
	.quad	.Ltmp1333-.Lfunc_begin1
	.short	.Ltmp3499-.Ltmp3498     # Loc expr size
.Ltmp3498:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3499:
	.quad	0
	.quad	0
.Ldebug_loc113:
	.quad	.Ltmp1269-.Lfunc_begin1
	.quad	.Ltmp1272-.Lfunc_begin1
	.short	.Ltmp3501-.Ltmp3500     # Loc expr size
.Ltmp3500:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3501:
	.quad	.Ltmp1272-.Lfunc_begin1
	.quad	.Ltmp1273-.Lfunc_begin1
	.short	.Ltmp3503-.Ltmp3502     # Loc expr size
.Ltmp3502:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3503:
	.quad	.Ltmp1274-.Lfunc_begin1
	.quad	.Ltmp1275-.Lfunc_begin1
	.short	.Ltmp3505-.Ltmp3504     # Loc expr size
.Ltmp3504:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3505:
	.quad	.Ltmp1275-.Lfunc_begin1
	.quad	.Ltmp1276-.Lfunc_begin1
	.short	.Ltmp3507-.Ltmp3506     # Loc expr size
.Ltmp3506:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3507:
	.quad	.Ltmp1276-.Lfunc_begin1
	.quad	.Ltmp1281-.Lfunc_begin1
	.short	.Ltmp3509-.Ltmp3508     # Loc expr size
.Ltmp3508:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370~"                 # -136
.Ltmp3509:
	.quad	.Ltmp1281-.Lfunc_begin1
	.quad	.Ltmp1282-.Lfunc_begin1
	.short	.Ltmp3511-.Ltmp3510     # Loc expr size
.Ltmp3510:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3511:
	.quad	.Ltmp1284-.Lfunc_begin1
	.quad	.Ltmp1295-.Lfunc_begin1
	.short	.Ltmp3513-.Ltmp3512     # Loc expr size
.Ltmp3512:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3513:
	.quad	.Ltmp1309-.Lfunc_begin1
	.quad	.Ltmp1335-.Lfunc_begin1
	.short	.Ltmp3515-.Ltmp3514     # Loc expr size
.Ltmp3514:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3515:
	.quad	.Ltmp1335-.Lfunc_begin1
	.quad	.Ltmp1336-.Lfunc_begin1
	.short	.Ltmp3517-.Ltmp3516     # Loc expr size
.Ltmp3516:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3517:
	.quad	.Ltmp1341-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3519-.Ltmp3518     # Loc expr size
.Ltmp3518:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3519:
	.quad	0
	.quad	0
.Ldebug_loc114:
	.quad	.Ltmp1285-.Lfunc_begin1
	.quad	.Ltmp1286-.Lfunc_begin1
	.short	.Ltmp3521-.Ltmp3520     # Loc expr size
.Ltmp3520:
	.byte	97                      # DW_OP_reg17
.Ltmp3521:
	.quad	.Ltmp1293-.Lfunc_begin1
	.quad	.Ltmp1294-.Lfunc_begin1
	.short	.Ltmp3523-.Ltmp3522     # Loc expr size
.Ltmp3522:
	.byte	98                      # DW_OP_reg18
.Ltmp3523:
	.quad	.Ltmp1294-.Lfunc_begin1
	.quad	.Ltmp1338-.Lfunc_begin1
	.short	.Ltmp3525-.Ltmp3524     # Loc expr size
.Ltmp3524:
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
.Ltmp3525:
	.quad	.Ltmp1338-.Lfunc_begin1
	.quad	.Ltmp1339-.Lfunc_begin1
	.short	.Ltmp3527-.Ltmp3526     # Loc expr size
.Ltmp3526:
	.byte	98                      # DW_OP_reg18
.Ltmp3527:
	.quad	.Ltmp1339-.Lfunc_begin1
	.quad	.Ltmp1341-.Lfunc_begin1
	.short	.Ltmp3529-.Ltmp3528     # Loc expr size
.Ltmp3528:
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
.Ltmp3529:
	.quad	.Ltmp1341-.Lfunc_begin1
	.quad	.Ltmp1372-.Lfunc_begin1
	.short	.Ltmp3531-.Ltmp3530     # Loc expr size
.Ltmp3530:
.Ltmp3531:
	.quad	.Ltmp1373-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3533-.Ltmp3532     # Loc expr size
.Ltmp3532:
	.byte	118                     # DW_OP_breg6
	.byte	72                      # -56
.Ltmp3533:
	.quad	0
	.quad	0
.Ldebug_loc115:
	.quad	.Ltmp1289-.Lfunc_begin1
	.quad	.Ltmp1296-.Lfunc_begin1
	.short	.Ltmp3535-.Ltmp3534     # Loc expr size
.Ltmp3534:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3535:
	.quad	.Ltmp1296-.Lfunc_begin1
	.quad	.Ltmp1367-.Lfunc_begin1
	.short	.Ltmp3537-.Ltmp3536     # Loc expr size
.Ltmp3536:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3537:
	.quad	.Ltmp1367-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3539-.Ltmp3538     # Loc expr size
.Ltmp3538:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3539:
	.quad	0
	.quad	0
.Ldebug_loc116:
	.quad	.Ltmp1299-.Lfunc_begin1
	.quad	.Ltmp1300-.Lfunc_begin1
	.short	.Ltmp3541-.Ltmp3540     # Loc expr size
.Ltmp3540:
	.byte	93                      # DW_OP_reg13
.Ltmp3541:
	.quad	.Ltmp1300-.Lfunc_begin1
	.quad	.Ltmp1301-.Lfunc_begin1
	.short	.Ltmp3543-.Ltmp3542     # Loc expr size
.Ltmp3542:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300~"                 # -192
.Ltmp3543:
	.quad	.Ltmp1301-.Lfunc_begin1
	.quad	.Ltmp1302-.Lfunc_begin1
	.short	.Ltmp3545-.Ltmp3544     # Loc expr size
.Ltmp3544:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310~"                 # -184
.Ltmp3545:
	.quad	.Ltmp1302-.Lfunc_begin1
	.quad	.Ltmp1303-.Lfunc_begin1
	.short	.Ltmp3547-.Ltmp3546     # Loc expr size
.Ltmp3546:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp3547:
	.quad	.Ltmp1303-.Lfunc_begin1
	.quad	.Ltmp1304-.Lfunc_begin1
	.short	.Ltmp3549-.Ltmp3548     # Loc expr size
.Ltmp3548:
	.byte	118                     # DW_OP_breg6
	.ascii	"\330~"                 # -168
.Ltmp3549:
	.quad	.Ltmp1304-.Lfunc_begin1
	.quad	.Ltmp1305-.Lfunc_begin1
	.short	.Ltmp3551-.Ltmp3550     # Loc expr size
.Ltmp3550:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340~"                 # -160
.Ltmp3551:
	.quad	.Ltmp1305-.Lfunc_begin1
	.quad	.Ltmp1306-.Lfunc_begin1
	.short	.Ltmp3553-.Ltmp3552     # Loc expr size
.Ltmp3552:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp3553:
	.quad	.Ltmp1306-.Lfunc_begin1
	.quad	.Ltmp1309-.Lfunc_begin1
	.short	.Ltmp3555-.Ltmp3554     # Loc expr size
.Ltmp3554:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp3555:
	.quad	.Ltmp1309-.Lfunc_begin1
	.quad	.Ltmp1312-.Lfunc_begin1
	.short	.Ltmp3557-.Ltmp3556     # Loc expr size
.Ltmp3556:
	.byte	93                      # DW_OP_reg13
.Ltmp3557:
	.quad	.Ltmp1312-.Lfunc_begin1
	.quad	.Ltmp1313-.Lfunc_begin1
	.short	.Ltmp3559-.Ltmp3558     # Loc expr size
.Ltmp3558:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300~"                 # -192
.Ltmp3559:
	.quad	.Ltmp1313-.Lfunc_begin1
	.quad	.Ltmp1314-.Lfunc_begin1
	.short	.Ltmp3561-.Ltmp3560     # Loc expr size
.Ltmp3560:
	.byte	83                      # DW_OP_reg3
.Ltmp3561:
	.quad	.Ltmp1315-.Lfunc_begin1
	.quad	.Ltmp1316-.Lfunc_begin1
	.short	.Ltmp3563-.Ltmp3562     # Loc expr size
.Ltmp3562:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310~"                 # -184
.Ltmp3563:
	.quad	.Ltmp1316-.Lfunc_begin1
	.quad	.Ltmp1317-.Lfunc_begin1
	.short	.Ltmp3565-.Ltmp3564     # Loc expr size
.Ltmp3564:
	.byte	83                      # DW_OP_reg3
.Ltmp3565:
	.quad	.Ltmp1318-.Lfunc_begin1
	.quad	.Ltmp1319-.Lfunc_begin1
	.short	.Ltmp3567-.Ltmp3566     # Loc expr size
.Ltmp3566:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"                 # -176
.Ltmp3567:
	.quad	.Ltmp1319-.Lfunc_begin1
	.quad	.Ltmp1320-.Lfunc_begin1
	.short	.Ltmp3569-.Ltmp3568     # Loc expr size
.Ltmp3568:
	.byte	83                      # DW_OP_reg3
.Ltmp3569:
	.quad	.Ltmp1321-.Lfunc_begin1
	.quad	.Ltmp1322-.Lfunc_begin1
	.short	.Ltmp3571-.Ltmp3570     # Loc expr size
.Ltmp3570:
	.byte	118                     # DW_OP_breg6
	.ascii	"\330~"                 # -168
.Ltmp3571:
	.quad	.Ltmp1322-.Lfunc_begin1
	.quad	.Ltmp1323-.Lfunc_begin1
	.short	.Ltmp3573-.Ltmp3572     # Loc expr size
.Ltmp3572:
	.byte	83                      # DW_OP_reg3
.Ltmp3573:
	.quad	.Ltmp1324-.Lfunc_begin1
	.quad	.Ltmp1325-.Lfunc_begin1
	.short	.Ltmp3575-.Ltmp3574     # Loc expr size
.Ltmp3574:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340~"                 # -160
.Ltmp3575:
	.quad	.Ltmp1325-.Lfunc_begin1
	.quad	.Ltmp1326-.Lfunc_begin1
	.short	.Ltmp3577-.Ltmp3576     # Loc expr size
.Ltmp3576:
	.byte	83                      # DW_OP_reg3
.Ltmp3577:
	.quad	.Ltmp1327-.Lfunc_begin1
	.quad	.Ltmp1328-.Lfunc_begin1
	.short	.Ltmp3579-.Ltmp3578     # Loc expr size
.Ltmp3578:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"                 # -152
.Ltmp3579:
	.quad	.Ltmp1328-.Lfunc_begin1
	.quad	.Ltmp1329-.Lfunc_begin1
	.short	.Ltmp3581-.Ltmp3580     # Loc expr size
.Ltmp3580:
	.byte	83                      # DW_OP_reg3
.Ltmp3581:
	.quad	.Ltmp1330-.Lfunc_begin1
	.quad	.Ltmp1331-.Lfunc_begin1
	.short	.Ltmp3583-.Ltmp3582     # Loc expr size
.Ltmp3582:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp3583:
	.quad	.Ltmp1331-.Lfunc_begin1
	.quad	.Ltmp1334-.Lfunc_begin1
	.short	.Ltmp3585-.Ltmp3584     # Loc expr size
.Ltmp3584:
	.byte	83                      # DW_OP_reg3
.Ltmp3585:
	.quad	0
	.quad	0
.Ldebug_loc117:
	.quad	.Ltmp1309-.Lfunc_begin1
	.quad	.Ltmp1351-.Lfunc_begin1
	.short	.Ltmp3587-.Ltmp3586     # Loc expr size
.Ltmp3586:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3587:
	.quad	.Ltmp1351-.Lfunc_begin1
	.quad	.Ltmp1352-.Lfunc_begin1
	.short	.Ltmp3589-.Ltmp3588     # Loc expr size
.Ltmp3588:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3589:
	.quad	.Ltmp1355-.Lfunc_begin1
	.quad	.Ltmp1372-.Lfunc_begin1
	.short	.Ltmp3591-.Ltmp3590     # Loc expr size
.Ltmp3590:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3591:
	.quad	.Ltmp1372-.Lfunc_begin1
	.quad	.Ltmp1375-.Lfunc_begin1
	.short	.Ltmp3593-.Ltmp3592     # Loc expr size
.Ltmp3592:
	.byte	17                      # DW_OP_consts
	.byte	127                     # -1
	.byte	159                     # DW_OP_stack_value
.Ltmp3593:
	.quad	.Ltmp1375-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3595-.Ltmp3594     # Loc expr size
.Ltmp3594:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3595:
	.quad	0
	.quad	0
.Ldebug_loc118:
	.quad	.Ltmp1344-.Lfunc_begin1
	.quad	.Ltmp1348-.Lfunc_begin1
	.short	.Ltmp3597-.Ltmp3596     # Loc expr size
.Ltmp3596:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3597:
	.quad	.Ltmp1348-.Lfunc_begin1
	.quad	.Ltmp1377-.Lfunc_begin1
	.short	.Ltmp3599-.Ltmp3598     # Loc expr size
.Ltmp3598:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3599:
	.quad	.Ltmp1377-.Lfunc_begin1
	.quad	.Ltmp1382-.Lfunc_begin1
	.short	.Ltmp3601-.Ltmp3600     # Loc expr size
.Ltmp3600:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3601:
	.quad	.Ltmp1382-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3603-.Ltmp3602     # Loc expr size
.Ltmp3602:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3603:
	.quad	0
	.quad	0
.Ldebug_loc119:
	.quad	.Ltmp1344-.Lfunc_begin1
	.quad	.Ltmp1348-.Lfunc_begin1
	.short	.Ltmp3605-.Ltmp3604     # Loc expr size
.Ltmp3604:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3605:
	.quad	.Ltmp1348-.Lfunc_begin1
	.quad	.Ltmp1377-.Lfunc_begin1
	.short	.Ltmp3607-.Ltmp3606     # Loc expr size
.Ltmp3606:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3607:
	.quad	.Ltmp1377-.Lfunc_begin1
	.quad	.Ltmp1382-.Lfunc_begin1
	.short	.Ltmp3609-.Ltmp3608     # Loc expr size
.Ltmp3608:
	.byte	17                      # DW_OP_consts
	.byte	1                       # 1
	.byte	159                     # DW_OP_stack_value
.Ltmp3609:
	.quad	.Ltmp1382-.Lfunc_begin1
	.quad	.Lfunc_end14-.Lfunc_begin1
	.short	.Ltmp3611-.Ltmp3610     # Loc expr size
.Ltmp3610:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3611:
	.quad	0
	.quad	0
.Ldebug_loc120:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Ltmp1413-.Lfunc_begin1
	.short	.Ltmp3613-.Ltmp3612     # Loc expr size
.Ltmp3612:
	.byte	85                      # DW_OP_reg5
.Ltmp3613:
	.quad	.Ltmp1413-.Lfunc_begin1
	.quad	.Ltmp1439-.Lfunc_begin1
	.short	.Ltmp3615-.Ltmp3614     # Loc expr size
.Ltmp3614:
	.byte	93                      # DW_OP_reg13
.Ltmp3615:
	.quad	0
	.quad	0
.Ldebug_loc121:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Ltmp1412-.Lfunc_begin1
	.short	.Ltmp3617-.Ltmp3616     # Loc expr size
.Ltmp3616:
	.byte	84                      # DW_OP_reg4
.Ltmp3617:
	.quad	.Ltmp1412-.Lfunc_begin1
	.quad	.Ltmp1417-.Lfunc_begin1
	.short	.Ltmp3619-.Ltmp3618     # Loc expr size
.Ltmp3618:
	.byte	92                      # DW_OP_reg12
.Ltmp3619:
	.quad	.Ltmp1423-.Lfunc_begin1
	.quad	.Ltmp1425-.Lfunc_begin1
	.short	.Ltmp3621-.Ltmp3620     # Loc expr size
.Ltmp3620:
	.byte	92                      # DW_OP_reg12
.Ltmp3621:
	.quad	0
	.quad	0
.Ldebug_loc122:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Ltmp1411-.Lfunc_begin1
	.short	.Ltmp3623-.Ltmp3622     # Loc expr size
.Ltmp3622:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3623:
	.quad	.Ltmp1411-.Lfunc_begin1
	.quad	.Ltmp1416-.Lfunc_begin1
	.short	.Ltmp3625-.Ltmp3624     # Loc expr size
.Ltmp3624:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3625:
	.quad	.Ltmp1416-.Lfunc_begin1
	.quad	.Ltmp1423-.Lfunc_begin1
	.short	.Ltmp3627-.Ltmp3626     # Loc expr size
.Ltmp3626:
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
.Ltmp3627:
	.quad	.Ltmp1423-.Lfunc_begin1
	.quad	.Ltmp1424-.Lfunc_begin1
	.short	.Ltmp3629-.Ltmp3628     # Loc expr size
.Ltmp3628:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3629:
	.quad	.Ltmp1424-.Lfunc_begin1
	.quad	.Lfunc_end15-.Lfunc_begin1
	.short	.Ltmp3631-.Ltmp3630     # Loc expr size
.Ltmp3630:
	.byte	118                     # DW_OP_breg6
	.byte	80                      # -48
.Ltmp3631:
	.quad	0
	.quad	0
.Ldebug_loc123:
	.quad	.Lfunc_begin15-.Lfunc_begin1
	.quad	.Ltmp1410-.Lfunc_begin1
	.short	.Ltmp3633-.Ltmp3632     # Loc expr size
.Ltmp3632:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3633:
	.quad	.Ltmp1410-.Lfunc_begin1
	.quad	.Ltmp1416-.Lfunc_begin1
	.short	.Ltmp3635-.Ltmp3634     # Loc expr size
.Ltmp3634:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3635:
	.quad	0
	.quad	0
.Ldebug_loc124:
	.quad	.Ltmp1420-.Lfunc_begin1
	.quad	.Ltmp1421-.Lfunc_begin1
	.short	.Ltmp3637-.Ltmp3636     # Loc expr size
.Ltmp3636:
	.byte	85                      # DW_OP_reg5
.Ltmp3637:
	.quad	.Ltmp1427-.Lfunc_begin1
	.quad	.Ltmp1428-.Lfunc_begin1
	.short	.Ltmp3639-.Ltmp3638     # Loc expr size
.Ltmp3638:
	.byte	85                      # DW_OP_reg5
.Ltmp3639:
	.quad	.Ltmp1428-.Lfunc_begin1
	.quad	.Ltmp1429-.Lfunc_begin1
	.short	.Ltmp3641-.Ltmp3640     # Loc expr size
.Ltmp3640:
	.byte	94                      # DW_OP_reg14
.Ltmp3641:
	.quad	.Ltmp1429-.Lfunc_begin1
	.quad	.Ltmp1430-.Lfunc_begin1
	.short	.Ltmp3643-.Ltmp3642     # Loc expr size
.Ltmp3642:
	.byte	83                      # DW_OP_reg3
.Ltmp3643:
	.quad	.Ltmp1431-.Lfunc_begin1
	.quad	.Ltmp1432-.Lfunc_begin1
	.short	.Ltmp3645-.Ltmp3644     # Loc expr size
.Ltmp3644:
	.byte	85                      # DW_OP_reg5
.Ltmp3645:
	.quad	.Ltmp1432-.Lfunc_begin1
	.quad	.Ltmp1433-.Lfunc_begin1
	.short	.Ltmp3647-.Ltmp3646     # Loc expr size
.Ltmp3646:
	.byte	94                      # DW_OP_reg14
.Ltmp3647:
	.quad	.Ltmp1433-.Lfunc_begin1
	.quad	.Ltmp1434-.Lfunc_begin1
	.short	.Ltmp3649-.Ltmp3648     # Loc expr size
.Ltmp3648:
	.byte	95                      # DW_OP_reg15
.Ltmp3649:
	.quad	.Ltmp1434-.Lfunc_begin1
	.quad	.Ltmp1435-.Lfunc_begin1
	.short	.Ltmp3651-.Ltmp3650     # Loc expr size
.Ltmp3650:
	.byte	85                      # DW_OP_reg5
.Ltmp3651:
	.quad	.Ltmp1435-.Lfunc_begin1
	.quad	.Ltmp1436-.Lfunc_begin1
	.short	.Ltmp3653-.Ltmp3652     # Loc expr size
.Ltmp3652:
	.byte	94                      # DW_OP_reg14
.Ltmp3653:
	.quad	.Ltmp1436-.Lfunc_begin1
	.quad	.Ltmp1437-.Lfunc_begin1
	.short	.Ltmp3655-.Ltmp3654     # Loc expr size
.Ltmp3654:
	.byte	95                      # DW_OP_reg15
.Ltmp3655:
	.quad	0
	.quad	0
.Ldebug_loc125:
	.quad	.Lfunc_begin16-.Lfunc_begin1
	.quad	.Ltmp1454-.Lfunc_begin1
	.short	.Ltmp3657-.Ltmp3656     # Loc expr size
.Ltmp3656:
	.byte	85                      # DW_OP_reg5
.Ltmp3657:
	.quad	.Ltmp1454-.Lfunc_begin1
	.quad	.Ltmp1454-.Lfunc_begin1
	.short	.Ltmp3659-.Ltmp3658     # Loc expr size
.Ltmp3658:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270z"                 # -712
.Ltmp3659:
	.quad	.Ltmp1464-.Lfunc_begin1
	.quad	.Ltmp1465-.Lfunc_begin1
	.short	.Ltmp3661-.Ltmp3660     # Loc expr size
.Ltmp3660:
	.byte	84                      # DW_OP_reg4
.Ltmp3661:
	.quad	.Ltmp1465-.Lfunc_begin1
	.quad	.Ltmp1466-.Lfunc_begin1
	.short	.Ltmp3663-.Ltmp3662     # Loc expr size
.Ltmp3662:
	.byte	89                      # DW_OP_reg9
.Ltmp3663:
	.quad	.Ltmp1466-.Lfunc_begin1
	.quad	.Ltmp1652-.Lfunc_begin1
	.short	.Ltmp3665-.Ltmp3664     # Loc expr size
.Ltmp3664:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270z"                 # -712
.Ltmp3665:
	.quad	.Ltmp1652-.Lfunc_begin1
	.quad	.Ltmp1653-.Lfunc_begin1
	.short	.Ltmp3667-.Ltmp3666     # Loc expr size
.Ltmp3666:
	.byte	83                      # DW_OP_reg3
.Ltmp3667:
	.quad	.Ltmp1653-.Lfunc_begin1
	.quad	.Ltmp1656-.Lfunc_begin1
	.short	.Ltmp3669-.Ltmp3668     # Loc expr size
.Ltmp3668:
	.byte	95                      # DW_OP_reg15
.Ltmp3669:
	.quad	.Ltmp1656-.Lfunc_begin1
	.quad	.Ltmp1657-.Lfunc_begin1
	.short	.Ltmp3671-.Ltmp3670     # Loc expr size
.Ltmp3670:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270z"                 # -712
.Ltmp3671:
	.quad	.Ltmp1657-.Lfunc_begin1
	.quad	.Ltmp1658-.Lfunc_begin1
	.short	.Ltmp3673-.Ltmp3672     # Loc expr size
.Ltmp3672:
	.byte	83                      # DW_OP_reg3
.Ltmp3673:
	.quad	.Ltmp1658-.Lfunc_begin1
	.quad	.Ltmp1662-.Lfunc_begin1
	.short	.Ltmp3675-.Ltmp3674     # Loc expr size
.Ltmp3674:
	.byte	95                      # DW_OP_reg15
.Ltmp3675:
	.quad	.Ltmp1663-.Lfunc_begin1
	.quad	.Ltmp1668-.Lfunc_begin1
	.short	.Ltmp3677-.Ltmp3676     # Loc expr size
.Ltmp3676:
	.byte	95                      # DW_OP_reg15
.Ltmp3677:
	.quad	.Ltmp1669-.Lfunc_begin1
	.quad	.Ltmp1674-.Lfunc_begin1
	.short	.Ltmp3679-.Ltmp3678     # Loc expr size
.Ltmp3678:
	.byte	95                      # DW_OP_reg15
.Ltmp3679:
	.quad	.Ltmp1675-.Lfunc_begin1
	.quad	.Ltmp1676-.Lfunc_begin1
	.short	.Ltmp3681-.Ltmp3680     # Loc expr size
.Ltmp3680:
	.byte	95                      # DW_OP_reg15
.Ltmp3681:
	.quad	.Ltmp1676-.Lfunc_begin1
	.quad	.Ltmp1679-.Lfunc_begin1
	.short	.Ltmp3683-.Ltmp3682     # Loc expr size
.Ltmp3682:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270z"                 # -712
.Ltmp3683:
	.quad	.Ltmp1679-.Lfunc_begin1
	.quad	.Ltmp1680-.Lfunc_begin1
	.short	.Ltmp3685-.Ltmp3684     # Loc expr size
.Ltmp3684:
	.byte	95                      # DW_OP_reg15
.Ltmp3685:
	.quad	.Ltmp1681-.Lfunc_begin1
	.quad	.Ltmp1682-.Lfunc_begin1
	.short	.Ltmp3687-.Ltmp3686     # Loc expr size
.Ltmp3686:
	.byte	95                      # DW_OP_reg15
.Ltmp3687:
	.quad	.Ltmp1682-.Lfunc_begin1
	.quad	.Lfunc_end16-.Lfunc_begin1
	.short	.Ltmp3689-.Ltmp3688     # Loc expr size
.Ltmp3688:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270z"                 # -712
.Ltmp3689:
	.quad	0
	.quad	0
.Ldebug_loc126:
	.quad	.Lfunc_begin16-.Lfunc_begin1
	.quad	.Ltmp1453-.Lfunc_begin1
	.short	.Ltmp3691-.Ltmp3690     # Loc expr size
.Ltmp3690:
	.byte	84                      # DW_OP_reg4
.Ltmp3691:
	.quad	.Ltmp1453-.Lfunc_begin1
	.quad	.Ltmp1463-.Lfunc_begin1
	.short	.Ltmp3693-.Ltmp3692     # Loc expr size
.Ltmp3692:
	.byte	92                      # DW_OP_reg12
.Ltmp3693:
	.quad	.Ltmp1463-.Lfunc_begin1
	.quad	.Ltmp1695-.Lfunc_begin1
	.short	.Ltmp3695-.Ltmp3694     # Loc expr size
.Ltmp3694:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250z"                 # -728
.Ltmp3695:
	.quad	.Ltmp1695-.Lfunc_begin1
	.quad	.Ltmp1696-.Lfunc_begin1
	.short	.Ltmp3697-.Ltmp3696     # Loc expr size
.Ltmp3696:
	.byte	82                      # DW_OP_reg2
.Ltmp3697:
	.quad	0
	.quad	0
.Ldebug_loc127:
	.quad	.Lfunc_begin16-.Lfunc_begin1
	.quad	.Ltmp1452-.Lfunc_begin1
	.short	.Ltmp3699-.Ltmp3698     # Loc expr size
.Ltmp3698:
	.byte	81                      # DW_OP_reg1
.Ltmp3699:
	.quad	.Ltmp1452-.Lfunc_begin1
	.quad	.Ltmp1475-.Lfunc_begin1
	.short	.Ltmp3701-.Ltmp3700     # Loc expr size
.Ltmp3700:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3701:
	.quad	.Ltmp1475-.Lfunc_begin1
	.quad	.Ltmp1476-.Lfunc_begin1
	.short	.Ltmp3703-.Ltmp3702     # Loc expr size
.Ltmp3702:
	.byte	94                      # DW_OP_reg14
.Ltmp3703:
	.quad	.Ltmp1476-.Lfunc_begin1
	.quad	.Ltmp1477-.Lfunc_begin1
	.short	.Ltmp3705-.Ltmp3704     # Loc expr size
.Ltmp3704:
	.byte	93                      # DW_OP_reg13
.Ltmp3705:
	.quad	.Ltmp1477-.Lfunc_begin1
	.quad	.Ltmp1478-.Lfunc_begin1
	.short	.Ltmp3707-.Ltmp3706     # Loc expr size
.Ltmp3706:
	.byte	92                      # DW_OP_reg12
.Ltmp3707:
	.quad	.Ltmp1478-.Lfunc_begin1
	.quad	.Ltmp1484-.Lfunc_begin1
	.short	.Ltmp3709-.Ltmp3708     # Loc expr size
.Ltmp3708:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3709:
	.quad	.Ltmp1484-.Lfunc_begin1
	.quad	.Ltmp1485-.Lfunc_begin1
	.short	.Ltmp3711-.Ltmp3710     # Loc expr size
.Ltmp3710:
	.byte	94                      # DW_OP_reg14
.Ltmp3711:
	.quad	.Ltmp1485-.Lfunc_begin1
	.quad	.Ltmp1491-.Lfunc_begin1
	.short	.Ltmp3713-.Ltmp3712     # Loc expr size
.Ltmp3712:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3713:
	.quad	.Ltmp1491-.Lfunc_begin1
	.quad	.Ltmp1492-.Lfunc_begin1
	.short	.Ltmp3715-.Ltmp3714     # Loc expr size
.Ltmp3714:
	.byte	95                      # DW_OP_reg15
.Ltmp3715:
	.quad	.Ltmp1492-.Lfunc_begin1
	.quad	.Ltmp1498-.Lfunc_begin1
	.short	.Ltmp3717-.Ltmp3716     # Loc expr size
.Ltmp3716:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3717:
	.quad	.Ltmp1498-.Lfunc_begin1
	.quad	.Ltmp1499-.Lfunc_begin1
	.short	.Ltmp3719-.Ltmp3718     # Loc expr size
.Ltmp3718:
	.byte	94                      # DW_OP_reg14
.Ltmp3719:
	.quad	.Ltmp1499-.Lfunc_begin1
	.quad	.Ltmp1505-.Lfunc_begin1
	.short	.Ltmp3721-.Ltmp3720     # Loc expr size
.Ltmp3720:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3721:
	.quad	.Ltmp1505-.Lfunc_begin1
	.quad	.Ltmp1506-.Lfunc_begin1
	.short	.Ltmp3723-.Ltmp3722     # Loc expr size
.Ltmp3722:
	.byte	95                      # DW_OP_reg15
.Ltmp3723:
	.quad	.Ltmp1506-.Lfunc_begin1
	.quad	.Ltmp1513-.Lfunc_begin1
	.short	.Ltmp3725-.Ltmp3724     # Loc expr size
.Ltmp3724:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3725:
	.quad	.Ltmp1513-.Lfunc_begin1
	.quad	.Ltmp1514-.Lfunc_begin1
	.short	.Ltmp3727-.Ltmp3726     # Loc expr size
.Ltmp3726:
	.byte	94                      # DW_OP_reg14
.Ltmp3727:
	.quad	.Ltmp1514-.Lfunc_begin1
	.quad	.Ltmp1520-.Lfunc_begin1
	.short	.Ltmp3729-.Ltmp3728     # Loc expr size
.Ltmp3728:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3729:
	.quad	.Ltmp1520-.Lfunc_begin1
	.quad	.Ltmp1521-.Lfunc_begin1
	.short	.Ltmp3731-.Ltmp3730     # Loc expr size
.Ltmp3730:
	.byte	94                      # DW_OP_reg14
.Ltmp3731:
	.quad	.Ltmp1521-.Lfunc_begin1
	.quad	.Ltmp1527-.Lfunc_begin1
	.short	.Ltmp3733-.Ltmp3732     # Loc expr size
.Ltmp3732:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3733:
	.quad	.Ltmp1527-.Lfunc_begin1
	.quad	.Ltmp1528-.Lfunc_begin1
	.short	.Ltmp3735-.Ltmp3734     # Loc expr size
.Ltmp3734:
	.byte	94                      # DW_OP_reg14
.Ltmp3735:
	.quad	.Ltmp1528-.Lfunc_begin1
	.quad	.Ltmp1534-.Lfunc_begin1
	.short	.Ltmp3737-.Ltmp3736     # Loc expr size
.Ltmp3736:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3737:
	.quad	.Ltmp1534-.Lfunc_begin1
	.quad	.Ltmp1535-.Lfunc_begin1
	.short	.Ltmp3739-.Ltmp3738     # Loc expr size
.Ltmp3738:
	.byte	94                      # DW_OP_reg14
.Ltmp3739:
	.quad	.Ltmp1535-.Lfunc_begin1
	.quad	.Ltmp1541-.Lfunc_begin1
	.short	.Ltmp3741-.Ltmp3740     # Loc expr size
.Ltmp3740:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3741:
	.quad	.Ltmp1541-.Lfunc_begin1
	.quad	.Ltmp1542-.Lfunc_begin1
	.short	.Ltmp3743-.Ltmp3742     # Loc expr size
.Ltmp3742:
	.byte	94                      # DW_OP_reg14
.Ltmp3743:
	.quad	.Ltmp1542-.Lfunc_begin1
	.quad	.Ltmp1549-.Lfunc_begin1
	.short	.Ltmp3745-.Ltmp3744     # Loc expr size
.Ltmp3744:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3745:
	.quad	.Ltmp1549-.Lfunc_begin1
	.quad	.Ltmp1550-.Lfunc_begin1
	.short	.Ltmp3747-.Ltmp3746     # Loc expr size
.Ltmp3746:
	.byte	94                      # DW_OP_reg14
.Ltmp3747:
	.quad	.Ltmp1550-.Lfunc_begin1
	.quad	.Ltmp1557-.Lfunc_begin1
	.short	.Ltmp3749-.Ltmp3748     # Loc expr size
.Ltmp3748:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3749:
	.quad	.Ltmp1557-.Lfunc_begin1
	.quad	.Ltmp1558-.Lfunc_begin1
	.short	.Ltmp3751-.Ltmp3750     # Loc expr size
.Ltmp3750:
	.byte	94                      # DW_OP_reg14
.Ltmp3751:
	.quad	.Ltmp1558-.Lfunc_begin1
	.quad	.Ltmp1564-.Lfunc_begin1
	.short	.Ltmp3753-.Ltmp3752     # Loc expr size
.Ltmp3752:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3753:
	.quad	.Ltmp1564-.Lfunc_begin1
	.quad	.Ltmp1565-.Lfunc_begin1
	.short	.Ltmp3755-.Ltmp3754     # Loc expr size
.Ltmp3754:
	.byte	94                      # DW_OP_reg14
.Ltmp3755:
	.quad	.Ltmp1565-.Lfunc_begin1
	.quad	.Ltmp1571-.Lfunc_begin1
	.short	.Ltmp3757-.Ltmp3756     # Loc expr size
.Ltmp3756:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3757:
	.quad	.Ltmp1571-.Lfunc_begin1
	.quad	.Ltmp1572-.Lfunc_begin1
	.short	.Ltmp3759-.Ltmp3758     # Loc expr size
.Ltmp3758:
	.byte	94                      # DW_OP_reg14
.Ltmp3759:
	.quad	.Ltmp1572-.Lfunc_begin1
	.quad	.Ltmp1578-.Lfunc_begin1
	.short	.Ltmp3761-.Ltmp3760     # Loc expr size
.Ltmp3760:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3761:
	.quad	.Ltmp1578-.Lfunc_begin1
	.quad	.Ltmp1579-.Lfunc_begin1
	.short	.Ltmp3763-.Ltmp3762     # Loc expr size
.Ltmp3762:
	.byte	94                      # DW_OP_reg14
.Ltmp3763:
	.quad	.Ltmp1579-.Lfunc_begin1
	.quad	.Ltmp1586-.Lfunc_begin1
	.short	.Ltmp3765-.Ltmp3764     # Loc expr size
.Ltmp3764:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3765:
	.quad	.Ltmp1586-.Lfunc_begin1
	.quad	.Ltmp1587-.Lfunc_begin1
	.short	.Ltmp3767-.Ltmp3766     # Loc expr size
.Ltmp3766:
	.byte	94                      # DW_OP_reg14
.Ltmp3767:
	.quad	.Ltmp1587-.Lfunc_begin1
	.quad	.Ltmp1594-.Lfunc_begin1
	.short	.Ltmp3769-.Ltmp3768     # Loc expr size
.Ltmp3768:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3769:
	.quad	.Ltmp1594-.Lfunc_begin1
	.quad	.Ltmp1595-.Lfunc_begin1
	.short	.Ltmp3771-.Ltmp3770     # Loc expr size
.Ltmp3770:
	.byte	94                      # DW_OP_reg14
.Ltmp3771:
	.quad	.Ltmp1595-.Lfunc_begin1
	.quad	.Ltmp1601-.Lfunc_begin1
	.short	.Ltmp3773-.Ltmp3772     # Loc expr size
.Ltmp3772:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3773:
	.quad	.Ltmp1601-.Lfunc_begin1
	.quad	.Ltmp1602-.Lfunc_begin1
	.short	.Ltmp3775-.Ltmp3774     # Loc expr size
.Ltmp3774:
	.byte	94                      # DW_OP_reg14
.Ltmp3775:
	.quad	.Ltmp1602-.Lfunc_begin1
	.quad	.Ltmp1609-.Lfunc_begin1
	.short	.Ltmp3777-.Ltmp3776     # Loc expr size
.Ltmp3776:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3777:
	.quad	.Ltmp1609-.Lfunc_begin1
	.quad	.Ltmp1610-.Lfunc_begin1
	.short	.Ltmp3779-.Ltmp3778     # Loc expr size
.Ltmp3778:
	.byte	94                      # DW_OP_reg14
.Ltmp3779:
	.quad	.Ltmp1610-.Lfunc_begin1
	.quad	.Ltmp1618-.Lfunc_begin1
	.short	.Ltmp3781-.Ltmp3780     # Loc expr size
.Ltmp3780:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3781:
	.quad	.Ltmp1618-.Lfunc_begin1
	.quad	.Ltmp1621-.Lfunc_begin1
	.short	.Ltmp3783-.Ltmp3782     # Loc expr size
.Ltmp3782:
	.byte	92                      # DW_OP_reg12
.Ltmp3783:
	.quad	.Ltmp1621-.Lfunc_begin1
	.quad	.Ltmp1654-.Lfunc_begin1
	.short	.Ltmp3785-.Ltmp3784     # Loc expr size
.Ltmp3784:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3785:
	.quad	.Ltmp1654-.Lfunc_begin1
	.quad	.Ltmp1656-.Lfunc_begin1
	.short	.Ltmp3787-.Ltmp3786     # Loc expr size
.Ltmp3786:
	.byte	92                      # DW_OP_reg12
.Ltmp3787:
	.quad	.Ltmp1656-.Lfunc_begin1
	.quad	.Ltmp1659-.Lfunc_begin1
	.short	.Ltmp3789-.Ltmp3788     # Loc expr size
.Ltmp3788:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3789:
	.quad	.Ltmp1659-.Lfunc_begin1
	.quad	.Ltmp1662-.Lfunc_begin1
	.short	.Ltmp3791-.Ltmp3790     # Loc expr size
.Ltmp3790:
	.byte	92                      # DW_OP_reg12
.Ltmp3791:
	.quad	.Ltmp1663-.Lfunc_begin1
	.quad	.Ltmp1668-.Lfunc_begin1
	.short	.Ltmp3793-.Ltmp3792     # Loc expr size
.Ltmp3792:
	.byte	92                      # DW_OP_reg12
.Ltmp3793:
	.quad	.Ltmp1669-.Lfunc_begin1
	.quad	.Ltmp1674-.Lfunc_begin1
	.short	.Ltmp3795-.Ltmp3794     # Loc expr size
.Ltmp3794:
	.byte	92                      # DW_OP_reg12
.Ltmp3795:
	.quad	.Ltmp1675-.Lfunc_begin1
	.quad	.Ltmp1677-.Lfunc_begin1
	.short	.Ltmp3797-.Ltmp3796     # Loc expr size
.Ltmp3796:
	.byte	92                      # DW_OP_reg12
.Ltmp3797:
	.quad	.Ltmp1677-.Lfunc_begin1
	.quad	.Ltmp1679-.Lfunc_begin1
	.short	.Ltmp3799-.Ltmp3798     # Loc expr size
.Ltmp3798:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3799:
	.quad	.Ltmp1679-.Lfunc_begin1
	.quad	.Ltmp1680-.Lfunc_begin1
	.short	.Ltmp3801-.Ltmp3800     # Loc expr size
.Ltmp3800:
	.byte	92                      # DW_OP_reg12
.Ltmp3801:
	.quad	.Ltmp1681-.Lfunc_begin1
	.quad	.Ltmp1683-.Lfunc_begin1
	.short	.Ltmp3803-.Ltmp3802     # Loc expr size
.Ltmp3802:
	.byte	92                      # DW_OP_reg12
.Ltmp3803:
	.quad	.Ltmp1683-.Lfunc_begin1
	.quad	.Lfunc_end16-.Lfunc_begin1
	.short	.Ltmp3805-.Ltmp3804     # Loc expr size
.Ltmp3804:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210\177"              # -120
.Ltmp3805:
	.quad	0
	.quad	0
.Ldebug_loc128:
	.quad	.Lfunc_begin16-.Lfunc_begin1
	.quad	.Ltmp1451-.Lfunc_begin1
	.short	.Ltmp3807-.Ltmp3806     # Loc expr size
.Ltmp3806:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3807:
	.quad	.Ltmp1451-.Lfunc_begin1
	.quad	.Ltmp1469-.Lfunc_begin1
	.short	.Ltmp3809-.Ltmp3808     # Loc expr size
.Ltmp3808:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3809:
	.quad	.Ltmp1469-.Lfunc_begin1
	.quad	.Ltmp1470-.Lfunc_begin1
	.short	.Ltmp3811-.Ltmp3810     # Loc expr size
.Ltmp3810:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3811:
	.quad	.Ltmp1470-.Lfunc_begin1
	.quad	.Ltmp1480-.Lfunc_begin1
	.short	.Ltmp3813-.Ltmp3812     # Loc expr size
.Ltmp3812:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3813:
	.quad	.Ltmp1480-.Lfunc_begin1
	.quad	.Ltmp1482-.Lfunc_begin1
	.short	.Ltmp3815-.Ltmp3814     # Loc expr size
.Ltmp3814:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3815:
	.quad	.Ltmp1482-.Lfunc_begin1
	.quad	.Ltmp1487-.Lfunc_begin1
	.short	.Ltmp3817-.Ltmp3816     # Loc expr size
.Ltmp3816:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3817:
	.quad	.Ltmp1487-.Lfunc_begin1
	.quad	.Ltmp1489-.Lfunc_begin1
	.short	.Ltmp3819-.Ltmp3818     # Loc expr size
.Ltmp3818:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3819:
	.quad	.Ltmp1489-.Lfunc_begin1
	.quad	.Ltmp1494-.Lfunc_begin1
	.short	.Ltmp3821-.Ltmp3820     # Loc expr size
.Ltmp3820:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3821:
	.quad	.Ltmp1494-.Lfunc_begin1
	.quad	.Ltmp1496-.Lfunc_begin1
	.short	.Ltmp3823-.Ltmp3822     # Loc expr size
.Ltmp3822:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3823:
	.quad	.Ltmp1496-.Lfunc_begin1
	.quad	.Ltmp1501-.Lfunc_begin1
	.short	.Ltmp3825-.Ltmp3824     # Loc expr size
.Ltmp3824:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3825:
	.quad	.Ltmp1501-.Lfunc_begin1
	.quad	.Ltmp1503-.Lfunc_begin1
	.short	.Ltmp3827-.Ltmp3826     # Loc expr size
.Ltmp3826:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3827:
	.quad	.Ltmp1503-.Lfunc_begin1
	.quad	.Ltmp1508-.Lfunc_begin1
	.short	.Ltmp3829-.Ltmp3828     # Loc expr size
.Ltmp3828:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3829:
	.quad	.Ltmp1508-.Lfunc_begin1
	.quad	.Ltmp1510-.Lfunc_begin1
	.short	.Ltmp3831-.Ltmp3830     # Loc expr size
.Ltmp3830:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3831:
	.quad	.Ltmp1510-.Lfunc_begin1
	.quad	.Ltmp1516-.Lfunc_begin1
	.short	.Ltmp3833-.Ltmp3832     # Loc expr size
.Ltmp3832:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3833:
	.quad	.Ltmp1516-.Lfunc_begin1
	.quad	.Ltmp1517-.Lfunc_begin1
	.short	.Ltmp3835-.Ltmp3834     # Loc expr size
.Ltmp3834:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3835:
	.quad	.Ltmp1517-.Lfunc_begin1
	.quad	.Ltmp1523-.Lfunc_begin1
	.short	.Ltmp3837-.Ltmp3836     # Loc expr size
.Ltmp3836:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3837:
	.quad	.Ltmp1523-.Lfunc_begin1
	.quad	.Ltmp1524-.Lfunc_begin1
	.short	.Ltmp3839-.Ltmp3838     # Loc expr size
.Ltmp3838:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3839:
	.quad	.Ltmp1524-.Lfunc_begin1
	.quad	.Ltmp1530-.Lfunc_begin1
	.short	.Ltmp3841-.Ltmp3840     # Loc expr size
.Ltmp3840:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3841:
	.quad	.Ltmp1530-.Lfunc_begin1
	.quad	.Ltmp1531-.Lfunc_begin1
	.short	.Ltmp3843-.Ltmp3842     # Loc expr size
.Ltmp3842:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3843:
	.quad	.Ltmp1531-.Lfunc_begin1
	.quad	.Ltmp1537-.Lfunc_begin1
	.short	.Ltmp3845-.Ltmp3844     # Loc expr size
.Ltmp3844:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3845:
	.quad	.Ltmp1537-.Lfunc_begin1
	.quad	.Ltmp1538-.Lfunc_begin1
	.short	.Ltmp3847-.Ltmp3846     # Loc expr size
.Ltmp3846:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3847:
	.quad	.Ltmp1538-.Lfunc_begin1
	.quad	.Ltmp1544-.Lfunc_begin1
	.short	.Ltmp3849-.Ltmp3848     # Loc expr size
.Ltmp3848:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3849:
	.quad	.Ltmp1544-.Lfunc_begin1
	.quad	.Ltmp1547-.Lfunc_begin1
	.short	.Ltmp3851-.Ltmp3850     # Loc expr size
.Ltmp3850:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3851:
	.quad	.Ltmp1547-.Lfunc_begin1
	.quad	.Ltmp1552-.Lfunc_begin1
	.short	.Ltmp3853-.Ltmp3852     # Loc expr size
.Ltmp3852:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3853:
	.quad	.Ltmp1552-.Lfunc_begin1
	.quad	.Ltmp1554-.Lfunc_begin1
	.short	.Ltmp3855-.Ltmp3854     # Loc expr size
.Ltmp3854:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3855:
	.quad	.Ltmp1554-.Lfunc_begin1
	.quad	.Ltmp1560-.Lfunc_begin1
	.short	.Ltmp3857-.Ltmp3856     # Loc expr size
.Ltmp3856:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3857:
	.quad	.Ltmp1560-.Lfunc_begin1
	.quad	.Ltmp1561-.Lfunc_begin1
	.short	.Ltmp3859-.Ltmp3858     # Loc expr size
.Ltmp3858:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3859:
	.quad	.Ltmp1561-.Lfunc_begin1
	.quad	.Ltmp1567-.Lfunc_begin1
	.short	.Ltmp3861-.Ltmp3860     # Loc expr size
.Ltmp3860:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3861:
	.quad	.Ltmp1567-.Lfunc_begin1
	.quad	.Ltmp1568-.Lfunc_begin1
	.short	.Ltmp3863-.Ltmp3862     # Loc expr size
.Ltmp3862:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3863:
	.quad	.Ltmp1568-.Lfunc_begin1
	.quad	.Ltmp1574-.Lfunc_begin1
	.short	.Ltmp3865-.Ltmp3864     # Loc expr size
.Ltmp3864:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3865:
	.quad	.Ltmp1574-.Lfunc_begin1
	.quad	.Ltmp1575-.Lfunc_begin1
	.short	.Ltmp3867-.Ltmp3866     # Loc expr size
.Ltmp3866:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3867:
	.quad	.Ltmp1575-.Lfunc_begin1
	.quad	.Ltmp1581-.Lfunc_begin1
	.short	.Ltmp3869-.Ltmp3868     # Loc expr size
.Ltmp3868:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3869:
	.quad	.Ltmp1581-.Lfunc_begin1
	.quad	.Ltmp1584-.Lfunc_begin1
	.short	.Ltmp3871-.Ltmp3870     # Loc expr size
.Ltmp3870:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3871:
	.quad	.Ltmp1584-.Lfunc_begin1
	.quad	.Ltmp1589-.Lfunc_begin1
	.short	.Ltmp3873-.Ltmp3872     # Loc expr size
.Ltmp3872:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3873:
	.quad	.Ltmp1589-.Lfunc_begin1
	.quad	.Ltmp1591-.Lfunc_begin1
	.short	.Ltmp3875-.Ltmp3874     # Loc expr size
.Ltmp3874:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3875:
	.quad	.Ltmp1591-.Lfunc_begin1
	.quad	.Ltmp1597-.Lfunc_begin1
	.short	.Ltmp3877-.Ltmp3876     # Loc expr size
.Ltmp3876:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3877:
	.quad	.Ltmp1597-.Lfunc_begin1
	.quad	.Ltmp1599-.Lfunc_begin1
	.short	.Ltmp3879-.Ltmp3878     # Loc expr size
.Ltmp3878:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3879:
	.quad	.Ltmp1599-.Lfunc_begin1
	.quad	.Ltmp1604-.Lfunc_begin1
	.short	.Ltmp3881-.Ltmp3880     # Loc expr size
.Ltmp3880:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3881:
	.quad	.Ltmp1604-.Lfunc_begin1
	.quad	.Ltmp1607-.Lfunc_begin1
	.short	.Ltmp3883-.Ltmp3882     # Loc expr size
.Ltmp3882:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3883:
	.quad	.Ltmp1607-.Lfunc_begin1
	.quad	.Ltmp1612-.Lfunc_begin1
	.short	.Ltmp3885-.Ltmp3884     # Loc expr size
.Ltmp3884:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3885:
	.quad	.Ltmp1612-.Lfunc_begin1
	.quad	.Ltmp1614-.Lfunc_begin1
	.short	.Ltmp3887-.Ltmp3886     # Loc expr size
.Ltmp3886:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3887:
	.quad	.Ltmp1614-.Lfunc_begin1
	.quad	.Ltmp1631-.Lfunc_begin1
	.short	.Ltmp3889-.Ltmp3888     # Loc expr size
.Ltmp3888:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3889:
	.quad	.Ltmp1631-.Lfunc_begin1
	.quad	.Ltmp1632-.Lfunc_begin1
	.short	.Ltmp3891-.Ltmp3890     # Loc expr size
.Ltmp3890:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3891:
	.quad	.Ltmp1632-.Lfunc_begin1
	.quad	.Ltmp1686-.Lfunc_begin1
	.short	.Ltmp3893-.Ltmp3892     # Loc expr size
.Ltmp3892:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3893:
	.quad	.Ltmp1686-.Lfunc_begin1
	.quad	.Ltmp1689-.Lfunc_begin1
	.short	.Ltmp3895-.Ltmp3894     # Loc expr size
.Ltmp3894:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3895:
	.quad	.Ltmp1689-.Lfunc_begin1
	.quad	.Ltmp1692-.Lfunc_begin1
	.short	.Ltmp3897-.Ltmp3896     # Loc expr size
.Ltmp3896:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\177"              # -72
.Ltmp3897:
	.quad	.Ltmp1692-.Lfunc_begin1
	.quad	.Ltmp1693-.Lfunc_begin1
	.short	.Ltmp3899-.Ltmp3898     # Loc expr size
.Ltmp3898:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3899:
	.quad	0
	.quad	0
.Ldebug_loc129:
	.quad	.Lfunc_begin16-.Lfunc_begin1
	.quad	.Ltmp1450-.Lfunc_begin1
	.short	.Ltmp3901-.Ltmp3900     # Loc expr size
.Ltmp3900:
	.byte	88                      # DW_OP_reg8
.Ltmp3901:
	.quad	.Ltmp1450-.Lfunc_begin1
	.quad	.Ltmp1705-.Lfunc_begin1
	.short	.Ltmp3903-.Ltmp3902     # Loc expr size
.Ltmp3902:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260z"                 # -720
.Ltmp3903:
	.quad	.Ltmp1705-.Lfunc_begin1
	.quad	.Ltmp1706-.Lfunc_begin1
	.short	.Ltmp3905-.Ltmp3904     # Loc expr size
.Ltmp3904:
	.byte	93                      # DW_OP_reg13
.Ltmp3905:
	.quad	.Ltmp1706-.Lfunc_begin1
	.quad	.Ltmp1713-.Lfunc_begin1
	.short	.Ltmp3907-.Ltmp3906     # Loc expr size
.Ltmp3906:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260z"                 # -720
.Ltmp3907:
	.quad	.Ltmp1713-.Lfunc_begin1
	.quad	.Ltmp1714-.Lfunc_begin1
	.short	.Ltmp3909-.Ltmp3908     # Loc expr size
.Ltmp3908:
	.byte	83                      # DW_OP_reg3
.Ltmp3909:
	.quad	0
	.quad	0
.Ldebug_loc130:
	.quad	.Lfunc_begin16-.Lfunc_begin1
	.quad	.Ltmp1449-.Lfunc_begin1
	.short	.Ltmp3911-.Ltmp3910     # Loc expr size
.Ltmp3910:
	.byte	89                      # super-register DW_OP_reg9
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3911:
	.quad	.Ltmp1449-.Lfunc_begin1
	.quad	.Ltmp1460-.Lfunc_begin1
	.short	.Ltmp3913-.Ltmp3912     # Loc expr size
.Ltmp3912:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3913:
	.quad	.Ltmp1460-.Lfunc_begin1
	.quad	.Lfunc_end16-.Lfunc_begin1
	.short	.Ltmp3915-.Ltmp3914     # Loc expr size
.Ltmp3914:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220z"                 # -752
.Ltmp3915:
	.quad	0
	.quad	0
.Ldebug_loc131:
	.quad	.Ltmp1456-.Lfunc_begin1
	.quad	.Ltmp1462-.Lfunc_begin1
	.short	.Ltmp3917-.Ltmp3916     # Loc expr size
.Ltmp3916:
	.byte	95                      # DW_OP_reg15
.Ltmp3917:
	.quad	0
	.quad	0
.Ldebug_loc132:
	.quad	.Ltmp1457-.Lfunc_begin1
	.quad	.Ltmp1461-.Lfunc_begin1
	.short	.Ltmp3919-.Ltmp3918     # Loc expr size
.Ltmp3918:
	.byte	83                      # DW_OP_reg3
.Ltmp3919:
	.quad	0
	.quad	0
.Ldebug_loc133:
	.quad	.Ltmp1473-.Lfunc_begin1
	.quad	.Ltmp1479-.Lfunc_begin1
	.short	.Ltmp3921-.Ltmp3920     # Loc expr size
.Ltmp3920:
	.byte	17                      # DW_OP_consts
	.asciz	"\344"                  # 100
	.byte	159                     # DW_OP_stack_value
.Ltmp3921:
	.quad	.Ltmp1479-.Lfunc_begin1
	.quad	.Ltmp1486-.Lfunc_begin1
	.short	.Ltmp3923-.Ltmp3922     # Loc expr size
.Ltmp3922:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3923:
	.quad	.Ltmp1486-.Lfunc_begin1
	.quad	.Ltmp1493-.Lfunc_begin1
	.short	.Ltmp3925-.Ltmp3924     # Loc expr size
.Ltmp3924:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3925:
	.quad	.Ltmp1493-.Lfunc_begin1
	.quad	.Ltmp1500-.Lfunc_begin1
	.short	.Ltmp3927-.Ltmp3926     # Loc expr size
.Ltmp3926:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3927:
	.quad	.Ltmp1500-.Lfunc_begin1
	.quad	.Ltmp1507-.Lfunc_begin1
	.short	.Ltmp3929-.Ltmp3928     # Loc expr size
.Ltmp3928:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3929:
	.quad	.Ltmp1507-.Lfunc_begin1
	.quad	.Ltmp1511-.Lfunc_begin1
	.short	.Ltmp3931-.Ltmp3930     # Loc expr size
.Ltmp3930:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3931:
	.quad	.Ltmp1511-.Lfunc_begin1
	.quad	.Ltmp1515-.Lfunc_begin1
	.short	.Ltmp3933-.Ltmp3932     # Loc expr size
.Ltmp3932:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3933:
	.quad	.Ltmp1515-.Lfunc_begin1
	.quad	.Ltmp1519-.Lfunc_begin1
	.short	.Ltmp3935-.Ltmp3934     # Loc expr size
.Ltmp3934:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3935:
	.quad	.Ltmp1519-.Lfunc_begin1
	.quad	.Ltmp1522-.Lfunc_begin1
	.short	.Ltmp3937-.Ltmp3936     # Loc expr size
.Ltmp3936:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3937:
	.quad	.Ltmp1522-.Lfunc_begin1
	.quad	.Ltmp1525-.Lfunc_begin1
	.short	.Ltmp3939-.Ltmp3938     # Loc expr size
.Ltmp3938:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3939:
	.quad	.Ltmp1525-.Lfunc_begin1
	.quad	.Ltmp1529-.Lfunc_begin1
	.short	.Ltmp3941-.Ltmp3940     # Loc expr size
.Ltmp3940:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3941:
	.quad	.Ltmp1529-.Lfunc_begin1
	.quad	.Ltmp1532-.Lfunc_begin1
	.short	.Ltmp3943-.Ltmp3942     # Loc expr size
.Ltmp3942:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3943:
	.quad	.Ltmp1532-.Lfunc_begin1
	.quad	.Ltmp1536-.Lfunc_begin1
	.short	.Ltmp3945-.Ltmp3944     # Loc expr size
.Ltmp3944:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3945:
	.quad	.Ltmp1536-.Lfunc_begin1
	.quad	.Ltmp1539-.Lfunc_begin1
	.short	.Ltmp3947-.Ltmp3946     # Loc expr size
.Ltmp3946:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3947:
	.quad	.Ltmp1539-.Lfunc_begin1
	.quad	.Ltmp1543-.Lfunc_begin1
	.short	.Ltmp3949-.Ltmp3948     # Loc expr size
.Ltmp3948:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3949:
	.quad	.Ltmp1543-.Lfunc_begin1
	.quad	.Ltmp1546-.Lfunc_begin1
	.short	.Ltmp3951-.Ltmp3950     # Loc expr size
.Ltmp3950:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3951:
	.quad	.Ltmp1546-.Lfunc_begin1
	.quad	.Ltmp1551-.Lfunc_begin1
	.short	.Ltmp3953-.Ltmp3952     # Loc expr size
.Ltmp3952:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3953:
	.quad	.Ltmp1551-.Lfunc_begin1
	.quad	.Ltmp1556-.Lfunc_begin1
	.short	.Ltmp3955-.Ltmp3954     # Loc expr size
.Ltmp3954:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3955:
	.quad	.Ltmp1556-.Lfunc_begin1
	.quad	.Ltmp1559-.Lfunc_begin1
	.short	.Ltmp3957-.Ltmp3956     # Loc expr size
.Ltmp3956:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3957:
	.quad	.Ltmp1559-.Lfunc_begin1
	.quad	.Ltmp1562-.Lfunc_begin1
	.short	.Ltmp3959-.Ltmp3958     # Loc expr size
.Ltmp3958:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3959:
	.quad	.Ltmp1562-.Lfunc_begin1
	.quad	.Ltmp1566-.Lfunc_begin1
	.short	.Ltmp3961-.Ltmp3960     # Loc expr size
.Ltmp3960:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3961:
	.quad	.Ltmp1566-.Lfunc_begin1
	.quad	.Ltmp1569-.Lfunc_begin1
	.short	.Ltmp3963-.Ltmp3962     # Loc expr size
.Ltmp3962:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3963:
	.quad	.Ltmp1569-.Lfunc_begin1
	.quad	.Ltmp1573-.Lfunc_begin1
	.short	.Ltmp3965-.Ltmp3964     # Loc expr size
.Ltmp3964:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3965:
	.quad	.Ltmp1573-.Lfunc_begin1
	.quad	.Ltmp1576-.Lfunc_begin1
	.short	.Ltmp3967-.Ltmp3966     # Loc expr size
.Ltmp3966:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3967:
	.quad	.Ltmp1576-.Lfunc_begin1
	.quad	.Ltmp1580-.Lfunc_begin1
	.short	.Ltmp3969-.Ltmp3968     # Loc expr size
.Ltmp3968:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3969:
	.quad	.Ltmp1580-.Lfunc_begin1
	.quad	.Ltmp1583-.Lfunc_begin1
	.short	.Ltmp3971-.Ltmp3970     # Loc expr size
.Ltmp3970:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3971:
	.quad	.Ltmp1583-.Lfunc_begin1
	.quad	.Ltmp1588-.Lfunc_begin1
	.short	.Ltmp3973-.Ltmp3972     # Loc expr size
.Ltmp3972:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3973:
	.quad	.Ltmp1588-.Lfunc_begin1
	.quad	.Ltmp1592-.Lfunc_begin1
	.short	.Ltmp3975-.Ltmp3974     # Loc expr size
.Ltmp3974:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3975:
	.quad	.Ltmp1592-.Lfunc_begin1
	.quad	.Ltmp1596-.Lfunc_begin1
	.short	.Ltmp3977-.Ltmp3976     # Loc expr size
.Ltmp3976:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3977:
	.quad	.Ltmp1596-.Lfunc_begin1
	.quad	.Ltmp1603-.Lfunc_begin1
	.short	.Ltmp3979-.Ltmp3978     # Loc expr size
.Ltmp3978:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3979:
	.quad	.Ltmp1603-.Lfunc_begin1
	.quad	.Ltmp1606-.Lfunc_begin1
	.short	.Ltmp3981-.Ltmp3980     # Loc expr size
.Ltmp3980:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3981:
	.quad	.Ltmp1606-.Lfunc_begin1
	.quad	.Ltmp1611-.Lfunc_begin1
	.short	.Ltmp3983-.Ltmp3982     # Loc expr size
.Ltmp3982:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3983:
	.quad	.Ltmp1611-.Lfunc_begin1
	.quad	.Ltmp1616-.Lfunc_begin1
	.short	.Ltmp3985-.Ltmp3984     # Loc expr size
.Ltmp3984:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3985:
	.quad	.Ltmp1616-.Lfunc_begin1
	.quad	.Ltmp1687-.Lfunc_begin1
	.short	.Ltmp3987-.Ltmp3986     # Loc expr size
.Ltmp3986:
	.byte	118                     # DW_OP_breg6
	.ascii	"\264y"                 # -844
.Ltmp3987:
	.quad	.Ltmp1687-.Lfunc_begin1
	.quad	.Ltmp1691-.Lfunc_begin1
	.short	.Ltmp3989-.Ltmp3988     # Loc expr size
.Ltmp3988:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3989:
	.quad	.Ltmp1691-.Lfunc_begin1
	.quad	.Ltmp1693-.Lfunc_begin1
	.short	.Ltmp3991-.Ltmp3990     # Loc expr size
.Ltmp3990:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3991:
	.quad	.Ltmp1694-.Lfunc_begin1
	.quad	.Ltmp1707-.Lfunc_begin1
	.short	.Ltmp3993-.Ltmp3992     # Loc expr size
.Ltmp3992:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3993:
	.quad	.Ltmp1707-.Lfunc_begin1
	.quad	.Ltmp1708-.Lfunc_begin1
	.short	.Ltmp3995-.Ltmp3994     # Loc expr size
.Ltmp3994:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp3995:
	.quad	.Ltmp1708-.Lfunc_begin1
	.quad	.Ltmp1712-.Lfunc_begin1
	.short	.Ltmp3997-.Ltmp3996     # Loc expr size
.Ltmp3996:
	.byte	118                     # DW_OP_breg6
	.ascii	"\210|"                 # -504
.Ltmp3997:
	.quad	.Ltmp1712-.Lfunc_begin1
	.quad	.Lfunc_end16-.Lfunc_begin1
	.short	.Ltmp3999-.Ltmp3998     # Loc expr size
.Ltmp3998:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp3999:
	.quad	0
	.quad	0
.Ldebug_loc134:
	.quad	.Ltmp1615-.Lfunc_begin1
	.quad	.Ltmp1623-.Lfunc_begin1
	.short	.Ltmp4001-.Ltmp4000     # Loc expr size
.Ltmp4000:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp4001:
	.quad	.Ltmp1623-.Lfunc_begin1
	.quad	.Ltmp1624-.Lfunc_begin1
	.short	.Ltmp4003-.Ltmp4002     # Loc expr size
.Ltmp4002:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4003:
	.quad	.Ltmp1625-.Lfunc_begin1
	.quad	.Ltmp1628-.Lfunc_begin1
	.short	.Ltmp4005-.Ltmp4004     # Loc expr size
.Ltmp4004:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4005:
	.quad	.Ltmp1628-.Lfunc_begin1
	.quad	.Ltmp1645-.Lfunc_begin1
	.short	.Ltmp4007-.Ltmp4006     # Loc expr size
.Ltmp4006:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370~"                 # -136
.Ltmp4007:
	.quad	.Ltmp1645-.Lfunc_begin1
	.quad	.Ltmp1649-.Lfunc_begin1
	.short	.Ltmp4009-.Ltmp4008     # Loc expr size
.Ltmp4008:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4009:
	.quad	.Ltmp1649-.Lfunc_begin1
	.quad	.Lfunc_end16-.Lfunc_begin1
	.short	.Ltmp4011-.Ltmp4010     # Loc expr size
.Ltmp4010:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370~"                 # -136
.Ltmp4011:
	.quad	0
	.quad	0
.Ldebug_loc135:
	.quad	.Ltmp1615-.Lfunc_begin1
	.quad	.Ltmp1619-.Lfunc_begin1
	.short	.Ltmp4013-.Ltmp4012     # Loc expr size
.Ltmp4012:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp4013:
	.quad	.Ltmp1619-.Lfunc_begin1
	.quad	.Ltmp1620-.Lfunc_begin1
	.short	.Ltmp4015-.Ltmp4014     # Loc expr size
.Ltmp4014:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4015:
	.quad	.Ltmp1622-.Lfunc_begin1
	.quad	.Ltmp1626-.Lfunc_begin1
	.short	.Ltmp4017-.Ltmp4016     # Loc expr size
.Ltmp4016:
	.byte	81                      # super-register DW_OP_reg1
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4017:
	.quad	.Ltmp1626-.Lfunc_begin1
	.quad	.Ltmp1637-.Lfunc_begin1
	.short	.Ltmp4019-.Ltmp4018     # Loc expr size
.Ltmp4018:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320}"                 # -304
.Ltmp4019:
	.quad	.Ltmp1637-.Lfunc_begin1
	.quad	.Ltmp1641-.Lfunc_begin1
	.short	.Ltmp4021-.Ltmp4020     # Loc expr size
.Ltmp4020:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4021:
	.quad	.Ltmp1641-.Lfunc_begin1
	.quad	.Lfunc_end16-.Lfunc_begin1
	.short	.Ltmp4023-.Ltmp4022     # Loc expr size
.Ltmp4022:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320}"                 # -304
.Ltmp4023:
	.quad	0
	.quad	0
.Ldebug_loc136:
	.quad	.Ltmp1627-.Lfunc_begin1
	.quad	.Ltmp1635-.Lfunc_begin1
	.short	.Ltmp4025-.Ltmp4024     # Loc expr size
.Ltmp4024:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4025:
	.quad	0
	.quad	0
.Ldebug_loc137:
	.quad	.Ltmp1629-.Lfunc_begin1
	.quad	.Ltmp1634-.Lfunc_begin1
	.short	.Ltmp4027-.Ltmp4026     # Loc expr size
.Ltmp4026:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4027:
	.quad	0
	.quad	0
.Ldebug_loc138:
	.quad	.Ltmp1630-.Lfunc_begin1
	.quad	.Ltmp1632-.Lfunc_begin1
	.short	.Ltmp4029-.Ltmp4028     # Loc expr size
.Ltmp4028:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4029:
	.quad	.Ltmp1678-.Lfunc_begin1
	.quad	.Ltmp1679-.Lfunc_begin1
	.short	.Ltmp4031-.Ltmp4030     # Loc expr size
.Ltmp4030:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4031:
	.quad	.Ltmp1684-.Lfunc_begin1
	.quad	.Ltmp1685-.Lfunc_begin1
	.short	.Ltmp4033-.Ltmp4032     # Loc expr size
.Ltmp4032:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4033:
	.quad	0
	.quad	0
.Ldebug_loc139:
	.quad	.Ltmp1640-.Lfunc_begin1
	.quad	.Ltmp1642-.Lfunc_begin1
	.short	.Ltmp4035-.Ltmp4034     # Loc expr size
.Ltmp4034:
	.byte	98                      # DW_OP_reg18
.Ltmp4035:
	.quad	.Ltmp1642-.Lfunc_begin1
	.quad	.Ltmp1648-.Lfunc_begin1
	.short	.Ltmp4037-.Ltmp4036     # Loc expr size
.Ltmp4036:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp4037:
	.quad	.Ltmp1648-.Lfunc_begin1
	.quad	.Ltmp1650-.Lfunc_begin1
	.short	.Ltmp4039-.Ltmp4038     # Loc expr size
.Ltmp4038:
	.byte	98                      # DW_OP_reg18
.Ltmp4039:
	.quad	.Ltmp1650-.Lfunc_begin1
	.quad	.Ltmp1664-.Lfunc_begin1
	.short	.Ltmp4041-.Ltmp4040     # Loc expr size
.Ltmp4040:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp4041:
	.quad	.Ltmp1664-.Lfunc_begin1
	.quad	.Ltmp1665-.Lfunc_begin1
	.short	.Ltmp4043-.Ltmp4042     # Loc expr size
.Ltmp4042:
	.byte	97                      # DW_OP_reg17
.Ltmp4043:
	.quad	.Ltmp1667-.Lfunc_begin1
	.quad	.Ltmp1670-.Lfunc_begin1
	.short	.Ltmp4045-.Ltmp4044     # Loc expr size
.Ltmp4044:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"                 # -144
.Ltmp4045:
	.quad	.Ltmp1670-.Lfunc_begin1
	.quad	.Ltmp1671-.Lfunc_begin1
	.short	.Ltmp4047-.Ltmp4046     # Loc expr size
.Ltmp4046:
	.byte	97                      # DW_OP_reg17
.Ltmp4047:
	.quad	0
	.quad	0
.Ldebug_loc140:
	.quad	.Lfunc_begin17-.Lfunc_begin1
	.quad	.Ltmp1730-.Lfunc_begin1
	.short	.Ltmp4049-.Ltmp4048     # Loc expr size
.Ltmp4048:
	.byte	85                      # DW_OP_reg5
.Ltmp4049:
	.quad	.Ltmp1730-.Lfunc_begin1
	.quad	.Ltmp1736-.Lfunc_begin1
	.short	.Ltmp4051-.Ltmp4050     # Loc expr size
.Ltmp4050:
	.byte	94                      # DW_OP_reg14
.Ltmp4051:
	.quad	.Ltmp1736-.Lfunc_begin1
	.quad	.Ltmp1979-.Lfunc_begin1
	.short	.Ltmp4053-.Ltmp4052     # Loc expr size
.Ltmp4052:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340{"                 # -544
.Ltmp4053:
	.quad	.Ltmp1979-.Lfunc_begin1
	.quad	.Ltmp1988-.Lfunc_begin1
	.short	.Ltmp4055-.Ltmp4054     # Loc expr size
.Ltmp4054:
	.byte	93                      # DW_OP_reg13
.Ltmp4055:
	.quad	.Ltmp1988-.Lfunc_begin1
	.quad	.Lfunc_end17-.Lfunc_begin1
	.short	.Ltmp4057-.Ltmp4056     # Loc expr size
.Ltmp4056:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340{"                 # -544
.Ltmp4057:
	.quad	0
	.quad	0
.Ldebug_loc141:
	.quad	.Lfunc_begin17-.Lfunc_begin1
	.quad	.Ltmp1729-.Lfunc_begin1
	.short	.Ltmp4059-.Ltmp4058     # Loc expr size
.Ltmp4058:
	.byte	84                      # DW_OP_reg4
.Ltmp4059:
	.quad	.Ltmp1729-.Lfunc_begin1
	.quad	.Ltmp1735-.Lfunc_begin1
	.short	.Ltmp4061-.Ltmp4060     # Loc expr size
.Ltmp4060:
	.byte	83                      # DW_OP_reg3
.Ltmp4061:
	.quad	.Ltmp1735-.Lfunc_begin1
	.quad	.Ltmp1851-.Lfunc_begin1
	.short	.Ltmp4063-.Ltmp4062     # Loc expr size
.Ltmp4062:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4063:
	.quad	.Ltmp1851-.Lfunc_begin1
	.quad	.Ltmp1854-.Lfunc_begin1
	.short	.Ltmp4065-.Ltmp4064     # Loc expr size
.Ltmp4064:
	.byte	95                      # DW_OP_reg15
.Ltmp4065:
	.quad	.Ltmp1854-.Lfunc_begin1
	.quad	.Ltmp1858-.Lfunc_begin1
	.short	.Ltmp4067-.Ltmp4066     # Loc expr size
.Ltmp4066:
	.byte	93                      # DW_OP_reg13
.Ltmp4067:
	.quad	.Ltmp1858-.Lfunc_begin1
	.quad	.Ltmp1925-.Lfunc_begin1
	.short	.Ltmp4069-.Ltmp4068     # Loc expr size
.Ltmp4068:
	.byte	95                      # DW_OP_reg15
.Ltmp4069:
	.quad	.Ltmp1926-.Lfunc_begin1
	.quad	.Ltmp1927-.Lfunc_begin1
	.short	.Ltmp4071-.Ltmp4070     # Loc expr size
.Ltmp4070:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4071:
	.quad	.Ltmp1927-.Lfunc_begin1
	.quad	.Ltmp1928-.Lfunc_begin1
	.short	.Ltmp4073-.Ltmp4072     # Loc expr size
.Ltmp4072:
	.byte	83                      # DW_OP_reg3
.Ltmp4073:
	.quad	.Ltmp1928-.Lfunc_begin1
	.quad	.Ltmp1929-.Lfunc_begin1
	.short	.Ltmp4075-.Ltmp4074     # Loc expr size
.Ltmp4074:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4075:
	.quad	.Ltmp1929-.Lfunc_begin1
	.quad	.Ltmp1930-.Lfunc_begin1
	.short	.Ltmp4077-.Ltmp4076     # Loc expr size
.Ltmp4076:
	.byte	83                      # DW_OP_reg3
.Ltmp4077:
	.quad	.Ltmp1930-.Lfunc_begin1
	.quad	.Ltmp1931-.Lfunc_begin1
	.short	.Ltmp4079-.Ltmp4078     # Loc expr size
.Ltmp4078:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4079:
	.quad	.Ltmp1931-.Lfunc_begin1
	.quad	.Ltmp1932-.Lfunc_begin1
	.short	.Ltmp4081-.Ltmp4080     # Loc expr size
.Ltmp4080:
	.byte	83                      # DW_OP_reg3
.Ltmp4081:
	.quad	.Ltmp1933-.Lfunc_begin1
	.quad	.Ltmp1934-.Lfunc_begin1
	.short	.Ltmp4083-.Ltmp4082     # Loc expr size
.Ltmp4082:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4083:
	.quad	.Ltmp1934-.Lfunc_begin1
	.quad	.Ltmp1935-.Lfunc_begin1
	.short	.Ltmp4085-.Ltmp4084     # Loc expr size
.Ltmp4084:
	.byte	83                      # DW_OP_reg3
.Ltmp4085:
	.quad	.Ltmp1935-.Lfunc_begin1
	.quad	.Ltmp1936-.Lfunc_begin1
	.short	.Ltmp4087-.Ltmp4086     # Loc expr size
.Ltmp4086:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4087:
	.quad	.Ltmp1936-.Lfunc_begin1
	.quad	.Ltmp1937-.Lfunc_begin1
	.short	.Ltmp4089-.Ltmp4088     # Loc expr size
.Ltmp4088:
	.byte	83                      # DW_OP_reg3
.Ltmp4089:
	.quad	.Ltmp1937-.Lfunc_begin1
	.quad	.Ltmp1938-.Lfunc_begin1
	.short	.Ltmp4091-.Ltmp4090     # Loc expr size
.Ltmp4090:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4091:
	.quad	.Ltmp1938-.Lfunc_begin1
	.quad	.Ltmp1939-.Lfunc_begin1
	.short	.Ltmp4093-.Ltmp4092     # Loc expr size
.Ltmp4092:
	.byte	83                      # DW_OP_reg3
.Ltmp4093:
	.quad	.Ltmp1939-.Lfunc_begin1
	.quad	.Ltmp1940-.Lfunc_begin1
	.short	.Ltmp4095-.Ltmp4094     # Loc expr size
.Ltmp4094:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4095:
	.quad	.Ltmp1940-.Lfunc_begin1
	.quad	.Ltmp1941-.Lfunc_begin1
	.short	.Ltmp4097-.Ltmp4096     # Loc expr size
.Ltmp4096:
	.byte	83                      # DW_OP_reg3
.Ltmp4097:
	.quad	.Ltmp1941-.Lfunc_begin1
	.quad	.Ltmp1942-.Lfunc_begin1
	.short	.Ltmp4099-.Ltmp4098     # Loc expr size
.Ltmp4098:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4099:
	.quad	.Ltmp1942-.Lfunc_begin1
	.quad	.Ltmp1943-.Lfunc_begin1
	.short	.Ltmp4101-.Ltmp4100     # Loc expr size
.Ltmp4100:
	.byte	83                      # DW_OP_reg3
.Ltmp4101:
	.quad	.Ltmp1943-.Lfunc_begin1
	.quad	.Ltmp1944-.Lfunc_begin1
	.short	.Ltmp4103-.Ltmp4102     # Loc expr size
.Ltmp4102:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4103:
	.quad	.Ltmp1944-.Lfunc_begin1
	.quad	.Ltmp1945-.Lfunc_begin1
	.short	.Ltmp4105-.Ltmp4104     # Loc expr size
.Ltmp4104:
	.byte	83                      # DW_OP_reg3
.Ltmp4105:
	.quad	.Ltmp1945-.Lfunc_begin1
	.quad	.Ltmp1946-.Lfunc_begin1
	.short	.Ltmp4107-.Ltmp4106     # Loc expr size
.Ltmp4106:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4107:
	.quad	.Ltmp1946-.Lfunc_begin1
	.quad	.Ltmp1947-.Lfunc_begin1
	.short	.Ltmp4109-.Ltmp4108     # Loc expr size
.Ltmp4108:
	.byte	83                      # DW_OP_reg3
.Ltmp4109:
	.quad	.Ltmp1947-.Lfunc_begin1
	.quad	.Ltmp1948-.Lfunc_begin1
	.short	.Ltmp4111-.Ltmp4110     # Loc expr size
.Ltmp4110:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4111:
	.quad	.Ltmp1948-.Lfunc_begin1
	.quad	.Ltmp1949-.Lfunc_begin1
	.short	.Ltmp4113-.Ltmp4112     # Loc expr size
.Ltmp4112:
	.byte	83                      # DW_OP_reg3
.Ltmp4113:
	.quad	.Ltmp1949-.Lfunc_begin1
	.quad	.Ltmp1950-.Lfunc_begin1
	.short	.Ltmp4115-.Ltmp4114     # Loc expr size
.Ltmp4114:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4115:
	.quad	.Ltmp1950-.Lfunc_begin1
	.quad	.Ltmp1951-.Lfunc_begin1
	.short	.Ltmp4117-.Ltmp4116     # Loc expr size
.Ltmp4116:
	.byte	83                      # DW_OP_reg3
.Ltmp4117:
	.quad	.Ltmp1951-.Lfunc_begin1
	.quad	.Ltmp1952-.Lfunc_begin1
	.short	.Ltmp4119-.Ltmp4118     # Loc expr size
.Ltmp4118:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4119:
	.quad	.Ltmp1952-.Lfunc_begin1
	.quad	.Ltmp1953-.Lfunc_begin1
	.short	.Ltmp4121-.Ltmp4120     # Loc expr size
.Ltmp4120:
	.byte	83                      # DW_OP_reg3
.Ltmp4121:
	.quad	.Ltmp1953-.Lfunc_begin1
	.quad	.Ltmp1954-.Lfunc_begin1
	.short	.Ltmp4123-.Ltmp4122     # Loc expr size
.Ltmp4122:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4123:
	.quad	.Ltmp1954-.Lfunc_begin1
	.quad	.Ltmp1955-.Lfunc_begin1
	.short	.Ltmp4125-.Ltmp4124     # Loc expr size
.Ltmp4124:
	.byte	83                      # DW_OP_reg3
.Ltmp4125:
	.quad	.Ltmp1955-.Lfunc_begin1
	.quad	.Ltmp1956-.Lfunc_begin1
	.short	.Ltmp4127-.Ltmp4126     # Loc expr size
.Ltmp4126:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4127:
	.quad	.Ltmp1956-.Lfunc_begin1
	.quad	.Ltmp1957-.Lfunc_begin1
	.short	.Ltmp4129-.Ltmp4128     # Loc expr size
.Ltmp4128:
	.byte	83                      # DW_OP_reg3
.Ltmp4129:
	.quad	.Ltmp1957-.Lfunc_begin1
	.quad	.Ltmp1958-.Lfunc_begin1
	.short	.Ltmp4131-.Ltmp4130     # Loc expr size
.Ltmp4130:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4131:
	.quad	.Ltmp1958-.Lfunc_begin1
	.quad	.Ltmp1959-.Lfunc_begin1
	.short	.Ltmp4133-.Ltmp4132     # Loc expr size
.Ltmp4132:
	.byte	92                      # DW_OP_reg12
.Ltmp4133:
	.quad	.Ltmp1959-.Lfunc_begin1
	.quad	.Ltmp1960-.Lfunc_begin1
	.short	.Ltmp4135-.Ltmp4134     # Loc expr size
.Ltmp4134:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4135:
	.quad	.Ltmp1960-.Lfunc_begin1
	.quad	.Ltmp1961-.Lfunc_begin1
	.short	.Ltmp4137-.Ltmp4136     # Loc expr size
.Ltmp4136:
	.byte	92                      # DW_OP_reg12
.Ltmp4137:
	.quad	.Ltmp1961-.Lfunc_begin1
	.quad	.Ltmp1962-.Lfunc_begin1
	.short	.Ltmp4139-.Ltmp4138     # Loc expr size
.Ltmp4138:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4139:
	.quad	.Ltmp1962-.Lfunc_begin1
	.quad	.Ltmp1963-.Lfunc_begin1
	.short	.Ltmp4141-.Ltmp4140     # Loc expr size
.Ltmp4140:
	.byte	83                      # DW_OP_reg3
.Ltmp4141:
	.quad	.Ltmp1963-.Lfunc_begin1
	.quad	.Ltmp1964-.Lfunc_begin1
	.short	.Ltmp4143-.Ltmp4142     # Loc expr size
.Ltmp4142:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4143:
	.quad	.Ltmp1964-.Lfunc_begin1
	.quad	.Ltmp1965-.Lfunc_begin1
	.short	.Ltmp4145-.Ltmp4144     # Loc expr size
.Ltmp4144:
	.byte	83                      # DW_OP_reg3
.Ltmp4145:
	.quad	.Ltmp1965-.Lfunc_begin1
	.quad	.Ltmp1966-.Lfunc_begin1
	.short	.Ltmp4147-.Ltmp4146     # Loc expr size
.Ltmp4146:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4147:
	.quad	.Ltmp1966-.Lfunc_begin1
	.quad	.Ltmp1967-.Lfunc_begin1
	.short	.Ltmp4149-.Ltmp4148     # Loc expr size
.Ltmp4148:
	.byte	83                      # DW_OP_reg3
.Ltmp4149:
	.quad	.Ltmp1967-.Lfunc_begin1
	.quad	.Ltmp1968-.Lfunc_begin1
	.short	.Ltmp4151-.Ltmp4150     # Loc expr size
.Ltmp4150:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4151:
	.quad	.Ltmp1968-.Lfunc_begin1
	.quad	.Ltmp1969-.Lfunc_begin1
	.short	.Ltmp4153-.Ltmp4152     # Loc expr size
.Ltmp4152:
	.byte	83                      # DW_OP_reg3
.Ltmp4153:
	.quad	.Ltmp1969-.Lfunc_begin1
	.quad	.Ltmp1970-.Lfunc_begin1
	.short	.Ltmp4155-.Ltmp4154     # Loc expr size
.Ltmp4154:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4155:
	.quad	.Ltmp1970-.Lfunc_begin1
	.quad	.Ltmp1971-.Lfunc_begin1
	.short	.Ltmp4157-.Ltmp4156     # Loc expr size
.Ltmp4156:
	.byte	83                      # DW_OP_reg3
.Ltmp4157:
	.quad	.Ltmp1971-.Lfunc_begin1
	.quad	.Ltmp1972-.Lfunc_begin1
	.short	.Ltmp4159-.Ltmp4158     # Loc expr size
.Ltmp4158:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4159:
	.quad	.Ltmp1972-.Lfunc_begin1
	.quad	.Ltmp1973-.Lfunc_begin1
	.short	.Ltmp4161-.Ltmp4160     # Loc expr size
.Ltmp4160:
	.byte	83                      # DW_OP_reg3
.Ltmp4161:
	.quad	.Ltmp1973-.Lfunc_begin1
	.quad	.Ltmp1974-.Lfunc_begin1
	.short	.Ltmp4163-.Ltmp4162     # Loc expr size
.Ltmp4162:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4163:
	.quad	.Ltmp1974-.Lfunc_begin1
	.quad	.Ltmp1975-.Lfunc_begin1
	.short	.Ltmp4165-.Ltmp4164     # Loc expr size
.Ltmp4164:
	.byte	83                      # DW_OP_reg3
.Ltmp4165:
	.quad	.Ltmp1975-.Lfunc_begin1
	.quad	.Lfunc_end17-.Lfunc_begin1
	.short	.Ltmp4167-.Ltmp4166     # Loc expr size
.Ltmp4166:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320|"                 # -432
.Ltmp4167:
	.quad	0
	.quad	0
.Ldebug_loc142:
	.quad	.Lfunc_begin17-.Lfunc_begin1
	.quad	.Ltmp1728-.Lfunc_begin1
	.short	.Ltmp4169-.Ltmp4168     # Loc expr size
.Ltmp4168:
	.byte	81                      # DW_OP_reg1
.Ltmp4169:
	.quad	.Ltmp1728-.Lfunc_begin1
	.quad	.Ltmp1744-.Lfunc_begin1
	.short	.Ltmp4171-.Ltmp4170     # Loc expr size
.Ltmp4170:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4171:
	.quad	.Ltmp1744-.Lfunc_begin1
	.quad	.Ltmp1745-.Lfunc_begin1
	.short	.Ltmp4173-.Ltmp4172     # Loc expr size
.Ltmp4172:
	.byte	94                      # DW_OP_reg14
.Ltmp4173:
	.quad	.Ltmp1745-.Lfunc_begin1
	.quad	.Ltmp1746-.Lfunc_begin1
	.short	.Ltmp4175-.Ltmp4174     # Loc expr size
.Ltmp4174:
	.byte	95                      # DW_OP_reg15
.Ltmp4175:
	.quad	.Ltmp1746-.Lfunc_begin1
	.quad	.Ltmp1747-.Lfunc_begin1
	.short	.Ltmp4177-.Ltmp4176     # Loc expr size
.Ltmp4176:
	.byte	93                      # DW_OP_reg13
.Ltmp4177:
	.quad	.Ltmp1747-.Lfunc_begin1
	.quad	.Ltmp1752-.Lfunc_begin1
	.short	.Ltmp4179-.Ltmp4178     # Loc expr size
.Ltmp4178:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4179:
	.quad	.Ltmp1752-.Lfunc_begin1
	.quad	.Ltmp1753-.Lfunc_begin1
	.short	.Ltmp4181-.Ltmp4180     # Loc expr size
.Ltmp4180:
	.byte	94                      # DW_OP_reg14
.Ltmp4181:
	.quad	.Ltmp1753-.Lfunc_begin1
	.quad	.Ltmp1757-.Lfunc_begin1
	.short	.Ltmp4183-.Ltmp4182     # Loc expr size
.Ltmp4182:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4183:
	.quad	.Ltmp1757-.Lfunc_begin1
	.quad	.Ltmp1758-.Lfunc_begin1
	.short	.Ltmp4185-.Ltmp4184     # Loc expr size
.Ltmp4184:
	.byte	92                      # DW_OP_reg12
.Ltmp4185:
	.quad	.Ltmp1758-.Lfunc_begin1
	.quad	.Ltmp1762-.Lfunc_begin1
	.short	.Ltmp4187-.Ltmp4186     # Loc expr size
.Ltmp4186:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4187:
	.quad	.Ltmp1762-.Lfunc_begin1
	.quad	.Ltmp1763-.Lfunc_begin1
	.short	.Ltmp4189-.Ltmp4188     # Loc expr size
.Ltmp4188:
	.byte	94                      # DW_OP_reg14
.Ltmp4189:
	.quad	.Ltmp1763-.Lfunc_begin1
	.quad	.Ltmp1767-.Lfunc_begin1
	.short	.Ltmp4191-.Ltmp4190     # Loc expr size
.Ltmp4190:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4191:
	.quad	.Ltmp1767-.Lfunc_begin1
	.quad	.Ltmp1768-.Lfunc_begin1
	.short	.Ltmp4193-.Ltmp4192     # Loc expr size
.Ltmp4192:
	.byte	92                      # DW_OP_reg12
.Ltmp4193:
	.quad	.Ltmp1768-.Lfunc_begin1
	.quad	.Ltmp1772-.Lfunc_begin1
	.short	.Ltmp4195-.Ltmp4194     # Loc expr size
.Ltmp4194:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4195:
	.quad	.Ltmp1772-.Lfunc_begin1
	.quad	.Ltmp1773-.Lfunc_begin1
	.short	.Ltmp4197-.Ltmp4196     # Loc expr size
.Ltmp4196:
	.byte	94                      # DW_OP_reg14
.Ltmp4197:
	.quad	.Ltmp1773-.Lfunc_begin1
	.quad	.Ltmp1777-.Lfunc_begin1
	.short	.Ltmp4199-.Ltmp4198     # Loc expr size
.Ltmp4198:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4199:
	.quad	.Ltmp1777-.Lfunc_begin1
	.quad	.Ltmp1778-.Lfunc_begin1
	.short	.Ltmp4201-.Ltmp4200     # Loc expr size
.Ltmp4200:
	.byte	92                      # DW_OP_reg12
.Ltmp4201:
	.quad	.Ltmp1778-.Lfunc_begin1
	.quad	.Ltmp1782-.Lfunc_begin1
	.short	.Ltmp4203-.Ltmp4202     # Loc expr size
.Ltmp4202:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4203:
	.quad	.Ltmp1782-.Lfunc_begin1
	.quad	.Ltmp1783-.Lfunc_begin1
	.short	.Ltmp4205-.Ltmp4204     # Loc expr size
.Ltmp4204:
	.byte	94                      # DW_OP_reg14
.Ltmp4205:
	.quad	.Ltmp1783-.Lfunc_begin1
	.quad	.Ltmp1787-.Lfunc_begin1
	.short	.Ltmp4207-.Ltmp4206     # Loc expr size
.Ltmp4206:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4207:
	.quad	.Ltmp1787-.Lfunc_begin1
	.quad	.Ltmp1788-.Lfunc_begin1
	.short	.Ltmp4209-.Ltmp4208     # Loc expr size
.Ltmp4208:
	.byte	92                      # DW_OP_reg12
.Ltmp4209:
	.quad	.Ltmp1788-.Lfunc_begin1
	.quad	.Ltmp1792-.Lfunc_begin1
	.short	.Ltmp4211-.Ltmp4210     # Loc expr size
.Ltmp4210:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4211:
	.quad	.Ltmp1792-.Lfunc_begin1
	.quad	.Ltmp1793-.Lfunc_begin1
	.short	.Ltmp4213-.Ltmp4212     # Loc expr size
.Ltmp4212:
	.byte	94                      # DW_OP_reg14
.Ltmp4213:
	.quad	.Ltmp1793-.Lfunc_begin1
	.quad	.Ltmp1797-.Lfunc_begin1
	.short	.Ltmp4215-.Ltmp4214     # Loc expr size
.Ltmp4214:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4215:
	.quad	.Ltmp1797-.Lfunc_begin1
	.quad	.Ltmp1798-.Lfunc_begin1
	.short	.Ltmp4217-.Ltmp4216     # Loc expr size
.Ltmp4216:
	.byte	92                      # DW_OP_reg12
.Ltmp4217:
	.quad	.Ltmp1798-.Lfunc_begin1
	.quad	.Ltmp1802-.Lfunc_begin1
	.short	.Ltmp4219-.Ltmp4218     # Loc expr size
.Ltmp4218:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4219:
	.quad	.Ltmp1802-.Lfunc_begin1
	.quad	.Ltmp1803-.Lfunc_begin1
	.short	.Ltmp4221-.Ltmp4220     # Loc expr size
.Ltmp4220:
	.byte	94                      # DW_OP_reg14
.Ltmp4221:
	.quad	.Ltmp1803-.Lfunc_begin1
	.quad	.Ltmp1807-.Lfunc_begin1
	.short	.Ltmp4223-.Ltmp4222     # Loc expr size
.Ltmp4222:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4223:
	.quad	.Ltmp1807-.Lfunc_begin1
	.quad	.Ltmp1808-.Lfunc_begin1
	.short	.Ltmp4225-.Ltmp4224     # Loc expr size
.Ltmp4224:
	.byte	92                      # DW_OP_reg12
.Ltmp4225:
	.quad	.Ltmp1808-.Lfunc_begin1
	.quad	.Ltmp1812-.Lfunc_begin1
	.short	.Ltmp4227-.Ltmp4226     # Loc expr size
.Ltmp4226:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4227:
	.quad	.Ltmp1812-.Lfunc_begin1
	.quad	.Ltmp1813-.Lfunc_begin1
	.short	.Ltmp4229-.Ltmp4228     # Loc expr size
.Ltmp4228:
	.byte	94                      # DW_OP_reg14
.Ltmp4229:
	.quad	.Ltmp1813-.Lfunc_begin1
	.quad	.Ltmp1817-.Lfunc_begin1
	.short	.Ltmp4231-.Ltmp4230     # Loc expr size
.Ltmp4230:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4231:
	.quad	.Ltmp1817-.Lfunc_begin1
	.quad	.Ltmp1818-.Lfunc_begin1
	.short	.Ltmp4233-.Ltmp4232     # Loc expr size
.Ltmp4232:
	.byte	92                      # DW_OP_reg12
.Ltmp4233:
	.quad	.Ltmp1818-.Lfunc_begin1
	.quad	.Ltmp1822-.Lfunc_begin1
	.short	.Ltmp4235-.Ltmp4234     # Loc expr size
.Ltmp4234:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4235:
	.quad	.Ltmp1822-.Lfunc_begin1
	.quad	.Ltmp1823-.Lfunc_begin1
	.short	.Ltmp4237-.Ltmp4236     # Loc expr size
.Ltmp4236:
	.byte	94                      # DW_OP_reg14
.Ltmp4237:
	.quad	.Ltmp1823-.Lfunc_begin1
	.quad	.Ltmp1827-.Lfunc_begin1
	.short	.Ltmp4239-.Ltmp4238     # Loc expr size
.Ltmp4238:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4239:
	.quad	.Ltmp1827-.Lfunc_begin1
	.quad	.Ltmp1828-.Lfunc_begin1
	.short	.Ltmp4241-.Ltmp4240     # Loc expr size
.Ltmp4240:
	.byte	92                      # DW_OP_reg12
.Ltmp4241:
	.quad	.Ltmp1828-.Lfunc_begin1
	.quad	.Ltmp1832-.Lfunc_begin1
	.short	.Ltmp4243-.Ltmp4242     # Loc expr size
.Ltmp4242:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4243:
	.quad	.Ltmp1832-.Lfunc_begin1
	.quad	.Ltmp1833-.Lfunc_begin1
	.short	.Ltmp4245-.Ltmp4244     # Loc expr size
.Ltmp4244:
	.byte	94                      # DW_OP_reg14
.Ltmp4245:
	.quad	.Ltmp1833-.Lfunc_begin1
	.quad	.Ltmp1837-.Lfunc_begin1
	.short	.Ltmp4247-.Ltmp4246     # Loc expr size
.Ltmp4246:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4247:
	.quad	.Ltmp1837-.Lfunc_begin1
	.quad	.Ltmp1838-.Lfunc_begin1
	.short	.Ltmp4249-.Ltmp4248     # Loc expr size
.Ltmp4248:
	.byte	92                      # DW_OP_reg12
.Ltmp4249:
	.quad	.Ltmp1838-.Lfunc_begin1
	.quad	.Lfunc_end17-.Lfunc_begin1
	.short	.Ltmp4251-.Ltmp4250     # Loc expr size
.Ltmp4250:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\177"              # -112
.Ltmp4251:
	.quad	0
	.quad	0
.Ldebug_loc143:
	.quad	.Lfunc_begin17-.Lfunc_begin1
	.quad	.Ltmp1727-.Lfunc_begin1
	.short	.Ltmp4253-.Ltmp4252     # Loc expr size
.Ltmp4252:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4253:
	.quad	.Ltmp1727-.Lfunc_begin1
	.quad	.Ltmp1739-.Lfunc_begin1
	.short	.Ltmp4255-.Ltmp4254     # Loc expr size
.Ltmp4254:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350}"                 # -280
.Ltmp4255:
	.quad	.Ltmp1739-.Lfunc_begin1
	.quad	.Ltmp1739-.Lfunc_begin1
	.short	.Ltmp4257-.Ltmp4256     # Loc expr size
.Ltmp4256:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4257:
	.quad	.Ltmp1739-.Lfunc_begin1
	.quad	.Ltmp1749-.Lfunc_begin1
	.short	.Ltmp4259-.Ltmp4258     # Loc expr size
.Ltmp4258:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350}"                 # -280
.Ltmp4259:
	.quad	.Ltmp1749-.Lfunc_begin1
	.quad	.Ltmp1843-.Lfunc_begin1
	.short	.Ltmp4261-.Ltmp4260     # Loc expr size
.Ltmp4260:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4261:
	.quad	0
	.quad	0
.Ldebug_loc144:
	.quad	.Lfunc_begin17-.Lfunc_begin1
	.quad	.Ltmp1726-.Lfunc_begin1
	.short	.Ltmp4263-.Ltmp4262     # Loc expr size
.Ltmp4262:
	.byte	88                      # DW_OP_reg8
.Ltmp4263:
	.quad	.Ltmp1726-.Lfunc_begin1
	.quad	.Ltmp1977-.Lfunc_begin1
	.short	.Ltmp4265-.Ltmp4264     # Loc expr size
.Ltmp4264:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370{"                 # -520
.Ltmp4265:
	.quad	.Ltmp1977-.Lfunc_begin1
	.quad	.Ltmp1978-.Lfunc_begin1
	.short	.Ltmp4267-.Ltmp4266     # Loc expr size
.Ltmp4266:
	.byte	83                      # DW_OP_reg3
.Ltmp4267:
	.quad	.Ltmp1978-.Lfunc_begin1
	.quad	.Ltmp1982-.Lfunc_begin1
	.short	.Ltmp4269-.Ltmp4268     # Loc expr size
.Ltmp4268:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370{"                 # -520
.Ltmp4269:
	.quad	.Ltmp1982-.Lfunc_begin1
	.quad	.Ltmp1983-.Lfunc_begin1
	.short	.Ltmp4271-.Ltmp4270     # Loc expr size
.Ltmp4270:
	.byte	95                      # DW_OP_reg15
.Ltmp4271:
	.quad	.Ltmp1983-.Lfunc_begin1
	.quad	.Ltmp1990-.Lfunc_begin1
	.short	.Ltmp4273-.Ltmp4272     # Loc expr size
.Ltmp4272:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370{"                 # -520
.Ltmp4273:
	.quad	.Ltmp1990-.Lfunc_begin1
	.quad	.Ltmp1991-.Lfunc_begin1
	.short	.Ltmp4275-.Ltmp4274     # Loc expr size
.Ltmp4274:
	.byte	94                      # DW_OP_reg14
.Ltmp4275:
	.quad	.Ltmp1991-.Lfunc_begin1
	.quad	.Ltmp1992-.Lfunc_begin1
	.short	.Ltmp4277-.Ltmp4276     # Loc expr size
.Ltmp4276:
	.byte	81                      # DW_OP_reg1
.Ltmp4277:
	.quad	.Ltmp1992-.Lfunc_begin1
	.quad	.Ltmp1993-.Lfunc_begin1
	.short	.Ltmp4279-.Ltmp4278     # Loc expr size
.Ltmp4278:
	.byte	95                      # DW_OP_reg15
.Ltmp4279:
	.quad	.Ltmp1993-.Lfunc_begin1
	.quad	.Ltmp2001-.Lfunc_begin1
	.short	.Ltmp4281-.Ltmp4280     # Loc expr size
.Ltmp4280:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370{"                 # -520
.Ltmp4281:
	.quad	.Ltmp2001-.Lfunc_begin1
	.quad	.Ltmp2002-.Lfunc_begin1
	.short	.Ltmp4283-.Ltmp4282     # Loc expr size
.Ltmp4282:
	.byte	83                      # DW_OP_reg3
.Ltmp4283:
	.quad	0
	.quad	0
.Ldebug_loc145:
	.quad	.Lfunc_begin17-.Lfunc_begin1
	.quad	.Ltmp1725-.Lfunc_begin1
	.short	.Ltmp4285-.Ltmp4284     # Loc expr size
.Ltmp4284:
	.byte	89                      # super-register DW_OP_reg9
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4285:
	.quad	.Ltmp1725-.Lfunc_begin1
	.quad	.Ltmp1737-.Lfunc_begin1
	.short	.Ltmp4287-.Ltmp4286     # Loc expr size
.Ltmp4286:
	.byte	93                      # super-register DW_OP_reg13
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4287:
	.quad	0
	.quad	0
.Ldebug_loc146:
	.quad	.Ltmp1742-.Lfunc_begin1
	.quad	.Ltmp1748-.Lfunc_begin1
	.short	.Ltmp4289-.Ltmp4288     # Loc expr size
.Ltmp4288:
	.byte	17                      # DW_OP_consts
	.asciz	"\344"                  # 100
	.byte	159                     # DW_OP_stack_value
.Ltmp4289:
	.quad	.Ltmp1748-.Lfunc_begin1
	.quad	.Ltmp1754-.Lfunc_begin1
	.short	.Ltmp4291-.Ltmp4290     # Loc expr size
.Ltmp4290:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4291:
	.quad	.Ltmp1754-.Lfunc_begin1
	.quad	.Ltmp1759-.Lfunc_begin1
	.short	.Ltmp4293-.Ltmp4292     # Loc expr size
.Ltmp4292:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4293:
	.quad	.Ltmp1759-.Lfunc_begin1
	.quad	.Ltmp1764-.Lfunc_begin1
	.short	.Ltmp4295-.Ltmp4294     # Loc expr size
.Ltmp4294:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4295:
	.quad	.Ltmp1764-.Lfunc_begin1
	.quad	.Ltmp1769-.Lfunc_begin1
	.short	.Ltmp4297-.Ltmp4296     # Loc expr size
.Ltmp4296:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4297:
	.quad	.Ltmp1769-.Lfunc_begin1
	.quad	.Ltmp1774-.Lfunc_begin1
	.short	.Ltmp4299-.Ltmp4298     # Loc expr size
.Ltmp4298:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4299:
	.quad	.Ltmp1774-.Lfunc_begin1
	.quad	.Ltmp1779-.Lfunc_begin1
	.short	.Ltmp4301-.Ltmp4300     # Loc expr size
.Ltmp4300:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4301:
	.quad	.Ltmp1779-.Lfunc_begin1
	.quad	.Ltmp1784-.Lfunc_begin1
	.short	.Ltmp4303-.Ltmp4302     # Loc expr size
.Ltmp4302:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4303:
	.quad	.Ltmp1784-.Lfunc_begin1
	.quad	.Ltmp1789-.Lfunc_begin1
	.short	.Ltmp4305-.Ltmp4304     # Loc expr size
.Ltmp4304:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4305:
	.quad	.Ltmp1789-.Lfunc_begin1
	.quad	.Ltmp1794-.Lfunc_begin1
	.short	.Ltmp4307-.Ltmp4306     # Loc expr size
.Ltmp4306:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4307:
	.quad	.Ltmp1794-.Lfunc_begin1
	.quad	.Ltmp1799-.Lfunc_begin1
	.short	.Ltmp4309-.Ltmp4308     # Loc expr size
.Ltmp4308:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4309:
	.quad	.Ltmp1799-.Lfunc_begin1
	.quad	.Ltmp1804-.Lfunc_begin1
	.short	.Ltmp4311-.Ltmp4310     # Loc expr size
.Ltmp4310:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4311:
	.quad	.Ltmp1804-.Lfunc_begin1
	.quad	.Ltmp1809-.Lfunc_begin1
	.short	.Ltmp4313-.Ltmp4312     # Loc expr size
.Ltmp4312:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4313:
	.quad	.Ltmp1809-.Lfunc_begin1
	.quad	.Ltmp1814-.Lfunc_begin1
	.short	.Ltmp4315-.Ltmp4314     # Loc expr size
.Ltmp4314:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4315:
	.quad	.Ltmp1814-.Lfunc_begin1
	.quad	.Ltmp1819-.Lfunc_begin1
	.short	.Ltmp4317-.Ltmp4316     # Loc expr size
.Ltmp4316:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4317:
	.quad	.Ltmp1819-.Lfunc_begin1
	.quad	.Ltmp1824-.Lfunc_begin1
	.short	.Ltmp4319-.Ltmp4318     # Loc expr size
.Ltmp4318:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4319:
	.quad	.Ltmp1824-.Lfunc_begin1
	.quad	.Ltmp1829-.Lfunc_begin1
	.short	.Ltmp4321-.Ltmp4320     # Loc expr size
.Ltmp4320:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4321:
	.quad	.Ltmp1829-.Lfunc_begin1
	.quad	.Ltmp1834-.Lfunc_begin1
	.short	.Ltmp4323-.Ltmp4322     # Loc expr size
.Ltmp4322:
	.byte	92                      # super-register DW_OP_reg12
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4323:
	.quad	.Ltmp1834-.Lfunc_begin1
	.quad	.Ltmp1839-.Lfunc_begin1
	.short	.Ltmp4325-.Ltmp4324     # Loc expr size
.Ltmp4324:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4325:
	.quad	.Ltmp1839-.Lfunc_begin1
	.quad	.Ltmp1842-.Lfunc_begin1
	.short	.Ltmp4327-.Ltmp4326     # Loc expr size
.Ltmp4326:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4327:
	.quad	.Ltmp1844-.Lfunc_begin1
	.quad	.Ltmp1994-.Lfunc_begin1
	.short	.Ltmp4329-.Ltmp4328     # Loc expr size
.Ltmp4328:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp4329:
	.quad	.Ltmp1994-.Lfunc_begin1
	.quad	.Ltmp1995-.Lfunc_begin1
	.short	.Ltmp4331-.Ltmp4330     # Loc expr size
.Ltmp4330:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4331:
	.quad	.Ltmp1995-.Lfunc_begin1
	.quad	.Ltmp1996-.Lfunc_begin1
	.short	.Ltmp4333-.Ltmp4332     # Loc expr size
.Ltmp4332:
	.byte	83                      # super-register DW_OP_reg3
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4333:
	.quad	.Ltmp1996-.Lfunc_begin1
	.quad	.Ltmp2000-.Lfunc_begin1
	.short	.Ltmp4335-.Ltmp4334     # Loc expr size
.Ltmp4334:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360{"                 # -528
.Ltmp4335:
	.quad	.Ltmp2000-.Lfunc_begin1
	.quad	.Lfunc_end17-.Lfunc_begin1
	.short	.Ltmp4337-.Ltmp4336     # Loc expr size
.Ltmp4336:
	.byte	17                      # DW_OP_consts
	.byte	0                       # 0
	.byte	159                     # DW_OP_stack_value
.Ltmp4337:
	.quad	0
	.quad	0
.Ldebug_loc147:
	.quad	.Ltmp1980-.Lfunc_begin1
	.quad	.Ltmp1981-.Lfunc_begin1
	.short	.Ltmp4339-.Ltmp4338     # Loc expr size
.Ltmp4338:
	.byte	80                      # super-register DW_OP_reg0
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4339:
	.quad	.Ltmp1984-.Lfunc_begin1
	.quad	.Ltmp1985-.Lfunc_begin1
	.short	.Ltmp4341-.Ltmp4340     # Loc expr size
.Ltmp4340:
	.byte	82                      # super-register DW_OP_reg2
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4341:
	.quad	.Ltmp1985-.Lfunc_begin1
	.quad	.Ltmp1986-.Lfunc_begin1
	.short	.Ltmp4343-.Ltmp4342     # Loc expr size
.Ltmp4342:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360}"                 # -272
.Ltmp4343:
	.quad	.Ltmp1986-.Lfunc_begin1
	.quad	.Lfunc_end17-.Lfunc_begin1
	.short	.Ltmp4345-.Ltmp4344     # Loc expr size
.Ltmp4344:
	.byte	118                     # DW_OP_breg6
	.ascii	"\260\177"              # -80
.Ltmp4345:
	.quad	0
	.quad	0
.Ldebug_loc148:
	.quad	.Ltmp1987-.Lfunc_begin1
	.quad	.Ltmp1989-.Lfunc_begin1
	.short	.Ltmp4347-.Ltmp4346     # Loc expr size
.Ltmp4346:
	.byte	95                      # super-register DW_OP_reg15
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4347:
	.quad	0
	.quad	0
.Ldebug_loc149:
	.quad	.Lfunc_begin18-.Lfunc_begin1
	.quad	.Ltmp2014-.Lfunc_begin1
	.short	.Ltmp4349-.Ltmp4348     # Loc expr size
.Ltmp4348:
	.byte	85                      # DW_OP_reg5
.Ltmp4349:
	.quad	.Ltmp2014-.Lfunc_begin1
	.quad	.Ltmp2019-.Lfunc_begin1
	.short	.Ltmp4351-.Ltmp4350     # Loc expr size
.Ltmp4350:
	.byte	83                      # DW_OP_reg3
.Ltmp4351:
	.quad	.Ltmp2019-.Lfunc_begin1
	.quad	.Ltmp2020-.Lfunc_begin1
	.short	.Ltmp4353-.Ltmp4352     # Loc expr size
.Ltmp4352:
	.byte	85                      # DW_OP_reg5
.Ltmp4353:
	.quad	0
	.quad	0
.Ldebug_loc150:
	.quad	.Lfunc_begin18-.Lfunc_begin1
	.quad	.Ltmp2013-.Lfunc_begin1
	.short	.Ltmp4355-.Ltmp4354     # Loc expr size
.Ltmp4354:
	.byte	84                      # super-register DW_OP_reg4
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4355:
	.quad	.Ltmp2013-.Lfunc_begin1
	.quad	.Ltmp2022-.Lfunc_begin1
	.short	.Ltmp4357-.Ltmp4356     # Loc expr size
.Ltmp4356:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4357:
	.quad	.Ltmp2058-.Lfunc_begin1
	.quad	.Ltmp2059-.Lfunc_begin1
	.short	.Ltmp4359-.Ltmp4358     # Loc expr size
.Ltmp4358:
	.byte	94                      # super-register DW_OP_reg14
	.byte	147                     # DW_OP_piece
	.byte	4                       # 4
.Ltmp4359:
	.quad	0
	.quad	0
.Ldebug_loc151:
	.quad	.Ltmp2016-.Lfunc_begin1
	.quad	.Ltmp2022-.Lfunc_begin1
	.short	.Ltmp4361-.Ltmp4360     # Loc expr size
.Ltmp4360:
	.byte	125                     # DW_OP_breg13
	.byte	0                       # 0
.Ltmp4361:
	.quad	.Ltmp2034-.Lfunc_begin1
	.quad	.Ltmp2035-.Lfunc_begin1
	.short	.Ltmp4363-.Ltmp4362     # Loc expr size
.Ltmp4362:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp4363:
	.quad	.Ltmp2049-.Lfunc_begin1
	.quad	.Ltmp2050-.Lfunc_begin1
	.short	.Ltmp4365-.Ltmp4364     # Loc expr size
.Ltmp4364:
	.byte	125                     # DW_OP_breg13
	.byte	0                       # 0
.Ltmp4365:
	.quad	.Ltmp2052-.Lfunc_begin1
	.quad	.Ltmp2059-.Lfunc_begin1
	.short	.Ltmp4367-.Ltmp4366     # Loc expr size
.Ltmp4366:
	.byte	125                     # DW_OP_breg13
	.byte	0                       # 0
.Ltmp4367:
	.quad	.Ltmp2064-.Lfunc_begin1
	.quad	.Ltmp2069-.Lfunc_begin1
	.short	.Ltmp4369-.Ltmp4368     # Loc expr size
.Ltmp4368:
	.byte	125                     # DW_OP_breg13
	.byte	0                       # 0
.Ltmp4369:
	.quad	0
	.quad	0
.Ldebug_loc152:
	.quad	.Ltmp2017-.Lfunc_begin1
	.quad	.Ltmp2022-.Lfunc_begin1
	.short	.Ltmp4371-.Ltmp4370     # Loc expr size
.Ltmp4370:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp4371:
	.quad	.Ltmp2023-.Lfunc_begin1
	.quad	.Ltmp2024-.Lfunc_begin1
	.short	.Ltmp4373-.Ltmp4372     # Loc expr size
.Ltmp4372:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp4373:
	.quad	.Ltmp2024-.Lfunc_begin1
	.quad	.Ltmp2037-.Lfunc_begin1
	.short	.Ltmp4375-.Ltmp4374     # Loc expr size
.Ltmp4374:
	.byte	126                     # DW_OP_breg14
	.byte	0                       # 0
.Ltmp4375:
	.quad	.Ltmp2037-.Lfunc_begin1
	.quad	.Ltmp2041-.Lfunc_begin1
	.short	.Ltmp4377-.Ltmp4376     # Loc expr size
.Ltmp4376:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp4377:
	.quad	.Ltmp2046-.Lfunc_begin1
	.quad	.Ltmp2048-.Lfunc_begin1
	.short	.Ltmp4379-.Ltmp4378     # Loc expr size
.Ltmp4378:
	.byte	125                     # DW_OP_breg13
	.byte	0                       # 0
.Ltmp4379:
	.quad	.Ltmp2048-.Lfunc_begin1
	.quad	.Ltmp2050-.Lfunc_begin1
	.short	.Ltmp4381-.Ltmp4380     # Loc expr size
.Ltmp4380:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp4381:
	.quad	.Ltmp2053-.Lfunc_begin1
	.quad	.Ltmp2054-.Lfunc_begin1
	.short	.Ltmp4383-.Ltmp4382     # Loc expr size
.Ltmp4382:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp4383:
	.quad	.Ltmp2057-.Lfunc_begin1
	.quad	.Ltmp2059-.Lfunc_begin1
	.short	.Ltmp4385-.Ltmp4384     # Loc expr size
.Ltmp4384:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp4385:
	.quad	.Ltmp2060-.Lfunc_begin1
	.quad	.Ltmp2067-.Lfunc_begin1
	.short	.Ltmp4387-.Ltmp4386     # Loc expr size
.Ltmp4386:
	.byte	126                     # DW_OP_breg14
	.byte	0                       # 0
.Ltmp4387:
	.quad	.Ltmp2067-.Lfunc_begin1
	.quad	.Ltmp2069-.Lfunc_begin1
	.short	.Ltmp4389-.Ltmp4388     # Loc expr size
.Ltmp4388:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp4389:
	.quad	0
	.quad	0
.Ldebug_loc153:
	.quad	.Ltmp2018-.Lfunc_begin1
	.quad	.Ltmp2022-.Lfunc_begin1
	.short	.Ltmp4391-.Ltmp4390     # Loc expr size
.Ltmp4390:
	.byte	124                     # DW_OP_breg12
	.byte	0                       # 0
.Ltmp4391:
	.quad	.Ltmp2026-.Lfunc_begin1
	.quad	.Ltmp2027-.Lfunc_begin1
	.short	.Ltmp4393-.Ltmp4392     # Loc expr size
.Ltmp4392:
	.byte	117                     # DW_OP_breg5
	.byte	0                       # 0
.Ltmp4393:
	.quad	.Ltmp2027-.Lfunc_begin1
	.quad	.Ltmp2031-.Lfunc_begin1
	.short	.Ltmp4395-.Ltmp4394     # Loc expr size
.Ltmp4394:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp4395:
	.quad	.Ltmp2031-.Lfunc_begin1
	.quad	.Ltmp2038-.Lfunc_begin1
	.short	.Ltmp4397-.Ltmp4396     # Loc expr size
.Ltmp4396:
	.byte	124                     # DW_OP_breg12
	.byte	0                       # 0
.Ltmp4397:
	.quad	.Ltmp2043-.Lfunc_begin1
	.quad	.Ltmp2047-.Lfunc_begin1
	.short	.Ltmp4399-.Ltmp4398     # Loc expr size
.Ltmp4398:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp4399:
	.quad	.Ltmp2047-.Lfunc_begin1
	.quad	.Ltmp2050-.Lfunc_begin1
	.short	.Ltmp4401-.Ltmp4400     # Loc expr size
.Ltmp4400:
	.byte	124                     # DW_OP_breg12
	.byte	0                       # 0
.Ltmp4401:
	.quad	.Ltmp2055-.Lfunc_begin1
	.quad	.Ltmp2059-.Lfunc_begin1
	.short	.Ltmp4403-.Ltmp4402     # Loc expr size
.Ltmp4402:
	.byte	124                     # DW_OP_breg12
	.byte	0                       # 0
.Ltmp4403:
	.quad	.Ltmp2061-.Lfunc_begin1
	.quad	.Ltmp2069-.Lfunc_begin1
	.short	.Ltmp4405-.Ltmp4404     # Loc expr size
.Ltmp4404:
	.byte	124                     # DW_OP_breg12
	.byte	0                       # 0
.Ltmp4405:
	.quad	0
	.quad	0
.Ldebug_loc154:
	.quad	.Ltmp2028-.Lfunc_begin1
	.quad	.Ltmp2039-.Lfunc_begin1
	.short	.Ltmp4407-.Ltmp4406     # Loc expr size
.Ltmp4406:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360\202j"             # -360080
.Ltmp4407:
	.quad	.Ltmp2039-.Lfunc_begin1
	.quad	.Ltmp2046-.Lfunc_begin1
	.short	.Ltmp4409-.Ltmp4408     # Loc expr size
.Ltmp4408:
	.byte	93                      # DW_OP_reg13
.Ltmp4409:
	.quad	.Ltmp2062-.Lfunc_begin1
	.quad	.Lfunc_end18-.Lfunc_begin1
	.short	.Ltmp4411-.Ltmp4410     # Loc expr size
.Ltmp4410:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370\202j"             # -360072
.Ltmp4411:
	.quad	0
	.quad	0
.Ldebug_loc155:
	.quad	.Ltmp2029-.Lfunc_begin1
	.quad	.Ltmp2039-.Lfunc_begin1
	.short	.Ltmp4413-.Ltmp4412     # Loc expr size
.Ltmp4412:
	.byte	125                     # DW_OP_breg13
	.byte	0                       # 0
.Ltmp4413:
	.quad	.Ltmp2051-.Lfunc_begin1
	.quad	.Ltmp2056-.Lfunc_begin1
	.short	.Ltmp4415-.Ltmp4414     # Loc expr size
.Ltmp4414:
	.byte	127                     # DW_OP_breg15
	.byte	0                       # 0
.Ltmp4415:
	.quad	.Ltmp2063-.Lfunc_begin1
	.quad	.Ltmp2066-.Lfunc_begin1
	.short	.Ltmp4417-.Ltmp4416     # Loc expr size
.Ltmp4416:
	.byte	115                     # DW_OP_breg3
	.byte	0                       # 0
.Ltmp4417:
	.quad	0
	.quad	0
.Ldebug_loc156:
	.quad	.Ltmp2032-.Lfunc_begin1
	.quad	.Ltmp2033-.Lfunc_begin1
	.short	.Ltmp4419-.Ltmp4418     # Loc expr size
.Ltmp4418:
	.byte	95                      # DW_OP_reg15
.Ltmp4419:
	.quad	.Ltmp2033-.Lfunc_begin1
	.quad	.Ltmp2040-.Lfunc_begin1
	.short	.Ltmp4421-.Ltmp4420     # Loc expr size
.Ltmp4420:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370\202j"             # -360072
.Ltmp4421:
	.quad	.Ltmp2040-.Lfunc_begin1
	.quad	.Ltmp2044-.Lfunc_begin1
	.short	.Ltmp4423-.Ltmp4422     # Loc expr size
.Ltmp4422:
	.byte	83                      # DW_OP_reg3
.Ltmp4423:
	.quad	.Ltmp2044-.Lfunc_begin1
	.quad	.Lfunc_end18-.Lfunc_begin1
	.short	.Ltmp4425-.Ltmp4424     # Loc expr size
.Ltmp4424:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370\202j"             # -360072
.Ltmp4425:
	.quad	0
	.quad	0
.Ldebug_loc157:
	.quad	.Ltmp2077-.Lfunc_begin1
	.quad	.Ltmp2079-.Lfunc_begin1
	.short	.Ltmp4427-.Ltmp4426     # Loc expr size
.Ltmp4426:
	.byte	115                     # DW_OP_breg3
	.byte	0                       # 0
.Ltmp4427:
	.quad	0
	.quad	0
	.section	.debug_pubnames,"",@progbits
	.long	.LpubNames_end0-.LpubNames_begin0 # Length of Public Names Info
.LpubNames_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
	.long	3889                    # Compilation Unit Length
	.long	1212                    # DIE offset
	.asciz	"susan_smoothing"       # External Name
	.long	216                     # DIE offset
	.asciz	"get_image"             # External Name
	.long	3619                    # DIE offset
	.asciz	"exit_error"            # External Name
	.long	3066                    # DIE offset
	.asciz	"susan_corners_quick"   # External Name
	.long	1619                    # DIE offset
	.asciz	"edge_draw"             # External Name
	.long	2762                    # DIE offset
	.asciz	"susan_corners"         # External Name
	.long	764                     # DIE offset
	.asciz	"susan_principle_small" # External Name
	.long	3274                    # DIE offset
	.asciz	"call_susan"            # External Name
	.long	2335                    # DIE offset
	.asciz	"susan_edges_small"     # External Name
	.long	124                     # DIE offset
	.asciz	"getint"                # External Name
	.long	925                     # DIE offset
	.asciz	"median"                # External Name
	.long	603                     # DIE offset
	.asciz	"susan_principle"       # External Name
	.long	2024                    # DIE offset
	.asciz	"susan_edges"           # External Name
	.long	3576                    # DIE offset
	.asciz	"main"                  # External Name
	.long	2646                    # DIE offset
	.asciz	"corner_draw"           # External Name
	.long	319                     # DIE offset
	.asciz	"put_image"             # External Name
	.long	1767                    # DIE offset
	.asciz	"susan_thin"            # External Name
	.long	502                     # DIE offset
	.asciz	"setup_brightness_lut"  # External Name
	.long	1077                    # DIE offset
	.asciz	"enlarge"               # External Name
	.long	403                     # DIE offset
	.asciz	"int_to_uchar"          # External Name
	.long	0                       # End Mark
.LpubNames_end0:
	.section	.debug_pubtypes,"",@progbits
	.long	.LpubTypes_end0-.LpubTypes_begin0 # Length of Public Types Info
.LpubTypes_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
	.long	3889                    # Compilation Unit Length
	.long	74                      # DIE offset
	.asciz	"uchar"                 # External Name
	.long	3863                    # DIE offset
	.asciz	"CORNER_LIST"           # External Name
	.long	3750                    # DIE offset
	.asciz	"TOTAL_TYPE"            # External Name
	.long	42                      # DIE offset
	.asciz	"_Origin_"              # External Name
	.long	105                     # DIE offset
	.asciz	"float"                 # External Name
	.long	3697                    # DIE offset
	.asciz	"long unsigned int"     # External Name
	.long	3704                    # DIE offset
	.asciz	"unsigned int"          # External Name
	.long	86                      # DIE offset
	.asciz	"unsigned char"         # External Name
	.long	93                      # DIE offset
	.asciz	"int"                   # External Name
	.long	3652                    # DIE offset
	.asciz	"wccFILE"               # External Name
	.long	117                     # DIE offset
	.asciz	"char"                  # External Name
	.long	0                       # End Mark
.LpubTypes_end0:

	.ident	"clang version 3.6.1 (tags/RELEASE_361/final)"
	.section	".note.GNU-stack","",@progbits
	.section	.debug_line,"",@progbits
.Lline_table_start0:
