!{!"0x11\0012\00clang version 3.6.1 (tags/RELEASE_361/final)\000\00\000\00\001", <0x1eaea80>, <0x1eaf060>, <0x1ea8c98>, <0x1eb2fc0>, <0x1eb6f20>, <0x1eaf060>} ; [ DW_TAG_compile_unit ] [/home/patmos/github/bachelor_project_HLS/candidates/tacle-bench/kernel/countnegative/countnegative.c] [DW_LANG_C99]

!{!"0x2e\00countnegative_initSeed\00countnegative_initSeed\00\0055\000\001\000\000\00256\000\0056", <0x1eaea80>, <0x1eac2a0>, <0x1eb0980>, null, void ()* @countnegative_initSeed, null, null, <0x1eaf060>} ; [ DW_TAG_subprogram ] [line 55] [def] [scope 56] [countnegative_initSeed]

!{!"0x2e\00countnegative_randomInteger\00countnegative_randomInteger\00\0063\000\001\000\000\00256\000\0064", <0x1eaea80>, <0x1eac2a0>, <0x1eb08b0>, null, i32 ()* @countnegative_randomInteger, null, null, <0x1eaf060>} ; [ DW_TAG_subprogram ] [line 63] [def] [scope 64] [countnegative_randomInteger]

!{!"0x2e\00countnegative_initialize\00countnegative_initialize\00\0072\000\001\000\000\00256\000\0073", <0x1eaea80>, <0x1eac2a0>, <0x1eb19d0>, null, void ([20 x i32]*)* @countnegative_initialize, null, null, <0x1eaf060>} ; [ DW_TAG_subprogram ] [line 72] [def] [scope 73] [countnegative_initialize]

!{!"0x2e\00countnegative_init\00countnegative_init\00\0083\000\001\000\000\00256\000\0084", <0x1eaea80>, <0x1eac2a0>, <0x1eb0980>, null, void ()* @countnegative_init, null, null, <0x1eaf060>} ; [ DW_TAG_subprogram ] [line 83] [def] [scope 84] [countnegative_init]

!{!"0x2e\00countnegative_return\00countnegative_return\00\0089\000\001\000\000\00256\000\0090", <0x1eaea80>, <0x1eac2a0>, <0x1eb08b0>, null, i32 ()* @countnegative_return, null, null, <0x1eaf060>} ; [ DW_TAG_subprogram ] [line 89] [def] [scope 90] [countnegative_return]

!{!"0x2e\00countnegative_sum\00countnegative_sum\00\0099\000\001\000\000\00256\000\00100", <0x1eaea80>, <0x1eac2a0>, <0x1eb19d0>, null, void ([20 x i32]*)* @countnegative_sum, null, null, <0x1eaf060>} ; [ DW_TAG_subprogram ] [line 99] [def] [scope 100] [countnegative_sum]

!{!"0x2e\00countnegative_main\00countnegative_main\00\00129\000\001\000\000\00256\000\00130", <0x1eaea80>, <0x1eac2a0>, <0x1eb0980>, null, void ()* @countnegative_main, null, null, <0x1eaf060>} ; [ DW_TAG_subprogram ] [line 129] [def] [scope 130] [countnegative_main]

!{!"0x2e\00main\00main\00\00134\000\001\000\000\00256\000\00135", <0x1eaea80>, <0x1eac2a0>, <0x1eb08b0>, null, i32 ()* @main, null, null, <0x1eaf060>} ; [ DW_TAG_subprogram ] [line 134] [def] [scope 135] [main]

!{!"0x34\00countnegative_seed\00countnegative_seed\00\0047\000\001", null, <0x1eac2a0>, <0x1eb3100>, i32* @countnegative_seed, null} ; [ DW_TAG_variable ] [countnegative_seed] [line 47] [def]

!{!"0x34\00countnegative_array\00countnegative_array\00\0048\000\001", null, <0x1eac2a0>, <0x1eb3390>, [20 x [20 x i32]]* @countnegative_array, null} ; [ DW_TAG_variable ] [countnegative_array] [line 48] [def]

!{!"0x34\00countnegative_postotal\00countnegative_postotal\00\0049\000\001", null, <0x1eac2a0>, <0x1eac1a8>, i32* @countnegative_postotal, null} ; [ DW_TAG_variable ] [countnegative_postotal] [line 49] [def]

!{!"0x34\00countnegative_negtotal\00countnegative_negtotal\00\0049\000\001", null, <0x1eac2a0>, <0x1eac1a8>, i32* @countnegative_negtotal, null} ; [ DW_TAG_variable ] [countnegative_negtotal] [line 49] [def]

!{!"0x34\00countnegative_poscnt\00countnegative_poscnt\00\0050\000\001", null, <0x1eac2a0>, <0x1eac1a8>, i32* @countnegative_poscnt, null} ; [ DW_TAG_variable ] [countnegative_poscnt] [line 50] [def]

!{!"0x34\00countnegative_negcnt\00countnegative_negcnt\00\0050\000\001", null, <0x1eac2a0>, <0x1eac1a8>, i32* @countnegative_negcnt, null} ; [ DW_TAG_variable ] [countnegative_negcnt] [line 50] [def]

!{!"0x35\00\000\000\000\000\000", null, null, <0x1eac1a8>} ; [ DW_TAG_volatile_type ] [line 0, size 0, align 0, offset 0] [from int]

!{!"0x24\00int\000\0032\0032\000\000\005", null, null} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed]

!{!"0x16\00matrix\0030\000\000\000\000", <0x1eaea80>, null, <0x1eb3340>} ; [ DW_TAG_typedef ] [matrix] [line 30, size 0, align 0, offset 0] [from ]

!{!"0x1\00\000\0012800\0032\000\000\000", null, null, <0x1eac1a8>, <0x1eb32d0>, null, null, null} ; [ DW_TAG_array_type ] [line 0, size 12800, align 32, offset 0] [from int]

!{!"0x15\00\000\000\000\000\000\000", null, null, null, <0x1eac2d8>, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]

!{!"0x15\00\000\000\000\000\000\000", null, null, null, <0x1ea8c98>, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]

!{!"0x15\00\000\000\000\000\000\000", null, null, null, <0x1eb1960>, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]

!{!"0xf\00\000\0064\0064\000\000", null, null, <0x1eb18d0>} ; [ DW_TAG_pointer_type ] [line 0, size 64, align 64, offset 0] [from ]

!{!"0x1\00\000\00640\0032\000\000\000", null, null, <0x1eac1a8>, <0x1eb1868>, null, null, null} ; [ DW_TAG_array_type ] [line 0, size 640, align 32, offset 0] [from int]

Meta data for 9739831654218788715
Meta data for 8698339195024254351
INFO: Loop bodies will be given their own region id
DEBUG: new region: FuncRegion(id: 10004279415043042409, name: countnegative_initSeed, fileName: countnegative.c, startLine: 55, endLine: 55
DEBUG: adding countnegative_initSeed (in module: countnegative.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.bc) to list of defined functions (region_id: 10004279415043042409)
DEBUG: assigning function countnegative_initSeed id 10004279415043042409
DEBUG: new region: FuncRegion(id: 2665028756538762010, name: countnegative_randomInteger, fileName: countnegative.c, startLine: 63, endLine: 63
DEBUG: adding countnegative_randomInteger (in module: countnegative.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.bc) to list of defined functions (region_id: 2665028756538762010)
DEBUG: assigning function countnegative_randomInteger id 2665028756538762010
DEBUG: new region: FuncRegion(id: 17492528707860126126, name: countnegative_initialize, fileName: countnegative.c, startLine: 72, endLine: 72
DEBUG: adding countnegative_initialize (in module: countnegative.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.bc) to list of defined functions (region_id: 17492528707860126126)
DEBUG: assigning function countnegative_initialize id 17492528707860126126
DEBUG: new region: FuncRegion(id: 8799006111992029081, name: countnegative_init, fileName: countnegative.c, startLine: 83, endLine: 83
DEBUG: adding countnegative_init (in module: countnegative.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.bc) to list of defined functions (region_id: 8799006111992029081)
DEBUG: assigning function countnegative_init id 8799006111992029081
DEBUG: new region: FuncRegion(id: 12316083062547431325, name: countnegative_return, fileName: countnegative.c, startLine: 89, endLine: 89
DEBUG: adding countnegative_return (in module: countnegative.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.bc) to list of defined functions (region_id: 12316083062547431325)
DEBUG: assigning function countnegative_return id 12316083062547431325
DEBUG: new region: FuncRegion(id: 10075417606453382859, name: countnegative_sum, fileName: countnegative.c, startLine: 99, endLine: 99
DEBUG: adding countnegative_sum (in module: countnegative.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.bc) to list of defined functions (region_id: 10075417606453382859)
DEBUG: assigning function countnegative_sum id 10075417606453382859
DEBUG: new region: FuncRegion(id: 4368336926474014359, name: countnegative_main, fileName: countnegative.c, startLine: 129, endLine: 129
DEBUG: adding countnegative_main (in module: countnegative.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.bc) to list of defined functions (region_id: 4368336926474014359)
DEBUG: assigning function countnegative_main id 4368336926474014359
DEBUG: new region: FuncRegion(id: 14768796648239662093, name: main, fileName: countnegative.c, startLine: 134, endLine: 134
DEBUG: adding main (in module: countnegative.simplifycfg.mem2reg.indvars.elimsinglephis.criticalpath.bc) to list of defined functions (region_id: 14768796648239662093)
DEBUG: assigning function main id 14768796648239662093
DEBUG: found 8 func regions
INFO: Inserting the following instrumentation calls:
INFO: _KDeinit
INFO: _KEnterRegion
INFO: _KExitRegion
INFO: _KInit
INFO: _KLandingPad
DEBUG: Debug information:
DEBUG: region name to id: countnegative_initSeed is 10004279415043042409
DEBUG: found 0 loops in function countnegative_initSeed
DEBUG: region name to id: countnegative_randomInteger is 2665028756538762010
DEBUG: found 0 loops in function countnegative_randomInteger
DEBUG: region name to id: countnegative_initialize is 17492528707860126126
DEBUG: found 2 loops in function countnegative_initialize
DEBUG: assigning id = 9739831654218788715 to loop with the following BBs:
	for.cond for.body for.cond1 for.inc6 for.body3 
DEBUG: /home/patmos/Developer/kremlin/instrument/llvm/llvm-3.6.1.src/lib/Transforms/KremlinInstrument/LoopBodyRegion.cpp:82 Meta data for 1908159713341758635
DEBUG: assigning id = 1908159713341758635 to body of loop
DEBMeta data for 6263805448019320508
Meta data for 1068062353816026215
UG: assigning id = 8698339195024254351 to loop with the following BBs:
	for.cond1 for.body3 
DEBUG: /home/patmos/Developer/kremlin/instrument/llvm/llvm-3.6.1.src/lib/Transforms/KremlinInstrument/LoopBodyRegion.cpp:82 Meta data for 7971568625153783200
DEBUG: assigning id = 7971568625153783200 to body of loop
DEBUG: for.cond has 1 possible loop exit points
DEBUG: 	target #0: for.end8
DEBUG: for.cond1 has 1 possible loop exit points
DEBUG: 	target #0: for.inc6
DEBUG: region name to id: countnegative_init is 8799006111992029081
DEBUG: found 0 loops in function countnegative_init
DEBUG: region name to id: countnegative_return is 12316083062547431325
DEBUG: found 0 loops in function countnegative_return
DEBUG: region name to id: countnegative_sum is 10075417606453382859
DEBUG: found 2 loops in function countnegative_sum
DEBUG: assigning id = 6263805448019320508 to loop with the following BBs:
	for.cond for.body for.cond1 for.inc18 for.body3 if.else if.then for.inc 
DEBUG: /home/patmos/Developer/kremlin/instrument/llvm/llvm-3.6.1.src/lib/Transforms/KremlinInstrument/LoopBodyRegion.cpp:82 Meta data for 10913360525726614668
DEBUG: assigning id = 10913360525726614668 to body of loop
DEBUG: assigning id = 1068062353816026215 to loop with the following BBs:
	for.cond1 for.body3 if.else if.then for.inc 
DEBUG: /home/patmos/Developer/kremlin/instrument/llvm/llvm-3.6.1.src/lib/Transforms/KremlinInstrument/LoopBodyRegion.cpp:82 Meta data for 18302457272552450878
DEBUG: assigning id = 18302457272552450878 to body of loop
DEBUG: for.cond has 1 possible loop exit points
DEBUG: 	target #0: for.end20
DEBUG: for.cond1 has 1 possible loop exit points
DEBUG: 	target #0: for.inc18
DEBUG: region name to id: countnegative_main is 4368336926474014359
DEBUG: found 0 loops in function countnegative_main
DEBUG: region name to id: main is 14768796648239662093
DEBUG: found 0 loops in function main
DEBUG: Writing kremlib calls to countnegative.kdump
INFO: dumping function: countnegative_initSeed
INFO: dumping function: countnegative_randomInteger
INFO: dumping function: countnegative_initialize
INFO: dumping function: llvm.dbg.declare
INFO: dumping function: countnegative_init
INFO: dumping function: countnegative_return
INFO: dumping function: countnegative_sum
INFO: dumping function: countnegative_main
INFO: dumping function: main
INFO: dumping function: llvm.dbg.value
INFO: dumping function: _KLoad
INFO: dumping function: _KLoad0
INFO: dumping function: _KLoad1
INFO: dumping function: _KLoad2
INFO: dumping function: _KLoad3
INFO: dumping function: _KLoad4
INFO: dumping function: _KStore
INFO: dumping function: _KStoreConst
INFO: dumping function: _KEnqArgConst
INFO: dumping function: _KEnqArg
INFO: dumping function: _KPrepCall
INFO: dumping function: _KLinkReturn
INFO: dumping function: _KMalloc
INFO: dumping function: _KRealloc
INFO: dumping function: _KFree
INFO: dumping function: _KDeqArg
INFO: dumping function: _KReturnConst
INFO: dumping function: _KReturn
INFO: dumping function: _KWork
INFO: dumping function: _KPhi
INFO: dumping function: _KPhi1To1
INFO: dumping function: _KPhi2To1
INFO: dumping function: _KPhi3To1
INFO: dumping function: _KPhi4To1
INFO: dumping function: _KPhiAddCond
INFO: dumping function: _KInduction
INFO: dumping function: _KPushCDep
INFO: dumping function: _KPopCDep
INFO: dumping function: _KPrepRTable
INFO: dumping function: _KTimestamp
INFO: dumping function: _KTimestamp0
INFO: dumping function: _KTimestamp1
INFO: dumping function: _KTimestamp2
INFO: dumping function: _KTimestamp3
INFO: dumping function: _KTimestamp4
INFO: dumping function: _KTimestamp5
INFO: dumping function: _KTimestamp6
INFO: dumping function: _KTimestamp7
INFO: dumping function: _KInit
INFO: dumping function: _KDeinit
INFO: dumping function: _KEnterRegion
INFO: dumping function: _KExitRegion
INFO: dumping function: _KLandingPad
