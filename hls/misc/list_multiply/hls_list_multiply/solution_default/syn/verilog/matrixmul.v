// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.961000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=205,HLS_SYN_LUT=536}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_Addr_A,
        a_EN_A,
        a_WEN_A,
        a_Din_A,
        a_Dout_A,
        a_Clk_A,
        a_Rst_A
);

parameter    ap_ST_fsm_state1 = 5'b1;
parameter    ap_ST_fsm_state2 = 5'b10;
parameter    ap_ST_fsm_state3 = 5'b100;
parameter    ap_ST_fsm_state4 = 5'b1000;
parameter    ap_ST_fsm_state5 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_Addr_A;
output   a_EN_A;
output  [3:0] a_WEN_A;
output  [31:0] a_Din_A;
input  [31:0] a_Dout_A;
output   a_Clk_A;
output   a_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_EN_A;
reg[3:0] a_WEN_A;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [1:0] i_3_fu_172_p2;
reg   [1:0] i_3_reg_345;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond2_fu_166_p2;
wire   [31:0] tmp_2_1_fu_198_p3;
wire   [0:0] ap_CS_fsm_state3;
wire   [31:0] tmp_2_7_fu_214_p3;
wire   [31:0] tmp_2_9_fu_222_p3;
wire   [1:0] i_4_fu_236_p2;
wire   [0:0] ap_CS_fsm_state4;
wire   [31:0] tmp_2_3_fu_280_p3;
wire   [0:0] exitcond1_fu_230_p2;
wire   [31:0] tmp_2_11_fu_296_p3;
wire   [31:0] tmp_2_16_fu_304_p3;
wire   [1:0] i_5_fu_323_p2;
wire   [0:0] ap_CS_fsm_state5;
reg   [31:0] tmp_2_reg_58;
reg   [31:0] tmp_1_reg_70;
reg   [31:0] tmp_2_8_reg_82;
reg   [1:0] i_reg_94;
reg   [31:0] tmp_2_2_reg_106;
reg   [31:0] tmp_1_2_reg_117;
reg   [31:0] tmp_2_15_reg_128;
reg   [1:0] i_1_reg_139;
reg   [1:0] i_2_reg_150;
wire   [0:0] exitcond_fu_317_p2;
wire   [31:0] i_cast_fu_161_p1;
wire   [31:0] i_2_cast_fu_312_p1;
reg   [31:0] a_Addr_A_orig;
wire   [31:0] tmp_1_4_fu_329_p5;
wire   [0:0] sel_tmp_fu_178_p2;
wire   [0:0] sel_tmp3_fu_192_p2;
wire   [31:0] tmp_2_5_fu_184_p3;
wire   [31:0] tmp_2_6_fu_206_p3;
wire   [31:0] tmp_fu_242_p5;
wire   [0:0] sel_tmp1_fu_260_p2;
wire   [31:0] tmp_2_18_fu_254_p2;
wire   [0:0] sel_tmp4_fu_274_p2;
wire   [31:0] tmp_2_4_fu_266_p3;
wire   [31:0] tmp_2_10_fu_288_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

matrixmul_mux_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_32_bkb_U0(
    .din1(tmp_2_15_reg_128),
    .din2(tmp_1_2_reg_117),
    .din3(tmp_2_2_reg_106),
    .din4(i_1_reg_139),
    .dout(tmp_fu_242_p5)
);

matrixmul_mux_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_32_bkb_U1(
    .din1(tmp_2_15_reg_128),
    .din2(tmp_1_2_reg_117),
    .din3(tmp_2_2_reg_106),
    .din4(i_2_reg_150),
    .dout(tmp_1_4_fu_329_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond2_fu_166_p2 == 1'b0))) begin
        i_1_reg_139 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_230_p2))) begin
        i_1_reg_139 <= i_4_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond1_fu_230_p2))) begin
        i_2_reg_150 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_fu_317_p2))) begin
        i_2_reg_150 <= i_5_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_94 <= i_3_reg_345;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_94 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond2_fu_166_p2 == 1'b0))) begin
        tmp_1_2_reg_117 <= tmp_1_reg_70;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_230_p2))) begin
        tmp_1_2_reg_117 <= tmp_2_11_fu_296_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond2_fu_166_p2 == 1'b0))) begin
        tmp_2_15_reg_128 <= tmp_2_8_reg_82;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_230_p2))) begin
        tmp_2_15_reg_128 <= tmp_2_16_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond2_fu_166_p2 == 1'b0))) begin
        tmp_2_2_reg_106 <= tmp_2_reg_58;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_230_p2))) begin
        tmp_2_2_reg_106 <= tmp_2_3_fu_280_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_345 <= i_3_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_1_reg_70 <= tmp_2_7_fu_214_p3;
        tmp_2_8_reg_82 <= tmp_2_9_fu_222_p3;
        tmp_2_reg_58 <= tmp_2_1_fu_198_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_Addr_A_orig = i_2_cast_fu_312_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_Addr_A_orig = i_cast_fu_161_p1;
    end else begin
        a_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        a_EN_A = 1'b1;
    end else begin
        a_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_fu_317_p2))) begin
        a_WEN_A = ap_const_lv4_F;
    end else begin
        a_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_317_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_317_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond2_fu_166_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == exitcond1_fu_230_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == exitcond_fu_317_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Addr_A = a_Addr_A_orig << ap_const_lv32_2;

assign a_Clk_A = ap_clk;

assign a_Din_A = tmp_1_4_fu_329_p5;

assign a_Rst_A = ap_rst;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign exitcond1_fu_230_p2 = ((i_1_reg_139 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign exitcond2_fu_166_p2 = ((i_reg_94 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign exitcond_fu_317_p2 = ((i_2_reg_150 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign i_2_cast_fu_312_p1 = i_2_reg_150;

assign i_3_fu_172_p2 = (i_reg_94 + ap_const_lv2_1);

assign i_4_fu_236_p2 = (i_1_reg_139 + ap_const_lv2_1);

assign i_5_fu_323_p2 = (i_2_reg_150 + ap_const_lv2_1);

assign i_cast_fu_161_p1 = i_reg_94;

assign sel_tmp1_fu_260_p2 = ((i_1_reg_139 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_192_p2 = ((i_reg_94 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_274_p2 = ((i_1_reg_139 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_178_p2 = ((i_reg_94 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign tmp_2_10_fu_288_p3 = ((sel_tmp1_fu_260_p2[0:0] === 1'b1) ? tmp_2_18_fu_254_p2 : tmp_1_2_reg_117);

assign tmp_2_11_fu_296_p3 = ((sel_tmp4_fu_274_p2[0:0] === 1'b1) ? tmp_1_2_reg_117 : tmp_2_10_fu_288_p3);

assign tmp_2_16_fu_304_p3 = ((sel_tmp4_fu_274_p2[0:0] === 1'b1) ? tmp_2_18_fu_254_p2 : tmp_2_15_reg_128);

assign tmp_2_18_fu_254_p2 = tmp_fu_242_p5 << ap_const_lv32_1;

assign tmp_2_1_fu_198_p3 = ((sel_tmp3_fu_192_p2[0:0] === 1'b1) ? tmp_2_reg_58 : tmp_2_5_fu_184_p3);

assign tmp_2_3_fu_280_p3 = ((sel_tmp4_fu_274_p2[0:0] === 1'b1) ? tmp_2_2_reg_106 : tmp_2_4_fu_266_p3);

assign tmp_2_4_fu_266_p3 = ((sel_tmp1_fu_260_p2[0:0] === 1'b1) ? tmp_2_2_reg_106 : tmp_2_18_fu_254_p2);

assign tmp_2_5_fu_184_p3 = ((sel_tmp_fu_178_p2[0:0] === 1'b1) ? tmp_2_reg_58 : a_Dout_A);

assign tmp_2_6_fu_206_p3 = ((sel_tmp_fu_178_p2[0:0] === 1'b1) ? a_Dout_A : tmp_1_reg_70);

assign tmp_2_7_fu_214_p3 = ((sel_tmp3_fu_192_p2[0:0] === 1'b1) ? tmp_1_reg_70 : tmp_2_6_fu_206_p3);

assign tmp_2_9_fu_222_p3 = ((sel_tmp3_fu_192_p2[0:0] === 1'b1) ? a_Dout_A : tmp_2_8_reg_82);

endmodule //matrixmul
