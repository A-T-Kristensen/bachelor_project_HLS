-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matmul_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.050000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1265,HLS_SYN_LUT=2180}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv61_2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_252 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_263 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_274 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_1262 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_309_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_1267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_j_mid2_reg_1267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter2_j_mid2_reg_1267 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1277 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_mid2_v_fu_337_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i2_mid2_v_reg_1297 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_i2_mid2_v_reg_1297 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_345_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_1303 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_363_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1320 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal a_row_0_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_19_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal a_row_1_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_19_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal tmp_5_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1377 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1400 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_1413 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_551_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1429 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_fu_608_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_reg_1434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal a_row_2_1_fu_615_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_reg_1444 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_fu_627_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_reg_1449 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_733_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal tmp_3_fu_903_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1469 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_920_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1474 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1052_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1479 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_2_reg_1489 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_3_reg_1494 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1499 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1098_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_1_reg_1504 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_3_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_3_reg_1509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal indvar_flatten_phi_fu_256_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_phi_fu_267_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_278_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_372_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_400_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_426_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_633_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_1133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_row_0_2_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_2_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_2_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_11_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_18_fu_896_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_8_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_17_fu_889_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_12_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_16_fu_882_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_1_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_3_fu_875_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_11_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_18_fu_1041_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_8_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_17_fu_1034_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_12_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_16_fu_1027_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_1_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_3_fu_1020_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_11_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_18_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_8_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_17_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_12_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_16_fu_530_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_1_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_3_fu_523_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_11_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_18_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_8_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_17_fu_714_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_12_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_16_fu_707_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_1_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_3_fu_700_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_297_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast5_fu_381_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_fu_384_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_395_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_copy_2_3_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_4_fu_462_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_5_fu_478_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_6_fu_485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_9_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_2_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_7_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_14_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_15_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_551_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_fu_641_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_4_fu_647_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_5_fu_661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_6_fu_667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_9_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_2_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_7_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_14_fu_687_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_15_fu_694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_733_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_733_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_798_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_copy_0_3_fu_812_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_4_fu_819_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_5_fu_833_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_6_fu_840_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_9_fu_854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_2_fu_826_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_7_fu_847_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_14_fu_861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_15_fu_868_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_903_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_903_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_fu_957_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_4_fu_964_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_5_fu_978_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_6_fu_985_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_9_fu_999_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_2_fu_971_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_7_fu_992_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_14_fu_1006_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_15_fu_1013_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1052_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1052_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1052_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1092_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp8_fu_1102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_1106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1092_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_1116_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_cast6_fu_1124_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_1127_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component matmul_hw_mux_42_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_hw_mul_32seOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_hw_urem_4nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    matmul_hw_mux_42_dEe_U1 : component matmul_hw_mux_42_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_6_fu_551_p1,
        din2 => tmp_6_fu_551_p2,
        din3 => tmp_6_fu_551_p3,
        din4 => tmp_6_fu_551_p4,
        din5 => tmp_reg_1320,
        dout => tmp_6_fu_551_p6);

    matmul_hw_mul_32seOg_U2 : component matmul_hw_mul_32seOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_1429,
        din1 => grp_fu_728_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_728_p2);

    matmul_hw_mux_42_dEe_U3 : component matmul_hw_mux_42_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_7_fu_733_p1,
        din2 => tmp_7_fu_733_p2,
        din3 => tmp_7_fu_733_p3,
        din4 => tmp_7_fu_733_p4,
        din5 => tmp_reg_1320,
        dout => tmp_7_fu_733_p6);

    matmul_hw_mux_42_dEe_U4 : component matmul_hw_mux_42_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_3_fu_903_p1,
        din2 => tmp_3_fu_903_p2,
        din3 => tmp_3_fu_903_p3,
        din4 => tmp_3_fu_903_p4,
        din5 => tmp_reg_1320,
        dout => tmp_3_fu_903_p6);

    matmul_hw_mul_32seOg_U5 : component matmul_hw_mul_32seOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_1459,
        din1 => a_row_3_1_reg_1434,
        ce => ap_const_logic_1,
        dout => grp_fu_916_p2);

    matmul_hw_mul_32seOg_U6 : component matmul_hw_mul_32seOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_1469,
        din1 => a_row_0_1_reg_1449,
        ce => ap_const_logic_1,
        dout => grp_fu_1048_p2);

    matmul_hw_mux_42_dEe_U7 : component matmul_hw_mux_42_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_4_fu_1052_p1,
        din2 => tmp_4_fu_1052_p2,
        din3 => tmp_4_fu_1052_p3,
        din4 => tmp_4_fu_1052_p4,
        din5 => tmp_reg_1320,
        dout => tmp_4_fu_1052_p6);

    matmul_hw_urem_4nfYi_U8 : component matmul_hw_urem_4nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1092_p0,
        din1 => ap_const_lv4_6,
        ce => ap_const_logic_1,
        dout => grp_fu_1092_p2);

    matmul_hw_mul_32seOg_U9 : component matmul_hw_mul_32seOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_1479,
        din1 => a_row_1_1_reg_1444,
        ce => ap_const_logic_1,
        dout => grp_fu_1098_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_285_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and not((exitcond_flatten_reg_1258 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_263 <= i2_mid2_v_reg_1297;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_263 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_252 <= indvar_flatten_next_reg_1262;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_252 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_274 <= j_1_reg_1474;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_274 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then
                a_row_0_1_reg_1449 <= a_row_0_1_fu_627_p3;
                a_row_1_1_reg_1444 <= a_row_1_1_fu_621_p3;
                a_row_3_1_reg_1434 <= a_row_3_1_fu_608_p3;
                tmp_7_reg_1459 <= tmp_7_fu_733_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then
                a_row_0_2_fu_92 <= a_row_0_1_fu_627_p3;
                a_row_1_2_fu_96 <= a_row_1_1_fu_621_p3;
                a_row_2_2_fu_100 <= a_row_2_1_fu_615_p3;
                a_row_3_2_fu_104 <= a_row_3_1_fu_608_p3;
                b_copy_3_3_11_fu_156 <= b_copy_3_3_18_fu_721_p3;
                b_copy_3_3_12_fu_164 <= b_copy_3_3_16_fu_707_p3;
                b_copy_3_3_1_fu_168 <= b_copy_3_3_3_fu_700_p3;
                b_copy_3_3_8_fu_160 <= b_copy_3_3_17_fu_714_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1258 = ap_const_lv1_0))) then
                a_row_0_reg_1336 <= a_0_Dout_A;
                b_copy_2_3_19_reg_1346 <= a_1_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                a_row_1_reg_1359 <= a_0_Dout_A;
                b_copy_3_3_19_reg_1364 <= a_1_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                a_row_2_reg_1385 <= a_0_Dout_A;
                b_copy_2_3_11_fu_140 <= b_copy_2_3_18_fu_544_p3;
                b_copy_2_3_12_fu_148 <= b_copy_2_3_16_fu_530_p3;
                b_copy_2_3_1_fu_152 <= b_copy_2_3_3_fu_523_p3;
                b_copy_2_3_8_fu_144 <= b_copy_2_3_17_fu_537_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1258 <= exitcond_flatten_reg_1258;
                ap_pipeline_reg_pp0_iter1_i2_mid2_v_reg_1297 <= i2_mid2_v_reg_1297;
                ap_pipeline_reg_pp0_iter1_j_mid2_reg_1267 <= j_mid2_reg_1267;
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1258 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1258;
                ap_pipeline_reg_pp0_iter2_j_mid2_reg_1267 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_1267;
                exitcond_flatten_reg_1258 <= exitcond_flatten_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                b_copy_0_3_11_fu_108 <= b_copy_0_3_18_fu_896_p3;
                b_copy_0_3_12_fu_116 <= b_copy_0_3_16_fu_882_p3;
                b_copy_0_3_1_fu_120 <= b_copy_0_3_3_fu_875_p3;
                b_copy_0_3_8_fu_112 <= b_copy_0_3_17_fu_889_p3;
                j_1_reg_1474 <= j_1_fu_920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                b_copy_1_3_11_fu_124 <= b_copy_1_3_18_fu_1041_p3;
                b_copy_1_3_12_fu_132 <= b_copy_1_3_16_fu_1027_p3;
                b_copy_1_3_1_fu_136 <= b_copy_1_3_3_fu_1020_p3;
                b_copy_1_3_8_fu_128 <= b_copy_1_3_17_fu_1034_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_285_p2 = ap_const_lv1_0))) then
                i2_mid2_v_reg_1297 <= i2_mid2_v_fu_337_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_1262 <= indvar_flatten_next_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_285_p2 = ap_const_lv1_0))) then
                j_mid2_reg_1267 <= j_mid2_fu_309_p3;
                    tmp_1_reg_1303(4 downto 2) <= tmp_1_fu_345_p3(4 downto 2);
                tmp_mid2_reg_1277 <= tmp_mid2_fu_329_p3;
                tmp_reg_1320 <= tmp_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                sel_tmp2_reg_1400 <= sel_tmp2_fu_445_p2;
                sel_tmp4_reg_1413 <= sel_tmp4_fu_450_p2;
                sel_tmp_reg_1390 <= sel_tmp_fu_440_p2;
                tmp_5_reg_1377 <= tmp_5_fu_435_p2;
                tmp_6_reg_1429 <= tmp_6_fu_551_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1258 = ap_const_lv1_0))) then
                tmp_11_1_reg_1504 <= grp_fu_1098_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1258 = ap_const_lv1_0))) then
                tmp_11_2_reg_1489 <= grp_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1258 = ap_const_lv1_0))) then
                tmp_11_3_reg_1494 <= grp_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1258 = ap_const_lv1_0))) then
                tmp_12_3_reg_1509 <= tmp_12_3_fu_1110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_3_reg_1469 <= tmp_3_fu_903_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0))) then
                tmp_4_reg_1479 <= tmp_4_fu_1052_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1258 = ap_const_lv1_0))) then
                tmp_s_reg_1499 <= grp_fu_1048_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_1303(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_285_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_285_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
            when ap_ST_fsm_pp0_stage4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
            when ap_ST_fsm_pp0_stage5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_9_fu_353_p1, tmp_11_fu_372_p3, tmp_13_fu_400_p3, tmp_15_fu_426_p3, tmp_17_fu_633_p3, tmp_19_cast_fu_807_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                a_0_Addr_A_orig <= tmp_19_cast_fu_807_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                a_0_Addr_A_orig <= tmp_17_fu_633_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_0_Addr_A_orig <= tmp_15_fu_426_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_0_Addr_A_orig <= tmp_13_fu_400_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_0_Addr_A_orig <= tmp_11_fu_372_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_0_Addr_A_orig <= tmp_9_fu_353_p1(32 - 1 downto 0);
            else 
                a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv32_0;

    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv4_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, tmp_8_fu_358_p1, tmp_20_cast_fu_390_p1, tmp_21_cast_fu_1133_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            a_1_Addr_A_orig <= tmp_21_cast_fu_1133_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            a_1_Addr_A_orig <= tmp_20_cast_fu_390_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_1_Addr_A_orig <= tmp_8_fu_358_p1(32 - 1 downto 0);
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= tmp_12_3_reg_1509;

    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;

    a_1_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1258, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            a_1_WEN_A <= ap_const_lv4_F;
        else 
            a_1_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_row_0_1_fu_627_p3 <= 
        a_row_0_reg_1336 when (tmp_5_reg_1377(0) = '1') else 
        a_row_0_2_fu_92;
    a_row_1_1_fu_621_p3 <= 
        a_row_1_reg_1359 when (tmp_5_reg_1377(0) = '1') else 
        a_row_1_2_fu_96;
    a_row_2_1_fu_615_p3 <= 
        a_row_2_reg_1385 when (tmp_5_reg_1377(0) = '1') else 
        a_row_2_2_fu_100;
    a_row_3_1_fu_608_p3 <= 
        a_0_Dout_A when (tmp_5_reg_1377(0) = '1') else 
        a_row_3_2_fu_104;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state17 <= ap_CS_fsm(7 downto 7);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_0_3_14_fu_861_p3 <= 
        b_copy_0_3_8_fu_112 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_0_3_9_fu_854_p3;
    b_copy_0_3_15_fu_868_p3 <= 
        a_0_Dout_A when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_0_3_11_fu_108;
    b_copy_0_3_16_fu_882_p3 <= 
        b_copy_0_3_7_fu_847_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_0_3_12_fu_116;
    b_copy_0_3_17_fu_889_p3 <= 
        b_copy_0_3_14_fu_861_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_0_3_8_fu_112;
    b_copy_0_3_18_fu_896_p3 <= 
        b_copy_0_3_15_fu_868_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_0_3_11_fu_108;
    b_copy_0_3_2_fu_826_p3 <= 
        b_copy_0_3_1_fu_120 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_0_3_4_fu_819_p3;
    b_copy_0_3_3_fu_875_p3 <= 
        b_copy_0_3_2_fu_826_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_0_3_1_fu_120;
    b_copy_0_3_4_fu_819_p3 <= 
        b_copy_0_3_1_fu_120 when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_0_3_fu_812_p3;
    b_copy_0_3_5_fu_833_p3 <= 
        a_0_Dout_A when (sel_tmp_reg_1390(0) = '1') else 
        b_copy_0_3_12_fu_116;
    b_copy_0_3_6_fu_840_p3 <= 
        b_copy_0_3_12_fu_116 when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_0_3_5_fu_833_p3;
    b_copy_0_3_7_fu_847_p3 <= 
        b_copy_0_3_12_fu_116 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_0_3_6_fu_840_p3;
    b_copy_0_3_9_fu_854_p3 <= 
        a_0_Dout_A when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_0_3_8_fu_112;
    b_copy_0_3_fu_812_p3 <= 
        b_copy_0_3_1_fu_120 when (sel_tmp_reg_1390(0) = '1') else 
        a_0_Dout_A;
    b_copy_1_3_14_fu_1006_p3 <= 
        b_copy_1_3_8_fu_128 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_1_3_9_fu_999_p3;
    b_copy_1_3_15_fu_1013_p3 <= 
        a_0_Dout_A when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_1_3_11_fu_124;
    b_copy_1_3_16_fu_1027_p3 <= 
        b_copy_1_3_7_fu_992_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_1_3_12_fu_132;
    b_copy_1_3_17_fu_1034_p3 <= 
        b_copy_1_3_14_fu_1006_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_1_3_8_fu_128;
    b_copy_1_3_18_fu_1041_p3 <= 
        b_copy_1_3_15_fu_1013_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_1_3_11_fu_124;
    b_copy_1_3_2_fu_971_p3 <= 
        b_copy_1_3_1_fu_136 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_1_3_4_fu_964_p3;
    b_copy_1_3_3_fu_1020_p3 <= 
        b_copy_1_3_2_fu_971_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_1_3_1_fu_136;
    b_copy_1_3_4_fu_964_p3 <= 
        b_copy_1_3_1_fu_136 when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_1_3_fu_957_p3;
    b_copy_1_3_5_fu_978_p3 <= 
        a_0_Dout_A when (sel_tmp_reg_1390(0) = '1') else 
        b_copy_1_3_12_fu_132;
    b_copy_1_3_6_fu_985_p3 <= 
        b_copy_1_3_12_fu_132 when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_1_3_5_fu_978_p3;
    b_copy_1_3_7_fu_992_p3 <= 
        b_copy_1_3_12_fu_132 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_1_3_6_fu_985_p3;
    b_copy_1_3_9_fu_999_p3 <= 
        a_0_Dout_A when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_1_3_8_fu_128;
    b_copy_1_3_fu_957_p3 <= 
        b_copy_1_3_1_fu_136 when (sel_tmp_reg_1390(0) = '1') else 
        a_0_Dout_A;
    b_copy_2_3_14_fu_508_p3 <= 
        b_copy_2_3_8_fu_144 when (sel_tmp4_fu_450_p2(0) = '1') else 
        b_copy_2_3_9_fu_501_p3;
    b_copy_2_3_15_fu_516_p3 <= 
        b_copy_2_3_19_reg_1346 when (sel_tmp4_fu_450_p2(0) = '1') else 
        b_copy_2_3_11_fu_140;
    b_copy_2_3_16_fu_530_p3 <= 
        b_copy_2_3_7_fu_493_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_2_3_12_fu_148;
    b_copy_2_3_17_fu_537_p3 <= 
        b_copy_2_3_14_fu_508_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_2_3_8_fu_144;
    b_copy_2_3_18_fu_544_p3 <= 
        b_copy_2_3_15_fu_516_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_2_3_11_fu_140;
    b_copy_2_3_2_fu_470_p3 <= 
        b_copy_2_3_1_fu_152 when (sel_tmp4_fu_450_p2(0) = '1') else 
        b_copy_2_3_4_fu_462_p3;
    b_copy_2_3_3_fu_523_p3 <= 
        b_copy_2_3_2_fu_470_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_2_3_1_fu_152;
    b_copy_2_3_4_fu_462_p3 <= 
        b_copy_2_3_1_fu_152 when (sel_tmp2_fu_445_p2(0) = '1') else 
        b_copy_2_3_fu_455_p3;
    b_copy_2_3_5_fu_478_p3 <= 
        b_copy_2_3_19_reg_1346 when (sel_tmp_fu_440_p2(0) = '1') else 
        b_copy_2_3_12_fu_148;
    b_copy_2_3_6_fu_485_p3 <= 
        b_copy_2_3_12_fu_148 when (sel_tmp2_fu_445_p2(0) = '1') else 
        b_copy_2_3_5_fu_478_p3;
    b_copy_2_3_7_fu_493_p3 <= 
        b_copy_2_3_12_fu_148 when (sel_tmp4_fu_450_p2(0) = '1') else 
        b_copy_2_3_6_fu_485_p3;
    b_copy_2_3_9_fu_501_p3 <= 
        b_copy_2_3_19_reg_1346 when (sel_tmp2_fu_445_p2(0) = '1') else 
        b_copy_2_3_8_fu_144;
    b_copy_2_3_fu_455_p3 <= 
        b_copy_2_3_1_fu_152 when (sel_tmp_fu_440_p2(0) = '1') else 
        b_copy_2_3_19_reg_1346;
    b_copy_3_3_14_fu_687_p3 <= 
        b_copy_3_3_8_fu_160 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_3_3_9_fu_681_p3;
    b_copy_3_3_15_fu_694_p3 <= 
        b_copy_3_3_19_reg_1364 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_3_3_11_fu_156;
    b_copy_3_3_16_fu_707_p3 <= 
        b_copy_3_3_7_fu_674_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_3_3_12_fu_164;
    b_copy_3_3_17_fu_714_p3 <= 
        b_copy_3_3_14_fu_687_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_3_3_8_fu_160;
    b_copy_3_3_18_fu_721_p3 <= 
        b_copy_3_3_15_fu_694_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_3_3_11_fu_156;
    b_copy_3_3_2_fu_654_p3 <= 
        b_copy_3_3_1_fu_168 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_3_3_4_fu_647_p3;
    b_copy_3_3_3_fu_700_p3 <= 
        b_copy_3_3_2_fu_654_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_3_3_1_fu_168;
    b_copy_3_3_4_fu_647_p3 <= 
        b_copy_3_3_1_fu_168 when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_3_3_fu_641_p3;
    b_copy_3_3_5_fu_661_p3 <= 
        b_copy_3_3_19_reg_1364 when (sel_tmp_reg_1390(0) = '1') else 
        b_copy_3_3_12_fu_164;
    b_copy_3_3_6_fu_667_p3 <= 
        b_copy_3_3_12_fu_164 when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_3_3_5_fu_661_p3;
    b_copy_3_3_7_fu_674_p3 <= 
        b_copy_3_3_12_fu_164 when (sel_tmp4_reg_1413(0) = '1') else 
        b_copy_3_3_6_fu_667_p3;
    b_copy_3_3_9_fu_681_p3 <= 
        b_copy_3_3_19_reg_1364 when (sel_tmp2_reg_1400(0) = '1') else 
        b_copy_3_3_8_fu_160;
    b_copy_3_3_fu_641_p3 <= 
        b_copy_3_3_1_fu_168 when (sel_tmp_reg_1390(0) = '1') else 
        b_copy_3_3_19_reg_1364;
    exitcond_flatten_fu_285_p2 <= "1" when (indvar_flatten_phi_fu_256_p4 = ap_const_lv5_10) else "0";
    exitcond_fu_303_p2 <= "1" when (j_phi_fu_278_p4 = ap_const_lv3_4) else "0";
    grp_fu_1092_p0 <= (ap_const_lv1_1 & ap_pipeline_reg_pp0_iter1_i2_mid2_v_reg_1297);
    grp_fu_728_p1 <= 
        a_row_2_reg_1385 when (tmp_5_reg_1377(0) = '1') else 
        a_row_2_2_fu_100;
    i2_mid2_v_fu_337_p3 <= 
        i_1_fu_297_p2 when (exitcond_fu_303_p2(0) = '1') else 
        i_phi_fu_267_p4;
    i_1_fu_297_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_phi_fu_267_p4));

    i_phi_fu_267_p4_assign_proc : process(i_reg_263, exitcond_flatten_reg_1258, ap_CS_fsm_pp0_stage0, i2_mid2_v_reg_1297, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_phi_fu_267_p4 <= i2_mid2_v_reg_1297;
        else 
            i_phi_fu_267_p4 <= i_reg_263;
        end if; 
    end process;

    indvar_flatten_next_fu_291_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_256_p4) + unsigned(ap_const_lv5_1));

    indvar_flatten_phi_fu_256_p4_assign_proc : process(indvar_flatten_reg_252, exitcond_flatten_reg_1258, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1262, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_256_p4 <= indvar_flatten_next_reg_1262;
        else 
            indvar_flatten_phi_fu_256_p4 <= indvar_flatten_reg_252;
        end if; 
    end process;

    j_1_fu_920_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_mid2_reg_1267));
    j_mid2_fu_309_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_303_p2(0) = '1') else 
        j_phi_fu_278_p4;

    j_phi_fu_278_p4_assign_proc : process(j_reg_274, exitcond_flatten_reg_1258, ap_CS_fsm_pp0_stage0, j_1_reg_1474, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            j_phi_fu_278_p4 <= j_1_reg_1474;
        else 
            j_phi_fu_278_p4 <= j_reg_274;
        end if; 
    end process;

    sel_tmp2_fu_445_p2 <= "1" when (tmp_reg_1320 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_450_p2 <= "1" when (tmp_reg_1320 = ap_const_lv2_0) else "0";
    sel_tmp_fu_440_p2 <= "1" when (tmp_reg_1320 = ap_const_lv2_2) else "0";
    tmp1_fu_323_p2 <= "1" when (i_phi_fu_267_p4 = ap_const_lv3_0) else "0";
    tmp8_fu_1102_p2 <= std_logic_vector(unsigned(tmp_11_1_reg_1504) + unsigned(tmp_s_reg_1499));
    tmp9_fu_1106_p2 <= std_logic_vector(unsigned(tmp_11_3_reg_1494) + unsigned(tmp_11_2_reg_1489));
    tmp_10_fu_367_p2 <= (tmp_1_reg_1303 or ap_const_lv5_1);
    tmp_11_fu_372_p3 <= (ap_const_lv59_0 & tmp_10_fu_367_p2);
    tmp_12_3_fu_1110_p2 <= std_logic_vector(unsigned(tmp8_fu_1102_p2) + unsigned(tmp9_fu_1106_p2));
    tmp_12_fu_395_p2 <= (tmp_1_reg_1303 or ap_const_lv5_2);
    tmp_13_fu_400_p3 <= (ap_const_lv59_0 & tmp_12_fu_395_p2);
    tmp_14_fu_421_p2 <= (tmp_1_reg_1303 or ap_const_lv5_3);
    tmp_15_fu_426_p3 <= (ap_const_lv59_0 & tmp_14_fu_421_p2);
    tmp_16_fu_1116_p3 <= (grp_fu_1092_p2 & ap_const_lv2_0);
    tmp_17_fu_633_p3 <= (ap_const_lv61_2 & j_mid2_reg_1267);
    tmp_18_fu_801_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(tmp_8_cast_fu_798_p1));
    tmp_19_cast_fu_807_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_801_p2),64));
    tmp_19_fu_384_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(tmp_8_cast5_fu_381_p1));
    tmp_1_fu_345_p3 <= (i2_mid2_v_fu_337_p3 & ap_const_lv2_0);
    tmp_20_cast_fu_390_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_384_p2),64));
    tmp_20_fu_1127_p2 <= std_logic_vector(unsigned(tmp_16_fu_1116_p3) + unsigned(tmp_8_cast6_fu_1124_p1));
    tmp_21_cast_fu_1133_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_1127_p2),64));
    tmp_3_fu_903_p1 <= 
        b_copy_0_3_15_fu_868_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_0_3_11_fu_108;
    tmp_3_fu_903_p2 <= 
        b_copy_0_3_14_fu_861_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_0_3_8_fu_112;
    tmp_3_fu_903_p3 <= 
        b_copy_0_3_7_fu_847_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_0_3_12_fu_116;
    tmp_3_fu_903_p4 <= 
        b_copy_0_3_2_fu_826_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_0_3_1_fu_120;
    tmp_4_fu_1052_p1 <= 
        b_copy_1_3_15_fu_1013_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_1_3_11_fu_124;
    tmp_4_fu_1052_p2 <= 
        b_copy_1_3_14_fu_1006_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_1_3_8_fu_128;
    tmp_4_fu_1052_p3 <= 
        b_copy_1_3_7_fu_992_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_1_3_12_fu_132;
    tmp_4_fu_1052_p4 <= 
        b_copy_1_3_2_fu_971_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_1_3_1_fu_136;
    tmp_5_fu_435_p2 <= "1" when (j_mid2_reg_1267 = ap_const_lv3_0) else "0";
    tmp_6_fu_551_p1 <= 
        b_copy_2_3_15_fu_516_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_2_3_11_fu_140;
    tmp_6_fu_551_p2 <= 
        b_copy_2_3_14_fu_508_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_2_3_8_fu_144;
    tmp_6_fu_551_p3 <= 
        b_copy_2_3_7_fu_493_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_2_3_12_fu_148;
    tmp_6_fu_551_p4 <= 
        b_copy_2_3_2_fu_470_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_2_3_1_fu_152;
    tmp_7_fu_733_p1 <= 
        b_copy_3_3_15_fu_694_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_3_3_11_fu_156;
    tmp_7_fu_733_p2 <= 
        b_copy_3_3_14_fu_687_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_3_3_8_fu_160;
    tmp_7_fu_733_p3 <= 
        b_copy_3_3_7_fu_674_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_3_3_12_fu_164;
    tmp_7_fu_733_p4 <= 
        b_copy_3_3_2_fu_654_p3 when (tmp_mid2_reg_1277(0) = '1') else 
        b_copy_3_3_1_fu_168;
    tmp_8_cast5_fu_381_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1267),4));
    tmp_8_cast6_fu_1124_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter2_j_mid2_reg_1267),6));
    tmp_8_cast_fu_798_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1267),5));
    tmp_8_fu_358_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_309_p3),64));
    tmp_9_fu_353_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_345_p3),64));
    tmp_fu_363_p1 <= j_mid2_fu_309_p3(2 - 1 downto 0);
    tmp_mid1_fu_317_p2 <= "1" when (i_1_fu_297_p2 = ap_const_lv3_0) else "0";
    tmp_mid2_fu_329_p3 <= 
        tmp_mid1_fu_317_p2 when (exitcond_fu_303_p2(0) = '1') else 
        tmp1_fu_323_p2;
end behav;
