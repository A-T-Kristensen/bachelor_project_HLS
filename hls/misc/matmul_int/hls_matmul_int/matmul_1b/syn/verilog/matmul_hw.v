// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.021000,HLS_SYN_LAT=258,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1234,HLS_SYN_LUT=2147}" *)

module matmul_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_Addr_A,
        a_EN_A,
        a_WEN_A,
        a_Din_A,
        a_Dout_A,
        a_Clk_A,
        a_Rst_A
);

parameter    ap_ST_fsm_state1 = 18'b1;
parameter    ap_ST_fsm_state2 = 18'b10;
parameter    ap_ST_fsm_state3 = 18'b100;
parameter    ap_ST_fsm_state4 = 18'b1000;
parameter    ap_ST_fsm_state5 = 18'b10000;
parameter    ap_ST_fsm_state6 = 18'b100000;
parameter    ap_ST_fsm_state7 = 18'b1000000;
parameter    ap_ST_fsm_state8 = 18'b10000000;
parameter    ap_ST_fsm_state9 = 18'b100000000;
parameter    ap_ST_fsm_state10 = 18'b1000000000;
parameter    ap_ST_fsm_state11 = 18'b10000000000;
parameter    ap_ST_fsm_state12 = 18'b100000000000;
parameter    ap_ST_fsm_state13 = 18'b1000000000000;
parameter    ap_ST_fsm_state14 = 18'b10000000000000;
parameter    ap_ST_fsm_state15 = 18'b100000000000000;
parameter    ap_ST_fsm_state16 = 18'b1000000000000000;
parameter    ap_ST_fsm_state17 = 18'b10000000000000000;
parameter    ap_ST_fsm_state18 = 18'b100000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv59_0 = 59'b00000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv61_2 = 61'b10;
parameter    ap_const_lv5_14 = 5'b10100;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv61_3 = 61'b11;
parameter    ap_const_lv6_1C = 6'b11100;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_11 = 32'b10001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_Addr_A;
output   a_EN_A;
output  [3:0] a_WEN_A;
output  [31:0] a_Din_A;
input  [31:0] a_Dout_A;
output   a_Clk_A;
output   a_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_EN_A;
reg[3:0] a_WEN_A;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [4:0] indvar_flatten_next_fu_284_p2;
reg   [4:0] indvar_flatten_next_reg_1259;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_296_p2;
reg   [0:0] exitcond_reg_1264;
wire   [0:0] exitcond_flatten_fu_278_p2;
wire   [0:0] tmp_mid2_fu_314_p3;
reg   [0:0] tmp_mid2_reg_1269;
wire   [2:0] tmp_2_mid2_v_v_v_fu_322_p3;
reg   [2:0] tmp_2_mid2_v_v_v_reg_1289;
wire   [4:0] tmp_3_fu_330_p3;
reg   [4:0] tmp_3_reg_1295;
wire   [0:0] ap_CS_fsm_state3;
reg   [31:0] a_row_0_reg_1312;
wire   [0:0] ap_CS_fsm_state4;
reg   [31:0] a_row_1_reg_1322;
wire   [0:0] ap_CS_fsm_state5;
reg   [31:0] a_row_2_reg_1332;
wire   [2:0] j_mid2_fu_385_p3;
reg   [2:0] j_mid2_reg_1337;
wire   [0:0] ap_CS_fsm_state6;
reg   [31:0] a_row_3_reg_1347;
wire   [1:0] tmp_fu_401_p1;
reg   [1:0] tmp_reg_1357;
wire  signed [31:0] a_row_3_1_fu_434_p3;
reg  signed [31:0] a_row_3_1_reg_1368;
wire   [0:0] ap_CS_fsm_state7;
wire  signed [31:0] a_row_2_1_fu_441_p3;
reg  signed [31:0] a_row_2_1_reg_1373;
wire  signed [31:0] a_row_1_1_fu_448_p3;
reg  signed [31:0] a_row_1_1_reg_1378;
wire  signed [31:0] a_row_0_1_fu_455_p3;
reg  signed [31:0] a_row_0_1_reg_1383;
wire   [0:0] sel_tmp_fu_476_p2;
reg   [0:0] sel_tmp_reg_1393;
wire   [0:0] sel_tmp2_fu_489_p2;
reg   [0:0] sel_tmp2_reg_1403;
wire   [0:0] sel_tmp4_fu_502_p2;
reg   [0:0] sel_tmp4_reg_1416;
wire  signed [31:0] tmp_6_fu_591_p6;
reg  signed [31:0] tmp_6_reg_1432;
wire   [0:0] ap_CS_fsm_state8;
wire  signed [31:0] tmp_7_fu_759_p6;
reg  signed [31:0] tmp_7_reg_1442;
wire   [0:0] ap_CS_fsm_state9;
wire  signed [31:0] tmp_9_fu_913_p6;
reg  signed [31:0] tmp_9_reg_1452;
wire  signed [31:0] tmp_10_fu_1053_p6;
reg  signed [31:0] tmp_10_reg_1457;
wire   [0:0] ap_CS_fsm_state10;
wire   [31:0] grp_fu_755_p2;
reg   [31:0] tmp_s_reg_1462;
wire   [0:0] ap_CS_fsm_state13;
wire   [31:0] grp_fu_909_p2;
reg   [31:0] tmp_11_1_reg_1467;
wire   [0:0] ap_CS_fsm_state14;
wire   [31:0] grp_fu_1049_p2;
reg   [31:0] tmp_11_2_reg_1472;
wire   [0:0] ap_CS_fsm_state15;
wire   [31:0] tmp2_fu_1090_p2;
reg   [31:0] tmp2_reg_1477;
wire   [31:0] grp_fu_1086_p2;
reg   [31:0] tmp_11_3_reg_1482;
wire   [0:0] ap_CS_fsm_state16;
wire   [2:0] j_1_fu_1131_p2;
wire   [0:0] ap_CS_fsm_state17;
reg   [4:0] indvar_flatten_reg_244;
reg   [2:0] i_reg_255;
reg   [2:0] j_reg_266;
wire   [63:0] tmp_2_fu_338_p1;
wire   [63:0] tmp_11_fu_348_p3;
wire   [63:0] tmp_13_fu_362_p3;
wire   [63:0] tmp_15_fu_376_p3;
wire   [63:0] tmp_16_fu_392_p3;
wire   [63:0] tmp_19_cast_fu_471_p1;
wire   [63:0] tmp_18_fu_656_p3;
wire   [63:0] tmp_21_cast_fu_813_p1;
wire   [63:0] tmp_22_cast_fu_1116_p1;
reg   [31:0] a_row_0_2_fu_88;
reg   [31:0] a_row_1_2_fu_92;
reg   [31:0] a_row_2_2_fu_96;
reg   [31:0] a_row_3_2_fu_100;
reg   [31:0] b_copy_0_3_11_fu_104;
wire   [31:0] b_copy_0_3_18_fu_584_p3;
reg   [31:0] b_copy_0_3_8_fu_108;
wire   [31:0] b_copy_0_3_17_fu_577_p3;
reg   [31:0] b_copy_0_3_12_fu_112;
wire   [31:0] b_copy_0_3_16_fu_570_p3;
reg   [31:0] b_copy_0_3_1_fu_116;
wire   [31:0] b_copy_0_3_3_fu_563_p3;
reg   [31:0] b_copy_1_3_11_fu_120;
wire   [31:0] b_copy_1_3_18_fu_748_p3;
reg   [31:0] b_copy_1_3_8_fu_124;
wire   [31:0] b_copy_1_3_17_fu_741_p3;
reg   [31:0] b_copy_1_3_12_fu_128;
wire   [31:0] b_copy_1_3_16_fu_734_p3;
reg   [31:0] b_copy_1_3_1_fu_132;
wire   [31:0] b_copy_1_3_3_fu_727_p3;
reg   [31:0] b_copy_2_3_11_fu_136;
wire   [31:0] b_copy_2_3_18_fu_902_p3;
reg   [31:0] b_copy_2_3_8_fu_140;
wire   [31:0] b_copy_2_3_17_fu_895_p3;
reg   [31:0] b_copy_2_3_12_fu_144;
wire   [31:0] b_copy_2_3_16_fu_888_p3;
reg   [31:0] b_copy_2_3_1_fu_148;
wire   [31:0] b_copy_2_3_3_fu_881_p3;
reg   [31:0] b_copy_3_3_11_fu_152;
wire   [31:0] b_copy_3_3_18_fu_1042_p3;
reg   [31:0] b_copy_3_3_8_fu_156;
wire   [31:0] b_copy_3_3_17_fu_1035_p3;
reg   [31:0] b_copy_3_3_12_fu_160;
wire   [31:0] b_copy_3_3_16_fu_1028_p3;
reg   [31:0] b_copy_3_3_1_fu_164;
wire   [31:0] b_copy_3_3_3_fu_1021_p3;
reg   [31:0] a_Addr_A_orig;
wire   [2:0] i_1_fu_290_p2;
wire   [0:0] tmp_mid1_fu_302_p2;
wire   [0:0] tmp1_fu_308_p2;
wire   [4:0] tmp_8_fu_343_p2;
wire   [4:0] tmp_12_fu_357_p2;
wire   [4:0] tmp_14_fu_371_p2;
wire   [0:0] tmp_5_fu_429_p2;
wire   [4:0] tmp_8_cast_fu_462_p1;
wire   [4:0] tmp_17_fu_465_p2;
wire   [31:0] b_copy_0_3_fu_481_p3;
wire   [31:0] b_copy_0_3_4_fu_494_p3;
wire   [31:0] b_copy_0_3_5_fu_515_p3;
wire   [31:0] b_copy_0_3_6_fu_523_p3;
wire   [31:0] b_copy_0_3_9_fu_539_p3;
wire   [31:0] b_copy_0_3_2_fu_507_p3;
wire   [31:0] b_copy_0_3_7_fu_531_p3;
wire   [31:0] b_copy_0_3_14_fu_547_p3;
wire   [31:0] b_copy_0_3_15_fu_555_p3;
wire   [31:0] tmp_6_fu_591_p1;
wire   [31:0] tmp_6_fu_591_p2;
wire   [31:0] tmp_6_fu_591_p3;
wire   [31:0] tmp_6_fu_591_p4;
wire   [31:0] b_copy_1_3_fu_664_p3;
wire   [31:0] b_copy_1_3_4_fu_671_p3;
wire   [31:0] b_copy_1_3_5_fu_685_p3;
wire   [31:0] b_copy_1_3_6_fu_692_p3;
wire   [31:0] b_copy_1_3_9_fu_706_p3;
wire   [31:0] b_copy_1_3_2_fu_678_p3;
wire   [31:0] b_copy_1_3_7_fu_699_p3;
wire   [31:0] b_copy_1_3_14_fu_713_p3;
wire   [31:0] b_copy_1_3_15_fu_720_p3;
wire   [31:0] tmp_7_fu_759_p1;
wire   [31:0] tmp_7_fu_759_p2;
wire   [31:0] tmp_7_fu_759_p3;
wire   [31:0] tmp_7_fu_759_p4;
wire   [5:0] tmp_8_cast5_fu_804_p1;
wire   [5:0] tmp_19_fu_807_p2;
wire   [31:0] b_copy_2_3_fu_818_p3;
wire   [31:0] b_copy_2_3_4_fu_825_p3;
wire   [31:0] b_copy_2_3_5_fu_839_p3;
wire   [31:0] b_copy_2_3_6_fu_846_p3;
wire   [31:0] b_copy_2_3_9_fu_860_p3;
wire   [31:0] b_copy_2_3_2_fu_832_p3;
wire   [31:0] b_copy_2_3_7_fu_853_p3;
wire   [31:0] b_copy_2_3_14_fu_867_p3;
wire   [31:0] b_copy_2_3_15_fu_874_p3;
wire   [31:0] tmp_9_fu_913_p1;
wire   [31:0] tmp_9_fu_913_p2;
wire   [31:0] tmp_9_fu_913_p3;
wire   [31:0] tmp_9_fu_913_p4;
wire   [31:0] b_copy_3_3_fu_958_p3;
wire   [31:0] b_copy_3_3_4_fu_965_p3;
wire   [31:0] b_copy_3_3_5_fu_979_p3;
wire   [31:0] b_copy_3_3_6_fu_986_p3;
wire   [31:0] b_copy_3_3_9_fu_1000_p3;
wire   [31:0] b_copy_3_3_2_fu_972_p3;
wire   [31:0] b_copy_3_3_7_fu_993_p3;
wire   [31:0] b_copy_3_3_14_fu_1007_p3;
wire   [31:0] b_copy_3_3_15_fu_1014_p3;
wire   [31:0] tmp_10_fu_1053_p1;
wire   [31:0] tmp_10_fu_1053_p2;
wire   [31:0] tmp_10_fu_1053_p3;
wire   [31:0] tmp_10_fu_1053_p4;
wire   [0:0] ap_CS_fsm_state11;
wire   [5:0] tmp_1_fu_1094_p4;
wire   [6:0] tmp_2_cast_fu_1103_p1;
wire   [6:0] tmp_8_cast6_fu_1107_p1;
wire   [6:0] tmp_20_fu_1110_p2;
wire   [31:0] tmp3_fu_1121_p2;
wire   [0:0] ap_CS_fsm_state18;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'b1;
end

matmul_hw_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matmul_hw_mux_42_bkb_U1(
    .din1(tmp_6_fu_591_p1),
    .din2(tmp_6_fu_591_p2),
    .din3(tmp_6_fu_591_p3),
    .din4(tmp_6_fu_591_p4),
    .din5(tmp_reg_1357),
    .dout(tmp_6_fu_591_p6)
);

matmul_hw_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32scud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_reg_1432),
    .din1(a_row_0_1_reg_1383),
    .ce(1'b1),
    .dout(grp_fu_755_p2)
);

matmul_hw_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matmul_hw_mux_42_bkb_U3(
    .din1(tmp_7_fu_759_p1),
    .din2(tmp_7_fu_759_p2),
    .din3(tmp_7_fu_759_p3),
    .din4(tmp_7_fu_759_p4),
    .din5(tmp_reg_1357),
    .dout(tmp_7_fu_759_p6)
);

matmul_hw_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32scud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_1442),
    .din1(a_row_1_1_reg_1378),
    .ce(1'b1),
    .dout(grp_fu_909_p2)
);

matmul_hw_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matmul_hw_mux_42_bkb_U5(
    .din1(tmp_9_fu_913_p1),
    .din2(tmp_9_fu_913_p2),
    .din3(tmp_9_fu_913_p3),
    .din4(tmp_9_fu_913_p4),
    .din5(tmp_reg_1357),
    .dout(tmp_9_fu_913_p6)
);

matmul_hw_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32scud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_reg_1452),
    .din1(a_row_2_1_reg_1373),
    .ce(1'b1),
    .dout(grp_fu_1049_p2)
);

matmul_hw_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matmul_hw_mux_42_bkb_U7(
    .din1(tmp_10_fu_1053_p1),
    .din2(tmp_10_fu_1053_p2),
    .din3(tmp_10_fu_1053_p3),
    .din4(tmp_10_fu_1053_p4),
    .din5(tmp_reg_1357),
    .dout(tmp_10_fu_1053_p6)
);

matmul_hw_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32scud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_10_reg_1457),
    .din1(a_row_3_1_reg_1368),
    .ce(1'b1),
    .dout(grp_fu_1086_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_255 <= tmp_2_mid2_v_v_v_reg_1289;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_255 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten_reg_244 <= indvar_flatten_next_reg_1259;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_244 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_reg_266 <= j_1_fu_1131_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_266 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_row_0_1_reg_1383 <= a_row_0_1_fu_455_p3;
        a_row_0_2_fu_88 <= a_row_0_1_fu_455_p3;
        a_row_1_1_reg_1378 <= a_row_1_1_fu_448_p3;
        a_row_1_2_fu_92 <= a_row_1_1_fu_448_p3;
        a_row_2_1_reg_1373 <= a_row_2_1_fu_441_p3;
        a_row_2_2_fu_96 <= a_row_2_1_fu_441_p3;
        a_row_3_1_reg_1368 <= a_row_3_1_fu_434_p3;
        a_row_3_2_fu_100 <= a_row_3_1_fu_434_p3;
        b_copy_0_3_11_fu_104 <= b_copy_0_3_18_fu_584_p3;
        b_copy_0_3_12_fu_112 <= b_copy_0_3_16_fu_570_p3;
        b_copy_0_3_1_fu_116 <= b_copy_0_3_3_fu_563_p3;
        b_copy_0_3_8_fu_108 <= b_copy_0_3_17_fu_577_p3;
        sel_tmp2_reg_1403 <= sel_tmp2_fu_489_p2;
        sel_tmp4_reg_1416 <= sel_tmp4_fu_502_p2;
        sel_tmp_reg_1393 <= sel_tmp_fu_476_p2;
        tmp_6_reg_1432 <= tmp_6_fu_591_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_row_0_reg_1312 <= a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_row_1_reg_1322 <= a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_row_2_reg_1332 <= a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_row_3_reg_1347 <= a_Dout_A;
        j_mid2_reg_1337 <= j_mid2_fu_385_p3;
        tmp_reg_1357 <= tmp_fu_401_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        b_copy_1_3_11_fu_120 <= b_copy_1_3_18_fu_748_p3;
        b_copy_1_3_12_fu_128 <= b_copy_1_3_16_fu_734_p3;
        b_copy_1_3_1_fu_132 <= b_copy_1_3_3_fu_727_p3;
        b_copy_1_3_8_fu_124 <= b_copy_1_3_17_fu_741_p3;
        tmp_7_reg_1442 <= tmp_7_fu_759_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        b_copy_2_3_11_fu_136 <= b_copy_2_3_18_fu_902_p3;
        b_copy_2_3_12_fu_144 <= b_copy_2_3_16_fu_888_p3;
        b_copy_2_3_1_fu_148 <= b_copy_2_3_3_fu_881_p3;
        b_copy_2_3_8_fu_140 <= b_copy_2_3_17_fu_895_p3;
        tmp_9_reg_1452 <= tmp_9_fu_913_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_copy_3_3_11_fu_152 <= b_copy_3_3_18_fu_1042_p3;
        b_copy_3_3_12_fu_160 <= b_copy_3_3_16_fu_1028_p3;
        b_copy_3_3_1_fu_164 <= b_copy_3_3_3_fu_1021_p3;
        b_copy_3_3_8_fu_156 <= b_copy_3_3_17_fu_1035_p3;
        tmp_10_reg_1457 <= tmp_10_fu_1053_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_278_p2 == 1'b0))) begin
        exitcond_reg_1264 <= exitcond_fu_296_p2;
        tmp_2_mid2_v_v_v_reg_1289 <= tmp_2_mid2_v_v_v_fu_322_p3;
        tmp_3_reg_1295[4 : 2] <= tmp_3_fu_330_p3[4 : 2];
        tmp_mid2_reg_1269 <= tmp_mid2_fu_314_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next_reg_1259 <= indvar_flatten_next_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp2_reg_1477 <= tmp2_fu_1090_p2;
        tmp_11_2_reg_1472 <= grp_fu_1049_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_11_1_reg_1467 <= grp_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_11_3_reg_1482 <= grp_fu_1086_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_s_reg_1462 <= grp_fu_755_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        a_Addr_A_orig = tmp_22_cast_fu_1116_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        a_Addr_A_orig = tmp_21_cast_fu_813_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_Addr_A_orig = tmp_18_fu_656_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_Addr_A_orig = tmp_19_cast_fu_471_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_Addr_A_orig = tmp_16_fu_392_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_Addr_A_orig = tmp_15_fu_376_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_Addr_A_orig = tmp_13_fu_362_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_Addr_A_orig = tmp_11_fu_348_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_Addr_A_orig = tmp_2_fu_338_p1;
    end else begin
        a_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state17))) begin
        a_EN_A = 1'b1;
    end else begin
        a_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        a_WEN_A = ap_const_lv4_F;
    end else begin
        a_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((exitcond_flatten_fu_278_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Addr_A = a_Addr_A_orig << ap_const_lv32_2;

assign a_Clk_A = ap_clk;

assign a_Din_A = (tmp2_reg_1477 + tmp3_fu_1121_p2);

assign a_Rst_A = ap_rst;

assign a_row_0_1_fu_455_p3 = ((tmp_5_fu_429_p2[0:0] === 1'b1) ? a_row_0_reg_1312 : a_row_0_2_fu_88);

assign a_row_1_1_fu_448_p3 = ((tmp_5_fu_429_p2[0:0] === 1'b1) ? a_row_1_reg_1322 : a_row_1_2_fu_92);

assign a_row_2_1_fu_441_p3 = ((tmp_5_fu_429_p2[0:0] === 1'b1) ? a_row_2_reg_1332 : a_row_2_2_fu_96);

assign a_row_3_1_fu_434_p3 = ((tmp_5_fu_429_p2[0:0] === 1'b1) ? a_row_3_reg_1347 : a_row_3_2_fu_100);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign b_copy_0_3_14_fu_547_p3 = ((sel_tmp4_fu_502_p2[0:0] === 1'b1) ? b_copy_0_3_8_fu_108 : b_copy_0_3_9_fu_539_p3);

assign b_copy_0_3_15_fu_555_p3 = ((sel_tmp4_fu_502_p2[0:0] === 1'b1) ? a_Dout_A : b_copy_0_3_11_fu_104);

assign b_copy_0_3_16_fu_570_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_0_3_7_fu_531_p3 : b_copy_0_3_12_fu_112);

assign b_copy_0_3_17_fu_577_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_0_3_14_fu_547_p3 : b_copy_0_3_8_fu_108);

assign b_copy_0_3_18_fu_584_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_0_3_15_fu_555_p3 : b_copy_0_3_11_fu_104);

assign b_copy_0_3_2_fu_507_p3 = ((sel_tmp4_fu_502_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_116 : b_copy_0_3_4_fu_494_p3);

assign b_copy_0_3_3_fu_563_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_0_3_2_fu_507_p3 : b_copy_0_3_1_fu_116);

assign b_copy_0_3_4_fu_494_p3 = ((sel_tmp2_fu_489_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_116 : b_copy_0_3_fu_481_p3);

assign b_copy_0_3_5_fu_515_p3 = ((sel_tmp_fu_476_p2[0:0] === 1'b1) ? a_Dout_A : b_copy_0_3_12_fu_112);

assign b_copy_0_3_6_fu_523_p3 = ((sel_tmp2_fu_489_p2[0:0] === 1'b1) ? b_copy_0_3_12_fu_112 : b_copy_0_3_5_fu_515_p3);

assign b_copy_0_3_7_fu_531_p3 = ((sel_tmp4_fu_502_p2[0:0] === 1'b1) ? b_copy_0_3_12_fu_112 : b_copy_0_3_6_fu_523_p3);

assign b_copy_0_3_9_fu_539_p3 = ((sel_tmp2_fu_489_p2[0:0] === 1'b1) ? a_Dout_A : b_copy_0_3_8_fu_108);

assign b_copy_0_3_fu_481_p3 = ((sel_tmp_fu_476_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_116 : a_Dout_A);

assign b_copy_1_3_14_fu_713_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_1_3_8_fu_124 : b_copy_1_3_9_fu_706_p3);

assign b_copy_1_3_15_fu_720_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? a_Dout_A : b_copy_1_3_11_fu_120);

assign b_copy_1_3_16_fu_734_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_1_3_7_fu_699_p3 : b_copy_1_3_12_fu_128);

assign b_copy_1_3_17_fu_741_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_1_3_14_fu_713_p3 : b_copy_1_3_8_fu_124);

assign b_copy_1_3_18_fu_748_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_1_3_15_fu_720_p3 : b_copy_1_3_11_fu_120);

assign b_copy_1_3_2_fu_678_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_1_3_1_fu_132 : b_copy_1_3_4_fu_671_p3);

assign b_copy_1_3_3_fu_727_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_1_3_2_fu_678_p3 : b_copy_1_3_1_fu_132);

assign b_copy_1_3_4_fu_671_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? b_copy_1_3_1_fu_132 : b_copy_1_3_fu_664_p3);

assign b_copy_1_3_5_fu_685_p3 = ((sel_tmp_reg_1393[0:0] === 1'b1) ? a_Dout_A : b_copy_1_3_12_fu_128);

assign b_copy_1_3_6_fu_692_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? b_copy_1_3_12_fu_128 : b_copy_1_3_5_fu_685_p3);

assign b_copy_1_3_7_fu_699_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_1_3_12_fu_128 : b_copy_1_3_6_fu_692_p3);

assign b_copy_1_3_9_fu_706_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? a_Dout_A : b_copy_1_3_8_fu_124);

assign b_copy_1_3_fu_664_p3 = ((sel_tmp_reg_1393[0:0] === 1'b1) ? b_copy_1_3_1_fu_132 : a_Dout_A);

assign b_copy_2_3_14_fu_867_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_2_3_8_fu_140 : b_copy_2_3_9_fu_860_p3);

assign b_copy_2_3_15_fu_874_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? a_Dout_A : b_copy_2_3_11_fu_136);

assign b_copy_2_3_16_fu_888_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_2_3_7_fu_853_p3 : b_copy_2_3_12_fu_144);

assign b_copy_2_3_17_fu_895_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_2_3_14_fu_867_p3 : b_copy_2_3_8_fu_140);

assign b_copy_2_3_18_fu_902_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_2_3_15_fu_874_p3 : b_copy_2_3_11_fu_136);

assign b_copy_2_3_2_fu_832_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_2_3_1_fu_148 : b_copy_2_3_4_fu_825_p3);

assign b_copy_2_3_3_fu_881_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_2_3_2_fu_832_p3 : b_copy_2_3_1_fu_148);

assign b_copy_2_3_4_fu_825_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? b_copy_2_3_1_fu_148 : b_copy_2_3_fu_818_p3);

assign b_copy_2_3_5_fu_839_p3 = ((sel_tmp_reg_1393[0:0] === 1'b1) ? a_Dout_A : b_copy_2_3_12_fu_144);

assign b_copy_2_3_6_fu_846_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? b_copy_2_3_12_fu_144 : b_copy_2_3_5_fu_839_p3);

assign b_copy_2_3_7_fu_853_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_2_3_12_fu_144 : b_copy_2_3_6_fu_846_p3);

assign b_copy_2_3_9_fu_860_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? a_Dout_A : b_copy_2_3_8_fu_140);

assign b_copy_2_3_fu_818_p3 = ((sel_tmp_reg_1393[0:0] === 1'b1) ? b_copy_2_3_1_fu_148 : a_Dout_A);

assign b_copy_3_3_14_fu_1007_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_3_3_8_fu_156 : b_copy_3_3_9_fu_1000_p3);

assign b_copy_3_3_15_fu_1014_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? a_Dout_A : b_copy_3_3_11_fu_152);

assign b_copy_3_3_16_fu_1028_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_3_3_7_fu_993_p3 : b_copy_3_3_12_fu_160);

assign b_copy_3_3_17_fu_1035_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_3_3_14_fu_1007_p3 : b_copy_3_3_8_fu_156);

assign b_copy_3_3_18_fu_1042_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_3_3_15_fu_1014_p3 : b_copy_3_3_11_fu_152);

assign b_copy_3_3_2_fu_972_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_3_3_1_fu_164 : b_copy_3_3_4_fu_965_p3);

assign b_copy_3_3_3_fu_1021_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_3_3_2_fu_972_p3 : b_copy_3_3_1_fu_164);

assign b_copy_3_3_4_fu_965_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? b_copy_3_3_1_fu_164 : b_copy_3_3_fu_958_p3);

assign b_copy_3_3_5_fu_979_p3 = ((sel_tmp_reg_1393[0:0] === 1'b1) ? a_Dout_A : b_copy_3_3_12_fu_160);

assign b_copy_3_3_6_fu_986_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? b_copy_3_3_12_fu_160 : b_copy_3_3_5_fu_979_p3);

assign b_copy_3_3_7_fu_993_p3 = ((sel_tmp4_reg_1416[0:0] === 1'b1) ? b_copy_3_3_12_fu_160 : b_copy_3_3_6_fu_986_p3);

assign b_copy_3_3_9_fu_1000_p3 = ((sel_tmp2_reg_1403[0:0] === 1'b1) ? a_Dout_A : b_copy_3_3_8_fu_156);

assign b_copy_3_3_fu_958_p3 = ((sel_tmp_reg_1393[0:0] === 1'b1) ? b_copy_3_3_1_fu_164 : a_Dout_A);

assign exitcond_flatten_fu_278_p2 = ((indvar_flatten_reg_244 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_296_p2 = ((j_reg_266 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign i_1_fu_290_p2 = (ap_const_lv3_1 + i_reg_255);

assign indvar_flatten_next_fu_284_p2 = (indvar_flatten_reg_244 + ap_const_lv5_1);

assign j_1_fu_1131_p2 = (ap_const_lv3_1 + j_mid2_reg_1337);

assign j_mid2_fu_385_p3 = ((exitcond_reg_1264[0:0] === 1'b1) ? ap_const_lv3_0 : j_reg_266);

assign sel_tmp2_fu_489_p2 = ((tmp_reg_1357 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_502_p2 = ((tmp_reg_1357 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_476_p2 = ((tmp_reg_1357 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign tmp1_fu_308_p2 = ((i_reg_255 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp2_fu_1090_p2 = (tmp_11_1_reg_1467 + tmp_s_reg_1462);

assign tmp3_fu_1121_p2 = (tmp_11_3_reg_1482 + tmp_11_2_reg_1472);

assign tmp_10_fu_1053_p1 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_3_3_15_fu_1014_p3 : b_copy_3_3_11_fu_152);

assign tmp_10_fu_1053_p2 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_3_3_14_fu_1007_p3 : b_copy_3_3_8_fu_156);

assign tmp_10_fu_1053_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_3_3_7_fu_993_p3 : b_copy_3_3_12_fu_160);

assign tmp_10_fu_1053_p4 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_3_3_2_fu_972_p3 : b_copy_3_3_1_fu_164);

assign tmp_11_fu_348_p3 = {{ap_const_lv59_0}, {tmp_8_fu_343_p2}};

assign tmp_12_fu_357_p2 = (tmp_3_reg_1295 | ap_const_lv5_2);

assign tmp_13_fu_362_p3 = {{ap_const_lv59_0}, {tmp_12_fu_357_p2}};

assign tmp_14_fu_371_p2 = (tmp_3_reg_1295 | ap_const_lv5_3);

assign tmp_15_fu_376_p3 = {{ap_const_lv59_0}, {tmp_14_fu_371_p2}};

assign tmp_16_fu_392_p3 = {{ap_const_lv61_2}, {j_mid2_fu_385_p3}};

assign tmp_17_fu_465_p2 = ($signed(ap_const_lv5_14) + $signed(tmp_8_cast_fu_462_p1));

assign tmp_18_fu_656_p3 = {{ap_const_lv61_3}, {j_mid2_reg_1337}};

assign tmp_19_cast_fu_471_p1 = tmp_17_fu_465_p2;

assign tmp_19_fu_807_p2 = (ap_const_lv6_1C + tmp_8_cast5_fu_804_p1);

assign tmp_1_fu_1094_p4 = {{{{1'b1}, {tmp_2_mid2_v_v_v_reg_1289}}}, {ap_const_lv2_0}};

assign tmp_20_fu_1110_p2 = (tmp_2_cast_fu_1103_p1 + tmp_8_cast6_fu_1107_p1);

assign tmp_21_cast_fu_813_p1 = tmp_19_fu_807_p2;

assign tmp_22_cast_fu_1116_p1 = tmp_20_fu_1110_p2;

assign tmp_2_cast_fu_1103_p1 = tmp_1_fu_1094_p4;

assign tmp_2_fu_338_p1 = tmp_3_fu_330_p3;

assign tmp_2_mid2_v_v_v_fu_322_p3 = ((exitcond_fu_296_p2[0:0] === 1'b1) ? i_1_fu_290_p2 : i_reg_255);

assign tmp_3_fu_330_p3 = {{tmp_2_mid2_v_v_v_fu_322_p3}, {ap_const_lv2_0}};

assign tmp_5_fu_429_p2 = ((j_mid2_reg_1337 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_6_fu_591_p1 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_0_3_15_fu_555_p3 : b_copy_0_3_11_fu_104);

assign tmp_6_fu_591_p2 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_0_3_14_fu_547_p3 : b_copy_0_3_8_fu_108);

assign tmp_6_fu_591_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_0_3_7_fu_531_p3 : b_copy_0_3_12_fu_112);

assign tmp_6_fu_591_p4 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_0_3_2_fu_507_p3 : b_copy_0_3_1_fu_116);

assign tmp_7_fu_759_p1 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_1_3_15_fu_720_p3 : b_copy_1_3_11_fu_120);

assign tmp_7_fu_759_p2 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_1_3_14_fu_713_p3 : b_copy_1_3_8_fu_124);

assign tmp_7_fu_759_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_1_3_7_fu_699_p3 : b_copy_1_3_12_fu_128);

assign tmp_7_fu_759_p4 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_1_3_2_fu_678_p3 : b_copy_1_3_1_fu_132);

assign tmp_8_cast5_fu_804_p1 = j_mid2_reg_1337;

assign tmp_8_cast6_fu_1107_p1 = j_mid2_reg_1337;

assign tmp_8_cast_fu_462_p1 = j_mid2_reg_1337;

assign tmp_8_fu_343_p2 = (tmp_3_reg_1295 | ap_const_lv5_1);

assign tmp_9_fu_913_p1 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_2_3_15_fu_874_p3 : b_copy_2_3_11_fu_136);

assign tmp_9_fu_913_p2 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_2_3_14_fu_867_p3 : b_copy_2_3_8_fu_140);

assign tmp_9_fu_913_p3 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_2_3_7_fu_853_p3 : b_copy_2_3_12_fu_144);

assign tmp_9_fu_913_p4 = ((tmp_mid2_reg_1269[0:0] === 1'b1) ? b_copy_2_3_2_fu_832_p3 : b_copy_2_3_1_fu_148);

assign tmp_fu_401_p1 = j_mid2_fu_385_p3[1:0];

assign tmp_mid1_fu_302_p2 = ((i_1_fu_290_p2 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_314_p3 = ((exitcond_fu_296_p2[0:0] === 1'b1) ? tmp_mid1_fu_302_p2 : tmp1_fu_308_p2);

always @ (posedge ap_clk) begin
    tmp_3_reg_1295[1:0] <= 2'b00;
end

endmodule //matmul_hw
