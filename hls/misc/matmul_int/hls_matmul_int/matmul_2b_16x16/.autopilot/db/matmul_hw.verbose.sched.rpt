

================================================================
== Vivado HLS Report for 'matmul_hw'
================================================================
* Date:           Mon Apr 24 20:58:59 2017

* Version:        2016.4 (Build 1733598 on Wed Dec 14 22:59:20 MST 2016)
* Project:        hls_matmul_int
* Solution:       matmul_2b_16x16
* Product family: artix7
* Target device:  xc7a100tcsg324-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.05|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +------+------+------+------+---------+
    |   Latency   |   Interval  | Pipeline|
    |  min |  max |  min |  max |   Type  |
    +------+------+------+------+---------+
    |  6154|  6154|  6155|  6155|   none  |
    +------+------+------+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+------+------+----------+-----------+-----------+------+----------+
        |          |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+------+------+----------+-----------+-----------+------+----------+
        |- L_col   |  6152|  6152|        33|         24|          1|   256|    yes   |
        +----------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 24, depth = 33


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 35
* Pipeline: 1
  Pipeline-0: II = 24, D = 33, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	35  / (exitcond_flatten)
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	2  / true
35 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: a_row_0_2 (3)  [1/1] 0.00ns
:0  %a_row_0_2 = alloca i32

ST_1: a_row_1_2 (4)  [1/1] 0.00ns
:1  %a_row_1_2 = alloca i32

ST_1: a_row_2_2 (5)  [1/1] 0.00ns
:2  %a_row_2_2 = alloca i32

ST_1: a_row_3_2 (6)  [1/1] 0.00ns
:3  %a_row_3_2 = alloca i32

ST_1: a_row_4_2 (7)  [1/1] 0.00ns
:4  %a_row_4_2 = alloca i32

ST_1: a_row_5_2 (8)  [1/1] 0.00ns
:5  %a_row_5_2 = alloca i32

ST_1: a_row_6_2 (9)  [1/1] 0.00ns
:6  %a_row_6_2 = alloca i32

ST_1: a_row_7_2 (10)  [1/1] 0.00ns
:7  %a_row_7_2 = alloca i32

ST_1: a_row_8_2 (11)  [1/1] 0.00ns
:8  %a_row_8_2 = alloca i32

ST_1: a_row_9_2 (12)  [1/1] 0.00ns
:9  %a_row_9_2 = alloca i32

ST_1: a_row_10_2 (13)  [1/1] 0.00ns
:10  %a_row_10_2 = alloca i32

ST_1: a_row_11_2 (14)  [1/1] 0.00ns
:11  %a_row_11_2 = alloca i32

ST_1: a_row_12_2 (15)  [1/1] 0.00ns
:12  %a_row_12_2 = alloca i32

ST_1: a_row_13_2 (16)  [1/1] 0.00ns
:13  %a_row_13_2 = alloca i32

ST_1: a_row_14_2 (17)  [1/1] 0.00ns
:14  %a_row_14_2 = alloca i32

ST_1: a_row_15_2 (18)  [1/1] 0.00ns
:15  %a_row_15_2 = alloca i32

ST_1: StgValue_52 (19)  [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap([384 x i32]* %a_1), !map !7

ST_1: StgValue_53 (20)  [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecBitsMap([384 x i32]* %a_0), !map !14

ST_1: StgValue_54 (21)  [1/1] 0.00ns
:18  call void (...)* @_ssdm_op_SpecTopModule([10 x i8]* @matmul_hw_str) nounwind

ST_1: b_copy_0 (22)  [1/1] 0.00ns  loc: matmul.cpp:14
:19  %b_copy_0 = alloca [16 x i32], align 16

ST_1: b_copy_1 (23)  [1/1] 0.00ns  loc: matmul.cpp:14
:20  %b_copy_1 = alloca [16 x i32], align 16

ST_1: b_copy_2 (24)  [1/1] 0.00ns  loc: matmul.cpp:14
:21  %b_copy_2 = alloca [16 x i32], align 16

ST_1: b_copy_3 (25)  [1/1] 0.00ns  loc: matmul.cpp:14
:22  %b_copy_3 = alloca [16 x i32], align 16

ST_1: b_copy_4 (26)  [1/1] 0.00ns  loc: matmul.cpp:14
:23  %b_copy_4 = alloca [16 x i32], align 16

ST_1: b_copy_5 (27)  [1/1] 0.00ns  loc: matmul.cpp:14
:24  %b_copy_5 = alloca [16 x i32], align 16

ST_1: b_copy_6 (28)  [1/1] 0.00ns  loc: matmul.cpp:14
:25  %b_copy_6 = alloca [16 x i32], align 16

ST_1: b_copy_7 (29)  [1/1] 0.00ns  loc: matmul.cpp:14
:26  %b_copy_7 = alloca [16 x i32], align 16

ST_1: b_copy_8 (30)  [1/1] 0.00ns  loc: matmul.cpp:14
:27  %b_copy_8 = alloca [16 x i32], align 16

ST_1: b_copy_9 (31)  [1/1] 0.00ns  loc: matmul.cpp:14
:28  %b_copy_9 = alloca [16 x i32], align 16

ST_1: b_copy_10 (32)  [1/1] 0.00ns  loc: matmul.cpp:14
:29  %b_copy_10 = alloca [16 x i32], align 16

ST_1: b_copy_11 (33)  [1/1] 0.00ns  loc: matmul.cpp:14
:30  %b_copy_11 = alloca [16 x i32], align 16

ST_1: b_copy_12 (34)  [1/1] 0.00ns  loc: matmul.cpp:14
:31  %b_copy_12 = alloca [16 x i32], align 16

ST_1: b_copy_13 (35)  [1/1] 0.00ns  loc: matmul.cpp:14
:32  %b_copy_13 = alloca [16 x i32], align 16

ST_1: b_copy_14 (36)  [1/1] 0.00ns  loc: matmul.cpp:14
:33  %b_copy_14 = alloca [16 x i32], align 16

ST_1: b_copy_15 (37)  [1/1] 0.00ns  loc: matmul.cpp:14
:34  %b_copy_15 = alloca [16 x i32], align 16

ST_1: StgValue_71 (38)  [1/1] 0.00ns  loc: matmul.cpp:6
:35  call void (...)* @_ssdm_op_SpecInterface(i32 0, [11 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_72 (39)  [1/1] 0.00ns
:36  call void (...)* @_ssdm_op_SpecInterface([384 x i32]* %a_0, [384 x i32]* %a_1, [5 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: StgValue_73 (40)  [1/1] 0.00ns
:37  call void (...)* @_ssdm_op_SpecMemCore([384 x i32]* %a_0, [384 x i32]* %a_1, [1 x i8]* @p_str1, [12 x i8]* @p_str4, [1 x i8]* @p_str1, i32 -1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: StgValue_74 (41)  [1/1] 1.57ns  loc: matmul.cpp:19
:38  br label %.preheader7


 <State 2>: 6.45ns
ST_2: indvar_flatten (43)  [1/1] 0.00ns
.preheader7:0  %indvar_flatten = phi i9 [ 0, %0 ], [ %indvar_flatten_next, %.loopexit ]

ST_2: i (44)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7:1  %i = phi i5 [ 0, %0 ], [ %i2_mid2_v, %.loopexit ]

ST_2: j (45)  [1/1] 0.00ns
.preheader7:2  %j = phi i5 [ 0, %0 ], [ %j_1, %.loopexit ]

ST_2: exitcond_flatten (46)  [1/1] 2.51ns
.preheader7:3  %exitcond_flatten = icmp eq i9 %indvar_flatten, -256

ST_2: indvar_flatten_next (47)  [1/1] 1.79ns
.preheader7:4  %indvar_flatten_next = add i9 %indvar_flatten, 1

ST_2: StgValue_80 (48)  [1/1] 0.00ns
.preheader7:5  br i1 %exitcond_flatten, label %1, label %.preheader7.preheader

ST_2: i_1 (66)  [1/1] 1.67ns  loc: matmul.cpp:19
.preheader7.preheader:16  %i_1 = add i5 %i, 1

ST_2: exitcond (69)  [1/1] 2.37ns  loc: matmul.cpp:20
.preheader7.preheader:19  %exitcond = icmp eq i5 %j, -16

ST_2: j_mid2 (70)  [1/1] 1.37ns  loc: matmul.cpp:20
.preheader7.preheader:20  %j_mid2 = select i1 %exitcond, i5 0, i5 %j

ST_2: tmp_mid1 (71)  [1/1] 2.37ns  loc: matmul.cpp:31
.preheader7.preheader:21  %tmp_mid1 = icmp eq i5 %i_1, 0

ST_2: tmp (72)  [1/1] 2.37ns  loc: matmul.cpp:31
.preheader7.preheader:22  %tmp = icmp eq i5 %i, 0

ST_2: tmp_mid2 (73)  [1/1] 1.37ns  loc: matmul.cpp:31
.preheader7.preheader:23  %tmp_mid2 = select i1 %exitcond, i1 %tmp_mid1, i1 %tmp

ST_2: i2_mid2_v (74)  [1/1] 1.37ns  loc: matmul.cpp:20
.preheader7.preheader:24  %i2_mid2_v = select i1 %exitcond, i5 %i_1, i5 %i

ST_2: StgValue_88 (178)  [1/1] 0.00ns  loc: matmul.cpp:31
.preheader7.preheader:128  br i1 %tmp_mid2, label %.preheader.preheader, label %.loopexit

ST_2: tmp_8 (180)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:0  %tmp_8 = zext i5 %j_mid2 to i64

ST_2: tmp_38 (185)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:5  %tmp_38 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 8, i5 %j_mid2)

ST_2: a_0_addr_16 (186)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:6  %a_0_addr_16 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_38

ST_2: a_1_addr (205)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:25  %a_1_addr = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_8

ST_2: a_0_load (224)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:44  %a_0_load = load i32* %a_0_addr_16, align 4

ST_2: a_1_load (248)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:68  %a_1_load = load i32* %a_1_addr, align 4


 <State 3>: 5.10ns
ST_3: tmp_8_cast3 (183)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:3  %tmp_8_cast3 = zext i5 %j_mid2 to i6

ST_3: tmp_8_cast (184)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:4  %tmp_8_cast = zext i5 %j_mid2 to i9

ST_3: tmp_39 (187)  [1/1] 1.79ns  loc: matmul.cpp:20
.preheader.preheader:7  %tmp_39 = add i9 %tmp_8_cast, -240

ST_3: tmp_40_cast (188)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:8  %tmp_40_cast = zext i9 %tmp_39 to i64

ST_3: a_0_addr_17 (189)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:9  %a_0_addr_17 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_40_cast

ST_3: tmp_46 (206)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:26  %tmp_46 = add i6 %tmp_8_cast3, 16

ST_3: tmp_47_cast (207)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:27  %tmp_47_cast = zext i6 %tmp_46 to i64

ST_3: a_1_addr_1 (208)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:28  %a_1_addr_1 = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_47_cast

ST_3: a_0_load (224)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:44  %a_0_load = load i32* %a_0_addr_16, align 4

ST_3: b_copy_0_addr (225)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:45  %b_copy_0_addr = getelementptr [16 x i32]* %b_copy_0, i64 0, i64 %tmp_8

ST_3: StgValue_105 (226)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:46  store i32 %a_0_load, i32* %b_copy_0_addr, align 4

ST_3: a_0_load_1 (227)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:47  %a_0_load_1 = load i32* %a_0_addr_17, align 4

ST_3: a_1_load (248)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:68  %a_1_load = load i32* %a_1_addr, align 4

ST_3: b_copy_8_addr (249)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:69  %b_copy_8_addr = getelementptr [16 x i32]* %b_copy_8, i64 0, i64 %tmp_8

ST_3: StgValue_109 (250)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:70  store i32 %a_1_load, i32* %b_copy_8_addr, align 4

ST_3: a_1_load_1 (251)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:71  %a_1_load_1 = load i32* %a_1_addr_1, align 4


 <State 4>: 5.10ns
ST_4: tmp_40 (190)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:10  %tmp_40 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 9, i5 %j_mid2)

ST_4: a_0_addr_18 (191)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:11  %a_0_addr_18 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_40

ST_4: tmp_47 (209)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:29  %tmp_47 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 1, i5 %j_mid2)

ST_4: a_1_addr_2 (210)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:30  %a_1_addr_2 = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_47

ST_4: a_0_load_1 (227)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:47  %a_0_load_1 = load i32* %a_0_addr_17, align 4

ST_4: b_copy_1_addr (228)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:48  %b_copy_1_addr = getelementptr [16 x i32]* %b_copy_1, i64 0, i64 %tmp_8

ST_4: StgValue_117 (229)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:49  store i32 %a_0_load_1, i32* %b_copy_1_addr, align 4

ST_4: a_0_load_2 (230)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:50  %a_0_load_2 = load i32* %a_0_addr_18, align 4

ST_4: a_1_load_1 (251)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:71  %a_1_load_1 = load i32* %a_1_addr_1, align 4

ST_4: b_copy_9_addr (252)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:72  %b_copy_9_addr = getelementptr [16 x i32]* %b_copy_9, i64 0, i64 %tmp_8

ST_4: StgValue_121 (253)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:73  store i32 %a_1_load_1, i32* %b_copy_9_addr, align 4

ST_4: a_1_load_2 (254)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:74  %a_1_load_2 = load i32* %a_1_addr_2, align 4


 <State 5>: 5.10ns
ST_5: tmp_8_cast2 (182)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:2  %tmp_8_cast2 = zext i5 %j_mid2 to i7

ST_5: tmp_41 (192)  [1/1] 1.79ns  loc: matmul.cpp:20
.preheader.preheader:12  %tmp_41 = add i9 %tmp_8_cast, -208

ST_5: tmp_42_cast (193)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:13  %tmp_42_cast = zext i9 %tmp_41 to i64

ST_5: a_0_addr_19 (194)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:14  %a_0_addr_19 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_42_cast

ST_5: tmp_48 (211)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:31  %tmp_48 = add i7 %tmp_8_cast2, 48

ST_5: tmp_49_cast (212)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:32  %tmp_49_cast = zext i7 %tmp_48 to i64

ST_5: a_1_addr_3 (213)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:33  %a_1_addr_3 = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_49_cast

ST_5: a_0_load_2 (230)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:50  %a_0_load_2 = load i32* %a_0_addr_18, align 4

ST_5: b_copy_2_addr (231)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:51  %b_copy_2_addr = getelementptr [16 x i32]* %b_copy_2, i64 0, i64 %tmp_8

ST_5: StgValue_132 (232)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:52  store i32 %a_0_load_2, i32* %b_copy_2_addr, align 4

ST_5: a_0_load_3 (233)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:53  %a_0_load_3 = load i32* %a_0_addr_19, align 4

ST_5: a_1_load_2 (254)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:74  %a_1_load_2 = load i32* %a_1_addr_2, align 4

ST_5: b_copy_10_addr (255)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:75  %b_copy_10_addr = getelementptr [16 x i32]* %b_copy_10, i64 0, i64 %tmp_8

ST_5: StgValue_136 (256)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:76  store i32 %a_1_load_2, i32* %b_copy_10_addr, align 4

ST_5: a_1_load_3 (257)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:77  %a_1_load_3 = load i32* %a_1_addr_3, align 4


 <State 6>: 5.10ns
ST_6: tmp_42 (195)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:15  %tmp_42 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 10, i5 %j_mid2)

ST_6: a_0_addr_20 (196)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:16  %a_0_addr_20 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_42

ST_6: tmp_49 (214)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:34  %tmp_49 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 2, i5 %j_mid2)

ST_6: a_1_addr_4 (215)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:35  %a_1_addr_4 = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_49

ST_6: a_0_load_3 (233)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:53  %a_0_load_3 = load i32* %a_0_addr_19, align 4

ST_6: b_copy_3_addr (234)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:54  %b_copy_3_addr = getelementptr [16 x i32]* %b_copy_3, i64 0, i64 %tmp_8

ST_6: StgValue_144 (235)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:55  store i32 %a_0_load_3, i32* %b_copy_3_addr, align 4

ST_6: a_0_load_4 (236)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:56  %a_0_load_4 = load i32* %a_0_addr_20, align 4

ST_6: a_1_load_3 (257)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:77  %a_1_load_3 = load i32* %a_1_addr_3, align 4

ST_6: b_copy_11_addr (258)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:78  %b_copy_11_addr = getelementptr [16 x i32]* %b_copy_11, i64 0, i64 %tmp_8

ST_6: StgValue_148 (259)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:79  store i32 %a_1_load_3, i32* %b_copy_11_addr, align 4

ST_6: a_1_load_4 (260)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:80  %a_1_load_4 = load i32* %a_1_addr_4, align 4


 <State 7>: 5.10ns
ST_7: tmp_43 (197)  [1/1] 1.79ns  loc: matmul.cpp:20
.preheader.preheader:17  %tmp_43 = add i9 %tmp_8_cast, -176

ST_7: tmp_44_cast (198)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:18  %tmp_44_cast = zext i9 %tmp_43 to i64

ST_7: a_0_addr_21 (199)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:19  %a_0_addr_21 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_44_cast

ST_7: tmp_50 (216)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:36  %tmp_50 = add i7 %tmp_8_cast2, -48

ST_7: tmp_51_cast (217)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:37  %tmp_51_cast = zext i7 %tmp_50 to i64

ST_7: a_1_addr_5 (218)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:38  %a_1_addr_5 = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_51_cast

ST_7: a_0_load_4 (236)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:56  %a_0_load_4 = load i32* %a_0_addr_20, align 4

ST_7: b_copy_4_addr (237)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:57  %b_copy_4_addr = getelementptr [16 x i32]* %b_copy_4, i64 0, i64 %tmp_8

ST_7: StgValue_158 (238)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:58  store i32 %a_0_load_4, i32* %b_copy_4_addr, align 4

ST_7: a_0_load_5 (239)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:59  %a_0_load_5 = load i32* %a_0_addr_21, align 4

ST_7: a_1_load_4 (260)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:80  %a_1_load_4 = load i32* %a_1_addr_4, align 4

ST_7: b_copy_12_addr (261)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:81  %b_copy_12_addr = getelementptr [16 x i32]* %b_copy_12, i64 0, i64 %tmp_8

ST_7: StgValue_162 (262)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:82  store i32 %a_1_load_4, i32* %b_copy_12_addr, align 4

ST_7: a_1_load_5 (263)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:83  %a_1_load_5 = load i32* %a_1_addr_5, align 4


 <State 8>: 5.10ns
ST_8: tmp_44 (200)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:20  %tmp_44 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 11, i5 %j_mid2)

ST_8: a_0_addr_22 (201)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:21  %a_0_addr_22 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_44

ST_8: tmp_51 (219)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:39  %tmp_51 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 3, i5 %j_mid2)

ST_8: a_1_addr_6 (220)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:40  %a_1_addr_6 = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_51

ST_8: a_0_load_5 (239)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:59  %a_0_load_5 = load i32* %a_0_addr_21, align 4

ST_8: b_copy_5_addr (240)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:60  %b_copy_5_addr = getelementptr [16 x i32]* %b_copy_5, i64 0, i64 %tmp_8

ST_8: StgValue_170 (241)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:61  store i32 %a_0_load_5, i32* %b_copy_5_addr, align 4

ST_8: a_0_load_6 (242)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:62  %a_0_load_6 = load i32* %a_0_addr_22, align 4

ST_8: a_1_load_5 (263)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:83  %a_1_load_5 = load i32* %a_1_addr_5, align 4

ST_8: b_copy_13_addr (264)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:84  %b_copy_13_addr = getelementptr [16 x i32]* %b_copy_13, i64 0, i64 %tmp_8

ST_8: StgValue_174 (265)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:85  store i32 %a_1_load_5, i32* %b_copy_13_addr, align 4

ST_8: a_1_load_6 (266)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:86  %a_1_load_6 = load i32* %a_1_addr_6, align 4


 <State 9>: 5.10ns
ST_9: tmp_8_cast1 (181)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:1  %tmp_8_cast1 = zext i5 %j_mid2 to i8

ST_9: tmp_45 (202)  [1/1] 1.79ns  loc: matmul.cpp:20
.preheader.preheader:22  %tmp_45 = add i9 %tmp_8_cast, -144

ST_9: tmp_46_cast (203)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:23  %tmp_46_cast = zext i9 %tmp_45 to i64

ST_9: a_0_addr_23 (204)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:24  %a_0_addr_23 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_46_cast

ST_9: tmp_52 (221)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:41  %tmp_52 = add i8 %tmp_8_cast1, 112

ST_9: tmp_53_cast (222)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:42  %tmp_53_cast = zext i8 %tmp_52 to i64

ST_9: a_1_addr_7 (223)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:43  %a_1_addr_7 = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_53_cast

ST_9: a_0_load_6 (242)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:62  %a_0_load_6 = load i32* %a_0_addr_22, align 4

ST_9: b_copy_6_addr (243)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:63  %b_copy_6_addr = getelementptr [16 x i32]* %b_copy_6, i64 0, i64 %tmp_8

ST_9: StgValue_185 (244)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:64  store i32 %a_0_load_6, i32* %b_copy_6_addr, align 4

ST_9: a_0_load_7 (245)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:65  %a_0_load_7 = load i32* %a_0_addr_23, align 4

ST_9: a_1_load_6 (266)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:86  %a_1_load_6 = load i32* %a_1_addr_6, align 4

ST_9: b_copy_14_addr (267)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:87  %b_copy_14_addr = getelementptr [16 x i32]* %b_copy_14, i64 0, i64 %tmp_8

ST_9: StgValue_189 (268)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:88  store i32 %a_1_load_6, i32* %b_copy_14_addr, align 4

ST_9: a_1_load_7 (269)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:89  %a_1_load_7 = load i32* %a_1_addr_7, align 4


 <State 10>: 5.10ns
ST_10: tmp_1 (75)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:25  %tmp_1 = call i9 @_ssdm_op_BitConcatenate.i9.i5.i4(i5 %i2_mid2_v, i4 0)

ST_10: tmp_3 (76)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:26  %tmp_3 = zext i9 %tmp_1 to i64

ST_10: a_0_addr (77)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:27  %a_0_addr = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_3

ST_10: a_row_0 (130)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:80  %a_row_0 = load i32* %a_0_addr, align 4

ST_10: a_0_load_7 (245)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:65  %a_0_load_7 = load i32* %a_0_addr_23, align 4

ST_10: b_copy_7_addr (246)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:66  %b_copy_7_addr = getelementptr [16 x i32]* %b_copy_7, i64 0, i64 %tmp_8

ST_10: StgValue_197 (247)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:67  store i32 %a_0_load_7, i32* %b_copy_7_addr, align 4

ST_10: a_1_load_7 (269)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:89  %a_1_load_7 = load i32* %a_1_addr_7, align 4

ST_10: b_copy_15_addr (270)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:90  %b_copy_15_addr = getelementptr [16 x i32]* %b_copy_15, i64 0, i64 %tmp_8

ST_10: StgValue_200 (271)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:91  store i32 %a_1_load_7, i32* %b_copy_15_addr, align 4

ST_10: StgValue_201 (272)  [1/1] 0.00ns
.preheader.preheader:92  br label %.loopexit

ST_10: tmp_7 (274)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:0  %tmp_7 = zext i5 %j_mid2 to i64

ST_10: b_copy_0_addr_1 (279)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:5  %b_copy_0_addr_1 = getelementptr [16 x i32]* %b_copy_0, i64 0, i64 %tmp_7

ST_10: b_copy_0_load (280)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:6  %b_copy_0_load = load i32* %b_copy_0_addr_1, align 4


 <State 11>: 2.71ns
ST_11: tmp_4 (78)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:28  %tmp_4 = or i9 %tmp_1, 1

ST_11: tmp_6 (79)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:29  %tmp_6 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_4)

ST_11: a_0_addr_1 (80)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:30  %a_0_addr_1 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_6

ST_11: tmp_5 (129)  [1/1] 2.37ns  loc: matmul.cpp:25
.preheader7.preheader:79  %tmp_5 = icmp eq i5 %j_mid2, 0

ST_11: a_row_0 (130)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:80  %a_row_0 = load i32* %a_0_addr, align 4

ST_11: a_row_1 (131)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:81  %a_row_1 = load i32* %a_0_addr_1, align 4

ST_11: b_copy_0_load (280)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:6  %b_copy_0_load = load i32* %b_copy_0_addr_1, align 4

ST_11: b_copy_1_addr_1 (282)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:8  %b_copy_1_addr_1 = getelementptr [16 x i32]* %b_copy_1, i64 0, i64 %tmp_7

ST_11: b_copy_1_load (283)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:9  %b_copy_1_load = load i32* %b_copy_1_addr_1, align 4


 <State 12>: 8.05ns
ST_12: a_row_0_2_load (50)  [1/1] 0.00ns
.preheader7.preheader:0  %a_row_0_2_load = load i32* %a_row_0_2

ST_12: tmp_9 (81)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:31  %tmp_9 = or i9 %tmp_1, 2

ST_12: tmp_10 (82)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:32  %tmp_10 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_9)

ST_12: a_0_addr_2 (83)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:33  %a_0_addr_2 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_10

ST_12: a_row_1 (131)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:81  %a_row_1 = load i32* %a_0_addr_1, align 4

ST_12: a_row_2 (132)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:82  %a_row_2 = load i32* %a_0_addr_2, align 4

ST_12: a_row_0_1 (161)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:111  %a_row_0_1 = select i1 %tmp_5, i32 %a_row_0, i32 %a_row_0_2_load

ST_12: StgValue_221 (177)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:127  store i32 %a_row_0_1, i32* %a_row_0_2

ST_12: tmp_s (281)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_12: b_copy_1_load (283)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:9  %b_copy_1_load = load i32* %b_copy_1_addr_1, align 4

ST_12: b_copy_2_addr_1 (285)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:11  %b_copy_2_addr_1 = getelementptr [16 x i32]* %b_copy_2, i64 0, i64 %tmp_7

ST_12: b_copy_2_load (286)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:12  %b_copy_2_load = load i32* %b_copy_2_addr_1, align 4


 <State 13>: 8.05ns
ST_13: a_row_1_2_load (51)  [1/1] 0.00ns
.preheader7.preheader:1  %a_row_1_2_load = load i32* %a_row_1_2

ST_13: tmp_11 (84)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:34  %tmp_11 = or i9 %tmp_1, 3

ST_13: tmp_12 (85)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:35  %tmp_12 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_11)

ST_13: a_0_addr_3 (86)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:36  %a_0_addr_3 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_12

ST_13: a_row_2 (132)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:82  %a_row_2 = load i32* %a_0_addr_2, align 4

ST_13: a_row_3 (133)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:83  %a_row_3 = load i32* %a_0_addr_3, align 4

ST_13: a_row_1_1 (160)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:110  %a_row_1_1 = select i1 %tmp_5, i32 %a_row_1, i32 %a_row_1_2_load

ST_13: StgValue_233 (176)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:126  store i32 %a_row_1_1, i32* %a_row_1_2

ST_13: tmp_s (281)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_13: tmp_11_1 (284)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_13: b_copy_2_load (286)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:12  %b_copy_2_load = load i32* %b_copy_2_addr_1, align 4

ST_13: b_copy_3_addr_1 (288)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:14  %b_copy_3_addr_1 = getelementptr [16 x i32]* %b_copy_3, i64 0, i64 %tmp_7

ST_13: b_copy_3_load (289)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:15  %b_copy_3_load = load i32* %b_copy_3_addr_1, align 4


 <State 14>: 8.05ns
ST_14: a_row_2_2_load (52)  [1/1] 0.00ns
.preheader7.preheader:2  %a_row_2_2_load = load i32* %a_row_2_2

ST_14: tmp_13 (87)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:37  %tmp_13 = or i9 %tmp_1, 4

ST_14: tmp_14 (88)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:38  %tmp_14 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_13)

ST_14: a_0_addr_4 (89)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:39  %a_0_addr_4 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_14

ST_14: a_row_3 (133)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:83  %a_row_3 = load i32* %a_0_addr_3, align 4

ST_14: a_row_4 (134)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:84  %a_row_4 = load i32* %a_0_addr_4, align 4

ST_14: a_row_2_1 (159)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:109  %a_row_2_1 = select i1 %tmp_5, i32 %a_row_2, i32 %a_row_2_2_load

ST_14: StgValue_246 (175)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:125  store i32 %a_row_2_1, i32* %a_row_2_2

ST_14: tmp_s (281)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_14: tmp_11_1 (284)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_14: tmp_11_2 (287)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_14: b_copy_3_load (289)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:15  %b_copy_3_load = load i32* %b_copy_3_addr_1, align 4

ST_14: b_copy_4_addr_1 (291)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:17  %b_copy_4_addr_1 = getelementptr [16 x i32]* %b_copy_4, i64 0, i64 %tmp_7

ST_14: b_copy_4_load (292)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:18  %b_copy_4_load = load i32* %b_copy_4_addr_1, align 4


 <State 15>: 8.05ns
ST_15: a_row_3_2_load (53)  [1/1] 0.00ns
.preheader7.preheader:3  %a_row_3_2_load = load i32* %a_row_3_2

ST_15: tmp_15 (90)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:40  %tmp_15 = or i9 %tmp_1, 5

ST_15: tmp_16 (91)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:41  %tmp_16 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_15)

ST_15: a_0_addr_5 (92)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:42  %a_0_addr_5 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_16

ST_15: a_row_4 (134)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:84  %a_row_4 = load i32* %a_0_addr_4, align 4

ST_15: a_row_5 (135)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:85  %a_row_5 = load i32* %a_0_addr_5, align 4

ST_15: a_row_3_1 (158)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:108  %a_row_3_1 = select i1 %tmp_5, i32 %a_row_3, i32 %a_row_3_2_load

ST_15: StgValue_260 (174)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:124  store i32 %a_row_3_1, i32* %a_row_3_2

ST_15: tmp_s (281)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_15: tmp_11_1 (284)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_15: tmp_11_2 (287)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_15: tmp_11_3 (290)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_15: b_copy_4_load (292)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:18  %b_copy_4_load = load i32* %b_copy_4_addr_1, align 4

ST_15: b_copy_5_addr_1 (294)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:20  %b_copy_5_addr_1 = getelementptr [16 x i32]* %b_copy_5, i64 0, i64 %tmp_7

ST_15: b_copy_5_load (295)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:21  %b_copy_5_load = load i32* %b_copy_5_addr_1, align 4


 <State 16>: 8.05ns
ST_16: a_row_4_2_load (54)  [1/1] 0.00ns
.preheader7.preheader:4  %a_row_4_2_load = load i32* %a_row_4_2

ST_16: tmp_17 (93)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:43  %tmp_17 = or i9 %tmp_1, 6

ST_16: tmp_18 (94)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:44  %tmp_18 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_17)

ST_16: a_0_addr_6 (95)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:45  %a_0_addr_6 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_18

ST_16: a_row_5 (135)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:85  %a_row_5 = load i32* %a_0_addr_5, align 4

ST_16: a_row_6 (136)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:86  %a_row_6 = load i32* %a_0_addr_6, align 4

ST_16: a_row_4_1 (157)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:107  %a_row_4_1 = select i1 %tmp_5, i32 %a_row_4, i32 %a_row_4_2_load

ST_16: StgValue_275 (173)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:123  store i32 %a_row_4_1, i32* %a_row_4_2

ST_16: tmp_s (281)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_16: tmp_11_1 (284)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_16: tmp_11_2 (287)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_16: tmp_11_3 (290)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_16: tmp_11_4 (293)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_16: b_copy_5_load (295)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:21  %b_copy_5_load = load i32* %b_copy_5_addr_1, align 4

ST_16: b_copy_6_addr_1 (297)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:23  %b_copy_6_addr_1 = getelementptr [16 x i32]* %b_copy_6, i64 0, i64 %tmp_7

ST_16: b_copy_6_load (298)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:24  %b_copy_6_load = load i32* %b_copy_6_addr_1, align 4


 <State 17>: 8.05ns
ST_17: a_row_5_2_load (55)  [1/1] 0.00ns
.preheader7.preheader:5  %a_row_5_2_load = load i32* %a_row_5_2

ST_17: tmp_19 (96)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:46  %tmp_19 = or i9 %tmp_1, 7

ST_17: tmp_20 (97)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:47  %tmp_20 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_19)

ST_17: a_0_addr_7 (98)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:48  %a_0_addr_7 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_20

ST_17: newIndex1_mid2_v_v (123)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:73  %newIndex1_mid2_v_v = call i6 @_ssdm_op_BitConcatenate.i6.i1.i5(i1 true, i5 %i2_mid2_v)

ST_17: newIndex1_mid2_v (124)  [10/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_17: a_row_6 (136)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:86  %a_row_6 = load i32* %a_0_addr_6, align 4

ST_17: a_row_7 (137)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:87  %a_row_7 = load i32* %a_0_addr_7, align 4

ST_17: a_row_5_1 (156)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:106  %a_row_5_1 = select i1 %tmp_5, i32 %a_row_5, i32 %a_row_5_2_load

ST_17: StgValue_293 (172)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:122  store i32 %a_row_5_1, i32* %a_row_5_2

ST_17: tmp_s (281)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_17: tmp_11_1 (284)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_17: tmp_11_2 (287)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_17: tmp_11_3 (290)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_17: tmp_11_4 (293)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_17: tmp_11_5 (296)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_17: b_copy_6_load (298)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:24  %b_copy_6_load = load i32* %b_copy_6_addr_1, align 4

ST_17: b_copy_7_addr_1 (300)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:26  %b_copy_7_addr_1 = getelementptr [16 x i32]* %b_copy_7, i64 0, i64 %tmp_7

ST_17: b_copy_7_load (301)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:27  %b_copy_7_load = load i32* %b_copy_7_addr_1, align 4


 <State 18>: 8.05ns
ST_18: a_row_6_2_load (56)  [1/1] 0.00ns
.preheader7.preheader:6  %a_row_6_2_load = load i32* %a_row_6_2

ST_18: tmp_21 (99)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:49  %tmp_21 = or i9 %tmp_1, 8

ST_18: tmp_22 (100)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:50  %tmp_22 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_21)

ST_18: a_0_addr_8 (101)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:51  %a_0_addr_8 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_22

ST_18: newIndex1_mid2_v (124)  [9/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_18: a_row_7 (137)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:87  %a_row_7 = load i32* %a_0_addr_7, align 4

ST_18: a_row_8 (138)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:88  %a_row_8 = load i32* %a_0_addr_8, align 4

ST_18: a_row_6_1 (155)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:105  %a_row_6_1 = select i1 %tmp_5, i32 %a_row_6, i32 %a_row_6_2_load

ST_18: StgValue_311 (171)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:121  store i32 %a_row_6_1, i32* %a_row_6_2

ST_18: tmp_11_1 (284)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_18: tmp_11_2 (287)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_18: tmp_11_3 (290)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_18: tmp_11_4 (293)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_18: tmp_11_5 (296)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_18: tmp_11_6 (299)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_18: b_copy_7_load (301)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:27  %b_copy_7_load = load i32* %b_copy_7_addr_1, align 4

ST_18: b_copy_8_addr_1 (303)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:29  %b_copy_8_addr_1 = getelementptr [16 x i32]* %b_copy_8, i64 0, i64 %tmp_7

ST_18: b_copy_8_load (304)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:30  %b_copy_8_load = load i32* %b_copy_8_addr_1, align 4


 <State 19>: 8.05ns
ST_19: a_row_7_2_load (57)  [1/1] 0.00ns
.preheader7.preheader:7  %a_row_7_2_load = load i32* %a_row_7_2

ST_19: tmp_23 (102)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:52  %tmp_23 = or i9 %tmp_1, 9

ST_19: tmp_24 (103)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:53  %tmp_24 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_23)

ST_19: a_0_addr_9 (104)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:54  %a_0_addr_9 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_24

ST_19: newIndex1_mid2_v (124)  [8/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_19: a_row_8 (138)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:88  %a_row_8 = load i32* %a_0_addr_8, align 4

ST_19: a_row_9 (139)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:89  %a_row_9 = load i32* %a_0_addr_9, align 4

ST_19: a_row_7_1 (154)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:104  %a_row_7_1 = select i1 %tmp_5, i32 %a_row_7, i32 %a_row_7_2_load

ST_19: StgValue_329 (170)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:120  store i32 %a_row_7_1, i32* %a_row_7_2

ST_19: tmp_11_2 (287)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_19: tmp_11_3 (290)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_19: tmp_11_4 (293)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_19: tmp_11_5 (296)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_19: tmp_11_6 (299)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_19: tmp_11_7 (302)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_19: b_copy_8_load (304)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:30  %b_copy_8_load = load i32* %b_copy_8_addr_1, align 4

ST_19: b_copy_9_addr_1 (306)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:32  %b_copy_9_addr_1 = getelementptr [16 x i32]* %b_copy_9, i64 0, i64 %tmp_7

ST_19: b_copy_9_load (307)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:33  %b_copy_9_load = load i32* %b_copy_9_addr_1, align 4

ST_19: tmp3 (327)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:53  %tmp3 = add i32 %tmp_11_1, %tmp_s


 <State 20>: 8.05ns
ST_20: a_row_8_2_load (58)  [1/1] 0.00ns
.preheader7.preheader:8  %a_row_8_2_load = load i32* %a_row_8_2

ST_20: tmp_25 (105)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:55  %tmp_25 = or i9 %tmp_1, 10

ST_20: tmp_26 (106)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:56  %tmp_26 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_25)

ST_20: a_0_addr_10 (107)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:57  %a_0_addr_10 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_26

ST_20: newIndex1_mid2_v (124)  [7/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_20: a_row_9 (139)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:89  %a_row_9 = load i32* %a_0_addr_9, align 4

ST_20: a_row_10 (140)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:90  %a_row_10 = load i32* %a_0_addr_10, align 4

ST_20: a_row_8_1 (153)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:103  %a_row_8_1 = select i1 %tmp_5, i32 %a_row_8, i32 %a_row_8_2_load

ST_20: StgValue_348 (169)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:119  store i32 %a_row_8_1, i32* %a_row_8_2

ST_20: tmp_11_3 (290)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_20: tmp_11_4 (293)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_20: tmp_11_5 (296)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_20: tmp_11_6 (299)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_20: tmp_11_7 (302)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_20: tmp_11_8 (305)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_20: b_copy_9_load (307)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:33  %b_copy_9_load = load i32* %b_copy_9_addr_1, align 4

ST_20: b_copy_10_addr_1 (309)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:35  %b_copy_10_addr_1 = getelementptr [16 x i32]* %b_copy_10, i64 0, i64 %tmp_7

ST_20: b_copy_10_load (310)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:36  %b_copy_10_load = load i32* %b_copy_10_addr_1, align 4


 <State 21>: 8.05ns
ST_21: a_row_9_2_load (59)  [1/1] 0.00ns
.preheader7.preheader:9  %a_row_9_2_load = load i32* %a_row_9_2

ST_21: tmp_27 (108)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:58  %tmp_27 = or i9 %tmp_1, 11

ST_21: tmp_28 (109)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:59  %tmp_28 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_27)

ST_21: a_0_addr_11 (110)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:60  %a_0_addr_11 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_28

ST_21: newIndex1_mid2_v (124)  [6/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_21: a_row_10 (140)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:90  %a_row_10 = load i32* %a_0_addr_10, align 4

ST_21: a_row_11 (141)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:91  %a_row_11 = load i32* %a_0_addr_11, align 4

ST_21: a_row_9_1 (152)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:102  %a_row_9_1 = select i1 %tmp_5, i32 %a_row_9, i32 %a_row_9_2_load

ST_21: StgValue_366 (168)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:118  store i32 %a_row_9_1, i32* %a_row_9_2

ST_21: tmp_11_4 (293)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_21: tmp_11_5 (296)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_21: tmp_11_6 (299)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_21: tmp_11_7 (302)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_21: tmp_11_8 (305)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_21: tmp_11_9 (308)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_21: b_copy_10_load (310)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:36  %b_copy_10_load = load i32* %b_copy_10_addr_1, align 4

ST_21: b_copy_11_addr_1 (312)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:38  %b_copy_11_addr_1 = getelementptr [16 x i32]* %b_copy_11, i64 0, i64 %tmp_7

ST_21: b_copy_11_load (313)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:39  %b_copy_11_load = load i32* %b_copy_11_addr_1, align 4

ST_21: tmp4 (328)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:54  %tmp4 = add i32 %tmp_11_3, %tmp_11_2

ST_21: tmp2 (329)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:55  %tmp2 = add i32 %tmp3, %tmp4


 <State 22>: 8.05ns
ST_22: a_row_10_2_load (60)  [1/1] 0.00ns
.preheader7.preheader:10  %a_row_10_2_load = load i32* %a_row_10_2

ST_22: tmp_29 (111)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:61  %tmp_29 = or i9 %tmp_1, 12

ST_22: tmp_30 (112)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:62  %tmp_30 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_29)

ST_22: a_0_addr_12 (113)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:63  %a_0_addr_12 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_30

ST_22: newIndex1_mid2_v (124)  [5/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_22: a_row_11 (141)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:91  %a_row_11 = load i32* %a_0_addr_11, align 4

ST_22: a_row_12 (142)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:92  %a_row_12 = load i32* %a_0_addr_12, align 4

ST_22: a_row_10_1 (151)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:101  %a_row_10_1 = select i1 %tmp_5, i32 %a_row_10, i32 %a_row_10_2_load

ST_22: StgValue_386 (167)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:117  store i32 %a_row_10_1, i32* %a_row_10_2

ST_22: tmp_11_5 (296)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_22: tmp_11_6 (299)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_22: tmp_11_7 (302)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_22: tmp_11_8 (305)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_22: tmp_11_9 (308)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_22: tmp_11_s (311)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_22: b_copy_11_load (313)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:39  %b_copy_11_load = load i32* %b_copy_11_addr_1, align 4

ST_22: b_copy_12_addr_1 (315)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:41  %b_copy_12_addr_1 = getelementptr [16 x i32]* %b_copy_12, i64 0, i64 %tmp_7

ST_22: b_copy_12_load (316)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:42  %b_copy_12_load = load i32* %b_copy_12_addr_1, align 4


 <State 23>: 8.05ns
ST_23: a_row_11_2_load (61)  [1/1] 0.00ns
.preheader7.preheader:11  %a_row_11_2_load = load i32* %a_row_11_2

ST_23: tmp_31 (114)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:64  %tmp_31 = or i9 %tmp_1, 13

ST_23: tmp_32 (115)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:65  %tmp_32 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_31)

ST_23: a_0_addr_13 (116)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:66  %a_0_addr_13 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_32

ST_23: newIndex1_mid2_v (124)  [4/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_23: a_row_12 (142)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:92  %a_row_12 = load i32* %a_0_addr_12, align 4

ST_23: a_row_13 (143)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:93  %a_row_13 = load i32* %a_0_addr_13, align 4

ST_23: a_row_11_1 (150)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:100  %a_row_11_1 = select i1 %tmp_5, i32 %a_row_11, i32 %a_row_11_2_load

ST_23: StgValue_404 (166)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:116  store i32 %a_row_11_1, i32* %a_row_11_2

ST_23: tmp_11_6 (299)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_23: tmp_11_7 (302)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_23: tmp_11_8 (305)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_23: tmp_11_9 (308)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_23: tmp_11_s (311)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_23: tmp_11_10 (314)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_23: b_copy_12_load (316)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:42  %b_copy_12_load = load i32* %b_copy_12_addr_1, align 4

ST_23: b_copy_13_addr_1 (318)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:44  %b_copy_13_addr_1 = getelementptr [16 x i32]* %b_copy_13, i64 0, i64 %tmp_7

ST_23: b_copy_13_load (319)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:45  %b_copy_13_load = load i32* %b_copy_13_addr_1, align 4

ST_23: tmp6 (330)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:56  %tmp6 = add i32 %tmp_11_5, %tmp_11_4


 <State 24>: 8.05ns
ST_24: a_row_12_2_load (62)  [1/1] 0.00ns
.preheader7.preheader:12  %a_row_12_2_load = load i32* %a_row_12_2

ST_24: tmp_33 (117)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:67  %tmp_33 = or i9 %tmp_1, 14

ST_24: tmp_34 (118)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:68  %tmp_34 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_33)

ST_24: a_0_addr_14 (119)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:69  %a_0_addr_14 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_34

ST_24: newIndex1_mid2_v (124)  [3/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_24: a_row_13 (143)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:93  %a_row_13 = load i32* %a_0_addr_13, align 4

ST_24: a_row_14 (144)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:94  %a_row_14 = load i32* %a_0_addr_14, align 4

ST_24: a_row_12_1 (149)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:99  %a_row_12_1 = select i1 %tmp_5, i32 %a_row_12, i32 %a_row_12_2_load

ST_24: StgValue_423 (165)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:115  store i32 %a_row_12_1, i32* %a_row_12_2

ST_24: tmp_11_7 (302)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_24: tmp_11_8 (305)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_24: tmp_11_9 (308)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_24: tmp_11_s (311)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_24: tmp_11_10 (314)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_24: tmp_11_11 (317)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_24: b_copy_13_load (319)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:45  %b_copy_13_load = load i32* %b_copy_13_addr_1, align 4

ST_24: b_copy_14_addr_1 (321)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:47  %b_copy_14_addr_1 = getelementptr [16 x i32]* %b_copy_14, i64 0, i64 %tmp_7

ST_24: b_copy_14_load (322)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:48  %b_copy_14_load = load i32* %b_copy_14_addr_1, align 4

ST_24: b_copy_15_addr_1 (324)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:50  %b_copy_15_addr_1 = getelementptr [16 x i32]* %b_copy_15, i64 0, i64 %tmp_7

ST_24: b_copy_15_load (325)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:51  %b_copy_15_load = load i32* %b_copy_15_addr_1, align 4


 <State 25>: 8.05ns
ST_25: a_row_13_2_load (63)  [1/1] 0.00ns
.preheader7.preheader:13  %a_row_13_2_load = load i32* %a_row_13_2

ST_25: tmp_35 (120)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:70  %tmp_35 = or i9 %tmp_1, 15

ST_25: tmp_36 (121)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:71  %tmp_36 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_35)

ST_25: a_0_addr_15 (122)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:72  %a_0_addr_15 = getelementptr [384 x i32]* %a_0, i64 0, i64 %tmp_36

ST_25: newIndex1_mid2_v (124)  [2/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_25: a_row_14 (144)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:94  %a_row_14 = load i32* %a_0_addr_14, align 4

ST_25: a_row_15 (145)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:95  %a_row_15 = load i32* %a_0_addr_15, align 4

ST_25: a_row_13_1 (148)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:98  %a_row_13_1 = select i1 %tmp_5, i32 %a_row_13, i32 %a_row_13_2_load

ST_25: StgValue_443 (164)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:114  store i32 %a_row_13_1, i32* %a_row_13_2

ST_25: tmp_11_8 (305)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_25: tmp_11_9 (308)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_25: tmp_11_s (311)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_25: tmp_11_10 (314)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_25: tmp_11_11 (317)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_25: tmp_11_12 (320)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_25: b_copy_14_load (322)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:48  %b_copy_14_load = load i32* %b_copy_14_addr_1, align 4

ST_25: b_copy_15_load (325)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:51  %b_copy_15_load = load i32* %b_copy_15_addr_1, align 4

ST_25: tmp7 (331)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:57  %tmp7 = add i32 %tmp_11_7, %tmp_11_6

ST_25: tmp5 (332)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:58  %tmp5 = add i32 %tmp6, %tmp7

ST_25: tmp1 (333)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:59  %tmp1 = add i32 %tmp2, %tmp5

ST_25: j_1 (344)  [1/1] 1.67ns  loc: matmul.cpp:20
.loopexit:70  %j_1 = add i5 %j_mid2, 1


 <State 26>: 8.05ns
ST_26: a_row_14_2_load (64)  [1/1] 0.00ns
.preheader7.preheader:14  %a_row_14_2_load = load i32* %a_row_14_2

ST_26: a_row_15_2_load (65)  [1/1] 0.00ns
.preheader7.preheader:15  %a_row_15_2_load = load i32* %a_row_15_2

ST_26: StgValue_458 (67)  [1/1] 0.00ns
.preheader7.preheader:17  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @L_col_str)

ST_26: empty_3 (68)  [1/1] 0.00ns
.preheader7.preheader:18  %empty_3 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)

ST_26: newIndex1_mid2_v (124)  [1/10] 3.82ns  loc: matmul.cpp:20
.preheader7.preheader:74  %newIndex1_mid2_v = urem i6 %newIndex1_mid2_v_v, 24

ST_26: tmp_37 (125)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:75  %tmp_37 = call i10 @_ssdm_op_BitConcatenate.i10.i6.i4(i6 %newIndex1_mid2_v, i4 0)

ST_26: StgValue_462 (126)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:76  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str5) nounwind

ST_26: tmp_2 (127)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:77  %tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str5) nounwind

ST_26: StgValue_464 (128)  [1/1] 0.00ns  loc: matmul.cpp:21
.preheader7.preheader:78  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_26: a_row_15 (145)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:95  %a_row_15 = load i32* %a_0_addr_15, align 4

ST_26: a_row_15_1 (146)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:96  %a_row_15_1 = select i1 %tmp_5, i32 %a_row_15, i32 %a_row_15_2_load

ST_26: a_row_14_1 (147)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:97  %a_row_14_1 = select i1 %tmp_5, i32 %a_row_14, i32 %a_row_14_2_load

ST_26: StgValue_468 (162)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:112  store i32 %a_row_15_1, i32* %a_row_15_2

ST_26: StgValue_469 (163)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:113  store i32 %a_row_14_1, i32* %a_row_14_2

ST_26: tmp_7_cast (275)  [1/1] 0.00ns  loc: matmul.cpp:41
.loopexit:1  %tmp_7_cast = zext i5 %j_mid2 to i10

ST_26: tmp_53 (276)  [1/1] 1.79ns  loc: matmul.cpp:41
.loopexit:2  %tmp_53 = add i10 %tmp_37, %tmp_7_cast

ST_26: tmp_11_9 (308)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_26: tmp_11_s (311)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_26: tmp_11_10 (314)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_26: tmp_11_11 (317)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_26: tmp_11_12 (320)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_26: tmp_11_13 (323)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load


 <State 27>: 6.68ns
ST_27: tmp_11_s (311)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_27: tmp_11_10 (314)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_27: tmp_11_11 (317)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_27: tmp_11_12 (320)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_27: tmp_11_13 (323)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_27: tmp_11_14 (326)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_27: tmp10 (334)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:60  %tmp10 = add i32 %tmp_11_9, %tmp_11_8


 <State 28>: 6.68ns
ST_28: tmp_11_10 (314)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_28: tmp_11_11 (317)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_28: tmp_11_12 (320)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_28: tmp_11_13 (323)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_28: tmp_11_14 (326)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 29>: 6.68ns
ST_29: tmp_11_11 (317)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_29: tmp_11_12 (320)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_29: tmp_11_13 (323)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_29: tmp_11_14 (326)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_29: tmp11 (335)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:61  %tmp11 = add i32 %tmp_11_10, %tmp_11_s

ST_29: tmp9 (336)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:62  %tmp9 = add i32 %tmp10, %tmp11


 <State 30>: 6.68ns
ST_30: tmp_11_12 (320)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_30: tmp_11_13 (323)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_30: tmp_11_14 (326)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 31>: 6.68ns
ST_31: tmp_11_13 (323)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_31: tmp_11_14 (326)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_31: tmp13 (337)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:63  %tmp13 = add i32 %tmp_11_12, %tmp_11_11


 <State 32>: 6.68ns
ST_32: tmp_11_14 (326)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 33>: 7.68ns
ST_33: tmp14 (338)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:64  %tmp14 = add i32 %tmp_11_14, %tmp_11_13

ST_33: tmp12 (339)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:65  %tmp12 = add i32 %tmp13, %tmp14

ST_33: tmp8 (340)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:66  %tmp8 = add i32 %tmp9, %tmp12

ST_33: tmp_12_s (341)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:67  %tmp_12_s = add nsw i32 %tmp1, %tmp8


 <State 34>: 2.71ns
ST_34: tmp_54_cast (277)  [1/1] 0.00ns  loc: matmul.cpp:41
.loopexit:3  %tmp_54_cast = zext i10 %tmp_53 to i64

ST_34: a_1_addr_8 (278)  [1/1] 0.00ns  loc: matmul.cpp:41
.loopexit:4  %a_1_addr_8 = getelementptr [384 x i32]* %a_1, i64 0, i64 %tmp_54_cast

ST_34: StgValue_509 (342)  [1/1] 2.71ns  loc: matmul.cpp:41
.loopexit:68  store i32 %tmp_12_s, i32* %a_1_addr_8, align 4

ST_34: empty (343)  [1/1] 0.00ns  loc: matmul.cpp:42
.loopexit:69  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str5, i32 %tmp_2) nounwind

ST_34: StgValue_511 (345)  [1/1] 0.00ns  loc: matmul.cpp:20
.loopexit:71  br label %.preheader7


 <State 35>: 0.00ns
ST_35: StgValue_512 (347)  [1/1] 0.00ns  loc: matmul.cpp:44
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.57ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten') with incoming values : ('indvar_flatten_next') [43]  (1.57 ns)

 <State 2>: 6.45ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', matmul.cpp:20) [45]  (0 ns)
	'icmp' operation ('exitcond', matmul.cpp:20) [69]  (2.37 ns)
	'select' operation ('j_mid2', matmul.cpp:20) [70]  (1.37 ns)
	'getelementptr' operation ('a_0_addr_16', matmul.cpp:20) [186]  (0 ns)
	'load' operation ('a_0_load', matmul.cpp:33) on array 'a_0' [224]  (2.71 ns)

 <State 3>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_0_load', matmul.cpp:33) on array 'a_0' [224]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_0_load', matmul.cpp:33 on array 'b_copy[0]', matmul.cpp:14 [226]  (2.39 ns)

 <State 4>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_0_load_1', matmul.cpp:33) on array 'a_0' [227]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_0_load_1', matmul.cpp:33 on array 'b_copy[1]', matmul.cpp:14 [229]  (2.39 ns)

 <State 5>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_0_load_2', matmul.cpp:33) on array 'a_0' [230]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_0_load_2', matmul.cpp:33 on array 'b_copy[2]', matmul.cpp:14 [232]  (2.39 ns)

 <State 6>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_0_load_3', matmul.cpp:33) on array 'a_0' [233]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_0_load_3', matmul.cpp:33 on array 'b_copy[3]', matmul.cpp:14 [235]  (2.39 ns)

 <State 7>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_0_load_4', matmul.cpp:33) on array 'a_0' [236]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_0_load_4', matmul.cpp:33 on array 'b_copy[4]', matmul.cpp:14 [238]  (2.39 ns)

 <State 8>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_0_load_5', matmul.cpp:33) on array 'a_0' [239]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_0_load_5', matmul.cpp:33 on array 'b_copy[5]', matmul.cpp:14 [241]  (2.39 ns)

 <State 9>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_0_load_6', matmul.cpp:33) on array 'a_0' [242]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_0_load_6', matmul.cpp:33 on array 'b_copy[6]', matmul.cpp:14 [244]  (2.39 ns)

 <State 10>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_0_load_7', matmul.cpp:33) on array 'a_0' [245]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_0_load_7', matmul.cpp:33 on array 'b_copy[7]', matmul.cpp:14 [247]  (2.39 ns)

 <State 11>: 2.71ns
The critical path consists of the following:
	'or' operation ('tmp_4', matmul.cpp:20) [78]  (0 ns)
	'getelementptr' operation ('a_0_addr_1', matmul.cpp:20) [80]  (0 ns)
	'load' operation ('a_row[1]', matmul.cpp:27) on array 'a_0' [131]  (2.71 ns)

 <State 12>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_0_2_load') on local variable 'a_row[0]' [50]  (0 ns)
	'select' operation ('a_row[0]', matmul.cpp:25) [161]  (1.37 ns)
	'mul' operation ('tmp_s', matmul.cpp:38) [281]  (6.68 ns)

 <State 13>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_1_2_load') on local variable 'a_row[1]' [51]  (0 ns)
	'select' operation ('a_row[1]', matmul.cpp:25) [160]  (1.37 ns)
	'mul' operation ('tmp_11_1', matmul.cpp:38) [284]  (6.68 ns)

 <State 14>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_2_2_load') on local variable 'a_row[2]' [52]  (0 ns)
	'select' operation ('a_row[2]', matmul.cpp:25) [159]  (1.37 ns)
	'mul' operation ('tmp_11_2', matmul.cpp:38) [287]  (6.68 ns)

 <State 15>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_3_2_load') on local variable 'a_row[3]' [53]  (0 ns)
	'select' operation ('a_row[3]', matmul.cpp:25) [158]  (1.37 ns)
	'mul' operation ('tmp_11_3', matmul.cpp:38) [290]  (6.68 ns)

 <State 16>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_4_2_load') on local variable 'a_row[4]' [54]  (0 ns)
	'select' operation ('a_row[4]', matmul.cpp:25) [157]  (1.37 ns)
	'mul' operation ('tmp_11_4', matmul.cpp:38) [293]  (6.68 ns)

 <State 17>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_5_2_load') on local variable 'a_row[5]' [55]  (0 ns)
	'select' operation ('a_row[5]', matmul.cpp:25) [156]  (1.37 ns)
	'mul' operation ('tmp_11_5', matmul.cpp:38) [296]  (6.68 ns)

 <State 18>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_6_2_load') on local variable 'a_row[6]' [56]  (0 ns)
	'select' operation ('a_row[6]', matmul.cpp:25) [155]  (1.37 ns)
	'mul' operation ('tmp_11_6', matmul.cpp:38) [299]  (6.68 ns)

 <State 19>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_7_2_load') on local variable 'a_row[7]' [57]  (0 ns)
	'select' operation ('a_row[7]', matmul.cpp:25) [154]  (1.37 ns)
	'mul' operation ('tmp_11_7', matmul.cpp:38) [302]  (6.68 ns)

 <State 20>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_8_2_load') on local variable 'a_row[8]' [58]  (0 ns)
	'select' operation ('a_row[8]', matmul.cpp:25) [153]  (1.37 ns)
	'mul' operation ('tmp_11_8', matmul.cpp:38) [305]  (6.68 ns)

 <State 21>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_9_2_load') on local variable 'a_row[9]' [59]  (0 ns)
	'select' operation ('a_row[9]', matmul.cpp:25) [152]  (1.37 ns)
	'mul' operation ('tmp_11_9', matmul.cpp:38) [308]  (6.68 ns)

 <State 22>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_10_2_load') on local variable 'a_row[10]' [60]  (0 ns)
	'select' operation ('a_row[10]', matmul.cpp:25) [151]  (1.37 ns)
	'mul' operation ('tmp_11_s', matmul.cpp:38) [311]  (6.68 ns)

 <State 23>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_11_2_load') on local variable 'a_row[11]' [61]  (0 ns)
	'select' operation ('a_row[11]', matmul.cpp:25) [150]  (1.37 ns)
	'mul' operation ('tmp_11_10', matmul.cpp:38) [314]  (6.68 ns)

 <State 24>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_12_2_load') on local variable 'a_row[12]' [62]  (0 ns)
	'select' operation ('a_row[12]', matmul.cpp:25) [149]  (1.37 ns)
	'mul' operation ('tmp_11_11', matmul.cpp:38) [317]  (6.68 ns)

 <State 25>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_13_2_load') on local variable 'a_row[13]' [63]  (0 ns)
	'select' operation ('a_row[13]', matmul.cpp:25) [148]  (1.37 ns)
	'mul' operation ('tmp_11_12', matmul.cpp:38) [320]  (6.68 ns)

 <State 26>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_14_2_load') on local variable 'a_row[14]' [64]  (0 ns)
	'select' operation ('a_row[14]', matmul.cpp:25) [147]  (1.37 ns)
	'mul' operation ('tmp_11_13', matmul.cpp:38) [323]  (6.68 ns)

 <State 27>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_s', matmul.cpp:38) [311]  (6.68 ns)

 <State 28>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_10', matmul.cpp:38) [314]  (6.68 ns)

 <State 29>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_11', matmul.cpp:38) [317]  (6.68 ns)

 <State 30>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_12', matmul.cpp:38) [320]  (6.68 ns)

 <State 31>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_13', matmul.cpp:38) [323]  (6.68 ns)

 <State 32>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_14', matmul.cpp:38) [326]  (6.68 ns)

 <State 33>: 7.68ns
The critical path consists of the following:
	'add' operation ('tmp14', matmul.cpp:38) [338]  (1.92 ns)
	'add' operation ('tmp12', matmul.cpp:38) [339]  (1.92 ns)
	'add' operation ('tmp8', matmul.cpp:38) [340]  (1.92 ns)
	'add' operation ('tmp_12_s', matmul.cpp:38) [341]  (1.92 ns)

 <State 34>: 2.71ns
The critical path consists of the following:
	'getelementptr' operation ('a_1_addr_8', matmul.cpp:41) [278]  (0 ns)
	'store' operation (matmul.cpp:41) of variable 'tmp_12_s', matmul.cpp:38 on array 'a_1' [342]  (2.71 ns)

 <State 35>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
