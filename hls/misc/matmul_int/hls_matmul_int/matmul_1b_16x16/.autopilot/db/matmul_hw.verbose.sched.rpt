

================================================================
== Vivado HLS Report for 'matmul_hw'
================================================================
* Date:           Mon Apr 24 20:58:30 2017

* Version:        2016.4 (Build 1733598 on Wed Dec 14 22:59:20 MST 2016)
* Project:        hls_matmul_int
* Solution:       matmul_1b_16x16
* Product family: artix7
* Target device:  xc7a100tcsg324-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.05|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------+-------+-------+-------+---------+
    |    Latency    |    Interval   | Pipeline|
    |  min  |  max  |  min  |  max  |   Type  |
    +-------+-------+-------+-------+---------+
    |  10498|  10498|  10499|  10499|   none  |
    +-------+-------+-------+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-------+-------+----------+-----------+-----------+------+----------+
        |          |    Latency    | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|  min  |  max  |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-------+-------+----------+-----------+-----------+------+----------+
        |- L_col   |  10496|  10496|        41|         41|          1|   256|    yes   |
        +----------+-------+-------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 41, depth = 41


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 43
* Pipeline: 1
  Pipeline-0: II = 41, D = 41, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	43  / (exitcond_flatten)
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	2  / true
43 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: a_row_0_2 (2)  [1/1] 0.00ns
:0  %a_row_0_2 = alloca i32

ST_1: a_row_1_2 (3)  [1/1] 0.00ns
:1  %a_row_1_2 = alloca i32

ST_1: a_row_2_2 (4)  [1/1] 0.00ns
:2  %a_row_2_2 = alloca i32

ST_1: a_row_3_2 (5)  [1/1] 0.00ns
:3  %a_row_3_2 = alloca i32

ST_1: a_row_4_2 (6)  [1/1] 0.00ns
:4  %a_row_4_2 = alloca i32

ST_1: a_row_5_2 (7)  [1/1] 0.00ns
:5  %a_row_5_2 = alloca i32

ST_1: a_row_6_2 (8)  [1/1] 0.00ns
:6  %a_row_6_2 = alloca i32

ST_1: a_row_7_2 (9)  [1/1] 0.00ns
:7  %a_row_7_2 = alloca i32

ST_1: a_row_8_2 (10)  [1/1] 0.00ns
:8  %a_row_8_2 = alloca i32

ST_1: a_row_9_2 (11)  [1/1] 0.00ns
:9  %a_row_9_2 = alloca i32

ST_1: a_row_10_2 (12)  [1/1] 0.00ns
:10  %a_row_10_2 = alloca i32

ST_1: a_row_11_2 (13)  [1/1] 0.00ns
:11  %a_row_11_2 = alloca i32

ST_1: a_row_12_2 (14)  [1/1] 0.00ns
:12  %a_row_12_2 = alloca i32

ST_1: a_row_13_2 (15)  [1/1] 0.00ns
:13  %a_row_13_2 = alloca i32

ST_1: a_row_14_2 (16)  [1/1] 0.00ns
:14  %a_row_14_2 = alloca i32

ST_1: a_row_15_2 (17)  [1/1] 0.00ns
:15  %a_row_15_2 = alloca i32

ST_1: StgValue_60 (18)  [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap([768 x i32]* %a) nounwind, !map !7

ST_1: StgValue_61 (19)  [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecTopModule([10 x i8]* @matmul_hw_str) nounwind

ST_1: b_copy_0 (20)  [1/1] 0.00ns  loc: matmul.cpp:14
:18  %b_copy_0 = alloca [16 x i32], align 16

ST_1: b_copy_1 (21)  [1/1] 0.00ns  loc: matmul.cpp:14
:19  %b_copy_1 = alloca [16 x i32], align 16

ST_1: b_copy_2 (22)  [1/1] 0.00ns  loc: matmul.cpp:14
:20  %b_copy_2 = alloca [16 x i32], align 16

ST_1: b_copy_3 (23)  [1/1] 0.00ns  loc: matmul.cpp:14
:21  %b_copy_3 = alloca [16 x i32], align 16

ST_1: b_copy_4 (24)  [1/1] 0.00ns  loc: matmul.cpp:14
:22  %b_copy_4 = alloca [16 x i32], align 16

ST_1: b_copy_5 (25)  [1/1] 0.00ns  loc: matmul.cpp:14
:23  %b_copy_5 = alloca [16 x i32], align 16

ST_1: b_copy_6 (26)  [1/1] 0.00ns  loc: matmul.cpp:14
:24  %b_copy_6 = alloca [16 x i32], align 16

ST_1: b_copy_7 (27)  [1/1] 0.00ns  loc: matmul.cpp:14
:25  %b_copy_7 = alloca [16 x i32], align 16

ST_1: b_copy_8 (28)  [1/1] 0.00ns  loc: matmul.cpp:14
:26  %b_copy_8 = alloca [16 x i32], align 16

ST_1: b_copy_9 (29)  [1/1] 0.00ns  loc: matmul.cpp:14
:27  %b_copy_9 = alloca [16 x i32], align 16

ST_1: b_copy_10 (30)  [1/1] 0.00ns  loc: matmul.cpp:14
:28  %b_copy_10 = alloca [16 x i32], align 16

ST_1: b_copy_11 (31)  [1/1] 0.00ns  loc: matmul.cpp:14
:29  %b_copy_11 = alloca [16 x i32], align 16

ST_1: b_copy_12 (32)  [1/1] 0.00ns  loc: matmul.cpp:14
:30  %b_copy_12 = alloca [16 x i32], align 16

ST_1: b_copy_13 (33)  [1/1] 0.00ns  loc: matmul.cpp:14
:31  %b_copy_13 = alloca [16 x i32], align 16

ST_1: b_copy_14 (34)  [1/1] 0.00ns  loc: matmul.cpp:14
:32  %b_copy_14 = alloca [16 x i32], align 16

ST_1: b_copy_15 (35)  [1/1] 0.00ns  loc: matmul.cpp:14
:33  %b_copy_15 = alloca [16 x i32], align 16

ST_1: StgValue_78 (36)  [1/1] 0.00ns  loc: matmul.cpp:6
:34  call void (...)* @_ssdm_op_SpecInterface(i32 0, [11 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_79 (37)  [1/1] 0.00ns
:35  call void (...)* @_ssdm_op_SpecInterface([768 x i32]* %a, [5 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: StgValue_80 (38)  [1/1] 0.00ns
:36  call void (...)* @_ssdm_op_SpecMemCore([768 x i32]* %a, [1 x i8]* @p_str1, [12 x i8]* @p_str3, [1 x i8]* @p_str1, i32 -1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_81 (39)  [1/1] 1.57ns  loc: matmul.cpp:19
:37  br label %.preheader7


 <State 2>: 6.45ns
ST_2: indvar_flatten (41)  [1/1] 0.00ns
.preheader7:0  %indvar_flatten = phi i9 [ 0, %0 ], [ %indvar_flatten_next, %.loopexit ]

ST_2: i (42)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7:1  %i = phi i5 [ 0, %0 ], [ %tmp_2_mid2_v_v_v, %.loopexit ]

ST_2: j (43)  [1/1] 0.00ns
.preheader7:2  %j = phi i5 [ 0, %0 ], [ %j_1, %.loopexit ]

ST_2: exitcond_flatten (44)  [1/1] 2.51ns
.preheader7:3  %exitcond_flatten = icmp eq i9 %indvar_flatten, -256

ST_2: indvar_flatten_next (45)  [1/1] 1.79ns
.preheader7:4  %indvar_flatten_next = add i9 %indvar_flatten, 1

ST_2: StgValue_87 (46)  [1/1] 0.00ns
.preheader7:5  br i1 %exitcond_flatten, label %1, label %.preheader7.preheader

ST_2: i_1 (64)  [1/1] 1.67ns  loc: matmul.cpp:19
.preheader7.preheader:16  %i_1 = add i5 %i, 1

ST_2: exitcond (67)  [1/1] 2.37ns  loc: matmul.cpp:20
.preheader7.preheader:19  %exitcond = icmp eq i5 %j, -16

ST_2: j_mid2 (68)  [1/1] 1.37ns  loc: matmul.cpp:20
.preheader7.preheader:20  %j_mid2 = select i1 %exitcond, i5 0, i5 %j

ST_2: tmp_mid1 (69)  [1/1] 2.37ns  loc: matmul.cpp:31
.preheader7.preheader:21  %tmp_mid1 = icmp eq i5 %i_1, 0

ST_2: tmp (70)  [1/1] 2.37ns  loc: matmul.cpp:31
.preheader7.preheader:22  %tmp = icmp eq i5 %i, 0

ST_2: tmp_mid2 (71)  [1/1] 1.37ns  loc: matmul.cpp:31
.preheader7.preheader:23  %tmp_mid2 = select i1 %exitcond, i1 %tmp_mid1, i1 %tmp

ST_2: tmp_2_mid2_v_v_v (72)  [1/1] 1.37ns  loc: matmul.cpp:41
.preheader7.preheader:24  %tmp_2_mid2_v_v_v = select i1 %exitcond, i5 %i_1, i5 %i

ST_2: tmp_38 (182)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:5  %tmp_38 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 8, i5 %j_mid2)

ST_2: a_addr_16 (183)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:6  %a_addr_16 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_38

ST_2: a_load (225)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:48  %a_load = load i32* %a_addr_16, align 4


 <State 3>: 4.50ns
ST_3: tmp_8_cast (179)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:2  %tmp_8_cast = zext i5 %j_mid2 to i9

ST_3: tmp_39 (184)  [1/1] 1.79ns  loc: matmul.cpp:33
.preheader.preheader:7  %tmp_39 = add i9 %tmp_8_cast, -240

ST_3: tmp_40_cast (185)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:8  %tmp_40_cast = zext i9 %tmp_39 to i64

ST_3: a_addr_17 (186)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:9  %a_addr_17 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_40_cast

ST_3: a_load (225)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:48  %a_load = load i32* %a_addr_16, align 4

ST_3: a_load_1 (228)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:51  %a_load_1 = load i32* %a_addr_17, align 4


 <State 4>: 2.71ns
ST_4: tmp_40 (187)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:10  %tmp_40 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 9, i5 %j_mid2)

ST_4: a_addr_18 (188)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:11  %a_addr_18 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_40

ST_4: a_load_1 (228)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:51  %a_load_1 = load i32* %a_addr_17, align 4

ST_4: a_load_2 (231)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:54  %a_load_2 = load i32* %a_addr_18, align 4


 <State 5>: 5.10ns
ST_5: tmp_8 (177)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:0  %tmp_8 = zext i5 %j_mid2 to i64

ST_5: tmp_41 (189)  [1/1] 1.79ns  loc: matmul.cpp:33
.preheader.preheader:12  %tmp_41 = add i9 %tmp_8_cast, -208

ST_5: tmp_42_cast (190)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:13  %tmp_42_cast = zext i9 %tmp_41 to i64

ST_5: a_addr_19 (191)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:14  %a_addr_19 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_42_cast

ST_5: b_copy_0_addr (226)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:49  %b_copy_0_addr = getelementptr [16 x i32]* %b_copy_0, i64 0, i64 %tmp_8

ST_5: StgValue_113 (227)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:50  store i32 %a_load, i32* %b_copy_0_addr, align 4

ST_5: b_copy_1_addr (229)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:52  %b_copy_1_addr = getelementptr [16 x i32]* %b_copy_1, i64 0, i64 %tmp_8

ST_5: StgValue_115 (230)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:53  store i32 %a_load_1, i32* %b_copy_1_addr, align 4

ST_5: a_load_2 (231)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:54  %a_load_2 = load i32* %a_addr_18, align 4

ST_5: b_copy_2_addr (232)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:55  %b_copy_2_addr = getelementptr [16 x i32]* %b_copy_2, i64 0, i64 %tmp_8

ST_5: StgValue_118 (233)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:56  store i32 %a_load_2, i32* %b_copy_2_addr, align 4

ST_5: a_load_3 (234)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:57  %a_load_3 = load i32* %a_addr_19, align 4


 <State 6>: 5.10ns
ST_6: tmp_42 (192)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:15  %tmp_42 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 10, i5 %j_mid2)

ST_6: a_addr_20 (193)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:16  %a_addr_20 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_42

ST_6: a_load_3 (234)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:57  %a_load_3 = load i32* %a_addr_19, align 4

ST_6: b_copy_3_addr (235)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:58  %b_copy_3_addr = getelementptr [16 x i32]* %b_copy_3, i64 0, i64 %tmp_8

ST_6: StgValue_124 (236)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:59  store i32 %a_load_3, i32* %b_copy_3_addr, align 4

ST_6: a_load_4 (237)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:60  %a_load_4 = load i32* %a_addr_20, align 4


 <State 7>: 5.10ns
ST_7: tmp_43 (194)  [1/1] 1.79ns  loc: matmul.cpp:33
.preheader.preheader:17  %tmp_43 = add i9 %tmp_8_cast, -176

ST_7: tmp_44_cast (195)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:18  %tmp_44_cast = zext i9 %tmp_43 to i64

ST_7: a_addr_21 (196)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:19  %a_addr_21 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_44_cast

ST_7: a_load_4 (237)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:60  %a_load_4 = load i32* %a_addr_20, align 4

ST_7: b_copy_4_addr (238)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:61  %b_copy_4_addr = getelementptr [16 x i32]* %b_copy_4, i64 0, i64 %tmp_8

ST_7: StgValue_131 (239)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:62  store i32 %a_load_4, i32* %b_copy_4_addr, align 4

ST_7: a_load_5 (240)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:63  %a_load_5 = load i32* %a_addr_21, align 4


 <State 8>: 5.10ns
ST_8: tmp_44 (197)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:20  %tmp_44 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 11, i5 %j_mid2)

ST_8: a_addr_22 (198)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:21  %a_addr_22 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_44

ST_8: a_load_5 (240)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:63  %a_load_5 = load i32* %a_addr_21, align 4

ST_8: b_copy_5_addr (241)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:64  %b_copy_5_addr = getelementptr [16 x i32]* %b_copy_5, i64 0, i64 %tmp_8

ST_8: StgValue_137 (242)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:65  store i32 %a_load_5, i32* %b_copy_5_addr, align 4

ST_8: a_load_6 (243)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:66  %a_load_6 = load i32* %a_addr_22, align 4


 <State 9>: 5.10ns
ST_9: tmp_45 (199)  [1/1] 1.79ns  loc: matmul.cpp:33
.preheader.preheader:22  %tmp_45 = add i9 %tmp_8_cast, -144

ST_9: tmp_46_cast (200)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:23  %tmp_46_cast = zext i9 %tmp_45 to i64

ST_9: a_addr_23 (201)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:24  %a_addr_23 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_46_cast

ST_9: a_load_6 (243)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:66  %a_load_6 = load i32* %a_addr_22, align 4

ST_9: b_copy_6_addr (244)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:67  %b_copy_6_addr = getelementptr [16 x i32]* %b_copy_6, i64 0, i64 %tmp_8

ST_9: StgValue_144 (245)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:68  store i32 %a_load_6, i32* %b_copy_6_addr, align 4

ST_9: a_load_7 (246)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:69  %a_load_7 = load i32* %a_addr_23, align 4


 <State 10>: 5.10ns
ST_10: tmp_46 (202)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:25  %tmp_46 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 12, i5 %j_mid2)

ST_10: a_addr_24 (203)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:26  %a_addr_24 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_46

ST_10: a_load_7 (246)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:69  %a_load_7 = load i32* %a_addr_23, align 4

ST_10: b_copy_7_addr (247)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:70  %b_copy_7_addr = getelementptr [16 x i32]* %b_copy_7, i64 0, i64 %tmp_8

ST_10: StgValue_150 (248)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:71  store i32 %a_load_7, i32* %b_copy_7_addr, align 4

ST_10: a_load_8 (249)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:72  %a_load_8 = load i32* %a_addr_24, align 4


 <State 11>: 5.10ns
ST_11: tmp_8_cast_cast (181)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:4  %tmp_8_cast_cast = zext i5 %j_mid2 to i8

ST_11: tmp_47 (204)  [1/1] 1.67ns  loc: matmul.cpp:33
.preheader.preheader:27  %tmp_47 = add i8 %tmp_8_cast_cast, -112

ST_11: tmp_48_cast1 (205)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:28  %tmp_48_cast1 = sext i8 %tmp_47 to i9

ST_11: tmp_48_cast (206)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:29  %tmp_48_cast = zext i9 %tmp_48_cast1 to i64

ST_11: a_addr_26 (207)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:30  %a_addr_26 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_48_cast

ST_11: a_load_8 (249)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:72  %a_load_8 = load i32* %a_addr_24, align 4

ST_11: b_copy_8_addr (250)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:73  %b_copy_8_addr = getelementptr [16 x i32]* %b_copy_8, i64 0, i64 %tmp_8

ST_11: StgValue_159 (251)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:74  store i32 %a_load_8, i32* %b_copy_8_addr, align 4

ST_11: a_load_9 (252)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:75  %a_load_9 = load i32* %a_addr_26, align 4


 <State 12>: 5.10ns
ST_12: tmp_48 (208)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:31  %tmp_48 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 13, i5 %j_mid2)

ST_12: a_addr_27 (209)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:32  %a_addr_27 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_48

ST_12: a_load_9 (252)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:75  %a_load_9 = load i32* %a_addr_26, align 4

ST_12: b_copy_9_addr (253)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:76  %b_copy_9_addr = getelementptr [16 x i32]* %b_copy_9, i64 0, i64 %tmp_8

ST_12: StgValue_165 (254)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:77  store i32 %a_load_9, i32* %b_copy_9_addr, align 4

ST_12: a_load_10 (255)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:78  %a_load_10 = load i32* %a_addr_27, align 4


 <State 13>: 5.10ns
ST_13: tmp_49 (210)  [1/1] 1.67ns  loc: matmul.cpp:33
.preheader.preheader:33  %tmp_49 = add i8 %tmp_8_cast_cast, -80

ST_13: tmp_50_cast1 (211)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:34  %tmp_50_cast1 = sext i8 %tmp_49 to i9

ST_13: tmp_50_cast (212)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:35  %tmp_50_cast = zext i9 %tmp_50_cast1 to i64

ST_13: a_addr_28 (213)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:36  %a_addr_28 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_50_cast

ST_13: a_load_10 (255)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:78  %a_load_10 = load i32* %a_addr_27, align 4

ST_13: b_copy_10_addr (256)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:79  %b_copy_10_addr = getelementptr [16 x i32]* %b_copy_10, i64 0, i64 %tmp_8

ST_13: StgValue_173 (257)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:80  store i32 %a_load_10, i32* %b_copy_10_addr, align 4

ST_13: a_load_11 (258)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:81  %a_load_11 = load i32* %a_addr_28, align 4


 <State 14>: 5.10ns
ST_14: tmp_50 (214)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:37  %tmp_50 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 14, i5 %j_mid2)

ST_14: a_addr_29 (215)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:38  %a_addr_29 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_50

ST_14: a_load_11 (258)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:81  %a_load_11 = load i32* %a_addr_28, align 4

ST_14: b_copy_11_addr (259)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:82  %b_copy_11_addr = getelementptr [16 x i32]* %b_copy_11, i64 0, i64 %tmp_8

ST_14: StgValue_179 (260)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:83  store i32 %a_load_11, i32* %b_copy_11_addr, align 4

ST_14: a_load_12 (261)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:84  %a_load_12 = load i32* %a_addr_29, align 4


 <State 15>: 5.10ns
ST_15: tmp_8_cast_cast1 (180)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:3  %tmp_8_cast_cast1 = zext i5 %j_mid2 to i7

ST_15: tmp_51 (216)  [1/1] 1.67ns  loc: matmul.cpp:33
.preheader.preheader:39  %tmp_51 = add i7 %tmp_8_cast_cast1, -48

ST_15: tmp_52_cast1 (217)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:40  %tmp_52_cast1 = sext i7 %tmp_51 to i9

ST_15: tmp_52_cast (218)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:41  %tmp_52_cast = zext i9 %tmp_52_cast1 to i64

ST_15: a_addr_30 (219)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:42  %a_addr_30 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_52_cast

ST_15: a_load_12 (261)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:84  %a_load_12 = load i32* %a_addr_29, align 4

ST_15: b_copy_12_addr (262)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:85  %b_copy_12_addr = getelementptr [16 x i32]* %b_copy_12, i64 0, i64 %tmp_8

ST_15: StgValue_188 (263)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:86  store i32 %a_load_12, i32* %b_copy_12_addr, align 4

ST_15: a_load_13 (264)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:87  %a_load_13 = load i32* %a_addr_30, align 4


 <State 16>: 5.10ns
ST_16: tmp_52 (220)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:43  %tmp_52 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 15, i5 %j_mid2)

ST_16: a_addr_31 (221)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:44  %a_addr_31 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_52

ST_16: a_load_13 (264)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:87  %a_load_13 = load i32* %a_addr_30, align 4

ST_16: b_copy_13_addr (265)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:88  %b_copy_13_addr = getelementptr [16 x i32]* %b_copy_13, i64 0, i64 %tmp_8

ST_16: StgValue_194 (266)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:89  store i32 %a_load_13, i32* %b_copy_13_addr, align 4

ST_16: a_load_14 (267)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:90  %a_load_14 = load i32* %a_addr_31, align 4


 <State 17>: 5.10ns
ST_17: tmp_8_cast1 (178)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:1  %tmp_8_cast1 = zext i5 %j_mid2 to i10

ST_17: tmp_53 (222)  [1/1] 1.79ns  loc: matmul.cpp:33
.preheader.preheader:45  %tmp_53 = add i10 %tmp_8_cast1, 496

ST_17: tmp_54_cast (223)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:46  %tmp_54_cast = zext i10 %tmp_53 to i64

ST_17: a_addr_32 (224)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:47  %a_addr_32 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_54_cast

ST_17: a_load_14 (267)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:90  %a_load_14 = load i32* %a_addr_31, align 4

ST_17: b_copy_14_addr (268)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:91  %b_copy_14_addr = getelementptr [16 x i32]* %b_copy_14, i64 0, i64 %tmp_8

ST_17: StgValue_202 (269)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:92  store i32 %a_load_14, i32* %b_copy_14_addr, align 4

ST_17: a_load_15 (270)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:93  %a_load_15 = load i32* %a_addr_32, align 4


 <State 18>: 5.10ns
ST_18: tmp_3 (75)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:27  %tmp_3 = call i9 @_ssdm_op_BitConcatenate.i9.i5.i4(i5 %tmp_2_mid2_v_v_v, i4 0)

ST_18: tmp_6 (76)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:28  %tmp_6 = zext i9 %tmp_3 to i64

ST_18: a_addr (77)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:29  %a_addr = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_6

ST_18: a_row_0 (127)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:79  %a_row_0 = load i32* %a_addr, align 4

ST_18: a_load_15 (270)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:93  %a_load_15 = load i32* %a_addr_32, align 4

ST_18: b_copy_15_addr (271)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:94  %b_copy_15_addr = getelementptr [16 x i32]* %b_copy_15, i64 0, i64 %tmp_8

ST_18: StgValue_210 (272)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:95  store i32 %a_load_15, i32* %b_copy_15_addr, align 4

ST_18: StgValue_211 (273)  [1/1] 0.00ns
.preheader.preheader:96  br label %.loopexit

ST_18: tmp_7 (275)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:0  %tmp_7 = zext i5 %j_mid2 to i64

ST_18: b_copy_0_addr_1 (280)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:5  %b_copy_0_addr_1 = getelementptr [16 x i32]* %b_copy_0, i64 0, i64 %tmp_7

ST_18: b_copy_0_load (281)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:6  %b_copy_0_load = load i32* %b_copy_0_addr_1, align 4


 <State 19>: 2.71ns
ST_19: tmp_9 (78)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:30  %tmp_9 = or i9 %tmp_3, 1

ST_19: tmp_2 (79)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:31  %tmp_2 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_9)

ST_19: a_addr_1 (80)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:32  %a_addr_1 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_2

ST_19: tmp_5 (126)  [1/1] 2.37ns  loc: matmul.cpp:25
.preheader7.preheader:78  %tmp_5 = icmp eq i5 %j_mid2, 0

ST_19: a_row_0 (127)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:79  %a_row_0 = load i32* %a_addr, align 4

ST_19: a_row_1 (128)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:80  %a_row_1 = load i32* %a_addr_1, align 4

ST_19: b_copy_0_load (281)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:6  %b_copy_0_load = load i32* %b_copy_0_addr_1, align 4

ST_19: b_copy_1_addr_1 (283)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:8  %b_copy_1_addr_1 = getelementptr [16 x i32]* %b_copy_1, i64 0, i64 %tmp_7

ST_19: b_copy_1_load (284)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:9  %b_copy_1_load = load i32* %b_copy_1_addr_1, align 4


 <State 20>: 8.05ns
ST_20: a_row_0_2_load (48)  [1/1] 0.00ns
.preheader7.preheader:0  %a_row_0_2_load = load i32* %a_row_0_2

ST_20: tmp_10 (81)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:33  %tmp_10 = or i9 %tmp_3, 2

ST_20: tmp_11 (82)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:34  %tmp_11 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_10)

ST_20: a_addr_2 (83)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:35  %a_addr_2 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_11

ST_20: a_row_1 (128)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:80  %a_row_1 = load i32* %a_addr_1, align 4

ST_20: a_row_2 (129)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:81  %a_row_2 = load i32* %a_addr_2, align 4

ST_20: a_row_0_1 (158)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:110  %a_row_0_1 = select i1 %tmp_5, i32 %a_row_0, i32 %a_row_0_2_load

ST_20: StgValue_231 (174)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:126  store i32 %a_row_0_1, i32* %a_row_0_2

ST_20: tmp_s (282)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_20: b_copy_1_load (284)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:9  %b_copy_1_load = load i32* %b_copy_1_addr_1, align 4

ST_20: b_copy_2_addr_1 (286)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:11  %b_copy_2_addr_1 = getelementptr [16 x i32]* %b_copy_2, i64 0, i64 %tmp_7

ST_20: b_copy_2_load (287)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:12  %b_copy_2_load = load i32* %b_copy_2_addr_1, align 4


 <State 21>: 8.05ns
ST_21: a_row_1_2_load (49)  [1/1] 0.00ns
.preheader7.preheader:1  %a_row_1_2_load = load i32* %a_row_1_2

ST_21: tmp_12 (84)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:36  %tmp_12 = or i9 %tmp_3, 3

ST_21: tmp_13 (85)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:37  %tmp_13 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_12)

ST_21: a_addr_3 (86)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:38  %a_addr_3 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_13

ST_21: a_row_2 (129)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:81  %a_row_2 = load i32* %a_addr_2, align 4

ST_21: a_row_3 (130)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:82  %a_row_3 = load i32* %a_addr_3, align 4

ST_21: a_row_1_1 (157)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:109  %a_row_1_1 = select i1 %tmp_5, i32 %a_row_1, i32 %a_row_1_2_load

ST_21: StgValue_243 (173)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:125  store i32 %a_row_1_1, i32* %a_row_1_2

ST_21: tmp_s (282)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_21: tmp_11_1 (285)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_21: b_copy_2_load (287)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:12  %b_copy_2_load = load i32* %b_copy_2_addr_1, align 4

ST_21: b_copy_3_addr_1 (289)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:14  %b_copy_3_addr_1 = getelementptr [16 x i32]* %b_copy_3, i64 0, i64 %tmp_7

ST_21: b_copy_3_load (290)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:15  %b_copy_3_load = load i32* %b_copy_3_addr_1, align 4


 <State 22>: 8.05ns
ST_22: a_row_2_2_load (50)  [1/1] 0.00ns
.preheader7.preheader:2  %a_row_2_2_load = load i32* %a_row_2_2

ST_22: tmp_14 (87)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:39  %tmp_14 = or i9 %tmp_3, 4

ST_22: tmp_15 (88)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:40  %tmp_15 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_14)

ST_22: a_addr_4 (89)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:41  %a_addr_4 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_15

ST_22: a_row_3 (130)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:82  %a_row_3 = load i32* %a_addr_3, align 4

ST_22: a_row_4 (131)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:83  %a_row_4 = load i32* %a_addr_4, align 4

ST_22: a_row_2_1 (156)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:108  %a_row_2_1 = select i1 %tmp_5, i32 %a_row_2, i32 %a_row_2_2_load

ST_22: StgValue_256 (172)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:124  store i32 %a_row_2_1, i32* %a_row_2_2

ST_22: tmp_s (282)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_22: tmp_11_1 (285)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_22: tmp_11_2 (288)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_22: b_copy_3_load (290)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:15  %b_copy_3_load = load i32* %b_copy_3_addr_1, align 4

ST_22: b_copy_4_addr_1 (292)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:17  %b_copy_4_addr_1 = getelementptr [16 x i32]* %b_copy_4, i64 0, i64 %tmp_7

ST_22: b_copy_4_load (293)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:18  %b_copy_4_load = load i32* %b_copy_4_addr_1, align 4


 <State 23>: 8.05ns
ST_23: a_row_3_2_load (51)  [1/1] 0.00ns
.preheader7.preheader:3  %a_row_3_2_load = load i32* %a_row_3_2

ST_23: tmp_16 (90)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:42  %tmp_16 = or i9 %tmp_3, 5

ST_23: tmp_17 (91)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:43  %tmp_17 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_16)

ST_23: a_addr_5 (92)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:44  %a_addr_5 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_17

ST_23: a_row_4 (131)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:83  %a_row_4 = load i32* %a_addr_4, align 4

ST_23: a_row_5 (132)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:84  %a_row_5 = load i32* %a_addr_5, align 4

ST_23: a_row_3_1 (155)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:107  %a_row_3_1 = select i1 %tmp_5, i32 %a_row_3, i32 %a_row_3_2_load

ST_23: StgValue_270 (171)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:123  store i32 %a_row_3_1, i32* %a_row_3_2

ST_23: tmp_s (282)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_23: tmp_11_1 (285)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_23: tmp_11_2 (288)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_23: tmp_11_3 (291)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_23: b_copy_4_load (293)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:18  %b_copy_4_load = load i32* %b_copy_4_addr_1, align 4

ST_23: b_copy_5_addr_1 (295)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:20  %b_copy_5_addr_1 = getelementptr [16 x i32]* %b_copy_5, i64 0, i64 %tmp_7

ST_23: b_copy_5_load (296)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:21  %b_copy_5_load = load i32* %b_copy_5_addr_1, align 4


 <State 24>: 8.05ns
ST_24: a_row_4_2_load (52)  [1/1] 0.00ns
.preheader7.preheader:4  %a_row_4_2_load = load i32* %a_row_4_2

ST_24: tmp_18 (93)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:45  %tmp_18 = or i9 %tmp_3, 6

ST_24: tmp_19 (94)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:46  %tmp_19 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_18)

ST_24: a_addr_6 (95)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:47  %a_addr_6 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_19

ST_24: a_row_5 (132)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:84  %a_row_5 = load i32* %a_addr_5, align 4

ST_24: a_row_6 (133)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:85  %a_row_6 = load i32* %a_addr_6, align 4

ST_24: a_row_4_1 (154)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:106  %a_row_4_1 = select i1 %tmp_5, i32 %a_row_4, i32 %a_row_4_2_load

ST_24: StgValue_285 (170)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:122  store i32 %a_row_4_1, i32* %a_row_4_2

ST_24: tmp_s (282)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_24: tmp_11_1 (285)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_24: tmp_11_2 (288)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_24: tmp_11_3 (291)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_24: tmp_11_4 (294)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_24: b_copy_5_load (296)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:21  %b_copy_5_load = load i32* %b_copy_5_addr_1, align 4

ST_24: b_copy_6_addr_1 (298)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:23  %b_copy_6_addr_1 = getelementptr [16 x i32]* %b_copy_6, i64 0, i64 %tmp_7

ST_24: b_copy_6_load (299)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:24  %b_copy_6_load = load i32* %b_copy_6_addr_1, align 4


 <State 25>: 8.05ns
ST_25: a_row_5_2_load (53)  [1/1] 0.00ns
.preheader7.preheader:5  %a_row_5_2_load = load i32* %a_row_5_2

ST_25: tmp_20 (96)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:48  %tmp_20 = or i9 %tmp_3, 7

ST_25: tmp_21 (97)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:49  %tmp_21 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_20)

ST_25: a_addr_7 (98)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:50  %a_addr_7 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_21

ST_25: a_row_6 (133)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:85  %a_row_6 = load i32* %a_addr_6, align 4

ST_25: a_row_7 (134)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:86  %a_row_7 = load i32* %a_addr_7, align 4

ST_25: a_row_5_1 (153)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:105  %a_row_5_1 = select i1 %tmp_5, i32 %a_row_5, i32 %a_row_5_2_load

ST_25: StgValue_301 (169)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:121  store i32 %a_row_5_1, i32* %a_row_5_2

ST_25: tmp_s (282)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_25: tmp_11_1 (285)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_25: tmp_11_2 (288)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_25: tmp_11_3 (291)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_25: tmp_11_4 (294)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_25: tmp_11_5 (297)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_25: b_copy_6_load (299)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:24  %b_copy_6_load = load i32* %b_copy_6_addr_1, align 4

ST_25: b_copy_7_addr_1 (301)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:26  %b_copy_7_addr_1 = getelementptr [16 x i32]* %b_copy_7, i64 0, i64 %tmp_7

ST_25: b_copy_7_load (302)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:27  %b_copy_7_load = load i32* %b_copy_7_addr_1, align 4


 <State 26>: 8.05ns
ST_26: a_row_6_2_load (54)  [1/1] 0.00ns
.preheader7.preheader:6  %a_row_6_2_load = load i32* %a_row_6_2

ST_26: tmp_22 (99)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:51  %tmp_22 = or i9 %tmp_3, 8

ST_26: tmp_23 (100)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:52  %tmp_23 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_22)

ST_26: a_addr_8 (101)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:53  %a_addr_8 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_23

ST_26: a_row_7 (134)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:86  %a_row_7 = load i32* %a_addr_7, align 4

ST_26: a_row_8 (135)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:87  %a_row_8 = load i32* %a_addr_8, align 4

ST_26: a_row_6_1 (152)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:104  %a_row_6_1 = select i1 %tmp_5, i32 %a_row_6, i32 %a_row_6_2_load

ST_26: StgValue_318 (168)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:120  store i32 %a_row_6_1, i32* %a_row_6_2

ST_26: tmp_11_1 (285)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_26: tmp_11_2 (288)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_26: tmp_11_3 (291)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_26: tmp_11_4 (294)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_26: tmp_11_5 (297)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_26: tmp_11_6 (300)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_26: b_copy_7_load (302)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:27  %b_copy_7_load = load i32* %b_copy_7_addr_1, align 4

ST_26: b_copy_8_addr_1 (304)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:29  %b_copy_8_addr_1 = getelementptr [16 x i32]* %b_copy_8, i64 0, i64 %tmp_7

ST_26: b_copy_8_load (305)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:30  %b_copy_8_load = load i32* %b_copy_8_addr_1, align 4


 <State 27>: 8.05ns
ST_27: a_row_7_2_load (55)  [1/1] 0.00ns
.preheader7.preheader:7  %a_row_7_2_load = load i32* %a_row_7_2

ST_27: tmp_24 (102)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:54  %tmp_24 = or i9 %tmp_3, 9

ST_27: tmp_25 (103)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:55  %tmp_25 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_24)

ST_27: a_addr_9 (104)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:56  %a_addr_9 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_25

ST_27: a_row_8 (135)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:87  %a_row_8 = load i32* %a_addr_8, align 4

ST_27: a_row_9 (136)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:88  %a_row_9 = load i32* %a_addr_9, align 4

ST_27: a_row_7_1 (151)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:103  %a_row_7_1 = select i1 %tmp_5, i32 %a_row_7, i32 %a_row_7_2_load

ST_27: StgValue_335 (167)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:119  store i32 %a_row_7_1, i32* %a_row_7_2

ST_27: tmp_11_2 (288)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_27: tmp_11_3 (291)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_27: tmp_11_4 (294)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_27: tmp_11_5 (297)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_27: tmp_11_6 (300)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_27: tmp_11_7 (303)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_27: b_copy_8_load (305)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:30  %b_copy_8_load = load i32* %b_copy_8_addr_1, align 4

ST_27: b_copy_9_addr_1 (307)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:32  %b_copy_9_addr_1 = getelementptr [16 x i32]* %b_copy_9, i64 0, i64 %tmp_7

ST_27: b_copy_9_load (308)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:33  %b_copy_9_load = load i32* %b_copy_9_addr_1, align 4

ST_27: tmp3 (328)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:53  %tmp3 = add i32 %tmp_11_1, %tmp_s


 <State 28>: 8.05ns
ST_28: a_row_8_2_load (56)  [1/1] 0.00ns
.preheader7.preheader:8  %a_row_8_2_load = load i32* %a_row_8_2

ST_28: tmp_26 (105)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:57  %tmp_26 = or i9 %tmp_3, 10

ST_28: tmp_27 (106)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:58  %tmp_27 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_26)

ST_28: a_addr_10 (107)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:59  %a_addr_10 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_27

ST_28: a_row_9 (136)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:88  %a_row_9 = load i32* %a_addr_9, align 4

ST_28: a_row_10 (137)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:89  %a_row_10 = load i32* %a_addr_10, align 4

ST_28: a_row_8_1 (150)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:102  %a_row_8_1 = select i1 %tmp_5, i32 %a_row_8, i32 %a_row_8_2_load

ST_28: StgValue_353 (166)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:118  store i32 %a_row_8_1, i32* %a_row_8_2

ST_28: tmp_11_3 (291)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_28: tmp_11_4 (294)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_28: tmp_11_5 (297)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_28: tmp_11_6 (300)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_28: tmp_11_7 (303)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_28: tmp_11_8 (306)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_28: b_copy_9_load (308)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:33  %b_copy_9_load = load i32* %b_copy_9_addr_1, align 4

ST_28: b_copy_10_addr_1 (310)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:35  %b_copy_10_addr_1 = getelementptr [16 x i32]* %b_copy_10, i64 0, i64 %tmp_7

ST_28: b_copy_10_load (311)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:36  %b_copy_10_load = load i32* %b_copy_10_addr_1, align 4


 <State 29>: 8.05ns
ST_29: a_row_9_2_load (57)  [1/1] 0.00ns
.preheader7.preheader:9  %a_row_9_2_load = load i32* %a_row_9_2

ST_29: tmp_28 (108)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:60  %tmp_28 = or i9 %tmp_3, 11

ST_29: tmp_29 (109)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:61  %tmp_29 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_28)

ST_29: a_addr_11 (110)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:62  %a_addr_11 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_29

ST_29: a_row_10 (137)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:89  %a_row_10 = load i32* %a_addr_10, align 4

ST_29: a_row_11 (138)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:90  %a_row_11 = load i32* %a_addr_11, align 4

ST_29: a_row_9_1 (149)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:101  %a_row_9_1 = select i1 %tmp_5, i32 %a_row_9, i32 %a_row_9_2_load

ST_29: StgValue_370 (165)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:117  store i32 %a_row_9_1, i32* %a_row_9_2

ST_29: tmp_11_4 (294)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_29: tmp_11_5 (297)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_29: tmp_11_6 (300)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_29: tmp_11_7 (303)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_29: tmp_11_8 (306)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_29: tmp_11_9 (309)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_29: b_copy_10_load (311)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:36  %b_copy_10_load = load i32* %b_copy_10_addr_1, align 4

ST_29: b_copy_11_addr_1 (313)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:38  %b_copy_11_addr_1 = getelementptr [16 x i32]* %b_copy_11, i64 0, i64 %tmp_7

ST_29: b_copy_11_load (314)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:39  %b_copy_11_load = load i32* %b_copy_11_addr_1, align 4

ST_29: tmp4 (329)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:54  %tmp4 = add i32 %tmp_11_3, %tmp_11_2

ST_29: tmp2 (330)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:55  %tmp2 = add i32 %tmp3, %tmp4


 <State 30>: 8.05ns
ST_30: a_row_10_2_load (58)  [1/1] 0.00ns
.preheader7.preheader:10  %a_row_10_2_load = load i32* %a_row_10_2

ST_30: tmp_30 (111)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:63  %tmp_30 = or i9 %tmp_3, 12

ST_30: tmp_31 (112)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:64  %tmp_31 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_30)

ST_30: a_addr_12 (113)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:65  %a_addr_12 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_31

ST_30: a_row_11 (138)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:90  %a_row_11 = load i32* %a_addr_11, align 4

ST_30: a_row_12 (139)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:91  %a_row_12 = load i32* %a_addr_12, align 4

ST_30: a_row_10_1 (148)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:100  %a_row_10_1 = select i1 %tmp_5, i32 %a_row_10, i32 %a_row_10_2_load

ST_30: StgValue_389 (164)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:116  store i32 %a_row_10_1, i32* %a_row_10_2

ST_30: tmp_11_5 (297)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_30: tmp_11_6 (300)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_30: tmp_11_7 (303)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_30: tmp_11_8 (306)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_30: tmp_11_9 (309)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_30: tmp_11_s (312)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_30: b_copy_11_load (314)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:39  %b_copy_11_load = load i32* %b_copy_11_addr_1, align 4

ST_30: b_copy_12_addr_1 (316)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:41  %b_copy_12_addr_1 = getelementptr [16 x i32]* %b_copy_12, i64 0, i64 %tmp_7

ST_30: b_copy_12_load (317)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:42  %b_copy_12_load = load i32* %b_copy_12_addr_1, align 4


 <State 31>: 8.05ns
ST_31: a_row_11_2_load (59)  [1/1] 0.00ns
.preheader7.preheader:11  %a_row_11_2_load = load i32* %a_row_11_2

ST_31: tmp_32 (114)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:66  %tmp_32 = or i9 %tmp_3, 13

ST_31: tmp_33 (115)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:67  %tmp_33 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_32)

ST_31: a_addr_13 (116)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:68  %a_addr_13 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_33

ST_31: a_row_12 (139)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:91  %a_row_12 = load i32* %a_addr_12, align 4

ST_31: a_row_13 (140)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:92  %a_row_13 = load i32* %a_addr_13, align 4

ST_31: a_row_11_1 (147)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:99  %a_row_11_1 = select i1 %tmp_5, i32 %a_row_11, i32 %a_row_11_2_load

ST_31: StgValue_406 (163)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:115  store i32 %a_row_11_1, i32* %a_row_11_2

ST_31: tmp_11_6 (300)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_31: tmp_11_7 (303)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_31: tmp_11_8 (306)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_31: tmp_11_9 (309)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_31: tmp_11_s (312)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_31: tmp_11_10 (315)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_31: b_copy_12_load (317)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:42  %b_copy_12_load = load i32* %b_copy_12_addr_1, align 4

ST_31: b_copy_13_addr_1 (319)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:44  %b_copy_13_addr_1 = getelementptr [16 x i32]* %b_copy_13, i64 0, i64 %tmp_7

ST_31: b_copy_13_load (320)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:45  %b_copy_13_load = load i32* %b_copy_13_addr_1, align 4

ST_31: tmp6 (331)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:56  %tmp6 = add i32 %tmp_11_5, %tmp_11_4


 <State 32>: 8.05ns
ST_32: a_row_12_2_load (60)  [1/1] 0.00ns
.preheader7.preheader:12  %a_row_12_2_load = load i32* %a_row_12_2

ST_32: tmp_34 (117)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:69  %tmp_34 = or i9 %tmp_3, 14

ST_32: tmp_35 (118)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:70  %tmp_35 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_34)

ST_32: a_addr_14 (119)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:71  %a_addr_14 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_35

ST_32: a_row_13 (140)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:92  %a_row_13 = load i32* %a_addr_13, align 4

ST_32: a_row_14 (141)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:93  %a_row_14 = load i32* %a_addr_14, align 4

ST_32: a_row_12_1 (146)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:98  %a_row_12_1 = select i1 %tmp_5, i32 %a_row_12, i32 %a_row_12_2_load

ST_32: StgValue_424 (162)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:114  store i32 %a_row_12_1, i32* %a_row_12_2

ST_32: tmp_11_7 (303)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_32: tmp_11_8 (306)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_32: tmp_11_9 (309)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_32: tmp_11_s (312)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_32: tmp_11_10 (315)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_32: tmp_11_11 (318)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_32: b_copy_13_load (320)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:45  %b_copy_13_load = load i32* %b_copy_13_addr_1, align 4

ST_32: b_copy_14_addr_1 (322)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:47  %b_copy_14_addr_1 = getelementptr [16 x i32]* %b_copy_14, i64 0, i64 %tmp_7

ST_32: b_copy_14_load (323)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:48  %b_copy_14_load = load i32* %b_copy_14_addr_1, align 4

ST_32: b_copy_15_addr_1 (325)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:50  %b_copy_15_addr_1 = getelementptr [16 x i32]* %b_copy_15, i64 0, i64 %tmp_7

ST_32: b_copy_15_load (326)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:51  %b_copy_15_load = load i32* %b_copy_15_addr_1, align 4


 <State 33>: 8.05ns
ST_33: a_row_13_2_load (61)  [1/1] 0.00ns
.preheader7.preheader:13  %a_row_13_2_load = load i32* %a_row_13_2

ST_33: tmp_36 (120)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:72  %tmp_36 = or i9 %tmp_3, 15

ST_33: tmp_37 (121)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:73  %tmp_37 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_36)

ST_33: a_addr_15 (122)  [1/1] 0.00ns  loc: matmul.cpp:27
.preheader7.preheader:74  %a_addr_15 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_37

ST_33: a_row_14 (141)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:93  %a_row_14 = load i32* %a_addr_14, align 4

ST_33: a_row_15 (142)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:94  %a_row_15 = load i32* %a_addr_15, align 4

ST_33: a_row_13_1 (145)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:97  %a_row_13_1 = select i1 %tmp_5, i32 %a_row_13, i32 %a_row_13_2_load

ST_33: StgValue_443 (161)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:113  store i32 %a_row_13_1, i32* %a_row_13_2

ST_33: tmp_11_8 (306)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_33: tmp_11_9 (309)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_33: tmp_11_s (312)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_33: tmp_11_10 (315)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_33: tmp_11_11 (318)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_33: tmp_11_12 (321)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_33: b_copy_14_load (323)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:48  %b_copy_14_load = load i32* %b_copy_14_addr_1, align 4

ST_33: b_copy_15_load (326)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:51  %b_copy_15_load = load i32* %b_copy_15_addr_1, align 4

ST_33: tmp7 (332)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:57  %tmp7 = add i32 %tmp_11_7, %tmp_11_6

ST_33: tmp5 (333)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:58  %tmp5 = add i32 %tmp6, %tmp7

ST_33: tmp1 (334)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:59  %tmp1 = add i32 %tmp2, %tmp5


 <State 34>: 8.05ns
ST_34: a_row_14_2_load (62)  [1/1] 0.00ns
.preheader7.preheader:14  %a_row_14_2_load = load i32* %a_row_14_2

ST_34: a_row_15_2_load (63)  [1/1] 0.00ns
.preheader7.preheader:15  %a_row_15_2_load = load i32* %a_row_15_2

ST_34: StgValue_457 (65)  [1/1] 0.00ns
.preheader7.preheader:17  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @L_col_str)

ST_34: empty_3 (66)  [1/1] 0.00ns
.preheader7.preheader:18  %empty_3 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256) nounwind

ST_34: tmp_1 (73)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:25  %tmp_1 = call i10 @_ssdm_op_BitConcatenate.i10.i1.i5.i4(i1 true, i5 %tmp_2_mid2_v_v_v, i4 0)

ST_34: tmp_2_cast (74)  [1/1] 0.00ns  loc: matmul.cpp:41
.preheader7.preheader:26  %tmp_2_cast = zext i10 %tmp_1 to i11

ST_34: StgValue_461 (123)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:75  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str4) nounwind

ST_34: tmp_4 (124)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:76  %tmp_4 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str4) nounwind

ST_34: StgValue_463 (125)  [1/1] 0.00ns  loc: matmul.cpp:21
.preheader7.preheader:77  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_34: a_row_15 (142)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:94  %a_row_15 = load i32* %a_addr_15, align 4

ST_34: a_row_15_1 (143)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:95  %a_row_15_1 = select i1 %tmp_5, i32 %a_row_15, i32 %a_row_15_2_load

ST_34: a_row_14_1 (144)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:96  %a_row_14_1 = select i1 %tmp_5, i32 %a_row_14, i32 %a_row_14_2_load

ST_34: StgValue_467 (159)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:111  store i32 %a_row_15_1, i32* %a_row_15_2

ST_34: StgValue_468 (160)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:112  store i32 %a_row_14_1, i32* %a_row_14_2

ST_34: StgValue_469 (175)  [1/1] 0.00ns  loc: matmul.cpp:31
.preheader7.preheader:127  br i1 %tmp_mid2, label %.preheader.preheader, label %.loopexit

ST_34: tmp_7_cast (276)  [1/1] 0.00ns  loc: matmul.cpp:41
.loopexit:1  %tmp_7_cast = zext i5 %j_mid2 to i11

ST_34: tmp_54 (277)  [1/1] 1.79ns  loc: matmul.cpp:41
.loopexit:2  %tmp_54 = add i11 %tmp_2_cast, %tmp_7_cast

ST_34: tmp_11_9 (309)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_34: tmp_11_s (312)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_34: tmp_11_10 (315)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_34: tmp_11_11 (318)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_34: tmp_11_12 (321)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_34: tmp_11_13 (324)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_34: j_1 (345)  [1/1] 1.67ns  loc: matmul.cpp:20
.loopexit:70  %j_1 = add i5 %j_mid2, 1


 <State 35>: 6.68ns
ST_35: tmp_11_s (312)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_35: tmp_11_10 (315)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_35: tmp_11_11 (318)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_35: tmp_11_12 (321)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_35: tmp_11_13 (324)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_35: tmp_11_14 (327)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_35: tmp10 (335)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:60  %tmp10 = add i32 %tmp_11_9, %tmp_11_8


 <State 36>: 6.68ns
ST_36: tmp_11_10 (315)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_36: tmp_11_11 (318)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_36: tmp_11_12 (321)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_36: tmp_11_13 (324)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_36: tmp_11_14 (327)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 37>: 6.68ns
ST_37: tmp_11_11 (318)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_37: tmp_11_12 (321)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_37: tmp_11_13 (324)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_37: tmp_11_14 (327)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_37: tmp11 (336)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:61  %tmp11 = add i32 %tmp_11_10, %tmp_11_s

ST_37: tmp9 (337)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:62  %tmp9 = add i32 %tmp10, %tmp11


 <State 38>: 6.68ns
ST_38: tmp_11_12 (321)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_38: tmp_11_13 (324)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_38: tmp_11_14 (327)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 39>: 6.68ns
ST_39: tmp_11_13 (324)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_39: tmp_11_14 (327)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_39: tmp13 (338)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:63  %tmp13 = add i32 %tmp_11_12, %tmp_11_11


 <State 40>: 6.68ns
ST_40: tmp_11_14 (327)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 41>: 7.68ns
ST_41: tmp14 (339)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:64  %tmp14 = add i32 %tmp_11_14, %tmp_11_13

ST_41: tmp12 (340)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:65  %tmp12 = add i32 %tmp13, %tmp14

ST_41: tmp8 (341)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:66  %tmp8 = add i32 %tmp9, %tmp12

ST_41: tmp_12_s (342)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:67  %tmp_12_s = add nsw i32 %tmp1, %tmp8


 <State 42>: 2.71ns
ST_42: tmp_55_cast (278)  [1/1] 0.00ns  loc: matmul.cpp:41
.loopexit:3  %tmp_55_cast = zext i11 %tmp_54 to i64

ST_42: a_addr_25 (279)  [1/1] 0.00ns  loc: matmul.cpp:41
.loopexit:4  %a_addr_25 = getelementptr [768 x i32]* %a, i64 0, i64 %tmp_55_cast

ST_42: StgValue_510 (343)  [1/1] 2.71ns  loc: matmul.cpp:41
.loopexit:68  store i32 %tmp_12_s, i32* %a_addr_25, align 4

ST_42: empty (344)  [1/1] 0.00ns  loc: matmul.cpp:42
.loopexit:69  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str4, i32 %tmp_4) nounwind

ST_42: StgValue_512 (346)  [1/1] 0.00ns  loc: matmul.cpp:20
.loopexit:71  br label %.preheader7


 <State 43>: 0.00ns
ST_43: StgValue_513 (348)  [1/1] 0.00ns  loc: matmul.cpp:44
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.57ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten') with incoming values : ('indvar_flatten_next') [41]  (1.57 ns)

 <State 2>: 6.45ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', matmul.cpp:20) [43]  (0 ns)
	'icmp' operation ('exitcond', matmul.cpp:20) [67]  (2.37 ns)
	'select' operation ('j_mid2', matmul.cpp:20) [68]  (1.37 ns)
	'getelementptr' operation ('a_addr_16', matmul.cpp:33) [183]  (0 ns)
	'load' operation ('a_load', matmul.cpp:33) on array 'a' [225]  (2.71 ns)

 <State 3>: 4.5ns
The critical path consists of the following:
	'add' operation ('tmp_39', matmul.cpp:33) [184]  (1.79 ns)
	'getelementptr' operation ('a_addr_17', matmul.cpp:33) [186]  (0 ns)
	'load' operation ('a_load_1', matmul.cpp:33) on array 'a' [228]  (2.71 ns)

 <State 4>: 2.71ns
The critical path consists of the following:
	'getelementptr' operation ('a_addr_18', matmul.cpp:33) [188]  (0 ns)
	'load' operation ('a_load_2', matmul.cpp:33) on array 'a' [231]  (2.71 ns)

 <State 5>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_2', matmul.cpp:33) on array 'a' [231]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_2', matmul.cpp:33 on array 'b_copy[2]', matmul.cpp:14 [233]  (2.39 ns)

 <State 6>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_3', matmul.cpp:33) on array 'a' [234]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_3', matmul.cpp:33 on array 'b_copy[3]', matmul.cpp:14 [236]  (2.39 ns)

 <State 7>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_4', matmul.cpp:33) on array 'a' [237]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_4', matmul.cpp:33 on array 'b_copy[4]', matmul.cpp:14 [239]  (2.39 ns)

 <State 8>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_5', matmul.cpp:33) on array 'a' [240]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_5', matmul.cpp:33 on array 'b_copy[5]', matmul.cpp:14 [242]  (2.39 ns)

 <State 9>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_6', matmul.cpp:33) on array 'a' [243]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_6', matmul.cpp:33 on array 'b_copy[6]', matmul.cpp:14 [245]  (2.39 ns)

 <State 10>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_7', matmul.cpp:33) on array 'a' [246]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_7', matmul.cpp:33 on array 'b_copy[7]', matmul.cpp:14 [248]  (2.39 ns)

 <State 11>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_8', matmul.cpp:33) on array 'a' [249]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_8', matmul.cpp:33 on array 'b_copy[8]', matmul.cpp:14 [251]  (2.39 ns)

 <State 12>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_9', matmul.cpp:33) on array 'a' [252]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_9', matmul.cpp:33 on array 'b_copy[9]', matmul.cpp:14 [254]  (2.39 ns)

 <State 13>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_10', matmul.cpp:33) on array 'a' [255]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_10', matmul.cpp:33 on array 'b_copy[10]', matmul.cpp:14 [257]  (2.39 ns)

 <State 14>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_11', matmul.cpp:33) on array 'a' [258]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_11', matmul.cpp:33 on array 'b_copy[11]', matmul.cpp:14 [260]  (2.39 ns)

 <State 15>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_12', matmul.cpp:33) on array 'a' [261]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_12', matmul.cpp:33 on array 'b_copy[12]', matmul.cpp:14 [263]  (2.39 ns)

 <State 16>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_13', matmul.cpp:33) on array 'a' [264]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_13', matmul.cpp:33 on array 'b_copy[13]', matmul.cpp:14 [266]  (2.39 ns)

 <State 17>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_14', matmul.cpp:33) on array 'a' [267]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_14', matmul.cpp:33 on array 'b_copy[14]', matmul.cpp:14 [269]  (2.39 ns)

 <State 18>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_load_15', matmul.cpp:33) on array 'a' [270]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_load_15', matmul.cpp:33 on array 'b_copy[15]', matmul.cpp:14 [272]  (2.39 ns)

 <State 19>: 2.71ns
The critical path consists of the following:
	'or' operation ('tmp_9', matmul.cpp:41) [78]  (0 ns)
	'getelementptr' operation ('a_addr_1', matmul.cpp:27) [80]  (0 ns)
	'load' operation ('a_row[1]', matmul.cpp:27) on array 'a' [128]  (2.71 ns)

 <State 20>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_0_2_load') on local variable 'a_row[0]' [48]  (0 ns)
	'select' operation ('a_row[0]', matmul.cpp:25) [158]  (1.37 ns)
	'mul' operation ('tmp_s', matmul.cpp:38) [282]  (6.68 ns)

 <State 21>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_1_2_load') on local variable 'a_row[1]' [49]  (0 ns)
	'select' operation ('a_row[1]', matmul.cpp:25) [157]  (1.37 ns)
	'mul' operation ('tmp_11_1', matmul.cpp:38) [285]  (6.68 ns)

 <State 22>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_2_2_load') on local variable 'a_row[2]' [50]  (0 ns)
	'select' operation ('a_row[2]', matmul.cpp:25) [156]  (1.37 ns)
	'mul' operation ('tmp_11_2', matmul.cpp:38) [288]  (6.68 ns)

 <State 23>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_3_2_load') on local variable 'a_row[3]' [51]  (0 ns)
	'select' operation ('a_row[3]', matmul.cpp:25) [155]  (1.37 ns)
	'mul' operation ('tmp_11_3', matmul.cpp:38) [291]  (6.68 ns)

 <State 24>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_4_2_load') on local variable 'a_row[4]' [52]  (0 ns)
	'select' operation ('a_row[4]', matmul.cpp:25) [154]  (1.37 ns)
	'mul' operation ('tmp_11_4', matmul.cpp:38) [294]  (6.68 ns)

 <State 25>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_5_2_load') on local variable 'a_row[5]' [53]  (0 ns)
	'select' operation ('a_row[5]', matmul.cpp:25) [153]  (1.37 ns)
	'mul' operation ('tmp_11_5', matmul.cpp:38) [297]  (6.68 ns)

 <State 26>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_6_2_load') on local variable 'a_row[6]' [54]  (0 ns)
	'select' operation ('a_row[6]', matmul.cpp:25) [152]  (1.37 ns)
	'mul' operation ('tmp_11_6', matmul.cpp:38) [300]  (6.68 ns)

 <State 27>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_7_2_load') on local variable 'a_row[7]' [55]  (0 ns)
	'select' operation ('a_row[7]', matmul.cpp:25) [151]  (1.37 ns)
	'mul' operation ('tmp_11_7', matmul.cpp:38) [303]  (6.68 ns)

 <State 28>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_8_2_load') on local variable 'a_row[8]' [56]  (0 ns)
	'select' operation ('a_row[8]', matmul.cpp:25) [150]  (1.37 ns)
	'mul' operation ('tmp_11_8', matmul.cpp:38) [306]  (6.68 ns)

 <State 29>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_9_2_load') on local variable 'a_row[9]' [57]  (0 ns)
	'select' operation ('a_row[9]', matmul.cpp:25) [149]  (1.37 ns)
	'mul' operation ('tmp_11_9', matmul.cpp:38) [309]  (6.68 ns)

 <State 30>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_10_2_load') on local variable 'a_row[10]' [58]  (0 ns)
	'select' operation ('a_row[10]', matmul.cpp:25) [148]  (1.37 ns)
	'mul' operation ('tmp_11_s', matmul.cpp:38) [312]  (6.68 ns)

 <State 31>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_11_2_load') on local variable 'a_row[11]' [59]  (0 ns)
	'select' operation ('a_row[11]', matmul.cpp:25) [147]  (1.37 ns)
	'mul' operation ('tmp_11_10', matmul.cpp:38) [315]  (6.68 ns)

 <State 32>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_12_2_load') on local variable 'a_row[12]' [60]  (0 ns)
	'select' operation ('a_row[12]', matmul.cpp:25) [146]  (1.37 ns)
	'mul' operation ('tmp_11_11', matmul.cpp:38) [318]  (6.68 ns)

 <State 33>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_13_2_load') on local variable 'a_row[13]' [61]  (0 ns)
	'select' operation ('a_row[13]', matmul.cpp:25) [145]  (1.37 ns)
	'mul' operation ('tmp_11_12', matmul.cpp:38) [321]  (6.68 ns)

 <State 34>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_14_2_load') on local variable 'a_row[14]' [62]  (0 ns)
	'select' operation ('a_row[14]', matmul.cpp:25) [144]  (1.37 ns)
	'mul' operation ('tmp_11_13', matmul.cpp:38) [324]  (6.68 ns)

 <State 35>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_s', matmul.cpp:38) [312]  (6.68 ns)

 <State 36>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_10', matmul.cpp:38) [315]  (6.68 ns)

 <State 37>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_11', matmul.cpp:38) [318]  (6.68 ns)

 <State 38>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_12', matmul.cpp:38) [321]  (6.68 ns)

 <State 39>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_13', matmul.cpp:38) [324]  (6.68 ns)

 <State 40>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_14', matmul.cpp:38) [327]  (6.68 ns)

 <State 41>: 7.68ns
The critical path consists of the following:
	'add' operation ('tmp14', matmul.cpp:38) [339]  (1.92 ns)
	'add' operation ('tmp12', matmul.cpp:38) [340]  (1.92 ns)
	'add' operation ('tmp8', matmul.cpp:38) [341]  (1.92 ns)
	'add' operation ('tmp_12_s', matmul.cpp:38) [342]  (1.92 ns)

 <State 42>: 2.71ns
The critical path consists of the following:
	'getelementptr' operation ('a_addr_25', matmul.cpp:41) [279]  (0 ns)
	'store' operation (matmul.cpp:41) of variable 'tmp_12_s', matmul.cpp:38 on array 'a' [343]  (2.71 ns)

 <State 43>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
