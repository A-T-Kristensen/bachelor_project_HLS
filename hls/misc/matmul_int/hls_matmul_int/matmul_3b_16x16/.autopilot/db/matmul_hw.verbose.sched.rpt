

================================================================
== Vivado HLS Report for 'matmul_hw'
================================================================
* Date:           Mon Apr 24 20:59:27 2017

* Version:        2016.4 (Build 1733598 on Wed Dec 14 22:59:20 MST 2016)
* Project:        hls_matmul_int
* Solution:       matmul_3b_16x16
* Product family: artix7
* Target device:  xc7a100tcsg324-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.05|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +------+------+------+------+---------+
    |   Latency   |   Interval  | Pipeline|
    |  min |  max |  min |  max |   Type  |
    +------+------+------+------+---------+
    |  4108|  4108|  4109|  4109|   none  |
    +------+------+------+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+------+------+----------+-----------+-----------+------+----------+
        |          |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+------+------+----------+-----------+-----------+------+----------+
        |- L_col   |  4106|  4106|        27|         16|          1|   256|    yes   |
        +----------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 16, depth = 27


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 29
* Pipeline: 1
  Pipeline-0: II = 16, D = 27, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	29  / (exitcond_flatten)
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	2  / true
29 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: a_row_0_2 (4)  [1/1] 0.00ns
:0  %a_row_0_2 = alloca i32

ST_1: a_row_1_2 (5)  [1/1] 0.00ns
:1  %a_row_1_2 = alloca i32

ST_1: a_row_2_2 (6)  [1/1] 0.00ns
:2  %a_row_2_2 = alloca i32

ST_1: a_row_3_2 (7)  [1/1] 0.00ns
:3  %a_row_3_2 = alloca i32

ST_1: a_row_4_2 (8)  [1/1] 0.00ns
:4  %a_row_4_2 = alloca i32

ST_1: a_row_5_2 (9)  [1/1] 0.00ns
:5  %a_row_5_2 = alloca i32

ST_1: a_row_6_2 (10)  [1/1] 0.00ns
:6  %a_row_6_2 = alloca i32

ST_1: a_row_7_2 (11)  [1/1] 0.00ns
:7  %a_row_7_2 = alloca i32

ST_1: a_row_8_2 (12)  [1/1] 0.00ns
:8  %a_row_8_2 = alloca i32

ST_1: a_row_9_2 (13)  [1/1] 0.00ns
:9  %a_row_9_2 = alloca i32

ST_1: a_row_10_2 (14)  [1/1] 0.00ns
:10  %a_row_10_2 = alloca i32

ST_1: a_row_11_2 (15)  [1/1] 0.00ns
:11  %a_row_11_2 = alloca i32

ST_1: a_row_12_2 (16)  [1/1] 0.00ns
:12  %a_row_12_2 = alloca i32

ST_1: a_row_13_2 (17)  [1/1] 0.00ns
:13  %a_row_13_2 = alloca i32

ST_1: a_row_14_2 (18)  [1/1] 0.00ns
:14  %a_row_14_2 = alloca i32

ST_1: a_row_15_2 (19)  [1/1] 0.00ns
:15  %a_row_15_2 = alloca i32

ST_1: StgValue_46 (20)  [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap([256 x i32]* %a_2), !map !7

ST_1: StgValue_47 (21)  [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecBitsMap([256 x i32]* %a_1), !map !14

ST_1: StgValue_48 (22)  [1/1] 0.00ns
:18  call void (...)* @_ssdm_op_SpecBitsMap([256 x i32]* %a_0), !map !20

ST_1: StgValue_49 (23)  [1/1] 0.00ns
:19  call void (...)* @_ssdm_op_SpecTopModule([10 x i8]* @matmul_hw_str) nounwind

ST_1: b_copy_0 (24)  [1/1] 0.00ns  loc: matmul.cpp:14
:20  %b_copy_0 = alloca [16 x i32], align 16

ST_1: b_copy_1 (25)  [1/1] 0.00ns  loc: matmul.cpp:14
:21  %b_copy_1 = alloca [16 x i32], align 16

ST_1: b_copy_2 (26)  [1/1] 0.00ns  loc: matmul.cpp:14
:22  %b_copy_2 = alloca [16 x i32], align 16

ST_1: b_copy_3 (27)  [1/1] 0.00ns  loc: matmul.cpp:14
:23  %b_copy_3 = alloca [16 x i32], align 16

ST_1: b_copy_4 (28)  [1/1] 0.00ns  loc: matmul.cpp:14
:24  %b_copy_4 = alloca [16 x i32], align 16

ST_1: b_copy_5 (29)  [1/1] 0.00ns  loc: matmul.cpp:14
:25  %b_copy_5 = alloca [16 x i32], align 16

ST_1: b_copy_6 (30)  [1/1] 0.00ns  loc: matmul.cpp:14
:26  %b_copy_6 = alloca [16 x i32], align 16

ST_1: b_copy_7 (31)  [1/1] 0.00ns  loc: matmul.cpp:14
:27  %b_copy_7 = alloca [16 x i32], align 16

ST_1: b_copy_8 (32)  [1/1] 0.00ns  loc: matmul.cpp:14
:28  %b_copy_8 = alloca [16 x i32], align 16

ST_1: b_copy_9 (33)  [1/1] 0.00ns  loc: matmul.cpp:14
:29  %b_copy_9 = alloca [16 x i32], align 16

ST_1: b_copy_10 (34)  [1/1] 0.00ns  loc: matmul.cpp:14
:30  %b_copy_10 = alloca [16 x i32], align 16

ST_1: b_copy_11 (35)  [1/1] 0.00ns  loc: matmul.cpp:14
:31  %b_copy_11 = alloca [16 x i32], align 16

ST_1: b_copy_12 (36)  [1/1] 0.00ns  loc: matmul.cpp:14
:32  %b_copy_12 = alloca [16 x i32], align 16

ST_1: b_copy_13 (37)  [1/1] 0.00ns  loc: matmul.cpp:14
:33  %b_copy_13 = alloca [16 x i32], align 16

ST_1: b_copy_14 (38)  [1/1] 0.00ns  loc: matmul.cpp:14
:34  %b_copy_14 = alloca [16 x i32], align 16

ST_1: b_copy_15 (39)  [1/1] 0.00ns  loc: matmul.cpp:14
:35  %b_copy_15 = alloca [16 x i32], align 16

ST_1: StgValue_66 (40)  [1/1] 0.00ns  loc: matmul.cpp:6
:36  call void (...)* @_ssdm_op_SpecInterface(i32 0, [11 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_67 (41)  [1/1] 0.00ns
:37  call void (...)* @_ssdm_op_SpecInterface([256 x i32]* %a_0, [256 x i32]* %a_1, [256 x i32]* %a_2, [5 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: StgValue_68 (42)  [1/1] 0.00ns
:38  call void (...)* @_ssdm_op_SpecMemCore([256 x i32]* %a_0, [256 x i32]* %a_1, [256 x i32]* %a_2, [1 x i8]* @p_str1, [12 x i8]* @p_str4, [1 x i8]* @p_str1, i32 -1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: StgValue_69 (43)  [1/1] 1.57ns  loc: matmul.cpp:19
:39  br label %.preheader7


 <State 2>: 6.45ns
ST_2: indvar_flatten (45)  [1/1] 0.00ns
.preheader7:0  %indvar_flatten = phi i9 [ 0, %0 ], [ %indvar_flatten_next, %.loopexit ]

ST_2: i (46)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7:1  %i = phi i5 [ 0, %0 ], [ %i2_mid2_v, %.loopexit ]

ST_2: j (47)  [1/1] 0.00ns
.preheader7:2  %j = phi i5 [ 0, %0 ], [ %j_1, %.loopexit ]

ST_2: exitcond_flatten (48)  [1/1] 2.51ns
.preheader7:3  %exitcond_flatten = icmp eq i9 %indvar_flatten, -256

ST_2: indvar_flatten_next (49)  [1/1] 1.79ns
.preheader7:4  %indvar_flatten_next = add i9 %indvar_flatten, 1

ST_2: StgValue_75 (50)  [1/1] 0.00ns
.preheader7:5  br i1 %exitcond_flatten, label %1, label %.preheader7.preheader

ST_2: i_1 (68)  [1/1] 1.67ns  loc: matmul.cpp:19
.preheader7.preheader:16  %i_1 = add i5 %i, 1

ST_2: exitcond (71)  [1/1] 2.37ns  loc: matmul.cpp:20
.preheader7.preheader:19  %exitcond = icmp eq i5 %j, -16

ST_2: j_mid2 (72)  [1/1] 1.37ns  loc: matmul.cpp:20
.preheader7.preheader:20  %j_mid2 = select i1 %exitcond, i5 0, i5 %j

ST_2: tmp_mid1 (73)  [1/1] 2.37ns  loc: matmul.cpp:31
.preheader7.preheader:21  %tmp_mid1 = icmp eq i5 %i_1, 0

ST_2: tmp (74)  [1/1] 2.37ns  loc: matmul.cpp:31
.preheader7.preheader:22  %tmp = icmp eq i5 %i, 0

ST_2: tmp_mid2 (75)  [1/1] 1.37ns  loc: matmul.cpp:31
.preheader7.preheader:23  %tmp_mid2 = select i1 %exitcond, i1 %tmp_mid1, i1 %tmp

ST_2: i2_mid2_v (76)  [1/1] 1.37ns  loc: matmul.cpp:20
.preheader7.preheader:24  %i2_mid2_v = select i1 %exitcond, i5 %i_1, i5 %i

ST_2: tmp_2 (77)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:25  %tmp_2 = call i9 @_ssdm_op_BitConcatenate.i9.i5.i4(i5 %i2_mid2_v, i4 0)

ST_2: tmp_3 (78)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:26  %tmp_3 = zext i9 %tmp_2 to i64

ST_2: a_0_addr (80)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:28  %a_0_addr = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_3

ST_2: a_row_0 (130)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:78  %a_row_0 = load i32* %a_0_addr, align 4

ST_2: StgValue_87 (178)  [1/1] 0.00ns  loc: matmul.cpp:31
.preheader7.preheader:126  br i1 %tmp_mid2, label %.preheader.preheader, label %.loopexit

ST_2: tmp_8 (180)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:0  %tmp_8 = zext i5 %j_mid2 to i64

ST_2: a_1_addr (185)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:5  %a_1_addr = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_8

ST_2: a_1_load (224)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:44  %a_1_load = load i32* %a_1_addr, align 4


 <State 3>: 5.10ns
ST_3: tmp_4 (81)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:29  %tmp_4 = or i9 %tmp_2, 1

ST_3: tmp_6 (82)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:30  %tmp_6 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_4)

ST_3: a_0_addr_1 (83)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:31  %a_0_addr_1 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_6

ST_3: a_row_0 (130)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:78  %a_row_0 = load i32* %a_0_addr, align 4

ST_3: a_row_1 (131)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:79  %a_row_1 = load i32* %a_0_addr_1, align 4

ST_3: tmp_8_cast (184)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:4  %tmp_8_cast = zext i5 %j_mid2 to i6

ST_3: tmp_37 (186)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:6  %tmp_37 = add i6 %tmp_8_cast, 16

ST_3: tmp_37_cast (187)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:7  %tmp_37_cast = zext i6 %tmp_37 to i64

ST_3: a_1_addr_1 (188)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:8  %a_1_addr_1 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_37_cast

ST_3: a_1_load (224)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:44  %a_1_load = load i32* %a_1_addr, align 4

ST_3: b_copy_0_addr (225)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:45  %b_copy_0_addr = getelementptr [16 x i32]* %b_copy_0, i64 0, i64 %tmp_8

ST_3: StgValue_102 (226)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:46  store i32 %a_1_load, i32* %b_copy_0_addr, align 4

ST_3: a_1_load_1 (227)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:47  %a_1_load_1 = load i32* %a_1_addr_1, align 4


 <State 4>: 5.10ns
ST_4: tmp_9 (84)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:32  %tmp_9 = or i9 %tmp_2, 2

ST_4: tmp_10 (85)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:33  %tmp_10 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_9)

ST_4: a_0_addr_2 (86)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:34  %a_0_addr_2 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_10

ST_4: a_row_1 (131)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:79  %a_row_1 = load i32* %a_0_addr_1, align 4

ST_4: a_row_2 (132)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:80  %a_row_2 = load i32* %a_0_addr_2, align 4

ST_4: tmp_38 (189)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:9  %tmp_38 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 1, i5 %j_mid2)

ST_4: a_1_addr_2 (190)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:10  %a_1_addr_2 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_38

ST_4: a_1_load_1 (227)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:47  %a_1_load_1 = load i32* %a_1_addr_1, align 4

ST_4: b_copy_1_addr (228)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:48  %b_copy_1_addr = getelementptr [16 x i32]* %b_copy_1, i64 0, i64 %tmp_8

ST_4: StgValue_113 (229)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:49  store i32 %a_1_load_1, i32* %b_copy_1_addr, align 4

ST_4: a_1_load_2 (230)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:50  %a_1_load_2 = load i32* %a_1_addr_2, align 4

ST_4: tmp_7 (274)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:0  %tmp_7 = zext i5 %j_mid2 to i64

ST_4: b_copy_0_addr_1 (279)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:5  %b_copy_0_addr_1 = getelementptr [16 x i32]* %b_copy_0, i64 0, i64 %tmp_7

ST_4: b_copy_0_load (280)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:6  %b_copy_0_load = load i32* %b_copy_0_addr_1, align 4


 <State 5>: 5.10ns
ST_5: tmp_11 (87)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:35  %tmp_11 = or i9 %tmp_2, 3

ST_5: tmp_12 (88)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:36  %tmp_12 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_11)

ST_5: a_0_addr_3 (89)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:37  %a_0_addr_3 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_12

ST_5: tmp_5 (129)  [1/1] 2.37ns  loc: matmul.cpp:25
.preheader7.preheader:77  %tmp_5 = icmp eq i5 %j_mid2, 0

ST_5: a_row_2 (132)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:80  %a_row_2 = load i32* %a_0_addr_2, align 4

ST_5: a_row_3 (133)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:81  %a_row_3 = load i32* %a_0_addr_3, align 4

ST_5: tmp_8_cast20_cast (183)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:3  %tmp_8_cast20_cast = zext i5 %j_mid2 to i7

ST_5: tmp_39 (191)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:11  %tmp_39 = add i7 %tmp_8_cast20_cast, 48

ST_5: tmp_39_cast (192)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:12  %tmp_39_cast = zext i7 %tmp_39 to i64

ST_5: a_1_addr_3 (193)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:13  %a_1_addr_3 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_39_cast

ST_5: a_1_load_2 (230)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:50  %a_1_load_2 = load i32* %a_1_addr_2, align 4

ST_5: b_copy_2_addr (231)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:51  %b_copy_2_addr = getelementptr [16 x i32]* %b_copy_2, i64 0, i64 %tmp_8

ST_5: StgValue_130 (232)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:52  store i32 %a_1_load_2, i32* %b_copy_2_addr, align 4

ST_5: a_1_load_3 (233)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:53  %a_1_load_3 = load i32* %a_1_addr_3, align 4

ST_5: b_copy_0_load (280)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:6  %b_copy_0_load = load i32* %b_copy_0_addr_1, align 4

ST_5: b_copy_1_addr_1 (282)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:8  %b_copy_1_addr_1 = getelementptr [16 x i32]* %b_copy_1, i64 0, i64 %tmp_7

ST_5: b_copy_1_load (283)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:9  %b_copy_1_load = load i32* %b_copy_1_addr_1, align 4


 <State 6>: 8.05ns
ST_6: a_row_0_2_load (52)  [1/1] 0.00ns
.preheader7.preheader:0  %a_row_0_2_load = load i32* %a_row_0_2

ST_6: tmp_13 (90)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:38  %tmp_13 = or i9 %tmp_2, 4

ST_6: tmp_14 (91)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:39  %tmp_14 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_13)

ST_6: a_0_addr_4 (92)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:40  %a_0_addr_4 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_14

ST_6: a_row_3 (133)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:81  %a_row_3 = load i32* %a_0_addr_3, align 4

ST_6: a_row_4 (134)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:82  %a_row_4 = load i32* %a_0_addr_4, align 4

ST_6: a_row_0_1 (161)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:109  %a_row_0_1 = select i1 %tmp_5, i32 %a_row_0, i32 %a_row_0_2_load

ST_6: StgValue_142 (177)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:125  store i32 %a_row_0_1, i32* %a_row_0_2

ST_6: tmp_40 (194)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:14  %tmp_40 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 2, i5 %j_mid2)

ST_6: a_1_addr_4 (195)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:15  %a_1_addr_4 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_40

ST_6: a_1_load_3 (233)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:53  %a_1_load_3 = load i32* %a_1_addr_3, align 4

ST_6: b_copy_3_addr (234)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:54  %b_copy_3_addr = getelementptr [16 x i32]* %b_copy_3, i64 0, i64 %tmp_8

ST_6: StgValue_147 (235)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:55  store i32 %a_1_load_3, i32* %b_copy_3_addr, align 4

ST_6: a_1_load_4 (236)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:56  %a_1_load_4 = load i32* %a_1_addr_4, align 4

ST_6: tmp_s (281)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_6: b_copy_1_load (283)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:9  %b_copy_1_load = load i32* %b_copy_1_addr_1, align 4

ST_6: b_copy_2_addr_1 (285)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:11  %b_copy_2_addr_1 = getelementptr [16 x i32]* %b_copy_2, i64 0, i64 %tmp_7

ST_6: b_copy_2_load (286)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:12  %b_copy_2_load = load i32* %b_copy_2_addr_1, align 4


 <State 7>: 8.05ns
ST_7: a_row_1_2_load (53)  [1/1] 0.00ns
.preheader7.preheader:1  %a_row_1_2_load = load i32* %a_row_1_2

ST_7: tmp_15 (93)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:41  %tmp_15 = or i9 %tmp_2, 5

ST_7: tmp_16 (94)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:42  %tmp_16 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_15)

ST_7: a_0_addr_5 (95)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:43  %a_0_addr_5 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_16

ST_7: a_row_4 (134)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:82  %a_row_4 = load i32* %a_0_addr_4, align 4

ST_7: a_row_5 (135)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:83  %a_row_5 = load i32* %a_0_addr_5, align 4

ST_7: a_row_1_1 (160)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:108  %a_row_1_1 = select i1 %tmp_5, i32 %a_row_1, i32 %a_row_1_2_load

ST_7: StgValue_160 (176)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:124  store i32 %a_row_1_1, i32* %a_row_1_2

ST_7: tmp_41 (196)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:16  %tmp_41 = add i7 %tmp_8_cast20_cast, -48

ST_7: tmp_41_cast (197)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:17  %tmp_41_cast = zext i7 %tmp_41 to i64

ST_7: a_1_addr_5 (198)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:18  %a_1_addr_5 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_41_cast

ST_7: a_1_load_4 (236)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:56  %a_1_load_4 = load i32* %a_1_addr_4, align 4

ST_7: b_copy_4_addr (237)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:57  %b_copy_4_addr = getelementptr [16 x i32]* %b_copy_4, i64 0, i64 %tmp_8

ST_7: StgValue_166 (238)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:58  store i32 %a_1_load_4, i32* %b_copy_4_addr, align 4

ST_7: a_1_load_5 (239)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:59  %a_1_load_5 = load i32* %a_1_addr_5, align 4

ST_7: tmp_s (281)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_7: tmp_11_1 (284)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_7: b_copy_2_load (286)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:12  %b_copy_2_load = load i32* %b_copy_2_addr_1, align 4

ST_7: b_copy_3_addr_1 (288)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:14  %b_copy_3_addr_1 = getelementptr [16 x i32]* %b_copy_3, i64 0, i64 %tmp_7

ST_7: b_copy_3_load (289)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:15  %b_copy_3_load = load i32* %b_copy_3_addr_1, align 4


 <State 8>: 8.05ns
ST_8: a_row_2_2_load (54)  [1/1] 0.00ns
.preheader7.preheader:2  %a_row_2_2_load = load i32* %a_row_2_2

ST_8: tmp_17 (96)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:44  %tmp_17 = or i9 %tmp_2, 6

ST_8: tmp_18 (97)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:45  %tmp_18 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_17)

ST_8: a_0_addr_6 (98)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:46  %a_0_addr_6 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_18

ST_8: a_row_5 (135)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:83  %a_row_5 = load i32* %a_0_addr_5, align 4

ST_8: a_row_6 (136)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:84  %a_row_6 = load i32* %a_0_addr_6, align 4

ST_8: a_row_2_1 (159)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:107  %a_row_2_1 = select i1 %tmp_5, i32 %a_row_2, i32 %a_row_2_2_load

ST_8: StgValue_180 (175)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:123  store i32 %a_row_2_1, i32* %a_row_2_2

ST_8: tmp_42 (199)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:19  %tmp_42 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 3, i5 %j_mid2)

ST_8: a_1_addr_6 (200)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:20  %a_1_addr_6 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_42

ST_8: a_1_load_5 (239)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:59  %a_1_load_5 = load i32* %a_1_addr_5, align 4

ST_8: b_copy_5_addr (240)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:60  %b_copy_5_addr = getelementptr [16 x i32]* %b_copy_5, i64 0, i64 %tmp_8

ST_8: StgValue_185 (241)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:61  store i32 %a_1_load_5, i32* %b_copy_5_addr, align 4

ST_8: a_1_load_6 (242)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:62  %a_1_load_6 = load i32* %a_1_addr_6, align 4

ST_8: tmp_s (281)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_8: tmp_11_1 (284)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_8: tmp_11_2 (287)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_8: b_copy_3_load (289)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:15  %b_copy_3_load = load i32* %b_copy_3_addr_1, align 4

ST_8: b_copy_4_addr_1 (291)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:17  %b_copy_4_addr_1 = getelementptr [16 x i32]* %b_copy_4, i64 0, i64 %tmp_7

ST_8: b_copy_4_load (292)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:18  %b_copy_4_load = load i32* %b_copy_4_addr_1, align 4


 <State 9>: 8.05ns
ST_9: a_row_3_2_load (55)  [1/1] 0.00ns
.preheader7.preheader:3  %a_row_3_2_load = load i32* %a_row_3_2

ST_9: tmp_19 (99)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:47  %tmp_19 = or i9 %tmp_2, 7

ST_9: tmp_20 (100)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:48  %tmp_20 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_19)

ST_9: a_0_addr_7 (101)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:49  %a_0_addr_7 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_20

ST_9: a_row_6 (136)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:84  %a_row_6 = load i32* %a_0_addr_6, align 4

ST_9: a_row_7 (137)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:85  %a_row_7 = load i32* %a_0_addr_7, align 4

ST_9: a_row_3_1 (158)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:106  %a_row_3_1 = select i1 %tmp_5, i32 %a_row_3, i32 %a_row_3_2_load

ST_9: StgValue_200 (174)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:122  store i32 %a_row_3_1, i32* %a_row_3_2

ST_9: tmp_8_cast2 (182)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:2  %tmp_8_cast2 = zext i5 %j_mid2 to i8

ST_9: tmp_43 (201)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:21  %tmp_43 = add i8 %tmp_8_cast2, 112

ST_9: tmp_43_cast (202)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:22  %tmp_43_cast = zext i8 %tmp_43 to i64

ST_9: a_1_addr_7 (203)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:23  %a_1_addr_7 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_43_cast

ST_9: a_1_load_6 (242)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:62  %a_1_load_6 = load i32* %a_1_addr_6, align 4

ST_9: b_copy_6_addr (243)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:63  %b_copy_6_addr = getelementptr [16 x i32]* %b_copy_6, i64 0, i64 %tmp_8

ST_9: StgValue_207 (244)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:64  store i32 %a_1_load_6, i32* %b_copy_6_addr, align 4

ST_9: a_1_load_7 (245)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:65  %a_1_load_7 = load i32* %a_1_addr_7, align 4

ST_9: tmp_s (281)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_9: tmp_11_1 (284)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_9: tmp_11_2 (287)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_9: tmp_11_3 (290)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_9: b_copy_4_load (292)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:18  %b_copy_4_load = load i32* %b_copy_4_addr_1, align 4

ST_9: b_copy_5_addr_1 (294)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:20  %b_copy_5_addr_1 = getelementptr [16 x i32]* %b_copy_5, i64 0, i64 %tmp_7

ST_9: b_copy_5_load (295)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:21  %b_copy_5_load = load i32* %b_copy_5_addr_1, align 4


 <State 10>: 8.05ns
ST_10: a_row_4_2_load (56)  [1/1] 0.00ns
.preheader7.preheader:4  %a_row_4_2_load = load i32* %a_row_4_2

ST_10: tmp_21 (102)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:50  %tmp_21 = or i9 %tmp_2, 8

ST_10: tmp_22 (103)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:51  %tmp_22 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_21)

ST_10: a_0_addr_8 (104)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:52  %a_0_addr_8 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_22

ST_10: a_row_7 (137)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:85  %a_row_7 = load i32* %a_0_addr_7, align 4

ST_10: a_row_8 (138)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:86  %a_row_8 = load i32* %a_0_addr_8, align 4

ST_10: a_row_4_1 (157)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:105  %a_row_4_1 = select i1 %tmp_5, i32 %a_row_4, i32 %a_row_4_2_load

ST_10: StgValue_223 (173)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:121  store i32 %a_row_4_1, i32* %a_row_4_2

ST_10: tmp_44 (204)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:24  %tmp_44 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 4, i5 %j_mid2)

ST_10: a_1_addr_8 (205)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:25  %a_1_addr_8 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_44

ST_10: a_1_load_7 (245)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:65  %a_1_load_7 = load i32* %a_1_addr_7, align 4

ST_10: b_copy_7_addr (246)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:66  %b_copy_7_addr = getelementptr [16 x i32]* %b_copy_7, i64 0, i64 %tmp_8

ST_10: StgValue_228 (247)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:67  store i32 %a_1_load_7, i32* %b_copy_7_addr, align 4

ST_10: a_1_load_8 (248)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:68  %a_1_load_8 = load i32* %a_1_addr_8, align 4

ST_10: tmp_s (281)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_10: tmp_11_1 (284)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_10: tmp_11_2 (287)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_10: tmp_11_3 (290)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_10: tmp_11_4 (293)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_10: b_copy_5_load (295)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:21  %b_copy_5_load = load i32* %b_copy_5_addr_1, align 4

ST_10: b_copy_6_addr_1 (297)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:23  %b_copy_6_addr_1 = getelementptr [16 x i32]* %b_copy_6, i64 0, i64 %tmp_7

ST_10: b_copy_6_load (298)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:24  %b_copy_6_load = load i32* %b_copy_6_addr_1, align 4


 <State 11>: 8.05ns
ST_11: a_row_5_2_load (57)  [1/1] 0.00ns
.preheader7.preheader:5  %a_row_5_2_load = load i32* %a_row_5_2

ST_11: tmp_23 (105)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:53  %tmp_23 = or i9 %tmp_2, 9

ST_11: tmp_24 (106)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:54  %tmp_24 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_23)

ST_11: a_0_addr_9 (107)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:55  %a_0_addr_9 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_24

ST_11: a_row_8 (138)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:86  %a_row_8 = load i32* %a_0_addr_8, align 4

ST_11: a_row_9 (139)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:87  %a_row_9 = load i32* %a_0_addr_9, align 4

ST_11: a_row_5_1 (156)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:104  %a_row_5_1 = select i1 %tmp_5, i32 %a_row_5, i32 %a_row_5_2_load

ST_11: StgValue_245 (172)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:120  store i32 %a_row_5_1, i32* %a_row_5_2

ST_11: tmp_45 (206)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:26  %tmp_45 = add i8 %tmp_8_cast2, -112

ST_11: tmp_45_cast (207)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:27  %tmp_45_cast = zext i8 %tmp_45 to i64

ST_11: a_1_addr_9 (208)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:28  %a_1_addr_9 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_45_cast

ST_11: a_1_load_8 (248)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:68  %a_1_load_8 = load i32* %a_1_addr_8, align 4

ST_11: b_copy_8_addr (249)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:69  %b_copy_8_addr = getelementptr [16 x i32]* %b_copy_8, i64 0, i64 %tmp_8

ST_11: StgValue_251 (250)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:70  store i32 %a_1_load_8, i32* %b_copy_8_addr, align 4

ST_11: a_1_load_9 (251)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:71  %a_1_load_9 = load i32* %a_1_addr_9, align 4

ST_11: tmp_s (281)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:7  %tmp_s = mul nsw i32 %a_row_0_1, %b_copy_0_load

ST_11: tmp_11_1 (284)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_11: tmp_11_2 (287)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_11: tmp_11_3 (290)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_11: tmp_11_4 (293)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_11: tmp_11_5 (296)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_11: b_copy_6_load (298)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:24  %b_copy_6_load = load i32* %b_copy_6_addr_1, align 4

ST_11: b_copy_7_addr_1 (300)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:26  %b_copy_7_addr_1 = getelementptr [16 x i32]* %b_copy_7, i64 0, i64 %tmp_7

ST_11: b_copy_7_load (301)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:27  %b_copy_7_load = load i32* %b_copy_7_addr_1, align 4


 <State 12>: 8.05ns
ST_12: a_row_6_2_load (58)  [1/1] 0.00ns
.preheader7.preheader:6  %a_row_6_2_load = load i32* %a_row_6_2

ST_12: tmp_25 (108)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:56  %tmp_25 = or i9 %tmp_2, 10

ST_12: tmp_26 (109)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:57  %tmp_26 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_25)

ST_12: a_0_addr_10 (110)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:58  %a_0_addr_10 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_26

ST_12: a_row_9 (139)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:87  %a_row_9 = load i32* %a_0_addr_9, align 4

ST_12: a_row_10 (140)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:88  %a_row_10 = load i32* %a_0_addr_10, align 4

ST_12: a_row_6_1 (155)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:103  %a_row_6_1 = select i1 %tmp_5, i32 %a_row_6, i32 %a_row_6_2_load

ST_12: StgValue_269 (171)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:119  store i32 %a_row_6_1, i32* %a_row_6_2

ST_12: tmp_46 (209)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:29  %tmp_46 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 5, i5 %j_mid2)

ST_12: a_1_addr_10 (210)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:30  %a_1_addr_10 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_46

ST_12: a_1_load_9 (251)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:71  %a_1_load_9 = load i32* %a_1_addr_9, align 4

ST_12: b_copy_9_addr (252)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:72  %b_copy_9_addr = getelementptr [16 x i32]* %b_copy_9, i64 0, i64 %tmp_8

ST_12: StgValue_274 (253)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:73  store i32 %a_1_load_9, i32* %b_copy_9_addr, align 4

ST_12: a_1_load_10 (254)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:74  %a_1_load_10 = load i32* %a_1_addr_10, align 4

ST_12: tmp_11_1 (284)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:10  %tmp_11_1 = mul nsw i32 %a_row_1_1, %b_copy_1_load

ST_12: tmp_11_2 (287)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_12: tmp_11_3 (290)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_12: tmp_11_4 (293)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_12: tmp_11_5 (296)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_12: tmp_11_6 (299)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_12: b_copy_7_load (301)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:27  %b_copy_7_load = load i32* %b_copy_7_addr_1, align 4

ST_12: b_copy_8_addr_1 (303)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:29  %b_copy_8_addr_1 = getelementptr [16 x i32]* %b_copy_8, i64 0, i64 %tmp_7

ST_12: b_copy_8_load (304)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:30  %b_copy_8_load = load i32* %b_copy_8_addr_1, align 4


 <State 13>: 8.05ns
ST_13: a_row_7_2_load (59)  [1/1] 0.00ns
.preheader7.preheader:7  %a_row_7_2_load = load i32* %a_row_7_2

ST_13: tmp_27 (111)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:59  %tmp_27 = or i9 %tmp_2, 11

ST_13: tmp_28 (112)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:60  %tmp_28 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_27)

ST_13: a_0_addr_11 (113)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:61  %a_0_addr_11 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_28

ST_13: a_row_10 (140)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:88  %a_row_10 = load i32* %a_0_addr_10, align 4

ST_13: a_row_11 (141)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:89  %a_row_11 = load i32* %a_0_addr_11, align 4

ST_13: a_row_7_1 (154)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:102  %a_row_7_1 = select i1 %tmp_5, i32 %a_row_7, i32 %a_row_7_2_load

ST_13: StgValue_292 (170)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:118  store i32 %a_row_7_1, i32* %a_row_7_2

ST_13: tmp_47 (211)  [1/1] 1.67ns  loc: matmul.cpp:20
.preheader.preheader:31  %tmp_47 = add i8 %tmp_8_cast2, -80

ST_13: tmp_47_cast (212)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:32  %tmp_47_cast = zext i8 %tmp_47 to i64

ST_13: a_1_addr_11 (213)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:33  %a_1_addr_11 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_47_cast

ST_13: a_1_load_10 (254)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:74  %a_1_load_10 = load i32* %a_1_addr_10, align 4

ST_13: b_copy_10_addr (255)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:75  %b_copy_10_addr = getelementptr [16 x i32]* %b_copy_10, i64 0, i64 %tmp_8

ST_13: StgValue_298 (256)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:76  store i32 %a_1_load_10, i32* %b_copy_10_addr, align 4

ST_13: a_1_load_11 (257)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:77  %a_1_load_11 = load i32* %a_1_addr_11, align 4

ST_13: tmp_11_2 (287)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:13  %tmp_11_2 = mul nsw i32 %a_row_2_1, %b_copy_2_load

ST_13: tmp_11_3 (290)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_13: tmp_11_4 (293)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_13: tmp_11_5 (296)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_13: tmp_11_6 (299)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_13: tmp_11_7 (302)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_13: b_copy_8_load (304)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:30  %b_copy_8_load = load i32* %b_copy_8_addr_1, align 4

ST_13: b_copy_9_addr_1 (306)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:32  %b_copy_9_addr_1 = getelementptr [16 x i32]* %b_copy_9, i64 0, i64 %tmp_7

ST_13: b_copy_9_load (307)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:33  %b_copy_9_load = load i32* %b_copy_9_addr_1, align 4

ST_13: tmp3 (327)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:53  %tmp3 = add i32 %tmp_11_1, %tmp_s


 <State 14>: 8.05ns
ST_14: a_row_8_2_load (60)  [1/1] 0.00ns
.preheader7.preheader:8  %a_row_8_2_load = load i32* %a_row_8_2

ST_14: tmp_29 (114)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:62  %tmp_29 = or i9 %tmp_2, 12

ST_14: tmp_30 (115)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:63  %tmp_30 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_29)

ST_14: a_0_addr_12 (116)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:64  %a_0_addr_12 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_30

ST_14: a_row_11 (141)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:89  %a_row_11 = load i32* %a_0_addr_11, align 4

ST_14: a_row_12 (142)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:90  %a_row_12 = load i32* %a_0_addr_12, align 4

ST_14: a_row_8_1 (153)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:101  %a_row_8_1 = select i1 %tmp_5, i32 %a_row_8, i32 %a_row_8_2_load

ST_14: StgValue_317 (169)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:117  store i32 %a_row_8_1, i32* %a_row_8_2

ST_14: tmp_48 (214)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:34  %tmp_48 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 6, i5 %j_mid2)

ST_14: a_1_addr_12 (215)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:35  %a_1_addr_12 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_48

ST_14: a_1_load_11 (257)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:77  %a_1_load_11 = load i32* %a_1_addr_11, align 4

ST_14: b_copy_11_addr (258)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:78  %b_copy_11_addr = getelementptr [16 x i32]* %b_copy_11, i64 0, i64 %tmp_8

ST_14: StgValue_322 (259)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:79  store i32 %a_1_load_11, i32* %b_copy_11_addr, align 4

ST_14: a_1_load_12 (260)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:80  %a_1_load_12 = load i32* %a_1_addr_12, align 4

ST_14: tmp_11_3 (290)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:16  %tmp_11_3 = mul nsw i32 %a_row_3_1, %b_copy_3_load

ST_14: tmp_11_4 (293)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_14: tmp_11_5 (296)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_14: tmp_11_6 (299)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_14: tmp_11_7 (302)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_14: tmp_11_8 (305)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_14: b_copy_9_load (307)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:33  %b_copy_9_load = load i32* %b_copy_9_addr_1, align 4

ST_14: b_copy_10_addr_1 (309)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:35  %b_copy_10_addr_1 = getelementptr [16 x i32]* %b_copy_10, i64 0, i64 %tmp_7

ST_14: b_copy_10_load (310)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:36  %b_copy_10_load = load i32* %b_copy_10_addr_1, align 4


 <State 15>: 8.05ns
ST_15: a_row_9_2_load (61)  [1/1] 0.00ns
.preheader7.preheader:9  %a_row_9_2_load = load i32* %a_row_9_2

ST_15: tmp_31 (117)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:65  %tmp_31 = or i9 %tmp_2, 13

ST_15: tmp_32 (118)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:66  %tmp_32 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_31)

ST_15: a_0_addr_13 (119)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:67  %a_0_addr_13 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_32

ST_15: a_row_12 (142)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:90  %a_row_12 = load i32* %a_0_addr_12, align 4

ST_15: a_row_13 (143)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:91  %a_row_13 = load i32* %a_0_addr_13, align 4

ST_15: a_row_9_1 (152)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:100  %a_row_9_1 = select i1 %tmp_5, i32 %a_row_9, i32 %a_row_9_2_load

ST_15: StgValue_340 (168)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:116  store i32 %a_row_9_1, i32* %a_row_9_2

ST_15: tmp_49_cast1 (216)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:36  %tmp_49_cast1 = sext i7 %tmp_41 to i8

ST_15: tmp_49_cast (217)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:37  %tmp_49_cast = zext i8 %tmp_49_cast1 to i64

ST_15: a_1_addr_13 (218)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:38  %a_1_addr_13 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_49_cast

ST_15: a_1_load_12 (260)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:80  %a_1_load_12 = load i32* %a_1_addr_12, align 4

ST_15: b_copy_12_addr (261)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:81  %b_copy_12_addr = getelementptr [16 x i32]* %b_copy_12, i64 0, i64 %tmp_8

ST_15: StgValue_346 (262)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:82  store i32 %a_1_load_12, i32* %b_copy_12_addr, align 4

ST_15: a_1_load_13 (263)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:83  %a_1_load_13 = load i32* %a_1_addr_13, align 4

ST_15: tmp_11_4 (293)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:19  %tmp_11_4 = mul nsw i32 %a_row_4_1, %b_copy_4_load

ST_15: tmp_11_5 (296)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_15: tmp_11_6 (299)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_15: tmp_11_7 (302)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_15: tmp_11_8 (305)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_15: tmp_11_9 (308)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_15: b_copy_10_load (310)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:36  %b_copy_10_load = load i32* %b_copy_10_addr_1, align 4

ST_15: b_copy_11_addr_1 (312)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:38  %b_copy_11_addr_1 = getelementptr [16 x i32]* %b_copy_11, i64 0, i64 %tmp_7

ST_15: b_copy_11_load (313)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:39  %b_copy_11_load = load i32* %b_copy_11_addr_1, align 4

ST_15: tmp4 (328)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:54  %tmp4 = add i32 %tmp_11_3, %tmp_11_2

ST_15: tmp2 (329)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:55  %tmp2 = add i32 %tmp3, %tmp4


 <State 16>: 8.05ns
ST_16: a_row_10_2_load (62)  [1/1] 0.00ns
.preheader7.preheader:10  %a_row_10_2_load = load i32* %a_row_10_2

ST_16: tmp_33 (120)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:68  %tmp_33 = or i9 %tmp_2, 14

ST_16: tmp_34 (121)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:69  %tmp_34 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_33)

ST_16: a_0_addr_14 (122)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:70  %a_0_addr_14 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_34

ST_16: a_row_13 (143)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:91  %a_row_13 = load i32* %a_0_addr_13, align 4

ST_16: a_row_14 (144)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:92  %a_row_14 = load i32* %a_0_addr_14, align 4

ST_16: a_row_10_1 (151)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:99  %a_row_10_1 = select i1 %tmp_5, i32 %a_row_10, i32 %a_row_10_2_load

ST_16: StgValue_366 (167)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:115  store i32 %a_row_10_1, i32* %a_row_10_2

ST_16: tmp_49 (219)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:39  %tmp_49 = call i64 @_ssdm_op_BitConcatenate.i64.i59.i5(i59 7, i5 %j_mid2)

ST_16: a_1_addr_14 (220)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:40  %a_1_addr_14 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_49

ST_16: a_1_load_13 (263)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:83  %a_1_load_13 = load i32* %a_1_addr_13, align 4

ST_16: b_copy_13_addr (264)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:84  %b_copy_13_addr = getelementptr [16 x i32]* %b_copy_13, i64 0, i64 %tmp_8

ST_16: StgValue_371 (265)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:85  store i32 %a_1_load_13, i32* %b_copy_13_addr, align 4

ST_16: a_1_load_14 (266)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:86  %a_1_load_14 = load i32* %a_1_addr_14, align 4

ST_16: tmp_11_5 (296)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:22  %tmp_11_5 = mul nsw i32 %a_row_5_1, %b_copy_5_load

ST_16: tmp_11_6 (299)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_16: tmp_11_7 (302)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_16: tmp_11_8 (305)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_16: tmp_11_9 (308)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_16: tmp_11_s (311)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_16: b_copy_11_load (313)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:39  %b_copy_11_load = load i32* %b_copy_11_addr_1, align 4

ST_16: b_copy_12_addr_1 (315)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:41  %b_copy_12_addr_1 = getelementptr [16 x i32]* %b_copy_12, i64 0, i64 %tmp_7

ST_16: b_copy_12_load (316)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:42  %b_copy_12_load = load i32* %b_copy_12_addr_1, align 4


 <State 17>: 8.05ns
ST_17: a_row_11_2_load (63)  [1/1] 0.00ns
.preheader7.preheader:11  %a_row_11_2_load = load i32* %a_row_11_2

ST_17: tmp_3_cast (79)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:27  %tmp_3_cast = zext i9 %tmp_2 to i10

ST_17: tmp_35 (123)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:71  %tmp_35 = or i9 %tmp_2, 15

ST_17: tmp_36 (124)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:72  %tmp_36 = call i64 @_ssdm_op_BitConcatenate.i64.i55.i9(i55 0, i9 %tmp_35)

ST_17: a_0_addr_15 (125)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:73  %a_0_addr_15 = getelementptr [256 x i32]* %a_0, i64 0, i64 %tmp_36

ST_17: a_row_14 (144)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:92  %a_row_14 = load i32* %a_0_addr_14, align 4

ST_17: a_row_15 (145)  [2/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:93  %a_row_15 = load i32* %a_0_addr_15, align 4

ST_17: a_row_11_1 (150)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:98  %a_row_11_1 = select i1 %tmp_5, i32 %a_row_11, i32 %a_row_11_2_load

ST_17: StgValue_390 (166)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:114  store i32 %a_row_11_1, i32* %a_row_11_2

ST_17: tmp_8_cast1 (181)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:1  %tmp_8_cast1 = zext i5 %j_mid2 to i9

ST_17: tmp_50 (221)  [1/1] 1.79ns  loc: matmul.cpp:20
.preheader.preheader:41  %tmp_50 = add i9 %tmp_8_cast1, 240

ST_17: tmp_51_cast (222)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:42  %tmp_51_cast = zext i9 %tmp_50 to i64

ST_17: a_1_addr_15 (223)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader.preheader:43  %a_1_addr_15 = getelementptr [256 x i32]* %a_1, i64 0, i64 %tmp_51_cast

ST_17: a_1_load_14 (266)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:86  %a_1_load_14 = load i32* %a_1_addr_14, align 4

ST_17: b_copy_14_addr (267)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:87  %b_copy_14_addr = getelementptr [16 x i32]* %b_copy_14, i64 0, i64 %tmp_8

ST_17: StgValue_397 (268)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:88  store i32 %a_1_load_14, i32* %b_copy_14_addr, align 4

ST_17: a_1_load_15 (269)  [2/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:89  %a_1_load_15 = load i32* %a_1_addr_15, align 4

ST_17: tmp_7_cast (275)  [1/1] 0.00ns  loc: matmul.cpp:20
.loopexit:1  %tmp_7_cast = zext i5 %j_mid2 to i10

ST_17: tmp_51 (276)  [1/1] 1.79ns  loc: matmul.cpp:20
.loopexit:2  %tmp_51 = add i10 %tmp_3_cast, %tmp_7_cast

ST_17: tmp_11_6 (299)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:25  %tmp_11_6 = mul nsw i32 %a_row_6_1, %b_copy_6_load

ST_17: tmp_11_7 (302)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_17: tmp_11_8 (305)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_17: tmp_11_9 (308)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_17: tmp_11_s (311)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_17: tmp_11_10 (314)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_17: b_copy_12_load (316)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:42  %b_copy_12_load = load i32* %b_copy_12_addr_1, align 4

ST_17: b_copy_13_addr_1 (318)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:44  %b_copy_13_addr_1 = getelementptr [16 x i32]* %b_copy_13, i64 0, i64 %tmp_7

ST_17: b_copy_13_load (319)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:45  %b_copy_13_load = load i32* %b_copy_13_addr_1, align 4

ST_17: tmp6 (330)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:56  %tmp6 = add i32 %tmp_11_5, %tmp_11_4

ST_17: j_1 (344)  [1/1] 1.67ns  loc: matmul.cpp:20
.loopexit:70  %j_1 = add i5 %j_mid2, 1


 <State 18>: 8.05ns
ST_18: a_row_12_2_load (64)  [1/1] 0.00ns
.preheader7.preheader:12  %a_row_12_2_load = load i32* %a_row_12_2

ST_18: a_row_13_2_load (65)  [1/1] 0.00ns
.preheader7.preheader:13  %a_row_13_2_load = load i32* %a_row_13_2

ST_18: a_row_14_2_load (66)  [1/1] 0.00ns
.preheader7.preheader:14  %a_row_14_2_load = load i32* %a_row_14_2

ST_18: a_row_15_2_load (67)  [1/1] 0.00ns
.preheader7.preheader:15  %a_row_15_2_load = load i32* %a_row_15_2

ST_18: StgValue_416 (69)  [1/1] 0.00ns
.preheader7.preheader:17  call void (...)* @_ssdm_op_SpecLoopName([6 x i8]* @L_col_str)

ST_18: empty_3 (70)  [1/1] 0.00ns
.preheader7.preheader:18  %empty_3 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)

ST_18: StgValue_418 (126)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:74  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str5) nounwind

ST_18: tmp_1 (127)  [1/1] 0.00ns  loc: matmul.cpp:20
.preheader7.preheader:75  %tmp_1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str5) nounwind

ST_18: StgValue_420 (128)  [1/1] 0.00ns  loc: matmul.cpp:21
.preheader7.preheader:76  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_18: a_row_15 (145)  [1/2] 2.71ns  loc: matmul.cpp:27
.preheader7.preheader:93  %a_row_15 = load i32* %a_0_addr_15, align 4

ST_18: a_row_15_1 (146)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:94  %a_row_15_1 = select i1 %tmp_5, i32 %a_row_15, i32 %a_row_15_2_load

ST_18: a_row_14_1 (147)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:95  %a_row_14_1 = select i1 %tmp_5, i32 %a_row_14, i32 %a_row_14_2_load

ST_18: a_row_13_1 (148)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:96  %a_row_13_1 = select i1 %tmp_5, i32 %a_row_13, i32 %a_row_13_2_load

ST_18: a_row_12_1 (149)  [1/1] 1.37ns  loc: matmul.cpp:25
.preheader7.preheader:97  %a_row_12_1 = select i1 %tmp_5, i32 %a_row_12, i32 %a_row_12_2_load

ST_18: StgValue_426 (162)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:110  store i32 %a_row_15_1, i32* %a_row_15_2

ST_18: StgValue_427 (163)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:111  store i32 %a_row_14_1, i32* %a_row_14_2

ST_18: StgValue_428 (164)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:112  store i32 %a_row_13_1, i32* %a_row_13_2

ST_18: StgValue_429 (165)  [1/1] 0.00ns  loc: matmul.cpp:25
.preheader7.preheader:113  store i32 %a_row_12_1, i32* %a_row_12_2

ST_18: a_1_load_15 (269)  [1/2] 2.71ns  loc: matmul.cpp:33
.preheader.preheader:89  %a_1_load_15 = load i32* %a_1_addr_15, align 4

ST_18: b_copy_15_addr (270)  [1/1] 0.00ns  loc: matmul.cpp:33
.preheader.preheader:90  %b_copy_15_addr = getelementptr [16 x i32]* %b_copy_15, i64 0, i64 %tmp_8

ST_18: StgValue_432 (271)  [1/1] 2.39ns  loc: matmul.cpp:33
.preheader.preheader:91  store i32 %a_1_load_15, i32* %b_copy_15_addr, align 4

ST_18: StgValue_433 (272)  [1/1] 0.00ns
.preheader.preheader:92  br label %.loopexit

ST_18: tmp_11_7 (302)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:28  %tmp_11_7 = mul nsw i32 %a_row_7_1, %b_copy_7_load

ST_18: tmp_11_8 (305)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_18: tmp_11_9 (308)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_18: tmp_11_s (311)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_18: tmp_11_10 (314)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_18: tmp_11_11 (317)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_18: b_copy_13_load (319)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:45  %b_copy_13_load = load i32* %b_copy_13_addr_1, align 4

ST_18: b_copy_14_addr_1 (321)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:47  %b_copy_14_addr_1 = getelementptr [16 x i32]* %b_copy_14, i64 0, i64 %tmp_7

ST_18: b_copy_14_load (322)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:48  %b_copy_14_load = load i32* %b_copy_14_addr_1, align 4


 <State 19>: 6.68ns
ST_19: tmp_11_8 (305)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:31  %tmp_11_8 = mul nsw i32 %a_row_8_1, %b_copy_8_load

ST_19: tmp_11_9 (308)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_19: tmp_11_s (311)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_19: tmp_11_10 (314)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_19: tmp_11_11 (317)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_19: tmp_11_12 (320)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_19: b_copy_14_load (322)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:48  %b_copy_14_load = load i32* %b_copy_14_addr_1, align 4

ST_19: b_copy_15_addr_1 (324)  [1/1] 0.00ns  loc: matmul.cpp:38
.loopexit:50  %b_copy_15_addr_1 = getelementptr [16 x i32]* %b_copy_15, i64 0, i64 %tmp_7

ST_19: b_copy_15_load (325)  [2/2] 2.39ns  loc: matmul.cpp:38
.loopexit:51  %b_copy_15_load = load i32* %b_copy_15_addr_1, align 4

ST_19: tmp7 (331)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:57  %tmp7 = add i32 %tmp_11_7, %tmp_11_6

ST_19: tmp5 (332)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:58  %tmp5 = add i32 %tmp6, %tmp7

ST_19: tmp1 (333)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:59  %tmp1 = add i32 %tmp2, %tmp5


 <State 20>: 6.68ns
ST_20: tmp_11_9 (308)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:34  %tmp_11_9 = mul nsw i32 %a_row_9_1, %b_copy_9_load

ST_20: tmp_11_s (311)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_20: tmp_11_10 (314)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_20: tmp_11_11 (317)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_20: tmp_11_12 (320)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_20: tmp_11_13 (323)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_20: b_copy_15_load (325)  [1/2] 2.39ns  loc: matmul.cpp:38
.loopexit:51  %b_copy_15_load = load i32* %b_copy_15_addr_1, align 4


 <State 21>: 6.68ns
ST_21: tmp_11_s (311)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:37  %tmp_11_s = mul nsw i32 %a_row_10_1, %b_copy_10_load

ST_21: tmp_11_10 (314)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_21: tmp_11_11 (317)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_21: tmp_11_12 (320)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_21: tmp_11_13 (323)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_21: tmp_11_14 (326)  [6/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_21: tmp10 (334)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:60  %tmp10 = add i32 %tmp_11_9, %tmp_11_8


 <State 22>: 6.68ns
ST_22: tmp_11_10 (314)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:40  %tmp_11_10 = mul nsw i32 %a_row_11_1, %b_copy_11_load

ST_22: tmp_11_11 (317)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_22: tmp_11_12 (320)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_22: tmp_11_13 (323)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_22: tmp_11_14 (326)  [5/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 23>: 6.68ns
ST_23: tmp_11_11 (317)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:43  %tmp_11_11 = mul nsw i32 %a_row_12_1, %b_copy_12_load

ST_23: tmp_11_12 (320)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_23: tmp_11_13 (323)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_23: tmp_11_14 (326)  [4/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_23: tmp11 (335)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:61  %tmp11 = add i32 %tmp_11_10, %tmp_11_s

ST_23: tmp9 (336)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:62  %tmp9 = add i32 %tmp10, %tmp11


 <State 24>: 6.68ns
ST_24: tmp_11_12 (320)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:46  %tmp_11_12 = mul nsw i32 %a_row_13_1, %b_copy_13_load

ST_24: tmp_11_13 (323)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_24: tmp_11_14 (326)  [3/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 25>: 6.68ns
ST_25: tmp_11_13 (323)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:49  %tmp_11_13 = mul nsw i32 %a_row_14_1, %b_copy_14_load

ST_25: tmp_11_14 (326)  [2/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load

ST_25: tmp13 (337)  [1/1] 2.39ns  loc: matmul.cpp:38
.loopexit:63  %tmp13 = add i32 %tmp_11_12, %tmp_11_11


 <State 26>: 6.68ns
ST_26: tmp_11_14 (326)  [1/6] 6.68ns  loc: matmul.cpp:38
.loopexit:52  %tmp_11_14 = mul nsw i32 %a_row_15_1, %b_copy_15_load


 <State 27>: 7.68ns
ST_27: tmp14 (338)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:64  %tmp14 = add i32 %tmp_11_14, %tmp_11_13

ST_27: tmp12 (339)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:65  %tmp12 = add i32 %tmp13, %tmp14

ST_27: tmp8 (340)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:66  %tmp8 = add i32 %tmp9, %tmp12

ST_27: tmp_12_s (341)  [1/1] 1.92ns  loc: matmul.cpp:38
.loopexit:67  %tmp_12_s = add nsw i32 %tmp1, %tmp8


 <State 28>: 2.71ns
ST_28: tmp_52_cast (277)  [1/1] 0.00ns  loc: matmul.cpp:20
.loopexit:3  %tmp_52_cast = zext i10 %tmp_51 to i64

ST_28: a_2_addr (278)  [1/1] 0.00ns  loc: matmul.cpp:20
.loopexit:4  %a_2_addr = getelementptr [256 x i32]* %a_2, i64 0, i64 %tmp_52_cast

ST_28: StgValue_493 (342)  [1/1] 2.71ns  loc: matmul.cpp:41
.loopexit:68  store i32 %tmp_12_s, i32* %a_2_addr, align 4

ST_28: empty (343)  [1/1] 0.00ns  loc: matmul.cpp:42
.loopexit:69  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str5, i32 %tmp_1) nounwind

ST_28: StgValue_495 (345)  [1/1] 0.00ns  loc: matmul.cpp:20
.loopexit:71  br label %.preheader7


 <State 29>: 0.00ns
ST_29: StgValue_496 (347)  [1/1] 0.00ns  loc: matmul.cpp:44
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.57ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten') with incoming values : ('indvar_flatten_next') [45]  (1.57 ns)

 <State 2>: 6.45ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', matmul.cpp:20) [47]  (0 ns)
	'icmp' operation ('exitcond', matmul.cpp:20) [71]  (2.37 ns)
	'select' operation ('i2_mid2_v', matmul.cpp:20) [76]  (1.37 ns)
	'getelementptr' operation ('a_0_addr', matmul.cpp:20) [80]  (0 ns)
	'load' operation ('a_row[0]', matmul.cpp:27) on array 'a_0' [130]  (2.71 ns)

 <State 3>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_1_load', matmul.cpp:33) on array 'a_1' [224]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_1_load', matmul.cpp:33 on array 'b_copy[0]', matmul.cpp:14 [226]  (2.39 ns)

 <State 4>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_1_load_1', matmul.cpp:33) on array 'a_1' [227]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_1_load_1', matmul.cpp:33 on array 'b_copy[1]', matmul.cpp:14 [229]  (2.39 ns)

 <State 5>: 5.1ns
The critical path consists of the following:
	'load' operation ('a_1_load_2', matmul.cpp:33) on array 'a_1' [230]  (2.71 ns)
	'store' operation (matmul.cpp:33) of variable 'a_1_load_2', matmul.cpp:33 on array 'b_copy[2]', matmul.cpp:14 [232]  (2.39 ns)

 <State 6>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_0_2_load') on local variable 'a_row[0]' [52]  (0 ns)
	'select' operation ('a_row[0]', matmul.cpp:25) [161]  (1.37 ns)
	'mul' operation ('tmp_s', matmul.cpp:38) [281]  (6.68 ns)

 <State 7>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_1_2_load') on local variable 'a_row[1]' [53]  (0 ns)
	'select' operation ('a_row[1]', matmul.cpp:25) [160]  (1.37 ns)
	'mul' operation ('tmp_11_1', matmul.cpp:38) [284]  (6.68 ns)

 <State 8>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_2_2_load') on local variable 'a_row[2]' [54]  (0 ns)
	'select' operation ('a_row[2]', matmul.cpp:25) [159]  (1.37 ns)
	'mul' operation ('tmp_11_2', matmul.cpp:38) [287]  (6.68 ns)

 <State 9>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_3_2_load') on local variable 'a_row[3]' [55]  (0 ns)
	'select' operation ('a_row[3]', matmul.cpp:25) [158]  (1.37 ns)
	'mul' operation ('tmp_11_3', matmul.cpp:38) [290]  (6.68 ns)

 <State 10>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_4_2_load') on local variable 'a_row[4]' [56]  (0 ns)
	'select' operation ('a_row[4]', matmul.cpp:25) [157]  (1.37 ns)
	'mul' operation ('tmp_11_4', matmul.cpp:38) [293]  (6.68 ns)

 <State 11>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_5_2_load') on local variable 'a_row[5]' [57]  (0 ns)
	'select' operation ('a_row[5]', matmul.cpp:25) [156]  (1.37 ns)
	'mul' operation ('tmp_11_5', matmul.cpp:38) [296]  (6.68 ns)

 <State 12>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_6_2_load') on local variable 'a_row[6]' [58]  (0 ns)
	'select' operation ('a_row[6]', matmul.cpp:25) [155]  (1.37 ns)
	'mul' operation ('tmp_11_6', matmul.cpp:38) [299]  (6.68 ns)

 <State 13>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_7_2_load') on local variable 'a_row[7]' [59]  (0 ns)
	'select' operation ('a_row[7]', matmul.cpp:25) [154]  (1.37 ns)
	'mul' operation ('tmp_11_7', matmul.cpp:38) [302]  (6.68 ns)

 <State 14>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_8_2_load') on local variable 'a_row[8]' [60]  (0 ns)
	'select' operation ('a_row[8]', matmul.cpp:25) [153]  (1.37 ns)
	'mul' operation ('tmp_11_8', matmul.cpp:38) [305]  (6.68 ns)

 <State 15>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_9_2_load') on local variable 'a_row[9]' [61]  (0 ns)
	'select' operation ('a_row[9]', matmul.cpp:25) [152]  (1.37 ns)
	'mul' operation ('tmp_11_9', matmul.cpp:38) [308]  (6.68 ns)

 <State 16>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_10_2_load') on local variable 'a_row[10]' [62]  (0 ns)
	'select' operation ('a_row[10]', matmul.cpp:25) [151]  (1.37 ns)
	'mul' operation ('tmp_11_s', matmul.cpp:38) [311]  (6.68 ns)

 <State 17>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_11_2_load') on local variable 'a_row[11]' [63]  (0 ns)
	'select' operation ('a_row[11]', matmul.cpp:25) [150]  (1.37 ns)
	'mul' operation ('tmp_11_10', matmul.cpp:38) [314]  (6.68 ns)

 <State 18>: 8.05ns
The critical path consists of the following:
	'load' operation ('a_row_12_2_load') on local variable 'a_row[12]' [64]  (0 ns)
	'select' operation ('a_row[12]', matmul.cpp:25) [149]  (1.37 ns)
	'mul' operation ('tmp_11_11', matmul.cpp:38) [317]  (6.68 ns)

 <State 19>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_8', matmul.cpp:38) [305]  (6.68 ns)

 <State 20>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_9', matmul.cpp:38) [308]  (6.68 ns)

 <State 21>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_s', matmul.cpp:38) [311]  (6.68 ns)

 <State 22>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_10', matmul.cpp:38) [314]  (6.68 ns)

 <State 23>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_11', matmul.cpp:38) [317]  (6.68 ns)

 <State 24>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_12', matmul.cpp:38) [320]  (6.68 ns)

 <State 25>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_13', matmul.cpp:38) [323]  (6.68 ns)

 <State 26>: 6.68ns
The critical path consists of the following:
	'mul' operation ('tmp_11_14', matmul.cpp:38) [326]  (6.68 ns)

 <State 27>: 7.68ns
The critical path consists of the following:
	'add' operation ('tmp14', matmul.cpp:38) [338]  (1.92 ns)
	'add' operation ('tmp12', matmul.cpp:38) [339]  (1.92 ns)
	'add' operation ('tmp8', matmul.cpp:38) [340]  (1.92 ns)
	'add' operation ('tmp_12_s', matmul.cpp:38) [341]  (1.92 ns)

 <State 28>: 2.71ns
The critical path consists of the following:
	'getelementptr' operation ('a_2_addr', matmul.cpp:20) [278]  (0 ns)
	'store' operation (matmul.cpp:41) of variable 'tmp_12_s', matmul.cpp:38 on array 'a_2' [342]  (2.71 ns)

 <State 29>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
