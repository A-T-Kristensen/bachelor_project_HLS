-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.526000,HLS_SYN_LAT=281,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1405,HLS_SYN_LUT=2570}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv61_2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv61_3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_244 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_255 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_266 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal tmp_5_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal indvar_flatten_next_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_1256 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1261 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_fu_341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1266 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_mid2_v_v_v_fu_349_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_mid2_v_v_v_reg_1286 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_2_mid2_v_v_v_reg_1286 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_357_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_1292 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_fu_370_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_1304 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_j_mid2_reg_1304 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_386_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1319 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal sel_tmp_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1343 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1353 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_1366 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_536_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1382 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_fu_572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal b_copy_2_3_19_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_912_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal tmp_10_fu_925_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_938_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal a_row_load_1_fu_1042_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_3_fu_1075_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_3_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_2_fu_1082_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_2_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal tmp_11_3_reg_1460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal j_1_fu_1100_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1465 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_phi_fu_248_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_phi_fu_259_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_270_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_377_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_580_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1016_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1033_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1060_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_1127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal a_row_load_s_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_9_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_8_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_7_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_11_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_18_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_8_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_17_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_12_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_16_fu_515_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_1_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_3_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_11_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_18_fu_905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_8_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_17_fu_898_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_12_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_16_fu_891_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_1_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_3_fu_884_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_11_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_18_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_8_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_17_fu_870_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_12_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_16_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_1_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_3_fu_856_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_11_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_18_fu_849_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_8_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_17_fu_842_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_12_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_16_fu_835_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_1_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_3_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_317_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_407_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_410_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_copy_0_3_fu_426_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_4_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_5_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_6_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_9_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_2_fu_452_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_7_fu_476_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_14_fu_492_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_15_fu_500_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_536_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast5_fu_593_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_596_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_copy_1_3_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_4_fu_650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_5_fu_664_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_6_fu_671_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_9_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_fu_706_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_4_fu_712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_5_fu_726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_6_fu_732_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_9_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_fu_765_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_4_fu_772_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_5_fu_786_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_6_fu_793_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_9_fu_807_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_2_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_7_fu_800_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_14_fu_814_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_15_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_2_fu_719_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_7_fu_739_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_14_fu_752_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_15_fu_759_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_2_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_7_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_14_fu_692_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_15_fu_699_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_912_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_912_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_925_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_925_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_925_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_925_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_938_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_938_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1011_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_1028_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_fu_1055_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_1105_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast_fu_1114_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_cast6_fu_1118_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_1121_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component matrixmul_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_mux_42_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixmul_fadd_32bkb_U1 : component matrixmul_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    matrixmul_fmul_32cud_U2 : component matrixmul_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    matrixmul_mux_42_dEe_U3 : component matrixmul_mux_42_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_6_fu_536_p1,
        din2 => tmp_6_fu_536_p2,
        din3 => tmp_6_fu_536_p3,
        din4 => tmp_6_fu_536_p4,
        din5 => tmp_reg_1319,
        dout => tmp_6_fu_536_p6);

    matrixmul_mux_42_dEe_U4 : component matrixmul_mux_42_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_9_fu_912_p1,
        din2 => tmp_9_fu_912_p2,
        din3 => tmp_9_fu_912_p3,
        din4 => tmp_9_fu_912_p4,
        din5 => tmp_reg_1319,
        dout => tmp_9_fu_912_p6);

    matrixmul_mux_42_dEe_U5 : component matrixmul_mux_42_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_10_fu_925_p1,
        din2 => tmp_10_fu_925_p2,
        din3 => tmp_10_fu_925_p3,
        din4 => tmp_10_fu_925_p4,
        din5 => tmp_reg_1319,
        dout => tmp_10_fu_925_p6);

    matrixmul_mux_42_dEe_U6 : component matrixmul_mux_42_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_11_fu_938_p1,
        din2 => tmp_11_fu_938_p2,
        din3 => tmp_11_fu_938_p3,
        din4 => tmp_11_fu_938_p4,
        din5 => tmp_reg_1319,
        dout => tmp_11_fu_938_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_flatten_fu_305_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage16) and not((exitcond_flatten_reg_1252 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_255 <= tmp_2_mid2_v_v_v_reg_1286;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_255 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_244 <= indvar_flatten_next_reg_1256;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_244 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_266 <= j_1_reg_1465;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_266 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11))) then
                a_row_load_3_reg_1445 <= a_row_load_3_fu_1075_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11))) then
                a_row_load_7_fu_100 <= a_row_load_3_fu_1075_p3;
                a_row_load_8_fu_96 <= a_row_load_2_fu_1082_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9))) then
                a_row_load_9_fu_92 <= a_row_load_1_fu_1042_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                a_row_load_s_fu_88 <= a_row_load_fu_572_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1252 <= exitcond_flatten_reg_1252;
                ap_pipeline_reg_pp0_iter1_tmp_2_mid2_v_v_v_reg_1286 <= tmp_2_mid2_v_v_v_reg_1286;
                exitcond_flatten_reg_1252 <= exitcond_flatten_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then
                ap_pipeline_reg_pp0_iter1_j_mid2_reg_1304 <= j_mid2_reg_1304;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                b_copy_0_3_11_fu_104 <= b_copy_0_3_18_fu_529_p3;
                b_copy_0_3_12_fu_112 <= b_copy_0_3_16_fu_515_p3;
                b_copy_0_3_1_fu_116 <= b_copy_0_3_3_fu_508_p3;
                b_copy_0_3_8_fu_108 <= b_copy_0_3_17_fu_522_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                b_copy_1_3_11_fu_120 <= b_copy_1_3_18_fu_905_p3;
                b_copy_1_3_12_fu_128 <= b_copy_1_3_16_fu_891_p3;
                b_copy_1_3_1_fu_132 <= b_copy_1_3_3_fu_884_p3;
                b_copy_1_3_8_fu_124 <= b_copy_1_3_17_fu_898_p3;
                b_copy_2_3_11_fu_136 <= b_copy_2_3_18_fu_877_p3;
                b_copy_2_3_12_fu_144 <= b_copy_2_3_16_fu_863_p3;
                b_copy_2_3_1_fu_148 <= b_copy_2_3_3_fu_856_p3;
                b_copy_2_3_8_fu_140 <= b_copy_2_3_17_fu_870_p3;
                b_copy_3_3_11_fu_152 <= b_copy_3_3_18_fu_849_p3;
                b_copy_3_3_12_fu_160 <= b_copy_3_3_16_fu_835_p3;
                b_copy_3_3_1_fu_164 <= b_copy_3_3_3_fu_828_p3;
                b_copy_3_3_8_fu_156 <= b_copy_3_3_17_fu_842_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then
                b_copy_2_3_19_reg_1402 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_305_p2))) then
                exitcond_reg_1261 <= exitcond_fu_323_p2;
                    tmp_3_reg_1292(4 downto 2) <= tmp_3_fu_357_p3(4 downto 2);
                tmp_mid2_reg_1266 <= tmp_mid2_fu_341_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_1256 <= indvar_flatten_next_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage16))) then
                j_1_reg_1465 <= j_1_fu_1100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1252 = ap_const_lv1_0))) then
                j_mid2_reg_1304 <= j_mid2_fu_370_p3;
                tmp_reg_1319 <= tmp_fu_386_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10) and not((ap_const_lv1_0 = tmp_5_reg_1330))))) then
                reg_290 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)))) then
                reg_294 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1252)))) then
                reg_300 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                sel_tmp2_reg_1353 <= sel_tmp2_fu_434_p2;
                sel_tmp4_reg_1366 <= sel_tmp4_fu_447_p2;
                sel_tmp_reg_1343 <= sel_tmp_fu_421_p2;
                tmp_5_reg_1330 <= tmp_5_fu_402_p2;
                tmp_6_reg_1382 <= tmp_6_fu_536_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_10_reg_1415 <= tmp_10_fu_925_p6;
                tmp_11_reg_1420 <= tmp_11_fu_938_p6;
                tmp_9_reg_1410 <= tmp_9_fu_912_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage14))) then
                tmp_11_2_reg_1455 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15))) then
                tmp_11_3_reg_1460 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_305_p2))) then
                tmp_2_mid2_v_v_v_reg_1286 <= tmp_2_mid2_v_v_v_fu_349_p3;
            end if;
        end if;
    end process;
    tmp_3_reg_1292(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten_fu_305_p2, ap_CS_fsm_pp0_stage7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_305_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
            when ap_ST_fsm_pp0_stage4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
            when ap_ST_fsm_pp0_stage5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
            when ap_ST_fsm_pp0_stage6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
            when ap_ST_fsm_pp0_stage7 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
            when ap_ST_fsm_pp0_stage9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
            when ap_ST_fsm_pp0_stage10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
            when ap_ST_fsm_pp0_stage11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
            when ap_ST_fsm_pp0_stage12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
            when ap_ST_fsm_pp0_stage13 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
            when ap_ST_fsm_pp0_stage14 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
            when ap_ST_fsm_pp0_stage15 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
            when ap_ST_fsm_pp0_stage16 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, tmp_2_fu_365_p1, tmp_17_fu_377_p3, tmp_20_cast_fu_416_p1, tmp_19_fu_580_p3, tmp_22_cast_fu_602_p1, tmp_12_fu_1016_p3, tmp_14_fu_1033_p3, tmp_16_fu_1060_p3, tmp_23_cast_fu_1127_p1, ap_CS_fsm_pp0_stage7)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7))) then 
            a_Addr_A_orig <= tmp_23_cast_fu_1127_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10))) then 
            a_Addr_A_orig <= tmp_16_fu_1060_p3(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9))) then 
            a_Addr_A_orig <= tmp_14_fu_1033_p3(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage8))) then 
            a_Addr_A_orig <= tmp_12_fu_1016_p3(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then 
            a_Addr_A_orig <= tmp_22_cast_fu_602_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
            a_Addr_A_orig <= tmp_19_fu_580_p3(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            a_Addr_A_orig <= tmp_20_cast_fu_416_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_Addr_A_orig <= tmp_17_fu_377_p3(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            a_Addr_A_orig <= tmp_2_fu_365_p1(32 - 1 downto 0);
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Din_A <= grp_fu_278_p2;

    a_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;

    a_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1252, ap_CS_fsm_pp0_stage7)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1252) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)))) then 
            a_WEN_A <= ap_const_lv4_F;
        else 
            a_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_row_load_1_fu_1042_p3 <= 
        a_Dout_A when (tmp_5_reg_1330(0) = '1') else 
        a_row_load_9_fu_92;
    a_row_load_2_fu_1082_p3 <= 
        reg_290 when (tmp_5_reg_1330(0) = '1') else 
        a_row_load_8_fu_96;
    a_row_load_3_fu_1075_p3 <= 
        a_Dout_A when (tmp_5_reg_1330(0) = '1') else 
        a_row_load_7_fu_100;
    a_row_load_fu_572_p3 <= 
        reg_290 when (tmp_5_reg_1330(0) = '1') else 
        a_row_load_s_fu_88;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state27 <= ap_CS_fsm(18 downto 18);

    ap_done_assign_proc : process(ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_0_3_14_fu_492_p3 <= 
        b_copy_0_3_8_fu_108 when (sel_tmp4_fu_447_p2(0) = '1') else 
        b_copy_0_3_9_fu_484_p3;
    b_copy_0_3_15_fu_500_p3 <= 
        a_Dout_A when (sel_tmp4_fu_447_p2(0) = '1') else 
        b_copy_0_3_11_fu_104;
    b_copy_0_3_16_fu_515_p3 <= 
        b_copy_0_3_7_fu_476_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_0_3_12_fu_112;
    b_copy_0_3_17_fu_522_p3 <= 
        b_copy_0_3_14_fu_492_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_0_3_8_fu_108;
    b_copy_0_3_18_fu_529_p3 <= 
        b_copy_0_3_15_fu_500_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_0_3_11_fu_104;
    b_copy_0_3_2_fu_452_p3 <= 
        b_copy_0_3_1_fu_116 when (sel_tmp4_fu_447_p2(0) = '1') else 
        b_copy_0_3_4_fu_439_p3;
    b_copy_0_3_3_fu_508_p3 <= 
        b_copy_0_3_2_fu_452_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_0_3_1_fu_116;
    b_copy_0_3_4_fu_439_p3 <= 
        b_copy_0_3_1_fu_116 when (sel_tmp2_fu_434_p2(0) = '1') else 
        b_copy_0_3_fu_426_p3;
    b_copy_0_3_5_fu_460_p3 <= 
        a_Dout_A when (sel_tmp_fu_421_p2(0) = '1') else 
        b_copy_0_3_12_fu_112;
    b_copy_0_3_6_fu_468_p3 <= 
        b_copy_0_3_12_fu_112 when (sel_tmp2_fu_434_p2(0) = '1') else 
        b_copy_0_3_5_fu_460_p3;
    b_copy_0_3_7_fu_476_p3 <= 
        b_copy_0_3_12_fu_112 when (sel_tmp4_fu_447_p2(0) = '1') else 
        b_copy_0_3_6_fu_468_p3;
    b_copy_0_3_9_fu_484_p3 <= 
        a_Dout_A when (sel_tmp2_fu_434_p2(0) = '1') else 
        b_copy_0_3_8_fu_108;
    b_copy_0_3_fu_426_p3 <= 
        b_copy_0_3_1_fu_116 when (sel_tmp_fu_421_p2(0) = '1') else 
        a_Dout_A;
    b_copy_1_3_14_fu_692_p3 <= 
        b_copy_1_3_8_fu_124 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_1_3_9_fu_685_p3;
    b_copy_1_3_15_fu_699_p3 <= 
        reg_290 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_1_3_11_fu_120;
    b_copy_1_3_16_fu_891_p3 <= 
        b_copy_1_3_7_fu_678_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_1_3_12_fu_128;
    b_copy_1_3_17_fu_898_p3 <= 
        b_copy_1_3_14_fu_692_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_1_3_8_fu_124;
    b_copy_1_3_18_fu_905_p3 <= 
        b_copy_1_3_15_fu_699_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_1_3_11_fu_120;
    b_copy_1_3_2_fu_657_p3 <= 
        b_copy_1_3_1_fu_132 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_1_3_4_fu_650_p3;
    b_copy_1_3_3_fu_884_p3 <= 
        b_copy_1_3_2_fu_657_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_1_3_1_fu_132;
    b_copy_1_3_4_fu_650_p3 <= 
        b_copy_1_3_1_fu_132 when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_1_3_fu_643_p3;
    b_copy_1_3_5_fu_664_p3 <= 
        reg_290 when (sel_tmp_reg_1343(0) = '1') else 
        b_copy_1_3_12_fu_128;
    b_copy_1_3_6_fu_671_p3 <= 
        b_copy_1_3_12_fu_128 when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_1_3_5_fu_664_p3;
    b_copy_1_3_7_fu_678_p3 <= 
        b_copy_1_3_12_fu_128 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_1_3_6_fu_671_p3;
    b_copy_1_3_9_fu_685_p3 <= 
        reg_290 when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_1_3_8_fu_124;
    b_copy_1_3_fu_643_p3 <= 
        b_copy_1_3_1_fu_132 when (sel_tmp_reg_1343(0) = '1') else 
        reg_290;
    b_copy_2_3_14_fu_752_p3 <= 
        b_copy_2_3_8_fu_140 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_2_3_9_fu_746_p3;
    b_copy_2_3_15_fu_759_p3 <= 
        b_copy_2_3_19_reg_1402 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_2_3_11_fu_136;
    b_copy_2_3_16_fu_863_p3 <= 
        b_copy_2_3_7_fu_739_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_2_3_12_fu_144;
    b_copy_2_3_17_fu_870_p3 <= 
        b_copy_2_3_14_fu_752_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_2_3_8_fu_140;
    b_copy_2_3_18_fu_877_p3 <= 
        b_copy_2_3_15_fu_759_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_2_3_11_fu_136;
    b_copy_2_3_2_fu_719_p3 <= 
        b_copy_2_3_1_fu_148 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_2_3_4_fu_712_p3;
    b_copy_2_3_3_fu_856_p3 <= 
        b_copy_2_3_2_fu_719_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_2_3_1_fu_148;
    b_copy_2_3_4_fu_712_p3 <= 
        b_copy_2_3_1_fu_148 when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_2_3_fu_706_p3;
    b_copy_2_3_5_fu_726_p3 <= 
        b_copy_2_3_19_reg_1402 when (sel_tmp_reg_1343(0) = '1') else 
        b_copy_2_3_12_fu_144;
    b_copy_2_3_6_fu_732_p3 <= 
        b_copy_2_3_12_fu_144 when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_2_3_5_fu_726_p3;
    b_copy_2_3_7_fu_739_p3 <= 
        b_copy_2_3_12_fu_144 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_2_3_6_fu_732_p3;
    b_copy_2_3_9_fu_746_p3 <= 
        b_copy_2_3_19_reg_1402 when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_2_3_8_fu_140;
    b_copy_2_3_fu_706_p3 <= 
        b_copy_2_3_1_fu_148 when (sel_tmp_reg_1343(0) = '1') else 
        b_copy_2_3_19_reg_1402;
    b_copy_3_3_14_fu_814_p3 <= 
        b_copy_3_3_8_fu_156 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_3_3_9_fu_807_p3;
    b_copy_3_3_15_fu_821_p3 <= 
        a_Dout_A when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_3_3_11_fu_152;
    b_copy_3_3_16_fu_835_p3 <= 
        b_copy_3_3_7_fu_800_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_3_3_12_fu_160;
    b_copy_3_3_17_fu_842_p3 <= 
        b_copy_3_3_14_fu_814_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_3_3_8_fu_156;
    b_copy_3_3_18_fu_849_p3 <= 
        b_copy_3_3_15_fu_821_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_3_3_11_fu_152;
    b_copy_3_3_2_fu_779_p3 <= 
        b_copy_3_3_1_fu_164 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_3_3_4_fu_772_p3;
    b_copy_3_3_3_fu_828_p3 <= 
        b_copy_3_3_2_fu_779_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_3_3_1_fu_164;
    b_copy_3_3_4_fu_772_p3 <= 
        b_copy_3_3_1_fu_164 when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_3_3_fu_765_p3;
    b_copy_3_3_5_fu_786_p3 <= 
        a_Dout_A when (sel_tmp_reg_1343(0) = '1') else 
        b_copy_3_3_12_fu_160;
    b_copy_3_3_6_fu_793_p3 <= 
        b_copy_3_3_12_fu_160 when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_3_3_5_fu_786_p3;
    b_copy_3_3_7_fu_800_p3 <= 
        b_copy_3_3_12_fu_160 when (sel_tmp4_reg_1366(0) = '1') else 
        b_copy_3_3_6_fu_793_p3;
    b_copy_3_3_9_fu_807_p3 <= 
        a_Dout_A when (sel_tmp2_reg_1353(0) = '1') else 
        b_copy_3_3_8_fu_156;
    b_copy_3_3_fu_765_p3 <= 
        b_copy_3_3_1_fu_164 when (sel_tmp_reg_1343(0) = '1') else 
        a_Dout_A;
    exitcond_flatten_fu_305_p2 <= "1" when (indvar_flatten_phi_fu_248_p4 = ap_const_lv5_10) else "0";
    exitcond_fu_323_p2 <= "1" when (j_phi_fu_270_p4 = ap_const_lv3_4) else "0";

    grp_fu_278_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, reg_294, ap_CS_fsm_pp0_stage12, grp_fu_278_p2, reg_300, ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            grp_fu_278_p0 <= grp_fu_278_p2;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_278_p0 <= reg_300;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_278_p0 <= reg_294;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, grp_fu_285_p2, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter1, tmp_11_2_reg_1455, tmp_11_3_reg_1460, ap_CS_fsm_pp0_stage7)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            grp_fu_278_p1 <= tmp_11_3_reg_1460;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage16))) then 
            grp_fu_278_p1 <= tmp_11_2_reg_1455;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_278_p1 <= grp_fu_285_p2;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_278_p1 <= ap_const_lv32_0;
        else 
            grp_fu_278_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage11, a_row_load_fu_572_p3, ap_CS_fsm_pp0_stage9, a_row_load_1_fu_1042_p3, a_row_load_3_reg_1445, a_row_load_2_fu_1082_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)) then 
                grp_fu_285_p0 <= a_row_load_3_reg_1445;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) then 
                grp_fu_285_p0 <= a_row_load_2_fu_1082_p3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) then 
                grp_fu_285_p0 <= a_row_load_1_fu_1042_p3;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                grp_fu_285_p0 <= a_row_load_fu_572_p3;
            else 
                grp_fu_285_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_285_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage11, tmp_6_reg_1382, tmp_9_reg_1410, tmp_10_reg_1415, tmp_11_reg_1420, ap_CS_fsm_pp0_stage9)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)) then 
                grp_fu_285_p1 <= tmp_11_reg_1420;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) then 
                grp_fu_285_p1 <= tmp_10_reg_1415;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) then 
                grp_fu_285_p1 <= tmp_9_reg_1410;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                grp_fu_285_p1 <= tmp_6_reg_1382;
            else 
                grp_fu_285_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_285_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_phi_fu_259_p4));

    i_phi_fu_259_p4_assign_proc : process(i_reg_255, exitcond_flatten_reg_1252, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, tmp_2_mid2_v_v_v_reg_1286)
    begin
        if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            i_phi_fu_259_p4 <= tmp_2_mid2_v_v_v_reg_1286;
        else 
            i_phi_fu_259_p4 <= i_reg_255;
        end if; 
    end process;

    indvar_flatten_next_fu_311_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_248_p4) + unsigned(ap_const_lv5_1));

    indvar_flatten_phi_fu_248_p4_assign_proc : process(indvar_flatten_reg_244, exitcond_flatten_reg_1252, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1256)
    begin
        if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            indvar_flatten_phi_fu_248_p4 <= indvar_flatten_next_reg_1256;
        else 
            indvar_flatten_phi_fu_248_p4 <= indvar_flatten_reg_244;
        end if; 
    end process;

    j_1_fu_1100_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_mid2_reg_1304));
    j_mid2_fu_370_p3 <= 
        ap_const_lv3_0 when (exitcond_reg_1261(0) = '1') else 
        j_reg_266;

    j_phi_fu_270_p4_assign_proc : process(j_reg_266, exitcond_flatten_reg_1252, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, j_1_reg_1465)
    begin
        if (((exitcond_flatten_reg_1252 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            j_phi_fu_270_p4 <= j_1_reg_1465;
        else 
            j_phi_fu_270_p4 <= j_reg_266;
        end if; 
    end process;

    sel_tmp2_fu_434_p2 <= "1" when (tmp_reg_1319 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_447_p2 <= "1" when (tmp_reg_1319 = ap_const_lv2_0) else "0";
    sel_tmp_fu_421_p2 <= "1" when (tmp_reg_1319 = ap_const_lv2_2) else "0";
    tmp1_fu_335_p2 <= "1" when (i_phi_fu_259_p4 = ap_const_lv3_0) else "0";
    tmp_10_fu_925_p1 <= 
        b_copy_2_3_15_fu_759_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_2_3_11_fu_136;
    tmp_10_fu_925_p2 <= 
        b_copy_2_3_14_fu_752_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_2_3_8_fu_140;
    tmp_10_fu_925_p3 <= 
        b_copy_2_3_7_fu_739_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_2_3_12_fu_144;
    tmp_10_fu_925_p4 <= 
        b_copy_2_3_2_fu_719_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_2_3_1_fu_148;
    tmp_11_fu_938_p1 <= 
        b_copy_3_3_15_fu_821_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_3_3_11_fu_152;
    tmp_11_fu_938_p2 <= 
        b_copy_3_3_14_fu_814_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_3_3_8_fu_156;
    tmp_11_fu_938_p3 <= 
        b_copy_3_3_7_fu_800_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_3_3_12_fu_160;
    tmp_11_fu_938_p4 <= 
        b_copy_3_3_2_fu_779_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_3_3_1_fu_164;
    tmp_12_fu_1016_p3 <= (ap_const_lv59_0 & tmp_8_fu_1011_p2);
    tmp_13_fu_1028_p2 <= (tmp_3_reg_1292 or ap_const_lv5_2);
    tmp_14_fu_1033_p3 <= (ap_const_lv59_0 & tmp_13_fu_1028_p2);
    tmp_15_fu_1055_p2 <= (tmp_3_reg_1292 or ap_const_lv5_3);
    tmp_16_fu_1060_p3 <= (ap_const_lv59_0 & tmp_15_fu_1055_p2);
    tmp_17_fu_377_p3 <= (ap_const_lv61_2 & j_mid2_fu_370_p3);
    tmp_18_fu_410_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(tmp_8_cast_fu_407_p1));
    tmp_19_fu_580_p3 <= (ap_const_lv61_3 & j_mid2_reg_1304);
    tmp_1_fu_1105_p4 <= ((ap_const_lv1_1 & ap_pipeline_reg_pp0_iter1_tmp_2_mid2_v_v_v_reg_1286) & ap_const_lv2_0);
    tmp_20_cast_fu_416_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_410_p2),64));
    tmp_20_fu_596_p2 <= std_logic_vector(unsigned(ap_const_lv6_1C) + unsigned(tmp_8_cast5_fu_593_p1));
    tmp_21_fu_1121_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_1114_p1) + unsigned(tmp_8_cast6_fu_1118_p1));
    tmp_22_cast_fu_602_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_596_p2),64));
    tmp_23_cast_fu_1127_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_1121_p2),64));
    tmp_2_cast_fu_1114_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_1105_p4),7));
    tmp_2_fu_365_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_357_p3),64));
    tmp_2_mid2_v_v_v_fu_349_p3 <= 
        i_1_fu_317_p2 when (exitcond_fu_323_p2(0) = '1') else 
        i_phi_fu_259_p4;
    tmp_3_fu_357_p3 <= (tmp_2_mid2_v_v_v_fu_349_p3 & ap_const_lv2_0);
    tmp_5_fu_402_p2 <= "1" when (j_mid2_reg_1304 = ap_const_lv3_0) else "0";
    tmp_6_fu_536_p1 <= 
        b_copy_0_3_15_fu_500_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_0_3_11_fu_104;
    tmp_6_fu_536_p2 <= 
        b_copy_0_3_14_fu_492_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_0_3_8_fu_108;
    tmp_6_fu_536_p3 <= 
        b_copy_0_3_7_fu_476_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_0_3_12_fu_112;
    tmp_6_fu_536_p4 <= 
        b_copy_0_3_2_fu_452_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_0_3_1_fu_116;
    tmp_8_cast5_fu_593_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1304),6));
    tmp_8_cast6_fu_1118_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_j_mid2_reg_1304),7));
    tmp_8_cast_fu_407_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1304),5));
    tmp_8_fu_1011_p2 <= (tmp_3_reg_1292 or ap_const_lv5_1);
    tmp_9_fu_912_p1 <= 
        b_copy_1_3_15_fu_699_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_1_3_11_fu_120;
    tmp_9_fu_912_p2 <= 
        b_copy_1_3_14_fu_692_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_1_3_8_fu_124;
    tmp_9_fu_912_p3 <= 
        b_copy_1_3_7_fu_678_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_1_3_12_fu_128;
    tmp_9_fu_912_p4 <= 
        b_copy_1_3_2_fu_657_p3 when (tmp_mid2_reg_1266(0) = '1') else 
        b_copy_1_3_1_fu_132;
    tmp_fu_386_p1 <= j_mid2_fu_370_p3(2 - 1 downto 0);
    tmp_mid1_fu_329_p2 <= "1" when (i_1_fu_317_p2 = ap_const_lv3_0) else "0";
    tmp_mid2_fu_341_p3 <= 
        tmp_mid1_fu_329_p2 when (exitcond_fu_323_p2(0) = '1') else 
        tmp1_fu_335_p2;
end behav;
