-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.021000,HLS_SYN_LAT=258,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1234,HLS_SYN_LUT=2147}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv61_2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv61_3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_next_fu_282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_1257 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1262 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1267 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_mid2_v_v_v_fu_320_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_mid2_v_v_v_reg_1287 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_328_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_1293 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal a_row_0_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_row_1_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal a_row_2_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_mid2_fu_383_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_1335 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_row_3_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_399_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1355 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_row_3_1_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal a_row_2_1_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_1_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_fu_446_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1391 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1401 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_589_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1430 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_7_fu_757_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_9_fu_911_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1051_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_907_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_1_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_2_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp2_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_3_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal j_1_fu_1129_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal indvar_flatten_reg_242 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_264 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_346_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_360_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_374_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_390_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_654_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_1114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_row_0_2_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_2_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_2_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_11_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_18_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_8_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_17_fu_575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_12_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_16_fu_568_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_3_fu_561_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_11_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_18_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_8_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_17_fu_739_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_12_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_16_fu_732_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_1_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_3_fu_725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_11_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_18_fu_900_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_8_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_17_fu_893_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_12_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_16_fu_886_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_1_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_3_fu_879_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_11_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_18_fu_1040_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_8_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_17_fu_1033_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_12_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_16_fu_1026_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_1_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_3_fu_1019_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_288_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_341_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_369_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_460_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_copy_0_3_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_4_fu_492_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_5_fu_513_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_6_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_9_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_2_fu_505_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_7_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_14_fu_545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_15_fu_553_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_589_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_589_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_fu_662_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_4_fu_669_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_5_fu_683_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_6_fu_690_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_9_fu_704_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_2_fu_676_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_7_fu_697_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_14_fu_711_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_15_fu_718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_757_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_757_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast5_fu_802_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_805_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_copy_2_3_fu_816_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_4_fu_823_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_5_fu_837_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_6_fu_844_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_9_fu_858_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_2_fu_830_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_7_fu_851_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_14_fu_865_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_15_fu_872_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_911_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_911_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_4_fu_963_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_5_fu_977_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_6_fu_984_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_9_fu_998_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_2_fu_970_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_7_fu_991_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_14_fu_1005_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_15_fu_1012_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1051_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1051_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1051_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1051_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1_fu_1092_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast_fu_1101_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_cast6_fu_1105_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_1108_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_1119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component matrixmul_mux_42_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_mul_32scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixmul_mux_42_bkb_U1 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_6_fu_589_p1,
        din2 => tmp_6_fu_589_p2,
        din3 => tmp_6_fu_589_p3,
        din4 => tmp_6_fu_589_p4,
        din5 => tmp_reg_1355,
        dout => tmp_6_fu_589_p6);

    matrixmul_mul_32scud_U2 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_1430,
        din1 => a_row_0_1_reg_1381,
        ce => ap_const_logic_1,
        dout => grp_fu_753_p2);

    matrixmul_mux_42_bkb_U3 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_7_fu_757_p1,
        din2 => tmp_7_fu_757_p2,
        din3 => tmp_7_fu_757_p3,
        din4 => tmp_7_fu_757_p4,
        din5 => tmp_reg_1355,
        dout => tmp_7_fu_757_p6);

    matrixmul_mul_32scud_U4 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_1440,
        din1 => a_row_1_1_reg_1376,
        ce => ap_const_logic_1,
        dout => grp_fu_907_p2);

    matrixmul_mux_42_bkb_U5 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_9_fu_911_p1,
        din2 => tmp_9_fu_911_p2,
        din3 => tmp_9_fu_911_p3,
        din4 => tmp_9_fu_911_p4,
        din5 => tmp_reg_1355,
        dout => tmp_9_fu_911_p6);

    matrixmul_mul_32scud_U6 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_reg_1450,
        din1 => a_row_2_1_reg_1371,
        ce => ap_const_logic_1,
        dout => grp_fu_1047_p2);

    matrixmul_mux_42_bkb_U7 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_10_fu_1051_p1,
        din2 => tmp_10_fu_1051_p2,
        din3 => tmp_10_fu_1051_p3,
        din4 => tmp_10_fu_1051_p4,
        din5 => tmp_reg_1355,
        dout => tmp_10_fu_1051_p6);

    matrixmul_mul_32scud_U8 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_10_reg_1455,
        din1 => a_row_3_1_reg_1366,
        ce => ap_const_logic_1,
        dout => grp_fu_1084_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                i_reg_253 <= tmp_2_mid2_v_v_v_reg_1287;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_253 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                indvar_flatten_reg_242 <= indvar_flatten_next_reg_1257;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_242 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                j_reg_264 <= j_1_fu_1129_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_264 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                a_row_0_1_reg_1381 <= a_row_0_1_fu_453_p3;
                a_row_0_2_fu_86 <= a_row_0_1_fu_453_p3;
                a_row_1_1_reg_1376 <= a_row_1_1_fu_446_p3;
                a_row_1_2_fu_90 <= a_row_1_1_fu_446_p3;
                a_row_2_1_reg_1371 <= a_row_2_1_fu_439_p3;
                a_row_2_2_fu_94 <= a_row_2_1_fu_439_p3;
                a_row_3_1_reg_1366 <= a_row_3_1_fu_432_p3;
                a_row_3_2_fu_98 <= a_row_3_1_fu_432_p3;
                b_copy_0_3_11_fu_102 <= b_copy_0_3_18_fu_582_p3;
                b_copy_0_3_12_fu_110 <= b_copy_0_3_16_fu_568_p3;
                b_copy_0_3_1_fu_114 <= b_copy_0_3_3_fu_561_p3;
                b_copy_0_3_8_fu_106 <= b_copy_0_3_17_fu_575_p3;
                sel_tmp2_reg_1401 <= sel_tmp2_fu_487_p2;
                sel_tmp4_reg_1414 <= sel_tmp4_fu_500_p2;
                sel_tmp_reg_1391 <= sel_tmp_fu_474_p2;
                tmp_6_reg_1430 <= tmp_6_fu_589_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                a_row_0_reg_1310 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                a_row_1_reg_1320 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                a_row_2_reg_1330 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                a_row_3_reg_1345 <= a_Dout_A;
                j_mid2_reg_1335 <= j_mid2_fu_383_p3;
                tmp_reg_1355 <= tmp_fu_399_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                b_copy_1_3_11_fu_118 <= b_copy_1_3_18_fu_746_p3;
                b_copy_1_3_12_fu_126 <= b_copy_1_3_16_fu_732_p3;
                b_copy_1_3_1_fu_130 <= b_copy_1_3_3_fu_725_p3;
                b_copy_1_3_8_fu_122 <= b_copy_1_3_17_fu_739_p3;
                tmp_7_reg_1440 <= tmp_7_fu_757_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                b_copy_2_3_11_fu_134 <= b_copy_2_3_18_fu_900_p3;
                b_copy_2_3_12_fu_142 <= b_copy_2_3_16_fu_886_p3;
                b_copy_2_3_1_fu_146 <= b_copy_2_3_3_fu_879_p3;
                b_copy_2_3_8_fu_138 <= b_copy_2_3_17_fu_893_p3;
                tmp_9_reg_1450 <= tmp_9_fu_911_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                b_copy_3_3_11_fu_150 <= b_copy_3_3_18_fu_1040_p3;
                b_copy_3_3_12_fu_158 <= b_copy_3_3_16_fu_1026_p3;
                b_copy_3_3_1_fu_162 <= b_copy_3_3_3_fu_1019_p3;
                b_copy_3_3_8_fu_154 <= b_copy_3_3_17_fu_1033_p3;
                tmp_10_reg_1455 <= tmp_10_fu_1051_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_276_p2 = ap_const_lv1_0))) then
                exitcond_reg_1262 <= exitcond_fu_294_p2;
                tmp_2_mid2_v_v_v_reg_1287 <= tmp_2_mid2_v_v_v_fu_320_p3;
                    tmp_3_reg_1293(4 downto 2) <= tmp_3_fu_328_p3(4 downto 2);
                tmp_mid2_reg_1267 <= tmp_mid2_fu_312_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                indvar_flatten_next_reg_1257 <= indvar_flatten_next_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                tmp2_reg_1475 <= tmp2_fu_1088_p2;
                tmp_11_2_reg_1470 <= grp_fu_1047_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                tmp_11_1_reg_1465 <= grp_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                tmp_11_3_reg_1480 <= grp_fu_1084_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                tmp_s_reg_1460 <= grp_fu_753_p2;
            end if;
        end if;
    end process;
    tmp_3_reg_1293(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((exitcond_flatten_fu_276_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state17, tmp_2_fu_336_p1, tmp_11_fu_346_p3, tmp_13_fu_360_p3, tmp_15_fu_374_p3, tmp_16_fu_390_p3, tmp_19_cast_fu_469_p1, tmp_18_fu_654_p3, tmp_21_cast_fu_811_p1, tmp_22_cast_fu_1114_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            a_Addr_A_orig <= tmp_22_cast_fu_1114_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            a_Addr_A_orig <= tmp_21_cast_fu_811_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            a_Addr_A_orig <= tmp_18_fu_654_p3(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            a_Addr_A_orig <= tmp_19_cast_fu_469_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            a_Addr_A_orig <= tmp_16_fu_390_p3(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            a_Addr_A_orig <= tmp_15_fu_374_p3(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            a_Addr_A_orig <= tmp_13_fu_360_p3(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            a_Addr_A_orig <= tmp_11_fu_346_p3(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            a_Addr_A_orig <= tmp_2_fu_336_p1(32 - 1 downto 0);
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Din_A <= std_logic_vector(unsigned(tmp2_reg_1475) + unsigned(tmp3_fu_1119_p2));

    a_EN_A_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state17)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;

    a_WEN_A_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state17)))) then 
            a_WEN_A <= ap_const_lv4_F;
        else 
            a_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_row_0_1_fu_453_p3 <= 
        a_row_0_reg_1310 when (tmp_5_fu_427_p2(0) = '1') else 
        a_row_0_2_fu_86;
    a_row_1_1_fu_446_p3 <= 
        a_row_1_reg_1320 when (tmp_5_fu_427_p2(0) = '1') else 
        a_row_1_2_fu_90;
    a_row_2_1_fu_439_p3 <= 
        a_row_2_reg_1330 when (tmp_5_fu_427_p2(0) = '1') else 
        a_row_2_2_fu_94;
    a_row_3_1_fu_432_p3 <= 
        a_row_3_reg_1345 when (tmp_5_fu_427_p2(0) = '1') else 
        a_row_3_2_fu_98;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state18)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_0_3_14_fu_545_p3 <= 
        b_copy_0_3_8_fu_106 when (sel_tmp4_fu_500_p2(0) = '1') else 
        b_copy_0_3_9_fu_537_p3;
    b_copy_0_3_15_fu_553_p3 <= 
        a_Dout_A when (sel_tmp4_fu_500_p2(0) = '1') else 
        b_copy_0_3_11_fu_102;
    b_copy_0_3_16_fu_568_p3 <= 
        b_copy_0_3_7_fu_529_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_0_3_12_fu_110;
    b_copy_0_3_17_fu_575_p3 <= 
        b_copy_0_3_14_fu_545_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_0_3_8_fu_106;
    b_copy_0_3_18_fu_582_p3 <= 
        b_copy_0_3_15_fu_553_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_0_3_11_fu_102;
    b_copy_0_3_2_fu_505_p3 <= 
        b_copy_0_3_1_fu_114 when (sel_tmp4_fu_500_p2(0) = '1') else 
        b_copy_0_3_4_fu_492_p3;
    b_copy_0_3_3_fu_561_p3 <= 
        b_copy_0_3_2_fu_505_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_0_3_1_fu_114;
    b_copy_0_3_4_fu_492_p3 <= 
        b_copy_0_3_1_fu_114 when (sel_tmp2_fu_487_p2(0) = '1') else 
        b_copy_0_3_fu_479_p3;
    b_copy_0_3_5_fu_513_p3 <= 
        a_Dout_A when (sel_tmp_fu_474_p2(0) = '1') else 
        b_copy_0_3_12_fu_110;
    b_copy_0_3_6_fu_521_p3 <= 
        b_copy_0_3_12_fu_110 when (sel_tmp2_fu_487_p2(0) = '1') else 
        b_copy_0_3_5_fu_513_p3;
    b_copy_0_3_7_fu_529_p3 <= 
        b_copy_0_3_12_fu_110 when (sel_tmp4_fu_500_p2(0) = '1') else 
        b_copy_0_3_6_fu_521_p3;
    b_copy_0_3_9_fu_537_p3 <= 
        a_Dout_A when (sel_tmp2_fu_487_p2(0) = '1') else 
        b_copy_0_3_8_fu_106;
    b_copy_0_3_fu_479_p3 <= 
        b_copy_0_3_1_fu_114 when (sel_tmp_fu_474_p2(0) = '1') else 
        a_Dout_A;
    b_copy_1_3_14_fu_711_p3 <= 
        b_copy_1_3_8_fu_122 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_1_3_9_fu_704_p3;
    b_copy_1_3_15_fu_718_p3 <= 
        a_Dout_A when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_1_3_11_fu_118;
    b_copy_1_3_16_fu_732_p3 <= 
        b_copy_1_3_7_fu_697_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_1_3_12_fu_126;
    b_copy_1_3_17_fu_739_p3 <= 
        b_copy_1_3_14_fu_711_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_1_3_8_fu_122;
    b_copy_1_3_18_fu_746_p3 <= 
        b_copy_1_3_15_fu_718_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_1_3_11_fu_118;
    b_copy_1_3_2_fu_676_p3 <= 
        b_copy_1_3_1_fu_130 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_1_3_4_fu_669_p3;
    b_copy_1_3_3_fu_725_p3 <= 
        b_copy_1_3_2_fu_676_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_1_3_1_fu_130;
    b_copy_1_3_4_fu_669_p3 <= 
        b_copy_1_3_1_fu_130 when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_1_3_fu_662_p3;
    b_copy_1_3_5_fu_683_p3 <= 
        a_Dout_A when (sel_tmp_reg_1391(0) = '1') else 
        b_copy_1_3_12_fu_126;
    b_copy_1_3_6_fu_690_p3 <= 
        b_copy_1_3_12_fu_126 when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_1_3_5_fu_683_p3;
    b_copy_1_3_7_fu_697_p3 <= 
        b_copy_1_3_12_fu_126 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_1_3_6_fu_690_p3;
    b_copy_1_3_9_fu_704_p3 <= 
        a_Dout_A when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_1_3_8_fu_122;
    b_copy_1_3_fu_662_p3 <= 
        b_copy_1_3_1_fu_130 when (sel_tmp_reg_1391(0) = '1') else 
        a_Dout_A;
    b_copy_2_3_14_fu_865_p3 <= 
        b_copy_2_3_8_fu_138 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_2_3_9_fu_858_p3;
    b_copy_2_3_15_fu_872_p3 <= 
        a_Dout_A when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_2_3_11_fu_134;
    b_copy_2_3_16_fu_886_p3 <= 
        b_copy_2_3_7_fu_851_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_2_3_12_fu_142;
    b_copy_2_3_17_fu_893_p3 <= 
        b_copy_2_3_14_fu_865_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_2_3_8_fu_138;
    b_copy_2_3_18_fu_900_p3 <= 
        b_copy_2_3_15_fu_872_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_2_3_11_fu_134;
    b_copy_2_3_2_fu_830_p3 <= 
        b_copy_2_3_1_fu_146 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_2_3_4_fu_823_p3;
    b_copy_2_3_3_fu_879_p3 <= 
        b_copy_2_3_2_fu_830_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_2_3_1_fu_146;
    b_copy_2_3_4_fu_823_p3 <= 
        b_copy_2_3_1_fu_146 when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_2_3_fu_816_p3;
    b_copy_2_3_5_fu_837_p3 <= 
        a_Dout_A when (sel_tmp_reg_1391(0) = '1') else 
        b_copy_2_3_12_fu_142;
    b_copy_2_3_6_fu_844_p3 <= 
        b_copy_2_3_12_fu_142 when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_2_3_5_fu_837_p3;
    b_copy_2_3_7_fu_851_p3 <= 
        b_copy_2_3_12_fu_142 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_2_3_6_fu_844_p3;
    b_copy_2_3_9_fu_858_p3 <= 
        a_Dout_A when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_2_3_8_fu_138;
    b_copy_2_3_fu_816_p3 <= 
        b_copy_2_3_1_fu_146 when (sel_tmp_reg_1391(0) = '1') else 
        a_Dout_A;
    b_copy_3_3_14_fu_1005_p3 <= 
        b_copy_3_3_8_fu_154 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_3_3_9_fu_998_p3;
    b_copy_3_3_15_fu_1012_p3 <= 
        a_Dout_A when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_3_3_11_fu_150;
    b_copy_3_3_16_fu_1026_p3 <= 
        b_copy_3_3_7_fu_991_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_3_3_12_fu_158;
    b_copy_3_3_17_fu_1033_p3 <= 
        b_copy_3_3_14_fu_1005_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_3_3_8_fu_154;
    b_copy_3_3_18_fu_1040_p3 <= 
        b_copy_3_3_15_fu_1012_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_3_3_11_fu_150;
    b_copy_3_3_2_fu_970_p3 <= 
        b_copy_3_3_1_fu_162 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_3_3_4_fu_963_p3;
    b_copy_3_3_3_fu_1019_p3 <= 
        b_copy_3_3_2_fu_970_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_3_3_1_fu_162;
    b_copy_3_3_4_fu_963_p3 <= 
        b_copy_3_3_1_fu_162 when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_3_3_fu_956_p3;
    b_copy_3_3_5_fu_977_p3 <= 
        a_Dout_A when (sel_tmp_reg_1391(0) = '1') else 
        b_copy_3_3_12_fu_158;
    b_copy_3_3_6_fu_984_p3 <= 
        b_copy_3_3_12_fu_158 when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_3_3_5_fu_977_p3;
    b_copy_3_3_7_fu_991_p3 <= 
        b_copy_3_3_12_fu_158 when (sel_tmp4_reg_1414(0) = '1') else 
        b_copy_3_3_6_fu_984_p3;
    b_copy_3_3_9_fu_998_p3 <= 
        a_Dout_A when (sel_tmp2_reg_1401(0) = '1') else 
        b_copy_3_3_8_fu_154;
    b_copy_3_3_fu_956_p3 <= 
        b_copy_3_3_1_fu_162 when (sel_tmp_reg_1391(0) = '1') else 
        a_Dout_A;
    exitcond_flatten_fu_276_p2 <= "1" when (indvar_flatten_reg_242 = ap_const_lv5_10) else "0";
    exitcond_fu_294_p2 <= "1" when (j_reg_264 = ap_const_lv3_4) else "0";
    i_1_fu_288_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_reg_253));
    indvar_flatten_next_fu_282_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_242) + unsigned(ap_const_lv5_1));
    j_1_fu_1129_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_mid2_reg_1335));
    j_mid2_fu_383_p3 <= 
        ap_const_lv3_0 when (exitcond_reg_1262(0) = '1') else 
        j_reg_264;
    sel_tmp2_fu_487_p2 <= "1" when (tmp_reg_1355 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_500_p2 <= "1" when (tmp_reg_1355 = ap_const_lv2_0) else "0";
    sel_tmp_fu_474_p2 <= "1" when (tmp_reg_1355 = ap_const_lv2_2) else "0";
    tmp1_fu_306_p2 <= "1" when (i_reg_253 = ap_const_lv3_0) else "0";
    tmp2_fu_1088_p2 <= std_logic_vector(unsigned(tmp_11_1_reg_1465) + unsigned(tmp_s_reg_1460));
    tmp3_fu_1119_p2 <= std_logic_vector(unsigned(tmp_11_3_reg_1480) + unsigned(tmp_11_2_reg_1470));
    tmp_10_fu_1051_p1 <= 
        b_copy_3_3_15_fu_1012_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_3_3_11_fu_150;
    tmp_10_fu_1051_p2 <= 
        b_copy_3_3_14_fu_1005_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_3_3_8_fu_154;
    tmp_10_fu_1051_p3 <= 
        b_copy_3_3_7_fu_991_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_3_3_12_fu_158;
    tmp_10_fu_1051_p4 <= 
        b_copy_3_3_2_fu_970_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_3_3_1_fu_162;
    tmp_11_fu_346_p3 <= (ap_const_lv59_0 & tmp_8_fu_341_p2);
    tmp_12_fu_355_p2 <= (tmp_3_reg_1293 or ap_const_lv5_2);
    tmp_13_fu_360_p3 <= (ap_const_lv59_0 & tmp_12_fu_355_p2);
    tmp_14_fu_369_p2 <= (tmp_3_reg_1293 or ap_const_lv5_3);
    tmp_15_fu_374_p3 <= (ap_const_lv59_0 & tmp_14_fu_369_p2);
    tmp_16_fu_390_p3 <= (ap_const_lv61_2 & j_mid2_fu_383_p3);
    tmp_17_fu_463_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(tmp_8_cast_fu_460_p1));
    tmp_18_fu_654_p3 <= (ap_const_lv61_3 & j_mid2_reg_1335);
    tmp_19_cast_fu_469_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_463_p2),64));
    tmp_19_fu_805_p2 <= std_logic_vector(unsigned(ap_const_lv6_1C) + unsigned(tmp_8_cast5_fu_802_p1));
    tmp_1_fu_1092_p4 <= ((ap_const_lv1_1 & tmp_2_mid2_v_v_v_reg_1287) & ap_const_lv2_0);
    tmp_20_fu_1108_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_1101_p1) + unsigned(tmp_8_cast6_fu_1105_p1));
    tmp_21_cast_fu_811_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_805_p2),64));
    tmp_22_cast_fu_1114_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_1108_p2),64));
    tmp_2_cast_fu_1101_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_1092_p4),7));
    tmp_2_fu_336_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_328_p3),64));
    tmp_2_mid2_v_v_v_fu_320_p3 <= 
        i_1_fu_288_p2 when (exitcond_fu_294_p2(0) = '1') else 
        i_reg_253;
    tmp_3_fu_328_p3 <= (tmp_2_mid2_v_v_v_fu_320_p3 & ap_const_lv2_0);
    tmp_5_fu_427_p2 <= "1" when (j_mid2_reg_1335 = ap_const_lv3_0) else "0";
    tmp_6_fu_589_p1 <= 
        b_copy_0_3_15_fu_553_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_0_3_11_fu_102;
    tmp_6_fu_589_p2 <= 
        b_copy_0_3_14_fu_545_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_0_3_8_fu_106;
    tmp_6_fu_589_p3 <= 
        b_copy_0_3_7_fu_529_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_0_3_12_fu_110;
    tmp_6_fu_589_p4 <= 
        b_copy_0_3_2_fu_505_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_0_3_1_fu_114;
    tmp_7_fu_757_p1 <= 
        b_copy_1_3_15_fu_718_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_1_3_11_fu_118;
    tmp_7_fu_757_p2 <= 
        b_copy_1_3_14_fu_711_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_1_3_8_fu_122;
    tmp_7_fu_757_p3 <= 
        b_copy_1_3_7_fu_697_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_1_3_12_fu_126;
    tmp_7_fu_757_p4 <= 
        b_copy_1_3_2_fu_676_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_1_3_1_fu_130;
    tmp_8_cast5_fu_802_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1335),6));
    tmp_8_cast6_fu_1105_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1335),7));
    tmp_8_cast_fu_460_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1335),5));
    tmp_8_fu_341_p2 <= (tmp_3_reg_1293 or ap_const_lv5_1);
    tmp_9_fu_911_p1 <= 
        b_copy_2_3_15_fu_872_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_2_3_11_fu_134;
    tmp_9_fu_911_p2 <= 
        b_copy_2_3_14_fu_865_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_2_3_8_fu_138;
    tmp_9_fu_911_p3 <= 
        b_copy_2_3_7_fu_851_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_2_3_12_fu_142;
    tmp_9_fu_911_p4 <= 
        b_copy_2_3_2_fu_830_p3 when (tmp_mid2_reg_1267(0) = '1') else 
        b_copy_2_3_1_fu_146;
    tmp_fu_399_p1 <= j_mid2_fu_383_p3(2 - 1 downto 0);
    tmp_mid1_fu_300_p2 <= "1" when (i_1_fu_288_p2 = ap_const_lv3_0) else "0";
    tmp_mid2_fu_312_p3 <= 
        tmp_mid1_fu_300_p2 when (exitcond_fu_294_p2(0) = '1') else 
        tmp1_fu_306_p2;
end behav;
