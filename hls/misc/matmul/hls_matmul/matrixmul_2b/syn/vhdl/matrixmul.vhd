-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.050000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1265,HLS_SYN_LUT=2180}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv61_2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_250 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_261 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_272 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1256 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1256 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1256 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_289_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_1260 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_307_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_1265 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_j_mid2_reg_1265 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter2_j_mid2_reg_1265 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1275 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_mid2_v_fu_335_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i2_mid2_v_reg_1295 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_i2_mid2_v_reg_1295 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_343_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_1301 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_361_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1318 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal a_row_0_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_19_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal a_row_1_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_19_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal tmp_5_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1375 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1388 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1398 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_1411 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_549_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal a_row_2_1_fu_613_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_reg_1442 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_fu_625_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_reg_1447 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_731_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1457 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal tmp_3_fu_901_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1467 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_918_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1472 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1050_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1477 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_2_reg_1487 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_914_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_3_reg_1492 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1046_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1497 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1096_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_1_reg_1502 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_3_fu_1108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_3_reg_1507 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal indvar_flatten_phi_fu_254_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_phi_fu_265_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_276_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_370_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_398_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_424_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_631_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_1131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_row_0_2_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_2_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_2_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_11_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_18_fu_894_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_8_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_17_fu_887_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_12_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_16_fu_880_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_1_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_3_fu_873_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_11_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_18_fu_1039_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_8_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_17_fu_1032_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_12_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_16_fu_1025_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_1_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_3_fu_1018_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_11_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_18_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_8_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_17_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_12_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_16_fu_528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_1_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_3_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_11_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_18_fu_719_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_8_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_17_fu_712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_12_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_16_fu_705_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_1_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_3_fu_698_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_295_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast5_fu_379_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_fu_382_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_393_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_419_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_copy_2_3_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_4_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_5_fu_476_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_6_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_9_fu_499_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_2_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_7_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_14_fu_506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_3_15_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_549_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_549_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_fu_639_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_4_fu_645_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_5_fu_659_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_6_fu_665_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_9_fu_679_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_2_fu_652_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_7_fu_672_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_14_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_3_15_fu_692_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_731_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_731_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_796_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_799_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_copy_0_3_fu_810_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_4_fu_817_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_5_fu_831_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_6_fu_838_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_9_fu_852_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_2_fu_824_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_7_fu_845_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_14_fu_859_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_3_15_fu_866_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_901_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_901_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_901_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_fu_955_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_4_fu_962_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_5_fu_976_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_6_fu_983_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_9_fu_997_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_2_fu_969_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_7_fu_990_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_14_fu_1004_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_3_15_fu_1011_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1050_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1050_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1050_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1050_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1090_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp8_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_1104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1090_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_1114_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_cast6_fu_1122_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_1125_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component matrixmul_mux_42_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_mul_32scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_urem_4ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    matrixmul_mux_42_bkb_U1 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_6_fu_549_p1,
        din2 => tmp_6_fu_549_p2,
        din3 => tmp_6_fu_549_p3,
        din4 => tmp_6_fu_549_p4,
        din5 => tmp_reg_1318,
        dout => tmp_6_fu_549_p6);

    matrixmul_mul_32scud_U2 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_1427,
        din1 => grp_fu_726_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_726_p2);

    matrixmul_mux_42_bkb_U3 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_7_fu_731_p1,
        din2 => tmp_7_fu_731_p2,
        din3 => tmp_7_fu_731_p3,
        din4 => tmp_7_fu_731_p4,
        din5 => tmp_reg_1318,
        dout => tmp_7_fu_731_p6);

    matrixmul_mux_42_bkb_U4 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_3_fu_901_p1,
        din2 => tmp_3_fu_901_p2,
        din3 => tmp_3_fu_901_p3,
        din4 => tmp_3_fu_901_p4,
        din5 => tmp_reg_1318,
        dout => tmp_3_fu_901_p6);

    matrixmul_mul_32scud_U5 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_1457,
        din1 => a_row_3_1_reg_1432,
        ce => ap_const_logic_1,
        dout => grp_fu_914_p2);

    matrixmul_mul_32scud_U6 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_1467,
        din1 => a_row_0_1_reg_1447,
        ce => ap_const_logic_1,
        dout => grp_fu_1046_p2);

    matrixmul_mux_42_bkb_U7 : component matrixmul_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => tmp_4_fu_1050_p1,
        din2 => tmp_4_fu_1050_p2,
        din3 => tmp_4_fu_1050_p3,
        din4 => tmp_4_fu_1050_p4,
        din5 => tmp_reg_1318,
        dout => tmp_4_fu_1050_p6);

    matrixmul_urem_4ndEe_U8 : component matrixmul_urem_4ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1090_p0,
        din1 => ap_const_lv4_6,
        ce => ap_const_logic_1,
        dout => grp_fu_1090_p2);

    matrixmul_mul_32scud_U9 : component matrixmul_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_1477,
        din1 => a_row_1_1_reg_1442,
        ce => ap_const_logic_1,
        dout => grp_fu_1096_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_283_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and not((exitcond_flatten_reg_1256 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_261 <= i2_mid2_v_reg_1295;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_261 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_250 <= indvar_flatten_next_reg_1260;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_250 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_272 <= j_1_reg_1472;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_272 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then
                a_row_0_1_reg_1447 <= a_row_0_1_fu_625_p3;
                a_row_1_1_reg_1442 <= a_row_1_1_fu_619_p3;
                a_row_3_1_reg_1432 <= a_row_3_1_fu_606_p3;
                tmp_7_reg_1457 <= tmp_7_fu_731_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then
                a_row_0_2_fu_90 <= a_row_0_1_fu_625_p3;
                a_row_1_2_fu_94 <= a_row_1_1_fu_619_p3;
                a_row_2_2_fu_98 <= a_row_2_1_fu_613_p3;
                a_row_3_2_fu_102 <= a_row_3_1_fu_606_p3;
                b_copy_3_3_11_fu_154 <= b_copy_3_3_18_fu_719_p3;
                b_copy_3_3_12_fu_162 <= b_copy_3_3_16_fu_705_p3;
                b_copy_3_3_1_fu_166 <= b_copy_3_3_3_fu_698_p3;
                b_copy_3_3_8_fu_158 <= b_copy_3_3_17_fu_712_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1256 = ap_const_lv1_0))) then
                a_row_0_reg_1334 <= a_0_Dout_A;
                b_copy_2_3_19_reg_1344 <= a_1_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                a_row_1_reg_1357 <= a_0_Dout_A;
                b_copy_3_3_19_reg_1362 <= a_1_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                a_row_2_reg_1383 <= a_0_Dout_A;
                b_copy_2_3_11_fu_138 <= b_copy_2_3_18_fu_542_p3;
                b_copy_2_3_12_fu_146 <= b_copy_2_3_16_fu_528_p3;
                b_copy_2_3_1_fu_150 <= b_copy_2_3_3_fu_521_p3;
                b_copy_2_3_8_fu_142 <= b_copy_2_3_17_fu_535_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1256 <= exitcond_flatten_reg_1256;
                ap_pipeline_reg_pp0_iter1_i2_mid2_v_reg_1295 <= i2_mid2_v_reg_1295;
                ap_pipeline_reg_pp0_iter1_j_mid2_reg_1265 <= j_mid2_reg_1265;
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1256 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1256;
                ap_pipeline_reg_pp0_iter2_j_mid2_reg_1265 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_1265;
                exitcond_flatten_reg_1256 <= exitcond_flatten_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                b_copy_0_3_11_fu_106 <= b_copy_0_3_18_fu_894_p3;
                b_copy_0_3_12_fu_114 <= b_copy_0_3_16_fu_880_p3;
                b_copy_0_3_1_fu_118 <= b_copy_0_3_3_fu_873_p3;
                b_copy_0_3_8_fu_110 <= b_copy_0_3_17_fu_887_p3;
                j_1_reg_1472 <= j_1_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                b_copy_1_3_11_fu_122 <= b_copy_1_3_18_fu_1039_p3;
                b_copy_1_3_12_fu_130 <= b_copy_1_3_16_fu_1025_p3;
                b_copy_1_3_1_fu_134 <= b_copy_1_3_3_fu_1018_p3;
                b_copy_1_3_8_fu_126 <= b_copy_1_3_17_fu_1032_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_283_p2 = ap_const_lv1_0))) then
                i2_mid2_v_reg_1295 <= i2_mid2_v_fu_335_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_1260 <= indvar_flatten_next_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_283_p2 = ap_const_lv1_0))) then
                j_mid2_reg_1265 <= j_mid2_fu_307_p3;
                    tmp_1_reg_1301(4 downto 2) <= tmp_1_fu_343_p3(4 downto 2);
                tmp_mid2_reg_1275 <= tmp_mid2_fu_327_p3;
                tmp_reg_1318 <= tmp_fu_361_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                sel_tmp2_reg_1398 <= sel_tmp2_fu_443_p2;
                sel_tmp4_reg_1411 <= sel_tmp4_fu_448_p2;
                sel_tmp_reg_1388 <= sel_tmp_fu_438_p2;
                tmp_5_reg_1375 <= tmp_5_fu_433_p2;
                tmp_6_reg_1427 <= tmp_6_fu_549_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1256 = ap_const_lv1_0))) then
                tmp_11_1_reg_1502 <= grp_fu_1096_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1256 = ap_const_lv1_0))) then
                tmp_11_2_reg_1487 <= grp_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1256 = ap_const_lv1_0))) then
                tmp_11_3_reg_1492 <= grp_fu_914_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1256 = ap_const_lv1_0))) then
                tmp_12_3_reg_1507 <= tmp_12_3_fu_1108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_3_reg_1467 <= tmp_3_fu_901_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0))) then
                tmp_4_reg_1477 <= tmp_4_fu_1050_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1256 = ap_const_lv1_0))) then
                tmp_s_reg_1497 <= grp_fu_1046_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_1301(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_283_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_283_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
            when ap_ST_fsm_pp0_stage4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
            when ap_ST_fsm_pp0_stage5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_9_fu_351_p1, tmp_11_fu_370_p3, tmp_13_fu_398_p3, tmp_15_fu_424_p3, tmp_17_fu_631_p3, tmp_19_cast_fu_805_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                a_0_Addr_A_orig <= tmp_19_cast_fu_805_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                a_0_Addr_A_orig <= tmp_17_fu_631_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_0_Addr_A_orig <= tmp_15_fu_424_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_0_Addr_A_orig <= tmp_13_fu_398_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_0_Addr_A_orig <= tmp_11_fu_370_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_0_Addr_A_orig <= tmp_9_fu_351_p1(32 - 1 downto 0);
            else 
                a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv32_0;

    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv4_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, tmp_8_fu_356_p1, tmp_20_cast_fu_388_p1, tmp_21_cast_fu_1131_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            a_1_Addr_A_orig <= tmp_21_cast_fu_1131_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            a_1_Addr_A_orig <= tmp_20_cast_fu_388_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_1_Addr_A_orig <= tmp_8_fu_356_p1(32 - 1 downto 0);
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= tmp_12_3_reg_1507;

    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;

    a_1_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1256, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            a_1_WEN_A <= ap_const_lv4_F;
        else 
            a_1_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_row_0_1_fu_625_p3 <= 
        a_row_0_reg_1334 when (tmp_5_reg_1375(0) = '1') else 
        a_row_0_2_fu_90;
    a_row_1_1_fu_619_p3 <= 
        a_row_1_reg_1357 when (tmp_5_reg_1375(0) = '1') else 
        a_row_1_2_fu_94;
    a_row_2_1_fu_613_p3 <= 
        a_row_2_reg_1383 when (tmp_5_reg_1375(0) = '1') else 
        a_row_2_2_fu_98;
    a_row_3_1_fu_606_p3 <= 
        a_0_Dout_A when (tmp_5_reg_1375(0) = '1') else 
        a_row_3_2_fu_102;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state17 <= ap_CS_fsm(7 downto 7);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_0_3_14_fu_859_p3 <= 
        b_copy_0_3_8_fu_110 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_0_3_9_fu_852_p3;
    b_copy_0_3_15_fu_866_p3 <= 
        a_0_Dout_A when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_0_3_11_fu_106;
    b_copy_0_3_16_fu_880_p3 <= 
        b_copy_0_3_7_fu_845_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_0_3_12_fu_114;
    b_copy_0_3_17_fu_887_p3 <= 
        b_copy_0_3_14_fu_859_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_0_3_8_fu_110;
    b_copy_0_3_18_fu_894_p3 <= 
        b_copy_0_3_15_fu_866_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_0_3_11_fu_106;
    b_copy_0_3_2_fu_824_p3 <= 
        b_copy_0_3_1_fu_118 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_0_3_4_fu_817_p3;
    b_copy_0_3_3_fu_873_p3 <= 
        b_copy_0_3_2_fu_824_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_0_3_1_fu_118;
    b_copy_0_3_4_fu_817_p3 <= 
        b_copy_0_3_1_fu_118 when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_0_3_fu_810_p3;
    b_copy_0_3_5_fu_831_p3 <= 
        a_0_Dout_A when (sel_tmp_reg_1388(0) = '1') else 
        b_copy_0_3_12_fu_114;
    b_copy_0_3_6_fu_838_p3 <= 
        b_copy_0_3_12_fu_114 when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_0_3_5_fu_831_p3;
    b_copy_0_3_7_fu_845_p3 <= 
        b_copy_0_3_12_fu_114 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_0_3_6_fu_838_p3;
    b_copy_0_3_9_fu_852_p3 <= 
        a_0_Dout_A when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_0_3_8_fu_110;
    b_copy_0_3_fu_810_p3 <= 
        b_copy_0_3_1_fu_118 when (sel_tmp_reg_1388(0) = '1') else 
        a_0_Dout_A;
    b_copy_1_3_14_fu_1004_p3 <= 
        b_copy_1_3_8_fu_126 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_1_3_9_fu_997_p3;
    b_copy_1_3_15_fu_1011_p3 <= 
        a_0_Dout_A when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_1_3_11_fu_122;
    b_copy_1_3_16_fu_1025_p3 <= 
        b_copy_1_3_7_fu_990_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_1_3_12_fu_130;
    b_copy_1_3_17_fu_1032_p3 <= 
        b_copy_1_3_14_fu_1004_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_1_3_8_fu_126;
    b_copy_1_3_18_fu_1039_p3 <= 
        b_copy_1_3_15_fu_1011_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_1_3_11_fu_122;
    b_copy_1_3_2_fu_969_p3 <= 
        b_copy_1_3_1_fu_134 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_1_3_4_fu_962_p3;
    b_copy_1_3_3_fu_1018_p3 <= 
        b_copy_1_3_2_fu_969_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_1_3_1_fu_134;
    b_copy_1_3_4_fu_962_p3 <= 
        b_copy_1_3_1_fu_134 when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_1_3_fu_955_p3;
    b_copy_1_3_5_fu_976_p3 <= 
        a_0_Dout_A when (sel_tmp_reg_1388(0) = '1') else 
        b_copy_1_3_12_fu_130;
    b_copy_1_3_6_fu_983_p3 <= 
        b_copy_1_3_12_fu_130 when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_1_3_5_fu_976_p3;
    b_copy_1_3_7_fu_990_p3 <= 
        b_copy_1_3_12_fu_130 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_1_3_6_fu_983_p3;
    b_copy_1_3_9_fu_997_p3 <= 
        a_0_Dout_A when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_1_3_8_fu_126;
    b_copy_1_3_fu_955_p3 <= 
        b_copy_1_3_1_fu_134 when (sel_tmp_reg_1388(0) = '1') else 
        a_0_Dout_A;
    b_copy_2_3_14_fu_506_p3 <= 
        b_copy_2_3_8_fu_142 when (sel_tmp4_fu_448_p2(0) = '1') else 
        b_copy_2_3_9_fu_499_p3;
    b_copy_2_3_15_fu_514_p3 <= 
        b_copy_2_3_19_reg_1344 when (sel_tmp4_fu_448_p2(0) = '1') else 
        b_copy_2_3_11_fu_138;
    b_copy_2_3_16_fu_528_p3 <= 
        b_copy_2_3_7_fu_491_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_2_3_12_fu_146;
    b_copy_2_3_17_fu_535_p3 <= 
        b_copy_2_3_14_fu_506_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_2_3_8_fu_142;
    b_copy_2_3_18_fu_542_p3 <= 
        b_copy_2_3_15_fu_514_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_2_3_11_fu_138;
    b_copy_2_3_2_fu_468_p3 <= 
        b_copy_2_3_1_fu_150 when (sel_tmp4_fu_448_p2(0) = '1') else 
        b_copy_2_3_4_fu_460_p3;
    b_copy_2_3_3_fu_521_p3 <= 
        b_copy_2_3_2_fu_468_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_2_3_1_fu_150;
    b_copy_2_3_4_fu_460_p3 <= 
        b_copy_2_3_1_fu_150 when (sel_tmp2_fu_443_p2(0) = '1') else 
        b_copy_2_3_fu_453_p3;
    b_copy_2_3_5_fu_476_p3 <= 
        b_copy_2_3_19_reg_1344 when (sel_tmp_fu_438_p2(0) = '1') else 
        b_copy_2_3_12_fu_146;
    b_copy_2_3_6_fu_483_p3 <= 
        b_copy_2_3_12_fu_146 when (sel_tmp2_fu_443_p2(0) = '1') else 
        b_copy_2_3_5_fu_476_p3;
    b_copy_2_3_7_fu_491_p3 <= 
        b_copy_2_3_12_fu_146 when (sel_tmp4_fu_448_p2(0) = '1') else 
        b_copy_2_3_6_fu_483_p3;
    b_copy_2_3_9_fu_499_p3 <= 
        b_copy_2_3_19_reg_1344 when (sel_tmp2_fu_443_p2(0) = '1') else 
        b_copy_2_3_8_fu_142;
    b_copy_2_3_fu_453_p3 <= 
        b_copy_2_3_1_fu_150 when (sel_tmp_fu_438_p2(0) = '1') else 
        b_copy_2_3_19_reg_1344;
    b_copy_3_3_14_fu_685_p3 <= 
        b_copy_3_3_8_fu_158 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_3_3_9_fu_679_p3;
    b_copy_3_3_15_fu_692_p3 <= 
        b_copy_3_3_19_reg_1362 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_3_3_11_fu_154;
    b_copy_3_3_16_fu_705_p3 <= 
        b_copy_3_3_7_fu_672_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_3_3_12_fu_162;
    b_copy_3_3_17_fu_712_p3 <= 
        b_copy_3_3_14_fu_685_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_3_3_8_fu_158;
    b_copy_3_3_18_fu_719_p3 <= 
        b_copy_3_3_15_fu_692_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_3_3_11_fu_154;
    b_copy_3_3_2_fu_652_p3 <= 
        b_copy_3_3_1_fu_166 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_3_3_4_fu_645_p3;
    b_copy_3_3_3_fu_698_p3 <= 
        b_copy_3_3_2_fu_652_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_3_3_1_fu_166;
    b_copy_3_3_4_fu_645_p3 <= 
        b_copy_3_3_1_fu_166 when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_3_3_fu_639_p3;
    b_copy_3_3_5_fu_659_p3 <= 
        b_copy_3_3_19_reg_1362 when (sel_tmp_reg_1388(0) = '1') else 
        b_copy_3_3_12_fu_162;
    b_copy_3_3_6_fu_665_p3 <= 
        b_copy_3_3_12_fu_162 when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_3_3_5_fu_659_p3;
    b_copy_3_3_7_fu_672_p3 <= 
        b_copy_3_3_12_fu_162 when (sel_tmp4_reg_1411(0) = '1') else 
        b_copy_3_3_6_fu_665_p3;
    b_copy_3_3_9_fu_679_p3 <= 
        b_copy_3_3_19_reg_1362 when (sel_tmp2_reg_1398(0) = '1') else 
        b_copy_3_3_8_fu_158;
    b_copy_3_3_fu_639_p3 <= 
        b_copy_3_3_1_fu_166 when (sel_tmp_reg_1388(0) = '1') else 
        b_copy_3_3_19_reg_1362;
    exitcond_flatten_fu_283_p2 <= "1" when (indvar_flatten_phi_fu_254_p4 = ap_const_lv5_10) else "0";
    exitcond_fu_301_p2 <= "1" when (j_phi_fu_276_p4 = ap_const_lv3_4) else "0";
    grp_fu_1090_p0 <= (ap_const_lv1_1 & ap_pipeline_reg_pp0_iter1_i2_mid2_v_reg_1295);
    grp_fu_726_p1 <= 
        a_row_2_reg_1383 when (tmp_5_reg_1375(0) = '1') else 
        a_row_2_2_fu_98;
    i2_mid2_v_fu_335_p3 <= 
        i_1_fu_295_p2 when (exitcond_fu_301_p2(0) = '1') else 
        i_phi_fu_265_p4;
    i_1_fu_295_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_phi_fu_265_p4));

    i_phi_fu_265_p4_assign_proc : process(i_reg_261, exitcond_flatten_reg_1256, ap_CS_fsm_pp0_stage0, i2_mid2_v_reg_1295, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_phi_fu_265_p4 <= i2_mid2_v_reg_1295;
        else 
            i_phi_fu_265_p4 <= i_reg_261;
        end if; 
    end process;

    indvar_flatten_next_fu_289_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_254_p4) + unsigned(ap_const_lv5_1));

    indvar_flatten_phi_fu_254_p4_assign_proc : process(indvar_flatten_reg_250, exitcond_flatten_reg_1256, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1260, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_254_p4 <= indvar_flatten_next_reg_1260;
        else 
            indvar_flatten_phi_fu_254_p4 <= indvar_flatten_reg_250;
        end if; 
    end process;

    j_1_fu_918_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_mid2_reg_1265));
    j_mid2_fu_307_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_301_p2(0) = '1') else 
        j_phi_fu_276_p4;

    j_phi_fu_276_p4_assign_proc : process(j_reg_272, exitcond_flatten_reg_1256, ap_CS_fsm_pp0_stage0, j_1_reg_1472, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            j_phi_fu_276_p4 <= j_1_reg_1472;
        else 
            j_phi_fu_276_p4 <= j_reg_272;
        end if; 
    end process;

    sel_tmp2_fu_443_p2 <= "1" when (tmp_reg_1318 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_448_p2 <= "1" when (tmp_reg_1318 = ap_const_lv2_0) else "0";
    sel_tmp_fu_438_p2 <= "1" when (tmp_reg_1318 = ap_const_lv2_2) else "0";
    tmp1_fu_321_p2 <= "1" when (i_phi_fu_265_p4 = ap_const_lv3_0) else "0";
    tmp8_fu_1100_p2 <= std_logic_vector(unsigned(tmp_11_1_reg_1502) + unsigned(tmp_s_reg_1497));
    tmp9_fu_1104_p2 <= std_logic_vector(unsigned(tmp_11_3_reg_1492) + unsigned(tmp_11_2_reg_1487));
    tmp_10_fu_365_p2 <= (tmp_1_reg_1301 or ap_const_lv5_1);
    tmp_11_fu_370_p3 <= (ap_const_lv59_0 & tmp_10_fu_365_p2);
    tmp_12_3_fu_1108_p2 <= std_logic_vector(unsigned(tmp8_fu_1100_p2) + unsigned(tmp9_fu_1104_p2));
    tmp_12_fu_393_p2 <= (tmp_1_reg_1301 or ap_const_lv5_2);
    tmp_13_fu_398_p3 <= (ap_const_lv59_0 & tmp_12_fu_393_p2);
    tmp_14_fu_419_p2 <= (tmp_1_reg_1301 or ap_const_lv5_3);
    tmp_15_fu_424_p3 <= (ap_const_lv59_0 & tmp_14_fu_419_p2);
    tmp_16_fu_1114_p3 <= (grp_fu_1090_p2 & ap_const_lv2_0);
    tmp_17_fu_631_p3 <= (ap_const_lv61_2 & j_mid2_reg_1265);
    tmp_18_fu_799_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(tmp_8_cast_fu_796_p1));
    tmp_19_cast_fu_805_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_799_p2),64));
    tmp_19_fu_382_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(tmp_8_cast5_fu_379_p1));
    tmp_1_fu_343_p3 <= (i2_mid2_v_fu_335_p3 & ap_const_lv2_0);
    tmp_20_cast_fu_388_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_382_p2),64));
    tmp_20_fu_1125_p2 <= std_logic_vector(unsigned(tmp_16_fu_1114_p3) + unsigned(tmp_8_cast6_fu_1122_p1));
    tmp_21_cast_fu_1131_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_1125_p2),64));
    tmp_3_fu_901_p1 <= 
        b_copy_0_3_15_fu_866_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_0_3_11_fu_106;
    tmp_3_fu_901_p2 <= 
        b_copy_0_3_14_fu_859_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_0_3_8_fu_110;
    tmp_3_fu_901_p3 <= 
        b_copy_0_3_7_fu_845_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_0_3_12_fu_114;
    tmp_3_fu_901_p4 <= 
        b_copy_0_3_2_fu_824_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_0_3_1_fu_118;
    tmp_4_fu_1050_p1 <= 
        b_copy_1_3_15_fu_1011_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_1_3_11_fu_122;
    tmp_4_fu_1050_p2 <= 
        b_copy_1_3_14_fu_1004_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_1_3_8_fu_126;
    tmp_4_fu_1050_p3 <= 
        b_copy_1_3_7_fu_990_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_1_3_12_fu_130;
    tmp_4_fu_1050_p4 <= 
        b_copy_1_3_2_fu_969_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_1_3_1_fu_134;
    tmp_5_fu_433_p2 <= "1" when (j_mid2_reg_1265 = ap_const_lv3_0) else "0";
    tmp_6_fu_549_p1 <= 
        b_copy_2_3_15_fu_514_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_2_3_11_fu_138;
    tmp_6_fu_549_p2 <= 
        b_copy_2_3_14_fu_506_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_2_3_8_fu_142;
    tmp_6_fu_549_p3 <= 
        b_copy_2_3_7_fu_491_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_2_3_12_fu_146;
    tmp_6_fu_549_p4 <= 
        b_copy_2_3_2_fu_468_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_2_3_1_fu_150;
    tmp_7_fu_731_p1 <= 
        b_copy_3_3_15_fu_692_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_3_3_11_fu_154;
    tmp_7_fu_731_p2 <= 
        b_copy_3_3_14_fu_685_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_3_3_8_fu_158;
    tmp_7_fu_731_p3 <= 
        b_copy_3_3_7_fu_672_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_3_3_12_fu_162;
    tmp_7_fu_731_p4 <= 
        b_copy_3_3_2_fu_652_p3 when (tmp_mid2_reg_1275(0) = '1') else 
        b_copy_3_3_1_fu_166;
    tmp_8_cast5_fu_379_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1265),4));
    tmp_8_cast6_fu_1122_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter2_j_mid2_reg_1265),6));
    tmp_8_cast_fu_796_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1265),5));
    tmp_8_fu_356_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_307_p3),64));
    tmp_9_fu_351_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_343_p3),64));
    tmp_fu_361_p1 <= j_mid2_fu_307_p3(2 - 1 downto 0);
    tmp_mid1_fu_315_p2 <= "1" when (i_1_fu_295_p2 = ap_const_lv3_0) else "0";
    tmp_mid2_fu_327_p3 <= 
        tmp_mid1_fu_315_p2 when (exitcond_fu_301_p2(0) = '1') else 
        tmp1_fu_321_p2;
end behav;
