// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.050000,HLS_SYN_LAT=73,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1081,HLS_SYN_LUT=2377}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        a_3_Addr_A,
        a_3_EN_A,
        a_3_WEN_A,
        a_3_Din_A,
        a_3_Dout_A,
        a_3_Clk_A,
        a_3_Rst_A,
        a_4_Addr_A,
        a_4_EN_A,
        a_4_WEN_A,
        a_4_Din_A,
        a_4_Dout_A,
        a_4_Clk_A,
        a_4_Rst_A,
        a_5_Addr_A,
        a_5_EN_A,
        a_5_WEN_A,
        a_5_Din_A,
        a_5_Dout_A,
        a_5_Clk_A,
        a_5_Rst_A
);

parameter    ap_ST_fsm_state1 = 6'b1;
parameter    ap_ST_fsm_pp0_stage0 = 6'b10;
parameter    ap_ST_fsm_pp0_stage1 = 6'b100;
parameter    ap_ST_fsm_pp0_stage2 = 6'b1000;
parameter    ap_ST_fsm_pp0_stage3 = 6'b10000;
parameter    ap_ST_fsm_state14 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv61_0 = 61'b0000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv32_5 = 32'b101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [3:0] a_0_WEN_A;
output  [31:0] a_0_Din_A;
input  [31:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [3:0] a_1_WEN_A;
output  [31:0] a_1_Din_A;
input  [31:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [3:0] a_2_WEN_A;
output  [31:0] a_2_Din_A;
input  [31:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] a_3_Addr_A;
output   a_3_EN_A;
output  [3:0] a_3_WEN_A;
output  [31:0] a_3_Din_A;
input  [31:0] a_3_Dout_A;
output   a_3_Clk_A;
output   a_3_Rst_A;
output  [31:0] a_4_Addr_A;
output   a_4_EN_A;
output  [3:0] a_4_WEN_A;
output  [31:0] a_4_Din_A;
input  [31:0] a_4_Dout_A;
output   a_4_Clk_A;
output   a_4_Rst_A;
output  [31:0] a_5_Addr_A;
output   a_5_EN_A;
output  [3:0] a_5_WEN_A;
output  [31:0] a_5_Din_A;
input  [31:0] a_5_Dout_A;
output   a_5_Clk_A;
output   a_5_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_EN_A;
reg a_1_EN_A;
reg a_2_EN_A;
reg a_3_EN_A;
reg a_4_EN_A;
reg[3:0] a_4_WEN_A;
reg a_5_EN_A;
reg[3:0] a_5_WEN_A;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_308;
reg   [2:0] i_reg_319;
reg   [2:0] j_reg_330;
wire   [31:0] grp_fu_341_p3;
reg   [31:0] reg_348;
wire   [0:0] ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] exitcond_flatten_reg_1440;
wire   [0:0] ap_CS_fsm_pp0_stage2;
wire   [0:0] ap_CS_fsm_pp0_stage3;
wire   [0:0] exitcond_flatten_fu_406_p2;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1440;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1440;
wire   [4:0] indvar_flatten_next_fu_412_p2;
reg   [4:0] indvar_flatten_next_reg_1444;
wire   [2:0] j_mid2_fu_430_p3;
reg   [2:0] j_mid2_reg_1449;
wire   [0:0] tmp_mid2_fu_444_p3;
reg   [0:0] tmp_mid2_reg_1456;
wire   [2:0] newIndex1_mid2_v_v_fu_452_p3;
reg   [2:0] newIndex1_mid2_v_v_reg_1476;
wire   [2:0] tmp_11_fu_460_p2;
reg   [2:0] tmp_11_reg_1481;
wire   [0:0] cond1_mid2_fu_488_p3;
reg   [0:0] cond1_mid2_reg_1499;
wire   [0:0] cond_mid2_fu_528_p3;
reg   [0:0] cond_mid2_reg_1505;
reg   [0:0] ap_pipeline_reg_pp0_iter1_cond_mid2_reg_1505;
reg   [0:0] ap_pipeline_reg_pp0_iter2_cond_mid2_reg_1505;
wire   [1:0] tmp_23_fu_542_p1;
reg   [1:0] tmp_23_reg_1519;
wire   [0:0] tmp_5_fu_573_p2;
reg   [0:0] tmp_5_reg_1540;
wire   [0:0] sel_tmp1_fu_578_p2;
reg   [0:0] sel_tmp1_reg_1548;
wire   [3:0] tmp_8_cast_fu_583_p1;
reg   [3:0] tmp_8_cast_reg_1556;
wire   [0:0] sel_tmp5_fu_598_p2;
reg   [0:0] sel_tmp5_reg_1571;
wire   [0:0] sel_tmp7_fu_611_p2;
reg   [0:0] sel_tmp7_reg_1581;
wire   [0:0] sel_tmp9_fu_624_p2;
reg   [0:0] sel_tmp9_reg_1594;
reg   [31:0] b_copy_2_3_19_reg_1610;
wire  signed [31:0] tmp_2_fu_713_p6;
reg  signed [31:0] tmp_2_reg_1618;
wire   [2:0] j_1_fu_746_p2;
reg   [2:0] j_1_reg_1623;
wire  signed [31:0] a_row_0_2_fu_812_p3;
wire  signed [31:0] tmp_6_fu_1093_p6;
reg  signed [31:0] tmp_6_reg_1643;
wire  signed [31:0] tmp_7_fu_1106_p6;
reg  signed [31:0] tmp_7_reg_1648;
wire  signed [31:0] tmp_9_fu_1119_p6;
reg  signed [31:0] tmp_9_reg_1653;
wire  signed [31:0] a_row_1_2_fu_1225_p3;
wire   [3:0] tmp_21_fu_1232_p2;
reg   [3:0] tmp_21_reg_1673;
reg   [3:0] ap_pipeline_reg_pp0_iter1_tmp_21_reg_1673;
wire  signed [31:0] a_row_3_2_fu_1260_p3;
reg  signed [31:0] a_row_3_2_reg_1678;
wire  signed [31:0] a_row_2_2_fu_1274_p3;
wire   [31:0] grp_fu_1088_p2;
reg   [31:0] tmp_s_reg_1688;
wire   [31:0] grp_fu_1237_p2;
reg   [31:0] tmp_11_1_reg_1693;
wire   [31:0] grp_fu_1281_p2;
reg   [31:0] tmp_11_2_reg_1698;
wire   [31:0] grp_fu_1296_p2;
reg   [31:0] tmp_11_3_reg_1703;
wire   [31:0] tmp10_fu_1300_p2;
reg   [31:0] tmp10_reg_1708;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] indvar_flatten_phi_fu_312_p4;
reg   [2:0] i_phi_fu_323_p4;
reg   [2:0] j_phi_fu_334_p4;
wire   [63:0] tmp_12_fu_466_p1;
wire   [63:0] tmp_8_fu_536_p1;
wire   [63:0] tmp_14_fu_563_p3;
wire   [63:0] tmp_20_cast_fu_592_p1;
wire   [63:0] tmp_16_fu_795_p3;
wire   [63:0] tmp_18_fu_1208_p3;
wire   [63:0] tmp_21_cast_fu_1304_p1;
reg   [31:0] a_row_0_3_fu_92;
reg   [31:0] a_row_1_3_fu_96;
reg   [31:0] a_row_2_3_fu_100;
reg   [31:0] a_row_3_1_fu_104;
reg   [31:0] b_copy_0_3_11_fu_108;
wire   [31:0] b_copy_0_3_18_fu_706_p3;
reg   [31:0] b_copy_0_3_8_fu_112;
wire   [31:0] b_copy_0_3_17_fu_699_p3;
reg   [31:0] b_copy_0_3_12_fu_116;
wire   [31:0] b_copy_0_3_16_fu_692_p3;
reg   [31:0] b_copy_0_3_1_fu_120;
wire   [31:0] b_copy_0_3_3_fu_685_p3;
reg   [31:0] b_copy_1_3_11_fu_124;
wire   [31:0] b_copy_1_3_18_fu_1081_p3;
reg   [31:0] b_copy_1_3_8_fu_128;
wire   [31:0] b_copy_1_3_17_fu_1074_p3;
reg   [31:0] b_copy_1_3_12_fu_132;
wire   [31:0] b_copy_1_3_16_fu_1067_p3;
reg   [31:0] b_copy_1_3_1_fu_136;
wire   [31:0] b_copy_1_3_3_fu_1060_p3;
reg   [31:0] b_copy_2_3_11_fu_140;
wire   [31:0] b_copy_2_3_18_fu_1053_p3;
reg   [31:0] b_copy_2_3_8_fu_144;
wire   [31:0] b_copy_2_3_17_fu_1046_p3;
reg   [31:0] b_copy_2_3_12_fu_148;
wire   [31:0] b_copy_2_3_16_fu_1039_p3;
reg   [31:0] b_copy_2_3_1_fu_152;
wire   [31:0] b_copy_2_3_3_fu_1032_p3;
reg   [31:0] b_copy_3_3_11_fu_156;
wire   [31:0] b_copy_3_3_18_fu_1025_p3;
reg   [31:0] b_copy_3_3_8_fu_160;
wire   [31:0] b_copy_3_3_17_fu_1018_p3;
reg   [31:0] b_copy_3_3_12_fu_164;
wire   [31:0] b_copy_3_3_16_fu_1011_p3;
reg   [31:0] b_copy_3_3_1_fu_168;
wire   [31:0] b_copy_3_3_3_fu_1004_p3;
reg   [31:0] a_0_Addr_A_orig;
reg   [31:0] a_1_Addr_A_orig;
reg   [31:0] a_2_Addr_A_orig;
reg   [31:0] a_3_Addr_A_orig;
wire   [31:0] tmp_12_3_fu_1313_p2;
wire   [31:0] a_5_Addr_A_orig;
wire   [31:0] a_4_Addr_A_orig;
wire   [1:0] tmp_10_fu_358_p4;
wire   [1:0] tmp_3_fu_374_p4;
wire   [3:0] tmp_1_fu_384_p4;
wire   [3:0] arrayNo92_mask_fu_394_p2;
wire   [0:0] exitcond_fu_424_p2;
wire   [2:0] i_1_fu_418_p2;
wire   [0:0] tmp_mid1_fu_438_p2;
wire   [0:0] tmp_fu_352_p2;
wire   [1:0] tmp_22_fu_472_p4;
wire   [0:0] icmp8_fu_482_p2;
wire   [0:0] icmp_fu_368_p2;
wire   [1:0] tmp_19_fu_496_p4;
wire   [3:0] tmp_1_mid1_fu_506_p4;
wire   [3:0] arrayNo92_mask_mid1_fu_516_p2;
wire   [0:0] cond_mid1_fu_522_p2;
wire   [0:0] cond_fu_400_p2;
wire   [2:0] tmp_13_fu_558_p2;
wire   [3:0] tmp_20_fu_586_p2;
wire   [31:0] b_copy_0_3_fu_603_p3;
wire   [31:0] b_copy_0_3_4_fu_616_p3;
wire   [31:0] b_copy_0_3_5_fu_637_p3;
wire   [31:0] b_copy_0_3_6_fu_645_p3;
wire   [31:0] b_copy_0_3_9_fu_661_p3;
wire   [31:0] b_copy_0_3_2_fu_629_p3;
wire   [31:0] b_copy_0_3_7_fu_653_p3;
wire   [31:0] b_copy_0_3_14_fu_669_p3;
wire   [31:0] b_copy_0_3_15_fu_677_p3;
wire   [31:0] tmp_2_fu_713_p1;
wire   [31:0] tmp_2_fu_713_p2;
wire   [31:0] tmp_2_fu_713_p3;
wire   [31:0] tmp_2_fu_713_p4;
wire   [2:0] tmp_15_fu_790_p2;
wire   [31:0] a_row_0_1_fu_805_p3;
wire   [31:0] b_copy_1_3_fu_819_p3;
wire   [31:0] b_copy_1_3_4_fu_826_p3;
wire   [31:0] b_copy_1_3_5_fu_840_p3;
wire   [31:0] b_copy_1_3_6_fu_847_p3;
wire   [31:0] b_copy_1_3_9_fu_861_p3;
wire   [31:0] b_copy_2_3_fu_882_p3;
wire   [31:0] b_copy_2_3_4_fu_888_p3;
wire   [31:0] b_copy_2_3_5_fu_902_p3;
wire   [31:0] b_copy_2_3_6_fu_908_p3;
wire   [31:0] b_copy_2_3_9_fu_922_p3;
wire   [31:0] b_copy_3_3_fu_941_p3;
wire   [31:0] b_copy_3_3_4_fu_948_p3;
wire   [31:0] b_copy_3_3_5_fu_962_p3;
wire   [31:0] b_copy_3_3_6_fu_969_p3;
wire   [31:0] b_copy_3_3_9_fu_983_p3;
wire   [31:0] b_copy_3_3_2_fu_955_p3;
wire   [31:0] b_copy_3_3_7_fu_976_p3;
wire   [31:0] b_copy_3_3_14_fu_990_p3;
wire   [31:0] b_copy_3_3_15_fu_997_p3;
wire   [31:0] b_copy_2_3_2_fu_895_p3;
wire   [31:0] b_copy_2_3_7_fu_915_p3;
wire   [31:0] b_copy_2_3_14_fu_928_p3;
wire   [31:0] b_copy_2_3_15_fu_935_p3;
wire   [31:0] b_copy_1_3_2_fu_833_p3;
wire   [31:0] b_copy_1_3_7_fu_854_p3;
wire   [31:0] b_copy_1_3_14_fu_868_p3;
wire   [31:0] b_copy_1_3_15_fu_875_p3;
wire  signed [31:0] grp_fu_1088_p0;
wire   [31:0] tmp_6_fu_1093_p1;
wire   [31:0] tmp_6_fu_1093_p2;
wire   [31:0] tmp_6_fu_1093_p3;
wire   [31:0] tmp_6_fu_1093_p4;
wire   [31:0] tmp_7_fu_1106_p1;
wire   [31:0] tmp_7_fu_1106_p2;
wire   [31:0] tmp_7_fu_1106_p3;
wire   [31:0] tmp_7_fu_1106_p4;
wire   [31:0] tmp_9_fu_1119_p1;
wire   [31:0] tmp_9_fu_1119_p2;
wire   [31:0] tmp_9_fu_1119_p3;
wire   [31:0] tmp_9_fu_1119_p4;
wire   [2:0] tmp_17_fu_1203_p2;
wire   [31:0] a_row_1_1_fu_1218_p3;
wire   [3:0] tmp_12_cast_fu_1200_p1;
wire  signed [31:0] grp_fu_1237_p0;
wire   [31:0] sel_tmp_fu_1253_p3;
wire   [31:0] a_row_2_1_fu_1267_p3;
wire  signed [31:0] grp_fu_1281_p0;
wire   [31:0] tmp11_fu_1309_p2;
wire   [0:0] ap_CS_fsm_state14;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

matrixmul_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_42_bkb_U1(
    .din1(tmp_2_fu_713_p1),
    .din2(tmp_2_fu_713_p2),
    .din3(tmp_2_fu_713_p3),
    .din4(tmp_2_fu_713_p4),
    .din5(tmp_23_reg_1519),
    .dout(tmp_2_fu_713_p6)
);

matrixmul_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32scud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1088_p0),
    .din1(tmp_2_reg_1618),
    .ce(1'b1),
    .dout(grp_fu_1088_p2)
);

matrixmul_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_42_bkb_U3(
    .din1(tmp_6_fu_1093_p1),
    .din2(tmp_6_fu_1093_p2),
    .din3(tmp_6_fu_1093_p3),
    .din4(tmp_6_fu_1093_p4),
    .din5(tmp_23_reg_1519),
    .dout(tmp_6_fu_1093_p6)
);

matrixmul_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_42_bkb_U4(
    .din1(tmp_7_fu_1106_p1),
    .din2(tmp_7_fu_1106_p2),
    .din3(tmp_7_fu_1106_p3),
    .din4(tmp_7_fu_1106_p4),
    .din5(tmp_23_reg_1519),
    .dout(tmp_7_fu_1106_p6)
);

matrixmul_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matrixmul_mux_42_bkb_U5(
    .din1(tmp_9_fu_1119_p1),
    .din2(tmp_9_fu_1119_p2),
    .din3(tmp_9_fu_1119_p3),
    .din4(tmp_9_fu_1119_p4),
    .din5(tmp_23_reg_1519),
    .dout(tmp_9_fu_1119_p6)
);

matrixmul_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32scud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1237_p0),
    .din1(tmp_6_reg_1643),
    .ce(1'b1),
    .dout(grp_fu_1237_p2)
);

matrixmul_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32scud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1281_p0),
    .din1(tmp_7_reg_1648),
    .ce(1'b1),
    .dout(grp_fu_1281_p2)
);

matrixmul_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32scud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_row_3_2_reg_1678),
    .din1(tmp_9_reg_1653),
    .ce(1'b1),
    .dout(grp_fu_1296_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == exitcond_flatten_fu_406_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & ~(exitcond_flatten_reg_1440 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_319 <= newIndex1_mid2_v_v_reg_1476;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_319 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_308 <= indvar_flatten_next_reg_1444;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_308 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_reg_330 <= j_1_reg_1623;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_330 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_row_0_3_fu_92 <= a_row_0_2_fu_812_p3;
        b_copy_1_3_11_fu_124 <= b_copy_1_3_18_fu_1081_p3;
        b_copy_1_3_12_fu_132 <= b_copy_1_3_16_fu_1067_p3;
        b_copy_1_3_1_fu_136 <= b_copy_1_3_3_fu_1060_p3;
        b_copy_1_3_8_fu_128 <= b_copy_1_3_17_fu_1074_p3;
        b_copy_2_3_11_fu_140 <= b_copy_2_3_18_fu_1053_p3;
        b_copy_2_3_12_fu_148 <= b_copy_2_3_16_fu_1039_p3;
        b_copy_2_3_1_fu_152 <= b_copy_2_3_3_fu_1032_p3;
        b_copy_2_3_8_fu_144 <= b_copy_2_3_17_fu_1046_p3;
        b_copy_3_3_11_fu_156 <= b_copy_3_3_18_fu_1025_p3;
        b_copy_3_3_12_fu_164 <= b_copy_3_3_16_fu_1011_p3;
        b_copy_3_3_1_fu_168 <= b_copy_3_3_3_fu_1004_p3;
        b_copy_3_3_8_fu_160 <= b_copy_3_3_17_fu_1018_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_row_1_3_fu_96 <= a_row_1_2_fu_1225_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        a_row_2_3_fu_100 <= a_row_2_2_fu_1274_p3;
        a_row_3_1_fu_104 <= a_row_3_2_fu_1260_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_row_3_2_reg_1678 <= a_row_3_2_fu_1260_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_cond_mid2_reg_1505 <= cond_mid2_reg_1505;
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1440 <= exitcond_flatten_reg_1440;
        ap_pipeline_reg_pp0_iter2_cond_mid2_reg_1505 <= ap_pipeline_reg_pp0_iter1_cond_mid2_reg_1505;
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1440 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1440;
        exitcond_flatten_reg_1440 <= exitcond_flatten_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
        ap_pipeline_reg_pp0_iter1_tmp_21_reg_1673 <= tmp_21_reg_1673;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1440 == 1'b0))) begin
        b_copy_0_3_11_fu_108 <= b_copy_0_3_18_fu_706_p3;
        b_copy_0_3_12_fu_116 <= b_copy_0_3_16_fu_692_p3;
        b_copy_0_3_1_fu_120 <= b_copy_0_3_3_fu_685_p3;
        b_copy_0_3_8_fu_112 <= b_copy_0_3_17_fu_699_p3;
        b_copy_2_3_19_reg_1610 <= a_3_Dout_A;
        j_1_reg_1623 <= j_1_fu_746_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond_flatten_fu_406_p2))) begin
        cond1_mid2_reg_1499 <= cond1_mid2_fu_488_p3;
        cond_mid2_reg_1505 <= cond_mid2_fu_528_p3;
        j_mid2_reg_1449 <= j_mid2_fu_430_p3;
        tmp_11_reg_1481[2] <= tmp_11_fu_460_p2[2];
        tmp_23_reg_1519 <= tmp_23_fu_542_p1;
        tmp_mid2_reg_1456 <= tmp_mid2_fu_444_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_1444 <= indvar_flatten_next_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond_flatten_fu_406_p2))) begin
        newIndex1_mid2_v_v_reg_1476 <= newIndex1_mid2_v_v_fu_452_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1440 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_348 <= grp_fu_341_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1440 == 1'b0))) begin
        sel_tmp1_reg_1548 <= sel_tmp1_fu_578_p2;
        sel_tmp5_reg_1571 <= sel_tmp5_fu_598_p2;
        sel_tmp7_reg_1581 <= sel_tmp7_fu_611_p2;
        sel_tmp9_reg_1594 <= sel_tmp9_fu_624_p2;
        tmp_2_reg_1618 <= tmp_2_fu_713_p6;
        tmp_5_reg_1540 <= tmp_5_fu_573_p2;
        tmp_8_cast_reg_1556[2 : 0] <= tmp_8_cast_fu_583_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1440))) begin
        tmp10_reg_1708 <= tmp10_fu_1300_p2;
        tmp_11_3_reg_1703 <= grp_fu_1296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1440))) begin
        tmp_11_1_reg_1693 <= grp_fu_1237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1440))) begin
        tmp_11_2_reg_1698 <= grp_fu_1281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_21_reg_1673 <= tmp_21_fu_1232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_6_reg_1643 <= tmp_6_fu_1093_p6;
        tmp_7_reg_1648 <= tmp_7_fu_1106_p6;
        tmp_9_reg_1653 <= tmp_9_fu_1119_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1440))) begin
        tmp_s_reg_1688 <= grp_fu_1088_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_0_Addr_A_orig = tmp_18_fu_1208_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_0_Addr_A_orig = tmp_16_fu_795_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_0_Addr_A_orig = tmp_14_fu_563_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_0_Addr_A_orig = tmp_12_fu_466_p1;
        end else begin
            a_0_Addr_A_orig = 'bx;
        end
    end else begin
        a_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        a_0_EN_A = 1'b1;
    end else begin
        a_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_1_Addr_A_orig = tmp_18_fu_1208_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_1_Addr_A_orig = tmp_16_fu_795_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_1_Addr_A_orig = tmp_14_fu_563_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_1_Addr_A_orig = tmp_12_fu_466_p1;
        end else begin
            a_1_Addr_A_orig = 'bx;
        end
    end else begin
        a_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        a_1_EN_A = 1'b1;
    end else begin
        a_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_2_Addr_A_orig = tmp_20_cast_fu_592_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_2_Addr_A_orig = tmp_8_fu_536_p1;
        end else begin
            a_2_Addr_A_orig = 'bx;
        end
    end else begin
        a_2_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        a_2_EN_A = 1'b1;
    end else begin
        a_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_3_Addr_A_orig = tmp_20_cast_fu_592_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_3_Addr_A_orig = tmp_8_fu_536_p1;
        end else begin
            a_3_Addr_A_orig = 'bx;
        end
    end else begin
        a_3_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        a_3_EN_A = 1'b1;
    end else begin
        a_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        a_4_EN_A = 1'b1;
    end else begin
        a_4_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b0 == ap_pipeline_reg_pp0_iter2_cond_mid2_reg_1505))) begin
        a_4_WEN_A = ap_const_lv4_F;
    end else begin
        a_4_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        a_5_EN_A = 1'b1;
    end else begin
        a_5_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter2_cond_mid2_reg_1505))) begin
        a_5_WEN_A = ap_const_lv4_F;
    end else begin
        a_5_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_323_p4 = newIndex1_mid2_v_v_reg_1476;
    end else begin
        i_phi_fu_323_p4 = i_reg_319;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_phi_fu_312_p4 = indvar_flatten_next_reg_1444;
    end else begin
        indvar_flatten_phi_fu_312_p4 = indvar_flatten_reg_308;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1440 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_phi_fu_334_p4 = j_1_reg_1623;
    end else begin
        j_phi_fu_334_p4 = j_reg_330;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_406_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage2;
        end
        ap_ST_fsm_pp0_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (~((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << ap_const_lv32_2;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = ap_const_lv32_0;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = ap_const_lv4_0;

assign a_1_Addr_A = a_1_Addr_A_orig << ap_const_lv32_2;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = ap_const_lv32_0;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = ap_const_lv4_0;

assign a_2_Addr_A = a_2_Addr_A_orig << ap_const_lv32_2;

assign a_2_Clk_A = ap_clk;

assign a_2_Din_A = ap_const_lv32_0;

assign a_2_Rst_A = ap_rst;

assign a_2_WEN_A = ap_const_lv4_0;

assign a_3_Addr_A = a_3_Addr_A_orig << ap_const_lv32_2;

assign a_3_Clk_A = ap_clk;

assign a_3_Din_A = ap_const_lv32_0;

assign a_3_Rst_A = ap_rst;

assign a_3_WEN_A = ap_const_lv4_0;

assign a_4_Addr_A = a_4_Addr_A_orig << ap_const_lv32_2;

assign a_4_Addr_A_orig = tmp_21_cast_fu_1304_p1;

assign a_4_Clk_A = ap_clk;

assign a_4_Din_A = tmp_12_3_fu_1313_p2;

assign a_4_Rst_A = ap_rst;

assign a_5_Addr_A = a_5_Addr_A_orig << ap_const_lv32_2;

assign a_5_Addr_A_orig = tmp_21_cast_fu_1304_p1;

assign a_5_Clk_A = ap_clk;

assign a_5_Din_A = tmp_12_3_fu_1313_p2;

assign a_5_Rst_A = ap_rst;

assign a_row_0_1_fu_805_p3 = ((tmp_5_reg_1540[0:0] === 1'b1) ? reg_348 : a_row_0_3_fu_92);

assign a_row_0_2_fu_812_p3 = ((sel_tmp1_reg_1548[0:0] === 1'b1) ? reg_348 : a_row_0_1_fu_805_p3);

assign a_row_1_1_fu_1218_p3 = ((tmp_5_reg_1540[0:0] === 1'b1) ? reg_348 : a_row_1_3_fu_96);

assign a_row_1_2_fu_1225_p3 = ((sel_tmp1_reg_1548[0:0] === 1'b1) ? reg_348 : a_row_1_1_fu_1218_p3);

assign a_row_2_1_fu_1267_p3 = ((tmp_5_reg_1540[0:0] === 1'b1) ? reg_348 : a_row_2_3_fu_100);

assign a_row_2_2_fu_1274_p3 = ((sel_tmp1_reg_1548[0:0] === 1'b1) ? reg_348 : a_row_2_1_fu_1267_p3);

assign a_row_3_2_fu_1260_p3 = ((sel_tmp1_reg_1548[0:0] === 1'b1) ? a_0_Dout_A : sel_tmp_fu_1253_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_5];

assign arrayNo92_mask_fu_394_p2 = (tmp_1_fu_384_p4 | ap_const_lv4_8);

assign arrayNo92_mask_mid1_fu_516_p2 = (tmp_1_mid1_fu_506_p4 | ap_const_lv4_8);

assign b_copy_0_3_14_fu_669_p3 = ((sel_tmp9_fu_624_p2[0:0] === 1'b1) ? b_copy_0_3_8_fu_112 : b_copy_0_3_9_fu_661_p3);

assign b_copy_0_3_15_fu_677_p3 = ((sel_tmp9_fu_624_p2[0:0] === 1'b1) ? a_2_Dout_A : b_copy_0_3_11_fu_108);

assign b_copy_0_3_16_fu_692_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_0_3_7_fu_653_p3 : b_copy_0_3_12_fu_116);

assign b_copy_0_3_17_fu_699_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_0_3_14_fu_669_p3 : b_copy_0_3_8_fu_112);

assign b_copy_0_3_18_fu_706_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_0_3_15_fu_677_p3 : b_copy_0_3_11_fu_108);

assign b_copy_0_3_2_fu_629_p3 = ((sel_tmp9_fu_624_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_120 : b_copy_0_3_4_fu_616_p3);

assign b_copy_0_3_3_fu_685_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_0_3_2_fu_629_p3 : b_copy_0_3_1_fu_120);

assign b_copy_0_3_4_fu_616_p3 = ((sel_tmp7_fu_611_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_120 : b_copy_0_3_fu_603_p3);

assign b_copy_0_3_5_fu_637_p3 = ((sel_tmp5_fu_598_p2[0:0] === 1'b1) ? a_2_Dout_A : b_copy_0_3_12_fu_116);

assign b_copy_0_3_6_fu_645_p3 = ((sel_tmp7_fu_611_p2[0:0] === 1'b1) ? b_copy_0_3_12_fu_116 : b_copy_0_3_5_fu_637_p3);

assign b_copy_0_3_7_fu_653_p3 = ((sel_tmp9_fu_624_p2[0:0] === 1'b1) ? b_copy_0_3_12_fu_116 : b_copy_0_3_6_fu_645_p3);

assign b_copy_0_3_9_fu_661_p3 = ((sel_tmp7_fu_611_p2[0:0] === 1'b1) ? a_2_Dout_A : b_copy_0_3_8_fu_112);

assign b_copy_0_3_fu_603_p3 = ((sel_tmp5_fu_598_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_120 : a_2_Dout_A);

assign b_copy_1_3_14_fu_868_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_1_3_8_fu_128 : b_copy_1_3_9_fu_861_p3);

assign b_copy_1_3_15_fu_875_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? a_2_Dout_A : b_copy_1_3_11_fu_124);

assign b_copy_1_3_16_fu_1067_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_1_3_7_fu_854_p3 : b_copy_1_3_12_fu_132);

assign b_copy_1_3_17_fu_1074_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_1_3_14_fu_868_p3 : b_copy_1_3_8_fu_128);

assign b_copy_1_3_18_fu_1081_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_1_3_15_fu_875_p3 : b_copy_1_3_11_fu_124);

assign b_copy_1_3_2_fu_833_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_1_3_1_fu_136 : b_copy_1_3_4_fu_826_p3);

assign b_copy_1_3_3_fu_1060_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_1_3_2_fu_833_p3 : b_copy_1_3_1_fu_136);

assign b_copy_1_3_4_fu_826_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? b_copy_1_3_1_fu_136 : b_copy_1_3_fu_819_p3);

assign b_copy_1_3_5_fu_840_p3 = ((sel_tmp5_reg_1571[0:0] === 1'b1) ? a_2_Dout_A : b_copy_1_3_12_fu_132);

assign b_copy_1_3_6_fu_847_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? b_copy_1_3_12_fu_132 : b_copy_1_3_5_fu_840_p3);

assign b_copy_1_3_7_fu_854_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_1_3_12_fu_132 : b_copy_1_3_6_fu_847_p3);

assign b_copy_1_3_9_fu_861_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? a_2_Dout_A : b_copy_1_3_8_fu_128);

assign b_copy_1_3_fu_819_p3 = ((sel_tmp5_reg_1571[0:0] === 1'b1) ? b_copy_1_3_1_fu_136 : a_2_Dout_A);

assign b_copy_2_3_14_fu_928_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_2_3_8_fu_144 : b_copy_2_3_9_fu_922_p3);

assign b_copy_2_3_15_fu_935_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_2_3_19_reg_1610 : b_copy_2_3_11_fu_140);

assign b_copy_2_3_16_fu_1039_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_2_3_7_fu_915_p3 : b_copy_2_3_12_fu_148);

assign b_copy_2_3_17_fu_1046_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_2_3_14_fu_928_p3 : b_copy_2_3_8_fu_144);

assign b_copy_2_3_18_fu_1053_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_2_3_15_fu_935_p3 : b_copy_2_3_11_fu_140);

assign b_copy_2_3_2_fu_895_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_2_3_1_fu_152 : b_copy_2_3_4_fu_888_p3);

assign b_copy_2_3_3_fu_1032_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_2_3_2_fu_895_p3 : b_copy_2_3_1_fu_152);

assign b_copy_2_3_4_fu_888_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? b_copy_2_3_1_fu_152 : b_copy_2_3_fu_882_p3);

assign b_copy_2_3_5_fu_902_p3 = ((sel_tmp5_reg_1571[0:0] === 1'b1) ? b_copy_2_3_19_reg_1610 : b_copy_2_3_12_fu_148);

assign b_copy_2_3_6_fu_908_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? b_copy_2_3_12_fu_148 : b_copy_2_3_5_fu_902_p3);

assign b_copy_2_3_7_fu_915_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_2_3_12_fu_148 : b_copy_2_3_6_fu_908_p3);

assign b_copy_2_3_9_fu_922_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? b_copy_2_3_19_reg_1610 : b_copy_2_3_8_fu_144);

assign b_copy_2_3_fu_882_p3 = ((sel_tmp5_reg_1571[0:0] === 1'b1) ? b_copy_2_3_1_fu_152 : b_copy_2_3_19_reg_1610);

assign b_copy_3_3_14_fu_990_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_3_3_8_fu_160 : b_copy_3_3_9_fu_983_p3);

assign b_copy_3_3_15_fu_997_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? a_3_Dout_A : b_copy_3_3_11_fu_156);

assign b_copy_3_3_16_fu_1011_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_3_3_7_fu_976_p3 : b_copy_3_3_12_fu_164);

assign b_copy_3_3_17_fu_1018_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_3_3_14_fu_990_p3 : b_copy_3_3_8_fu_160);

assign b_copy_3_3_18_fu_1025_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_3_3_15_fu_997_p3 : b_copy_3_3_11_fu_156);

assign b_copy_3_3_2_fu_955_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_3_3_1_fu_168 : b_copy_3_3_4_fu_948_p3);

assign b_copy_3_3_3_fu_1004_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_3_3_2_fu_955_p3 : b_copy_3_3_1_fu_168);

assign b_copy_3_3_4_fu_948_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? b_copy_3_3_1_fu_168 : b_copy_3_3_fu_941_p3);

assign b_copy_3_3_5_fu_962_p3 = ((sel_tmp5_reg_1571[0:0] === 1'b1) ? a_3_Dout_A : b_copy_3_3_12_fu_164);

assign b_copy_3_3_6_fu_969_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? b_copy_3_3_12_fu_164 : b_copy_3_3_5_fu_962_p3);

assign b_copy_3_3_7_fu_976_p3 = ((sel_tmp9_reg_1594[0:0] === 1'b1) ? b_copy_3_3_12_fu_164 : b_copy_3_3_6_fu_969_p3);

assign b_copy_3_3_9_fu_983_p3 = ((sel_tmp7_reg_1581[0:0] === 1'b1) ? a_3_Dout_A : b_copy_3_3_8_fu_160);

assign b_copy_3_3_fu_941_p3 = ((sel_tmp5_reg_1571[0:0] === 1'b1) ? b_copy_3_3_1_fu_168 : a_3_Dout_A);

assign cond1_mid2_fu_488_p3 = ((exitcond_fu_424_p2[0:0] === 1'b1) ? icmp8_fu_482_p2 : icmp_fu_368_p2);

assign cond_fu_400_p2 = ((arrayNo92_mask_fu_394_p2 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign cond_mid1_fu_522_p2 = ((arrayNo92_mask_mid1_fu_516_p2 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign cond_mid2_fu_528_p3 = ((exitcond_fu_424_p2[0:0] === 1'b1) ? cond_mid1_fu_522_p2 : cond_fu_400_p2);

assign exitcond_flatten_fu_406_p2 = ((indvar_flatten_phi_fu_312_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_424_p2 = ((j_phi_fu_334_p4 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign grp_fu_1088_p0 = ((sel_tmp1_reg_1548[0:0] === 1'b1) ? reg_348 : a_row_0_1_fu_805_p3);

assign grp_fu_1237_p0 = ((sel_tmp1_reg_1548[0:0] === 1'b1) ? reg_348 : a_row_1_1_fu_1218_p3);

assign grp_fu_1281_p0 = ((sel_tmp1_reg_1548[0:0] === 1'b1) ? reg_348 : a_row_2_1_fu_1267_p3);

assign grp_fu_341_p3 = ((cond1_mid2_reg_1499[0:0] === 1'b1) ? a_0_Dout_A : a_1_Dout_A);

assign i_1_fu_418_p2 = (ap_const_lv3_1 + i_phi_fu_323_p4);

assign icmp8_fu_482_p2 = ((tmp_22_fu_472_p4 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign icmp_fu_368_p2 = ((tmp_10_fu_358_p4 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_412_p2 = (indvar_flatten_phi_fu_312_p4 + ap_const_lv5_1);

assign j_1_fu_746_p2 = (j_mid2_reg_1449 + ap_const_lv3_1);

assign j_mid2_fu_430_p3 = ((exitcond_fu_424_p2[0:0] === 1'b1) ? ap_const_lv3_0 : j_phi_fu_334_p4);

assign newIndex1_mid2_v_v_fu_452_p3 = ((exitcond_fu_424_p2[0:0] === 1'b1) ? i_1_fu_418_p2 : i_phi_fu_323_p4);

assign sel_tmp1_fu_578_p2 = (tmp_5_fu_573_p2 & cond1_mid2_reg_1499);

assign sel_tmp5_fu_598_p2 = ((tmp_23_reg_1519 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign sel_tmp7_fu_611_p2 = ((tmp_23_reg_1519 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign sel_tmp9_fu_624_p2 = ((tmp_23_reg_1519 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_1253_p3 = ((tmp_5_reg_1540[0:0] === 1'b1) ? a_1_Dout_A : a_row_3_1_fu_104);

assign tmp10_fu_1300_p2 = (tmp_11_2_reg_1698 + tmp_s_reg_1688);

assign tmp11_fu_1309_p2 = (tmp_11_3_reg_1703 + tmp_11_1_reg_1693);

assign tmp_10_fu_358_p4 = {{i_phi_fu_323_p4[ap_const_lv32_2 : ap_const_lv32_1]}};

assign tmp_11_fu_460_p2 = newIndex1_mid2_v_v_fu_452_p3 << ap_const_lv3_2;

assign tmp_12_3_fu_1313_p2 = (tmp10_reg_1708 + tmp11_fu_1309_p2);

assign tmp_12_cast_fu_1200_p1 = tmp_11_reg_1481;

assign tmp_12_fu_466_p1 = tmp_11_fu_460_p2;

assign tmp_13_fu_558_p2 = (tmp_11_reg_1481 | ap_const_lv3_1);

assign tmp_14_fu_563_p3 = {{ap_const_lv61_0}, {tmp_13_fu_558_p2}};

assign tmp_15_fu_790_p2 = (tmp_11_reg_1481 | ap_const_lv3_2);

assign tmp_16_fu_795_p3 = {{ap_const_lv61_0}, {tmp_15_fu_790_p2}};

assign tmp_17_fu_1203_p2 = (tmp_11_reg_1481 | ap_const_lv3_3);

assign tmp_18_fu_1208_p3 = {{ap_const_lv61_0}, {tmp_17_fu_1203_p2}};

assign tmp_19_fu_496_p4 = {{i_1_fu_418_p2[ap_const_lv32_2 : ap_const_lv32_1]}};

assign tmp_1_fu_384_p4 = {{{{1'b0}, {tmp_3_fu_374_p4}}}, {1'b0}};

assign tmp_1_mid1_fu_506_p4 = {{{{1'b0}, {tmp_19_fu_496_p4}}}, {1'b0}};

assign tmp_20_cast_fu_592_p1 = tmp_20_fu_586_p2;

assign tmp_20_fu_586_p2 = (ap_const_lv4_4 + tmp_8_cast_fu_583_p1);

assign tmp_21_cast_fu_1304_p1 = ap_pipeline_reg_pp0_iter1_tmp_21_reg_1673;

assign tmp_21_fu_1232_p2 = (tmp_12_cast_fu_1200_p1 + tmp_8_cast_reg_1556);

assign tmp_22_fu_472_p4 = {{i_1_fu_418_p2[ap_const_lv32_2 : ap_const_lv32_1]}};

assign tmp_23_fu_542_p1 = j_mid2_fu_430_p3[1:0];

assign tmp_2_fu_713_p1 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_0_3_15_fu_677_p3 : b_copy_0_3_11_fu_108);

assign tmp_2_fu_713_p2 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_0_3_14_fu_669_p3 : b_copy_0_3_8_fu_112);

assign tmp_2_fu_713_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_0_3_7_fu_653_p3 : b_copy_0_3_12_fu_116);

assign tmp_2_fu_713_p4 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_0_3_2_fu_629_p3 : b_copy_0_3_1_fu_120);

assign tmp_3_fu_374_p4 = {{i_phi_fu_323_p4[ap_const_lv32_2 : ap_const_lv32_1]}};

assign tmp_5_fu_573_p2 = ((j_mid2_reg_1449 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_6_fu_1093_p1 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_1_3_15_fu_875_p3 : b_copy_1_3_11_fu_124);

assign tmp_6_fu_1093_p2 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_1_3_14_fu_868_p3 : b_copy_1_3_8_fu_128);

assign tmp_6_fu_1093_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_1_3_7_fu_854_p3 : b_copy_1_3_12_fu_132);

assign tmp_6_fu_1093_p4 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_1_3_2_fu_833_p3 : b_copy_1_3_1_fu_136);

assign tmp_7_fu_1106_p1 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_2_3_15_fu_935_p3 : b_copy_2_3_11_fu_140);

assign tmp_7_fu_1106_p2 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_2_3_14_fu_928_p3 : b_copy_2_3_8_fu_144);

assign tmp_7_fu_1106_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_2_3_7_fu_915_p3 : b_copy_2_3_12_fu_148);

assign tmp_7_fu_1106_p4 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_2_3_2_fu_895_p3 : b_copy_2_3_1_fu_152);

assign tmp_8_cast_fu_583_p1 = j_mid2_reg_1449;

assign tmp_8_fu_536_p1 = j_mid2_fu_430_p3;

assign tmp_9_fu_1119_p1 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_3_3_15_fu_997_p3 : b_copy_3_3_11_fu_156);

assign tmp_9_fu_1119_p2 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_3_3_14_fu_990_p3 : b_copy_3_3_8_fu_160);

assign tmp_9_fu_1119_p3 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_3_3_7_fu_976_p3 : b_copy_3_3_12_fu_164);

assign tmp_9_fu_1119_p4 = ((tmp_mid2_reg_1456[0:0] === 1'b1) ? b_copy_3_3_2_fu_955_p3 : b_copy_3_3_1_fu_168);

assign tmp_fu_352_p2 = ((i_phi_fu_323_p4 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_mid1_fu_438_p2 = ((i_1_fu_418_p2 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_444_p3 = ((exitcond_fu_424_p2[0:0] === 1'b1) ? tmp_mid1_fu_438_p2 : tmp_fu_352_p2);

always @ (posedge ap_clk) begin
    tmp_11_reg_1481[1:0] <= 2'b00;
    tmp_8_cast_reg_1556[3] <= 1'b0;
end

endmodule //matrixmul
