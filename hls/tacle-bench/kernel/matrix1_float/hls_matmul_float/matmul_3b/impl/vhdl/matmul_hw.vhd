-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC;
    b_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_EN_A : OUT STD_LOGIC;
    b_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_Clk_A : OUT STD_LOGIC;
    b_Rst_A : OUT STD_LOGIC;
    c_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_EN_A : OUT STD_LOGIC;
    c_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    c_Clk_A : OUT STD_LOGIC;
    c_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matmul_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.698000,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=834,HLS_SYN_LUT=1007}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_148 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_159 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_170 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_196_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next_reg_499 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_214_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_reg_504 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid2_fu_234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_v_fu_242_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_mid2_v_reg_520 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_250_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_525 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_268_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal a_load_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_0_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_300_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_572 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_row_load_1_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_1_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_fu_339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_350_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_reg_587 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_10_reg_587 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter3_tmp_10_reg_587 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter4_tmp_10_reg_587 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter5_tmp_10_reg_587 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter6_tmp_10_reg_587 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter7_tmp_10_reg_587 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_load_0_phi_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_load_1_phi_fu_418_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_load_1_phi_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_2_1_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp0_iter4_tmp_2_1_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter5_tmp_2_1_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_5_1_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal indvar_flatten_phi_fu_152_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_phi_fu_163_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_phi_fu_174_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_277_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_row_load_4_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_load_3_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_1_4_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_1_5_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_1_3_fu_396_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_1_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_1_4_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_1_5_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_1_3_fu_382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal c_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_202_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid1_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_272_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_cast_fu_286_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_289_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_323_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_cast5_fu_347_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_1_1_1_fu_368_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_1_2_fu_375_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_1_1_fu_356_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_1_2_fu_362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component matmul_hw_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_hw_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matmul_hw_fadd_32bkb_U1 : component matmul_hw_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_181_p0,
        din1 => grp_fu_181_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    matmul_hw_fmul_32cud_U2 : component matmul_hw_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_190_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_495 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and not((exitcond_flatten_reg_495 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_159 <= tmp_1_mid2_v_reg_520;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_159 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_148 <= indvar_flatten_next_reg_499;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_148 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_170 <= j_1_reg_572;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_170 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_495 = ap_const_lv1_0))) then
                a_load_reg_556 <= a_Dout_A;
                b_copy_0_0_reg_566 <= b_Dout_A;
                j_1_reg_572 <= j_1_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_495 = ap_const_lv1_0))) then
                a_row_load_1_reg_577 <= a_row_load_1_fu_331_p3;
                b_copy_load_1_phi_reg_597 <= b_copy_load_1_phi_fu_418_p3;
                tmp_10_reg_587 <= tmp_10_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                a_row_load_3_fu_76 <= a_row_load_1_fu_331_p3;
                a_row_load_4_fu_72 <= a_row_load_fu_339_p3;
                b_copy_0_1_5_fu_84 <= b_copy_0_1_3_fu_396_p3;
                b_copy_0_1_fu_80 <= b_copy_0_1_4_fu_403_p3;
                b_copy_1_1_5_fu_92 <= b_copy_1_1_3_fu_382_p3;
                b_copy_1_1_fu_88 <= b_copy_1_1_4_fu_389_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_495 <= exitcond_flatten_reg_495;
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_495 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_495;
                ap_pipeline_reg_pp0_iter2_tmp_10_reg_587 <= tmp_10_reg_587;
                ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_495 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_495;
                ap_pipeline_reg_pp0_iter3_tmp_10_reg_587 <= ap_pipeline_reg_pp0_iter2_tmp_10_reg_587;
                ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_495 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_495;
                ap_pipeline_reg_pp0_iter4_tmp_10_reg_587 <= ap_pipeline_reg_pp0_iter3_tmp_10_reg_587;
                ap_pipeline_reg_pp0_iter4_tmp_2_1_reg_607 <= tmp_2_1_reg_607;
                ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_495 <= ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_495;
                ap_pipeline_reg_pp0_iter5_tmp_10_reg_587 <= ap_pipeline_reg_pp0_iter4_tmp_10_reg_587;
                ap_pipeline_reg_pp0_iter5_tmp_2_1_reg_607 <= ap_pipeline_reg_pp0_iter4_tmp_2_1_reg_607;
                ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_495 <= ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_495;
                ap_pipeline_reg_pp0_iter6_tmp_10_reg_587 <= ap_pipeline_reg_pp0_iter5_tmp_10_reg_587;
                ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_495 <= ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_495;
                ap_pipeline_reg_pp0_iter7_tmp_10_reg_587 <= ap_pipeline_reg_pp0_iter6_tmp_10_reg_587;
                exitcond_flatten_reg_495 <= exitcond_flatten_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_499 <= indvar_flatten_next_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_190_p2 = ap_const_lv1_0))) then
                j_mid2_reg_504 <= j_mid2_fu_214_p3;
                    tmp_1_reg_525(2 downto 1) <= tmp_1_fu_250_p3(2 downto 1);
                tmp_mid2_reg_512 <= tmp_mid2_fu_234_p3;
                tmp_reg_541 <= tmp_fu_268_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_190_p2 = ap_const_lv1_0))) then
                tmp_1_mid2_v_reg_520 <= tmp_1_mid2_v_fu_242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then
                tmp_2_1_reg_607 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_495 = ap_const_lv1_0))) then
                tmp_5_1_reg_617 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_495 = ap_const_lv1_0))) then
                tmp_5_reg_612 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_495 = ap_const_lv1_0))) then
                tmp_s_reg_602 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_525(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_190_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter7)))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_190_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_190_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_4_fu_258_p1, tmp_8_fu_277_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_Addr_A_orig <= tmp_8_fu_277_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_Addr_A_orig <= tmp_4_fu_258_p1(32 - 1 downto 0);
            else 
                a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Din_A <= ap_const_lv32_0;

    a_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;
    a_WEN_A <= ap_const_lv4_0;
    a_row_load_1_fu_331_p3 <= 
        a_Dout_A when (tmp_3_fu_326_p2(0) = '1') else 
        a_row_load_3_fu_76;
    a_row_load_fu_339_p3 <= 
        a_load_reg_556 when (tmp_3_fu_326_p2(0) = '1') else 
        a_row_load_4_fu_72;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state19 <= ap_CS_fsm(3 downto 3);

    ap_done_assign_proc : process(ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_Addr_A <= std_logic_vector(shift_left(unsigned(b_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_6_fu_263_p1, tmp_9_cast_fu_295_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_Addr_A_orig <= tmp_9_cast_fu_295_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_Addr_A_orig <= tmp_6_fu_263_p1(32 - 1 downto 0);
            else 
                b_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_Clk_A <= ap_clk;
    b_Din_A <= ap_const_lv32_0;

    b_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_EN_A <= ap_const_logic_1;
        else 
            b_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_Rst_A <= ap_rst;
    b_WEN_A <= ap_const_lv4_0;
    b_copy_0_1_1_fu_356_p3 <= 
        b_copy_0_0_reg_566 when (tmp_reg_541(0) = '1') else 
        b_copy_0_1_5_fu_84;
    b_copy_0_1_2_fu_362_p3 <= 
        b_copy_0_1_fu_80 when (tmp_reg_541(0) = '1') else 
        b_copy_0_0_reg_566;
    b_copy_0_1_3_fu_396_p3 <= 
        b_copy_0_1_1_fu_356_p3 when (tmp_mid2_reg_512(0) = '1') else 
        b_copy_0_1_5_fu_84;
    b_copy_0_1_4_fu_403_p3 <= 
        b_copy_0_1_2_fu_362_p3 when (tmp_mid2_reg_512(0) = '1') else 
        b_copy_0_1_fu_80;
    b_copy_1_1_1_fu_368_p3 <= 
        b_Dout_A when (tmp_reg_541(0) = '1') else 
        b_copy_1_1_5_fu_92;
    b_copy_1_1_2_fu_375_p3 <= 
        b_copy_1_1_fu_88 when (tmp_reg_541(0) = '1') else 
        b_Dout_A;
    b_copy_1_1_3_fu_382_p3 <= 
        b_copy_1_1_1_fu_368_p3 when (tmp_mid2_reg_512(0) = '1') else 
        b_copy_1_1_5_fu_92;
    b_copy_1_1_4_fu_389_p3 <= 
        b_copy_1_1_2_fu_375_p3 when (tmp_mid2_reg_512(0) = '1') else 
        b_copy_1_1_fu_88;
    b_copy_load_0_phi_fu_410_p3 <= 
        b_copy_0_1_3_fu_396_p3 when (tmp_reg_541(0) = '1') else 
        b_copy_0_1_4_fu_403_p3;
    b_copy_load_1_phi_fu_418_p3 <= 
        b_copy_1_1_3_fu_382_p3 when (tmp_reg_541(0) = '1') else 
        b_copy_1_1_4_fu_389_p3;
    c_Addr_A <= std_logic_vector(shift_left(unsigned(c_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    c_Addr_A_orig <= tmp_10_cast_fu_455_p1(32 - 1 downto 0);
    c_Clk_A <= ap_clk;
    c_Din_A <= tmp_5_1_reg_617;

    c_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8))) then 
            c_EN_A <= ap_const_logic_1;
        else 
            c_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    c_Rst_A <= ap_rst;

    c_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_495, ap_enable_reg_pp0_iter8)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8)))) then 
            c_WEN_A <= ap_const_lv4_F;
        else 
            c_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    exitcond_flatten_fu_190_p2 <= "1" when (indvar_flatten_phi_fu_152_p4 = ap_const_lv3_4) else "0";
    exitcond_fu_208_p2 <= "1" when (j_phi_fu_174_p4 = ap_const_lv2_2) else "0";

    grp_fu_181_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp_s_reg_602, ap_enable_reg_pp0_iter3, tmp_5_reg_612, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
            grp_fu_181_p0 <= tmp_5_reg_612;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            grp_fu_181_p0 <= tmp_s_reg_602;
        else 
            grp_fu_181_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_181_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_pipeline_reg_pp0_iter5_tmp_2_1_reg_607, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
            grp_fu_181_p1 <= ap_pipeline_reg_pp0_iter5_tmp_2_1_reg_607;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            grp_fu_181_p1 <= ap_const_lv32_0;
        else 
            grp_fu_181_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, a_row_load_1_reg_577, a_row_load_fu_339_p3, ap_enable_reg_pp0_iter1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                grp_fu_186_p0 <= a_row_load_1_reg_577;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                grp_fu_186_p0 <= a_row_load_fu_339_p3;
            else 
                grp_fu_186_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_186_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, b_copy_load_0_phi_fu_410_p3, b_copy_load_1_phi_reg_597, ap_enable_reg_pp0_iter1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                grp_fu_186_p1 <= b_copy_load_1_phi_reg_597;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                grp_fu_186_p1 <= b_copy_load_0_phi_fu_410_p3;
            else 
                grp_fu_186_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_186_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_202_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(i_phi_fu_163_p4));

    i_phi_fu_163_p4_assign_proc : process(i_reg_159, exitcond_flatten_reg_495, ap_CS_fsm_pp0_stage0, tmp_1_mid2_v_reg_520, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_phi_fu_163_p4 <= tmp_1_mid2_v_reg_520;
        else 
            i_phi_fu_163_p4 <= i_reg_159;
        end if; 
    end process;

    indvar_flatten_next_fu_196_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_152_p4) + unsigned(ap_const_lv3_1));

    indvar_flatten_phi_fu_152_p4_assign_proc : process(indvar_flatten_reg_148, exitcond_flatten_reg_495, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_499, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_152_p4 <= indvar_flatten_next_reg_499;
        else 
            indvar_flatten_phi_fu_152_p4 <= indvar_flatten_reg_148;
        end if; 
    end process;

    j_1_fu_300_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_mid2_reg_504));
    j_mid2_fu_214_p3 <= 
        ap_const_lv2_0 when (exitcond_fu_208_p2(0) = '1') else 
        j_phi_fu_174_p4;

    j_phi_fu_174_p4_assign_proc : process(j_reg_170, exitcond_flatten_reg_495, ap_CS_fsm_pp0_stage0, j_1_reg_572, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            j_phi_fu_174_p4 <= j_1_reg_572;
        else 
            j_phi_fu_174_p4 <= j_reg_170;
        end if; 
    end process;

    tmp1_fu_228_p2 <= "1" when (i_phi_fu_163_p4 = ap_const_lv2_0) else "0";
    tmp_10_cast_fu_455_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter7_tmp_10_reg_587),64));
    tmp_10_fu_350_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_323_p1) + unsigned(tmp_6_cast5_fu_347_p1));
    tmp_1_fu_250_p3 <= (tmp_1_mid2_v_fu_242_p3 & ap_const_lv1_0);
    tmp_1_mid2_v_fu_242_p3 <= 
        i_1_fu_202_p2 when (exitcond_fu_208_p2(0) = '1') else 
        i_phi_fu_163_p4;
    tmp_3_fu_326_p2 <= "1" when (j_mid2_reg_504 = ap_const_lv2_0) else "0";
    tmp_4_cast_fu_323_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_525),4));
    tmp_4_fu_258_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_250_p3),64));
    tmp_6_cast5_fu_347_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_504),4));
    tmp_6_cast_fu_286_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_504),3));
    tmp_6_fu_263_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_214_p3),64));
    tmp_7_fu_272_p2 <= (tmp_1_reg_525 or ap_const_lv3_1);
    tmp_8_fu_277_p3 <= (ap_const_lv61_0 & tmp_7_fu_272_p2);
    tmp_9_cast_fu_295_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_289_p2),64));
    tmp_9_fu_289_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(tmp_6_cast_fu_286_p1));
    tmp_fu_268_p1 <= j_mid2_fu_214_p3(1 - 1 downto 0);
    tmp_mid1_fu_222_p2 <= "1" when (i_1_fu_202_p2 = ap_const_lv2_0) else "0";
    tmp_mid2_fu_234_p3 <= 
        tmp_mid1_fu_222_p2 when (exitcond_fu_208_p2(0) = '1') else 
        tmp1_fu_228_p2;
end behav;
