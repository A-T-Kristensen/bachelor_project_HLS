// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.263000,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=1695,HLS_SYN_LUT=1531}" *)

module matmul_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        a_3_Addr_A,
        a_3_EN_A,
        a_3_WEN_A,
        a_3_Din_A,
        a_3_Dout_A,
        a_3_Clk_A,
        a_3_Rst_A,
        b_0_Addr_A,
        b_0_EN_A,
        b_0_WEN_A,
        b_0_Din_A,
        b_0_Dout_A,
        b_0_Clk_A,
        b_0_Rst_A,
        b_1_Addr_A,
        b_1_EN_A,
        b_1_WEN_A,
        b_1_Din_A,
        b_1_Dout_A,
        b_1_Clk_A,
        b_1_Rst_A,
        b_2_Addr_A,
        b_2_EN_A,
        b_2_WEN_A,
        b_2_Din_A,
        b_2_Dout_A,
        b_2_Clk_A,
        b_2_Rst_A,
        b_3_Addr_A,
        b_3_EN_A,
        b_3_WEN_A,
        b_3_Din_A,
        b_3_Dout_A,
        b_3_Clk_A,
        b_3_Rst_A,
        c_Addr_A,
        c_EN_A,
        c_WEN_A,
        c_Din_A,
        c_Dout_A,
        c_Clk_A,
        c_Rst_A
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state28 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv2_0 = 2'b00;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [3:0] a_0_WEN_A;
output  [31:0] a_0_Din_A;
input  [31:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [3:0] a_1_WEN_A;
output  [31:0] a_1_Din_A;
input  [31:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [3:0] a_2_WEN_A;
output  [31:0] a_2_Din_A;
input  [31:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] a_3_Addr_A;
output   a_3_EN_A;
output  [3:0] a_3_WEN_A;
output  [31:0] a_3_Din_A;
input  [31:0] a_3_Dout_A;
output   a_3_Clk_A;
output   a_3_Rst_A;
output  [31:0] b_0_Addr_A;
output   b_0_EN_A;
output  [3:0] b_0_WEN_A;
output  [31:0] b_0_Din_A;
input  [31:0] b_0_Dout_A;
output   b_0_Clk_A;
output   b_0_Rst_A;
output  [31:0] b_1_Addr_A;
output   b_1_EN_A;
output  [3:0] b_1_WEN_A;
output  [31:0] b_1_Din_A;
input  [31:0] b_1_Dout_A;
output   b_1_Clk_A;
output   b_1_Rst_A;
output  [31:0] b_2_Addr_A;
output   b_2_EN_A;
output  [3:0] b_2_WEN_A;
output  [31:0] b_2_Din_A;
input  [31:0] b_2_Dout_A;
output   b_2_Clk_A;
output   b_2_Rst_A;
output  [31:0] b_3_Addr_A;
output   b_3_EN_A;
output  [3:0] b_3_WEN_A;
output  [31:0] b_3_Din_A;
input  [31:0] b_3_Dout_A;
output   b_3_Clk_A;
output   b_3_Rst_A;
output  [31:0] c_Addr_A;
output   c_EN_A;
output  [3:0] c_WEN_A;
output  [31:0] c_Din_A;
input  [31:0] c_Dout_A;
output   c_Clk_A;
output   c_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_EN_A;
reg a_1_EN_A;
reg a_2_EN_A;
reg a_3_EN_A;
reg b_0_EN_A;
reg b_1_EN_A;
reg b_2_EN_A;
reg b_3_EN_A;
reg c_EN_A;
reg[3:0] c_WEN_A;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_186;
reg   [2:0] i_reg_197;
reg   [2:0] j_reg_208;
wire   [0:0] exitcond_flatten_fu_260_p2;
reg   [0:0] exitcond_flatten_reg_347;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter8_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter10_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter11_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter12_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter13_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter14_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter15_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter16_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter17_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter18_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter19_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter20_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter21_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter22_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter23_exitcond_flatten_reg_347;
reg   [0:0] ap_pipeline_reg_pp0_iter24_exitcond_flatten_reg_347;
wire   [4:0] indvar_flatten_next_fu_266_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] j_mid2_fu_284_p3;
reg   [2:0] j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter1_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter2_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter3_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter4_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter5_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter6_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter7_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter8_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter9_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter10_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter11_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter12_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter13_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter14_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter15_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter16_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter17_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter18_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter19_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter20_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter21_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter22_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter23_j_mid2_reg_356;
reg   [2:0] ap_pipeline_reg_pp0_iter24_j_mid2_reg_356;
wire   [2:0] tmp_mid2_v_fu_292_p3;
reg   [2:0] tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter8_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter9_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter10_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter11_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter12_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter13_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter14_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter15_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter16_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter17_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter18_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter19_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter20_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter21_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter22_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter23_tmp_mid2_v_reg_361;
reg   [2:0] ap_pipeline_reg_pp0_iter24_tmp_mid2_v_reg_361;
wire   [2:0] j_1_fu_316_p2;
wire   [31:0] grp_fu_236_p2;
reg   [31:0] tmp_6_reg_452;
wire   [31:0] grp_fu_242_p2;
reg   [31:0] tmp_6_1_reg_457;
reg   [31:0] ap_pipeline_reg_pp0_iter5_tmp_6_1_reg_457;
reg   [31:0] ap_pipeline_reg_pp0_iter6_tmp_6_1_reg_457;
reg   [31:0] ap_pipeline_reg_pp0_iter7_tmp_6_1_reg_457;
reg   [31:0] ap_pipeline_reg_pp0_iter8_tmp_6_1_reg_457;
reg   [31:0] ap_pipeline_reg_pp0_iter9_tmp_6_1_reg_457;
wire   [31:0] grp_fu_248_p2;
reg   [31:0] tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter5_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter6_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter7_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter8_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter9_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter10_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter11_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter12_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter13_tmp_6_2_reg_462;
reg   [31:0] ap_pipeline_reg_pp0_iter14_tmp_6_2_reg_462;
wire   [31:0] grp_fu_254_p2;
reg   [31:0] tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter5_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter6_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter7_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter8_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter9_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter10_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter11_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter12_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter13_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter14_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter15_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter16_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter17_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter18_tmp_6_3_reg_467;
reg   [31:0] ap_pipeline_reg_pp0_iter19_tmp_6_3_reg_467;
wire   [31:0] grp_fu_219_p2;
reg   [31:0] tmp_s_reg_472;
wire   [31:0] grp_fu_224_p2;
reg   [31:0] tmp_1_1_reg_477;
wire   [31:0] grp_fu_228_p2;
reg   [31:0] tmp_1_2_reg_482;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] tmp_1_3_reg_487;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg   [2:0] i_phi_fu_201_p4;
wire   [63:0] tmp_mid2_fu_300_p1;
wire   [63:0] tmp_2_fu_308_p1;
wire   [63:0] tmp_4_cast_fu_342_p1;
wire   [31:0] a_0_Addr_A_orig;
wire   [31:0] b_0_Addr_A_orig;
wire   [31:0] a_1_Addr_A_orig;
wire   [31:0] b_1_Addr_A_orig;
wire   [31:0] a_2_Addr_A_orig;
wire   [31:0] b_2_Addr_A_orig;
wire   [31:0] a_3_Addr_A_orig;
wire   [31:0] b_3_Addr_A_orig;
wire   [31:0] c_Addr_A_orig;
wire   [0:0] exitcond_fu_278_p2;
wire   [2:0] i_1_fu_272_p2;
wire   [4:0] tmp_fu_322_p3;
wire   [5:0] tmp_2_cast_fu_333_p1;
wire   [5:0] tmp_3_cast_fu_329_p1;
wire   [5:0] tmp_4_fu_336_p2;
wire   [0:0] ap_CS_fsm_state28;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
end

matmul_hw_fadd_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_fadd_32fYi_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_reg_452),
    .din1(ap_const_lv32_0),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

matmul_hw_fadd_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_fadd_32fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_472),
    .din1(ap_pipeline_reg_pp0_iter9_tmp_6_1_reg_457),
    .ce(1'b1),
    .dout(grp_fu_224_p2)
);

matmul_hw_fadd_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_fadd_32fYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_1_reg_477),
    .din1(ap_pipeline_reg_pp0_iter14_tmp_6_2_reg_462),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

matmul_hw_fadd_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_fadd_32fYi_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_2_reg_482),
    .din1(ap_pipeline_reg_pp0_iter19_tmp_6_3_reg_467),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

matmul_hw_fmul_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_fmul_32g8j_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_0_Dout_A),
    .din1(b_0_Dout_A),
    .ce(1'b1),
    .dout(grp_fu_236_p2)
);

matmul_hw_fmul_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_fmul_32g8j_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_1_Dout_A),
    .din1(b_1_Dout_A),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

matmul_hw_fmul_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_fmul_32g8j_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_2_Dout_A),
    .din1(b_2_Dout_A),
    .ce(1'b1),
    .dout(grp_fu_248_p2)
);

matmul_hw_fmul_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_fmul_32g8j_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_3_Dout_A),
    .din1(b_3_Dout_A),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_260_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_260_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_260_p2 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_347 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_197 <= tmp_mid2_v_reg_361;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_197 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_260_p2 == 1'b0))) begin
        indvar_flatten_reg_186 <= indvar_flatten_next_fu_266_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_186 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_260_p2 == 1'b0))) begin
        j_reg_208 <= j_1_fu_316_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_208 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_pipeline_reg_pp0_iter10_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter10_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter9_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter10_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter9_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter10_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter9_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter10_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter9_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter11_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter10_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter11_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter10_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter11_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter10_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter11_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter10_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter11_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter10_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter12_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter11_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter12_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter11_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter12_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter11_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter12_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter11_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter12_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter11_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter13_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter12_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter13_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter12_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter13_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter12_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter13_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter12_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter13_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter12_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter14_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter13_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter14_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter13_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter14_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter13_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter14_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter13_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter14_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter13_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter15_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter14_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter15_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter14_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter15_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter14_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter15_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter14_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter16_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter15_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter16_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter15_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter16_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter15_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter16_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter15_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter17_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter16_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter17_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter16_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter17_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter16_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter17_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter16_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter18_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter17_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter18_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter17_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter18_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter17_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter18_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter17_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter19_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter18_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter19_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter18_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter19_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter18_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter19_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter18_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter20_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter19_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter20_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter19_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter20_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter19_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter21_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter20_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter21_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter20_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter21_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter20_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter22_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter21_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter22_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter21_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter22_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter21_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter23_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter22_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter23_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter22_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter23_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter22_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter24_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter23_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter24_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter23_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter24_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter23_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter2_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter3_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter2_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter4_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter3_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter5_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter4_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter5_tmp_6_1_reg_457 <= tmp_6_1_reg_457;
        ap_pipeline_reg_pp0_iter5_tmp_6_2_reg_462 <= tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter5_tmp_6_3_reg_467 <= tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter6_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter5_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter6_tmp_6_1_reg_457 <= ap_pipeline_reg_pp0_iter5_tmp_6_1_reg_457;
        ap_pipeline_reg_pp0_iter6_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter5_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter6_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter5_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter7_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter6_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter7_tmp_6_1_reg_457 <= ap_pipeline_reg_pp0_iter6_tmp_6_1_reg_457;
        ap_pipeline_reg_pp0_iter7_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter6_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter7_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter6_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter8_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter8_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter7_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter8_tmp_6_1_reg_457 <= ap_pipeline_reg_pp0_iter7_tmp_6_1_reg_457;
        ap_pipeline_reg_pp0_iter8_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter7_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter8_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter7_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter8_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_361;
        ap_pipeline_reg_pp0_iter9_exitcond_flatten_reg_347 <= ap_pipeline_reg_pp0_iter8_exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter9_j_mid2_reg_356 <= ap_pipeline_reg_pp0_iter8_j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter9_tmp_6_1_reg_457 <= ap_pipeline_reg_pp0_iter8_tmp_6_1_reg_457;
        ap_pipeline_reg_pp0_iter9_tmp_6_2_reg_462 <= ap_pipeline_reg_pp0_iter8_tmp_6_2_reg_462;
        ap_pipeline_reg_pp0_iter9_tmp_6_3_reg_467 <= ap_pipeline_reg_pp0_iter8_tmp_6_3_reg_467;
        ap_pipeline_reg_pp0_iter9_tmp_mid2_v_reg_361 <= ap_pipeline_reg_pp0_iter8_tmp_mid2_v_reg_361;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_347 <= exitcond_flatten_reg_347;
        ap_pipeline_reg_pp0_iter1_j_mid2_reg_356 <= j_mid2_reg_356;
        ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_361 <= tmp_mid2_v_reg_361;
        exitcond_flatten_reg_347 <= exitcond_flatten_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_260_p2 == 1'b0))) begin
        j_mid2_reg_356 <= j_mid2_fu_284_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_pipeline_reg_pp0_iter13_exitcond_flatten_reg_347 == 1'b0)) begin
        tmp_1_1_reg_477 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_pipeline_reg_pp0_iter18_exitcond_flatten_reg_347 == 1'b0)) begin
        tmp_1_2_reg_482 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_pipeline_reg_pp0_iter23_exitcond_flatten_reg_347 == 1'b0)) begin
        tmp_1_3_reg_487 <= grp_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_347 == 1'b0)) begin
        tmp_6_1_reg_457 <= grp_fu_242_p2;
        tmp_6_2_reg_462 <= grp_fu_248_p2;
        tmp_6_3_reg_467 <= grp_fu_254_p2;
        tmp_6_reg_452 <= grp_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_260_p2 == 1'b0))) begin
        tmp_mid2_v_reg_361 <= tmp_mid2_v_fu_292_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_pipeline_reg_pp0_iter8_exitcond_flatten_reg_347 == 1'b0)) begin
        tmp_s_reg_472 <= grp_fu_219_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_0_EN_A = 1'b1;
    end else begin
        a_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_1_EN_A = 1'b1;
    end else begin
        a_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_2_EN_A = 1'b1;
    end else begin
        a_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_3_EN_A = 1'b1;
    end else begin
        a_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_0_EN_A = 1'b1;
    end else begin
        b_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_1_EN_A = 1'b1;
    end else begin
        b_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_2_EN_A = 1'b1;
    end else begin
        b_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_3_EN_A = 1'b1;
    end else begin
        b_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter25)) begin
        c_EN_A = 1'b1;
    end else begin
        c_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter25) & (ap_pipeline_reg_pp0_iter24_exitcond_flatten_reg_347 == 1'b0))) begin
        c_WEN_A = ap_const_lv4_F;
    end else begin
        c_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_347 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_201_p4 = tmp_mid2_v_reg_361;
    end else begin
        i_phi_fu_201_p4 = i_reg_197;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter25) & ~(1'b1 == ap_enable_reg_pp0_iter24)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_260_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_260_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << ap_const_lv32_2;

assign a_0_Addr_A_orig = tmp_mid2_fu_300_p1;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = ap_const_lv32_0;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = ap_const_lv4_0;

assign a_1_Addr_A = a_1_Addr_A_orig << ap_const_lv32_2;

assign a_1_Addr_A_orig = tmp_mid2_fu_300_p1;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = ap_const_lv32_0;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = ap_const_lv4_0;

assign a_2_Addr_A = a_2_Addr_A_orig << ap_const_lv32_2;

assign a_2_Addr_A_orig = tmp_mid2_fu_300_p1;

assign a_2_Clk_A = ap_clk;

assign a_2_Din_A = ap_const_lv32_0;

assign a_2_Rst_A = ap_rst;

assign a_2_WEN_A = ap_const_lv4_0;

assign a_3_Addr_A = a_3_Addr_A_orig << ap_const_lv32_2;

assign a_3_Addr_A_orig = tmp_mid2_fu_300_p1;

assign a_3_Clk_A = ap_clk;

assign a_3_Din_A = ap_const_lv32_0;

assign a_3_Rst_A = ap_rst;

assign a_3_WEN_A = ap_const_lv4_0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_2];

assign b_0_Addr_A = b_0_Addr_A_orig << ap_const_lv32_2;

assign b_0_Addr_A_orig = tmp_2_fu_308_p1;

assign b_0_Clk_A = ap_clk;

assign b_0_Din_A = ap_const_lv32_0;

assign b_0_Rst_A = ap_rst;

assign b_0_WEN_A = ap_const_lv4_0;

assign b_1_Addr_A = b_1_Addr_A_orig << ap_const_lv32_2;

assign b_1_Addr_A_orig = tmp_2_fu_308_p1;

assign b_1_Clk_A = ap_clk;

assign b_1_Din_A = ap_const_lv32_0;

assign b_1_Rst_A = ap_rst;

assign b_1_WEN_A = ap_const_lv4_0;

assign b_2_Addr_A = b_2_Addr_A_orig << ap_const_lv32_2;

assign b_2_Addr_A_orig = tmp_2_fu_308_p1;

assign b_2_Clk_A = ap_clk;

assign b_2_Din_A = ap_const_lv32_0;

assign b_2_Rst_A = ap_rst;

assign b_2_WEN_A = ap_const_lv4_0;

assign b_3_Addr_A = b_3_Addr_A_orig << ap_const_lv32_2;

assign b_3_Addr_A_orig = tmp_2_fu_308_p1;

assign b_3_Clk_A = ap_clk;

assign b_3_Din_A = ap_const_lv32_0;

assign b_3_Rst_A = ap_rst;

assign b_3_WEN_A = ap_const_lv4_0;

assign c_Addr_A = c_Addr_A_orig << ap_const_lv32_2;

assign c_Addr_A_orig = tmp_4_cast_fu_342_p1;

assign c_Clk_A = ap_clk;

assign c_Din_A = tmp_1_3_reg_487;

assign c_Rst_A = ap_rst;

assign exitcond_flatten_fu_260_p2 = ((indvar_flatten_reg_186 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_278_p2 = ((j_reg_208 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign i_1_fu_272_p2 = (i_phi_fu_201_p4 + ap_const_lv3_1);

assign indvar_flatten_next_fu_266_p2 = (indvar_flatten_reg_186 + ap_const_lv5_1);

assign j_1_fu_316_p2 = (j_mid2_fu_284_p3 + ap_const_lv3_1);

assign j_mid2_fu_284_p3 = ((exitcond_fu_278_p2[0:0] === 1'b1) ? ap_const_lv3_0 : j_reg_208);

assign tmp_2_cast_fu_333_p1 = ap_pipeline_reg_pp0_iter24_j_mid2_reg_356;

assign tmp_2_fu_308_p1 = j_mid2_fu_284_p3;

assign tmp_3_cast_fu_329_p1 = tmp_fu_322_p3;

assign tmp_4_cast_fu_342_p1 = tmp_4_fu_336_p2;

assign tmp_4_fu_336_p2 = (tmp_2_cast_fu_333_p1 + tmp_3_cast_fu_329_p1);

assign tmp_fu_322_p3 = {{ap_pipeline_reg_pp0_iter24_tmp_mid2_v_reg_361}, {ap_const_lv2_0}};

assign tmp_mid2_fu_300_p1 = tmp_mid2_v_fu_292_p3;

assign tmp_mid2_v_fu_292_p3 = ((exitcond_fu_278_p2[0:0] === 1'b1) ? i_1_fu_272_p2 : i_phi_fu_201_p4);

endmodule //matmul_hw
