-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity minver_minver_hwa is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    minver_a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    minver_a_EN_A : OUT STD_LOGIC;
    minver_a_WEN_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    minver_a_Din_A : OUT STD_LOGIC_VECTOR (63 downto 0);
    minver_a_Dout_A : IN STD_LOGIC_VECTOR (63 downto 0);
    minver_a_Clk_A : OUT STD_LOGIC;
    minver_a_Rst_A : OUT STD_LOGIC;
    minver_a_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    minver_a_EN_B : OUT STD_LOGIC;
    minver_a_WEN_B : OUT STD_LOGIC_VECTOR (7 downto 0);
    minver_a_Din_B : OUT STD_LOGIC_VECTOR (63 downto 0);
    minver_a_Dout_B : IN STD_LOGIC_VECTOR (63 downto 0);
    minver_a_Clk_B : OUT STD_LOGIC;
    minver_a_Rst_B : OUT STD_LOGIC;
    side : IN STD_LOGIC_VECTOR (31 downto 0);
    eps : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of minver_minver_hwa is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "minver_minver_hwa,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.664000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=14,HLS_SYN_FF=5437,HLS_SYN_LUT=6520}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (140 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (140 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (140 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (140 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (140 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (140 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (140 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (140 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (140 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (140 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (140 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (140 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv12_3E7 : STD_LOGIC_VECTOR (11 downto 0) := "001111100111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110101";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal work_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_395 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal work_q1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state135 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal reg_402 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_410 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal reg_415 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_8_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1272 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_511_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_5_cast_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_fu_536_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_reg_1304 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1309 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_546_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_reg_1314 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_575_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_reg_1321 : STD_LOGIC_VECTOR (4 downto 0);
    signal minver_a_addr_7_reg_1328 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_5_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_load_reg_1341 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_634_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_reg_1347 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_4_fu_702_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_4_reg_1357 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_39_reg_1364 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal wmax_1_fu_800_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_6_fu_807_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal api_fu_870_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal api_reg_1379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_9_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1388 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_54_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_2_reg_1392 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_addr_3_reg_1398 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_fu_941_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_reg_1407 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal minver_a_addr_4_reg_1412 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minver_a_addr_5_reg_1418 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_8_fu_980_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_8_reg_1426 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal minver_a_addr_6_reg_1431 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_1009_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_9_reg_1440 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal tmp_16_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1445 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_1037_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_72_reg_1449 : STD_LOGIC_VECTOR (4 downto 0);
    signal minver_a_addr_8_reg_1454 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_3_to_int_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_3_to_int_reg_1459 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_59_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_1464 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_1104_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_5_reg_1471 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_21_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1476 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minver_a_addr_10_reg_1485 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_neg_fu_1140_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_neg_reg_1491 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1496 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1501 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal tmp_19_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_20_reg_1511 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal i_7_fu_1158_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_7_reg_1519 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state133 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal tmp_64_fu_1169_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_reg_1524 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_1_reg_1529 : STD_LOGIC_VECTOR (8 downto 0);
    signal minver_a_addr_2_reg_1538 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_4_reg_1543 : STD_LOGIC_VECTOR (8 downto 0);
    signal minver_a_addr_3_reg_1549 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_1238_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_4_reg_1557 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal work_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce0 : STD_LOGIC;
    signal work_we0 : STD_LOGIC;
    signal work_d0 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce1 : STD_LOGIC;
    signal work_we1 : STD_LOGIC;
    signal work_d1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_235 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond6_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_247 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state132 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal r_1_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal wmax_reg_269 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_281 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_2_reg_292 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_3_reg_303 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal j_1_reg_314 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal i_4_reg_325 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_337 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal p_0_reg_348 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_cast_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_cast_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_cast_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_cast_fu_1125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_cast_fu_1135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_cast_fu_1211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl5_fu_1224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_2_fu_792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state134 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal minver_a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal minver_a_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_378_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_422_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal eps_to_int_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_447_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_457_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_550_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_563_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_567_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_590_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_cast_fu_594_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_586_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_602_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_fu_608_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_56_fu_622_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_cast_fu_626_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_51_fu_618_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_640_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_assign_to_int_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_654_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_47_fu_664_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i_fu_692_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_4_to_int_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wmax_to_int_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_713_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_fu_723_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs3_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_731_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_741_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs4_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pivot_to_int_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_822_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_832_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs5_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i1_fu_860_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal api_to_int_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_885_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_63_fu_895_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs6_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_932_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_fu_947_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_68_fu_951_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_69_fu_961_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_cast_fu_971_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_986_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_70_fu_990_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_cast_fu_1000_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_1025_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl4_cast_fu_1029_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_79_fu_1021_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_73_fu_1043_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_55_fu_1057_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_81_fu_1067_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs8_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_cast_fu_1095_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_1116_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_fu_1120_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_75_fu_1130_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_cast_fu_1149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_1188_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl5_cast_fu_1192_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_fu_1184_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_1200_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_fu_1206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_71_fu_1216_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_cast_fu_1229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal grp_fu_378_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (140 downto 0);

    component minver_minver_hwacud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_minver_hwadEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_minver_hwaeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_minver_hwafYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component minver_minver_hwabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (8 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (8 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    work_U : component minver_minver_hwabkb
    generic map (
        DataWidth => 9,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => work_address0,
        ce0 => work_ce0,
        we0 => work_we0,
        d0 => work_d0,
        q0 => work_q0,
        address1 => work_address1,
        ce1 => work_ce1,
        we1 => work_we1,
        d1 => work_d1,
        q1 => work_q1);

    minver_minver_hwacud_U1 : component minver_minver_hwacud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_415,
        din1 => tmp_23_reg_1496,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);

    minver_minver_hwadEe_U2 : component minver_minver_hwadEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_402,
        din1 => reg_415,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    minver_minver_hwaeOg_U3 : component minver_minver_hwaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_373_p0,
        din1 => reg_388,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);

    minver_minver_hwafYi_U4 : component minver_minver_hwafYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_378_p0,
        din1 => grp_fu_378_p1,
        opcode => grp_fu_378_opcode,
        dout => grp_fu_378_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_2_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
                i_2_reg_292 <= i_8_reg_1426;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state15) and (not((ap_const_lv1_0 = tmp_9_reg_1388)) or not((ap_const_lv1_0 = exitcond5_fu_936_p2))))) then 
                i_2_reg_292 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_3_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18) and not((ap_const_lv1_0 = exitcond4_fu_975_p2)))) then 
                i_3_reg_303 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state101))) then 
                i_3_reg_303 <= i_9_reg_1440;
            end if; 
        end if;
    end process;

    i_4_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_3_fu_531_p2 = ap_const_lv1_0))) then 
                i_4_reg_325 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state135) and not((ap_const_lv1_0 = tmp_10_fu_1173_p2)))) then 
                i_4_reg_325 <= i_7_reg_1519;
            end if; 
        end if;
    end process;

    i_5_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond6_fu_506_p2)))) then 
                i_5_reg_247 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state132))) then 
                i_5_reg_247 <= k_reg_1304;
            end if; 
        end if;
    end process;

    i_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = or_cond7_fu_496_p2)))) then 
                i_reg_235 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_506_p2))) then 
                i_reg_235 <= i_1_fu_511_p2;
            end if; 
        end if;
    end process;

    j_1_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54) and (ap_const_lv1_0 = tmp_59_fu_1089_p2))) then 
                j_1_reg_314 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state69))) then 
                j_1_reg_314 <= j_5_reg_1471;
            end if; 
        end if;
    end process;

    j_2_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state140))) then 
                j_2_reg_337 <= j_4_reg_1557;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state137))) then 
                j_2_reg_337 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                j_reg_281 <= j_3_reg_1407;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                j_reg_281 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_0_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_lv1_0 = tmp_54_fu_922_p2)))) then 
                p_0_reg_348(1) <= '0';
                p_0_reg_348(2) <= '0';
                p_0_reg_348(5) <= '0';
                p_0_reg_348(6) <= '0';
                p_0_reg_348(7) <= '0';
                p_0_reg_348(8) <= '0';
                p_0_reg_348(9) <= '0';
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = or_cond7_fu_496_p2))) then 
                p_0_reg_348(1) <= '1';
                p_0_reg_348(2) <= '1';
                p_0_reg_348(5) <= '1';
                p_0_reg_348(6) <= '1';
                p_0_reg_348(7) <= '1';
                p_0_reg_348(8) <= '1';
                p_0_reg_348(9) <= '1';
            end if; 
        end if;
    end process;

    r_1_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_3_fu_531_p2 = ap_const_lv1_0)))) then 
                r_1_reg_259 <= i_5_cast_fu_527_p1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                r_1_reg_259 <= i_6_fu_807_p2;
            end if; 
        end if;
    end process;

    r_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                r_fu_84 <= r_2_fu_792_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond6_fu_506_p2)))) then 
                r_fu_84 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state135))) then 
                reg_395 <= work_q1;
            elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state136)))) then 
                reg_395 <= work_q0;
            end if; 
        end if;
    end process;

    reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state62))) then 
                reg_415 <= minver_a_Dout_A;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
                reg_415 <= minver_a_Dout_B;
            end if; 
        end if;
    end process;

    wmax_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_3_fu_531_p2 = ap_const_lv1_0)))) then 
                wmax_reg_269 <= ap_const_lv64_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                wmax_reg_269 <= wmax_1_fu_800_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                api_reg_1379 <= api_fu_870_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                    i_5_cast_reg_1295(8 downto 0) <= i_5_cast_fu_527_p1(8 downto 0);
                k_reg_1304 <= k_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state133))) then
                i_7_reg_1519 <= i_7_fu_1158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then
                i_8_reg_1426 <= i_8_fu_980_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52))) then
                i_9_reg_1440 <= i_9_fu_1009_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_9_reg_1388))) then
                j_3_reg_1407 <= j_3_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state138))) then
                j_4_reg_1557 <= j_4_fu_1238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55))) then
                j_5_reg_1471 <= j_5_fu_1104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = exitcond2_fu_1099_p2) and (ap_const_lv1_0 = tmp_21_fu_1110_p2))) then
                minver_a_addr_10_reg_1485 <= tmp_75_cast_fu_1135_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state135) and (ap_const_lv1_0 = tmp_10_fu_1173_p2))) then
                minver_a_addr_2_reg_1538 <= tmp_67_cast_fu_1211_p1(4 - 1 downto 0);
                work_addr_4_reg_1543 <= tmp_11_fu_1179_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state136))) then
                    minver_a_addr_3_reg_1549(3 downto 2) <= p_shl5_fu_1224_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_9_reg_1388) and (ap_const_lv1_0 = exitcond5_fu_936_p2))) then
                minver_a_addr_4_reg_1412 <= tmp_68_cast_fu_956_p1(4 - 1 downto 0);
                minver_a_addr_5_reg_1418 <= tmp_69_cast_fu_966_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = exitcond4_fu_975_p2))) then
                minver_a_addr_6_reg_1431 <= tmp_70_cast_fu_995_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_3_fu_531_p2 = ap_const_lv1_0)))) then
                    minver_a_addr_7_reg_1328(3 downto 2) <= p_shl_fu_558_p1(4 - 1 downto 0)(3 downto 2);
                tmp_18_reg_1314 <= tmp_18_fu_546_p1;
                tmp_26_reg_1321 <= tmp_26_fu_575_p2;
                    tmp_4_reg_1309(8 downto 0) <= tmp_4_fu_542_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52) and (ap_const_lv1_0 = exitcond3_fu_1004_p2) and (ap_const_lv1_0 = tmp_16_fu_1015_p2))) then
                minver_a_addr_8_reg_1454 <= tmp_73_cast_fu_1048_p1(4 - 1 downto 0);
                tmp_72_reg_1449 <= tmp_72_fu_1037_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_5_fu_581_p2))) then
                r_load_reg_1341 <= r_fu_84;
                tmp_60_reg_1347 <= tmp_60_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state139)))) then
                reg_388 <= minver_a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state53)))) then
                reg_402 <= minver_a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state50)) or ((ap_const_lv1_1 = ap_CS_fsm_state131)))) then
                reg_410 <= grp_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_12_reg_1254 <= grp_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52) and (ap_const_lv1_0 = exitcond3_fu_1004_p2))) then
                tmp_16_reg_1445 <= tmp_16_fu_1015_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and not((ap_const_lv1_0 = exitcond2_fu_1099_p2)))) then
                tmp_19_neg_reg_1491 <= tmp_19_neg_fu_1140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state100))) then
                tmp_20_reg_1511 <= grp_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = exitcond2_fu_1099_p2))) then
                tmp_21_reg_1476 <= tmp_21_fu_1110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state62))) then
                tmp_23_reg_1496 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state68))) then
                tmp_24_reg_1501 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                tmp_39_reg_1364 <= grp_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then
                tmp_59_reg_1464 <= tmp_59_fu_1089_p2;
                w_3_to_int_reg_1459 <= w_3_to_int_fu_1053_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state133) and (ap_const_lv1_0 = exitcond1_fu_1153_p2))) then
                tmp_64_reg_1524 <= tmp_64_fu_1169_p1;
                work_addr_1_reg_1529 <= tmp_7_fu_1164_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                tmp_8_reg_1272 <= tmp_8_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_54_fu_922_p2))) then
                tmp_9_reg_1388 <= tmp_9_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                w_4_reg_1357 <= w_4_fu_702_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_54_fu_922_p2) and (ap_const_lv1_0 = tmp_9_fu_928_p2))) then
                work_addr_2_reg_1392 <= tmp_4_reg_1309(9 - 1 downto 0);
                work_addr_3_reg_1398 <= tmp_s_fu_878_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    i_5_cast_reg_1295(31 downto 9) <= "00000000000000000000000";
    tmp_4_reg_1309(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    minver_a_addr_7_reg_1328(1 downto 0) <= "00";
    minver_a_addr_3_reg_1549(1 downto 0) <= "00";
    p_0_reg_348(0) <= '1';
    p_0_reg_348(4 downto 3) <= "00";
    p_0_reg_348(11 downto 10) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_3_fu_531_p2, tmp_5_fu_581_p2, tmp_9_fu_928_p2, tmp_9_reg_1388, tmp_54_fu_922_p2, exitcond5_fu_936_p2, exitcond4_fu_975_p2, tmp_16_fu_1015_p2, exitcond3_fu_1004_p2, tmp_59_fu_1089_p2, tmp_21_fu_1110_p2, exitcond2_fu_1099_p2, exitcond1_fu_1153_p2, tmp_10_fu_1173_p2, exitcond6_fu_506_p2, or_cond7_fu_496_p2, exitcond_fu_1233_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = or_cond7_fu_496_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state141;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_506_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((tmp_3_fu_531_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state133;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((ap_const_lv1_0 = tmp_5_fu_581_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (not((ap_const_lv1_0 = tmp_54_fu_922_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state141;
                elsif (((ap_const_lv1_0 = tmp_54_fu_922_p2) and not((ap_const_lv1_0 = tmp_9_fu_928_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if ((not((ap_const_lv1_0 = tmp_9_reg_1388)) or not((ap_const_lv1_0 = exitcond5_fu_936_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_975_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state52 => 
                if (((ap_const_lv1_0 = exitcond3_fu_1004_p2) and not((ap_const_lv1_0 = tmp_16_fu_1015_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                elsif (((ap_const_lv1_0 = exitcond3_fu_1004_p2) and (ap_const_lv1_0 = tmp_16_fu_1015_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if ((ap_const_lv1_0 = tmp_59_fu_1089_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_lv1_0 = exitcond2_fu_1099_p2) and not((ap_const_lv1_0 = tmp_21_fu_1110_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                elsif (((ap_const_lv1_0 = exitcond2_fu_1099_p2) and (ap_const_lv1_0 = tmp_21_fu_1110_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state133 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_1153_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state141;
                else
                    ap_NS_fsm <= ap_ST_fsm_state134;
                end if;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                if (not((ap_const_lv1_0 = tmp_10_fu_1173_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state133;
                else
                    ap_NS_fsm <= ap_ST_fsm_state136;
                end if;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                if (not((ap_const_lv1_0 = exitcond_fu_1233_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state134;
                else
                    ap_NS_fsm <= ap_ST_fsm_state139;
                end if;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99 downto 99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100 downto 100);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state131 <= ap_CS_fsm(130 downto 130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131 downto 131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132 downto 132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133 downto 133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134 downto 134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135 downto 135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136 downto 136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137 downto 137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138 downto 138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139 downto 139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140 downto 140);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49 downto 49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50 downto 50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51 downto 51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52 downto 52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53 downto 53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54 downto 54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55 downto 55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56 downto 56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state61 <= ap_CS_fsm(60 downto 60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61 downto 61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62 downto 62);
    ap_CS_fsm_state68 <= ap_CS_fsm(67 downto 67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68 downto 68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69 downto 69);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state141)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state141))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state141)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state141))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(resize(signed(p_0_reg_348),32));

    api_fu_870_p3 <= 
        reg_388 when (tmp_45_fu_854_p2(0) = '1') else 
        f_1_fu_866_p1;
    api_to_int_fu_882_p1 <= api_reg_1379;
    eps_to_int_fu_444_p1 <= eps;
    exitcond1_fu_1153_p2 <= "1" when (i_4_cast_fu_1149_p1 = side) else "0";
    exitcond2_fu_1099_p2 <= "1" when (j_1_cast_fu_1095_p1 = side) else "0";
    exitcond3_fu_1004_p2 <= "1" when (i_3_cast_fu_1000_p1 = side) else "0";
    exitcond4_fu_975_p2 <= "1" when (i_2_cast_fu_971_p1 = side) else "0";
    exitcond5_fu_936_p2 <= "1" when (j_cast_fu_932_p1 = side) else "0";
    exitcond6_fu_506_p2 <= "1" when (i_cast_fu_502_p1 = side) else "0";
    exitcond_fu_1233_p2 <= "1" when (j_2_cast_fu_1229_p1 = side) else "0";
    f_1_fu_866_p1 <= f_neg_i1_fu_860_p2;
    f_fu_698_p1 <= f_neg_i_fu_692_p2;
    f_neg_i1_fu_860_p2 <= (pivot_to_int_fu_818_p1 xor ap_const_lv64_8000000000000000);
    f_neg_i_fu_692_p2 <= (n_assign_to_int_fu_650_p1 xor ap_const_lv64_8000000000000000);

    grp_fu_373_p0_assign_proc : process(reg_402, ap_CS_fsm_state52, tmp_19_fu_1145_p1, ap_CS_fsm_state70, ap_CS_fsm_state20)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state70))) then 
            grp_fu_373_p0 <= tmp_19_fu_1145_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
            grp_fu_373_p0 <= ap_const_lv64_3FF0000000000000;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            grp_fu_373_p0 <= reg_402;
        else 
            grp_fu_373_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_378_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state54)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
            grp_fu_378_opcode <= ap_const_lv5_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            grp_fu_378_opcode <= ap_const_lv5_2;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            grp_fu_378_opcode <= ap_const_lv5_3;
        elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state12)))) then 
            grp_fu_378_opcode <= ap_const_lv5_5;
        else 
            grp_fu_378_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_378_p0_assign_proc : process(ap_CS_fsm_state1, eps, reg_388, reg_402, w_4_reg_1357, ap_CS_fsm_state7, ap_CS_fsm_state8, api_reg_1379, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state54)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
            grp_fu_378_p0 <= reg_402;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_378_p0 <= api_reg_1379;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            grp_fu_378_p0 <= w_4_reg_1357;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            grp_fu_378_p0 <= reg_388;
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            grp_fu_378_p0 <= eps;
        else 
            grp_fu_378_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_378_p1_assign_proc : process(ap_CS_fsm_state1, eps, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state54, wmax_reg_269)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_378_p1 <= eps;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            grp_fu_378_p1 <= wmax_reg_269;
        elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state54)))) then 
            grp_fu_378_p1 <= ap_const_lv64_0;
        else 
            grp_fu_378_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_511_p2 <= std_logic_vector(unsigned(i_reg_235) + unsigned(ap_const_lv9_1));
    i_2_cast_fu_971_p1 <= std_logic_vector(resize(unsigned(i_2_reg_292),32));
    i_3_cast_fu_1000_p1 <= std_logic_vector(resize(unsigned(i_3_reg_303),32));
    i_4_cast_fu_1149_p1 <= std_logic_vector(resize(unsigned(i_4_reg_325),32));
    i_5_cast_fu_527_p1 <= std_logic_vector(resize(unsigned(i_5_reg_247),32));
    i_6_fu_807_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(r_1_reg_259));
    i_7_fu_1158_p2 <= std_logic_vector(unsigned(i_4_reg_325) + unsigned(ap_const_lv9_1));
    i_8_fu_980_p2 <= std_logic_vector(unsigned(i_2_reg_292) + unsigned(ap_const_lv9_1));
    i_9_fu_1009_p2 <= std_logic_vector(unsigned(i_3_reg_303) + unsigned(ap_const_lv9_1));
    i_cast_fu_502_p1 <= std_logic_vector(resize(unsigned(i_reg_235),32));
    icmp_fu_432_p2 <= "1" when (signed(tmp_2_fu_422_p4) > signed(ap_const_lv31_0)) else "0";
    j_1_cast_fu_1095_p1 <= std_logic_vector(resize(unsigned(j_1_reg_314),32));
    j_2_cast_fu_1229_p1 <= std_logic_vector(resize(unsigned(j_2_reg_337),32));
    j_3_fu_941_p2 <= std_logic_vector(unsigned(j_reg_281) + unsigned(ap_const_lv9_1));
    j_4_fu_1238_p2 <= std_logic_vector(unsigned(j_2_reg_337) + unsigned(ap_const_lv9_1));
    j_5_fu_1104_p2 <= std_logic_vector(unsigned(j_1_reg_314) + unsigned(ap_const_lv9_1));
    j_cast_fu_932_p1 <= std_logic_vector(resize(unsigned(j_reg_281),32));
    k_fu_536_p2 <= std_logic_vector(unsigned(i_5_reg_247) + unsigned(ap_const_lv9_1));
    minver_a_Addr_A <= std_logic_vector(shift_left(unsigned(minver_a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    minver_a_Addr_A_orig_assign_proc : process(ap_CS_fsm_state139, ap_CS_fsm_state5, tmp_5_fu_581_p2, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state52, minver_a_addr_8_reg_1454, minver_a_addr_10_reg_1485, minver_a_addr_2_reg_1538, ap_CS_fsm_state138, ap_CS_fsm_state101, tmp_61_cast_fu_613_p1, tmp_64_cast_fu_645_p1, tmp_68_cast_fu_956_p1, tmp_70_cast_fu_995_p1, tmp_73_cast_fu_1048_p1, ap_CS_fsm_state61)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state139)) or ((ap_const_lv1_1 = ap_CS_fsm_state138)))) then 
            minver_a_Addr_A_orig <= std_logic_vector(resize(unsigned(minver_a_addr_2_reg_1538),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state101))) then 
            minver_a_Addr_A_orig <= std_logic_vector(resize(unsigned(minver_a_addr_8_reg_1454),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state61))) then 
            minver_a_Addr_A_orig <= std_logic_vector(resize(unsigned(minver_a_addr_10_reg_1485),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
            minver_a_Addr_A_orig <= tmp_73_cast_fu_1048_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            minver_a_Addr_A_orig <= tmp_70_cast_fu_995_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            minver_a_Addr_A_orig <= tmp_68_cast_fu_956_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_5_fu_581_p2))) then 
            minver_a_Addr_A_orig <= tmp_64_cast_fu_645_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_5_fu_581_p2)))) then 
            minver_a_Addr_A_orig <= tmp_61_cast_fu_613_p1(32 - 1 downto 0);
        else 
            minver_a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    minver_a_Addr_B <= std_logic_vector(shift_left(unsigned(minver_a_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    minver_a_Addr_B_orig_assign_proc : process(ap_CS_fsm_state16, minver_a_addr_7_reg_1328, ap_CS_fsm_state15, minver_a_addr_4_reg_1412, minver_a_addr_5_reg_1418, minver_a_addr_6_reg_1431, ap_CS_fsm_state55, minver_a_addr_10_reg_1485, minver_a_addr_3_reg_1549, ap_CS_fsm_state138, ap_CS_fsm_state132, ap_CS_fsm_state17, ap_CS_fsm_state51, ap_CS_fsm_state69, ap_CS_fsm_state140, tmp_69_cast_fu_966_p1, tmp_74_cast_fu_1125_p1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state138)) or ((ap_const_lv1_1 = ap_CS_fsm_state140)))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_3_reg_1549),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state132))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_7_reg_1328),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state69))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_10_reg_1485),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            minver_a_Addr_B_orig <= tmp_74_cast_fu_1125_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_6_reg_1431),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_5_reg_1418),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_4_reg_1412),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            minver_a_Addr_B_orig <= tmp_69_cast_fu_966_p1(32 - 1 downto 0);
        else 
            minver_a_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    minver_a_Clk_A <= ap_clk;
    minver_a_Clk_B <= ap_clk;

    minver_a_Din_A_assign_proc : process(minver_a_Dout_B, ap_CS_fsm_state139, tmp_20_reg_1511, ap_CS_fsm_state101)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state139))) then 
            minver_a_Din_A <= minver_a_Dout_B;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state101))) then 
            minver_a_Din_A <= tmp_20_reg_1511;
        else 
            minver_a_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    minver_a_Din_B_assign_proc : process(minver_a_Dout_B, reg_388, reg_402, ap_CS_fsm_state16, reg_410, tmp_24_reg_1501, ap_CS_fsm_state132, ap_CS_fsm_state17, ap_CS_fsm_state51, ap_CS_fsm_state69, ap_CS_fsm_state140)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state140))) then 
            minver_a_Din_B <= reg_388;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state69))) then 
            minver_a_Din_B <= tmp_24_reg_1501;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state132)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)))) then 
            minver_a_Din_B <= reg_410;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            minver_a_Din_B <= reg_402;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            minver_a_Din_B <= minver_a_Dout_B;
        else 
            minver_a_Din_B <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    minver_a_EN_A_assign_proc : process(ap_CS_fsm_state139, ap_CS_fsm_state5, tmp_5_fu_581_p2, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state52, ap_CS_fsm_state138, ap_CS_fsm_state101, ap_CS_fsm_state61)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state139)) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_5_fu_581_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_5_fu_581_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state52)) or ((ap_const_lv1_1 = ap_CS_fsm_state138)) or ((ap_const_lv1_1 = ap_CS_fsm_state101)) or ((ap_const_lv1_1 = ap_CS_fsm_state61)))) then 
            minver_a_EN_A <= ap_const_logic_1;
        else 
            minver_a_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    minver_a_EN_B_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state15, ap_CS_fsm_state55, ap_CS_fsm_state138, ap_CS_fsm_state132, ap_CS_fsm_state17, ap_CS_fsm_state51, ap_CS_fsm_state69, ap_CS_fsm_state140)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state55)) or ((ap_const_lv1_1 = ap_CS_fsm_state138)) or ((ap_const_lv1_1 = ap_CS_fsm_state132)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)) or ((ap_const_lv1_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = ap_CS_fsm_state140)))) then 
            minver_a_EN_B <= ap_const_logic_1;
        else 
            minver_a_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    minver_a_Rst_A <= ap_rst;
    minver_a_Rst_B <= ap_rst;

    minver_a_WEN_A_assign_proc : process(ap_CS_fsm_state139, tmp_16_reg_1445, tmp_59_reg_1464, ap_CS_fsm_state101)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state139)) or ((ap_const_lv1_1 = ap_CS_fsm_state101) and (ap_const_lv1_0 = tmp_16_reg_1445) and (ap_const_lv1_0 = tmp_59_reg_1464)))) then 
            minver_a_WEN_A <= ap_const_lv8_FF;
        else 
            minver_a_WEN_A <= ap_const_lv8_0;
        end if; 
    end process;


    minver_a_WEN_B_assign_proc : process(ap_CS_fsm_state16, tmp_21_reg_1476, ap_CS_fsm_state132, ap_CS_fsm_state17, ap_CS_fsm_state51, ap_CS_fsm_state69, ap_CS_fsm_state140)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state132)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)) or ((ap_const_lv1_1 = ap_CS_fsm_state140)) or ((ap_const_lv1_1 = ap_CS_fsm_state69) and (ap_const_lv1_0 = tmp_21_reg_1476)))) then 
            minver_a_WEN_B <= ap_const_lv8_FF;
        else 
            minver_a_WEN_B <= ap_const_lv8_0;
        end if; 
    end process;

    n_assign_to_int_fu_650_p1 <= reg_388;
    notlhs1_fu_461_p2 <= "0" when (tmp_fu_447_p4 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_668_p2 <= "0" when (tmp_27_fu_654_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_745_p2 <= "0" when (tmp_32_fu_713_p4 = ap_const_lv11_7FF) else "1";
    notlhs4_fu_763_p2 <= "0" when (tmp_34_fu_731_p4 = ap_const_lv11_7FF) else "1";
    notlhs5_fu_836_p2 <= "0" when (tmp_41_fu_822_p4 = ap_const_lv11_7FF) else "1";
    notlhs6_fu_899_p2 <= "0" when (tmp_46_fu_885_p4 = ap_const_lv11_7FF) else "1";
    notlhs8_fu_1071_p2 <= "0" when (tmp_55_fu_1057_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_467_p2 <= "1" when (tmp_6_fu_457_p1 = ap_const_lv52_0) else "0";
    notrhs2_fu_674_p2 <= "1" when (tmp_47_fu_664_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_751_p2 <= "1" when (tmp_48_fu_723_p1 = ap_const_lv52_0) else "0";
    notrhs4_fu_769_p2 <= "1" when (tmp_49_fu_741_p1 = ap_const_lv52_0) else "0";
    notrhs5_fu_842_p2 <= "1" when (tmp_62_fu_832_p1 = ap_const_lv52_0) else "0";
    notrhs6_fu_905_p2 <= "1" when (tmp_63_fu_895_p1 = ap_const_lv52_0) else "0";
    notrhs8_fu_1077_p2 <= "1" when (tmp_81_fu_1067_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_438_p2 <= "1" when (signed(side) < signed(ap_const_lv32_1F5)) else "0";
    or_cond7_fu_496_p2 <= (tmp2_fu_490_p2 and notrhs_fu_438_p2);
    p_shl2_cast_fu_594_p3 <= (tmp_33_fu_590_p1 & ap_const_lv2_0);
    p_shl3_cast_fu_626_p3 <= (tmp_56_fu_622_p1 & ap_const_lv2_0);
    p_shl4_cast_fu_1029_p3 <= (tmp_80_fu_1025_p1 & ap_const_lv2_0);
    p_shl5_cast_fu_1192_p3 <= (tmp_76_fu_1188_p1 & ap_const_lv2_0);
    p_shl5_fu_1224_p1 <= std_logic_vector(resize(unsigned(tmp_71_fu_1216_p3),64));
    p_shl_cast_fu_567_p3 <= (tmp_25_fu_563_p1 & ap_const_lv2_0);
    p_shl_fu_558_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_550_p3),64));
    pivot_to_int_fu_818_p1 <= reg_388;
    r_2_fu_792_p3 <= 
        r_1_reg_259 when (tmp_40_fu_787_p2(0) = '1') else 
        r_fu_84;
    tmp2_fu_490_p2 <= (icmp_fu_432_p2 and tmp_17_fu_484_p2);
    tmp_10_fu_1173_p2 <= "1" when (work_q1 = i_4_reg_325) else "0";
    tmp_11_fu_1179_p1 <= std_logic_vector(resize(unsigned(work_q1),64));
    tmp_13_fu_479_p2 <= (tmp_8_fu_473_p2 and tmp_12_reg_1254);
    tmp_16_fu_1015_p2 <= "1" when (i_3_reg_303 = i_5_reg_247) else "0";
    tmp_17_fu_484_p2 <= (tmp_13_fu_479_p2 xor ap_const_lv1_1);
    tmp_18_fu_546_p1 <= i_5_reg_247(5 - 1 downto 0);
    tmp_19_fu_1145_p1 <= tmp_19_neg_reg_1491;
    tmp_19_neg_fu_1140_p2 <= (w_3_to_int_reg_1459 xor ap_const_lv64_8000000000000000);
    tmp_1_fu_517_p1 <= std_logic_vector(resize(unsigned(i_reg_235),64));
    tmp_21_fu_1110_p2 <= "1" when (j_1_reg_314 = i_5_reg_247) else "0";
    tmp_22_fu_550_p3 <= (i_5_reg_247 & ap_const_lv2_0);
    tmp_25_fu_563_p1 <= i_5_reg_247(3 - 1 downto 0);
    tmp_26_fu_575_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_567_p3) - unsigned(tmp_18_fu_546_p1));
    tmp_27_fu_654_p4 <= n_assign_to_int_fu_650_p1(62 downto 52);
    tmp_28_fu_586_p1 <= r_1_reg_259(5 - 1 downto 0);
    tmp_29_fu_680_p2 <= (notrhs2_fu_674_p2 or notlhs2_fu_668_p2);
    tmp_2_fu_422_p4 <= side(31 downto 1);
    tmp_31_fu_686_p2 <= (tmp_29_fu_680_p2 and grp_fu_378_p2);
    tmp_32_fu_713_p4 <= w_4_to_int_fu_710_p1(62 downto 52);
    tmp_33_fu_590_p1 <= r_1_reg_259(3 - 1 downto 0);
    tmp_34_fu_731_p4 <= wmax_to_int_fu_727_p1(62 downto 52);
    tmp_35_fu_602_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_594_p3) - unsigned(tmp_28_fu_586_p1));
    tmp_36_fu_757_p2 <= (notrhs3_fu_751_p2 or notlhs3_fu_745_p2);
    tmp_37_fu_775_p2 <= (notrhs4_fu_769_p2 or notlhs4_fu_763_p2);
    tmp_38_fu_781_p2 <= (tmp_36_fu_757_p2 and tmp_37_fu_775_p2);
    tmp_3_fu_531_p2 <= "1" when (signed(i_5_cast_fu_527_p1) < signed(side)) else "0";
    tmp_40_fu_787_p2 <= (tmp_38_fu_781_p2 and tmp_39_reg_1364);
    tmp_41_fu_822_p4 <= pivot_to_int_fu_818_p1(62 downto 52);
    tmp_42_fu_608_p2 <= std_logic_vector(unsigned(tmp_18_reg_1314) + unsigned(tmp_35_fu_602_p2));
    tmp_43_fu_848_p2 <= (notrhs5_fu_842_p2 or notlhs5_fu_836_p2);
    tmp_45_fu_854_p2 <= (tmp_43_fu_848_p2 and grp_fu_378_p2);
    tmp_46_fu_885_p4 <= api_to_int_fu_882_p1(62 downto 52);
    tmp_47_fu_664_p1 <= n_assign_to_int_fu_650_p1(52 - 1 downto 0);
    tmp_48_fu_723_p1 <= w_4_to_int_fu_710_p1(52 - 1 downto 0);
    tmp_49_fu_741_p1 <= wmax_to_int_fu_727_p1(52 - 1 downto 0);
    tmp_4_fu_542_p1 <= std_logic_vector(resize(unsigned(i_5_reg_247),64));
    tmp_50_fu_911_p2 <= (notrhs6_fu_905_p2 or notlhs6_fu_899_p2);
    tmp_51_fu_618_p1 <= r_fu_84(5 - 1 downto 0);
    tmp_52_fu_917_p2 <= (tmp_50_fu_911_p2 and tmp_8_reg_1272);
    tmp_54_fu_922_p2 <= (tmp_52_fu_917_p2 and grp_fu_378_p2);
    tmp_55_fu_1057_p4 <= w_3_to_int_fu_1053_p1(62 downto 52);
    tmp_56_fu_622_p1 <= r_fu_84(3 - 1 downto 0);
    tmp_57_fu_1083_p2 <= (notrhs8_fu_1077_p2 or notlhs8_fu_1071_p2);
    tmp_59_fu_1089_p2 <= (tmp_57_fu_1083_p2 and grp_fu_378_p2);
    tmp_5_fu_581_p2 <= "1" when (signed(r_1_reg_259) < signed(side)) else "0";
    tmp_60_fu_634_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_626_p3) - unsigned(tmp_51_fu_618_p1));
        tmp_61_cast_fu_613_p1 <= std_logic_vector(resize(signed(tmp_42_fu_608_p2),64));

    tmp_61_fu_640_p2 <= std_logic_vector(unsigned(tmp_18_reg_1314) + unsigned(tmp_60_fu_634_p2));
    tmp_62_fu_832_p1 <= pivot_to_int_fu_818_p1(52 - 1 downto 0);
    tmp_63_fu_895_p1 <= api_to_int_fu_882_p1(52 - 1 downto 0);
        tmp_64_cast_fu_645_p1 <= std_logic_vector(resize(signed(tmp_61_fu_640_p2),64));

    tmp_64_fu_1169_p1 <= i_4_reg_325(5 - 1 downto 0);
    tmp_65_fu_1184_p1 <= work_q1(5 - 1 downto 0);
    tmp_66_fu_1200_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_1192_p3) - unsigned(tmp_65_fu_1184_p1));
        tmp_67_cast_fu_1211_p1 <= std_logic_vector(resize(signed(tmp_67_fu_1206_p2),64));

    tmp_67_fu_1206_p2 <= std_logic_vector(unsigned(tmp_66_fu_1200_p2) + unsigned(tmp_64_reg_1524));
        tmp_68_cast_fu_956_p1 <= std_logic_vector(resize(signed(tmp_68_fu_951_p2),64));

    tmp_68_fu_951_p2 <= std_logic_vector(unsigned(tmp_26_reg_1321) + unsigned(tmp_77_fu_947_p1));
        tmp_69_cast_fu_966_p1 <= std_logic_vector(resize(signed(tmp_69_fu_961_p2),64));

    tmp_69_fu_961_p2 <= std_logic_vector(unsigned(tmp_60_reg_1347) + unsigned(tmp_77_fu_947_p1));
    tmp_6_fu_457_p1 <= eps_to_int_fu_444_p1(52 - 1 downto 0);
        tmp_70_cast_fu_995_p1 <= std_logic_vector(resize(signed(tmp_70_fu_990_p2),64));

    tmp_70_fu_990_p2 <= std_logic_vector(unsigned(tmp_26_reg_1321) + unsigned(tmp_78_fu_986_p1));
    tmp_71_fu_1216_p3 <= (reg_395 & ap_const_lv2_0);
    tmp_72_fu_1037_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_1029_p3) - unsigned(tmp_79_fu_1021_p1));
        tmp_73_cast_fu_1048_p1 <= std_logic_vector(resize(signed(tmp_73_fu_1043_p2),64));

    tmp_73_fu_1043_p2 <= std_logic_vector(unsigned(tmp_18_reg_1314) + unsigned(tmp_72_fu_1037_p2));
        tmp_74_cast_fu_1125_p1 <= std_logic_vector(resize(signed(tmp_74_fu_1120_p2),64));

    tmp_74_fu_1120_p2 <= std_logic_vector(unsigned(tmp_26_reg_1321) + unsigned(tmp_82_fu_1116_p1));
        tmp_75_cast_fu_1135_p1 <= std_logic_vector(resize(signed(tmp_75_fu_1130_p2),64));

    tmp_75_fu_1130_p2 <= std_logic_vector(unsigned(tmp_72_reg_1449) + unsigned(tmp_82_fu_1116_p1));
    tmp_76_fu_1188_p1 <= work_q1(3 - 1 downto 0);
    tmp_77_fu_947_p1 <= j_reg_281(5 - 1 downto 0);
    tmp_78_fu_986_p1 <= i_2_reg_292(5 - 1 downto 0);
    tmp_79_fu_1021_p1 <= i_3_reg_303(5 - 1 downto 0);
    tmp_7_fu_1164_p1 <= std_logic_vector(resize(unsigned(i_4_reg_325),64));
    tmp_80_fu_1025_p1 <= i_3_reg_303(3 - 1 downto 0);
    tmp_81_fu_1067_p1 <= w_3_to_int_fu_1053_p1(52 - 1 downto 0);
    tmp_82_fu_1116_p1 <= j_1_reg_314(5 - 1 downto 0);
    tmp_8_fu_473_p2 <= (notrhs1_fu_467_p2 or notlhs1_fu_461_p2);
    tmp_9_fu_928_p2 <= "1" when (r_load_reg_1341 = i_5_cast_reg_1295) else "0";
    tmp_fu_447_p4 <= eps_to_int_fu_444_p1(62 downto 52);
        tmp_s_fu_878_p1 <= std_logic_vector(resize(signed(r_load_reg_1341),64));

    w_3_to_int_fu_1053_p1 <= reg_402;
    w_4_fu_702_p3 <= 
        reg_388 when (tmp_31_fu_686_p2(0) = '1') else 
        f_fu_698_p1;
    w_4_to_int_fu_710_p1 <= w_4_reg_1357;
    wmax_1_fu_800_p3 <= 
        w_4_reg_1357 when (tmp_40_fu_787_p2(0) = '1') else 
        wmax_reg_269;
    wmax_to_int_fu_727_p1 <= wmax_reg_269;

    work_address0_assign_proc : process(ap_CS_fsm_state135, ap_CS_fsm_state3, tmp_4_reg_1309, ap_CS_fsm_state12, work_addr_3_reg_1398, work_addr_1_reg_1529, ap_CS_fsm_state14, ap_CS_fsm_state137, tmp_1_fu_517_p1, tmp_11_fu_1179_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state137))) then 
            work_address0 <= work_addr_1_reg_1529;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state135))) then 
            work_address0 <= tmp_11_fu_1179_p1(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_address0 <= work_addr_3_reg_1398;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            work_address0 <= tmp_4_reg_1309(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            work_address0 <= tmp_1_fu_517_p1(9 - 1 downto 0);
        else 
            work_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    work_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state136, ap_CS_fsm_state12, work_addr_2_reg_1392, work_addr_1_reg_1529, work_addr_4_reg_1543, tmp_s_fu_878_p1, ap_CS_fsm_state134)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state136))) then 
            work_address1 <= work_addr_4_reg_1543;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state134))) then 
            work_address1 <= work_addr_1_reg_1529;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_address1 <= work_addr_2_reg_1392;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            work_address1 <= tmp_s_fu_878_p1(9 - 1 downto 0);
        else 
            work_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    work_ce0_assign_proc : process(ap_CS_fsm_state135, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state137)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state135)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state137)))) then 
            work_ce0 <= ap_const_logic_1;
        else 
            work_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    work_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state136, ap_CS_fsm_state12, ap_CS_fsm_state134)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state136)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state134)))) then 
            work_ce1 <= ap_const_logic_1;
        else 
            work_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    work_d0_assign_proc : process(reg_395, ap_CS_fsm_state3, i_reg_235, ap_CS_fsm_state14, ap_CS_fsm_state137)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state137)))) then 
            work_d0 <= reg_395;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            work_d0 <= i_reg_235;
        else 
            work_d0 <= "XXXXXXXXX";
        end if; 
    end process;


    work_d1_assign_proc : process(reg_395, ap_CS_fsm_state13, work_q1, ap_CS_fsm_state136)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state136))) then 
            work_d1 <= reg_395;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_d1 <= work_q1;
        else 
            work_d1 <= "XXXXXXXXX";
        end if; 
    end process;


    work_we0_assign_proc : process(ap_CS_fsm_state3, exitcond6_fu_506_p2, ap_CS_fsm_state14, ap_CS_fsm_state137)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_506_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state137)))) then 
            work_we0 <= ap_const_logic_1;
        else 
            work_we0 <= ap_const_logic_0;
        end if; 
    end process;


    work_we1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state136)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state136)))) then 
            work_we1 <= ap_const_logic_1;
        else 
            work_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
