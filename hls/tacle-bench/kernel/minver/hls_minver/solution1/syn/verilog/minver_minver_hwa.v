// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="minver_minver_hwa,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.635500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=14,HLS_SYN_FF=5668,HLS_SYN_LUT=6740}" *)

module minver_minver_hwa (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        minver_a_Addr_A,
        minver_a_EN_A,
        minver_a_WEN_A,
        minver_a_Din_A,
        minver_a_Dout_A,
        minver_a_Clk_A,
        minver_a_Rst_A,
        minver_a_Addr_B,
        minver_a_EN_B,
        minver_a_WEN_B,
        minver_a_Din_B,
        minver_a_Dout_B,
        minver_a_Clk_B,
        minver_a_Rst_B,
        side,
        eps,
        ap_return
);

parameter    ap_ST_fsm_state1 = 107'b1;
parameter    ap_ST_fsm_state2 = 107'b10;
parameter    ap_ST_fsm_state3 = 107'b100;
parameter    ap_ST_fsm_state4 = 107'b1000;
parameter    ap_ST_fsm_pp0_stage0 = 107'b10000;
parameter    ap_ST_fsm_state10 = 107'b100000;
parameter    ap_ST_fsm_state11 = 107'b1000000;
parameter    ap_ST_fsm_state12 = 107'b10000000;
parameter    ap_ST_fsm_state13 = 107'b100000000;
parameter    ap_ST_fsm_state14 = 107'b1000000000;
parameter    ap_ST_fsm_state15 = 107'b10000000000;
parameter    ap_ST_fsm_pp1_stage0 = 107'b100000000000;
parameter    ap_ST_fsm_pp1_stage1 = 107'b1000000000000;
parameter    ap_ST_fsm_state20 = 107'b10000000000000;
parameter    ap_ST_fsm_pp2_stage0 = 107'b100000000000000;
parameter    ap_ST_fsm_state55 = 107'b1000000000000000;
parameter    ap_ST_fsm_state56 = 107'b10000000000000000;
parameter    ap_ST_fsm_state57 = 107'b100000000000000000;
parameter    ap_ST_fsm_state58 = 107'b1000000000000000000;
parameter    ap_ST_fsm_state59 = 107'b10000000000000000000;
parameter    ap_ST_fsm_state60 = 107'b100000000000000000000;
parameter    ap_ST_fsm_state61 = 107'b1000000000000000000000;
parameter    ap_ST_fsm_state62 = 107'b10000000000000000000000;
parameter    ap_ST_fsm_state63 = 107'b100000000000000000000000;
parameter    ap_ST_fsm_state64 = 107'b1000000000000000000000000;
parameter    ap_ST_fsm_state65 = 107'b10000000000000000000000000;
parameter    ap_ST_fsm_state66 = 107'b100000000000000000000000000;
parameter    ap_ST_fsm_state67 = 107'b1000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 107'b10000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 107'b100000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 107'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 107'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 107'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 107'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 107'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 107'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 107'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 107'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state78 = 107'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state79 = 107'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state80 = 107'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state81 = 107'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state82 = 107'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state83 = 107'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state84 = 107'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state85 = 107'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state86 = 107'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state87 = 107'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state88 = 107'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state89 = 107'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state90 = 107'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state91 = 107'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state92 = 107'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state93 = 107'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state94 = 107'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state95 = 107'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state96 = 107'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state97 = 107'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state98 = 107'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state99 = 107'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state100 = 107'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state101 = 107'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state102 = 107'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state103 = 107'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state104 = 107'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state105 = 107'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state106 = 107'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state107 = 107'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state108 = 107'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state109 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state110 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state111 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state112 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state113 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state114 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state115 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state116 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state117 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state118 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state119 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state120 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state121 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state122 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state123 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state124 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state125 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state126 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state127 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state128 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state129 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state130 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state131 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state132 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state133 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state134 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state135 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state136 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state137 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state138 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state139 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state140 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state141 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state142 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state143 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state144 = 107'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state145 = 107'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state146 = 107'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_67 = 32'b1100111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_63 = 32'b1100011;
parameter    ap_const_lv32_64 = 32'b1100100;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_5F = 32'b1011111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_61 = 32'b1100001;
parameter    ap_const_lv32_66 = 32'b1100110;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_65 = 32'b1100101;
parameter    ap_const_lv32_68 = 32'b1101000;
parameter    ap_const_lv12_3E7 = 12'b1111100111;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_62 = 32'b1100010;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv64_3FF0000000000000 = 64'b11111111110000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_1F5 = 32'b111110101;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv11_7FF = 11'b11111111111;
parameter    ap_const_lv52_0 = 52'b0000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv64_8000000000000000 = 64'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_6A = 32'b1101010;
parameter    ap_const_lv5_5 = 5'b101;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_2 = 5'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] minver_a_Addr_A;
output   minver_a_EN_A;
output  [7:0] minver_a_WEN_A;
output  [63:0] minver_a_Din_A;
input  [63:0] minver_a_Dout_A;
output   minver_a_Clk_A;
output   minver_a_Rst_A;
output  [31:0] minver_a_Addr_B;
output   minver_a_EN_B;
output  [7:0] minver_a_WEN_B;
output  [63:0] minver_a_Din_B;
input  [63:0] minver_a_Dout_B;
output   minver_a_Clk_B;
output   minver_a_Rst_B;
input  [31:0] side;
input  [63:0] eps;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg minver_a_EN_A;
reg[7:0] minver_a_WEN_A;
reg[63:0] minver_a_Din_A;
reg minver_a_EN_B;
reg[7:0] minver_a_WEN_B;
reg[63:0] minver_a_Din_B;

(* fsm_encoding = "none" *) reg   [106:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [31:0] r_1_reg_277;
reg   [31:0] ap_pipeline_reg_pp0_iter1_r_1_reg_277;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [31:0] ap_pipeline_reg_pp0_iter2_r_1_reg_277;
reg   [31:0] ap_pipeline_reg_pp0_iter3_r_1_reg_277;
reg   [63:0] wmax_reg_287;
reg   [8:0] j_reg_299;
reg   [8:0] i_2_reg_310;
reg   [63:0] reg_410;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_5_reg_1358;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state143;
wire   [8:0] work_q0;
reg   [8:0] reg_417;
wire   [0:0] ap_CS_fsm_state14;
wire   [8:0] work_q1;
wire   [0:0] ap_CS_fsm_state139;
wire   [0:0] ap_CS_fsm_state140;
reg   [63:0] reg_424;
wire   [0:0] ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
reg   [0:0] exitcond5_reg_1430;
wire   [0:0] ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] exitcond4_reg_1451;
wire   [0:0] ap_CS_fsm_state57;
wire   [63:0] grp_fu_391_p2;
reg   [63:0] reg_433;
reg    ap_enable_reg_pp2_iter32;
reg   [0:0] ap_pipeline_reg_pp2_iter31_exitcond4_reg_1451;
wire   [0:0] ap_CS_fsm_state135;
reg   [63:0] reg_439;
wire   [0:0] ap_CS_fsm_state60;
wire   [0:0] ap_CS_fsm_state66;
wire   [0:0] grp_fu_396_p2;
reg   [0:0] tmp_12_reg_1278;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_8_fu_497_p2;
reg   [0:0] tmp_8_reg_1296;
wire   [8:0] i_1_fu_535_p2;
wire   [0:0] ap_CS_fsm_state3;
wire   [31:0] i_5_cast_fu_551_p1;
reg   [31:0] i_5_cast_reg_1319;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] tmp_3_fu_555_p2;
wire   [8:0] k_fu_560_p2;
reg   [8:0] k_reg_1329;
wire   [63:0] tmp_4_fu_566_p1;
reg   [63:0] tmp_4_reg_1334;
wire   [4:0] tmp_18_fu_570_p1;
reg   [4:0] tmp_18_reg_1339;
wire   [4:0] tmp_31_fu_599_p2;
reg   [4:0] tmp_31_reg_1346;
reg   [3:0] minver_a_addr_7_reg_1353;
wire   [0:0] tmp_5_fu_605_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358;
reg   [0:0] ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358;
reg   [0:0] ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358;
wire   [31:0] i_6_fu_642_p2;
reg   [31:0] i_6_reg_1367;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] w_4_fu_700_p3;
reg   [63:0] w_4_reg_1372;
wire   [0:0] tmp_45_fu_785_p2;
reg   [0:0] tmp_45_reg_1379;
wire   [63:0] wmax_1_fu_791_p3;
reg   [63:0] wmax_1_reg_1384;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] r_load_reg_1389;
wire   [0:0] ap_CS_fsm_state10;
wire   [4:0] tmp_65_fu_826_p2;
reg   [4:0] tmp_65_reg_1395;
wire   [63:0] api_fu_894_p3;
reg   [63:0] api_reg_1405;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] tmp_9_fu_952_p2;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] tmp_59_fu_946_p2;
reg   [8:0] work_addr_2_reg_1418;
reg   [8:0] work_addr_3_reg_1424;
wire   [0:0] exitcond5_fu_960_p2;
wire   [0:0] ap_CS_fsm_pp1_stage0;
reg   [0:0] ap_pipeline_reg_pp1_iter1_exitcond5_reg_1430;
wire   [8:0] j_3_fu_965_p2;
reg   [8:0] j_3_reg_1434;
reg   [3:0] minver_a_addr_4_reg_1439;
reg   [3:0] minver_a_addr_5_reg_1445;
reg   [3:0] ap_pipeline_reg_pp1_iter1_minver_a_addr_5_reg_1445;
wire   [0:0] exitcond4_fu_999_p2;
reg   [0:0] ap_pipeline_reg_pp2_iter1_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter2_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter3_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter4_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter5_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter6_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter7_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter8_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter9_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter10_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter11_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter12_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter13_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter14_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter15_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter16_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter17_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter18_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter19_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter20_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter21_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter22_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter23_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter24_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter25_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter26_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter27_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter28_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter29_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter30_exitcond4_reg_1451;
reg   [0:0] ap_pipeline_reg_pp2_iter32_exitcond4_reg_1451;
wire   [8:0] i_8_fu_1004_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [3:0] minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter1_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter2_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter3_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter4_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter5_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter6_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter7_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter8_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter9_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter10_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter11_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter12_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter13_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter14_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter15_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter16_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter17_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter18_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter19_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter20_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter21_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter22_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter23_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter24_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter25_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter26_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter27_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter28_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter29_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter30_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter31_minver_a_addr_6_reg_1460;
reg   [3:0] ap_pipeline_reg_pp2_iter32_minver_a_addr_6_reg_1460;
wire   [8:0] i_9_fu_1033_p2;
reg   [8:0] i_9_reg_1469;
wire   [0:0] ap_CS_fsm_state56;
wire   [0:0] tmp_16_fu_1039_p2;
reg   [0:0] tmp_16_reg_1474;
wire   [0:0] exitcond3_fu_1028_p2;
wire   [4:0] tmp_77_fu_1061_p2;
reg   [4:0] tmp_77_reg_1478;
reg   [3:0] minver_a_addr_8_reg_1483;
wire   [63:0] w_3_to_int_fu_1077_p1;
reg   [63:0] w_3_to_int_reg_1489;
wire   [0:0] ap_CS_fsm_state58;
wire   [0:0] tmp_64_fu_1113_p2;
reg   [0:0] tmp_64_reg_1494;
wire   [8:0] j_5_fu_1128_p2;
reg   [8:0] j_5_reg_1501;
wire   [0:0] ap_CS_fsm_state59;
wire   [0:0] tmp_21_fu_1134_p2;
reg   [0:0] tmp_21_reg_1506;
wire   [0:0] exitcond2_fu_1123_p2;
reg   [3:0] minver_a_addr_10_reg_1515;
wire   [63:0] tmp_19_neg_fu_1164_p2;
reg   [63:0] tmp_19_neg_reg_1521;
wire   [63:0] grp_fu_387_p2;
reg   [63:0] tmp_23_reg_1526;
wire   [63:0] grp_fu_383_p2;
reg   [63:0] tmp_24_reg_1531;
wire   [0:0] ap_CS_fsm_state72;
wire   [63:0] tmp_19_fu_1169_p1;
wire   [0:0] ap_CS_fsm_state74;
reg   [63:0] tmp_20_reg_1541;
wire   [0:0] ap_CS_fsm_state104;
wire   [8:0] i_7_fu_1182_p2;
reg   [8:0] i_7_reg_1549;
wire   [0:0] ap_CS_fsm_state137;
wire   [4:0] tmp_69_fu_1193_p1;
reg   [4:0] tmp_69_reg_1554;
wire   [0:0] exitcond1_fu_1177_p2;
reg   [8:0] work_addr_1_reg_1559;
reg   [3:0] minver_a_addr_2_reg_1568;
wire   [0:0] tmp_10_fu_1197_p2;
reg   [8:0] work_addr_4_reg_1573;
reg   [3:0] minver_a_addr_3_reg_1579;
wire   [8:0] j_4_fu_1262_p2;
reg   [8:0] j_4_reg_1587;
wire   [0:0] ap_CS_fsm_state142;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] ap_CS_fsm_state15;
reg    ap_enable_reg_pp1_iter1;
wire   [0:0] ap_CS_fsm_state20;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter19;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter22;
reg    ap_enable_reg_pp2_iter23;
reg    ap_enable_reg_pp2_iter24;
reg    ap_enable_reg_pp2_iter25;
reg    ap_enable_reg_pp2_iter26;
reg    ap_enable_reg_pp2_iter27;
reg    ap_enable_reg_pp2_iter28;
reg    ap_enable_reg_pp2_iter29;
reg    ap_enable_reg_pp2_iter30;
reg    ap_enable_reg_pp2_iter31;
reg    ap_enable_reg_pp2_iter33;
reg   [8:0] work_address0;
reg    work_ce0;
reg    work_we0;
reg   [8:0] work_d0;
reg   [8:0] work_address1;
reg    work_ce1;
reg    work_we1;
reg   [8:0] work_d1;
reg   [8:0] i_reg_253;
wire   [0:0] exitcond6_fu_530_p2;
wire   [0:0] or_cond7_fu_520_p2;
reg   [8:0] i_5_reg_265;
wire   [0:0] ap_CS_fsm_state136;
reg   [31:0] r_1_phi_fu_280_p4;
reg   [63:0] wmax_phi_fu_291_p4;
reg   [8:0] j_phi_fu_303_p4;
reg   [8:0] i_3_reg_321;
wire   [0:0] ap_CS_fsm_state105;
wire   [0:0] ap_CS_fsm_state55;
reg   [8:0] j_1_reg_332;
wire   [0:0] ap_CS_fsm_state73;
reg   [8:0] i_4_reg_343;
reg   [8:0] j_2_reg_355;
wire   [0:0] ap_CS_fsm_state141;
wire   [0:0] ap_CS_fsm_state144;
reg   [11:0] p_0_reg_366;
wire   [63:0] tmp_1_fu_541_p1;
wire   [63:0] p_shl_fu_582_p1;
wire  signed [63:0] tmp_66_cast_fu_637_p1;
wire  signed [63:0] tmp_69_cast_fu_837_p1;
wire  signed [63:0] tmp_s_fu_902_p1;
wire  signed [63:0] tmp_73_cast_fu_980_p1;
wire  signed [63:0] tmp_74_cast_fu_990_p1;
wire  signed [63:0] tmp_75_cast_fu_1019_p1;
wire  signed [63:0] tmp_78_cast_fu_1072_p1;
wire  signed [63:0] tmp_79_cast_fu_1149_p1;
wire  signed [63:0] tmp_80_cast_fu_1159_p1;
wire   [63:0] tmp_7_fu_1188_p1;
wire  signed [63:0] tmp_72_cast_fu_1235_p1;
wire   [63:0] tmp_11_fu_1203_p1;
wire   [63:0] p_shl5_fu_1248_p1;
reg   [31:0] r_fu_102;
wire   [31:0] r_2_fu_798_p3;
wire   [0:0] ap_CS_fsm_state138;
reg   [31:0] minver_a_Addr_A_orig;
reg   [31:0] minver_a_Addr_B_orig;
wire   [0:0] ap_CS_fsm_state65;
wire   [0:0] ap_CS_fsm_state67;
wire   [0:0] ap_CS_fsm_state61;
reg   [63:0] grp_fu_391_p0;
reg   [63:0] grp_fu_396_p0;
reg   [63:0] grp_fu_396_p1;
wire   [30:0] tmp_2_fu_446_p4;
wire   [63:0] eps_to_int_fu_468_p1;
wire   [10:0] tmp_fu_471_p4;
wire   [51:0] tmp_6_fu_481_p1;
wire   [0:0] notrhs1_fu_491_p2;
wire   [0:0] notlhs1_fu_485_p2;
wire   [0:0] tmp_13_fu_503_p2;
wire   [0:0] icmp_fu_456_p2;
wire   [0:0] tmp_17_fu_508_p2;
wire   [0:0] tmp2_fu_514_p2;
wire   [0:0] notrhs_fu_462_p2;
wire   [31:0] i_cast_fu_526_p1;
wire   [10:0] tmp_22_fu_574_p3;
wire   [2:0] tmp_30_fu_587_p1;
wire   [4:0] p_shl_cast_fu_591_p3;
wire   [2:0] tmp_38_fu_614_p1;
wire   [4:0] p_shl2_cast_fu_618_p3;
wire   [4:0] tmp_33_fu_610_p1;
wire   [4:0] tmp_40_fu_626_p2;
wire   [4:0] tmp_47_fu_632_p2;
wire   [63:0] n_assign_to_int_fu_648_p1;
wire   [10:0] tmp_32_fu_652_p4;
wire   [51:0] tmp_52_fu_662_p1;
wire   [0:0] notrhs2_fu_672_p2;
wire   [0:0] notlhs2_fu_666_p2;
wire   [0:0] tmp_34_fu_678_p2;
wire   [63:0] f_neg_i_fu_690_p2;
wire   [0:0] tmp_36_fu_684_p2;
wire   [63:0] f_fu_696_p1;
wire   [63:0] w_4_to_int_fu_708_p1;
wire   [63:0] wmax_to_int_fu_725_p1;
wire   [10:0] tmp_37_fu_711_p4;
wire   [51:0] tmp_53_fu_721_p1;
wire   [0:0] notrhs3_fu_749_p2;
wire   [0:0] notlhs3_fu_743_p2;
wire   [10:0] tmp_39_fu_729_p4;
wire   [51:0] tmp_54_fu_739_p1;
wire   [0:0] notrhs4_fu_767_p2;
wire   [0:0] notlhs4_fu_761_p2;
wire   [0:0] tmp_41_fu_755_p2;
wire   [0:0] tmp_42_fu_773_p2;
wire   [0:0] tmp_43_fu_779_p2;
wire   [0:0] tmp_44_fu_402_p2;
wire   [2:0] tmp_61_fu_814_p1;
wire   [4:0] p_shl3_cast_fu_818_p3;
wire   [4:0] tmp_56_fu_810_p1;
wire   [4:0] tmp_66_fu_832_p2;
wire   [63:0] pivot_to_int_fu_842_p1;
wire   [10:0] tmp_46_fu_846_p4;
wire   [51:0] tmp_67_fu_856_p1;
wire   [0:0] notrhs5_fu_866_p2;
wire   [0:0] notlhs5_fu_860_p2;
wire   [0:0] tmp_48_fu_872_p2;
wire   [63:0] f_neg_i1_fu_884_p2;
wire   [0:0] tmp_50_fu_878_p2;
wire   [63:0] f_1_fu_890_p1;
wire   [63:0] api_to_int_fu_906_p1;
wire   [10:0] tmp_51_fu_909_p4;
wire   [51:0] tmp_68_fu_919_p1;
wire   [0:0] notrhs6_fu_929_p2;
wire   [0:0] notlhs6_fu_923_p2;
wire   [0:0] tmp_55_fu_935_p2;
wire   [0:0] tmp_57_fu_941_p2;
wire   [31:0] j_cast_fu_956_p1;
wire   [4:0] tmp_82_fu_971_p1;
wire   [4:0] tmp_73_fu_975_p2;
wire   [4:0] tmp_74_fu_985_p2;
wire   [31:0] i_2_cast_fu_995_p1;
wire   [4:0] tmp_83_fu_1010_p1;
wire   [4:0] tmp_75_fu_1014_p2;
wire   [31:0] i_3_cast_fu_1024_p1;
wire   [2:0] tmp_85_fu_1049_p1;
wire   [4:0] p_shl4_cast_fu_1053_p3;
wire   [4:0] tmp_84_fu_1045_p1;
wire   [4:0] tmp_78_fu_1067_p2;
wire   [10:0] tmp_60_fu_1081_p4;
wire   [51:0] tmp_86_fu_1091_p1;
wire   [0:0] notrhs8_fu_1101_p2;
wire   [0:0] notlhs8_fu_1095_p2;
wire   [0:0] tmp_62_fu_1107_p2;
wire   [31:0] j_1_cast_fu_1119_p1;
wire   [4:0] tmp_87_fu_1140_p1;
wire   [4:0] tmp_79_fu_1144_p2;
wire   [4:0] tmp_80_fu_1154_p2;
wire   [31:0] i_4_cast_fu_1173_p1;
wire   [2:0] tmp_81_fu_1212_p1;
wire   [4:0] p_shl5_cast_fu_1216_p3;
wire   [4:0] tmp_70_fu_1208_p1;
wire   [4:0] tmp_71_fu_1224_p2;
wire   [4:0] tmp_72_fu_1230_p2;
wire   [10:0] tmp_76_fu_1240_p3;
wire   [31:0] j_2_cast_fu_1253_p1;
wire   [0:0] ap_CS_fsm_state146;
reg   [4:0] grp_fu_396_opcode;
wire   [0:0] exitcond_fu_1257_p2;
reg   [106:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 107'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp2_iter25 = 1'b0;
#0 ap_enable_reg_pp2_iter26 = 1'b0;
#0 ap_enable_reg_pp2_iter27 = 1'b0;
#0 ap_enable_reg_pp2_iter28 = 1'b0;
#0 ap_enable_reg_pp2_iter29 = 1'b0;
#0 ap_enable_reg_pp2_iter30 = 1'b0;
#0 ap_enable_reg_pp2_iter31 = 1'b0;
#0 ap_enable_reg_pp2_iter33 = 1'b0;
end

minver_minver_hwabkb #(
    .DataWidth( 9 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
work_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(work_address0),
    .ce0(work_ce0),
    .we0(work_we0),
    .d0(work_d0),
    .q0(work_q0),
    .address1(work_address1),
    .ce1(work_ce1),
    .we1(work_we1),
    .d1(work_d1),
    .q1(work_q1)
);

minver_minver_hwacud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
minver_minver_hwacud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_439),
    .din1(tmp_23_reg_1526),
    .ce(1'b1),
    .dout(grp_fu_383_p2)
);

minver_minver_hwadEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
minver_minver_hwadEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_424),
    .din1(reg_439),
    .ce(1'b1),
    .dout(grp_fu_387_p2)
);

minver_minver_hwaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
minver_minver_hwaeOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_391_p0),
    .din1(reg_410),
    .ce(1'b1),
    .dout(grp_fu_391_p2)
);

minver_minver_hwafYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
minver_minver_hwafYi_U4(
    .din0(grp_fu_396_p0),
    .din1(grp_fu_396_p1),
    .opcode(grp_fu_396_opcode),
    .dout(grp_fu_396_p2)
);

minver_minver_hwafYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
minver_minver_hwafYi_U5(
    .din0(w_4_reg_1372),
    .din1(wmax_phi_fu_291_p4),
    .opcode(ap_const_lv5_2),
    .dout(tmp_44_fu_402_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == tmp_5_fu_605_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == tmp_3_fu_555_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == tmp_5_fu_605_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == tmp_3_fu_555_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == tmp_5_fu_605_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~(1'b0 == exitcond5_fu_960_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == exitcond5_reg_1430))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_pp1_stage1) & ~(1'b0 == exitcond5_reg_1430)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(1'b0 == exitcond4_fu_999_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == exitcond4_fu_999_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_pp2_stage0) & ~(1'b0 == exitcond4_fu_999_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter25 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter26 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter27 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter28 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter29 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter30 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter31 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter31 <= ap_enable_reg_pp2_iter30;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter32 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter32 <= ap_enable_reg_pp2_iter31;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter33 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter33 <= ap_enable_reg_pp2_iter32;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_fu_999_p2))) begin
        i_2_reg_310 <= i_8_fu_1004_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_2_reg_310 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        i_3_reg_321 <= ap_const_lv9_0;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        i_3_reg_321 <= i_9_reg_1469;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == tmp_3_fu_555_p2))) begin
        i_4_reg_343 <= ap_const_lv9_0;
    end else if (((1'b1 == ap_CS_fsm_state139) & ~(1'b0 == tmp_10_fu_1197_p2))) begin
        i_4_reg_343 <= i_7_reg_1549;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond6_fu_530_p2))) begin
        i_5_reg_265 <= ap_const_lv9_0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        i_5_reg_265 <= k_reg_1329;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == or_cond7_fu_520_p2))) begin
        i_reg_253 <= ap_const_lv9_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond6_fu_530_p2))) begin
        i_reg_253 <= i_1_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (1'b0 == tmp_64_fu_1113_p2))) begin
        j_1_reg_332 <= ap_const_lv9_0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        j_1_reg_332 <= j_5_reg_1501;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        j_2_reg_355 <= j_4_reg_1587;
    end else if ((1'b1 == ap_CS_fsm_state141)) begin
        j_2_reg_355 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond5_reg_1430) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        j_reg_299 <= j_3_reg_1434;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_reg_299 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == tmp_59_fu_946_p2))) begin
                p_0_reg_366[1] <= 1'b0;
        p_0_reg_366[2] <= 1'b0;
        p_0_reg_366[5] <= 1'b0;
        p_0_reg_366[6] <= 1'b0;
        p_0_reg_366[7] <= 1'b0;
        p_0_reg_366[8] <= 1'b0;
        p_0_reg_366[9] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == or_cond7_fu_520_p2))) begin
                p_0_reg_366[1] <= 1'b1;
        p_0_reg_366[2] <= 1'b1;
        p_0_reg_366[5] <= 1'b1;
        p_0_reg_366[6] <= 1'b1;
        p_0_reg_366[7] <= 1'b1;
        p_0_reg_366[8] <= 1'b1;
        p_0_reg_366[9] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == tmp_3_fu_555_p2))) begin
        r_1_reg_277 <= i_5_cast_fu_551_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(tmp_5_reg_1358 == 1'b0))) begin
        r_1_reg_277 <= i_6_reg_1367;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & ~(1'b0 == ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358))) begin
        r_fu_102 <= r_2_fu_798_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond6_fu_530_p2))) begin
        r_fu_102 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        reg_417 <= work_q1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state140))) begin
        reg_417 <= work_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond4_reg_1451)) | (1'b1 == ap_CS_fsm_state57))) begin
        reg_424 <= minver_a_Dout_B;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1430))) begin
        reg_424 <= minver_a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        reg_439 <= minver_a_Dout_A;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        reg_439 <= minver_a_Dout_B;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == tmp_3_fu_555_p2))) begin
        wmax_reg_287 <= ap_const_lv64_0;
    end else if (((1'b1 == ap_enable_reg_pp0_iter4) & ~(1'b0 == ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358))) begin
        wmax_reg_287 <= wmax_1_reg_1384;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_r_1_reg_277 <= r_1_reg_277;
        ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358 <= tmp_5_reg_1358;
        tmp_5_reg_1358 <= tmp_5_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_pipeline_reg_pp0_iter2_r_1_reg_277 <= ap_pipeline_reg_pp0_iter1_r_1_reg_277;
        ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358 <= ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358;
        ap_pipeline_reg_pp0_iter3_r_1_reg_277 <= ap_pipeline_reg_pp0_iter2_r_1_reg_277;
        ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358 <= ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358;
        ap_pipeline_reg_pp2_iter10_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter9_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter10_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter9_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter11_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter10_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter11_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter10_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter12_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter11_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter12_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter11_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter13_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter12_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter13_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter12_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter14_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter13_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter14_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter13_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter15_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter14_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter15_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter14_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter16_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter15_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter16_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter15_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter17_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter16_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter17_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter16_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter18_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter17_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter18_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter17_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter19_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter18_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter19_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter18_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter20_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter19_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter20_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter19_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter21_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter20_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter21_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter20_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter22_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter21_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter22_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter21_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter23_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter22_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter23_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter22_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter24_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter23_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter24_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter23_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter25_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter24_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter25_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter24_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter26_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter25_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter26_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter25_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter27_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter26_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter27_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter26_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter28_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter27_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter28_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter27_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter29_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter28_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter29_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter28_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter2_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter1_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter2_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter1_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter30_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter29_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter30_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter29_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter31_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter30_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter31_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter30_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter32_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter31_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter32_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter31_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter3_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter2_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter3_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter2_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter4_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter3_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter4_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter3_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter5_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter4_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter5_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter4_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter6_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter5_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter6_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter5_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter7_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter6_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter7_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter6_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter8_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter7_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter8_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter7_minver_a_addr_6_reg_1460;
        ap_pipeline_reg_pp2_iter9_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter8_exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter9_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter8_minver_a_addr_6_reg_1460;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp1_stage0)) begin
        ap_pipeline_reg_pp1_iter1_exitcond5_reg_1430 <= exitcond5_reg_1430;
        ap_pipeline_reg_pp1_iter1_minver_a_addr_5_reg_1445 <= minver_a_addr_5_reg_1445;
        exitcond5_reg_1430 <= exitcond5_fu_960_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp2_stage0)) begin
        ap_pipeline_reg_pp2_iter1_exitcond4_reg_1451 <= exitcond4_reg_1451;
        ap_pipeline_reg_pp2_iter1_minver_a_addr_6_reg_1460 <= minver_a_addr_6_reg_1460;
        exitcond4_reg_1451 <= exitcond4_fu_999_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        api_reg_1405 <= api_fu_894_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_5_cast_reg_1319[8 : 0] <= i_5_cast_fu_551_p1[8 : 0];
        k_reg_1329 <= k_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == tmp_5_fu_605_p2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        i_6_reg_1367 <= i_6_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        i_7_reg_1549 <= i_7_fu_1182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_9_reg_1469 <= i_9_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_3_reg_1434 <= j_3_fu_965_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        j_4_reg_1587 <= j_4_fu_1262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        j_5_reg_1501 <= j_5_fu_1128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & (1'b0 == exitcond2_fu_1123_p2) & (1'b0 == tmp_21_fu_1134_p2))) begin
        minver_a_addr_10_reg_1515 <= tmp_80_cast_fu_1159_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state139) & (1'b0 == tmp_10_fu_1197_p2))) begin
        minver_a_addr_2_reg_1568 <= tmp_72_cast_fu_1235_p1;
        work_addr_4_reg_1573 <= tmp_11_fu_1203_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        minver_a_addr_3_reg_1579[3 : 2] <= p_shl5_fu_1248_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == exitcond5_fu_960_p2))) begin
        minver_a_addr_4_reg_1439 <= tmp_73_cast_fu_980_p1;
        minver_a_addr_5_reg_1445 <= tmp_74_cast_fu_990_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == exitcond4_fu_999_p2))) begin
        minver_a_addr_6_reg_1460 <= tmp_75_cast_fu_1019_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == tmp_3_fu_555_p2))) begin
        minver_a_addr_7_reg_1353[3 : 2] <= p_shl_fu_582_p1[3 : 2];
        tmp_18_reg_1339 <= tmp_18_fu_570_p1;
        tmp_31_reg_1346 <= tmp_31_fu_599_p2;
        tmp_4_reg_1334[8 : 0] <= tmp_4_fu_566_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (1'b0 == exitcond3_fu_1028_p2) & (1'b0 == tmp_16_fu_1039_p2))) begin
        minver_a_addr_8_reg_1483 <= tmp_78_cast_fu_1072_p1;
        tmp_77_reg_1478 <= tmp_77_fu_1061_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_load_reg_1389 <= r_fu_102;
        tmp_65_reg_1395 <= tmp_65_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(tmp_5_reg_1358 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state143))) begin
        reg_410 <= minver_a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp2_iter32) & (1'b0 == ap_pipeline_reg_pp2_iter31_exitcond4_reg_1451)) | (1'b1 == ap_CS_fsm_state135))) begin
        reg_433 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_12_reg_1278 <= grp_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (1'b0 == exitcond3_fu_1028_p2))) begin
        tmp_16_reg_1474 <= tmp_16_fu_1039_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & ~(1'b0 == exitcond2_fu_1123_p2))) begin
        tmp_19_neg_reg_1521 <= tmp_19_neg_fu_1164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        tmp_20_reg_1541 <= grp_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & (1'b0 == exitcond2_fu_1123_p2))) begin
        tmp_21_reg_1506 <= tmp_21_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        tmp_23_reg_1526 <= grp_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        tmp_24_reg_1531 <= grp_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b0 == ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358)) begin
        tmp_45_reg_1379 <= tmp_45_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        tmp_64_reg_1494 <= tmp_64_fu_1113_p2;
        w_3_to_int_reg_1489 <= w_3_to_int_fu_1077_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state137) & (1'b0 == exitcond1_fu_1177_p2))) begin
        tmp_69_reg_1554 <= tmp_69_fu_1193_p1;
        work_addr_1_reg_1559 <= tmp_7_fu_1188_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_8_reg_1296 <= tmp_8_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358)) begin
        w_4_reg_1372 <= w_4_fu_700_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(1'b0 == ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        wmax_1_reg_1384 <= wmax_1_fu_791_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == tmp_59_fu_946_p2) & (1'b0 == tmp_9_fu_952_p2))) begin
        work_addr_2_reg_1418 <= tmp_4_reg_1334;
        work_addr_3_reg_1424 <= tmp_s_fu_902_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_391_p0 = tmp_19_fu_1169_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_391_p0 = ap_const_lv64_3FF0000000000000;
    end else if ((1'b1 == ap_enable_reg_pp2_iter2)) begin
        grp_fu_391_p0 = reg_424;
    end else begin
        grp_fu_391_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_396_opcode = ap_const_lv5_1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        grp_fu_396_opcode = ap_const_lv5_3;
    end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_396_opcode = ap_const_lv5_5;
    end else begin
        grp_fu_396_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_396_p0 = reg_424;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_396_p0 = api_reg_1405;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_enable_reg_pp0_iter2))) begin
        grp_fu_396_p0 = reg_410;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        grp_fu_396_p0 = eps;
    end else begin
        grp_fu_396_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_396_p1 = eps;
    end else if (((ap_CS_fsm_state1 == 1'b1) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_enable_reg_pp0_iter2))) begin
        grp_fu_396_p1 = ap_const_lv64_0;
    end else begin
        grp_fu_396_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond5_reg_1430) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        j_phi_fu_303_p4 = j_3_reg_1434;
    end else begin
        j_phi_fu_303_p4 = j_reg_299;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state142))) begin
        minver_a_Addr_A_orig = minver_a_addr_2_reg_1568;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        minver_a_Addr_A_orig = minver_a_addr_8_reg_1483;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        minver_a_Addr_A_orig = minver_a_addr_10_reg_1515;
    end else if ((1'b1 == ap_enable_reg_pp2_iter33)) begin
        minver_a_Addr_A_orig = ap_pipeline_reg_pp2_iter32_minver_a_addr_6_reg_1460;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        minver_a_Addr_A_orig = ap_pipeline_reg_pp1_iter1_minver_a_addr_5_reg_1445;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        minver_a_Addr_A_orig = tmp_73_cast_fu_980_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        minver_a_Addr_A_orig = tmp_69_cast_fu_837_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        minver_a_Addr_A_orig = tmp_66_cast_fu_637_p1;
    end else begin
        minver_a_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state144))) begin
        minver_a_Addr_B_orig = minver_a_addr_3_reg_1579;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        minver_a_Addr_B_orig = minver_a_addr_7_reg_1353;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        minver_a_Addr_B_orig = minver_a_addr_10_reg_1515;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        minver_a_Addr_B_orig = tmp_79_cast_fu_1149_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        minver_a_Addr_B_orig = tmp_78_cast_fu_1072_p1;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        minver_a_Addr_B_orig = tmp_75_cast_fu_1019_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        minver_a_Addr_B_orig = minver_a_addr_4_reg_1439;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        minver_a_Addr_B_orig = tmp_74_cast_fu_990_p1;
    end else begin
        minver_a_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        minver_a_Din_A = minver_a_Dout_B;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        minver_a_Din_A = tmp_20_reg_1541;
    end else if ((1'b1 == ap_enable_reg_pp2_iter33)) begin
        minver_a_Din_A = reg_433;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        minver_a_Din_A = reg_424;
    end else begin
        minver_a_Din_A = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        minver_a_Din_B = reg_410;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        minver_a_Din_B = reg_433;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        minver_a_Din_B = tmp_24_reg_1531;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        minver_a_Din_B = minver_a_Dout_B;
    end else begin
        minver_a_Din_B = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state105) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter1)) | (1'b1 == ap_enable_reg_pp2_iter33) | (1'b1 == ap_CS_fsm_state65))) begin
        minver_a_EN_A = 1'b1;
    end else begin
        minver_a_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter0)) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state144))) begin
        minver_a_EN_B = 1'b1;
    end else begin
        minver_a_EN_B = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_pipeline_reg_pp1_iter1_exitcond5_reg_1430)) | ((1'b1 == ap_enable_reg_pp2_iter33) & (1'b0 == ap_pipeline_reg_pp2_iter32_exitcond4_reg_1451)) | ((1'b1 == ap_CS_fsm_state105) & (1'b0 == tmp_16_reg_1474) & (1'b0 == tmp_64_reg_1494)))) begin
        minver_a_WEN_A = ap_const_lv8_FF;
    end else begin
        minver_a_WEN_A = ap_const_lv8_0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1430)) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state144) | ((1'b1 == ap_CS_fsm_state73) & (1'b0 == tmp_21_reg_1506)))) begin
        minver_a_WEN_B = ap_const_lv8_FF;
    end else begin
        minver_a_WEN_B = ap_const_lv8_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(tmp_5_reg_1358 == 1'b0))) begin
        r_1_phi_fu_280_p4 = i_6_reg_1367;
    end else begin
        r_1_phi_fu_280_p4 = r_1_reg_277;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & ~(1'b0 == ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358))) begin
        wmax_phi_fu_291_p4 = wmax_1_reg_1384;
    end else begin
        wmax_phi_fu_291_p4 = wmax_reg_287;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        work_address0 = work_addr_1_reg_1559;
    end else if ((1'b1 == ap_CS_fsm_state139)) begin
        work_address0 = tmp_11_fu_1203_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        work_address0 = work_addr_3_reg_1424;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        work_address0 = tmp_4_reg_1334;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        work_address0 = tmp_1_fu_541_p1;
    end else begin
        work_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        work_address1 = work_addr_4_reg_1573;
    end else if ((1'b1 == ap_CS_fsm_state138)) begin
        work_address1 = work_addr_1_reg_1559;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        work_address1 = work_addr_2_reg_1418;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        work_address1 = tmp_s_fu_902_p1;
    end else begin
        work_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state141))) begin
        work_ce0 = 1'b1;
    end else begin
        work_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state138))) begin
        work_ce1 = 1'b1;
    end else begin
        work_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state141))) begin
        work_d0 = reg_417;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        work_d0 = i_reg_253;
    end else begin
        work_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        work_d1 = reg_417;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        work_d1 = work_q1;
    end else begin
        work_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond6_fu_530_p2)) | (1'b1 == ap_CS_fsm_state141))) begin
        work_we0 = 1'b1;
    end else begin
        work_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state140))) begin
        work_we1 = 1'b1;
    end else begin
        work_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == or_cond7_fu_520_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond6_fu_530_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((1'b0 == tmp_3_fu_555_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter4) & ~(1'b1 == ap_enable_reg_pp0_iter3)) & ~((1'b0 == tmp_5_fu_605_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == tmp_5_fu_605_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (~(1'b0 == tmp_59_fu_946_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else if (((1'b0 == tmp_59_fu_946_p2) & ~(1'b0 == tmp_9_fu_952_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond5_fu_960_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if (~((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b1 == ap_enable_reg_pp1_iter1) & ~(1'b1 == ap_enable_reg_pp1_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp2_iter33) & ~(1'b1 == ap_enable_reg_pp2_iter32)) & ~((1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond4_fu_999_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond4_fu_999_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b0 == exitcond3_fu_1028_p2) & ~(1'b0 == tmp_16_fu_1039_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end else if (((1'b0 == exitcond3_fu_1028_p2) & (1'b0 == tmp_16_fu_1039_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if ((1'b0 == tmp_64_fu_1113_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b0 == exitcond2_fu_1123_p2) & ~(1'b0 == tmp_21_fu_1134_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else if (((1'b0 == exitcond2_fu_1123_p2) & (1'b0 == tmp_21_fu_1134_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state137 : begin
            if (~(1'b0 == exitcond1_fu_1177_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            if (~(1'b0 == tmp_10_fu_1197_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            if ((1'b0 == exitcond_fu_1257_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state104 = ap_CS_fsm[ap_const_lv32_40];

assign ap_CS_fsm_state105 = ap_CS_fsm[ap_const_lv32_41];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state135 = ap_CS_fsm[ap_const_lv32_5F];

assign ap_CS_fsm_state136 = ap_CS_fsm[ap_const_lv32_60];

assign ap_CS_fsm_state137 = ap_CS_fsm[ap_const_lv32_61];

assign ap_CS_fsm_state138 = ap_CS_fsm[ap_const_lv32_62];

assign ap_CS_fsm_state139 = ap_CS_fsm[ap_const_lv32_63];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state140 = ap_CS_fsm[ap_const_lv32_64];

assign ap_CS_fsm_state141 = ap_CS_fsm[ap_const_lv32_65];

assign ap_CS_fsm_state142 = ap_CS_fsm[ap_const_lv32_66];

assign ap_CS_fsm_state143 = ap_CS_fsm[ap_const_lv32_67];

assign ap_CS_fsm_state144 = ap_CS_fsm[ap_const_lv32_68];

assign ap_CS_fsm_state146 = ap_CS_fsm[ap_const_lv32_6A];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state58 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state59 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state61 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state65 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state66 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state67 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state72 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state73 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state74 = ap_CS_fsm[ap_const_lv32_22];

assign ap_return = $signed(p_0_reg_366);

assign api_fu_894_p3 = ((tmp_50_fu_878_p2[0:0] === 1'b1) ? reg_410 : f_1_fu_890_p1);

assign api_to_int_fu_906_p1 = api_reg_1405;

assign eps_to_int_fu_468_p1 = eps;

assign exitcond1_fu_1177_p2 = ((i_4_cast_fu_1173_p1 == side) ? 1'b1 : 1'b0);

assign exitcond2_fu_1123_p2 = ((j_1_cast_fu_1119_p1 == side) ? 1'b1 : 1'b0);

assign exitcond3_fu_1028_p2 = ((i_3_cast_fu_1024_p1 == side) ? 1'b1 : 1'b0);

assign exitcond4_fu_999_p2 = ((i_2_cast_fu_995_p1 == side) ? 1'b1 : 1'b0);

assign exitcond5_fu_960_p2 = ((j_cast_fu_956_p1 == side) ? 1'b1 : 1'b0);

assign exitcond6_fu_530_p2 = ((i_cast_fu_526_p1 == side) ? 1'b1 : 1'b0);

assign exitcond_fu_1257_p2 = ((j_2_cast_fu_1253_p1 == side) ? 1'b1 : 1'b0);

assign f_1_fu_890_p1 = f_neg_i1_fu_884_p2;

assign f_fu_696_p1 = f_neg_i_fu_690_p2;

assign f_neg_i1_fu_884_p2 = (pivot_to_int_fu_842_p1 ^ ap_const_lv64_8000000000000000);

assign f_neg_i_fu_690_p2 = (n_assign_to_int_fu_648_p1 ^ ap_const_lv64_8000000000000000);

assign i_1_fu_535_p2 = (i_reg_253 + ap_const_lv9_1);

assign i_2_cast_fu_995_p1 = i_2_reg_310;

assign i_3_cast_fu_1024_p1 = i_3_reg_321;

assign i_4_cast_fu_1173_p1 = i_4_reg_343;

assign i_5_cast_fu_551_p1 = i_5_reg_265;

assign i_6_fu_642_p2 = (ap_const_lv32_1 + r_1_phi_fu_280_p4);

assign i_7_fu_1182_p2 = (i_4_reg_343 + ap_const_lv9_1);

assign i_8_fu_1004_p2 = (i_2_reg_310 + ap_const_lv9_1);

assign i_9_fu_1033_p2 = (i_3_reg_321 + ap_const_lv9_1);

assign i_cast_fu_526_p1 = i_reg_253;

assign icmp_fu_456_p2 = (($signed(tmp_2_fu_446_p4) > $signed(31'b0000000000000000000000000000000)) ? 1'b1 : 1'b0);

assign j_1_cast_fu_1119_p1 = j_1_reg_332;

assign j_2_cast_fu_1253_p1 = j_2_reg_355;

assign j_3_fu_965_p2 = (j_phi_fu_303_p4 + ap_const_lv9_1);

assign j_4_fu_1262_p2 = (j_2_reg_355 + ap_const_lv9_1);

assign j_5_fu_1128_p2 = (j_1_reg_332 + ap_const_lv9_1);

assign j_cast_fu_956_p1 = j_phi_fu_303_p4;

assign k_fu_560_p2 = (i_5_reg_265 + ap_const_lv9_1);

assign minver_a_Addr_A = minver_a_Addr_A_orig << ap_const_lv32_3;

assign minver_a_Addr_B = minver_a_Addr_B_orig << ap_const_lv32_3;

assign minver_a_Clk_A = ap_clk;

assign minver_a_Clk_B = ap_clk;

assign minver_a_Rst_A = ap_rst;

assign minver_a_Rst_B = ap_rst;

assign n_assign_to_int_fu_648_p1 = reg_410;

assign notlhs1_fu_485_p2 = ((tmp_fu_471_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs2_fu_666_p2 = ((tmp_32_fu_652_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs3_fu_743_p2 = ((tmp_37_fu_711_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs4_fu_761_p2 = ((tmp_39_fu_729_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs5_fu_860_p2 = ((tmp_46_fu_846_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs6_fu_923_p2 = ((tmp_51_fu_909_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs8_fu_1095_p2 = ((tmp_60_fu_1081_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notrhs1_fu_491_p2 = ((tmp_6_fu_481_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs2_fu_672_p2 = ((tmp_52_fu_662_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs3_fu_749_p2 = ((tmp_53_fu_721_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs4_fu_767_p2 = ((tmp_54_fu_739_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs5_fu_866_p2 = ((tmp_67_fu_856_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs6_fu_929_p2 = ((tmp_68_fu_919_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs8_fu_1101_p2 = ((tmp_86_fu_1091_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs_fu_462_p2 = (($signed(side) < $signed(32'b111110101)) ? 1'b1 : 1'b0);

assign or_cond7_fu_520_p2 = (tmp2_fu_514_p2 & notrhs_fu_462_p2);

assign p_shl2_cast_fu_618_p3 = {{tmp_38_fu_614_p1}, {ap_const_lv2_0}};

assign p_shl3_cast_fu_818_p3 = {{tmp_61_fu_814_p1}, {ap_const_lv2_0}};

assign p_shl4_cast_fu_1053_p3 = {{tmp_85_fu_1049_p1}, {ap_const_lv2_0}};

assign p_shl5_cast_fu_1216_p3 = {{tmp_81_fu_1212_p1}, {ap_const_lv2_0}};

assign p_shl5_fu_1248_p1 = tmp_76_fu_1240_p3;

assign p_shl_cast_fu_591_p3 = {{tmp_30_fu_587_p1}, {ap_const_lv2_0}};

assign p_shl_fu_582_p1 = tmp_22_fu_574_p3;

assign pivot_to_int_fu_842_p1 = reg_410;

assign r_2_fu_798_p3 = ((tmp_45_reg_1379[0:0] === 1'b1) ? ap_pipeline_reg_pp0_iter3_r_1_reg_277 : r_fu_102);

assign tmp2_fu_514_p2 = (icmp_fu_456_p2 & tmp_17_fu_508_p2);

assign tmp_10_fu_1197_p2 = ((work_q1 == i_4_reg_343) ? 1'b1 : 1'b0);

assign tmp_11_fu_1203_p1 = work_q1;

assign tmp_13_fu_503_p2 = (tmp_8_fu_497_p2 & tmp_12_reg_1278);

assign tmp_16_fu_1039_p2 = ((i_3_reg_321 == i_5_reg_265) ? 1'b1 : 1'b0);

assign tmp_17_fu_508_p2 = (tmp_13_fu_503_p2 ^ 1'b1);

assign tmp_18_fu_570_p1 = i_5_reg_265[4:0];

assign tmp_19_fu_1169_p1 = tmp_19_neg_reg_1521;

assign tmp_19_neg_fu_1164_p2 = (w_3_to_int_reg_1489 ^ ap_const_lv64_8000000000000000);

assign tmp_1_fu_541_p1 = i_reg_253;

assign tmp_21_fu_1134_p2 = ((j_1_reg_332 == i_5_reg_265) ? 1'b1 : 1'b0);

assign tmp_22_fu_574_p3 = {{i_5_reg_265}, {ap_const_lv2_0}};

assign tmp_2_fu_446_p4 = {{side[ap_const_lv32_1F : ap_const_lv32_1]}};

assign tmp_30_fu_587_p1 = i_5_reg_265[2:0];

assign tmp_31_fu_599_p2 = (p_shl_cast_fu_591_p3 - tmp_18_fu_570_p1);

assign tmp_32_fu_652_p4 = {{n_assign_to_int_fu_648_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_33_fu_610_p1 = r_1_phi_fu_280_p4[4:0];

assign tmp_34_fu_678_p2 = (notrhs2_fu_672_p2 | notlhs2_fu_666_p2);

assign tmp_36_fu_684_p2 = (tmp_34_fu_678_p2 & grp_fu_396_p2);

assign tmp_37_fu_711_p4 = {{w_4_to_int_fu_708_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_38_fu_614_p1 = r_1_phi_fu_280_p4[2:0];

assign tmp_39_fu_729_p4 = {{wmax_to_int_fu_725_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_3_fu_555_p2 = (($signed(i_5_cast_fu_551_p1) < $signed(side)) ? 1'b1 : 1'b0);

assign tmp_40_fu_626_p2 = (p_shl2_cast_fu_618_p3 - tmp_33_fu_610_p1);

assign tmp_41_fu_755_p2 = (notrhs3_fu_749_p2 | notlhs3_fu_743_p2);

assign tmp_42_fu_773_p2 = (notrhs4_fu_767_p2 | notlhs4_fu_761_p2);

assign tmp_43_fu_779_p2 = (tmp_41_fu_755_p2 & tmp_42_fu_773_p2);

assign tmp_45_fu_785_p2 = (tmp_43_fu_779_p2 & tmp_44_fu_402_p2);

assign tmp_46_fu_846_p4 = {{pivot_to_int_fu_842_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_47_fu_632_p2 = (tmp_18_reg_1339 + tmp_40_fu_626_p2);

assign tmp_48_fu_872_p2 = (notrhs5_fu_866_p2 | notlhs5_fu_860_p2);

assign tmp_4_fu_566_p1 = i_5_reg_265;

assign tmp_50_fu_878_p2 = (tmp_48_fu_872_p2 & grp_fu_396_p2);

assign tmp_51_fu_909_p4 = {{api_to_int_fu_906_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_52_fu_662_p1 = n_assign_to_int_fu_648_p1[51:0];

assign tmp_53_fu_721_p1 = w_4_to_int_fu_708_p1[51:0];

assign tmp_54_fu_739_p1 = wmax_to_int_fu_725_p1[51:0];

assign tmp_55_fu_935_p2 = (notrhs6_fu_929_p2 | notlhs6_fu_923_p2);

assign tmp_56_fu_810_p1 = r_fu_102[4:0];

assign tmp_57_fu_941_p2 = (tmp_55_fu_935_p2 & tmp_8_reg_1296);

assign tmp_59_fu_946_p2 = (tmp_57_fu_941_p2 & grp_fu_396_p2);

assign tmp_5_fu_605_p2 = (($signed(r_1_phi_fu_280_p4) < $signed(side)) ? 1'b1 : 1'b0);

assign tmp_60_fu_1081_p4 = {{w_3_to_int_fu_1077_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_61_fu_814_p1 = r_fu_102[2:0];

assign tmp_62_fu_1107_p2 = (notrhs8_fu_1101_p2 | notlhs8_fu_1095_p2);

assign tmp_64_fu_1113_p2 = (tmp_62_fu_1107_p2 & grp_fu_396_p2);

assign tmp_65_fu_826_p2 = (p_shl3_cast_fu_818_p3 - tmp_56_fu_810_p1);

assign tmp_66_cast_fu_637_p1 = $signed(tmp_47_fu_632_p2);

assign tmp_66_fu_832_p2 = (tmp_18_reg_1339 + tmp_65_fu_826_p2);

assign tmp_67_fu_856_p1 = pivot_to_int_fu_842_p1[51:0];

assign tmp_68_fu_919_p1 = api_to_int_fu_906_p1[51:0];

assign tmp_69_cast_fu_837_p1 = $signed(tmp_66_fu_832_p2);

assign tmp_69_fu_1193_p1 = i_4_reg_343[4:0];

assign tmp_6_fu_481_p1 = eps_to_int_fu_468_p1[51:0];

assign tmp_70_fu_1208_p1 = work_q1[4:0];

assign tmp_71_fu_1224_p2 = (p_shl5_cast_fu_1216_p3 - tmp_70_fu_1208_p1);

assign tmp_72_cast_fu_1235_p1 = $signed(tmp_72_fu_1230_p2);

assign tmp_72_fu_1230_p2 = (tmp_71_fu_1224_p2 + tmp_69_reg_1554);

assign tmp_73_cast_fu_980_p1 = $signed(tmp_73_fu_975_p2);

assign tmp_73_fu_975_p2 = (tmp_31_reg_1346 + tmp_82_fu_971_p1);

assign tmp_74_cast_fu_990_p1 = $signed(tmp_74_fu_985_p2);

assign tmp_74_fu_985_p2 = (tmp_65_reg_1395 + tmp_82_fu_971_p1);

assign tmp_75_cast_fu_1019_p1 = $signed(tmp_75_fu_1014_p2);

assign tmp_75_fu_1014_p2 = (tmp_31_reg_1346 + tmp_83_fu_1010_p1);

assign tmp_76_fu_1240_p3 = {{reg_417}, {ap_const_lv2_0}};

assign tmp_77_fu_1061_p2 = (p_shl4_cast_fu_1053_p3 - tmp_84_fu_1045_p1);

assign tmp_78_cast_fu_1072_p1 = $signed(tmp_78_fu_1067_p2);

assign tmp_78_fu_1067_p2 = (tmp_18_reg_1339 + tmp_77_fu_1061_p2);

assign tmp_79_cast_fu_1149_p1 = $signed(tmp_79_fu_1144_p2);

assign tmp_79_fu_1144_p2 = (tmp_31_reg_1346 + tmp_87_fu_1140_p1);

assign tmp_7_fu_1188_p1 = i_4_reg_343;

assign tmp_80_cast_fu_1159_p1 = $signed(tmp_80_fu_1154_p2);

assign tmp_80_fu_1154_p2 = (tmp_77_reg_1478 + tmp_87_fu_1140_p1);

assign tmp_81_fu_1212_p1 = work_q1[2:0];

assign tmp_82_fu_971_p1 = j_phi_fu_303_p4[4:0];

assign tmp_83_fu_1010_p1 = i_2_reg_310[4:0];

assign tmp_84_fu_1045_p1 = i_3_reg_321[4:0];

assign tmp_85_fu_1049_p1 = i_3_reg_321[2:0];

assign tmp_86_fu_1091_p1 = w_3_to_int_fu_1077_p1[51:0];

assign tmp_87_fu_1140_p1 = j_1_reg_332[4:0];

assign tmp_8_fu_497_p2 = (notrhs1_fu_491_p2 | notlhs1_fu_485_p2);

assign tmp_9_fu_952_p2 = ((r_load_reg_1389 == i_5_cast_reg_1319) ? 1'b1 : 1'b0);

assign tmp_fu_471_p4 = {{eps_to_int_fu_468_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_s_fu_902_p1 = $signed(r_load_reg_1389);

assign w_3_to_int_fu_1077_p1 = reg_424;

assign w_4_fu_700_p3 = ((tmp_36_fu_684_p2[0:0] === 1'b1) ? reg_410 : f_fu_696_p1);

assign w_4_to_int_fu_708_p1 = w_4_reg_1372;

assign wmax_1_fu_791_p3 = ((tmp_45_fu_785_p2[0:0] === 1'b1) ? w_4_reg_1372 : wmax_phi_fu_291_p4);

assign wmax_to_int_fu_725_p1 = wmax_phi_fu_291_p4;

always @ (posedge ap_clk) begin
    i_5_cast_reg_1319[31:9] <= 23'b00000000000000000000000;
    tmp_4_reg_1334[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    minver_a_addr_7_reg_1353[1:0] <= 2'b00;
    minver_a_addr_3_reg_1579[1:0] <= 2'b00;
    p_0_reg_366[0] <= 1'b1;
    p_0_reg_366[4:3] <= 2'b00;
    p_0_reg_366[11:10] <= 2'b00;
end

endmodule //minver_minver_hwa
