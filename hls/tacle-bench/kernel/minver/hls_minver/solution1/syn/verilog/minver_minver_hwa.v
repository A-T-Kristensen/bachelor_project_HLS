// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="minver_minver_hwa,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.664000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=14,HLS_SYN_FF=5437,HLS_SYN_LUT=6520}" *)

module minver_minver_hwa (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        minver_a_Addr_A,
        minver_a_EN_A,
        minver_a_WEN_A,
        minver_a_Din_A,
        minver_a_Dout_A,
        minver_a_Clk_A,
        minver_a_Rst_A,
        minver_a_Addr_B,
        minver_a_EN_B,
        minver_a_WEN_B,
        minver_a_Din_B,
        minver_a_Dout_B,
        minver_a_Clk_B,
        minver_a_Rst_B,
        side,
        eps,
        ap_return
);

parameter    ap_ST_fsm_state1 = 141'b1;
parameter    ap_ST_fsm_state2 = 141'b10;
parameter    ap_ST_fsm_state3 = 141'b100;
parameter    ap_ST_fsm_state4 = 141'b1000;
parameter    ap_ST_fsm_state5 = 141'b10000;
parameter    ap_ST_fsm_state6 = 141'b100000;
parameter    ap_ST_fsm_state7 = 141'b1000000;
parameter    ap_ST_fsm_state8 = 141'b10000000;
parameter    ap_ST_fsm_state9 = 141'b100000000;
parameter    ap_ST_fsm_state10 = 141'b1000000000;
parameter    ap_ST_fsm_state11 = 141'b10000000000;
parameter    ap_ST_fsm_state12 = 141'b100000000000;
parameter    ap_ST_fsm_state13 = 141'b1000000000000;
parameter    ap_ST_fsm_state14 = 141'b10000000000000;
parameter    ap_ST_fsm_state15 = 141'b100000000000000;
parameter    ap_ST_fsm_state16 = 141'b1000000000000000;
parameter    ap_ST_fsm_state17 = 141'b10000000000000000;
parameter    ap_ST_fsm_state18 = 141'b100000000000000000;
parameter    ap_ST_fsm_state19 = 141'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 141'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 141'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 141'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 141'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 141'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 141'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 141'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 141'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 141'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 141'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 141'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 141'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 141'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 141'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 141'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 141'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 141'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 141'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 141'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 141'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 141'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 141'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 141'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 141'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 141'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 141'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 141'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 141'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 141'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 141'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 141'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 141'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 141'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 141'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 141'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 141'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 141'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 141'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 141'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 141'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 141'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 141'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 141'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 141'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 141'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 141'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 141'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 141'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 141'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 141'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state78 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state79 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state80 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state81 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state82 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state83 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state84 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state85 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state86 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state87 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state88 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state89 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state90 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state91 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state92 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state93 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state94 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state95 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state96 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state97 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state98 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state99 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state100 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state101 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state102 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state103 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state104 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state105 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state106 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state107 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state108 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state109 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state110 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state111 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state112 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state113 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state114 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state115 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state116 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state117 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state118 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state119 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state120 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state121 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state122 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state123 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state124 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state125 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state126 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state127 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state128 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state129 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state130 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state131 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state132 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state133 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state134 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state135 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state136 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state137 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state138 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state139 = 141'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state140 = 141'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state141 = 141'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_8A = 32'b10001010;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_86 = 32'b10000110;
parameter    ap_const_lv32_87 = 32'b10000111;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_31 = 32'b110001;
parameter    ap_const_lv32_82 = 32'b10000010;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv32_3D = 32'b111101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_35 = 32'b110101;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_45 = 32'b1000101;
parameter    ap_const_lv32_63 = 32'b1100011;
parameter    ap_const_lv32_84 = 32'b10000100;
parameter    ap_const_lv32_89 = 32'b10001001;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv32_83 = 32'b10000011;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_64 = 32'b1100100;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv32_88 = 32'b10001000;
parameter    ap_const_lv32_8B = 32'b10001011;
parameter    ap_const_lv12_3E7 = 12'b1111100111;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_85 = 32'b10000101;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv64_3FF0000000000000 = 64'b11111111110000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_1F5 = 32'b111110101;
parameter    ap_const_lv11_7FF = 11'b11111111111;
parameter    ap_const_lv52_0 = 52'b0000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv64_8000000000000000 = 64'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_8C = 32'b10001100;
parameter    ap_const_lv5_5 = 5'b101;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv5_1 = 5'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] minver_a_Addr_A;
output   minver_a_EN_A;
output  [7:0] minver_a_WEN_A;
output  [63:0] minver_a_Din_A;
input  [63:0] minver_a_Dout_A;
output   minver_a_Clk_A;
output   minver_a_Rst_A;
output  [31:0] minver_a_Addr_B;
output   minver_a_EN_B;
output  [7:0] minver_a_WEN_B;
output  [63:0] minver_a_Din_B;
input  [63:0] minver_a_Dout_B;
output   minver_a_Clk_B;
output   minver_a_Rst_B;
input  [31:0] side;
input  [63:0] eps;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg minver_a_EN_A;
reg[7:0] minver_a_WEN_A;
reg[63:0] minver_a_Din_A;
reg minver_a_EN_B;
reg[7:0] minver_a_WEN_B;
reg[63:0] minver_a_Din_B;

(* fsm_encoding = "none" *) reg   [140:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [63:0] reg_388;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state139;
wire   [8:0] work_q0;
reg   [8:0] reg_395;
wire   [0:0] ap_CS_fsm_state13;
wire   [8:0] work_q1;
wire   [0:0] ap_CS_fsm_state135;
wire   [0:0] ap_CS_fsm_state136;
reg   [63:0] reg_402;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] ap_CS_fsm_state53;
wire   [63:0] grp_fu_373_p2;
reg   [63:0] reg_410;
wire   [0:0] ap_CS_fsm_state50;
wire   [0:0] ap_CS_fsm_state131;
reg   [63:0] reg_415;
wire   [0:0] ap_CS_fsm_state56;
wire   [0:0] ap_CS_fsm_state62;
wire   [0:0] grp_fu_378_p2;
reg   [0:0] tmp_12_reg_1254;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_8_fu_473_p2;
reg   [0:0] tmp_8_reg_1272;
wire   [8:0] i_1_fu_511_p2;
wire   [0:0] ap_CS_fsm_state3;
wire   [31:0] i_5_cast_fu_527_p1;
reg   [31:0] i_5_cast_reg_1295;
wire   [0:0] ap_CS_fsm_state4;
wire   [8:0] k_fu_536_p2;
reg   [8:0] k_reg_1304;
wire   [63:0] tmp_4_fu_542_p1;
reg   [63:0] tmp_4_reg_1309;
wire   [0:0] tmp_3_fu_531_p2;
wire   [4:0] tmp_18_fu_546_p1;
reg   [4:0] tmp_18_reg_1314;
wire   [4:0] tmp_26_fu_575_p2;
reg   [4:0] tmp_26_reg_1321;
reg   [3:0] minver_a_addr_7_reg_1328;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] tmp_5_fu_581_p2;
reg   [31:0] r_load_reg_1341;
wire   [4:0] tmp_60_fu_634_p2;
reg   [4:0] tmp_60_reg_1347;
wire   [63:0] w_4_fu_702_p3;
reg   [63:0] w_4_reg_1357;
wire   [0:0] ap_CS_fsm_state7;
reg   [0:0] tmp_39_reg_1364;
wire   [0:0] ap_CS_fsm_state8;
wire   [63:0] wmax_1_fu_800_p3;
wire   [0:0] ap_CS_fsm_state9;
wire   [31:0] i_6_fu_807_p2;
wire   [63:0] api_fu_870_p3;
reg   [63:0] api_reg_1379;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] tmp_9_fu_928_p2;
reg   [0:0] tmp_9_reg_1388;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] tmp_54_fu_922_p2;
reg   [8:0] work_addr_2_reg_1392;
reg   [8:0] work_addr_3_reg_1398;
wire   [8:0] j_3_fu_941_p2;
reg   [8:0] j_3_reg_1407;
wire   [0:0] ap_CS_fsm_state15;
reg   [3:0] minver_a_addr_4_reg_1412;
wire   [0:0] exitcond5_fu_936_p2;
reg   [3:0] minver_a_addr_5_reg_1418;
wire   [8:0] i_8_fu_980_p2;
reg   [8:0] i_8_reg_1426;
wire   [0:0] ap_CS_fsm_state18;
reg   [3:0] minver_a_addr_6_reg_1431;
wire   [0:0] exitcond4_fu_975_p2;
wire   [8:0] i_9_fu_1009_p2;
reg   [8:0] i_9_reg_1440;
wire   [0:0] ap_CS_fsm_state52;
wire   [0:0] tmp_16_fu_1015_p2;
reg   [0:0] tmp_16_reg_1445;
wire   [0:0] exitcond3_fu_1004_p2;
wire   [4:0] tmp_72_fu_1037_p2;
reg   [4:0] tmp_72_reg_1449;
reg   [3:0] minver_a_addr_8_reg_1454;
wire   [63:0] w_3_to_int_fu_1053_p1;
reg   [63:0] w_3_to_int_reg_1459;
wire   [0:0] ap_CS_fsm_state54;
wire   [0:0] tmp_59_fu_1089_p2;
reg   [0:0] tmp_59_reg_1464;
wire   [8:0] j_5_fu_1104_p2;
reg   [8:0] j_5_reg_1471;
wire   [0:0] ap_CS_fsm_state55;
wire   [0:0] tmp_21_fu_1110_p2;
reg   [0:0] tmp_21_reg_1476;
wire   [0:0] exitcond2_fu_1099_p2;
reg   [3:0] minver_a_addr_10_reg_1485;
wire   [63:0] tmp_19_neg_fu_1140_p2;
reg   [63:0] tmp_19_neg_reg_1491;
wire   [63:0] grp_fu_369_p2;
reg   [63:0] tmp_23_reg_1496;
wire   [63:0] grp_fu_365_p2;
reg   [63:0] tmp_24_reg_1501;
wire   [0:0] ap_CS_fsm_state68;
wire   [63:0] tmp_19_fu_1145_p1;
wire   [0:0] ap_CS_fsm_state70;
reg   [63:0] tmp_20_reg_1511;
wire   [0:0] ap_CS_fsm_state100;
wire   [8:0] i_7_fu_1158_p2;
reg   [8:0] i_7_reg_1519;
wire   [0:0] ap_CS_fsm_state133;
wire   [4:0] tmp_64_fu_1169_p1;
reg   [4:0] tmp_64_reg_1524;
wire   [0:0] exitcond1_fu_1153_p2;
reg   [8:0] work_addr_1_reg_1529;
reg   [3:0] minver_a_addr_2_reg_1538;
wire   [0:0] tmp_10_fu_1173_p2;
reg   [8:0] work_addr_4_reg_1543;
reg   [3:0] minver_a_addr_3_reg_1549;
wire   [8:0] j_4_fu_1238_p2;
reg   [8:0] j_4_reg_1557;
wire   [0:0] ap_CS_fsm_state138;
reg   [8:0] work_address0;
reg    work_ce0;
reg    work_we0;
reg   [8:0] work_d0;
reg   [8:0] work_address1;
reg    work_ce1;
reg    work_we1;
reg   [8:0] work_d1;
reg   [8:0] i_reg_235;
wire   [0:0] exitcond6_fu_506_p2;
wire   [0:0] or_cond7_fu_496_p2;
reg   [8:0] i_5_reg_247;
wire   [0:0] ap_CS_fsm_state132;
reg   [31:0] r_1_reg_259;
reg   [63:0] wmax_reg_269;
reg   [8:0] j_reg_281;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state17;
reg   [8:0] i_2_reg_292;
wire   [0:0] ap_CS_fsm_state51;
reg   [8:0] i_3_reg_303;
wire   [0:0] ap_CS_fsm_state101;
reg   [8:0] j_1_reg_314;
wire   [0:0] ap_CS_fsm_state69;
reg   [8:0] i_4_reg_325;
reg   [8:0] j_2_reg_337;
wire   [0:0] ap_CS_fsm_state137;
wire   [0:0] ap_CS_fsm_state140;
reg   [11:0] p_0_reg_348;
wire   [63:0] tmp_1_fu_517_p1;
wire   [63:0] p_shl_fu_558_p1;
wire  signed [63:0] tmp_61_cast_fu_613_p1;
wire  signed [63:0] tmp_64_cast_fu_645_p1;
wire  signed [63:0] tmp_s_fu_878_p1;
wire  signed [63:0] tmp_68_cast_fu_956_p1;
wire  signed [63:0] tmp_69_cast_fu_966_p1;
wire  signed [63:0] tmp_70_cast_fu_995_p1;
wire  signed [63:0] tmp_73_cast_fu_1048_p1;
wire  signed [63:0] tmp_74_cast_fu_1125_p1;
wire  signed [63:0] tmp_75_cast_fu_1135_p1;
wire   [63:0] tmp_7_fu_1164_p1;
wire  signed [63:0] tmp_67_cast_fu_1211_p1;
wire   [63:0] tmp_11_fu_1179_p1;
wire   [63:0] p_shl5_fu_1224_p1;
reg   [31:0] r_fu_84;
wire   [31:0] r_2_fu_792_p3;
wire   [0:0] ap_CS_fsm_state134;
reg   [31:0] minver_a_Addr_A_orig;
reg   [31:0] minver_a_Addr_B_orig;
wire   [0:0] ap_CS_fsm_state61;
wire   [0:0] ap_CS_fsm_state63;
wire   [0:0] ap_CS_fsm_state57;
reg   [63:0] grp_fu_373_p0;
wire   [0:0] ap_CS_fsm_state20;
reg   [63:0] grp_fu_378_p0;
reg   [63:0] grp_fu_378_p1;
wire   [30:0] tmp_2_fu_422_p4;
wire   [63:0] eps_to_int_fu_444_p1;
wire   [10:0] tmp_fu_447_p4;
wire   [51:0] tmp_6_fu_457_p1;
wire   [0:0] notrhs1_fu_467_p2;
wire   [0:0] notlhs1_fu_461_p2;
wire   [0:0] tmp_13_fu_479_p2;
wire   [0:0] icmp_fu_432_p2;
wire   [0:0] tmp_17_fu_484_p2;
wire   [0:0] tmp2_fu_490_p2;
wire   [0:0] notrhs_fu_438_p2;
wire   [31:0] i_cast_fu_502_p1;
wire   [10:0] tmp_22_fu_550_p3;
wire   [2:0] tmp_25_fu_563_p1;
wire   [4:0] p_shl_cast_fu_567_p3;
wire   [2:0] tmp_33_fu_590_p1;
wire   [4:0] p_shl2_cast_fu_594_p3;
wire   [4:0] tmp_28_fu_586_p1;
wire   [4:0] tmp_35_fu_602_p2;
wire   [4:0] tmp_42_fu_608_p2;
wire   [2:0] tmp_56_fu_622_p1;
wire   [4:0] p_shl3_cast_fu_626_p3;
wire   [4:0] tmp_51_fu_618_p1;
wire   [4:0] tmp_61_fu_640_p2;
wire   [63:0] n_assign_to_int_fu_650_p1;
wire   [10:0] tmp_27_fu_654_p4;
wire   [51:0] tmp_47_fu_664_p1;
wire   [0:0] notrhs2_fu_674_p2;
wire   [0:0] notlhs2_fu_668_p2;
wire   [0:0] tmp_29_fu_680_p2;
wire   [63:0] f_neg_i_fu_692_p2;
wire   [0:0] tmp_31_fu_686_p2;
wire   [63:0] f_fu_698_p1;
wire   [63:0] w_4_to_int_fu_710_p1;
wire   [63:0] wmax_to_int_fu_727_p1;
wire   [10:0] tmp_32_fu_713_p4;
wire   [51:0] tmp_48_fu_723_p1;
wire   [0:0] notrhs3_fu_751_p2;
wire   [0:0] notlhs3_fu_745_p2;
wire   [10:0] tmp_34_fu_731_p4;
wire   [51:0] tmp_49_fu_741_p1;
wire   [0:0] notrhs4_fu_769_p2;
wire   [0:0] notlhs4_fu_763_p2;
wire   [0:0] tmp_36_fu_757_p2;
wire   [0:0] tmp_37_fu_775_p2;
wire   [0:0] tmp_38_fu_781_p2;
wire   [0:0] tmp_40_fu_787_p2;
wire   [63:0] pivot_to_int_fu_818_p1;
wire   [10:0] tmp_41_fu_822_p4;
wire   [51:0] tmp_62_fu_832_p1;
wire   [0:0] notrhs5_fu_842_p2;
wire   [0:0] notlhs5_fu_836_p2;
wire   [0:0] tmp_43_fu_848_p2;
wire   [63:0] f_neg_i1_fu_860_p2;
wire   [0:0] tmp_45_fu_854_p2;
wire   [63:0] f_1_fu_866_p1;
wire   [63:0] api_to_int_fu_882_p1;
wire   [10:0] tmp_46_fu_885_p4;
wire   [51:0] tmp_63_fu_895_p1;
wire   [0:0] notrhs6_fu_905_p2;
wire   [0:0] notlhs6_fu_899_p2;
wire   [0:0] tmp_50_fu_911_p2;
wire   [0:0] tmp_52_fu_917_p2;
wire   [31:0] j_cast_fu_932_p1;
wire   [4:0] tmp_77_fu_947_p1;
wire   [4:0] tmp_68_fu_951_p2;
wire   [4:0] tmp_69_fu_961_p2;
wire   [31:0] i_2_cast_fu_971_p1;
wire   [4:0] tmp_78_fu_986_p1;
wire   [4:0] tmp_70_fu_990_p2;
wire   [31:0] i_3_cast_fu_1000_p1;
wire   [2:0] tmp_80_fu_1025_p1;
wire   [4:0] p_shl4_cast_fu_1029_p3;
wire   [4:0] tmp_79_fu_1021_p1;
wire   [4:0] tmp_73_fu_1043_p2;
wire   [10:0] tmp_55_fu_1057_p4;
wire   [51:0] tmp_81_fu_1067_p1;
wire   [0:0] notrhs8_fu_1077_p2;
wire   [0:0] notlhs8_fu_1071_p2;
wire   [0:0] tmp_57_fu_1083_p2;
wire   [31:0] j_1_cast_fu_1095_p1;
wire   [4:0] tmp_82_fu_1116_p1;
wire   [4:0] tmp_74_fu_1120_p2;
wire   [4:0] tmp_75_fu_1130_p2;
wire   [31:0] i_4_cast_fu_1149_p1;
wire   [2:0] tmp_76_fu_1188_p1;
wire   [4:0] p_shl5_cast_fu_1192_p3;
wire   [4:0] tmp_65_fu_1184_p1;
wire   [4:0] tmp_66_fu_1200_p2;
wire   [4:0] tmp_67_fu_1206_p2;
wire   [10:0] tmp_71_fu_1216_p3;
wire   [31:0] j_2_cast_fu_1229_p1;
wire   [0:0] ap_CS_fsm_state141;
reg   [4:0] grp_fu_378_opcode;
wire   [0:0] exitcond_fu_1233_p2;
reg   [140:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 141'b1;
end

minver_minver_hwabkb #(
    .DataWidth( 9 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
work_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(work_address0),
    .ce0(work_ce0),
    .we0(work_we0),
    .d0(work_d0),
    .q0(work_q0),
    .address1(work_address1),
    .ce1(work_ce1),
    .we1(work_we1),
    .d1(work_d1),
    .q1(work_q1)
);

minver_minver_hwacud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
minver_minver_hwacud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_415),
    .din1(tmp_23_reg_1496),
    .ce(1'b1),
    .dout(grp_fu_365_p2)
);

minver_minver_hwadEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
minver_minver_hwadEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_402),
    .din1(reg_415),
    .ce(1'b1),
    .dout(grp_fu_369_p2)
);

minver_minver_hwaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
minver_minver_hwaeOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_373_p0),
    .din1(reg_388),
    .ce(1'b1),
    .dout(grp_fu_373_p2)
);

minver_minver_hwafYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
minver_minver_hwafYi_U4(
    .din0(grp_fu_378_p0),
    .din1(grp_fu_378_p1),
    .opcode(grp_fu_378_opcode),
    .dout(grp_fu_378_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_2_reg_292 <= i_8_reg_1426;
    end else if (((1'b1 == ap_CS_fsm_state15) & (~(1'b0 == tmp_9_reg_1388) | ~(1'b0 == exitcond5_fu_936_p2)))) begin
        i_2_reg_292 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & ~(1'b0 == exitcond4_fu_975_p2))) begin
        i_3_reg_303 <= ap_const_lv9_0;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        i_3_reg_303 <= i_9_reg_1440;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_3_fu_531_p2 == 1'b0))) begin
        i_4_reg_325 <= ap_const_lv9_0;
    end else if (((1'b1 == ap_CS_fsm_state135) & ~(1'b0 == tmp_10_fu_1173_p2))) begin
        i_4_reg_325 <= i_7_reg_1519;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond6_fu_506_p2))) begin
        i_5_reg_247 <= ap_const_lv9_0;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        i_5_reg_247 <= k_reg_1304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == or_cond7_fu_496_p2))) begin
        i_reg_235 <= ap_const_lv9_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond6_fu_506_p2))) begin
        i_reg_235 <= i_1_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) & (1'b0 == tmp_59_fu_1089_p2))) begin
        j_1_reg_314 <= ap_const_lv9_0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        j_1_reg_314 <= j_5_reg_1471;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        j_2_reg_337 <= j_4_reg_1557;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        j_2_reg_337 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_reg_281 <= j_3_reg_1407;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_reg_281 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == tmp_54_fu_922_p2))) begin
                p_0_reg_348[1] <= 1'b0;
        p_0_reg_348[2] <= 1'b0;
        p_0_reg_348[5] <= 1'b0;
        p_0_reg_348[6] <= 1'b0;
        p_0_reg_348[7] <= 1'b0;
        p_0_reg_348[8] <= 1'b0;
        p_0_reg_348[9] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == or_cond7_fu_496_p2))) begin
                p_0_reg_348[1] <= 1'b1;
        p_0_reg_348[2] <= 1'b1;
        p_0_reg_348[5] <= 1'b1;
        p_0_reg_348[6] <= 1'b1;
        p_0_reg_348[7] <= 1'b1;
        p_0_reg_348[8] <= 1'b1;
        p_0_reg_348[9] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_3_fu_531_p2 == 1'b0))) begin
        r_1_reg_259 <= i_5_cast_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_1_reg_259 <= i_6_fu_807_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_fu_84 <= r_2_fu_792_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond6_fu_506_p2))) begin
        r_fu_84 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state135)) begin
        reg_395 <= work_q1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state136))) begin
        reg_395 <= work_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        reg_415 <= minver_a_Dout_A;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        reg_415 <= minver_a_Dout_B;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_3_fu_531_p2 == 1'b0))) begin
        wmax_reg_269 <= ap_const_lv64_0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        wmax_reg_269 <= wmax_1_fu_800_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        api_reg_1379 <= api_fu_870_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_5_cast_reg_1295[8 : 0] <= i_5_cast_fu_527_p1[8 : 0];
        k_reg_1304 <= k_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        i_7_reg_1519 <= i_7_fu_1158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_8_reg_1426 <= i_8_fu_980_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        i_9_reg_1440 <= i_9_fu_1009_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == tmp_9_reg_1388))) begin
        j_3_reg_1407 <= j_3_fu_941_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        j_4_reg_1557 <= j_4_fu_1238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        j_5_reg_1471 <= j_5_fu_1104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (1'b0 == exitcond2_fu_1099_p2) & (1'b0 == tmp_21_fu_1110_p2))) begin
        minver_a_addr_10_reg_1485 <= tmp_75_cast_fu_1135_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state135) & (1'b0 == tmp_10_fu_1173_p2))) begin
        minver_a_addr_2_reg_1538 <= tmp_67_cast_fu_1211_p1;
        work_addr_4_reg_1543 <= tmp_11_fu_1179_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        minver_a_addr_3_reg_1549[3 : 2] <= p_shl5_fu_1224_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == tmp_9_reg_1388) & (1'b0 == exitcond5_fu_936_p2))) begin
        minver_a_addr_4_reg_1412 <= tmp_68_cast_fu_956_p1;
        minver_a_addr_5_reg_1418 <= tmp_69_cast_fu_966_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == exitcond4_fu_975_p2))) begin
        minver_a_addr_6_reg_1431 <= tmp_70_cast_fu_995_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_3_fu_531_p2 == 1'b0))) begin
        minver_a_addr_7_reg_1328[3 : 2] <= p_shl_fu_558_p1[3 : 2];
        tmp_18_reg_1314 <= tmp_18_fu_546_p1;
        tmp_26_reg_1321 <= tmp_26_fu_575_p2;
        tmp_4_reg_1309[8 : 0] <= tmp_4_fu_542_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (1'b0 == exitcond3_fu_1004_p2) & (1'b0 == tmp_16_fu_1015_p2))) begin
        minver_a_addr_8_reg_1454 <= tmp_73_cast_fu_1048_p1;
        tmp_72_reg_1449 <= tmp_72_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_5_fu_581_p2))) begin
        r_load_reg_1341 <= r_fu_84;
        tmp_60_reg_1347 <= tmp_60_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state139))) begin
        reg_388 <= minver_a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_402 <= minver_a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state131))) begin
        reg_410 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_12_reg_1254 <= grp_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (1'b0 == exitcond3_fu_1004_p2))) begin
        tmp_16_reg_1445 <= tmp_16_fu_1015_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & ~(1'b0 == exitcond2_fu_1099_p2))) begin
        tmp_19_neg_reg_1491 <= tmp_19_neg_fu_1140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        tmp_20_reg_1511 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (1'b0 == exitcond2_fu_1099_p2))) begin
        tmp_21_reg_1476 <= tmp_21_fu_1110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        tmp_23_reg_1496 <= grp_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        tmp_24_reg_1501 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_39_reg_1364 <= grp_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tmp_59_reg_1464 <= tmp_59_fu_1089_p2;
        w_3_to_int_reg_1459 <= w_3_to_int_fu_1053_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state133) & (1'b0 == exitcond1_fu_1153_p2))) begin
        tmp_64_reg_1524 <= tmp_64_fu_1169_p1;
        work_addr_1_reg_1529 <= tmp_7_fu_1164_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_8_reg_1272 <= tmp_8_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == tmp_54_fu_922_p2))) begin
        tmp_9_reg_1388 <= tmp_9_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        w_4_reg_1357 <= w_4_fu_702_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == tmp_54_fu_922_p2) & (1'b0 == tmp_9_fu_928_p2))) begin
        work_addr_2_reg_1392 <= tmp_4_reg_1309;
        work_addr_3_reg_1398 <= tmp_s_fu_878_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_373_p0 = tmp_19_fu_1145_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_373_p0 = ap_const_lv64_3FF0000000000000;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_373_p0 = reg_402;
    end else begin
        grp_fu_373_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_378_opcode = ap_const_lv5_1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_378_opcode = ap_const_lv5_2;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_378_opcode = ap_const_lv5_3;
    end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_378_opcode = ap_const_lv5_5;
    end else begin
        grp_fu_378_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_378_p0 = reg_402;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_378_p0 = api_reg_1379;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_378_p0 = w_4_reg_1357;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_378_p0 = reg_388;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        grp_fu_378_p0 = eps;
    end else begin
        grp_fu_378_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_378_p1 = eps;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_378_p1 = wmax_reg_269;
    end else if (((ap_CS_fsm_state1 == 1'b1) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state54))) begin
        grp_fu_378_p1 = ap_const_lv64_0;
    end else begin
        grp_fu_378_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state138))) begin
        minver_a_Addr_A_orig = minver_a_addr_2_reg_1538;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        minver_a_Addr_A_orig = minver_a_addr_8_reg_1454;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        minver_a_Addr_A_orig = minver_a_addr_10_reg_1485;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        minver_a_Addr_A_orig = tmp_73_cast_fu_1048_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        minver_a_Addr_A_orig = tmp_70_cast_fu_995_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        minver_a_Addr_A_orig = tmp_68_cast_fu_956_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_5_fu_581_p2))) begin
        minver_a_Addr_A_orig = tmp_64_cast_fu_645_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == tmp_5_fu_581_p2))) begin
        minver_a_Addr_A_orig = tmp_61_cast_fu_613_p1;
    end else begin
        minver_a_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state140))) begin
        minver_a_Addr_B_orig = minver_a_addr_3_reg_1549;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        minver_a_Addr_B_orig = minver_a_addr_7_reg_1328;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        minver_a_Addr_B_orig = minver_a_addr_10_reg_1485;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        minver_a_Addr_B_orig = tmp_74_cast_fu_1125_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        minver_a_Addr_B_orig = minver_a_addr_6_reg_1431;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        minver_a_Addr_B_orig = minver_a_addr_5_reg_1418;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        minver_a_Addr_B_orig = minver_a_addr_4_reg_1412;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        minver_a_Addr_B_orig = tmp_69_cast_fu_966_p1;
    end else begin
        minver_a_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        minver_a_Din_A = minver_a_Dout_B;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        minver_a_Din_A = tmp_20_reg_1511;
    end else begin
        minver_a_Din_A = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        minver_a_Din_B = reg_388;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        minver_a_Din_B = tmp_24_reg_1501;
    end else if (((1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state51))) begin
        minver_a_Din_B = reg_410;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        minver_a_Din_B = reg_402;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        minver_a_Din_B = minver_a_Dout_B;
    end else begin
        minver_a_Din_B = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state139) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == tmp_5_fu_581_p2)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_5_fu_581_p2)) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state61))) begin
        minver_a_EN_A = 1'b1;
    end else begin
        minver_a_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state140))) begin
        minver_a_EN_B = 1'b1;
    end else begin
        minver_a_EN_B = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state139) | ((1'b1 == ap_CS_fsm_state101) & (1'b0 == tmp_16_reg_1445) & (1'b0 == tmp_59_reg_1464)))) begin
        minver_a_WEN_A = ap_const_lv8_FF;
    end else begin
        minver_a_WEN_A = ap_const_lv8_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state140) | ((1'b1 == ap_CS_fsm_state69) & (1'b0 == tmp_21_reg_1476)))) begin
        minver_a_WEN_B = ap_const_lv8_FF;
    end else begin
        minver_a_WEN_B = ap_const_lv8_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        work_address0 = work_addr_1_reg_1529;
    end else if ((1'b1 == ap_CS_fsm_state135)) begin
        work_address0 = tmp_11_fu_1179_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        work_address0 = work_addr_3_reg_1398;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        work_address0 = tmp_4_reg_1309;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        work_address0 = tmp_1_fu_517_p1;
    end else begin
        work_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        work_address1 = work_addr_4_reg_1543;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        work_address1 = work_addr_1_reg_1529;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        work_address1 = work_addr_2_reg_1392;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        work_address1 = tmp_s_fu_878_p1;
    end else begin
        work_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state137))) begin
        work_ce0 = 1'b1;
    end else begin
        work_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state134))) begin
        work_ce1 = 1'b1;
    end else begin
        work_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state137))) begin
        work_d0 = reg_395;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        work_d0 = i_reg_235;
    end else begin
        work_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        work_d1 = reg_395;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        work_d1 = work_q1;
    end else begin
        work_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond6_fu_506_p2)) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state137))) begin
        work_we0 = 1'b1;
    end else begin
        work_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state136))) begin
        work_we1 = 1'b1;
    end else begin
        work_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == or_cond7_fu_496_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond6_fu_506_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((tmp_3_fu_531_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((1'b0 == tmp_5_fu_581_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (~(1'b0 == tmp_54_fu_922_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else if (((1'b0 == tmp_54_fu_922_p2) & ~(1'b0 == tmp_9_fu_928_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if ((~(1'b0 == tmp_9_reg_1388) | ~(1'b0 == exitcond5_fu_936_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state18 : begin
            if (~(1'b0 == exitcond4_fu_975_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state52 : begin
            if (((1'b0 == exitcond3_fu_1004_p2) & ~(1'b0 == tmp_16_fu_1015_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else if (((1'b0 == exitcond3_fu_1004_p2) & (1'b0 == tmp_16_fu_1015_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if ((1'b0 == tmp_59_fu_1089_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b0 == exitcond2_fu_1099_p2) & ~(1'b0 == tmp_21_fu_1110_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else if (((1'b0 == exitcond2_fu_1099_p2) & (1'b0 == tmp_21_fu_1110_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state133 : begin
            if (~(1'b0 == exitcond1_fu_1153_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            if (~(1'b0 == tmp_10_fu_1173_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            if (~(1'b0 == exitcond_fu_1233_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state100 = ap_CS_fsm[ap_const_lv32_63];

assign ap_CS_fsm_state101 = ap_CS_fsm[ap_const_lv32_64];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state131 = ap_CS_fsm[ap_const_lv32_82];

assign ap_CS_fsm_state132 = ap_CS_fsm[ap_const_lv32_83];

assign ap_CS_fsm_state133 = ap_CS_fsm[ap_const_lv32_84];

assign ap_CS_fsm_state134 = ap_CS_fsm[ap_const_lv32_85];

assign ap_CS_fsm_state135 = ap_CS_fsm[ap_const_lv32_86];

assign ap_CS_fsm_state136 = ap_CS_fsm[ap_const_lv32_87];

assign ap_CS_fsm_state137 = ap_CS_fsm[ap_const_lv32_88];

assign ap_CS_fsm_state138 = ap_CS_fsm[ap_const_lv32_89];

assign ap_CS_fsm_state139 = ap_CS_fsm[ap_const_lv32_8A];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state140 = ap_CS_fsm[ap_const_lv32_8B];

assign ap_CS_fsm_state141 = ap_CS_fsm[ap_const_lv32_8C];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state50 = ap_CS_fsm[ap_const_lv32_31];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_32];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_33];

assign ap_CS_fsm_state53 = ap_CS_fsm[ap_const_lv32_34];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_35];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_36];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_37];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_38];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state61 = ap_CS_fsm[ap_const_lv32_3C];

assign ap_CS_fsm_state62 = ap_CS_fsm[ap_const_lv32_3D];

assign ap_CS_fsm_state63 = ap_CS_fsm[ap_const_lv32_3E];

assign ap_CS_fsm_state68 = ap_CS_fsm[ap_const_lv32_43];

assign ap_CS_fsm_state69 = ap_CS_fsm[ap_const_lv32_44];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state70 = ap_CS_fsm[ap_const_lv32_45];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign ap_return = $signed(p_0_reg_348);

assign api_fu_870_p3 = ((tmp_45_fu_854_p2[0:0] === 1'b1) ? reg_388 : f_1_fu_866_p1);

assign api_to_int_fu_882_p1 = api_reg_1379;

assign eps_to_int_fu_444_p1 = eps;

assign exitcond1_fu_1153_p2 = ((i_4_cast_fu_1149_p1 == side) ? 1'b1 : 1'b0);

assign exitcond2_fu_1099_p2 = ((j_1_cast_fu_1095_p1 == side) ? 1'b1 : 1'b0);

assign exitcond3_fu_1004_p2 = ((i_3_cast_fu_1000_p1 == side) ? 1'b1 : 1'b0);

assign exitcond4_fu_975_p2 = ((i_2_cast_fu_971_p1 == side) ? 1'b1 : 1'b0);

assign exitcond5_fu_936_p2 = ((j_cast_fu_932_p1 == side) ? 1'b1 : 1'b0);

assign exitcond6_fu_506_p2 = ((i_cast_fu_502_p1 == side) ? 1'b1 : 1'b0);

assign exitcond_fu_1233_p2 = ((j_2_cast_fu_1229_p1 == side) ? 1'b1 : 1'b0);

assign f_1_fu_866_p1 = f_neg_i1_fu_860_p2;

assign f_fu_698_p1 = f_neg_i_fu_692_p2;

assign f_neg_i1_fu_860_p2 = (pivot_to_int_fu_818_p1 ^ ap_const_lv64_8000000000000000);

assign f_neg_i_fu_692_p2 = (n_assign_to_int_fu_650_p1 ^ ap_const_lv64_8000000000000000);

assign i_1_fu_511_p2 = (i_reg_235 + ap_const_lv9_1);

assign i_2_cast_fu_971_p1 = i_2_reg_292;

assign i_3_cast_fu_1000_p1 = i_3_reg_303;

assign i_4_cast_fu_1149_p1 = i_4_reg_325;

assign i_5_cast_fu_527_p1 = i_5_reg_247;

assign i_6_fu_807_p2 = (ap_const_lv32_1 + r_1_reg_259);

assign i_7_fu_1158_p2 = (i_4_reg_325 + ap_const_lv9_1);

assign i_8_fu_980_p2 = (i_2_reg_292 + ap_const_lv9_1);

assign i_9_fu_1009_p2 = (i_3_reg_303 + ap_const_lv9_1);

assign i_cast_fu_502_p1 = i_reg_235;

assign icmp_fu_432_p2 = (($signed(tmp_2_fu_422_p4) > $signed(31'b0000000000000000000000000000000)) ? 1'b1 : 1'b0);

assign j_1_cast_fu_1095_p1 = j_1_reg_314;

assign j_2_cast_fu_1229_p1 = j_2_reg_337;

assign j_3_fu_941_p2 = (j_reg_281 + ap_const_lv9_1);

assign j_4_fu_1238_p2 = (j_2_reg_337 + ap_const_lv9_1);

assign j_5_fu_1104_p2 = (j_1_reg_314 + ap_const_lv9_1);

assign j_cast_fu_932_p1 = j_reg_281;

assign k_fu_536_p2 = (i_5_reg_247 + ap_const_lv9_1);

assign minver_a_Addr_A = minver_a_Addr_A_orig << ap_const_lv32_3;

assign minver_a_Addr_B = minver_a_Addr_B_orig << ap_const_lv32_3;

assign minver_a_Clk_A = ap_clk;

assign minver_a_Clk_B = ap_clk;

assign minver_a_Rst_A = ap_rst;

assign minver_a_Rst_B = ap_rst;

assign n_assign_to_int_fu_650_p1 = reg_388;

assign notlhs1_fu_461_p2 = ((tmp_fu_447_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs2_fu_668_p2 = ((tmp_27_fu_654_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs3_fu_745_p2 = ((tmp_32_fu_713_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs4_fu_763_p2 = ((tmp_34_fu_731_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs5_fu_836_p2 = ((tmp_41_fu_822_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs6_fu_899_p2 = ((tmp_46_fu_885_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs8_fu_1071_p2 = ((tmp_55_fu_1057_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notrhs1_fu_467_p2 = ((tmp_6_fu_457_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs2_fu_674_p2 = ((tmp_47_fu_664_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs3_fu_751_p2 = ((tmp_48_fu_723_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs4_fu_769_p2 = ((tmp_49_fu_741_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs5_fu_842_p2 = ((tmp_62_fu_832_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs6_fu_905_p2 = ((tmp_63_fu_895_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs8_fu_1077_p2 = ((tmp_81_fu_1067_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs_fu_438_p2 = (($signed(side) < $signed(32'b111110101)) ? 1'b1 : 1'b0);

assign or_cond7_fu_496_p2 = (tmp2_fu_490_p2 & notrhs_fu_438_p2);

assign p_shl2_cast_fu_594_p3 = {{tmp_33_fu_590_p1}, {ap_const_lv2_0}};

assign p_shl3_cast_fu_626_p3 = {{tmp_56_fu_622_p1}, {ap_const_lv2_0}};

assign p_shl4_cast_fu_1029_p3 = {{tmp_80_fu_1025_p1}, {ap_const_lv2_0}};

assign p_shl5_cast_fu_1192_p3 = {{tmp_76_fu_1188_p1}, {ap_const_lv2_0}};

assign p_shl5_fu_1224_p1 = tmp_71_fu_1216_p3;

assign p_shl_cast_fu_567_p3 = {{tmp_25_fu_563_p1}, {ap_const_lv2_0}};

assign p_shl_fu_558_p1 = tmp_22_fu_550_p3;

assign pivot_to_int_fu_818_p1 = reg_388;

assign r_2_fu_792_p3 = ((tmp_40_fu_787_p2[0:0] === 1'b1) ? r_1_reg_259 : r_fu_84);

assign tmp2_fu_490_p2 = (icmp_fu_432_p2 & tmp_17_fu_484_p2);

assign tmp_10_fu_1173_p2 = ((work_q1 == i_4_reg_325) ? 1'b1 : 1'b0);

assign tmp_11_fu_1179_p1 = work_q1;

assign tmp_13_fu_479_p2 = (tmp_8_fu_473_p2 & tmp_12_reg_1254);

assign tmp_16_fu_1015_p2 = ((i_3_reg_303 == i_5_reg_247) ? 1'b1 : 1'b0);

assign tmp_17_fu_484_p2 = (tmp_13_fu_479_p2 ^ 1'b1);

assign tmp_18_fu_546_p1 = i_5_reg_247[4:0];

assign tmp_19_fu_1145_p1 = tmp_19_neg_reg_1491;

assign tmp_19_neg_fu_1140_p2 = (w_3_to_int_reg_1459 ^ ap_const_lv64_8000000000000000);

assign tmp_1_fu_517_p1 = i_reg_235;

assign tmp_21_fu_1110_p2 = ((j_1_reg_314 == i_5_reg_247) ? 1'b1 : 1'b0);

assign tmp_22_fu_550_p3 = {{i_5_reg_247}, {ap_const_lv2_0}};

assign tmp_25_fu_563_p1 = i_5_reg_247[2:0];

assign tmp_26_fu_575_p2 = (p_shl_cast_fu_567_p3 - tmp_18_fu_546_p1);

assign tmp_27_fu_654_p4 = {{n_assign_to_int_fu_650_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_28_fu_586_p1 = r_1_reg_259[4:0];

assign tmp_29_fu_680_p2 = (notrhs2_fu_674_p2 | notlhs2_fu_668_p2);

assign tmp_2_fu_422_p4 = {{side[ap_const_lv32_1F : ap_const_lv32_1]}};

assign tmp_31_fu_686_p2 = (tmp_29_fu_680_p2 & grp_fu_378_p2);

assign tmp_32_fu_713_p4 = {{w_4_to_int_fu_710_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_33_fu_590_p1 = r_1_reg_259[2:0];

assign tmp_34_fu_731_p4 = {{wmax_to_int_fu_727_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_35_fu_602_p2 = (p_shl2_cast_fu_594_p3 - tmp_28_fu_586_p1);

assign tmp_36_fu_757_p2 = (notrhs3_fu_751_p2 | notlhs3_fu_745_p2);

assign tmp_37_fu_775_p2 = (notrhs4_fu_769_p2 | notlhs4_fu_763_p2);

assign tmp_38_fu_781_p2 = (tmp_36_fu_757_p2 & tmp_37_fu_775_p2);

assign tmp_3_fu_531_p2 = (($signed(i_5_cast_fu_527_p1) < $signed(side)) ? 1'b1 : 1'b0);

assign tmp_40_fu_787_p2 = (tmp_38_fu_781_p2 & tmp_39_reg_1364);

assign tmp_41_fu_822_p4 = {{pivot_to_int_fu_818_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_42_fu_608_p2 = (tmp_18_reg_1314 + tmp_35_fu_602_p2);

assign tmp_43_fu_848_p2 = (notrhs5_fu_842_p2 | notlhs5_fu_836_p2);

assign tmp_45_fu_854_p2 = (tmp_43_fu_848_p2 & grp_fu_378_p2);

assign tmp_46_fu_885_p4 = {{api_to_int_fu_882_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_47_fu_664_p1 = n_assign_to_int_fu_650_p1[51:0];

assign tmp_48_fu_723_p1 = w_4_to_int_fu_710_p1[51:0];

assign tmp_49_fu_741_p1 = wmax_to_int_fu_727_p1[51:0];

assign tmp_4_fu_542_p1 = i_5_reg_247;

assign tmp_50_fu_911_p2 = (notrhs6_fu_905_p2 | notlhs6_fu_899_p2);

assign tmp_51_fu_618_p1 = r_fu_84[4:0];

assign tmp_52_fu_917_p2 = (tmp_50_fu_911_p2 & tmp_8_reg_1272);

assign tmp_54_fu_922_p2 = (tmp_52_fu_917_p2 & grp_fu_378_p2);

assign tmp_55_fu_1057_p4 = {{w_3_to_int_fu_1053_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_56_fu_622_p1 = r_fu_84[2:0];

assign tmp_57_fu_1083_p2 = (notrhs8_fu_1077_p2 | notlhs8_fu_1071_p2);

assign tmp_59_fu_1089_p2 = (tmp_57_fu_1083_p2 & grp_fu_378_p2);

assign tmp_5_fu_581_p2 = (($signed(r_1_reg_259) < $signed(side)) ? 1'b1 : 1'b0);

assign tmp_60_fu_634_p2 = (p_shl3_cast_fu_626_p3 - tmp_51_fu_618_p1);

assign tmp_61_cast_fu_613_p1 = $signed(tmp_42_fu_608_p2);

assign tmp_61_fu_640_p2 = (tmp_18_reg_1314 + tmp_60_fu_634_p2);

assign tmp_62_fu_832_p1 = pivot_to_int_fu_818_p1[51:0];

assign tmp_63_fu_895_p1 = api_to_int_fu_882_p1[51:0];

assign tmp_64_cast_fu_645_p1 = $signed(tmp_61_fu_640_p2);

assign tmp_64_fu_1169_p1 = i_4_reg_325[4:0];

assign tmp_65_fu_1184_p1 = work_q1[4:0];

assign tmp_66_fu_1200_p2 = (p_shl5_cast_fu_1192_p3 - tmp_65_fu_1184_p1);

assign tmp_67_cast_fu_1211_p1 = $signed(tmp_67_fu_1206_p2);

assign tmp_67_fu_1206_p2 = (tmp_66_fu_1200_p2 + tmp_64_reg_1524);

assign tmp_68_cast_fu_956_p1 = $signed(tmp_68_fu_951_p2);

assign tmp_68_fu_951_p2 = (tmp_26_reg_1321 + tmp_77_fu_947_p1);

assign tmp_69_cast_fu_966_p1 = $signed(tmp_69_fu_961_p2);

assign tmp_69_fu_961_p2 = (tmp_60_reg_1347 + tmp_77_fu_947_p1);

assign tmp_6_fu_457_p1 = eps_to_int_fu_444_p1[51:0];

assign tmp_70_cast_fu_995_p1 = $signed(tmp_70_fu_990_p2);

assign tmp_70_fu_990_p2 = (tmp_26_reg_1321 + tmp_78_fu_986_p1);

assign tmp_71_fu_1216_p3 = {{reg_395}, {ap_const_lv2_0}};

assign tmp_72_fu_1037_p2 = (p_shl4_cast_fu_1029_p3 - tmp_79_fu_1021_p1);

assign tmp_73_cast_fu_1048_p1 = $signed(tmp_73_fu_1043_p2);

assign tmp_73_fu_1043_p2 = (tmp_18_reg_1314 + tmp_72_fu_1037_p2);

assign tmp_74_cast_fu_1125_p1 = $signed(tmp_74_fu_1120_p2);

assign tmp_74_fu_1120_p2 = (tmp_26_reg_1321 + tmp_82_fu_1116_p1);

assign tmp_75_cast_fu_1135_p1 = $signed(tmp_75_fu_1130_p2);

assign tmp_75_fu_1130_p2 = (tmp_72_reg_1449 + tmp_82_fu_1116_p1);

assign tmp_76_fu_1188_p1 = work_q1[2:0];

assign tmp_77_fu_947_p1 = j_reg_281[4:0];

assign tmp_78_fu_986_p1 = i_2_reg_292[4:0];

assign tmp_79_fu_1021_p1 = i_3_reg_303[4:0];

assign tmp_7_fu_1164_p1 = i_4_reg_325;

assign tmp_80_fu_1025_p1 = i_3_reg_303[2:0];

assign tmp_81_fu_1067_p1 = w_3_to_int_fu_1053_p1[51:0];

assign tmp_82_fu_1116_p1 = j_1_reg_314[4:0];

assign tmp_8_fu_473_p2 = (notrhs1_fu_467_p2 | notlhs1_fu_461_p2);

assign tmp_9_fu_928_p2 = ((r_load_reg_1341 == i_5_cast_reg_1295) ? 1'b1 : 1'b0);

assign tmp_fu_447_p4 = {{eps_to_int_fu_444_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_s_fu_878_p1 = $signed(r_load_reg_1341);

assign w_3_to_int_fu_1053_p1 = reg_402;

assign w_4_fu_702_p3 = ((tmp_31_fu_686_p2[0:0] === 1'b1) ? reg_388 : f_fu_698_p1);

assign w_4_to_int_fu_710_p1 = w_4_reg_1357;

assign wmax_1_fu_800_p3 = ((tmp_40_fu_787_p2[0:0] === 1'b1) ? w_4_reg_1357 : wmax_reg_269);

assign wmax_to_int_fu_727_p1 = wmax_reg_269;

always @ (posedge ap_clk) begin
    i_5_cast_reg_1295[31:9] <= 23'b00000000000000000000000;
    tmp_4_reg_1309[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    minver_a_addr_7_reg_1328[1:0] <= 2'b00;
    minver_a_addr_3_reg_1549[1:0] <= 2'b00;
    p_0_reg_348[0] <= 1'b1;
    p_0_reg_348[4:3] <= 2'b00;
    p_0_reg_348[11:10] <= 2'b00;
end

endmodule //minver_minver_hwa
