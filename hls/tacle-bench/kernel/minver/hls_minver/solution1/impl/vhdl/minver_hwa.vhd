-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity minver_hwa is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (63 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC;
    a_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_B : OUT STD_LOGIC;
    a_WEN_B : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_Din_B : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_Dout_B : IN STD_LOGIC_VECTOR (63 downto 0);
    a_Clk_B : OUT STD_LOGIC;
    a_Rst_B : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of minver_hwa is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "minver_hwa,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.635500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=14,HLS_SYN_FF=5514,HLS_SYN_LUT=6449}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (104 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (104 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (104 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (104 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (104 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (104 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (104 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (104 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (104 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (104 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (104 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (104 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3EB0C6F7A0B5ED8D : STD_LOGIC_VECTOR (63 downto 0) := "0011111010110000110001101111011110100000101101011110110110001101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wmax_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_1_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter1_r_1_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter2_r_1_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter3_r_1_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_265 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_276 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_359 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond6_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal work_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_365 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal work_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond5_reg_1223 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state142 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter32 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp2_iter31_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state134 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal i_1_fu_401_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_423_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1116 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_5_cast7_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast7_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1127 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_437_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_reg_1132 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_458_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_reg_1139 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_addr_7_reg_1146 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond6_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond6_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond6_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal w_4_fu_560_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_4_reg_1165 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal wmax_1_fu_651_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal wmax_1_reg_1177 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal r_load_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_15_fu_686_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_reg_1188 : STD_LOGIC_VECTOR (4 downto 0);
    signal api_fu_754_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal api_reg_1198 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_33_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_3_reg_1211 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_addr_4_reg_1217 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_pipeline_reg_pp1_iter1_exitcond5_reg_1223 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_817_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_1227 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_addr_4_reg_1232 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_addr_5_reg_1238 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp1_iter1_a_addr_5_reg_1238 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter1_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter2_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter3_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter4_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter5_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter6_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter7_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter8_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter9_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter10_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter11_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter12_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter13_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter14_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter15_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter16_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter17_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter18_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter19_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter20_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter21_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter22_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter23_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter24_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter25_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter26_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter27_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter28_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter29_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter30_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter32_exitcond4_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_853_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter1_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter2_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter3_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter4_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter5_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter6_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter7_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter8_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter9_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter10_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter11_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter12_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter13_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter14_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter15_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter16_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter17_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter18_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter19_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter20_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter21_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter22_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter23_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter24_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter25_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter26_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter27_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter28_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter29_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter30_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter31_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter32_a_addr_6_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_fu_879_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_9_reg_1262 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_14_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1267 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_907_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_reg_1271 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_addr_8_reg_1276 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_3_to_int_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_3_to_int_reg_1282 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal tmp_52_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_1287 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_971_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_5_reg_1294 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal tmp_19_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_10_reg_1308 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_neg_fu_1007_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_neg_reg_1314 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_reg_1319 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_1324 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal tmp_17_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal tmp_18_reg_1334 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal i_7_fu_1022_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_7_reg_1342 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state136 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal tmp_cast_fu_1033_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_reg_1347 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_1_reg_1352 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_addr_2_reg_1361 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_load_1_reg_1367 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal a_addr_2_reg_1372 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state140 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal a_addr_3_reg_1377 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_1091_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_4_reg_1385 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter33 : STD_LOGIC := '0';
    signal work_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce0 : STD_LOGIC;
    signal work_we0 : STD_LOGIC;
    signal work_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal work_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce1 : STD_LOGIC;
    signal work_we1 : STD_LOGIC;
    signal work_d1 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_219 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond7_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_231 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state135 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal wmax_phi_fu_247_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_1_phi_fu_258_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_phi_fu_269_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_287 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal j_1_reg_298 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal i_4_reg_309 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_321 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state143 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal tmp_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_cast_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_cast_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_fu_868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_cast_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_cast_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_cast_fu_1080_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl5_fu_1064_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_2_fu_658_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_345_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_441_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_454_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_fu_474_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_cast_fu_478_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_fu_470_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_486_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_53_fu_492_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_assign_1_to_int_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_512_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_fu_522_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_4_to_int_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wmax_to_int_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_571_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_581_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs3_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_589_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_599_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs4_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_674_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_cast_fu_678_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_670_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_692_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal pivot_to_int_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_706_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_716_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs1_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i1_fu_744_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal api_to_int_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_769_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_fu_779_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_cast_fu_823_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_827_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_62_fu_837_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_cast_fu_859_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_63_fu_863_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_fu_895_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_cast_fu_903_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_cast_fu_891_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_913_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_fu_927_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_937_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs5_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_cast_fu_983_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_68_fu_987_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_69_fu_997_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_57_fu_1052_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_58_fu_1060_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_1048_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_59_fu_1069_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_fu_1075_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_345_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (104 downto 0);

    component minver_hwa_dsub_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_hwa_dmul_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_hwa_ddiv_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_hwa_dcmp_6eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component minver_hwa_work IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (1 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    work_U : component minver_hwa_work
    generic map (
        DataWidth => 2,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => work_address0,
        ce0 => work_ce0,
        we0 => work_we0,
        d0 => work_d0,
        q0 => work_q0,
        address1 => work_address1,
        ce1 => work_ce1,
        we1 => work_we1,
        d1 => work_d1,
        q1 => work_q1);

    minver_hwa_dsub_6bkb_U1 : component minver_hwa_dsub_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_388,
        din1 => tmp_21_reg_1319,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    minver_hwa_dmul_6cud_U2 : component minver_hwa_dmul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_372,
        din1 => reg_388,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    minver_hwa_ddiv_6dEe_U3 : component minver_hwa_ddiv_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_340_p0,
        din1 => reg_359,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    minver_hwa_dcmp_6eOg_U4 : component minver_hwa_dcmp_6eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_345_p0,
        din1 => grp_fu_345_p1,
        opcode => grp_fu_345_opcode,
        dout => grp_fu_345_p2);

    minver_hwa_dcmp_6eOg_U5 : component minver_hwa_dcmp_6eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => w_4_reg_1165,
        din1 => wmax_phi_fu_247_p4,
        opcode => ap_const_lv5_2,
        dout => tmp_46_fu_350_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond6_fu_464_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_417_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_fu_464_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_417_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond6_fu_464_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond5_fu_811_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_lv1_0 = exitcond5_reg_1223))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and not((ap_const_lv1_0 = exitcond5_reg_1223))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = exitcond4_fu_847_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond4_fu_847_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = exitcond4_fu_847_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter27 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter28 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter29 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter30 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter31 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter31 <= ap_enable_reg_pp2_iter30;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter32 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter32 <= ap_enable_reg_pp2_iter31;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter33 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter33 <= ap_enable_reg_pp2_iter32;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
            end if;
        end if;
    end process;


    i_2_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond4_fu_847_p2))) then 
                i_2_reg_276 <= i_8_fu_853_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
                i_2_reg_276 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_3_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
                i_3_reg_287 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state104))) then 
                i_3_reg_287 <= i_9_reg_1262;
            end if; 
        end if;
    end process;

    i_4_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_2_fu_417_p2)))) then 
                i_4_reg_309 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state138) and not((ap_const_lv1_0 = tmp_7_fu_1037_p2)))) then 
                i_4_reg_309 <= i_7_reg_1342;
            end if; 
        end if;
    end process;

    i_5_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond7_fu_395_p2)))) then 
                i_5_reg_231 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state135))) then 
                i_5_reg_231 <= k_reg_1116;
            end if; 
        end if;
    end process;

    i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond7_fu_395_p2))) then 
                i_reg_219 <= i_1_fu_401_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_219 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_1_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state57) and (ap_const_lv1_0 = tmp_52_fu_959_p2))) then 
                j_1_reg_298 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
                j_1_reg_298 <= j_5_reg_1294;
            end if; 
        end if;
    end process;

    j_2_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state143))) then 
                j_2_reg_321 <= j_4_reg_1385;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state140))) then 
                j_2_reg_321 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond5_reg_1223) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                j_reg_265 <= j_3_reg_1227;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                j_reg_265 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_1_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_417_p2))) then 
                r_1_reg_255 <= i_5_cast7_fu_429_p1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_1151 = ap_const_lv1_0))) then 
                r_1_reg_255 <= i_6_reg_1160;
            end if; 
        end if;
    end process;

    r_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1151))) then 
                r_fu_80 <= r_2_fu_658_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond7_fu_395_p2)))) then 
                r_fu_80 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state138))) then 
                reg_365 <= work_q1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                reg_365 <= work_q0;
            end if; 
        end if;
    end process;

    reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond4_reg_1244)) or ((ap_const_lv1_1 = ap_CS_fsm_state56)))) then 
                reg_372 <= a_Dout_B;
            elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond5_reg_1223)) or ((ap_const_lv1_1 = ap_CS_fsm_state142)))) then 
                reg_372 <= a_Dout_A;
            end if; 
        end if;
    end process;

    reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state65))) then 
                reg_388 <= a_Dout_A;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
                reg_388 <= a_Dout_B;
            end if; 
        end if;
    end process;

    wmax_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_417_p2))) then 
                wmax_reg_243 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1151))) then 
                wmax_reg_243 <= wmax_1_reg_1177;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state58) and (ap_const_lv1_0 = exitcond2_fu_965_p2) and (ap_const_lv1_0 = tmp_19_fu_977_p2))) then
                a_addr_10_reg_1308 <= tmp_71_cast_fu_1002_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state140))) then
                a_addr_2_reg_1372 <= tmp_63_cast_fu_1080_p1(4 - 1 downto 0);
                    a_addr_3_reg_1377(3 downto 2) <= p_shl5_fu_1064_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond5_fu_811_p2))) then
                a_addr_4_reg_1232 <= tmp_64_cast_fu_832_p1(4 - 1 downto 0);
                a_addr_5_reg_1238 <= tmp_65_cast_fu_842_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond4_fu_847_p2))) then
                a_addr_6_reg_1253 <= tmp_66_cast_fu_868_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_417_p2))) then
                    a_addr_7_reg_1146(3 downto 2) <= p_shl_fu_449_p1(4 - 1 downto 0)(3 downto 2);
                    i_5_cast7_reg_1121(1 downto 0) <= i_5_cast7_fu_429_p1(1 downto 0);
                    tmp_3_cast_reg_1132(1 downto 0) <= tmp_3_cast_fu_437_p1(1 downto 0);
                    tmp_3_reg_1127(1 downto 0) <= tmp_3_fu_433_p1(1 downto 0);
                tmp_8_reg_1139 <= tmp_8_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = exitcond3_fu_873_p2) and (ap_const_lv1_0 = tmp_14_fu_885_p2))) then
                a_addr_8_reg_1276 <= tmp_69_cast_fu_918_p1(4 - 1 downto 0);
                tmp_65_reg_1271 <= tmp_65_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond6_reg_1151 <= exitcond6_reg_1151;
                ap_pipeline_reg_pp0_iter1_r_1_reg_255 <= r_1_reg_255;
                exitcond6_reg_1151 <= exitcond6_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                ap_pipeline_reg_pp0_iter2_exitcond6_reg_1151 <= ap_pipeline_reg_pp0_iter1_exitcond6_reg_1151;
                ap_pipeline_reg_pp0_iter2_r_1_reg_255 <= ap_pipeline_reg_pp0_iter1_r_1_reg_255;
                ap_pipeline_reg_pp0_iter3_exitcond6_reg_1151 <= ap_pipeline_reg_pp0_iter2_exitcond6_reg_1151;
                ap_pipeline_reg_pp0_iter3_r_1_reg_255 <= ap_pipeline_reg_pp0_iter2_r_1_reg_255;
                ap_pipeline_reg_pp2_iter10_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter9_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter10_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter9_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter11_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter10_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter11_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter10_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter12_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter11_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter12_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter11_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter13_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter12_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter13_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter12_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter14_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter13_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter14_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter13_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter15_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter14_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter15_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter14_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter16_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter15_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter16_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter15_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter17_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter16_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter17_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter16_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter18_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter17_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter18_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter17_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter19_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter18_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter19_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter18_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter20_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter19_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter20_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter19_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter21_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter20_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter21_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter20_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter22_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter21_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter22_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter21_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter23_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter22_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter23_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter22_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter24_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter23_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter24_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter23_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter25_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter24_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter25_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter24_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter26_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter25_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter26_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter25_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter27_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter26_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter27_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter26_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter28_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter27_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter28_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter27_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter29_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter28_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter29_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter28_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter2_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter1_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter2_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter1_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter30_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter29_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter30_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter29_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter31_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter30_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter31_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter30_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter32_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter31_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter32_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter31_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter3_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter2_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter3_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter2_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter4_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter3_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter4_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter3_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter5_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter4_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter5_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter4_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter6_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter5_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter6_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter5_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter7_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter6_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter7_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter6_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter8_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter7_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter8_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter7_exitcond4_reg_1244;
                ap_pipeline_reg_pp2_iter9_a_addr_6_reg_1253 <= ap_pipeline_reg_pp2_iter8_a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter9_exitcond4_reg_1244 <= ap_pipeline_reg_pp2_iter8_exitcond4_reg_1244;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                ap_pipeline_reg_pp1_iter1_a_addr_5_reg_1238 <= a_addr_5_reg_1238;
                ap_pipeline_reg_pp1_iter1_exitcond5_reg_1223 <= exitcond5_reg_1223;
                exitcond5_reg_1223 <= exitcond5_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0))) then
                ap_pipeline_reg_pp2_iter1_a_addr_6_reg_1253 <= a_addr_6_reg_1253;
                ap_pipeline_reg_pp2_iter1_exitcond4_reg_1244 <= exitcond4_reg_1244;
                exitcond4_reg_1244 <= exitcond4_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                api_reg_1198 <= api_fu_754_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_fu_464_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_6_reg_1160 <= i_6_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state136))) then
                i_7_reg_1342 <= i_7_fu_1022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55))) then
                i_9_reg_1262 <= i_9_fu_879_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                j_3_reg_1227 <= j_3_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state141))) then
                j_4_reg_1385 <= j_4_fu_1091_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then
                j_5_reg_1294 <= j_5_fu_971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                k_reg_1116 <= k_fu_423_p2;
                tmp_2_reg_1112 <= tmp_2_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                r_load_reg_1182 <= r_fu_80;
                tmp_15_reg_1188 <= tmp_15_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_1151 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)))) then
                reg_359 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp2_iter32) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter31_exitcond4_reg_1244)) or ((ap_const_lv1_1 = ap_CS_fsm_state134)))) then
                reg_382 <= grp_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = exitcond3_fu_873_p2))) then
                tmp_14_reg_1267 <= tmp_14_fu_885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state58) and not((ap_const_lv1_0 = exitcond2_fu_965_p2)))) then
                tmp_17_neg_reg_1314 <= tmp_17_neg_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state103))) then
                tmp_18_reg_1334 <= grp_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state58) and (ap_const_lv1_0 = exitcond2_fu_965_p2))) then
                tmp_19_reg_1299 <= tmp_19_fu_977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state65))) then
                tmp_21_reg_1319 <= grp_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state71))) then
                tmp_22_reg_1324 <= grp_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond6_reg_1151)) then
                tmp_47_reg_1172 <= tmp_47_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state57))) then
                tmp_52_reg_1287 <= tmp_52_fu_959_p2;
                w_3_to_int_reg_1282 <= w_3_to_int_fu_923_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state136) and (ap_const_lv1_0 = exitcond1_fu_1016_p2))) then
                    tmp_cast_reg_1347(1 downto 0) <= tmp_cast_fu_1033_p1(1 downto 0);
                    work_addr_1_reg_1352(1 downto 0) <= tmp_s_fu_1028_p1(9 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond6_reg_1151)) then
                w_4_reg_1165 <= w_4_fu_560_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond6_reg_1151) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then
                wmax_1_reg_1177 <= wmax_1_fu_651_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state138) and (ap_const_lv1_0 = tmp_7_fu_1037_p2))) then
                    work_addr_2_reg_1361(1 downto 0) <= tmp_9_fu_1043_p1(9 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_2_reg_1112) and (ap_const_lv1_0 = tmp_33_fu_801_p2) and (ap_const_lv1_0 = tmp_1_fu_807_p2))) then
                    work_addr_3_reg_1211(1 downto 0) <= tmp_3_reg_1127(9 - 1 downto 0)(1 downto 0);
                work_addr_4_reg_1217 <= tmp_4_fu_762_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state139))) then
                work_load_1_reg_1367 <= work_q0;
            end if;
        end if;
    end process;
    i_5_cast7_reg_1121(31 downto 2) <= "000000000000000000000000000000";
    tmp_3_reg_1127(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    tmp_3_cast_reg_1132(4 downto 2) <= "000";
    a_addr_7_reg_1146(1 downto 0) <= "00";
    work_addr_3_reg_1211(8 downto 2) <= "0000000";
    tmp_cast_reg_1347(4 downto 2) <= "000";
    work_addr_1_reg_1352(8 downto 2) <= "0000000";
    work_addr_2_reg_1361(8 downto 2) <= "0000000";
    a_addr_3_reg_1377(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter32, tmp_2_fu_417_p2, tmp_2_reg_1112, exitcond6_fu_464_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, tmp_1_fu_807_p2, tmp_33_fu_801_p2, exitcond5_fu_811_p2, exitcond4_fu_847_p2, ap_enable_reg_pp2_iter0, tmp_14_fu_885_p2, exitcond3_fu_873_p2, tmp_52_fu_959_p2, tmp_19_fu_977_p2, exitcond2_fu_965_p2, exitcond1_fu_1016_p2, tmp_7_fu_1037_p2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, exitcond7_fu_395_p2, exitcond_fu_1085_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_395_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = tmp_2_fu_417_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state136;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond6_fu_464_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond6_fu_464_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not((ap_const_lv1_0 = tmp_2_reg_1112)) or not((ap_const_lv1_0 = tmp_33_fu_801_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_lv1_0 = tmp_2_reg_1112) and (ap_const_lv1_0 = tmp_33_fu_801_p2) and not((ap_const_lv1_0 = tmp_1_fu_807_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond5_fu_811_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter33) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter32)))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_847_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_847_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((ap_const_lv1_0 = exitcond3_fu_873_p2) and not((ap_const_lv1_0 = tmp_14_fu_885_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                elsif (((ap_const_lv1_0 = exitcond3_fu_873_p2) and (ap_const_lv1_0 = tmp_14_fu_885_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if ((ap_const_lv1_0 = tmp_52_fu_959_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_lv1_0 = exitcond2_fu_965_p2) and not((ap_const_lv1_0 = tmp_19_fu_977_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                elsif (((ap_const_lv1_0 = exitcond2_fu_965_p2) and (ap_const_lv1_0 = tmp_19_fu_977_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state136 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_1016_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state137;
                end if;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                if (not((ap_const_lv1_0 = tmp_7_fu_1037_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state136;
                else
                    ap_NS_fsm <= ap_ST_fsm_state139;
                end if;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                if ((ap_const_lv1_0 = exitcond_fu_1085_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state142;
                else
                    ap_NS_fsm <= ap_ST_fsm_state144;
                end if;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state142, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_pipeline_reg_pp1_iter1_a_addr_5_reg_1238, ap_pipeline_reg_pp2_iter32_a_addr_6_reg_1253, a_addr_8_reg_1276, a_addr_10_reg_1308, a_addr_2_reg_1372, ap_CS_fsm_state141, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, ap_CS_fsm_state104, tmp_60_cast_fu_497_p1, tmp_57_cast_fu_697_p1, tmp_64_cast_fu_832_p1, ap_CS_fsm_state64)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state142)) or ((ap_const_lv1_1 = ap_CS_fsm_state141)))) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(a_addr_2_reg_1372),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state104))) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(a_addr_8_reg_1276),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state64))) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(a_addr_10_reg_1308),32));
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter33)) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp2_iter32_a_addr_6_reg_1253),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp1_iter1_a_addr_5_reg_1238),32));
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then 
            a_Addr_A_orig <= tmp_64_cast_fu_832_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            a_Addr_A_orig <= tmp_57_cast_fu_697_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_Addr_A_orig <= tmp_60_cast_fu_497_p1(32 - 1 downto 0);
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Addr_B <= std_logic_vector(shift_left(unsigned(a_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    a_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, a_addr_7_reg_1146, ap_CS_fsm_pp1_stage0, a_addr_4_reg_1232, ap_enable_reg_pp2_iter0, ap_CS_fsm_state55, ap_CS_fsm_state58, a_addr_10_reg_1308, a_addr_3_reg_1377, ap_CS_fsm_state141, ap_CS_fsm_state135, ap_CS_fsm_state72, ap_CS_fsm_state143, tmp_65_cast_fu_842_p1, tmp_66_cast_fu_868_p1, tmp_69_cast_fu_918_p1, tmp_70_cast_fu_992_p1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state141)) or ((ap_const_lv1_1 = ap_CS_fsm_state143)))) then 
            a_Addr_B_orig <= std_logic_vector(resize(unsigned(a_addr_3_reg_1377),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state135))) then 
            a_Addr_B_orig <= std_logic_vector(resize(unsigned(a_addr_7_reg_1146),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
            a_Addr_B_orig <= std_logic_vector(resize(unsigned(a_addr_10_reg_1308),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            a_Addr_B_orig <= tmp_70_cast_fu_992_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            a_Addr_B_orig <= tmp_69_cast_fu_918_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            a_Addr_B_orig <= tmp_66_cast_fu_868_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            a_Addr_B_orig <= std_logic_vector(resize(unsigned(a_addr_4_reg_1232),32));
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then 
            a_Addr_B_orig <= tmp_65_cast_fu_842_p1(32 - 1 downto 0);
        else 
            a_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Clk_B <= ap_clk;

    a_Din_A_assign_proc : process(a_Dout_B, reg_372, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state142, reg_382, tmp_18_reg_1334, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, ap_CS_fsm_state104)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state142))) then 
            a_Din_A <= a_Dout_B;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state104))) then 
            a_Din_A <= tmp_18_reg_1334;
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter33)) then 
            a_Din_A <= reg_382;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            a_Din_A <= reg_372;
        else 
            a_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_Din_B_assign_proc : process(a_Dout_B, reg_372, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, reg_382, tmp_22_reg_1324, ap_CS_fsm_state135, ap_CS_fsm_state72, ap_CS_fsm_state143)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state143))) then 
            a_Din_B <= reg_372;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state135))) then 
            a_Din_B <= reg_382;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
            a_Din_B <= tmp_22_reg_1324;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            a_Din_B <= a_Dout_B;
        else 
            a_Din_B <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state142, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state141, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, ap_CS_fsm_state104, ap_CS_fsm_state64)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state142)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_state141)) or ((ap_const_lv1_1 = ap_CS_fsm_state104)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or (ap_const_logic_1 = ap_enable_reg_pp2_iter33) or ((ap_const_lv1_1 = ap_CS_fsm_state64)))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    a_EN_B_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state55, ap_CS_fsm_state58, ap_CS_fsm_state141, ap_CS_fsm_state135, ap_CS_fsm_state72, ap_CS_fsm_state143)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state55)) or ((ap_const_lv1_1 = ap_CS_fsm_state58)) or ((ap_const_lv1_1 = ap_CS_fsm_state141)) or ((ap_const_lv1_1 = ap_CS_fsm_state135)) or ((ap_const_lv1_1 = ap_CS_fsm_state72)) or ((ap_const_lv1_1 = ap_CS_fsm_state143)))) then 
            a_EN_B <= ap_const_logic_1;
        else 
            a_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;
    a_Rst_B <= ap_rst;

    a_WEN_A_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_state142, ap_pipeline_reg_pp1_iter1_exitcond5_reg_1223, ap_pipeline_reg_pp2_iter32_exitcond4_reg_1244, tmp_14_reg_1267, tmp_52_reg_1287, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, ap_CS_fsm_state104)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state142)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond5_reg_1223)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter33) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter32_exitcond4_reg_1244)) or ((ap_const_lv1_1 = ap_CS_fsm_state104) and (ap_const_lv1_0 = tmp_14_reg_1267) and (ap_const_lv1_0 = tmp_52_reg_1287)))) then 
            a_WEN_A <= ap_const_lv8_FF;
        else 
            a_WEN_A <= ap_const_lv8_0;
        end if; 
    end process;


    a_WEN_B_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, exitcond5_reg_1223, tmp_19_reg_1299, ap_CS_fsm_state135, ap_CS_fsm_state72, ap_CS_fsm_state143)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond5_reg_1223)) or ((ap_const_lv1_1 = ap_CS_fsm_state135)) or ((ap_const_lv1_1 = ap_CS_fsm_state143)) or ((ap_const_lv1_1 = ap_CS_fsm_state72) and (ap_const_lv1_0 = tmp_19_reg_1299)))) then 
            a_WEN_B <= ap_const_lv8_FF;
        else 
            a_WEN_B <= ap_const_lv8_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state103 <= ap_CS_fsm(63 downto 63);
    ap_CS_fsm_state104 <= ap_CS_fsm(64 downto 64);
    ap_CS_fsm_state11 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state134 <= ap_CS_fsm(94 downto 94);
    ap_CS_fsm_state135 <= ap_CS_fsm(95 downto 95);
    ap_CS_fsm_state136 <= ap_CS_fsm(96 downto 96);
    ap_CS_fsm_state137 <= ap_CS_fsm(97 downto 97);
    ap_CS_fsm_state138 <= ap_CS_fsm(98 downto 98);
    ap_CS_fsm_state139 <= ap_CS_fsm(99 downto 99);
    ap_CS_fsm_state14 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state140 <= ap_CS_fsm(100 downto 100);
    ap_CS_fsm_state141 <= ap_CS_fsm(101 downto 101);
    ap_CS_fsm_state142 <= ap_CS_fsm(102 downto 102);
    ap_CS_fsm_state143 <= ap_CS_fsm(103 downto 103);
    ap_CS_fsm_state19 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state54 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state55 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state56 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state57 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state58 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state59 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state60 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state64 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state65 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state66 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state71 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state72 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state73 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state9 <= ap_CS_fsm(4 downto 4);

    ap_done_assign_proc : process(tmp_2_reg_1112, ap_CS_fsm_state12, tmp_33_fu_801_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (not((ap_const_lv1_0 = tmp_2_reg_1112)) or not((ap_const_lv1_0 = tmp_33_fu_801_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_2_reg_1112, ap_CS_fsm_state12, tmp_33_fu_801_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (not((ap_const_lv1_0 = tmp_2_reg_1112)) or not((ap_const_lv1_0 = tmp_33_fu_801_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_1;
    api_fu_754_p3 <= 
        reg_359 when (tmp_28_fu_738_p2(0) = '1') else 
        f_fu_750_p1;
    api_to_int_fu_766_p1 <= api_reg_1198;
    exitcond1_fu_1016_p2 <= "1" when (i_4_reg_309 = ap_const_lv2_3) else "0";
    exitcond2_fu_965_p2 <= "1" when (j_1_reg_298 = ap_const_lv2_3) else "0";
    exitcond3_fu_873_p2 <= "1" when (i_3_reg_287 = ap_const_lv2_3) else "0";
    exitcond4_fu_847_p2 <= "1" when (i_2_reg_276 = ap_const_lv2_3) else "0";
    exitcond5_fu_811_p2 <= "1" when (j_phi_fu_269_p4 = ap_const_lv2_3) else "0";
    exitcond6_fu_464_p2 <= "1" when (r_1_phi_fu_258_p4 = ap_const_lv32_3) else "0";
    exitcond7_fu_395_p2 <= "1" when (i_reg_219 = ap_const_lv2_3) else "0";
    exitcond_fu_1085_p2 <= "1" when (j_2_reg_321 = ap_const_lv2_3) else "0";
    f_1_fu_556_p1 <= f_neg_i_fu_550_p2;
    f_fu_750_p1 <= f_neg_i1_fu_744_p2;
    f_neg_i1_fu_744_p2 <= (pivot_to_int_fu_702_p1 xor ap_const_lv64_8000000000000000);
    f_neg_i_fu_550_p2 <= (n_assign_1_to_int_fu_508_p1 xor ap_const_lv64_8000000000000000);

    grp_fu_340_p0_assign_proc : process(reg_372, ap_CS_fsm_state55, tmp_17_fu_1012_p1, ap_CS_fsm_state73, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state73))) then 
            grp_fu_340_p0 <= tmp_17_fu_1012_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            grp_fu_340_p0 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter2)) then 
            grp_fu_340_p0 <= reg_372;
        else 
            grp_fu_340_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_345_opcode_assign_proc : process(tmp_2_reg_1112, ap_pipeline_reg_pp0_iter1_exitcond6_reg_1151, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state57, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state57))) then 
            grp_fu_345_opcode <= ap_const_lv5_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_2_reg_1112))) then 
            grp_fu_345_opcode <= ap_const_lv5_5;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond6_reg_1151) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            grp_fu_345_opcode <= ap_const_lv5_3;
        else 
            grp_fu_345_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_345_p0_assign_proc : process(reg_359, reg_372, api_reg_1198, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state57, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state57))) then 
            grp_fu_345_p0 <= reg_372;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_345_p0 <= api_reg_1198;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            grp_fu_345_p0 <= reg_359;
        else 
            grp_fu_345_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_345_p1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state57, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_345_p1 <= ap_const_lv64_3EB0C6F7A0B5ED8D;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state57)) or (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            grp_fu_345_p1 <= ap_const_lv64_0;
        else 
            grp_fu_345_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_401_p2 <= std_logic_vector(unsigned(i_reg_219) + unsigned(ap_const_lv2_1));
    i_5_cast7_fu_429_p1 <= std_logic_vector(resize(unsigned(i_5_reg_231),32));
    i_6_fu_502_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(r_1_phi_fu_258_p4));
    i_7_fu_1022_p2 <= std_logic_vector(unsigned(i_4_reg_309) + unsigned(ap_const_lv2_1));
    i_8_fu_853_p2 <= std_logic_vector(unsigned(i_2_reg_276) + unsigned(ap_const_lv2_1));
    i_9_fu_879_p2 <= std_logic_vector(unsigned(i_3_reg_287) + unsigned(ap_const_lv2_1));
    j_3_fu_817_p2 <= std_logic_vector(unsigned(j_phi_fu_269_p4) + unsigned(ap_const_lv2_1));
    j_4_fu_1091_p2 <= std_logic_vector(unsigned(j_2_reg_321) + unsigned(ap_const_lv2_1));
    j_5_fu_971_p2 <= std_logic_vector(unsigned(j_1_reg_298) + unsigned(ap_const_lv2_1));

    j_phi_fu_269_p4_assign_proc : process(j_reg_265, exitcond5_reg_1223, ap_CS_fsm_pp1_stage0, j_3_reg_1227, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_lv1_0 = exitcond5_reg_1223) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            j_phi_fu_269_p4 <= j_3_reg_1227;
        else 
            j_phi_fu_269_p4 <= j_reg_265;
        end if; 
    end process;

    k_fu_423_p2 <= std_logic_vector(unsigned(i_5_reg_231) + unsigned(ap_const_lv2_1));
    n_assign_1_to_int_fu_508_p1 <= reg_359;
    notlhs1_fu_720_p2 <= "0" when (tmp_5_fu_706_p4 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_783_p2 <= "0" when (tmp_29_fu_769_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_603_p2 <= "0" when (tmp_39_fu_571_p4 = ap_const_lv11_7FF) else "1";
    notlhs4_fu_621_p2 <= "0" when (tmp_41_fu_589_p4 = ap_const_lv11_7FF) else "1";
    notlhs5_fu_941_p2 <= "0" when (tmp_48_fu_927_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_526_p2 <= "0" when (tmp_34_fu_512_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_726_p2 <= "1" when (tmp_30_fu_716_p1 = ap_const_lv52_0) else "0";
    notrhs2_fu_789_p2 <= "1" when (tmp_35_fu_779_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_609_p2 <= "1" when (tmp_55_fu_581_p1 = ap_const_lv52_0) else "0";
    notrhs4_fu_627_p2 <= "1" when (tmp_56_fu_599_p1 = ap_const_lv52_0) else "0";
    notrhs5_fu_947_p2 <= "1" when (tmp_67_fu_937_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_532_p2 <= "1" when (tmp_54_fu_522_p1 = ap_const_lv52_0) else "0";
    p_shl2_cast_fu_478_p3 <= (tmp_42_fu_474_p1 & ap_const_lv2_0);
    p_shl3_cast_fu_678_p3 <= (tmp_11_fu_674_p1 & ap_const_lv2_0);
    p_shl4_cast_fu_903_p1 <= std_logic_vector(resize(unsigned(tmp_64_fu_895_p3),5));
    p_shl5_fu_1064_p1 <= std_logic_vector(resize(unsigned(tmp_57_fu_1052_p3),64));
    p_shl_cast_fu_454_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_441_p3),5));
    p_shl_fu_449_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_441_p3),64));
    pivot_to_int_fu_702_p1 <= reg_359;

    r_1_phi_fu_258_p4_assign_proc : process(r_1_reg_255, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond6_reg_1151, i_6_reg_1160)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_1151 = ap_const_lv1_0))) then 
            r_1_phi_fu_258_p4 <= i_6_reg_1160;
        else 
            r_1_phi_fu_258_p4 <= r_1_reg_255;
        end if; 
    end process;

    r_2_fu_658_p3 <= 
        ap_pipeline_reg_pp0_iter3_r_1_reg_255 when (tmp_47_reg_1172(0) = '1') else 
        r_fu_80;
    tmp_10_cast_fu_823_p1 <= std_logic_vector(resize(unsigned(j_phi_fu_269_p4),5));
    tmp_10_fu_670_p1 <= r_fu_80(5 - 1 downto 0);
    tmp_11_cast_fu_859_p1 <= std_logic_vector(resize(unsigned(i_2_reg_276),5));
    tmp_11_fu_674_p1 <= r_fu_80(3 - 1 downto 0);
    tmp_14_fu_885_p2 <= "1" when (i_3_reg_287 = i_5_reg_231) else "0";
    tmp_15_cast_fu_891_p1 <= std_logic_vector(resize(unsigned(i_3_reg_287),5));
    tmp_15_fu_686_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_678_p3) - unsigned(tmp_10_fu_670_p1));
    tmp_16_fu_732_p2 <= (notrhs1_fu_726_p2 or notlhs1_fu_720_p2);
    tmp_17_fu_1012_p1 <= tmp_17_neg_reg_1314;
    tmp_17_neg_fu_1007_p2 <= (w_3_to_int_reg_1282 xor ap_const_lv64_8000000000000000);
    tmp_19_fu_977_p2 <= "1" when (j_1_reg_298 = i_5_reg_231) else "0";
    tmp_1_fu_807_p2 <= "1" when (r_load_reg_1182 = i_5_cast7_reg_1121) else "0";
    tmp_20_cast_fu_983_p1 <= std_logic_vector(resize(unsigned(j_1_reg_298),5));
    tmp_20_fu_692_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1132) + unsigned(tmp_15_fu_686_p2));
    tmp_28_fu_738_p2 <= (tmp_16_fu_732_p2 and grp_fu_345_p2);
    tmp_29_fu_769_p4 <= api_to_int_fu_766_p1(62 downto 52);
    tmp_2_fu_417_p2 <= "1" when (i_5_reg_231 = ap_const_lv2_3) else "0";
    tmp_30_fu_716_p1 <= pivot_to_int_fu_702_p1(52 - 1 downto 0);
    tmp_31_fu_795_p2 <= (notrhs2_fu_789_p2 or notlhs2_fu_783_p2);
    tmp_33_fu_801_p2 <= (tmp_31_fu_795_p2 and grp_fu_345_p2);
    tmp_34_fu_512_p4 <= n_assign_1_to_int_fu_508_p1(62 downto 52);
    tmp_35_fu_779_p1 <= api_to_int_fu_766_p1(52 - 1 downto 0);
    tmp_36_fu_538_p2 <= (notrhs_fu_532_p2 or notlhs_fu_526_p2);
    tmp_38_fu_544_p2 <= (tmp_36_fu_538_p2 and grp_fu_345_p2);
    tmp_39_fu_571_p4 <= w_4_to_int_fu_568_p1(62 downto 52);
    tmp_3_cast_fu_437_p1 <= std_logic_vector(resize(unsigned(i_5_reg_231),5));
    tmp_3_fu_433_p1 <= std_logic_vector(resize(unsigned(i_5_reg_231),64));
    tmp_40_fu_470_p1 <= r_1_phi_fu_258_p4(5 - 1 downto 0);
    tmp_41_fu_589_p4 <= wmax_to_int_fu_585_p1(62 downto 52);
    tmp_42_fu_474_p1 <= r_1_phi_fu_258_p4(3 - 1 downto 0);
    tmp_43_fu_615_p2 <= (notrhs3_fu_609_p2 or notlhs3_fu_603_p2);
    tmp_44_fu_633_p2 <= (notrhs4_fu_627_p2 or notlhs4_fu_621_p2);
    tmp_45_fu_639_p2 <= (tmp_43_fu_615_p2 and tmp_44_fu_633_p2);
    tmp_47_fu_645_p2 <= (tmp_45_fu_639_p2 and tmp_46_fu_350_p2);
    tmp_48_fu_927_p4 <= w_3_to_int_fu_923_p1(62 downto 52);
    tmp_49_fu_486_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_478_p3) - unsigned(tmp_40_fu_470_p1));
        tmp_4_fu_762_p1 <= std_logic_vector(resize(signed(r_load_reg_1182),64));

    tmp_50_fu_953_p2 <= (notrhs5_fu_947_p2 or notlhs5_fu_941_p2);
    tmp_52_fu_959_p2 <= (tmp_50_fu_953_p2 and grp_fu_345_p2);
    tmp_53_fu_492_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1132) + unsigned(tmp_49_fu_486_p2));
    tmp_54_fu_522_p1 <= n_assign_1_to_int_fu_508_p1(52 - 1 downto 0);
    tmp_55_fu_581_p1 <= w_4_to_int_fu_568_p1(52 - 1 downto 0);
    tmp_56_fu_599_p1 <= wmax_to_int_fu_585_p1(52 - 1 downto 0);
        tmp_57_cast_fu_697_p1 <= std_logic_vector(resize(signed(tmp_20_fu_692_p2),64));

    tmp_57_fu_1052_p3 <= (reg_365 & ap_const_lv2_0);
    tmp_58_fu_1060_p1 <= std_logic_vector(resize(unsigned(tmp_57_fu_1052_p3),5));
    tmp_59_fu_1069_p2 <= std_logic_vector(unsigned(tmp_58_fu_1060_p1) - unsigned(tmp_9_cast_fu_1048_p1));
    tmp_5_fu_706_p4 <= pivot_to_int_fu_702_p1(62 downto 52);
        tmp_60_cast_fu_497_p1 <= std_logic_vector(resize(signed(tmp_53_fu_492_p2),64));

    tmp_60_fu_1075_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1347) + unsigned(tmp_59_fu_1069_p2));
    tmp_61_fu_827_p2 <= std_logic_vector(unsigned(tmp_8_reg_1139) + unsigned(tmp_10_cast_fu_823_p1));
    tmp_62_fu_837_p2 <= std_logic_vector(unsigned(tmp_15_reg_1188) + unsigned(tmp_10_cast_fu_823_p1));
        tmp_63_cast_fu_1080_p1 <= std_logic_vector(resize(signed(tmp_60_fu_1075_p2),64));

    tmp_63_fu_863_p2 <= std_logic_vector(unsigned(tmp_8_reg_1139) + unsigned(tmp_11_cast_fu_859_p1));
        tmp_64_cast_fu_832_p1 <= std_logic_vector(resize(signed(tmp_61_fu_827_p2),64));

    tmp_64_fu_895_p3 <= (i_3_reg_287 & ap_const_lv2_0);
        tmp_65_cast_fu_842_p1 <= std_logic_vector(resize(signed(tmp_62_fu_837_p2),64));

    tmp_65_fu_907_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_903_p1) - unsigned(tmp_15_cast_fu_891_p1));
        tmp_66_cast_fu_868_p1 <= std_logic_vector(resize(signed(tmp_63_fu_863_p2),64));

    tmp_66_fu_913_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1132) + unsigned(tmp_65_fu_907_p2));
    tmp_67_fu_937_p1 <= w_3_to_int_fu_923_p1(52 - 1 downto 0);
    tmp_68_fu_987_p2 <= std_logic_vector(unsigned(tmp_8_reg_1139) + unsigned(tmp_20_cast_fu_983_p1));
        tmp_69_cast_fu_918_p1 <= std_logic_vector(resize(signed(tmp_66_fu_913_p2),64));

    tmp_69_fu_997_p2 <= std_logic_vector(unsigned(tmp_65_reg_1271) + unsigned(tmp_20_cast_fu_983_p1));
    tmp_6_fu_441_p3 <= (i_5_reg_231 & ap_const_lv2_0);
        tmp_70_cast_fu_992_p1 <= std_logic_vector(resize(signed(tmp_68_fu_987_p2),64));

        tmp_71_cast_fu_1002_p1 <= std_logic_vector(resize(signed(tmp_69_fu_997_p2),64));

    tmp_7_fu_1037_p2 <= "1" when (work_q1 = i_4_reg_309) else "0";
    tmp_8_fu_458_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_454_p1) - unsigned(tmp_3_cast_fu_437_p1));
    tmp_9_cast_fu_1048_p1 <= std_logic_vector(resize(unsigned(reg_365),5));
    tmp_9_fu_1043_p1 <= std_logic_vector(resize(unsigned(work_q1),64));
    tmp_cast_fu_1033_p1 <= std_logic_vector(resize(unsigned(i_4_reg_309),5));
    tmp_fu_407_p1 <= std_logic_vector(resize(unsigned(i_reg_219),64));
    tmp_s_fu_1028_p1 <= std_logic_vector(resize(unsigned(i_4_reg_309),64));
    w_3_to_int_fu_923_p1 <= reg_372;
    w_4_fu_560_p3 <= 
        reg_359 when (tmp_38_fu_544_p2(0) = '1') else 
        f_1_fu_556_p1;
    w_4_to_int_fu_568_p1 <= w_4_reg_1165;
    wmax_1_fu_651_p3 <= 
        w_4_reg_1165 when (tmp_47_fu_645_p2(0) = '1') else 
        wmax_phi_fu_247_p4;

    wmax_phi_fu_247_p4_assign_proc : process(wmax_reg_243, ap_pipeline_reg_pp0_iter3_exitcond6_reg_1151, wmax_1_reg_1177, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1151))) then 
            wmax_phi_fu_247_p4 <= wmax_1_reg_1177;
        else 
            wmax_phi_fu_247_p4 <= wmax_reg_243;
        end if; 
    end process;

    wmax_to_int_fu_585_p1 <= wmax_phi_fu_247_p4;

    work_address0_assign_proc : process(ap_CS_fsm_state138, ap_CS_fsm_state2, tmp_3_reg_1127, ap_CS_fsm_state12, work_addr_4_reg_1217, work_addr_1_reg_1352, ap_CS_fsm_state140, ap_CS_fsm_state14, tmp_fu_407_p1, tmp_9_fu_1043_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state140))) then 
            work_address0 <= work_addr_1_reg_1352;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state138))) then 
            work_address0 <= tmp_9_fu_1043_p1(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_address0 <= work_addr_4_reg_1217;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            work_address0 <= tmp_3_reg_1127(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            work_address0 <= tmp_fu_407_p1(9 - 1 downto 0);
        else 
            work_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    work_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state12, work_addr_3_reg_1211, work_addr_1_reg_1352, work_addr_2_reg_1361, ap_CS_fsm_state139, tmp_4_fu_762_p1, ap_CS_fsm_state137)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state139))) then 
            work_address1 <= work_addr_2_reg_1361;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state137))) then 
            work_address1 <= work_addr_1_reg_1352;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_address1 <= work_addr_3_reg_1211;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            work_address1 <= tmp_4_fu_762_p1(9 - 1 downto 0);
        else 
            work_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    work_ce0_assign_proc : process(ap_CS_fsm_state138, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state140, ap_CS_fsm_state14)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state138)) or ((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state140)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then 
            work_ce0 <= ap_const_logic_1;
        else 
            work_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    work_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state139, ap_CS_fsm_state137)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state139)) or ((ap_const_lv1_1 = ap_CS_fsm_state137)))) then 
            work_ce1 <= ap_const_logic_1;
        else 
            work_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    work_d0_assign_proc : process(reg_365, ap_CS_fsm_state2, work_load_1_reg_1367, ap_CS_fsm_state140, ap_CS_fsm_state14, i_reg_219)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state140))) then 
            work_d0 <= work_load_1_reg_1367;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_d0 <= reg_365;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            work_d0 <= i_reg_219;
        else 
            work_d0 <= "XX";
        end if; 
    end process;


    work_d1_assign_proc : process(reg_365, ap_CS_fsm_state13, work_q1, ap_CS_fsm_state139)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state139))) then 
            work_d1 <= reg_365;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_d1 <= work_q1;
        else 
            work_d1 <= "XX";
        end if; 
    end process;


    work_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state140, ap_CS_fsm_state14, exitcond7_fu_395_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state140)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond7_fu_395_p2)))) then 
            work_we0 <= ap_const_logic_1;
        else 
            work_we0 <= ap_const_logic_0;
        end if; 
    end process;


    work_we1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state139)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state139)))) then 
            work_we1 <= ap_const_logic_1;
        else 
            work_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
