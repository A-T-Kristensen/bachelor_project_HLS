-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity minver_minver_hwa is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    minver_a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    minver_a_EN_A : OUT STD_LOGIC;
    minver_a_WEN_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    minver_a_Din_A : OUT STD_LOGIC_VECTOR (63 downto 0);
    minver_a_Dout_A : IN STD_LOGIC_VECTOR (63 downto 0);
    minver_a_Clk_A : OUT STD_LOGIC;
    minver_a_Rst_A : OUT STD_LOGIC;
    minver_a_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    minver_a_EN_B : OUT STD_LOGIC;
    minver_a_WEN_B : OUT STD_LOGIC_VECTOR (7 downto 0);
    minver_a_Din_B : OUT STD_LOGIC_VECTOR (63 downto 0);
    minver_a_Dout_B : IN STD_LOGIC_VECTOR (63 downto 0);
    minver_a_Clk_B : OUT STD_LOGIC;
    minver_a_Rst_B : OUT STD_LOGIC;
    side : IN STD_LOGIC_VECTOR (31 downto 0);
    eps : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of minver_minver_hwa is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "minver_minver_hwa,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.635500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=14,HLS_SYN_FF=5668,HLS_SYN_LUT=6740}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (106 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (106 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (106 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (106 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (106 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (106 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (106 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (106 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (106 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (106 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (106 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv12_3E7 : STD_LOGIC_VECTOR (11 downto 0) := "001111100111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_1_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter1_r_1_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter2_r_1_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter3_r_1_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal wmax_reg_287 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_299 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_310 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_410 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_5_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state143 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal work_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_417 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal work_q1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal reg_424 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond5_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_391_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_433 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter32 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp2_iter31_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state135 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal reg_439 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_8_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1296 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_535_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_5_cast_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_560_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_reg_1329 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1334 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_570_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_reg_1339 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_599_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_reg_1346 : STD_LOGIC_VECTOR (4 downto 0);
    signal minver_a_addr_7_reg_1353 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal w_4_fu_700_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_4_reg_1372 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_1379 : STD_LOGIC_VECTOR (0 downto 0);
    signal wmax_1_fu_791_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal wmax_1_reg_1384 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal r_load_reg_1389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_65_fu_826_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_reg_1395 : STD_LOGIC_VECTOR (4 downto 0);
    signal api_fu_894_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal api_reg_1405 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_9_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_59_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_2_reg_1418 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_addr_3_reg_1424 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_pipeline_reg_pp1_iter1_exitcond5_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_965_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_reg_1434 : STD_LOGIC_VECTOR (8 downto 0);
    signal minver_a_addr_4_reg_1439 : STD_LOGIC_VECTOR (3 downto 0);
    signal minver_a_addr_5_reg_1445 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp1_iter1_minver_a_addr_5_reg_1445 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter1_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter2_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter3_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter4_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter5_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter6_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter7_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter8_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter9_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter10_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter11_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter12_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter13_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter14_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter15_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter16_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter17_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter18_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter19_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter20_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter21_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter22_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter23_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter24_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter25_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter26_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter27_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter28_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter29_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter30_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter32_exitcond4_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_1004_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter1_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter2_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter3_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter4_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter5_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter6_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter7_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter8_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter9_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter10_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter11_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter12_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter13_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter14_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter15_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter16_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter17_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter18_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter19_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter20_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter21_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter22_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter23_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter24_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter25_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter26_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter27_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter28_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter29_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter30_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter31_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter32_minver_a_addr_6_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_fu_1033_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_9_reg_1469 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tmp_16_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1474 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_1061_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_reg_1478 : STD_LOGIC_VECTOR (4 downto 0);
    signal minver_a_addr_8_reg_1483 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_3_to_int_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_3_to_int_reg_1489 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal tmp_64_fu_1113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_reg_1494 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_1128_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_5_reg_1501 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal tmp_21_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1506 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minver_a_addr_10_reg_1515 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_neg_fu_1164_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_neg_reg_1521 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1526 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1531 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp_19_fu_1169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal tmp_20_reg_1541 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal i_7_fu_1182_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_7_reg_1549 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal tmp_69_fu_1193_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_69_reg_1554 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_1_reg_1559 : STD_LOGIC_VECTOR (8 downto 0);
    signal minver_a_addr_2_reg_1568 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_4_reg_1573 : STD_LOGIC_VECTOR (8 downto 0);
    signal minver_a_addr_3_reg_1579 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_1262_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_4_reg_1587 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state142 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter33 : STD_LOGIC := '0';
    signal work_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce0 : STD_LOGIC;
    signal work_we0 : STD_LOGIC;
    signal work_d0 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce1 : STD_LOGIC;
    signal work_we1 : STD_LOGIC;
    signal work_d1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_253 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond6_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_265 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state136 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal r_1_phi_fu_280_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal wmax_phi_fu_291_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_phi_fu_303_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_321 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal j_1_reg_332 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal i_4_reg_343 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_355 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal ap_CS_fsm_state144 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal p_0_reg_366 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_cast_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_cast_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_cast_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_cast_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_cast_fu_1149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_cast_fu_1159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_cast_fu_1235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl5_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_2_fu_798_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal minver_a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal minver_a_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_fu_391_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_446_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal eps_to_int_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_471_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_481_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_574_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_587_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_591_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_38_fu_614_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_cast_fu_618_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_610_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_fu_626_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_47_fu_632_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_assign_to_int_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_652_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_52_fu_662_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i_fu_690_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_4_to_int_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wmax_to_int_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_711_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_53_fu_721_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs3_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_729_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_fu_739_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs4_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_814_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_cast_fu_818_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_56_fu_810_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_832_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal pivot_to_int_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_846_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_856_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs5_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i1_fu_884_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal api_to_int_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_909_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_919_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs6_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_971_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_73_fu_975_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_fu_985_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_cast_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_1010_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_75_fu_1014_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_cast_fu_1024_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_fu_1049_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl4_cast_fu_1053_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_84_fu_1045_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_78_fu_1067_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_fu_1081_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_86_fu_1091_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs8_fu_1101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_cast_fu_1119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_1140_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_79_fu_1144_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_80_fu_1154_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_cast_fu_1173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_1212_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl5_cast_fu_1216_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_70_fu_1208_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_71_fu_1224_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_72_fu_1230_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_76_fu_1240_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_cast_fu_1253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal grp_fu_396_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (106 downto 0);

    component minver_minver_hwacud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_minver_hwadEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_minver_hwaeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_minver_hwafYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component minver_minver_hwabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (8 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (8 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    work_U : component minver_minver_hwabkb
    generic map (
        DataWidth => 9,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => work_address0,
        ce0 => work_ce0,
        we0 => work_we0,
        d0 => work_d0,
        q0 => work_q0,
        address1 => work_address1,
        ce1 => work_ce1,
        we1 => work_we1,
        d1 => work_d1,
        q1 => work_q1);

    minver_minver_hwacud_U1 : component minver_minver_hwacud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_439,
        din1 => tmp_23_reg_1526,
        ce => ap_const_logic_1,
        dout => grp_fu_383_p2);

    minver_minver_hwadEe_U2 : component minver_minver_hwadEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_424,
        din1 => reg_439,
        ce => ap_const_logic_1,
        dout => grp_fu_387_p2);

    minver_minver_hwaeOg_U3 : component minver_minver_hwaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_391_p0,
        din1 => reg_410,
        ce => ap_const_logic_1,
        dout => grp_fu_391_p2);

    minver_minver_hwafYi_U4 : component minver_minver_hwafYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_396_p0,
        din1 => grp_fu_396_p1,
        opcode => grp_fu_396_opcode,
        dout => grp_fu_396_p2);

    minver_minver_hwafYi_U5 : component minver_minver_hwafYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => w_4_reg_1372,
        din1 => wmax_phi_fu_291_p4,
        opcode => ap_const_lv5_2,
        dout => tmp_44_fu_402_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = tmp_5_fu_605_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = tmp_3_fu_555_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_5_fu_605_p2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = tmp_3_fu_555_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = tmp_5_fu_605_p2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond5_fu_960_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_lv1_0 = exitcond5_reg_1430))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and not((ap_const_lv1_0 = exitcond5_reg_1430))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = exitcond4_fu_999_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond4_fu_999_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = exitcond4_fu_999_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter27 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter28 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter29 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter30 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter31 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter31 <= ap_enable_reg_pp2_iter30;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter32 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter32 <= ap_enable_reg_pp2_iter31;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter33 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter33 <= ap_enable_reg_pp2_iter32;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
            end if;
        end if;
    end process;


    i_2_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond4_fu_999_p2))) then 
                i_2_reg_310 <= i_8_fu_1004_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                i_2_reg_310 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_3_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
                i_3_reg_321 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state105))) then 
                i_3_reg_321 <= i_9_reg_1469;
            end if; 
        end if;
    end process;

    i_4_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_3_fu_555_p2))) then 
                i_4_reg_343 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state139) and not((ap_const_lv1_0 = tmp_10_fu_1197_p2)))) then 
                i_4_reg_343 <= i_7_reg_1549;
            end if; 
        end if;
    end process;

    i_5_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond6_fu_530_p2)))) then 
                i_5_reg_265 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state136))) then 
                i_5_reg_265 <= k_reg_1329;
            end if; 
        end if;
    end process;

    i_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = or_cond7_fu_520_p2)))) then 
                i_reg_253 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_530_p2))) then 
                i_reg_253 <= i_1_fu_535_p2;
            end if; 
        end if;
    end process;

    j_1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state58) and (ap_const_lv1_0 = tmp_64_fu_1113_p2))) then 
                j_1_reg_332 <= ap_const_lv9_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state73))) then 
                j_1_reg_332 <= j_5_reg_1501;
            end if; 
        end if;
    end process;

    j_2_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state144))) then 
                j_2_reg_355 <= j_4_reg_1587;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state141))) then 
                j_2_reg_355 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond5_reg_1430) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                j_reg_299 <= j_3_reg_1434;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
                j_reg_299 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_0_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_59_fu_946_p2)))) then 
                p_0_reg_366(1) <= '0';
                p_0_reg_366(2) <= '0';
                p_0_reg_366(5) <= '0';
                p_0_reg_366(6) <= '0';
                p_0_reg_366(7) <= '0';
                p_0_reg_366(8) <= '0';
                p_0_reg_366(9) <= '0';
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = or_cond7_fu_520_p2))) then 
                p_0_reg_366(1) <= '1';
                p_0_reg_366(2) <= '1';
                p_0_reg_366(5) <= '1';
                p_0_reg_366(6) <= '1';
                p_0_reg_366(7) <= '1';
                p_0_reg_366(8) <= '1';
                p_0_reg_366(9) <= '1';
            end if; 
        end if;
    end process;

    r_1_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = tmp_3_fu_555_p2)))) then 
                r_1_reg_277 <= i_5_cast_fu_551_p1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((tmp_5_reg_1358 = ap_const_lv1_0)))) then 
                r_1_reg_277 <= i_6_reg_1367;
            end if; 
        end if;
    end process;

    r_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358)))) then 
                r_fu_102 <= r_2_fu_798_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond6_fu_530_p2)))) then 
                r_fu_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state139))) then 
                reg_417 <= work_q1;
            elsif ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state140)))) then 
                reg_417 <= work_q0;
            end if; 
        end if;
    end process;

    reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond4_reg_1451)) or ((ap_const_lv1_1 = ap_CS_fsm_state57)))) then 
                reg_424 <= minver_a_Dout_B;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond5_reg_1430))) then 
                reg_424 <= minver_a_Dout_A;
            end if; 
        end if;
    end process;

    reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state66))) then 
                reg_439 <= minver_a_Dout_A;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state60))) then 
                reg_439 <= minver_a_Dout_B;
            end if; 
        end if;
    end process;

    wmax_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = tmp_3_fu_555_p2)))) then 
                wmax_reg_287 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358)))) then 
                wmax_reg_287 <= wmax_1_reg_1384;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_r_1_reg_277 <= r_1_reg_277;
                ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358 <= tmp_5_reg_1358;
                tmp_5_reg_1358 <= tmp_5_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                ap_pipeline_reg_pp0_iter2_r_1_reg_277 <= ap_pipeline_reg_pp0_iter1_r_1_reg_277;
                ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358 <= ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358;
                ap_pipeline_reg_pp0_iter3_r_1_reg_277 <= ap_pipeline_reg_pp0_iter2_r_1_reg_277;
                ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358 <= ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358;
                ap_pipeline_reg_pp2_iter10_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter9_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter10_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter9_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter11_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter10_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter11_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter10_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter12_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter11_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter12_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter11_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter13_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter12_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter13_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter12_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter14_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter13_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter14_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter13_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter15_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter14_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter15_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter14_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter16_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter15_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter16_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter15_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter17_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter16_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter17_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter16_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter18_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter17_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter18_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter17_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter19_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter18_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter19_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter18_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter20_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter19_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter20_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter19_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter21_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter20_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter21_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter20_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter22_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter21_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter22_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter21_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter23_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter22_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter23_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter22_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter24_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter23_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter24_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter23_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter25_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter24_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter25_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter24_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter26_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter25_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter26_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter25_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter27_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter26_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter27_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter26_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter28_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter27_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter28_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter27_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter29_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter28_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter29_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter28_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter2_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter1_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter2_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter1_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter30_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter29_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter30_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter29_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter31_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter30_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter31_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter30_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter32_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter31_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter32_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter31_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter3_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter2_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter3_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter2_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter4_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter3_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter4_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter3_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter5_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter4_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter5_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter4_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter6_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter5_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter6_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter5_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter7_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter6_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter7_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter6_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter8_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter7_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter8_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter7_minver_a_addr_6_reg_1460;
                ap_pipeline_reg_pp2_iter9_exitcond4_reg_1451 <= ap_pipeline_reg_pp2_iter8_exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter9_minver_a_addr_6_reg_1460 <= ap_pipeline_reg_pp2_iter8_minver_a_addr_6_reg_1460;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                ap_pipeline_reg_pp1_iter1_exitcond5_reg_1430 <= exitcond5_reg_1430;
                ap_pipeline_reg_pp1_iter1_minver_a_addr_5_reg_1445 <= minver_a_addr_5_reg_1445;
                exitcond5_reg_1430 <= exitcond5_fu_960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0))) then
                ap_pipeline_reg_pp2_iter1_exitcond4_reg_1451 <= exitcond4_reg_1451;
                ap_pipeline_reg_pp2_iter1_minver_a_addr_6_reg_1460 <= minver_a_addr_6_reg_1460;
                exitcond4_reg_1451 <= exitcond4_fu_999_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                api_reg_1405 <= api_fu_894_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                    i_5_cast_reg_1319(8 downto 0) <= i_5_cast_fu_551_p1(8 downto 0);
                k_reg_1329 <= k_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_5_fu_605_p2)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_6_reg_1367 <= i_6_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state137))) then
                i_7_reg_1549 <= i_7_fu_1182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then
                i_9_reg_1469 <= i_9_fu_1033_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                j_3_reg_1434 <= j_3_fu_965_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state142))) then
                j_4_reg_1587 <= j_4_fu_1262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state59))) then
                j_5_reg_1501 <= j_5_fu_1128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state59) and (ap_const_lv1_0 = exitcond2_fu_1123_p2) and (ap_const_lv1_0 = tmp_21_fu_1134_p2))) then
                minver_a_addr_10_reg_1515 <= tmp_80_cast_fu_1159_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state139) and (ap_const_lv1_0 = tmp_10_fu_1197_p2))) then
                minver_a_addr_2_reg_1568 <= tmp_72_cast_fu_1235_p1(4 - 1 downto 0);
                work_addr_4_reg_1573 <= tmp_11_fu_1203_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state140))) then
                    minver_a_addr_3_reg_1579(3 downto 2) <= p_shl5_fu_1248_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond5_fu_960_p2))) then
                minver_a_addr_4_reg_1439 <= tmp_73_cast_fu_980_p1(4 - 1 downto 0);
                minver_a_addr_5_reg_1445 <= tmp_74_cast_fu_990_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond4_fu_999_p2))) then
                minver_a_addr_6_reg_1460 <= tmp_75_cast_fu_1019_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = tmp_3_fu_555_p2)))) then
                    minver_a_addr_7_reg_1353(3 downto 2) <= p_shl_fu_582_p1(4 - 1 downto 0)(3 downto 2);
                tmp_18_reg_1339 <= tmp_18_fu_570_p1;
                tmp_31_reg_1346 <= tmp_31_fu_599_p2;
                    tmp_4_reg_1334(8 downto 0) <= tmp_4_fu_566_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = exitcond3_fu_1028_p2) and (ap_const_lv1_0 = tmp_16_fu_1039_p2))) then
                minver_a_addr_8_reg_1483 <= tmp_78_cast_fu_1072_p1(4 - 1 downto 0);
                tmp_77_reg_1478 <= tmp_77_fu_1061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                r_load_reg_1389 <= r_fu_102;
                tmp_65_reg_1395 <= tmp_65_fu_826_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((tmp_5_reg_1358 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state143)))) then
                reg_410 <= minver_a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp2_iter32) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter31_exitcond4_reg_1451)) or ((ap_const_lv1_1 = ap_CS_fsm_state135)))) then
                reg_433 <= grp_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_12_reg_1278 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = exitcond3_fu_1028_p2))) then
                tmp_16_reg_1474 <= tmp_16_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state59) and not((ap_const_lv1_0 = exitcond2_fu_1123_p2)))) then
                tmp_19_neg_reg_1521 <= tmp_19_neg_fu_1164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state104))) then
                tmp_20_reg_1541 <= grp_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state59) and (ap_const_lv1_0 = exitcond2_fu_1123_p2))) then
                tmp_21_reg_1506 <= tmp_21_fu_1134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state66))) then
                tmp_23_reg_1526 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state72))) then
                tmp_24_reg_1531 <= grp_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358))) then
                tmp_45_reg_1379 <= tmp_45_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then
                tmp_64_reg_1494 <= tmp_64_fu_1113_p2;
                w_3_to_int_reg_1489 <= w_3_to_int_fu_1077_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state137) and (ap_const_lv1_0 = exitcond1_fu_1177_p2))) then
                tmp_69_reg_1554 <= tmp_69_fu_1193_p1;
                work_addr_1_reg_1559 <= tmp_7_fu_1188_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                tmp_8_reg_1296 <= tmp_8_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358))) then
                w_4_reg_1372 <= w_4_fu_700_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_tmp_5_reg_1358)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then
                wmax_1_reg_1384 <= wmax_1_fu_791_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_59_fu_946_p2) and (ap_const_lv1_0 = tmp_9_fu_952_p2))) then
                work_addr_2_reg_1418 <= tmp_4_reg_1334(9 - 1 downto 0);
                work_addr_3_reg_1424 <= tmp_s_fu_902_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    i_5_cast_reg_1319(31 downto 9) <= "00000000000000000000000";
    tmp_4_reg_1334(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    minver_a_addr_7_reg_1353(1 downto 0) <= "00";
    minver_a_addr_3_reg_1579(1 downto 0) <= "00";
    p_0_reg_366(0) <= '1';
    p_0_reg_366(4 downto 3) <= "00";
    p_0_reg_366(11 downto 10) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter32, tmp_3_fu_555_p2, tmp_5_fu_605_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, tmp_9_fu_952_p2, tmp_59_fu_946_p2, exitcond5_fu_960_p2, exitcond4_fu_999_p2, ap_enable_reg_pp2_iter0, tmp_16_fu_1039_p2, exitcond3_fu_1028_p2, tmp_64_fu_1113_p2, tmp_21_fu_1134_p2, exitcond2_fu_1123_p2, exitcond1_fu_1177_p2, tmp_10_fu_1197_p2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, exitcond6_fu_530_p2, or_cond7_fu_520_p2, exitcond_fu_1257_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = or_cond7_fu_520_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state146;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_530_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((ap_const_lv1_0 = tmp_3_fu_555_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state137;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) and not(((ap_const_lv1_0 = tmp_5_fu_605_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_lv1_0 = tmp_5_fu_605_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (not((ap_const_lv1_0 = tmp_59_fu_946_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state146;
                elsif (((ap_const_lv1_0 = tmp_59_fu_946_p2) and not((ap_const_lv1_0 = tmp_9_fu_952_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond5_fu_960_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter33) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter32)))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_999_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_999_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_lv1_0 = exitcond3_fu_1028_p2) and not((ap_const_lv1_0 = tmp_16_fu_1039_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                elsif (((ap_const_lv1_0 = exitcond3_fu_1028_p2) and (ap_const_lv1_0 = tmp_16_fu_1039_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state106;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if ((ap_const_lv1_0 = tmp_64_fu_1113_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_lv1_0 = exitcond2_fu_1123_p2) and not((ap_const_lv1_0 = tmp_21_fu_1134_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                elsif (((ap_const_lv1_0 = exitcond2_fu_1123_p2) and (ap_const_lv1_0 = tmp_21_fu_1134_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state137 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_1177_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state146;
                else
                    ap_NS_fsm <= ap_ST_fsm_state138;
                end if;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                if (not((ap_const_lv1_0 = tmp_10_fu_1197_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state137;
                else
                    ap_NS_fsm <= ap_ST_fsm_state140;
                end if;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                if ((ap_const_lv1_0 = exitcond_fu_1257_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state143;
                else
                    ap_NS_fsm <= ap_ST_fsm_state145;
                end if;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state104 <= ap_CS_fsm(64 downto 64);
    ap_CS_fsm_state105 <= ap_CS_fsm(65 downto 65);
    ap_CS_fsm_state11 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state135 <= ap_CS_fsm(95 downto 95);
    ap_CS_fsm_state136 <= ap_CS_fsm(96 downto 96);
    ap_CS_fsm_state137 <= ap_CS_fsm(97 downto 97);
    ap_CS_fsm_state138 <= ap_CS_fsm(98 downto 98);
    ap_CS_fsm_state139 <= ap_CS_fsm(99 downto 99);
    ap_CS_fsm_state14 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state140 <= ap_CS_fsm(100 downto 100);
    ap_CS_fsm_state141 <= ap_CS_fsm(101 downto 101);
    ap_CS_fsm_state142 <= ap_CS_fsm(102 downto 102);
    ap_CS_fsm_state143 <= ap_CS_fsm(103 downto 103);
    ap_CS_fsm_state144 <= ap_CS_fsm(104 downto 104);
    ap_CS_fsm_state146 <= ap_CS_fsm(106 downto 106);
    ap_CS_fsm_state15 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state55 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state56 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state57 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state58 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state59 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state60 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state61 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state65 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state66 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state67 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state72 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state73 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state74 <= ap_CS_fsm(34 downto 34);

    ap_done_assign_proc : process(ap_CS_fsm_state146)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state146))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state146)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state146))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(resize(signed(p_0_reg_366),32));

    api_fu_894_p3 <= 
        reg_410 when (tmp_50_fu_878_p2(0) = '1') else 
        f_1_fu_890_p1;
    api_to_int_fu_906_p1 <= api_reg_1405;
    eps_to_int_fu_468_p1 <= eps;
    exitcond1_fu_1177_p2 <= "1" when (i_4_cast_fu_1173_p1 = side) else "0";
    exitcond2_fu_1123_p2 <= "1" when (j_1_cast_fu_1119_p1 = side) else "0";
    exitcond3_fu_1028_p2 <= "1" when (i_3_cast_fu_1024_p1 = side) else "0";
    exitcond4_fu_999_p2 <= "1" when (i_2_cast_fu_995_p1 = side) else "0";
    exitcond5_fu_960_p2 <= "1" when (j_cast_fu_956_p1 = side) else "0";
    exitcond6_fu_530_p2 <= "1" when (i_cast_fu_526_p1 = side) else "0";
    exitcond_fu_1257_p2 <= "1" when (j_2_cast_fu_1253_p1 = side) else "0";
    f_1_fu_890_p1 <= f_neg_i1_fu_884_p2;
    f_fu_696_p1 <= f_neg_i_fu_690_p2;
    f_neg_i1_fu_884_p2 <= (pivot_to_int_fu_842_p1 xor ap_const_lv64_8000000000000000);
    f_neg_i_fu_690_p2 <= (n_assign_to_int_fu_648_p1 xor ap_const_lv64_8000000000000000);

    grp_fu_391_p0_assign_proc : process(reg_424, ap_CS_fsm_state56, tmp_19_fu_1169_p1, ap_CS_fsm_state74, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state74))) then 
            grp_fu_391_p0 <= tmp_19_fu_1169_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
            grp_fu_391_p0 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter2)) then 
            grp_fu_391_p0 <= reg_424;
        else 
            grp_fu_391_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state58, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            grp_fu_396_opcode <= ap_const_lv5_1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or (not((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_tmp_5_reg_1358)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            grp_fu_396_opcode <= ap_const_lv5_3;
        elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state13)))) then 
            grp_fu_396_opcode <= ap_const_lv5_5;
        else 
            grp_fu_396_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(ap_CS_fsm_state1, eps, reg_410, reg_424, api_reg_1405, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state58, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            grp_fu_396_p0 <= reg_424;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            grp_fu_396_p0 <= api_reg_1405;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            grp_fu_396_p0 <= reg_410;
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            grp_fu_396_p0 <= eps;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p1_assign_proc : process(ap_CS_fsm_state1, eps, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state58, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            grp_fu_396_p1 <= eps;
        elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state58)) or (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            grp_fu_396_p1 <= ap_const_lv64_0;
        else 
            grp_fu_396_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_535_p2 <= std_logic_vector(unsigned(i_reg_253) + unsigned(ap_const_lv9_1));
    i_2_cast_fu_995_p1 <= std_logic_vector(resize(unsigned(i_2_reg_310),32));
    i_3_cast_fu_1024_p1 <= std_logic_vector(resize(unsigned(i_3_reg_321),32));
    i_4_cast_fu_1173_p1 <= std_logic_vector(resize(unsigned(i_4_reg_343),32));
    i_5_cast_fu_551_p1 <= std_logic_vector(resize(unsigned(i_5_reg_265),32));
    i_6_fu_642_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(r_1_phi_fu_280_p4));
    i_7_fu_1182_p2 <= std_logic_vector(unsigned(i_4_reg_343) + unsigned(ap_const_lv9_1));
    i_8_fu_1004_p2 <= std_logic_vector(unsigned(i_2_reg_310) + unsigned(ap_const_lv9_1));
    i_9_fu_1033_p2 <= std_logic_vector(unsigned(i_3_reg_321) + unsigned(ap_const_lv9_1));
    i_cast_fu_526_p1 <= std_logic_vector(resize(unsigned(i_reg_253),32));
    icmp_fu_456_p2 <= "1" when (signed(tmp_2_fu_446_p4) > signed(ap_const_lv31_0)) else "0";
    j_1_cast_fu_1119_p1 <= std_logic_vector(resize(unsigned(j_1_reg_332),32));
    j_2_cast_fu_1253_p1 <= std_logic_vector(resize(unsigned(j_2_reg_355),32));
    j_3_fu_965_p2 <= std_logic_vector(unsigned(j_phi_fu_303_p4) + unsigned(ap_const_lv9_1));
    j_4_fu_1262_p2 <= std_logic_vector(unsigned(j_2_reg_355) + unsigned(ap_const_lv9_1));
    j_5_fu_1128_p2 <= std_logic_vector(unsigned(j_1_reg_332) + unsigned(ap_const_lv9_1));
    j_cast_fu_956_p1 <= std_logic_vector(resize(unsigned(j_phi_fu_303_p4),32));

    j_phi_fu_303_p4_assign_proc : process(j_reg_299, exitcond5_reg_1430, ap_CS_fsm_pp1_stage0, j_3_reg_1434, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_lv1_0 = exitcond5_reg_1430) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            j_phi_fu_303_p4 <= j_3_reg_1434;
        else 
            j_phi_fu_303_p4 <= j_reg_299;
        end if; 
    end process;

    k_fu_560_p2 <= std_logic_vector(unsigned(i_5_reg_265) + unsigned(ap_const_lv9_1));
    minver_a_Addr_A <= std_logic_vector(shift_left(unsigned(minver_a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    minver_a_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state143, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, ap_pipeline_reg_pp1_iter1_minver_a_addr_5_reg_1445, ap_pipeline_reg_pp2_iter32_minver_a_addr_6_reg_1460, minver_a_addr_8_reg_1483, minver_a_addr_10_reg_1515, minver_a_addr_2_reg_1568, ap_CS_fsm_state142, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, ap_CS_fsm_state105, tmp_66_cast_fu_637_p1, tmp_69_cast_fu_837_p1, tmp_73_cast_fu_980_p1, ap_CS_fsm_state65)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state143)) or ((ap_const_lv1_1 = ap_CS_fsm_state142)))) then 
            minver_a_Addr_A_orig <= std_logic_vector(resize(unsigned(minver_a_addr_2_reg_1568),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state105))) then 
            minver_a_Addr_A_orig <= std_logic_vector(resize(unsigned(minver_a_addr_8_reg_1483),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state65))) then 
            minver_a_Addr_A_orig <= std_logic_vector(resize(unsigned(minver_a_addr_10_reg_1515),32));
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter33)) then 
            minver_a_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp2_iter32_minver_a_addr_6_reg_1460),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            minver_a_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp1_iter1_minver_a_addr_5_reg_1445),32));
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then 
            minver_a_Addr_A_orig <= tmp_73_cast_fu_980_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            minver_a_Addr_A_orig <= tmp_69_cast_fu_837_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            minver_a_Addr_A_orig <= tmp_66_cast_fu_637_p1(32 - 1 downto 0);
        else 
            minver_a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    minver_a_Addr_B <= std_logic_vector(shift_left(unsigned(minver_a_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    minver_a_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, minver_a_addr_7_reg_1353, ap_CS_fsm_pp1_stage0, minver_a_addr_4_reg_1439, ap_enable_reg_pp2_iter0, ap_CS_fsm_state56, ap_CS_fsm_state59, minver_a_addr_10_reg_1515, minver_a_addr_3_reg_1579, ap_CS_fsm_state142, ap_CS_fsm_state136, ap_CS_fsm_state73, ap_CS_fsm_state144, tmp_74_cast_fu_990_p1, tmp_75_cast_fu_1019_p1, tmp_78_cast_fu_1072_p1, tmp_79_cast_fu_1149_p1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state142)) or ((ap_const_lv1_1 = ap_CS_fsm_state144)))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_3_reg_1579),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state136))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_7_reg_1353),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state73))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_10_reg_1515),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
            minver_a_Addr_B_orig <= tmp_79_cast_fu_1149_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state56))) then 
            minver_a_Addr_B_orig <= tmp_78_cast_fu_1072_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            minver_a_Addr_B_orig <= tmp_75_cast_fu_1019_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            minver_a_Addr_B_orig <= std_logic_vector(resize(unsigned(minver_a_addr_4_reg_1439),32));
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then 
            minver_a_Addr_B_orig <= tmp_74_cast_fu_990_p1(32 - 1 downto 0);
        else 
            minver_a_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    minver_a_Clk_A <= ap_clk;
    minver_a_Clk_B <= ap_clk;

    minver_a_Din_A_assign_proc : process(minver_a_Dout_B, ap_CS_fsm_state143, reg_424, ap_CS_fsm_pp1_stage1, reg_433, tmp_20_reg_1541, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, ap_CS_fsm_state105)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state143))) then 
            minver_a_Din_A <= minver_a_Dout_B;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state105))) then 
            minver_a_Din_A <= tmp_20_reg_1541;
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter33)) then 
            minver_a_Din_A <= reg_433;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            minver_a_Din_A <= reg_424;
        else 
            minver_a_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    minver_a_Din_B_assign_proc : process(minver_a_Dout_B, reg_410, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, reg_433, tmp_24_reg_1531, ap_CS_fsm_state136, ap_CS_fsm_state73, ap_CS_fsm_state144)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state144))) then 
            minver_a_Din_B <= reg_410;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state136))) then 
            minver_a_Din_B <= reg_433;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state73))) then 
            minver_a_Din_B <= tmp_24_reg_1531;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            minver_a_Din_B <= minver_a_Dout_B;
        else 
            minver_a_Din_B <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    minver_a_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state143, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state142, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, ap_CS_fsm_state105, ap_CS_fsm_state65)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state143)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_state142)) or ((ap_const_lv1_1 = ap_CS_fsm_state105)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or (ap_const_logic_1 = ap_enable_reg_pp2_iter33) or ((ap_const_lv1_1 = ap_CS_fsm_state65)))) then 
            minver_a_EN_A <= ap_const_logic_1;
        else 
            minver_a_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    minver_a_EN_B_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state56, ap_CS_fsm_state59, ap_CS_fsm_state142, ap_CS_fsm_state136, ap_CS_fsm_state73, ap_CS_fsm_state144)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state56)) or ((ap_const_lv1_1 = ap_CS_fsm_state59)) or ((ap_const_lv1_1 = ap_CS_fsm_state142)) or ((ap_const_lv1_1 = ap_CS_fsm_state136)) or ((ap_const_lv1_1 = ap_CS_fsm_state73)) or ((ap_const_lv1_1 = ap_CS_fsm_state144)))) then 
            minver_a_EN_B <= ap_const_logic_1;
        else 
            minver_a_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    minver_a_Rst_A <= ap_rst;
    minver_a_Rst_B <= ap_rst;

    minver_a_WEN_A_assign_proc : process(ap_CS_fsm_state143, ap_CS_fsm_pp1_stage1, ap_pipeline_reg_pp1_iter1_exitcond5_reg_1430, ap_pipeline_reg_pp2_iter32_exitcond4_reg_1451, tmp_16_reg_1474, tmp_64_reg_1494, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter33, ap_CS_fsm_state105)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state143)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond5_reg_1430)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter33) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter32_exitcond4_reg_1451)) or ((ap_const_lv1_1 = ap_CS_fsm_state105) and (ap_const_lv1_0 = tmp_16_reg_1474) and (ap_const_lv1_0 = tmp_64_reg_1494)))) then 
            minver_a_WEN_A <= ap_const_lv8_FF;
        else 
            minver_a_WEN_A <= ap_const_lv8_0;
        end if; 
    end process;


    minver_a_WEN_B_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, exitcond5_reg_1430, tmp_21_reg_1506, ap_CS_fsm_state136, ap_CS_fsm_state73, ap_CS_fsm_state144)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond5_reg_1430)) or ((ap_const_lv1_1 = ap_CS_fsm_state136)) or ((ap_const_lv1_1 = ap_CS_fsm_state144)) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and (ap_const_lv1_0 = tmp_21_reg_1506)))) then 
            minver_a_WEN_B <= ap_const_lv8_FF;
        else 
            minver_a_WEN_B <= ap_const_lv8_0;
        end if; 
    end process;

    n_assign_to_int_fu_648_p1 <= reg_410;
    notlhs1_fu_485_p2 <= "0" when (tmp_fu_471_p4 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_666_p2 <= "0" when (tmp_32_fu_652_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_743_p2 <= "0" when (tmp_37_fu_711_p4 = ap_const_lv11_7FF) else "1";
    notlhs4_fu_761_p2 <= "0" when (tmp_39_fu_729_p4 = ap_const_lv11_7FF) else "1";
    notlhs5_fu_860_p2 <= "0" when (tmp_46_fu_846_p4 = ap_const_lv11_7FF) else "1";
    notlhs6_fu_923_p2 <= "0" when (tmp_51_fu_909_p4 = ap_const_lv11_7FF) else "1";
    notlhs8_fu_1095_p2 <= "0" when (tmp_60_fu_1081_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_491_p2 <= "1" when (tmp_6_fu_481_p1 = ap_const_lv52_0) else "0";
    notrhs2_fu_672_p2 <= "1" when (tmp_52_fu_662_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_749_p2 <= "1" when (tmp_53_fu_721_p1 = ap_const_lv52_0) else "0";
    notrhs4_fu_767_p2 <= "1" when (tmp_54_fu_739_p1 = ap_const_lv52_0) else "0";
    notrhs5_fu_866_p2 <= "1" when (tmp_67_fu_856_p1 = ap_const_lv52_0) else "0";
    notrhs6_fu_929_p2 <= "1" when (tmp_68_fu_919_p1 = ap_const_lv52_0) else "0";
    notrhs8_fu_1101_p2 <= "1" when (tmp_86_fu_1091_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_462_p2 <= "1" when (signed(side) < signed(ap_const_lv32_1F5)) else "0";
    or_cond7_fu_520_p2 <= (tmp2_fu_514_p2 and notrhs_fu_462_p2);
    p_shl2_cast_fu_618_p3 <= (tmp_38_fu_614_p1 & ap_const_lv2_0);
    p_shl3_cast_fu_818_p3 <= (tmp_61_fu_814_p1 & ap_const_lv2_0);
    p_shl4_cast_fu_1053_p3 <= (tmp_85_fu_1049_p1 & ap_const_lv2_0);
    p_shl5_cast_fu_1216_p3 <= (tmp_81_fu_1212_p1 & ap_const_lv2_0);
    p_shl5_fu_1248_p1 <= std_logic_vector(resize(unsigned(tmp_76_fu_1240_p3),64));
    p_shl_cast_fu_591_p3 <= (tmp_30_fu_587_p1 & ap_const_lv2_0);
    p_shl_fu_582_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_574_p3),64));
    pivot_to_int_fu_842_p1 <= reg_410;

    r_1_phi_fu_280_p4_assign_proc : process(r_1_reg_277, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_1358, i_6_reg_1367)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((tmp_5_reg_1358 = ap_const_lv1_0)))) then 
            r_1_phi_fu_280_p4 <= i_6_reg_1367;
        else 
            r_1_phi_fu_280_p4 <= r_1_reg_277;
        end if; 
    end process;

    r_2_fu_798_p3 <= 
        ap_pipeline_reg_pp0_iter3_r_1_reg_277 when (tmp_45_reg_1379(0) = '1') else 
        r_fu_102;
    tmp2_fu_514_p2 <= (icmp_fu_456_p2 and tmp_17_fu_508_p2);
    tmp_10_fu_1197_p2 <= "1" when (work_q1 = i_4_reg_343) else "0";
    tmp_11_fu_1203_p1 <= std_logic_vector(resize(unsigned(work_q1),64));
    tmp_13_fu_503_p2 <= (tmp_8_fu_497_p2 and tmp_12_reg_1278);
    tmp_16_fu_1039_p2 <= "1" when (i_3_reg_321 = i_5_reg_265) else "0";
    tmp_17_fu_508_p2 <= (tmp_13_fu_503_p2 xor ap_const_lv1_1);
    tmp_18_fu_570_p1 <= i_5_reg_265(5 - 1 downto 0);
    tmp_19_fu_1169_p1 <= tmp_19_neg_reg_1521;
    tmp_19_neg_fu_1164_p2 <= (w_3_to_int_reg_1489 xor ap_const_lv64_8000000000000000);
    tmp_1_fu_541_p1 <= std_logic_vector(resize(unsigned(i_reg_253),64));
    tmp_21_fu_1134_p2 <= "1" when (j_1_reg_332 = i_5_reg_265) else "0";
    tmp_22_fu_574_p3 <= (i_5_reg_265 & ap_const_lv2_0);
    tmp_2_fu_446_p4 <= side(31 downto 1);
    tmp_30_fu_587_p1 <= i_5_reg_265(3 - 1 downto 0);
    tmp_31_fu_599_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_591_p3) - unsigned(tmp_18_fu_570_p1));
    tmp_32_fu_652_p4 <= n_assign_to_int_fu_648_p1(62 downto 52);
    tmp_33_fu_610_p1 <= r_1_phi_fu_280_p4(5 - 1 downto 0);
    tmp_34_fu_678_p2 <= (notrhs2_fu_672_p2 or notlhs2_fu_666_p2);
    tmp_36_fu_684_p2 <= (tmp_34_fu_678_p2 and grp_fu_396_p2);
    tmp_37_fu_711_p4 <= w_4_to_int_fu_708_p1(62 downto 52);
    tmp_38_fu_614_p1 <= r_1_phi_fu_280_p4(3 - 1 downto 0);
    tmp_39_fu_729_p4 <= wmax_to_int_fu_725_p1(62 downto 52);
    tmp_3_fu_555_p2 <= "1" when (signed(i_5_cast_fu_551_p1) < signed(side)) else "0";
    tmp_40_fu_626_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_618_p3) - unsigned(tmp_33_fu_610_p1));
    tmp_41_fu_755_p2 <= (notrhs3_fu_749_p2 or notlhs3_fu_743_p2);
    tmp_42_fu_773_p2 <= (notrhs4_fu_767_p2 or notlhs4_fu_761_p2);
    tmp_43_fu_779_p2 <= (tmp_41_fu_755_p2 and tmp_42_fu_773_p2);
    tmp_45_fu_785_p2 <= (tmp_43_fu_779_p2 and tmp_44_fu_402_p2);
    tmp_46_fu_846_p4 <= pivot_to_int_fu_842_p1(62 downto 52);
    tmp_47_fu_632_p2 <= std_logic_vector(unsigned(tmp_18_reg_1339) + unsigned(tmp_40_fu_626_p2));
    tmp_48_fu_872_p2 <= (notrhs5_fu_866_p2 or notlhs5_fu_860_p2);
    tmp_4_fu_566_p1 <= std_logic_vector(resize(unsigned(i_5_reg_265),64));
    tmp_50_fu_878_p2 <= (tmp_48_fu_872_p2 and grp_fu_396_p2);
    tmp_51_fu_909_p4 <= api_to_int_fu_906_p1(62 downto 52);
    tmp_52_fu_662_p1 <= n_assign_to_int_fu_648_p1(52 - 1 downto 0);
    tmp_53_fu_721_p1 <= w_4_to_int_fu_708_p1(52 - 1 downto 0);
    tmp_54_fu_739_p1 <= wmax_to_int_fu_725_p1(52 - 1 downto 0);
    tmp_55_fu_935_p2 <= (notrhs6_fu_929_p2 or notlhs6_fu_923_p2);
    tmp_56_fu_810_p1 <= r_fu_102(5 - 1 downto 0);
    tmp_57_fu_941_p2 <= (tmp_55_fu_935_p2 and tmp_8_reg_1296);
    tmp_59_fu_946_p2 <= (tmp_57_fu_941_p2 and grp_fu_396_p2);
    tmp_5_fu_605_p2 <= "1" when (signed(r_1_phi_fu_280_p4) < signed(side)) else "0";
    tmp_60_fu_1081_p4 <= w_3_to_int_fu_1077_p1(62 downto 52);
    tmp_61_fu_814_p1 <= r_fu_102(3 - 1 downto 0);
    tmp_62_fu_1107_p2 <= (notrhs8_fu_1101_p2 or notlhs8_fu_1095_p2);
    tmp_64_fu_1113_p2 <= (tmp_62_fu_1107_p2 and grp_fu_396_p2);
    tmp_65_fu_826_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_818_p3) - unsigned(tmp_56_fu_810_p1));
        tmp_66_cast_fu_637_p1 <= std_logic_vector(resize(signed(tmp_47_fu_632_p2),64));

    tmp_66_fu_832_p2 <= std_logic_vector(unsigned(tmp_18_reg_1339) + unsigned(tmp_65_fu_826_p2));
    tmp_67_fu_856_p1 <= pivot_to_int_fu_842_p1(52 - 1 downto 0);
    tmp_68_fu_919_p1 <= api_to_int_fu_906_p1(52 - 1 downto 0);
        tmp_69_cast_fu_837_p1 <= std_logic_vector(resize(signed(tmp_66_fu_832_p2),64));

    tmp_69_fu_1193_p1 <= i_4_reg_343(5 - 1 downto 0);
    tmp_6_fu_481_p1 <= eps_to_int_fu_468_p1(52 - 1 downto 0);
    tmp_70_fu_1208_p1 <= work_q1(5 - 1 downto 0);
    tmp_71_fu_1224_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_1216_p3) - unsigned(tmp_70_fu_1208_p1));
        tmp_72_cast_fu_1235_p1 <= std_logic_vector(resize(signed(tmp_72_fu_1230_p2),64));

    tmp_72_fu_1230_p2 <= std_logic_vector(unsigned(tmp_71_fu_1224_p2) + unsigned(tmp_69_reg_1554));
        tmp_73_cast_fu_980_p1 <= std_logic_vector(resize(signed(tmp_73_fu_975_p2),64));

    tmp_73_fu_975_p2 <= std_logic_vector(unsigned(tmp_31_reg_1346) + unsigned(tmp_82_fu_971_p1));
        tmp_74_cast_fu_990_p1 <= std_logic_vector(resize(signed(tmp_74_fu_985_p2),64));

    tmp_74_fu_985_p2 <= std_logic_vector(unsigned(tmp_65_reg_1395) + unsigned(tmp_82_fu_971_p1));
        tmp_75_cast_fu_1019_p1 <= std_logic_vector(resize(signed(tmp_75_fu_1014_p2),64));

    tmp_75_fu_1014_p2 <= std_logic_vector(unsigned(tmp_31_reg_1346) + unsigned(tmp_83_fu_1010_p1));
    tmp_76_fu_1240_p3 <= (reg_417 & ap_const_lv2_0);
    tmp_77_fu_1061_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_1053_p3) - unsigned(tmp_84_fu_1045_p1));
        tmp_78_cast_fu_1072_p1 <= std_logic_vector(resize(signed(tmp_78_fu_1067_p2),64));

    tmp_78_fu_1067_p2 <= std_logic_vector(unsigned(tmp_18_reg_1339) + unsigned(tmp_77_fu_1061_p2));
        tmp_79_cast_fu_1149_p1 <= std_logic_vector(resize(signed(tmp_79_fu_1144_p2),64));

    tmp_79_fu_1144_p2 <= std_logic_vector(unsigned(tmp_31_reg_1346) + unsigned(tmp_87_fu_1140_p1));
    tmp_7_fu_1188_p1 <= std_logic_vector(resize(unsigned(i_4_reg_343),64));
        tmp_80_cast_fu_1159_p1 <= std_logic_vector(resize(signed(tmp_80_fu_1154_p2),64));

    tmp_80_fu_1154_p2 <= std_logic_vector(unsigned(tmp_77_reg_1478) + unsigned(tmp_87_fu_1140_p1));
    tmp_81_fu_1212_p1 <= work_q1(3 - 1 downto 0);
    tmp_82_fu_971_p1 <= j_phi_fu_303_p4(5 - 1 downto 0);
    tmp_83_fu_1010_p1 <= i_2_reg_310(5 - 1 downto 0);
    tmp_84_fu_1045_p1 <= i_3_reg_321(5 - 1 downto 0);
    tmp_85_fu_1049_p1 <= i_3_reg_321(3 - 1 downto 0);
    tmp_86_fu_1091_p1 <= w_3_to_int_fu_1077_p1(52 - 1 downto 0);
    tmp_87_fu_1140_p1 <= j_1_reg_332(5 - 1 downto 0);
    tmp_8_fu_497_p2 <= (notrhs1_fu_491_p2 or notlhs1_fu_485_p2);
    tmp_9_fu_952_p2 <= "1" when (r_load_reg_1389 = i_5_cast_reg_1319) else "0";
    tmp_fu_471_p4 <= eps_to_int_fu_468_p1(62 downto 52);
        tmp_s_fu_902_p1 <= std_logic_vector(resize(signed(r_load_reg_1389),64));

    w_3_to_int_fu_1077_p1 <= reg_424;
    w_4_fu_700_p3 <= 
        reg_410 when (tmp_36_fu_684_p2(0) = '1') else 
        f_fu_696_p1;
    w_4_to_int_fu_708_p1 <= w_4_reg_1372;
    wmax_1_fu_791_p3 <= 
        w_4_reg_1372 when (tmp_45_fu_785_p2(0) = '1') else 
        wmax_phi_fu_291_p4;

    wmax_phi_fu_291_p4_assign_proc : process(wmax_reg_287, ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358, wmax_1_reg_1384, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_tmp_5_reg_1358)))) then 
            wmax_phi_fu_291_p4 <= wmax_1_reg_1384;
        else 
            wmax_phi_fu_291_p4 <= wmax_reg_287;
        end if; 
    end process;

    wmax_to_int_fu_725_p1 <= wmax_phi_fu_291_p4;

    work_address0_assign_proc : process(ap_CS_fsm_state139, ap_CS_fsm_state3, tmp_4_reg_1334, ap_CS_fsm_state13, work_addr_3_reg_1424, work_addr_1_reg_1559, ap_CS_fsm_state15, ap_CS_fsm_state141, tmp_1_fu_541_p1, tmp_11_fu_1203_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state141))) then 
            work_address0 <= work_addr_1_reg_1559;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state139))) then 
            work_address0 <= tmp_11_fu_1203_p1(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            work_address0 <= work_addr_3_reg_1424;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_address0 <= tmp_4_reg_1334(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            work_address0 <= tmp_1_fu_541_p1(9 - 1 downto 0);
        else 
            work_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    work_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state140, ap_CS_fsm_state13, work_addr_2_reg_1418, work_addr_1_reg_1559, work_addr_4_reg_1573, tmp_s_fu_902_p1, ap_CS_fsm_state138)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state140))) then 
            work_address1 <= work_addr_4_reg_1573;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state138))) then 
            work_address1 <= work_addr_1_reg_1559;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_address1 <= work_addr_2_reg_1418;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_address1 <= tmp_s_fu_902_p1(9 - 1 downto 0);
        else 
            work_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    work_ce0_assign_proc : process(ap_CS_fsm_state139, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state141)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state139)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state141)))) then 
            work_ce0 <= ap_const_logic_1;
        else 
            work_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    work_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state140, ap_CS_fsm_state13, ap_CS_fsm_state138)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state140)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state138)))) then 
            work_ce1 <= ap_const_logic_1;
        else 
            work_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    work_d0_assign_proc : process(reg_417, ap_CS_fsm_state3, ap_CS_fsm_state15, i_reg_253, ap_CS_fsm_state141)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state141)))) then 
            work_d0 <= reg_417;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            work_d0 <= i_reg_253;
        else 
            work_d0 <= "XXXXXXXXX";
        end if; 
    end process;


    work_d1_assign_proc : process(reg_417, ap_CS_fsm_state14, work_q1, ap_CS_fsm_state140)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state140))) then 
            work_d1 <= reg_417;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_d1 <= work_q1;
        else 
            work_d1 <= "XXXXXXXXX";
        end if; 
    end process;


    work_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state15, exitcond6_fu_530_p2, ap_CS_fsm_state141)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_530_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state141)))) then 
            work_we0 <= ap_const_logic_1;
        else 
            work_we0 <= ap_const_logic_0;
        end if; 
    end process;


    work_we1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state140)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state140)))) then 
            work_we1 <= ap_const_logic_1;
        else 
            work_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
