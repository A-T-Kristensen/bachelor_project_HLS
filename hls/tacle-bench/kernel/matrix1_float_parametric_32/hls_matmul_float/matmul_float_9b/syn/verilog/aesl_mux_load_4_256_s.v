// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aesl_mux_load_4_256_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        empty_15_Addr_A,
        empty_15_EN_A,
        empty_15_WEN_A,
        empty_15_Din_A,
        empty_15_Dout_A,
        empty_16_Addr_A,
        empty_16_EN_A,
        empty_16_WEN_A,
        empty_16_Din_A,
        empty_16_Dout_A,
        empty_17_Addr_A,
        empty_17_EN_A,
        empty_17_WEN_A,
        empty_17_Din_A,
        empty_17_Dout_A,
        empty_18_Addr_A,
        empty_18_EN_A,
        empty_18_WEN_A,
        empty_18_Din_A,
        empty_18_Dout_A,
        empty_19,
        empty,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv57_0 = 57'b000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv57_1 = 57'b1;
parameter    ap_const_lv57_2 = 57'b10;
parameter    ap_const_lv4_0 = 4'b0000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [31:0] empty_15_Addr_A;
output   empty_15_EN_A;
output  [3:0] empty_15_WEN_A;
output  [31:0] empty_15_Din_A;
input  [31:0] empty_15_Dout_A;
output  [31:0] empty_16_Addr_A;
output   empty_16_EN_A;
output  [3:0] empty_16_WEN_A;
output  [31:0] empty_16_Din_A;
input  [31:0] empty_16_Dout_A;
output  [31:0] empty_17_Addr_A;
output   empty_17_EN_A;
output  [3:0] empty_17_WEN_A;
output  [31:0] empty_17_Din_A;
input  [31:0] empty_17_Dout_A;
output  [31:0] empty_18_Addr_A;
output   empty_18_EN_A;
output  [3:0] empty_18_WEN_A;
output  [31:0] empty_18_Din_A;
input  [31:0] empty_18_Dout_A;
input  [56:0] empty_19;
input  [7:0] empty;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg empty_15_EN_A;
reg empty_16_EN_A;
reg empty_17_EN_A;
reg empty_18_EN_A;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] sel_tmp_fu_106_p2;
reg   [0:0] sel_tmp_reg_165;
wire   [0:0] sel_tmp2_fu_112_p2;
reg   [0:0] sel_tmp2_reg_170;
wire   [0:0] sel_tmp4_fu_118_p2;
reg   [0:0] sel_tmp4_reg_175;
wire   [63:0] p_cast1_fu_98_p1;
wire   [31:0] empty_18_Addr_A_orig;
wire   [31:0] empty_15_Addr_A_orig;
wire   [31:0] empty_16_Addr_A_orig;
wire   [31:0] empty_17_Addr_A_orig;
wire   [31:0] sel_tmp1_fu_124_p3;
wire   [31:0] sel_tmp3_fu_131_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_pipeline_idle_pp0;
reg    ap_pipeline_start_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) | ~(1'b1 == ap_ce)))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        sel_tmp2_reg_170 <= sel_tmp2_fu_112_p2;
        sel_tmp4_reg_175 <= sel_tmp4_fu_118_p2;
        sel_tmp_reg_165 <= sel_tmp_fu_106_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b0 == ap_enable_reg_pp0_iter0))) begin
        ap_pipeline_idle_pp0 = 1'b1;
    end else begin
        ap_pipeline_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_start))) begin
        ap_pipeline_start_pp0 = 1'b1;
    end else begin
        ap_pipeline_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        empty_15_EN_A = 1'b1;
    end else begin
        empty_15_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        empty_16_EN_A = 1'b1;
    end else begin
        empty_16_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        empty_17_EN_A = 1'b1;
    end else begin
        empty_17_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        empty_18_EN_A = 1'b1;
    end else begin
        empty_18_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_0];

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((sel_tmp4_reg_175[0:0] === 1'b1) ? empty_17_Dout_A : sel_tmp3_fu_131_p3);

assign empty_15_Addr_A = empty_15_Addr_A_orig << ap_const_lv32_2;

assign empty_15_Addr_A_orig = p_cast1_fu_98_p1;

assign empty_15_Din_A = ap_const_lv32_0;

assign empty_15_WEN_A = ap_const_lv4_0;

assign empty_16_Addr_A = empty_16_Addr_A_orig << ap_const_lv32_2;

assign empty_16_Addr_A_orig = p_cast1_fu_98_p1;

assign empty_16_Din_A = ap_const_lv32_0;

assign empty_16_WEN_A = ap_const_lv4_0;

assign empty_17_Addr_A = empty_17_Addr_A_orig << ap_const_lv32_2;

assign empty_17_Addr_A_orig = p_cast1_fu_98_p1;

assign empty_17_Din_A = ap_const_lv32_0;

assign empty_17_WEN_A = ap_const_lv4_0;

assign empty_18_Addr_A = empty_18_Addr_A_orig << ap_const_lv32_2;

assign empty_18_Addr_A_orig = p_cast1_fu_98_p1;

assign empty_18_Din_A = ap_const_lv32_0;

assign empty_18_WEN_A = ap_const_lv4_0;

assign p_cast1_fu_98_p1 = empty;

assign sel_tmp1_fu_124_p3 = ((sel_tmp_reg_165[0:0] === 1'b1) ? empty_15_Dout_A : empty_18_Dout_A);

assign sel_tmp2_fu_112_p2 = ((empty_19 == ap_const_lv57_1) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_131_p3 = ((sel_tmp2_reg_170[0:0] === 1'b1) ? empty_16_Dout_A : sel_tmp1_fu_124_p3);

assign sel_tmp4_fu_118_p2 = ((empty_19 == ap_const_lv57_2) ? 1'b1 : 1'b0);

assign sel_tmp_fu_106_p2 = ((empty_19 == ap_const_lv57_0) ? 1'b1 : 1'b0);

endmodule //aesl_mux_load_4_256_s
