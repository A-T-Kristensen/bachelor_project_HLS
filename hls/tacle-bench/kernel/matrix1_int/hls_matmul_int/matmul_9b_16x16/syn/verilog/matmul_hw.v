// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.150000,HLS_SYN_LAT=1034,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1595,HLS_SYN_LUT=944}" *)

module matmul_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        a_3_Addr_A,
        a_3_EN_A,
        a_3_WEN_A,
        a_3_Din_A,
        a_3_Dout_A,
        a_3_Clk_A,
        a_3_Rst_A,
        b_0_Addr_A,
        b_0_EN_A,
        b_0_WEN_A,
        b_0_Din_A,
        b_0_Dout_A,
        b_0_Clk_A,
        b_0_Rst_A,
        b_1_Addr_A,
        b_1_EN_A,
        b_1_WEN_A,
        b_1_Din_A,
        b_1_Dout_A,
        b_1_Clk_A,
        b_1_Rst_A,
        b_2_Addr_A,
        b_2_EN_A,
        b_2_WEN_A,
        b_2_Din_A,
        b_2_Dout_A,
        b_2_Clk_A,
        b_2_Rst_A,
        b_3_Addr_A,
        b_3_EN_A,
        b_3_WEN_A,
        b_3_Din_A,
        b_3_Dout_A,
        b_3_Clk_A,
        b_3_Rst_A,
        c_Addr_A,
        c_EN_A,
        c_WEN_A,
        c_Din_A,
        c_Dout_A,
        c_Clk_A,
        c_Rst_A
);

parameter    ap_ST_fsm_state1 = 6'b1;
parameter    ap_ST_fsm_pp0_stage0 = 6'b10;
parameter    ap_ST_fsm_pp0_stage1 = 6'b100;
parameter    ap_ST_fsm_pp0_stage2 = 6'b1000;
parameter    ap_ST_fsm_pp0_stage3 = 6'b10000;
parameter    ap_ST_fsm_state15 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv57_0 = 57'b000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv6_10 = 6'b10000;
parameter    ap_const_lv7_2 = 7'b10;
parameter    ap_const_lv59_1 = 59'b1;
parameter    ap_const_lv7_3 = 7'b11;
parameter    ap_const_lv7_30 = 7'b110000;
parameter    ap_const_lv32_5 = 32'b101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [3:0] a_0_WEN_A;
output  [31:0] a_0_Din_A;
input  [31:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [3:0] a_1_WEN_A;
output  [31:0] a_1_Din_A;
input  [31:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [3:0] a_2_WEN_A;
output  [31:0] a_2_Din_A;
input  [31:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] a_3_Addr_A;
output   a_3_EN_A;
output  [3:0] a_3_WEN_A;
output  [31:0] a_3_Din_A;
input  [31:0] a_3_Dout_A;
output   a_3_Clk_A;
output   a_3_Rst_A;
output  [31:0] b_0_Addr_A;
output   b_0_EN_A;
output  [3:0] b_0_WEN_A;
output  [31:0] b_0_Din_A;
input  [31:0] b_0_Dout_A;
output   b_0_Clk_A;
output   b_0_Rst_A;
output  [31:0] b_1_Addr_A;
output   b_1_EN_A;
output  [3:0] b_1_WEN_A;
output  [31:0] b_1_Din_A;
input  [31:0] b_1_Dout_A;
output   b_1_Clk_A;
output   b_1_Rst_A;
output  [31:0] b_2_Addr_A;
output   b_2_EN_A;
output  [3:0] b_2_WEN_A;
output  [31:0] b_2_Din_A;
input  [31:0] b_2_Dout_A;
output   b_2_Clk_A;
output   b_2_Rst_A;
output  [31:0] b_3_Addr_A;
output   b_3_EN_A;
output  [3:0] b_3_WEN_A;
output  [31:0] b_3_Din_A;
input  [31:0] b_3_Dout_A;
output   b_3_Clk_A;
output   b_3_Rst_A;
output  [31:0] c_Addr_A;
output   c_EN_A;
output  [3:0] c_WEN_A;
output  [31:0] c_Din_A;
input  [31:0] c_Dout_A;
output   c_Clk_A;
output   c_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_EN_A;
reg a_1_EN_A;
reg a_2_EN_A;
reg a_3_EN_A;
reg b_0_EN_A;
reg b_1_EN_A;
reg b_2_EN_A;
reg b_3_EN_A;
reg c_EN_A;
reg[3:0] c_WEN_A;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [8:0] indvar_flatten_reg_404;
reg   [4:0] i_reg_415;
reg   [4:0] j_reg_426;
wire   [31:0] grp_fu_437_p2;
reg   [31:0] reg_550;
wire   [0:0] ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_819;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819;
wire   [0:0] ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819;
reg   [31:0] reg_554;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [0:0] ap_CS_fsm_pp0_stage2;
wire   [0:0] exitcond_flatten_fu_564_p2;
wire   [8:0] indvar_flatten_next_fu_570_p2;
reg   [8:0] indvar_flatten_next_reg_823;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] j_mid2_fu_588_p3;
reg   [4:0] j_mid2_reg_828;
reg   [4:0] ap_pipeline_reg_pp0_iter1_j_mid2_reg_828;
reg   [4:0] ap_pipeline_reg_pp0_iter2_j_mid2_reg_828;
wire   [4:0] tmp_mid2_v_fu_596_p3;
reg   [4:0] tmp_mid2_v_reg_837;
reg   [4:0] ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_837;
reg   [4:0] ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_837;
wire   [6:0] tmp_fu_604_p3;
reg   [6:0] tmp_reg_843;
reg  signed [31:0] a_0_load_reg_930;
reg  signed [31:0] b_0_load_reg_935;
reg  signed [31:0] a_1_load_reg_940;
reg  signed [31:0] b_1_load_reg_945;
reg  signed [31:0] a_2_load_reg_950;
reg  signed [31:0] b_2_load_reg_955;
reg  signed [31:0] a_3_load_reg_960;
reg  signed [31:0] b_3_load_reg_965;
reg  signed [31:0] a_0_load_1_reg_1010;
reg  signed [31:0] b_0_load_1_reg_1015;
reg  signed [31:0] a_1_load_1_reg_1020;
reg  signed [31:0] b_1_load_1_reg_1025;
reg  signed [31:0] a_2_load_1_reg_1030;
reg  signed [31:0] b_2_load_1_reg_1035;
reg  signed [31:0] a_3_load_1_reg_1040;
reg  signed [31:0] b_3_load_1_reg_1045;
reg  signed [31:0] a_0_load_2_reg_1090;
reg  signed [31:0] b_0_load_2_reg_1095;
reg  signed [31:0] a_1_load_2_reg_1100;
reg  signed [31:0] b_1_load_2_reg_1105;
reg  signed [31:0] a_2_load_2_reg_1110;
reg  signed [31:0] b_2_load_2_reg_1115;
reg  signed [31:0] a_3_load_2_reg_1120;
reg  signed [31:0] b_3_load_2_reg_1125;
wire   [4:0] j_1_fu_724_p2;
reg   [4:0] j_1_reg_1130;
reg  signed [31:0] a_0_load_3_reg_1135;
reg  signed [31:0] b_0_load_3_reg_1140;
reg  signed [31:0] a_1_load_3_reg_1145;
reg  signed [31:0] b_1_load_3_reg_1150;
reg  signed [31:0] a_2_load_3_reg_1155;
reg  signed [31:0] b_2_load_3_reg_1160;
reg  signed [31:0] a_3_load_3_reg_1165;
reg  signed [31:0] b_3_load_3_reg_1170;
wire   [31:0] grp_fu_438_p2;
reg   [31:0] tmp_6_reg_1175;
wire   [31:0] grp_fu_440_p2;
reg   [31:0] tmp_6_4_reg_1180;
wire   [31:0] grp_fu_439_p2;
reg   [31:0] tmp_6_11_reg_1185;
reg   [31:0] tmp_6_1_reg_1190;
reg   [31:0] tmp_6_5_reg_1195;
reg   [31:0] tmp_6_12_reg_1200;
reg   [31:0] tmp_6_2_reg_1205;
reg   [31:0] tmp_6_6_reg_1210;
reg   [31:0] tmp_6_13_reg_1215;
wire   [31:0] grp_fu_558_p2;
reg   [31:0] tmp10_reg_1220;
reg   [31:0] tmp_6_3_reg_1225;
reg   [31:0] tmp_6_7_reg_1230;
reg   [31:0] tmp_6_14_reg_1235;
wire   [31:0] tmp_1_s_fu_788_p2;
reg   [31:0] tmp_1_s_reg_1240;
reg    ap_enable_reg_pp0_iter3;
reg   [8:0] indvar_flatten_phi_fu_408_p4;
reg   [4:0] i_phi_fu_419_p4;
reg   [4:0] j_phi_fu_430_p4;
wire   [63:0] tmp_3_fu_612_p1;
wire   [63:0] tmp_2_fu_620_p1;
wire   [63:0] tmp_5_fu_633_p3;
wire   [63:0] tmp_13_cast_fu_654_p1;
wire   [63:0] tmp_8_fu_667_p3;
wire   [63:0] tmp_12_fu_679_p3;
wire   [63:0] tmp_s_fu_695_p3;
wire   [63:0] tmp_15_cast_fu_716_p1;
wire   [63:0] tmp_16_cast_fu_814_p1;
reg   [31:0] a_0_Addr_A_orig;
reg   [31:0] b_0_Addr_A_orig;
reg   [31:0] a_1_Addr_A_orig;
reg   [31:0] b_1_Addr_A_orig;
reg   [31:0] a_2_Addr_A_orig;
reg   [31:0] b_2_Addr_A_orig;
reg   [31:0] a_3_Addr_A_orig;
reg   [31:0] b_3_Addr_A_orig;
wire   [31:0] c_Addr_A_orig;
reg  signed [31:0] grp_fu_437_p0;
reg  signed [31:0] grp_fu_437_p1;
reg  signed [31:0] grp_fu_438_p0;
reg  signed [31:0] grp_fu_438_p1;
reg  signed [31:0] grp_fu_439_p0;
reg  signed [31:0] grp_fu_439_p1;
reg  signed [31:0] grp_fu_440_p0;
reg  signed [31:0] grp_fu_440_p1;
wire   [0:0] exitcond_fu_582_p2;
wire   [4:0] i_1_fu_576_p2;
wire   [6:0] tmp_4_fu_628_p2;
wire   [5:0] tmp_2_cast_fu_645_p1;
wire   [5:0] tmp_11_fu_648_p2;
wire   [6:0] tmp_7_fu_662_p2;
wire   [6:0] tmp_9_fu_690_p2;
wire   [6:0] tmp_2_cast3_fu_707_p1;
wire   [6:0] tmp_13_fu_710_p2;
wire   [31:0] tmp4_fu_733_p2;
wire   [31:0] tmp3_fu_729_p2;
wire   [31:0] tmp7_fu_747_p2;
wire   [31:0] tmp6_fu_743_p2;
wire   [31:0] tmp5_fu_751_p2;
wire   [31:0] tmp2_fu_737_p2;
wire   [31:0] tmp14_fu_772_p2;
wire   [31:0] tmp13_fu_768_p2;
wire   [31:0] tmp12_fu_776_p2;
wire   [31:0] tmp9_fu_763_p2;
wire   [31:0] tmp8_fu_782_p2;
wire   [31:0] tmp1_fu_757_p2;
wire   [8:0] tmp_10_fu_794_p3;
wire   [9:0] tmp_2_cast4_fu_805_p1;
wire   [9:0] tmp_12_cast_fu_801_p1;
wire   [9:0] tmp_14_fu_808_p2;
wire   [0:0] ap_CS_fsm_state15;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

matmul_hw_mul_32sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sdEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_437_p0),
    .din1(grp_fu_437_p1),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

matmul_hw_mul_32sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_438_p0),
    .din1(grp_fu_438_p1),
    .ce(1'b1),
    .dout(grp_fu_438_p2)
);

matmul_hw_mul_32sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_439_p0),
    .din1(grp_fu_439_p1),
    .ce(1'b1),
    .dout(grp_fu_439_p2)
);

matmul_hw_mul_32sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sdEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_440_p0),
    .din1(grp_fu_440_p1),
    .ce(1'b1),
    .dout(grp_fu_440_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == exitcond_flatten_fu_564_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_819 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & ~(exitcond_flatten_reg_819 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        i_reg_415 <= tmp_mid2_v_reg_837;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_415 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        indvar_flatten_reg_404 <= indvar_flatten_next_reg_823;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_404 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        j_reg_426 <= j_1_reg_1130;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_426 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        a_0_load_1_reg_1010 <= a_0_Dout_A;
        a_1_load_1_reg_1020 <= a_1_Dout_A;
        a_2_load_1_reg_1030 <= a_2_Dout_A;
        a_3_load_1_reg_1040 <= a_3_Dout_A;
        b_0_load_1_reg_1015 <= b_0_Dout_A;
        b_1_load_1_reg_1025 <= b_1_Dout_A;
        b_2_load_1_reg_1035 <= b_2_Dout_A;
        b_3_load_1_reg_1045 <= b_3_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        a_0_load_2_reg_1090 <= a_0_Dout_A;
        a_1_load_2_reg_1100 <= a_1_Dout_A;
        a_2_load_2_reg_1110 <= a_2_Dout_A;
        a_3_load_2_reg_1120 <= a_3_Dout_A;
        b_0_load_2_reg_1095 <= b_0_Dout_A;
        b_1_load_2_reg_1105 <= b_1_Dout_A;
        b_2_load_2_reg_1115 <= b_2_Dout_A;
        b_3_load_2_reg_1125 <= b_3_Dout_A;
        j_1_reg_1130 <= j_1_fu_724_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        a_0_load_3_reg_1135 <= a_0_Dout_A;
        a_1_load_3_reg_1145 <= a_1_Dout_A;
        a_2_load_3_reg_1155 <= a_2_Dout_A;
        a_3_load_3_reg_1165 <= a_3_Dout_A;
        b_0_load_3_reg_1140 <= b_0_Dout_A;
        b_1_load_3_reg_1150 <= b_1_Dout_A;
        b_2_load_3_reg_1160 <= b_2_Dout_A;
        b_3_load_3_reg_1170 <= b_3_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        a_0_load_reg_930 <= a_0_Dout_A;
        a_1_load_reg_940 <= a_1_Dout_A;
        a_2_load_reg_950 <= a_2_Dout_A;
        a_3_load_reg_960 <= a_3_Dout_A;
        b_0_load_reg_935 <= b_0_Dout_A;
        b_1_load_reg_945 <= b_1_Dout_A;
        b_2_load_reg_955 <= b_2_Dout_A;
        b_3_load_reg_965 <= b_3_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 <= exitcond_flatten_reg_819;
        ap_pipeline_reg_pp0_iter1_j_mid2_reg_828 <= j_mid2_reg_828;
        ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_837 <= tmp_mid2_v_reg_837;
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819;
        ap_pipeline_reg_pp0_iter2_j_mid2_reg_828 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_828;
        ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_837 <= ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_837;
        exitcond_flatten_reg_819 <= exitcond_flatten_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_823 <= indvar_flatten_next_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond_flatten_fu_564_p2))) begin
        j_mid2_reg_828 <= j_mid2_fu_588_p3;
        tmp_reg_843[6 : 2] <= tmp_fu_604_p3[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819)))) begin
        reg_550 <= grp_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_554 <= grp_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819))) begin
        tmp10_reg_1220 <= grp_fu_558_p2;
        tmp_6_13_reg_1215 <= grp_fu_439_p2;
        tmp_6_2_reg_1205 <= grp_fu_438_p2;
        tmp_6_6_reg_1210 <= grp_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819))) begin
        tmp_1_s_reg_1240 <= tmp_1_s_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 == 1'b0))) begin
        tmp_6_11_reg_1185 <= grp_fu_439_p2;
        tmp_6_4_reg_1180 <= grp_fu_440_p2;
        tmp_6_reg_1175 <= grp_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_12_reg_1200 <= grp_fu_439_p2;
        tmp_6_1_reg_1190 <= grp_fu_438_p2;
        tmp_6_5_reg_1195 <= grp_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_6_14_reg_1235 <= grp_fu_439_p2;
        tmp_6_3_reg_1225 <= grp_fu_438_p2;
        tmp_6_7_reg_1230 <= grp_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_564_p2))) begin
        tmp_mid2_v_reg_837 <= tmp_mid2_v_fu_596_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_0_Addr_A_orig = tmp_s_fu_695_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_0_Addr_A_orig = tmp_8_fu_667_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_0_Addr_A_orig = tmp_5_fu_633_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_0_Addr_A_orig = tmp_3_fu_612_p1;
        end else begin
            a_0_Addr_A_orig = 'bx;
        end
    end else begin
        a_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        a_0_EN_A = 1'b1;
    end else begin
        a_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_1_Addr_A_orig = tmp_s_fu_695_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_1_Addr_A_orig = tmp_8_fu_667_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_1_Addr_A_orig = tmp_5_fu_633_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_1_Addr_A_orig = tmp_3_fu_612_p1;
        end else begin
            a_1_Addr_A_orig = 'bx;
        end
    end else begin
        a_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        a_1_EN_A = 1'b1;
    end else begin
        a_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_2_Addr_A_orig = tmp_s_fu_695_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_2_Addr_A_orig = tmp_8_fu_667_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_2_Addr_A_orig = tmp_5_fu_633_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_2_Addr_A_orig = tmp_3_fu_612_p1;
        end else begin
            a_2_Addr_A_orig = 'bx;
        end
    end else begin
        a_2_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        a_2_EN_A = 1'b1;
    end else begin
        a_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_3_Addr_A_orig = tmp_s_fu_695_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_3_Addr_A_orig = tmp_8_fu_667_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_3_Addr_A_orig = tmp_5_fu_633_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_3_Addr_A_orig = tmp_3_fu_612_p1;
        end else begin
            a_3_Addr_A_orig = 'bx;
        end
    end else begin
        a_3_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        a_3_EN_A = 1'b1;
    end else begin
        a_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            b_0_Addr_A_orig = tmp_15_cast_fu_716_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            b_0_Addr_A_orig = tmp_12_fu_679_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_0_Addr_A_orig = tmp_13_cast_fu_654_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_0_Addr_A_orig = tmp_2_fu_620_p1;
        end else begin
            b_0_Addr_A_orig = 'bx;
        end
    end else begin
        b_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        b_0_EN_A = 1'b1;
    end else begin
        b_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            b_1_Addr_A_orig = tmp_15_cast_fu_716_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            b_1_Addr_A_orig = tmp_12_fu_679_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_1_Addr_A_orig = tmp_13_cast_fu_654_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_1_Addr_A_orig = tmp_2_fu_620_p1;
        end else begin
            b_1_Addr_A_orig = 'bx;
        end
    end else begin
        b_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        b_1_EN_A = 1'b1;
    end else begin
        b_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            b_2_Addr_A_orig = tmp_15_cast_fu_716_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            b_2_Addr_A_orig = tmp_12_fu_679_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_2_Addr_A_orig = tmp_13_cast_fu_654_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_2_Addr_A_orig = tmp_2_fu_620_p1;
        end else begin
            b_2_Addr_A_orig = 'bx;
        end
    end else begin
        b_2_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        b_2_EN_A = 1'b1;
    end else begin
        b_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            b_3_Addr_A_orig = tmp_15_cast_fu_716_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            b_3_Addr_A_orig = tmp_12_fu_679_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_3_Addr_A_orig = tmp_13_cast_fu_654_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_3_Addr_A_orig = tmp_2_fu_620_p1;
        end else begin
            b_3_Addr_A_orig = 'bx;
        end
    end else begin
        b_3_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        b_3_EN_A = 1'b1;
    end else begin
        b_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        c_EN_A = 1'b1;
    end else begin
        c_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        c_WEN_A = ap_const_lv4_F;
    end else begin
        c_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_437_p0 = a_2_load_3_reg_1155;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_437_p0 = a_2_load_2_reg_1110;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_437_p0 = a_2_load_1_reg_1030;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_437_p0 = a_2_load_reg_950;
    end else begin
        grp_fu_437_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_437_p1 = b_2_load_3_reg_1160;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_437_p1 = b_2_load_2_reg_1115;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_437_p1 = b_2_load_1_reg_1035;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_437_p1 = b_2_load_reg_955;
    end else begin
        grp_fu_437_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_438_p0 = a_0_load_3_reg_1135;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_438_p0 = a_0_load_2_reg_1090;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_438_p0 = a_0_load_1_reg_1010;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_438_p0 = a_0_load_reg_930;
    end else begin
        grp_fu_438_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_438_p1 = b_0_load_3_reg_1140;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_438_p1 = b_0_load_2_reg_1095;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_438_p1 = b_0_load_1_reg_1015;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_438_p1 = b_0_load_reg_935;
    end else begin
        grp_fu_438_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_439_p0 = a_3_load_3_reg_1165;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_439_p0 = a_3_load_2_reg_1120;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_439_p0 = a_3_load_1_reg_1040;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_439_p0 = a_3_load_reg_960;
    end else begin
        grp_fu_439_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_439_p1 = b_3_load_3_reg_1170;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_439_p1 = b_3_load_2_reg_1125;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_439_p1 = b_3_load_1_reg_1045;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_439_p1 = b_3_load_reg_965;
    end else begin
        grp_fu_439_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_440_p0 = a_1_load_3_reg_1145;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_440_p0 = a_1_load_2_reg_1100;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_440_p0 = a_1_load_1_reg_1020;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_440_p0 = a_1_load_reg_940;
    end else begin
        grp_fu_440_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_440_p1 = b_1_load_3_reg_1150;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_440_p1 = b_1_load_2_reg_1105;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_440_p1 = b_1_load_1_reg_1025;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_440_p1 = b_1_load_reg_945;
    end else begin
        grp_fu_440_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        i_phi_fu_419_p4 = tmp_mid2_v_reg_837;
    end else begin
        i_phi_fu_419_p4 = i_reg_415;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        indvar_flatten_phi_fu_408_p4 = indvar_flatten_next_reg_823;
    end else begin
        indvar_flatten_phi_fu_408_p4 = indvar_flatten_reg_404;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_819 == 1'b0))) begin
        j_phi_fu_430_p4 = j_1_reg_1130;
    end else begin
        j_phi_fu_430_p4 = j_reg_426;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter3) & ~(1'b1 == ap_enable_reg_pp0_iter2)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_564_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_564_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage2;
        end
        ap_ST_fsm_pp0_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        end
        ap_ST_fsm_pp0_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << ap_const_lv32_2;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = ap_const_lv32_0;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = ap_const_lv4_0;

assign a_1_Addr_A = a_1_Addr_A_orig << ap_const_lv32_2;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = ap_const_lv32_0;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = ap_const_lv4_0;

assign a_2_Addr_A = a_2_Addr_A_orig << ap_const_lv32_2;

assign a_2_Clk_A = ap_clk;

assign a_2_Din_A = ap_const_lv32_0;

assign a_2_Rst_A = ap_rst;

assign a_2_WEN_A = ap_const_lv4_0;

assign a_3_Addr_A = a_3_Addr_A_orig << ap_const_lv32_2;

assign a_3_Clk_A = ap_clk;

assign a_3_Din_A = ap_const_lv32_0;

assign a_3_Rst_A = ap_rst;

assign a_3_WEN_A = ap_const_lv4_0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_5];

assign b_0_Addr_A = b_0_Addr_A_orig << ap_const_lv32_2;

assign b_0_Clk_A = ap_clk;

assign b_0_Din_A = ap_const_lv32_0;

assign b_0_Rst_A = ap_rst;

assign b_0_WEN_A = ap_const_lv4_0;

assign b_1_Addr_A = b_1_Addr_A_orig << ap_const_lv32_2;

assign b_1_Clk_A = ap_clk;

assign b_1_Din_A = ap_const_lv32_0;

assign b_1_Rst_A = ap_rst;

assign b_1_WEN_A = ap_const_lv4_0;

assign b_2_Addr_A = b_2_Addr_A_orig << ap_const_lv32_2;

assign b_2_Clk_A = ap_clk;

assign b_2_Din_A = ap_const_lv32_0;

assign b_2_Rst_A = ap_rst;

assign b_2_WEN_A = ap_const_lv4_0;

assign b_3_Addr_A = b_3_Addr_A_orig << ap_const_lv32_2;

assign b_3_Clk_A = ap_clk;

assign b_3_Din_A = ap_const_lv32_0;

assign b_3_Rst_A = ap_rst;

assign b_3_WEN_A = ap_const_lv4_0;

assign c_Addr_A = c_Addr_A_orig << ap_const_lv32_2;

assign c_Addr_A_orig = tmp_16_cast_fu_814_p1;

assign c_Clk_A = ap_clk;

assign c_Din_A = tmp_1_s_reg_1240;

assign c_Rst_A = ap_rst;

assign exitcond_flatten_fu_564_p2 = ((indvar_flatten_phi_fu_408_p4 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond_fu_582_p2 = ((j_phi_fu_430_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign grp_fu_558_p2 = (reg_550 + reg_554);

assign i_1_fu_576_p2 = (i_phi_fu_419_p4 + ap_const_lv5_1);

assign indvar_flatten_next_fu_570_p2 = (indvar_flatten_phi_fu_408_p4 + ap_const_lv9_1);

assign j_1_fu_724_p2 = (j_mid2_reg_828 + ap_const_lv5_1);

assign j_mid2_fu_588_p3 = ((exitcond_fu_582_p2[0:0] === 1'b1) ? ap_const_lv5_0 : j_phi_fu_430_p4);

assign tmp12_fu_776_p2 = (tmp14_fu_772_p2 + tmp13_fu_768_p2);

assign tmp13_fu_768_p2 = (tmp_6_11_reg_1185 + tmp_6_12_reg_1200);

assign tmp14_fu_772_p2 = (tmp_6_13_reg_1215 + tmp_6_14_reg_1235);

assign tmp1_fu_757_p2 = (tmp5_fu_751_p2 + tmp2_fu_737_p2);

assign tmp2_fu_737_p2 = (tmp4_fu_733_p2 + tmp3_fu_729_p2);

assign tmp3_fu_729_p2 = (tmp_6_reg_1175 + tmp_6_1_reg_1190);

assign tmp4_fu_733_p2 = (tmp_6_2_reg_1205 + tmp_6_3_reg_1225);

assign tmp5_fu_751_p2 = (tmp7_fu_747_p2 + tmp6_fu_743_p2);

assign tmp6_fu_743_p2 = (tmp_6_4_reg_1180 + tmp_6_5_reg_1195);

assign tmp7_fu_747_p2 = (tmp_6_6_reg_1210 + tmp_6_7_reg_1230);

assign tmp8_fu_782_p2 = (tmp12_fu_776_p2 + tmp9_fu_763_p2);

assign tmp9_fu_763_p2 = (grp_fu_558_p2 + tmp10_reg_1220);

assign tmp_10_fu_794_p3 = {{ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_837}, {ap_const_lv4_0}};

assign tmp_11_fu_648_p2 = (tmp_2_cast_fu_645_p1 + ap_const_lv6_10);

assign tmp_12_cast_fu_801_p1 = tmp_10_fu_794_p3;

assign tmp_12_fu_679_p3 = {{ap_const_lv59_1}, {j_mid2_reg_828}};

assign tmp_13_cast_fu_654_p1 = tmp_11_fu_648_p2;

assign tmp_13_fu_710_p2 = (tmp_2_cast3_fu_707_p1 + ap_const_lv7_30);

assign tmp_14_fu_808_p2 = (tmp_2_cast4_fu_805_p1 + tmp_12_cast_fu_801_p1);

assign tmp_15_cast_fu_716_p1 = tmp_13_fu_710_p2;

assign tmp_16_cast_fu_814_p1 = tmp_14_fu_808_p2;

assign tmp_1_s_fu_788_p2 = (tmp8_fu_782_p2 + tmp1_fu_757_p2);

assign tmp_2_cast3_fu_707_p1 = j_mid2_reg_828;

assign tmp_2_cast4_fu_805_p1 = ap_pipeline_reg_pp0_iter2_j_mid2_reg_828;

assign tmp_2_cast_fu_645_p1 = j_mid2_reg_828;

assign tmp_2_fu_620_p1 = j_mid2_fu_588_p3;

assign tmp_3_fu_612_p1 = tmp_fu_604_p3;

assign tmp_4_fu_628_p2 = (tmp_reg_843 | ap_const_lv7_1);

assign tmp_5_fu_633_p3 = {{ap_const_lv57_0}, {tmp_4_fu_628_p2}};

assign tmp_7_fu_662_p2 = (tmp_reg_843 | ap_const_lv7_2);

assign tmp_8_fu_667_p3 = {{ap_const_lv57_0}, {tmp_7_fu_662_p2}};

assign tmp_9_fu_690_p2 = (tmp_reg_843 | ap_const_lv7_3);

assign tmp_fu_604_p3 = {{tmp_mid2_v_fu_596_p3}, {ap_const_lv2_0}};

assign tmp_mid2_v_fu_596_p3 = ((exitcond_fu_582_p2[0:0] === 1'b1) ? i_1_fu_576_p2 : i_phi_fu_419_p4);

assign tmp_s_fu_695_p3 = {{ap_const_lv57_0}, {tmp_9_fu_690_p2}};

always @ (posedge ap_clk) begin
    tmp_reg_843[1:0] <= 2'b00;
end

endmodule //matmul_hw
