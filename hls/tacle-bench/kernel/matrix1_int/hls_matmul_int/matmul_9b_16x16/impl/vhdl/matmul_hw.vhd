-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC;
    a_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_EN_A : OUT STD_LOGIC;
    a_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_2_Clk_A : OUT STD_LOGIC;
    a_2_Rst_A : OUT STD_LOGIC;
    a_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_EN_A : OUT STD_LOGIC;
    a_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_3_Clk_A : OUT STD_LOGIC;
    a_3_Rst_A : OUT STD_LOGIC;
    b_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_EN_A : OUT STD_LOGIC;
    b_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_0_Clk_A : OUT STD_LOGIC;
    b_0_Rst_A : OUT STD_LOGIC;
    b_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_EN_A : OUT STD_LOGIC;
    b_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1_Clk_A : OUT STD_LOGIC;
    b_1_Rst_A : OUT STD_LOGIC;
    b_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_EN_A : OUT STD_LOGIC;
    b_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_2_Clk_A : OUT STD_LOGIC;
    b_2_Rst_A : OUT STD_LOGIC;
    b_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_3_EN_A : OUT STD_LOGIC;
    b_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_3_Clk_A : OUT STD_LOGIC;
    b_3_Rst_A : OUT STD_LOGIC;
    c_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_EN_A : OUT STD_LOGIC;
    c_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    c_Clk_A : OUT STD_LOGIC;
    c_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matmul_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.150000,HLS_SYN_LAT=1036,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=64,HLS_SYN_FF=3569,HLS_SYN_LUT=1431}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv59_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_832 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_843 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_854 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_871_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next_reg_1552 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_889_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_1557 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_fu_909_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1568 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_v_fu_917_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_mid2_v_reg_1572 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_925_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1605 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal a_row_0_reg_1665 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_4_reg_1670 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_8_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_12_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal a_row_1_reg_1725 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_5_reg_1730 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_9_reg_1735 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_13_reg_1740 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1765 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal tmp_3_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1821 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_reg_1841 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_6_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_10_reg_1851 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_14_reg_1856 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_load_reg_1881 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_4_load_reg_1891 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_8_load_reg_1901 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_12_load_reg_1911 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_1057_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_1921 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_row_15_1_fu_1121_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_15_1_reg_1926 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_14_1_fu_1128_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_14_1_reg_1931 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_13_1_fu_1134_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_13_1_reg_1936 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_12_1_fu_1140_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_11_1_fu_1146_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_11_1_reg_1946 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_10_1_fu_1153_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_10_1_reg_1951 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_9_1_fu_1159_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_9_1_reg_1956 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_8_1_fu_1165_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_7_1_fu_1171_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_7_1_reg_1966 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_6_1_fu_1178_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_6_1_reg_1971 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_5_1_fu_1184_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_5_1_reg_1976 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_4_1_fu_1190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_fu_1196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_reg_1986 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_1_fu_1203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_1_reg_1991 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_fu_1209_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_reg_1996 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_fu_1215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1304_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_reg_2006 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_17_reg_2006 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp0_iter3_tmp_17_reg_2006 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_copy_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_load_reg_2011 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal b_copy_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_5_load_reg_2021 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_9_load_reg_2031 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_13_load_reg_2041 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_load_reg_2051 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_6_load_reg_2061 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_10_load_reg_2071 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_14_load_reg_2081 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_load_reg_2091 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_7_load_reg_2096 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_11_load_reg_2101 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_15_load_reg_2106 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2111 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_4_reg_2116 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_8_reg_2121 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_11_reg_2126 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_2131 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_5_reg_2136 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_9_reg_2141 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_12_reg_2146 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_2151 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_6_reg_2156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_s_reg_2161 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_13_reg_2166 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_1378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_2171 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_1382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_reg_2176 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_1386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_reg_2181 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_1390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_reg_2186 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_reg_2191 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_7_reg_2196 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_10_reg_2201 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_14_reg_2206 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_s_fu_1442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_s_reg_2211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal b_copy_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_0_ce0 : STD_LOGIC;
    signal b_copy_0_we0 : STD_LOGIC;
    signal b_copy_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_1_ce0 : STD_LOGIC;
    signal b_copy_1_we0 : STD_LOGIC;
    signal b_copy_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_2_ce0 : STD_LOGIC;
    signal b_copy_2_we0 : STD_LOGIC;
    signal b_copy_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_3_ce0 : STD_LOGIC;
    signal b_copy_3_we0 : STD_LOGIC;
    signal b_copy_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_4_ce0 : STD_LOGIC;
    signal b_copy_4_we0 : STD_LOGIC;
    signal b_copy_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_5_ce0 : STD_LOGIC;
    signal b_copy_5_we0 : STD_LOGIC;
    signal b_copy_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_6_ce0 : STD_LOGIC;
    signal b_copy_6_we0 : STD_LOGIC;
    signal b_copy_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_7_ce0 : STD_LOGIC;
    signal b_copy_7_we0 : STD_LOGIC;
    signal b_copy_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_8_ce0 : STD_LOGIC;
    signal b_copy_8_we0 : STD_LOGIC;
    signal b_copy_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_9_ce0 : STD_LOGIC;
    signal b_copy_9_we0 : STD_LOGIC;
    signal b_copy_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_10_ce0 : STD_LOGIC;
    signal b_copy_10_we0 : STD_LOGIC;
    signal b_copy_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_11_ce0 : STD_LOGIC;
    signal b_copy_11_we0 : STD_LOGIC;
    signal b_copy_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_12_ce0 : STD_LOGIC;
    signal b_copy_12_we0 : STD_LOGIC;
    signal b_copy_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_13_ce0 : STD_LOGIC;
    signal b_copy_13_we0 : STD_LOGIC;
    signal b_copy_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_14_ce0 : STD_LOGIC;
    signal b_copy_14_we0 : STD_LOGIC;
    signal b_copy_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_15_ce0 : STD_LOGIC;
    signal b_copy_15_we0 : STD_LOGIC;
    signal indvar_flatten_phi_fu_836_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_phi_fu_847_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_phi_fu_858_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_954_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_988_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1000_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1023_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_fu_1448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_row_0_2_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_2_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_2_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_4_2_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_5_2_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_6_2_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_7_2_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_8_2_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_9_2_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_10_2_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_11_2_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_12_2_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_13_2_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_14_2_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_15_2_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal c_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_877_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_949_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_cast_fu_966_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_969_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_983_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_1018_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_cast1_fu_1040_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_1043_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_1110_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_cast_fu_1117_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_cast_fu_1301_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1310_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1320_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_1394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_1403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_1398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_1407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_1418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_fu_1427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_1422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_1431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_1436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component matmul_hw_mul_32sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_hw_b_copy_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    b_copy_0_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_0_address0,
        ce0 => b_copy_0_ce0,
        we0 => b_copy_0_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_0_q0);

    b_copy_1_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_1_address0,
        ce0 => b_copy_1_ce0,
        we0 => b_copy_1_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_1_q0);

    b_copy_2_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_2_address0,
        ce0 => b_copy_2_ce0,
        we0 => b_copy_2_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_2_q0);

    b_copy_3_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_3_address0,
        ce0 => b_copy_3_ce0,
        we0 => b_copy_3_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_3_q0);

    b_copy_4_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_4_address0,
        ce0 => b_copy_4_ce0,
        we0 => b_copy_4_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_4_q0);

    b_copy_5_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_5_address0,
        ce0 => b_copy_5_ce0,
        we0 => b_copy_5_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_5_q0);

    b_copy_6_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_6_address0,
        ce0 => b_copy_6_ce0,
        we0 => b_copy_6_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_6_q0);

    b_copy_7_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_7_address0,
        ce0 => b_copy_7_ce0,
        we0 => b_copy_7_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_7_q0);

    b_copy_8_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_8_address0,
        ce0 => b_copy_8_ce0,
        we0 => b_copy_8_we0,
        d0 => b_2_Dout_A,
        q0 => b_copy_8_q0);

    b_copy_9_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_9_address0,
        ce0 => b_copy_9_ce0,
        we0 => b_copy_9_we0,
        d0 => b_2_Dout_A,
        q0 => b_copy_9_q0);

    b_copy_10_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_10_address0,
        ce0 => b_copy_10_ce0,
        we0 => b_copy_10_we0,
        d0 => b_2_Dout_A,
        q0 => b_copy_10_q0);

    b_copy_11_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_11_address0,
        ce0 => b_copy_11_ce0,
        we0 => b_copy_11_we0,
        d0 => b_2_Dout_A,
        q0 => b_copy_11_q0);

    b_copy_12_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_12_address0,
        ce0 => b_copy_12_ce0,
        we0 => b_copy_12_we0,
        d0 => b_3_Dout_A,
        q0 => b_copy_12_q0);

    b_copy_13_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_13_address0,
        ce0 => b_copy_13_ce0,
        we0 => b_copy_13_we0,
        d0 => b_3_Dout_A,
        q0 => b_copy_13_q0);

    b_copy_14_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_14_address0,
        ce0 => b_copy_14_ce0,
        we0 => b_copy_14_we0,
        d0 => b_3_Dout_A,
        q0 => b_copy_14_q0);

    b_copy_15_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_15_address0,
        ce0 => b_copy_15_ce0,
        we0 => b_copy_15_we0,
        d0 => b_3_Dout_A,
        q0 => b_copy_15_q0);

    matmul_hw_mul_32sdEe_U1 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1310_p0,
        din1 => b_copy_0_load_reg_1881,
        ce => ap_const_logic_1,
        dout => grp_fu_1310_p2);

    matmul_hw_mul_32sdEe_U2 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1315_p0,
        din1 => b_copy_4_load_reg_1891,
        ce => ap_const_logic_1,
        dout => grp_fu_1315_p2);

    matmul_hw_mul_32sdEe_U3 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1320_p0,
        din1 => b_copy_8_load_reg_1901,
        ce => ap_const_logic_1,
        dout => grp_fu_1320_p2);

    matmul_hw_mul_32sdEe_U4 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1325_p0,
        din1 => b_copy_12_load_reg_1911,
        ce => ap_const_logic_1,
        dout => grp_fu_1325_p2);

    matmul_hw_mul_32sdEe_U5 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_1_1_reg_1996,
        din1 => b_copy_1_load_reg_2011,
        ce => ap_const_logic_1,
        dout => grp_fu_1330_p2);

    matmul_hw_mul_32sdEe_U6 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_5_1_reg_1976,
        din1 => b_copy_5_load_reg_2021,
        ce => ap_const_logic_1,
        dout => grp_fu_1334_p2);

    matmul_hw_mul_32sdEe_U7 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_9_1_reg_1956,
        din1 => b_copy_9_load_reg_2031,
        ce => ap_const_logic_1,
        dout => grp_fu_1338_p2);

    matmul_hw_mul_32sdEe_U8 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_13_1_reg_1936,
        din1 => b_copy_13_load_reg_2041,
        ce => ap_const_logic_1,
        dout => grp_fu_1342_p2);

    matmul_hw_mul_32sdEe_U9 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_2_1_reg_1991,
        din1 => b_copy_2_load_reg_2051,
        ce => ap_const_logic_1,
        dout => grp_fu_1346_p2);

    matmul_hw_mul_32sdEe_U10 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_6_1_reg_1971,
        din1 => b_copy_6_load_reg_2061,
        ce => ap_const_logic_1,
        dout => grp_fu_1350_p2);

    matmul_hw_mul_32sdEe_U11 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_10_1_reg_1951,
        din1 => b_copy_10_load_reg_2071,
        ce => ap_const_logic_1,
        dout => grp_fu_1354_p2);

    matmul_hw_mul_32sdEe_U12 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_14_1_reg_1931,
        din1 => b_copy_14_load_reg_2081,
        ce => ap_const_logic_1,
        dout => grp_fu_1358_p2);

    matmul_hw_mul_32sdEe_U13 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_3_1_reg_1986,
        din1 => b_copy_3_load_reg_2091,
        ce => ap_const_logic_1,
        dout => grp_fu_1362_p2);

    matmul_hw_mul_32sdEe_U14 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_7_1_reg_1966,
        din1 => b_copy_7_load_reg_2096,
        ce => ap_const_logic_1,
        dout => grp_fu_1366_p2);

    matmul_hw_mul_32sdEe_U15 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_11_1_reg_1946,
        din1 => b_copy_11_load_reg_2101,
        ce => ap_const_logic_1,
        dout => grp_fu_1370_p2);

    matmul_hw_mul_32sdEe_U16 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_15_1_reg_1926,
        din1 => b_copy_15_load_reg_2106,
        ce => ap_const_logic_1,
        dout => grp_fu_1374_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_865_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and not((exitcond_flatten_reg_1548 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_843_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_843 <= tmp_1_mid2_v_reg_1572;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_843 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_832_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_832 <= indvar_flatten_next_reg_1552;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_832 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_854_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_854 <= j_1_reg_1921;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_854 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                a_row_0_2_fu_100 <= a_row_0_1_fu_1215_p3;
                a_row_10_2_fu_140 <= a_row_10_1_fu_1153_p3;
                a_row_11_2_fu_144 <= a_row_11_1_fu_1146_p3;
                a_row_12_2_fu_148 <= a_row_12_1_fu_1140_p3;
                a_row_13_2_fu_152 <= a_row_13_1_fu_1134_p3;
                a_row_14_2_fu_156 <= a_row_14_1_fu_1128_p3;
                a_row_15_2_fu_160 <= a_row_15_1_fu_1121_p3;
                a_row_1_2_fu_104 <= a_row_1_1_fu_1209_p3;
                a_row_2_2_fu_108 <= a_row_2_1_fu_1203_p3;
                a_row_3_2_fu_112 <= a_row_3_1_fu_1196_p3;
                a_row_4_2_fu_116 <= a_row_4_1_fu_1190_p3;
                a_row_5_2_fu_120 <= a_row_5_1_fu_1184_p3;
                a_row_6_2_fu_124 <= a_row_6_1_fu_1178_p3;
                a_row_7_2_fu_128 <= a_row_7_1_fu_1171_p3;
                a_row_8_2_fu_132 <= a_row_8_1_fu_1165_p3;
                a_row_9_2_fu_136 <= a_row_9_1_fu_1159_p3;
                b_copy_13_load_reg_2041 <= b_copy_13_q0;
                b_copy_1_load_reg_2011 <= b_copy_1_q0;
                b_copy_5_load_reg_2021 <= b_copy_5_q0;
                b_copy_9_load_reg_2031 <= b_copy_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                a_row_0_reg_1665 <= a_0_Dout_A;
                a_row_12_reg_1680 <= a_3_Dout_A;
                a_row_4_reg_1670 <= a_1_Dout_A;
                a_row_8_reg_1675 <= a_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                a_row_10_1_reg_1951 <= a_row_10_1_fu_1153_p3;
                a_row_11_1_reg_1946 <= a_row_11_1_fu_1146_p3;
                a_row_13_1_reg_1936 <= a_row_13_1_fu_1134_p3;
                a_row_14_1_reg_1931 <= a_row_14_1_fu_1128_p3;
                a_row_15_1_reg_1926 <= a_row_15_1_fu_1121_p3;
                a_row_1_1_reg_1996 <= a_row_1_1_fu_1209_p3;
                a_row_2_1_reg_1991 <= a_row_2_1_fu_1203_p3;
                a_row_3_1_reg_1986 <= a_row_3_1_fu_1196_p3;
                a_row_5_1_reg_1976 <= a_row_5_1_fu_1184_p3;
                a_row_6_1_reg_1971 <= a_row_6_1_fu_1178_p3;
                a_row_7_1_reg_1966 <= a_row_7_1_fu_1171_p3;
                a_row_9_1_reg_1956 <= a_row_9_1_fu_1159_p3;
                tmp_17_reg_2006 <= tmp_17_fu_1304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                a_row_10_reg_1851 <= a_2_Dout_A;
                a_row_14_reg_1856 <= a_3_Dout_A;
                a_row_2_reg_1841 <= a_0_Dout_A;
                a_row_6_reg_1846 <= a_1_Dout_A;
                b_copy_0_load_reg_1881 <= b_copy_0_q0;
                b_copy_12_load_reg_1911 <= b_copy_12_q0;
                b_copy_4_load_reg_1891 <= b_copy_4_q0;
                b_copy_8_load_reg_1901 <= b_copy_8_q0;
                j_1_reg_1921 <= j_1_fu_1057_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                a_row_13_reg_1740 <= a_3_Dout_A;
                a_row_1_reg_1725 <= a_0_Dout_A;
                a_row_5_reg_1730 <= a_1_Dout_A;
                a_row_9_reg_1735 <= a_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1548 <= exitcond_flatten_reg_1548;
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1548 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1548;
                ap_pipeline_reg_pp0_iter2_tmp_17_reg_2006 <= tmp_17_reg_2006;
                ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1548 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1548;
                ap_pipeline_reg_pp0_iter3_tmp_17_reg_2006 <= ap_pipeline_reg_pp0_iter2_tmp_17_reg_2006;
                exitcond_flatten_reg_1548 <= exitcond_flatten_fu_865_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                b_copy_10_load_reg_2071 <= b_copy_10_q0;
                b_copy_14_load_reg_2081 <= b_copy_14_q0;
                b_copy_2_load_reg_2051 <= b_copy_2_q0;
                b_copy_6_load_reg_2061 <= b_copy_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                b_copy_11_load_reg_2101 <= b_copy_11_q0;
                b_copy_15_load_reg_2106 <= b_copy_15_q0;
                b_copy_3_load_reg_2091 <= b_copy_3_q0;
                b_copy_7_load_reg_2096 <= b_copy_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_1552 <= indvar_flatten_next_fu_871_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_865_p2 = ap_const_lv1_0))) then
                j_mid2_reg_1557 <= j_mid2_fu_889_p3;
                    tmp_1_reg_1578(6 downto 2) <= tmp_1_fu_925_p3(6 downto 2);
                tmp_mid2_reg_1568 <= tmp_mid2_fu_909_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                tmp10_reg_2181 <= tmp10_fu_1386_p2;
                tmp13_reg_2186 <= tmp13_fu_1390_p2;
                tmp3_reg_2171 <= tmp3_fu_1378_p2;
                tmp6_reg_2176 <= tmp6_fu_1382_p2;
                tmp_2_13_reg_2166 <= grp_fu_1358_p2;
                tmp_2_2_reg_2151 <= grp_fu_1346_p2;
                tmp_2_6_reg_2156 <= grp_fu_1350_p2;
                tmp_2_s_reg_2161 <= grp_fu_1354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_865_p2 = ap_const_lv1_0))) then
                tmp_1_mid2_v_reg_1572 <= tmp_1_mid2_v_fu_917_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                tmp_2_10_reg_2201 <= grp_fu_1370_p2;
                tmp_2_14_reg_2206 <= grp_fu_1374_p2;
                tmp_2_3_reg_2191 <= grp_fu_1362_p2;
                tmp_2_7_reg_2196 <= grp_fu_1366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                tmp_2_11_reg_2126 <= grp_fu_1325_p2;
                tmp_2_4_reg_2116 <= grp_fu_1315_p2;
                tmp_2_8_reg_2121 <= grp_fu_1320_p2;
                tmp_s_reg_2111 <= grp_fu_1310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                tmp_2_12_reg_2146 <= grp_fu_1342_p2;
                tmp_2_1_reg_2131 <= grp_fu_1330_p2;
                tmp_2_5_reg_2136 <= grp_fu_1334_p2;
                tmp_2_9_reg_2141 <= grp_fu_1338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_3_reg_1821 <= tmp_3_fu_1035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1548 = ap_const_lv1_0))) then
                tmp_5_s_reg_2211 <= tmp_5_s_fu_1442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_865_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_fu_909_p3)))) then
                    tmp_6_reg_1605(4 downto 0) <= tmp_6_fu_941_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                    tmp_9_reg_1765(4 downto 0) <= tmp_9_fu_1011_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_1_reg_1578(1 downto 0) <= "00";
    tmp_6_reg_1605(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_9_reg_1765(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_865_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_865_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_4_fu_933_p1, tmp_7_fu_954_p3, tmp_10_fu_988_p3, tmp_12_fu_1023_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_0_Addr_A_orig <= tmp_12_fu_1023_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_0_Addr_A_orig <= tmp_10_fu_988_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_0_Addr_A_orig <= tmp_7_fu_954_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_0_Addr_A_orig <= tmp_4_fu_933_p1(32 - 1 downto 0);
            else 
                a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv32_0;

    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv4_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_4_fu_933_p1, tmp_7_fu_954_p3, tmp_10_fu_988_p3, tmp_12_fu_1023_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_1_Addr_A_orig <= tmp_12_fu_1023_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_1_Addr_A_orig <= tmp_10_fu_988_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_1_Addr_A_orig <= tmp_7_fu_954_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_1_Addr_A_orig <= tmp_4_fu_933_p1(32 - 1 downto 0);
            else 
                a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= ap_const_lv32_0;

    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;
    a_1_WEN_A <= ap_const_lv4_0;
    a_2_Addr_A <= std_logic_vector(shift_left(unsigned(a_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_4_fu_933_p1, tmp_7_fu_954_p3, tmp_10_fu_988_p3, tmp_12_fu_1023_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_2_Addr_A_orig <= tmp_12_fu_1023_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_2_Addr_A_orig <= tmp_10_fu_988_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_2_Addr_A_orig <= tmp_7_fu_954_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_2_Addr_A_orig <= tmp_4_fu_933_p1(32 - 1 downto 0);
            else 
                a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_2_Clk_A <= ap_clk;
    a_2_Din_A <= ap_const_lv32_0;

    a_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_2_EN_A <= ap_const_logic_1;
        else 
            a_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_2_Rst_A <= ap_rst;
    a_2_WEN_A <= ap_const_lv4_0;
    a_3_Addr_A <= std_logic_vector(shift_left(unsigned(a_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_3_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_4_fu_933_p1, tmp_7_fu_954_p3, tmp_10_fu_988_p3, tmp_12_fu_1023_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_3_Addr_A_orig <= tmp_12_fu_1023_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_3_Addr_A_orig <= tmp_10_fu_988_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_3_Addr_A_orig <= tmp_7_fu_954_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_3_Addr_A_orig <= tmp_4_fu_933_p1(32 - 1 downto 0);
            else 
                a_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_3_Clk_A <= ap_clk;
    a_3_Din_A <= ap_const_lv32_0;

    a_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_3_EN_A <= ap_const_logic_1;
        else 
            a_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_3_Rst_A <= ap_rst;
    a_3_WEN_A <= ap_const_lv4_0;
    a_row_0_1_fu_1215_p3 <= 
        a_row_0_reg_1665 when (tmp_3_reg_1821(0) = '1') else 
        a_row_0_2_fu_100;
    a_row_10_1_fu_1153_p3 <= 
        a_row_10_reg_1851 when (tmp_3_reg_1821(0) = '1') else 
        a_row_10_2_fu_140;
    a_row_11_1_fu_1146_p3 <= 
        a_2_Dout_A when (tmp_3_reg_1821(0) = '1') else 
        a_row_11_2_fu_144;
    a_row_12_1_fu_1140_p3 <= 
        a_row_12_reg_1680 when (tmp_3_reg_1821(0) = '1') else 
        a_row_12_2_fu_148;
    a_row_13_1_fu_1134_p3 <= 
        a_row_13_reg_1740 when (tmp_3_reg_1821(0) = '1') else 
        a_row_13_2_fu_152;
    a_row_14_1_fu_1128_p3 <= 
        a_row_14_reg_1856 when (tmp_3_reg_1821(0) = '1') else 
        a_row_14_2_fu_156;
    a_row_15_1_fu_1121_p3 <= 
        a_3_Dout_A when (tmp_3_reg_1821(0) = '1') else 
        a_row_15_2_fu_160;
    a_row_1_1_fu_1209_p3 <= 
        a_row_1_reg_1725 when (tmp_3_reg_1821(0) = '1') else 
        a_row_1_2_fu_104;
    a_row_2_1_fu_1203_p3 <= 
        a_row_2_reg_1841 when (tmp_3_reg_1821(0) = '1') else 
        a_row_2_2_fu_108;
    a_row_3_1_fu_1196_p3 <= 
        a_0_Dout_A when (tmp_3_reg_1821(0) = '1') else 
        a_row_3_2_fu_112;
    a_row_4_1_fu_1190_p3 <= 
        a_row_4_reg_1670 when (tmp_3_reg_1821(0) = '1') else 
        a_row_4_2_fu_116;
    a_row_5_1_fu_1184_p3 <= 
        a_row_5_reg_1730 when (tmp_3_reg_1821(0) = '1') else 
        a_row_5_2_fu_120;
    a_row_6_1_fu_1178_p3 <= 
        a_row_6_reg_1846 when (tmp_3_reg_1821(0) = '1') else 
        a_row_6_2_fu_124;
    a_row_7_1_fu_1171_p3 <= 
        a_1_Dout_A when (tmp_3_reg_1821(0) = '1') else 
        a_row_7_2_fu_128;
    a_row_8_1_fu_1165_p3 <= 
        a_row_8_reg_1675 when (tmp_3_reg_1821(0) = '1') else 
        a_row_8_2_fu_132;
    a_row_9_1_fu_1159_p3 <= 
        a_row_9_reg_1735 when (tmp_3_reg_1821(0) = '1') else 
        a_row_9_2_fu_136;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state17 <= ap_CS_fsm(5 downto 5);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Addr_A <= std_logic_vector(shift_left(unsigned(b_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_6_fu_941_p1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_15_cast_fu_975_p1, tmp_15_fu_1000_p3, tmp_17_cast_fu_1049_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_0_Addr_A_orig <= tmp_17_cast_fu_1049_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_0_Addr_A_orig <= tmp_15_fu_1000_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_0_Addr_A_orig <= tmp_15_cast_fu_975_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_0_Addr_A_orig <= tmp_6_fu_941_p1(32 - 1 downto 0);
            else 
                b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_0_Clk_A <= ap_clk;
    b_0_Din_A <= ap_const_lv32_0;

    b_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_0_EN_A <= ap_const_logic_1;
        else 
            b_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Rst_A <= ap_rst;
    b_0_WEN_A <= ap_const_lv4_0;
    b_1_Addr_A <= std_logic_vector(shift_left(unsigned(b_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_6_fu_941_p1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_15_cast_fu_975_p1, tmp_15_fu_1000_p3, tmp_17_cast_fu_1049_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_1_Addr_A_orig <= tmp_17_cast_fu_1049_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_1_Addr_A_orig <= tmp_15_fu_1000_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_1_Addr_A_orig <= tmp_15_cast_fu_975_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_1_Addr_A_orig <= tmp_6_fu_941_p1(32 - 1 downto 0);
            else 
                b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_1_Clk_A <= ap_clk;
    b_1_Din_A <= ap_const_lv32_0;

    b_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_1_EN_A <= ap_const_logic_1;
        else 
            b_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_1_Rst_A <= ap_rst;
    b_1_WEN_A <= ap_const_lv4_0;
    b_2_Addr_A <= std_logic_vector(shift_left(unsigned(b_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_6_fu_941_p1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_15_cast_fu_975_p1, tmp_15_fu_1000_p3, tmp_17_cast_fu_1049_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_2_Addr_A_orig <= tmp_17_cast_fu_1049_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_2_Addr_A_orig <= tmp_15_fu_1000_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_2_Addr_A_orig <= tmp_15_cast_fu_975_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_2_Addr_A_orig <= tmp_6_fu_941_p1(32 - 1 downto 0);
            else 
                b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_2_Clk_A <= ap_clk;
    b_2_Din_A <= ap_const_lv32_0;

    b_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_2_EN_A <= ap_const_logic_1;
        else 
            b_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_2_Rst_A <= ap_rst;
    b_2_WEN_A <= ap_const_lv4_0;
    b_3_Addr_A <= std_logic_vector(shift_left(unsigned(b_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_3_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_6_fu_941_p1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_15_cast_fu_975_p1, tmp_15_fu_1000_p3, tmp_17_cast_fu_1049_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_3_Addr_A_orig <= tmp_17_cast_fu_1049_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_3_Addr_A_orig <= tmp_15_fu_1000_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_3_Addr_A_orig <= tmp_15_cast_fu_975_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_3_Addr_A_orig <= tmp_6_fu_941_p1(32 - 1 downto 0);
            else 
                b_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_3_Clk_A <= ap_clk;
    b_3_Din_A <= ap_const_lv32_0;

    b_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_3_EN_A <= ap_const_logic_1;
        else 
            b_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_3_Rst_A <= ap_rst;
    b_3_WEN_A <= ap_const_lv4_0;

    b_copy_0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, tmp_9_fu_1011_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_0_address0 <= tmp_9_fu_1011_p1(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_0_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_0_address0 <= "XXXX";
            end if;
        else 
            b_copy_0_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_0_ce0 <= ap_const_logic_1;
        else 
            b_copy_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_0_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568))))) then 
            b_copy_0_we0 <= ap_const_logic_1;
        else 
            b_copy_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_10_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_6_reg_1605, tmp_9_reg_1765, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            b_copy_10_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
            b_copy_10_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
        else 
            b_copy_10_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_10_ce0 <= ap_const_logic_1;
        else 
            b_copy_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_10_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_10_we0 <= ap_const_logic_1;
        else 
            b_copy_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_11_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage1, tmp_9_reg_1765, ap_enable_reg_pp0_iter1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_11_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_copy_11_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_11_address0 <= "XXXX";
            end if;
        else 
            b_copy_11_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_11_ce0 <= ap_const_logic_1;
        else 
            b_copy_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_11_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_mid2_reg_1568, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_11_we0 <= ap_const_logic_1;
        else 
            b_copy_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_12_address0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, tmp_9_fu_1011_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_12_address0 <= tmp_9_fu_1011_p1(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_12_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_12_address0 <= "XXXX";
            end if;
        else 
            b_copy_12_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_12_ce0 <= ap_const_logic_1;
        else 
            b_copy_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_12_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568))))) then 
            b_copy_12_we0 <= ap_const_logic_1;
        else 
            b_copy_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_13_address0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage2, tmp_9_reg_1765, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_13_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_13_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_13_address0 <= "XXXX";
            end if;
        else 
            b_copy_13_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_13_ce0 <= ap_const_logic_1;
        else 
            b_copy_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_13_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_13_we0 <= ap_const_logic_1;
        else 
            b_copy_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_14_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_6_reg_1605, tmp_9_reg_1765, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            b_copy_14_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
            b_copy_14_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
        else 
            b_copy_14_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_14_ce0 <= ap_const_logic_1;
        else 
            b_copy_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_14_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_14_we0 <= ap_const_logic_1;
        else 
            b_copy_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_15_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage1, tmp_9_reg_1765, ap_enable_reg_pp0_iter1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_15_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_copy_15_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_15_address0 <= "XXXX";
            end if;
        else 
            b_copy_15_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_15_ce0 <= ap_const_logic_1;
        else 
            b_copy_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_15_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_mid2_reg_1568, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_15_we0 <= ap_const_logic_1;
        else 
            b_copy_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage2, tmp_9_reg_1765, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_1_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_1_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_1_address0 <= "XXXX";
            end if;
        else 
            b_copy_1_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_1_ce0 <= ap_const_logic_1;
        else 
            b_copy_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_1_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_1_we0 <= ap_const_logic_1;
        else 
            b_copy_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_6_reg_1605, tmp_9_reg_1765, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            b_copy_2_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
            b_copy_2_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
        else 
            b_copy_2_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_2_ce0 <= ap_const_logic_1;
        else 
            b_copy_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_2_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_2_we0 <= ap_const_logic_1;
        else 
            b_copy_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage1, tmp_9_reg_1765, ap_enable_reg_pp0_iter1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_3_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_copy_3_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_3_address0 <= "XXXX";
            end if;
        else 
            b_copy_3_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_3_ce0 <= ap_const_logic_1;
        else 
            b_copy_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_mid2_reg_1568, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_3_we0 <= ap_const_logic_1;
        else 
            b_copy_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_4_address0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, tmp_9_fu_1011_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_4_address0 <= tmp_9_fu_1011_p1(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_4_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_4_address0 <= "XXXX";
            end if;
        else 
            b_copy_4_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_4_ce0 <= ap_const_logic_1;
        else 
            b_copy_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_4_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568))))) then 
            b_copy_4_we0 <= ap_const_logic_1;
        else 
            b_copy_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_5_address0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage2, tmp_9_reg_1765, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_5_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_5_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_5_address0 <= "XXXX";
            end if;
        else 
            b_copy_5_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_5_ce0 <= ap_const_logic_1;
        else 
            b_copy_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_5_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_5_we0 <= ap_const_logic_1;
        else 
            b_copy_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_6_reg_1605, tmp_9_reg_1765, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            b_copy_6_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
            b_copy_6_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
        else 
            b_copy_6_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_6_ce0 <= ap_const_logic_1;
        else 
            b_copy_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_6_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_6_we0 <= ap_const_logic_1;
        else 
            b_copy_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage1, tmp_9_reg_1765, ap_enable_reg_pp0_iter1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_7_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_copy_7_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_7_address0 <= "XXXX";
            end if;
        else 
            b_copy_7_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_7_ce0 <= ap_const_logic_1;
        else 
            b_copy_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_mid2_reg_1568, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_7_we0 <= ap_const_logic_1;
        else 
            b_copy_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_8_address0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, tmp_9_fu_1011_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_8_address0 <= tmp_9_fu_1011_p1(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_8_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_8_address0 <= "XXXX";
            end if;
        else 
            b_copy_8_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_8_ce0 <= ap_const_logic_1;
        else 
            b_copy_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_8_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568))))) then 
            b_copy_8_we0 <= ap_const_logic_1;
        else 
            b_copy_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_9_address0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_6_reg_1605, ap_CS_fsm_pp0_stage2, tmp_9_reg_1765, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_9_address0 <= tmp_9_reg_1765(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_9_address0 <= tmp_6_reg_1605(4 - 1 downto 0);
            else 
                b_copy_9_address0 <= "XXXX";
            end if;
        else 
            b_copy_9_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_9_ce0 <= ap_const_logic_1;
        else 
            b_copy_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_9_we0_assign_proc : process(exitcond_flatten_reg_1548, ap_enable_reg_pp0_iter0, tmp_mid2_reg_1568, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1568)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_9_we0 <= ap_const_logic_1;
        else 
            b_copy_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_Addr_A <= std_logic_vector(shift_left(unsigned(c_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    c_Addr_A_orig <= tmp_18_cast_fu_1448_p1(32 - 1 downto 0);
    c_Clk_A <= ap_clk;
    c_Din_A <= tmp_5_s_reg_2211;

    c_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            c_EN_A <= ap_const_logic_1;
        else 
            c_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    c_Rst_A <= ap_rst;

    c_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1548, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) then 
            c_WEN_A <= ap_const_lv4_F;
        else 
            c_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    exitcond_flatten_fu_865_p2 <= "1" when (indvar_flatten_phi_fu_836_p4 = ap_const_lv9_100) else "0";
    exitcond_fu_883_p2 <= "1" when (j_phi_fu_858_p4 = ap_const_lv5_10) else "0";
    grp_fu_1310_p0 <= 
        a_row_0_reg_1665 when (tmp_3_reg_1821(0) = '1') else 
        a_row_0_2_fu_100;
    grp_fu_1315_p0 <= 
        a_row_4_reg_1670 when (tmp_3_reg_1821(0) = '1') else 
        a_row_4_2_fu_116;
    grp_fu_1320_p0 <= 
        a_row_8_reg_1675 when (tmp_3_reg_1821(0) = '1') else 
        a_row_8_2_fu_132;
    grp_fu_1325_p0 <= 
        a_row_12_reg_1680 when (tmp_3_reg_1821(0) = '1') else 
        a_row_12_2_fu_148;
    i_1_fu_877_p2 <= std_logic_vector(unsigned(i_phi_fu_847_p4) + unsigned(ap_const_lv5_1));

    i_phi_fu_847_p4_assign_proc : process(i_reg_843, exitcond_flatten_reg_1548, ap_CS_fsm_pp0_stage0, tmp_1_mid2_v_reg_1572, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_phi_fu_847_p4 <= tmp_1_mid2_v_reg_1572;
        else 
            i_phi_fu_847_p4 <= i_reg_843;
        end if; 
    end process;

    indvar_flatten_next_fu_871_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_836_p4) + unsigned(ap_const_lv9_1));

    indvar_flatten_phi_fu_836_p4_assign_proc : process(indvar_flatten_reg_832, exitcond_flatten_reg_1548, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1552, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_836_p4 <= indvar_flatten_next_reg_1552;
        else 
            indvar_flatten_phi_fu_836_p4 <= indvar_flatten_reg_832;
        end if; 
    end process;

    j_1_fu_1057_p2 <= std_logic_vector(unsigned(j_mid2_reg_1557) + unsigned(ap_const_lv5_1));
    j_mid2_fu_889_p3 <= 
        ap_const_lv5_0 when (exitcond_fu_883_p2(0) = '1') else 
        j_phi_fu_858_p4;

    j_phi_fu_858_p4_assign_proc : process(j_reg_854, exitcond_flatten_reg_1548, ap_CS_fsm_pp0_stage0, j_1_reg_1921, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            j_phi_fu_858_p4 <= j_1_reg_1921;
        else 
            j_phi_fu_858_p4 <= j_reg_854;
        end if; 
    end process;

    tmp10_fu_1386_p2 <= std_logic_vector(unsigned(tmp_2_9_reg_2141) + unsigned(tmp_2_8_reg_2121));
    tmp11_fu_1418_p2 <= std_logic_vector(unsigned(tmp_2_10_reg_2201) + unsigned(tmp_2_s_reg_2161));
    tmp12_fu_1431_p2 <= std_logic_vector(unsigned(tmp13_reg_2186) + unsigned(tmp14_fu_1427_p2));
    tmp13_fu_1390_p2 <= std_logic_vector(unsigned(tmp_2_12_reg_2146) + unsigned(tmp_2_11_reg_2126));
    tmp14_fu_1427_p2 <= std_logic_vector(unsigned(tmp_2_14_reg_2206) + unsigned(tmp_2_13_reg_2166));
    tmp1_fu_1412_p2 <= std_logic_vector(unsigned(tmp2_fu_1398_p2) + unsigned(tmp5_fu_1407_p2));
    tmp2_fu_1398_p2 <= std_logic_vector(unsigned(tmp3_reg_2171) + unsigned(tmp4_fu_1394_p2));
    tmp3_fu_1378_p2 <= std_logic_vector(unsigned(tmp_2_1_reg_2131) + unsigned(tmp_s_reg_2111));
    tmp4_fu_1394_p2 <= std_logic_vector(unsigned(tmp_2_3_reg_2191) + unsigned(tmp_2_2_reg_2151));
    tmp5_fu_1407_p2 <= std_logic_vector(unsigned(tmp6_reg_2176) + unsigned(tmp7_fu_1403_p2));
    tmp6_fu_1382_p2 <= std_logic_vector(unsigned(tmp_2_5_reg_2136) + unsigned(tmp_2_4_reg_2116));
    tmp7_fu_1403_p2 <= std_logic_vector(unsigned(tmp_2_7_reg_2196) + unsigned(tmp_2_6_reg_2156));
    tmp8_fu_1436_p2 <= std_logic_vector(unsigned(tmp9_fu_1422_p2) + unsigned(tmp12_fu_1431_p2));
    tmp9_fu_1422_p2 <= std_logic_vector(unsigned(tmp10_reg_2181) + unsigned(tmp11_fu_1418_p2));
    tmp_10_fu_988_p3 <= (ap_const_lv57_0 & tmp_8_fu_983_p2);
    tmp_11_fu_1018_p2 <= (tmp_1_reg_1578 or ap_const_lv7_3);
    tmp_12_fu_1023_p3 <= (ap_const_lv57_0 & tmp_11_fu_1018_p2);
    tmp_13_fu_1110_p3 <= (tmp_1_mid2_v_reg_1572 & ap_const_lv4_0);
    tmp_14_cast_fu_1117_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_1110_p3),10));
    tmp_14_fu_969_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_966_p1) + unsigned(ap_const_lv6_10));
    tmp_15_cast_fu_975_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_969_p2),64));
    tmp_15_fu_1000_p3 <= (ap_const_lv59_1 & j_mid2_reg_1557);
    tmp_16_fu_1043_p2 <= std_logic_vector(unsigned(tmp_6_cast1_fu_1040_p1) + unsigned(ap_const_lv7_30));
    tmp_17_cast_fu_1049_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_1043_p2),64));
    tmp_17_fu_1304_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_1117_p1) + unsigned(tmp_9_cast_fu_1301_p1));
    tmp_18_cast_fu_1448_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter3_tmp_17_reg_2006),64));
    tmp_1_fu_925_p3 <= (tmp_1_mid2_v_fu_917_p3 & ap_const_lv2_0);
    tmp_1_mid2_v_fu_917_p3 <= 
        i_1_fu_877_p2 when (exitcond_fu_883_p2(0) = '1') else 
        i_phi_fu_847_p4;
    tmp_3_fu_1035_p2 <= "1" when (j_mid2_reg_1557 = ap_const_lv5_0) else "0";
    tmp_4_fu_933_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_925_p3),64));
    tmp_5_fu_949_p2 <= (tmp_1_reg_1578 or ap_const_lv7_1);
    tmp_5_s_fu_1442_p2 <= std_logic_vector(unsigned(tmp1_fu_1412_p2) + unsigned(tmp8_fu_1436_p2));
    tmp_6_cast1_fu_1040_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1557),7));
    tmp_6_cast_fu_966_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1557),6));
    tmp_6_fu_941_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_889_p3),64));
    tmp_7_fu_954_p3 <= (ap_const_lv57_0 & tmp_5_fu_949_p2);
    tmp_8_fu_983_p2 <= (tmp_1_reg_1578 or ap_const_lv7_2);
    tmp_9_cast_fu_1301_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1557),10));
    tmp_9_fu_1011_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1557),64));
    tmp_fu_903_p2 <= "1" when (i_phi_fu_847_p4 = ap_const_lv5_0) else "0";
    tmp_mid1_fu_897_p2 <= "1" when (i_1_fu_877_p2 = ap_const_lv5_0) else "0";
    tmp_mid2_fu_909_p3 <= 
        tmp_mid1_fu_897_p2 when (exitcond_fu_883_p2(0) = '1') else 
        tmp_fu_903_p2;
end behav;
