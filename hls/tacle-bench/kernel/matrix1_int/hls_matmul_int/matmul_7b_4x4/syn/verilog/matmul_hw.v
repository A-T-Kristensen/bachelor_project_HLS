// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.050000,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1069,HLS_SYN_LUT=2194}" *)

module matmul_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        b_0_Addr_A,
        b_0_EN_A,
        b_0_WEN_A,
        b_0_Din_A,
        b_0_Dout_A,
        b_0_Clk_A,
        b_0_Rst_A,
        b_1_Addr_A,
        b_1_EN_A,
        b_1_WEN_A,
        b_1_Din_A,
        b_1_Dout_A,
        b_1_Clk_A,
        b_1_Rst_A,
        b_2_Addr_A,
        b_2_EN_A,
        b_2_WEN_A,
        b_2_Din_A,
        b_2_Dout_A,
        b_2_Clk_A,
        b_2_Rst_A,
        c_Addr_A,
        c_EN_A,
        c_WEN_A,
        c_Din_A,
        c_Dout_A,
        c_Clk_A,
        c_Rst_A
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_pp0_stage0 = 4'b10;
parameter    ap_ST_fsm_pp0_stage1 = 4'b100;
parameter    ap_ST_fsm_state12 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv60_0 = 60'b000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [3:0] a_0_WEN_A;
output  [31:0] a_0_Din_A;
input  [31:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [3:0] a_1_WEN_A;
output  [31:0] a_1_Din_A;
input  [31:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [3:0] a_2_WEN_A;
output  [31:0] a_2_Din_A;
input  [31:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] b_0_Addr_A;
output   b_0_EN_A;
output  [3:0] b_0_WEN_A;
output  [31:0] b_0_Din_A;
input  [31:0] b_0_Dout_A;
output   b_0_Clk_A;
output   b_0_Rst_A;
output  [31:0] b_1_Addr_A;
output   b_1_EN_A;
output  [3:0] b_1_WEN_A;
output  [31:0] b_1_Din_A;
input  [31:0] b_1_Dout_A;
output   b_1_Clk_A;
output   b_1_Rst_A;
output  [31:0] b_2_Addr_A;
output   b_2_EN_A;
output  [3:0] b_2_WEN_A;
output  [31:0] b_2_Din_A;
input  [31:0] b_2_Dout_A;
output   b_2_Clk_A;
output   b_2_Rst_A;
output  [31:0] c_Addr_A;
output   c_EN_A;
output  [3:0] c_WEN_A;
output  [31:0] c_Din_A;
input  [31:0] c_Dout_A;
output   c_Clk_A;
output   c_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_EN_A;
reg a_1_EN_A;
reg b_0_EN_A;
reg b_1_EN_A;
reg c_EN_A;
reg[3:0] c_WEN_A;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_262;
reg   [2:0] i_reg_273;
reg   [2:0] j_reg_284;
wire   [0:0] exitcond_flatten_fu_295_p2;
reg   [0:0] exitcond_flatten_reg_1232;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1232;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1232;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1232;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_1232;
wire   [4:0] indvar_flatten_next_fu_301_p2;
reg   [4:0] indvar_flatten_next_reg_1236;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] j_mid2_fu_319_p3;
reg   [2:0] j_mid2_reg_1241;
reg   [2:0] ap_pipeline_reg_pp0_iter1_j_mid2_reg_1241;
reg   [2:0] ap_pipeline_reg_pp0_iter2_j_mid2_reg_1241;
reg   [2:0] ap_pipeline_reg_pp0_iter3_j_mid2_reg_1241;
reg   [2:0] ap_pipeline_reg_pp0_iter4_j_mid2_reg_1241;
wire   [0:0] tmp_mid2_fu_339_p3;
reg   [0:0] tmp_mid2_reg_1249;
wire   [2:0] tmp_1_mid2_v_fu_347_p3;
reg   [2:0] tmp_1_mid2_v_reg_1269;
reg   [2:0] ap_pipeline_reg_pp0_iter1_tmp_1_mid2_v_reg_1269;
reg   [2:0] ap_pipeline_reg_pp0_iter2_tmp_1_mid2_v_reg_1269;
reg   [2:0] ap_pipeline_reg_pp0_iter3_tmp_1_mid2_v_reg_1269;
reg   [2:0] ap_pipeline_reg_pp0_iter4_tmp_1_mid2_v_reg_1269;
wire   [3:0] tmp_1_fu_355_p3;
reg   [3:0] tmp_1_reg_1275;
wire   [1:0] tmp_fu_375_p1;
reg   [1:0] tmp_reg_1300;
wire   [0:0] ap_CS_fsm_pp0_stage1;
wire   [0:0] tmp_3_fu_418_p2;
reg   [0:0] tmp_3_reg_1321;
reg   [31:0] a_row_0_reg_1329;
reg   [31:0] a_row_2_reg_1334;
wire   [0:0] sel_tmp_fu_438_p2;
reg   [0:0] sel_tmp_reg_1349;
wire   [0:0] sel_tmp2_fu_451_p2;
reg   [0:0] sel_tmp2_reg_1357;
wire   [0:0] sel_tmp4_fu_464_p2;
reg   [0:0] sel_tmp4_reg_1367;
wire  signed [31:0] tmp_4_fu_653_p6;
reg  signed [31:0] tmp_4_reg_1379;
wire  signed [31:0] tmp_7_fu_666_p6;
reg  signed [31:0] tmp_7_reg_1384;
wire   [2:0] j_1_fu_679_p2;
reg   [2:0] j_1_reg_1389;
wire  signed [31:0] a_row_3_1_fu_760_p3;
reg  signed [31:0] a_row_3_1_reg_1394;
wire  signed [31:0] a_row_2_1_fu_767_p3;
wire  signed [31:0] a_row_1_1_fu_773_p3;
reg  signed [31:0] a_row_1_1_reg_1404;
wire  signed [31:0] a_row_0_1_fu_780_p3;
wire  signed [31:0] tmp_5_fu_973_p6;
reg  signed [31:0] tmp_5_reg_1414;
wire  signed [31:0] tmp_8_fu_991_p6;
reg  signed [31:0] tmp_8_reg_1419;
wire   [31:0] grp_fu_968_p2;
reg   [31:0] tmp_s_reg_1424;
wire   [31:0] grp_fu_986_p2;
reg   [31:0] tmp_2_2_reg_1429;
wire   [31:0] grp_fu_1064_p2;
reg   [31:0] tmp_2_1_reg_1434;
wire   [31:0] grp_fu_1068_p2;
reg   [31:0] tmp_2_3_reg_1439;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [4:0] indvar_flatten_phi_fu_266_p4;
reg   [2:0] i_phi_fu_277_p4;
reg   [2:0] j_phi_fu_288_p4;
wire   [63:0] tmp_9_fu_363_p1;
wire   [63:0] tmp_6_fu_369_p1;
wire   [63:0] tmp_11_fu_408_p3;
wire   [63:0] tmp_14_cast_fu_432_p1;
wire   [63:0] tmp_15_cast_fu_1092_p1;
reg   [31:0] a_row_0_2_fu_90;
reg   [31:0] a_row_1_2_fu_94;
reg   [31:0] a_row_2_2_fu_98;
reg   [31:0] a_row_3_2_fu_102;
reg   [31:0] b_copy_0_3_11_fu_106;
wire   [31:0] b_copy_0_3_18_fu_646_p3;
reg   [31:0] b_copy_0_3_8_fu_110;
wire   [31:0] b_copy_0_3_17_fu_639_p3;
reg   [31:0] b_copy_0_3_12_fu_114;
wire   [31:0] b_copy_0_3_16_fu_632_p3;
reg   [31:0] b_copy_0_3_1_fu_118;
wire   [31:0] b_copy_0_3_3_fu_625_p3;
reg   [31:0] b_copy_1_3_11_fu_122;
wire   [31:0] b_copy_1_3_18_fu_961_p3;
reg   [31:0] b_copy_1_3_8_fu_126;
wire   [31:0] b_copy_1_3_17_fu_954_p3;
reg   [31:0] b_copy_1_3_12_fu_130;
wire   [31:0] b_copy_1_3_16_fu_947_p3;
reg   [31:0] b_copy_1_3_1_fu_134;
wire   [31:0] b_copy_1_3_3_fu_940_p3;
reg   [31:0] b_copy_2_3_11_fu_138;
wire   [31:0] b_copy_2_3_18_fu_618_p3;
reg   [31:0] b_copy_2_3_8_fu_142;
wire   [31:0] b_copy_2_3_17_fu_611_p3;
reg   [31:0] b_copy_2_3_12_fu_146;
wire   [31:0] b_copy_2_3_16_fu_604_p3;
reg   [31:0] b_copy_2_3_1_fu_150;
wire   [31:0] b_copy_2_3_3_fu_597_p3;
reg   [31:0] b_copy_3_3_11_fu_154;
wire   [31:0] b_copy_3_3_18_fu_933_p3;
reg   [31:0] b_copy_3_3_8_fu_158;
wire   [31:0] b_copy_3_3_17_fu_926_p3;
reg   [31:0] b_copy_3_3_12_fu_162;
wire   [31:0] b_copy_3_3_16_fu_919_p3;
reg   [31:0] b_copy_3_3_1_fu_166;
wire   [31:0] b_copy_3_3_3_fu_912_p3;
reg   [31:0] a_0_Addr_A_orig;
reg   [31:0] a_1_Addr_A_orig;
reg   [31:0] b_0_Addr_A_orig;
reg   [31:0] b_1_Addr_A_orig;
wire   [31:0] c_Addr_A_orig;
wire   [0:0] exitcond_fu_313_p2;
wire   [2:0] i_1_fu_307_p2;
wire   [0:0] tmp_mid1_fu_327_p2;
wire   [0:0] tmp1_fu_333_p2;
wire   [3:0] tmp_10_fu_403_p2;
wire   [3:0] tmp_6_cast_fu_423_p1;
wire   [3:0] tmp_13_fu_426_p2;
wire   [31:0] b_copy_0_3_fu_443_p3;
wire   [31:0] b_copy_0_3_4_fu_456_p3;
wire   [31:0] b_copy_0_3_5_fu_477_p3;
wire   [31:0] b_copy_0_3_6_fu_485_p3;
wire   [31:0] b_copy_0_3_9_fu_501_p3;
wire   [31:0] b_copy_2_3_fu_525_p3;
wire   [31:0] b_copy_2_3_4_fu_533_p3;
wire   [31:0] b_copy_2_3_5_fu_549_p3;
wire   [31:0] b_copy_2_3_6_fu_557_p3;
wire   [31:0] b_copy_2_3_9_fu_573_p3;
wire   [31:0] b_copy_2_3_2_fu_541_p3;
wire   [31:0] b_copy_2_3_7_fu_565_p3;
wire   [31:0] b_copy_2_3_14_fu_581_p3;
wire   [31:0] b_copy_2_3_15_fu_589_p3;
wire   [31:0] b_copy_0_3_2_fu_469_p3;
wire   [31:0] b_copy_0_3_7_fu_493_p3;
wire   [31:0] b_copy_0_3_14_fu_509_p3;
wire   [31:0] b_copy_0_3_15_fu_517_p3;
wire   [31:0] tmp_4_fu_653_p1;
wire   [31:0] tmp_4_fu_653_p2;
wire   [31:0] tmp_4_fu_653_p3;
wire   [31:0] tmp_4_fu_653_p4;
wire   [31:0] tmp_7_fu_666_p1;
wire   [31:0] tmp_7_fu_666_p2;
wire   [31:0] tmp_7_fu_666_p3;
wire   [31:0] tmp_7_fu_666_p4;
wire   [31:0] b_copy_1_3_fu_786_p3;
wire   [31:0] b_copy_1_3_4_fu_793_p3;
wire   [31:0] b_copy_1_3_5_fu_807_p3;
wire   [31:0] b_copy_1_3_6_fu_814_p3;
wire   [31:0] b_copy_1_3_9_fu_828_p3;
wire   [31:0] b_copy_3_3_fu_849_p3;
wire   [31:0] b_copy_3_3_4_fu_856_p3;
wire   [31:0] b_copy_3_3_5_fu_870_p3;
wire   [31:0] b_copy_3_3_6_fu_877_p3;
wire   [31:0] b_copy_3_3_9_fu_891_p3;
wire   [31:0] b_copy_3_3_2_fu_863_p3;
wire   [31:0] b_copy_3_3_7_fu_884_p3;
wire   [31:0] b_copy_3_3_14_fu_898_p3;
wire   [31:0] b_copy_3_3_15_fu_905_p3;
wire   [31:0] b_copy_1_3_2_fu_800_p3;
wire   [31:0] b_copy_1_3_7_fu_821_p3;
wire   [31:0] b_copy_1_3_14_fu_835_p3;
wire   [31:0] b_copy_1_3_15_fu_842_p3;
wire  signed [31:0] grp_fu_968_p1;
wire   [31:0] tmp_5_fu_973_p1;
wire   [31:0] tmp_5_fu_973_p2;
wire   [31:0] tmp_5_fu_973_p3;
wire   [31:0] tmp_5_fu_973_p4;
wire  signed [31:0] grp_fu_986_p1;
wire   [31:0] tmp_8_fu_991_p1;
wire   [31:0] tmp_8_fu_991_p2;
wire   [31:0] tmp_8_fu_991_p3;
wire   [31:0] tmp_8_fu_991_p4;
wire   [4:0] tmp_12_fu_1072_p3;
wire   [5:0] tmp_13_cast_fu_1079_p1;
wire   [5:0] tmp_6_cast5_fu_1083_p1;
wire   [5:0] tmp_14_fu_1086_p2;
wire   [31:0] tmp9_fu_1097_p2;
wire   [31:0] tmp2_fu_1101_p2;
wire   [0:0] ap_CS_fsm_state12;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

matmul_hw_mux_42_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matmul_hw_mux_42_fYi_U1(
    .din1(tmp_4_fu_653_p1),
    .din2(tmp_4_fu_653_p2),
    .din3(tmp_4_fu_653_p3),
    .din4(tmp_4_fu_653_p4),
    .din5(tmp_reg_1300),
    .dout(tmp_4_fu_653_p6)
);

matmul_hw_mux_42_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matmul_hw_mux_42_fYi_U2(
    .din1(tmp_7_fu_666_p1),
    .din2(tmp_7_fu_666_p2),
    .din3(tmp_7_fu_666_p3),
    .din4(tmp_7_fu_666_p4),
    .din5(tmp_reg_1300),
    .dout(tmp_7_fu_666_p6)
);

matmul_hw_mul_32sg8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sg8j_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_1379),
    .din1(grp_fu_968_p1),
    .ce(1'b1),
    .dout(grp_fu_968_p2)
);

matmul_hw_mux_42_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matmul_hw_mux_42_fYi_U4(
    .din1(tmp_5_fu_973_p1),
    .din2(tmp_5_fu_973_p2),
    .din3(tmp_5_fu_973_p3),
    .din4(tmp_5_fu_973_p4),
    .din5(tmp_reg_1300),
    .dout(tmp_5_fu_973_p6)
);

matmul_hw_mul_32sg8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sg8j_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_1384),
    .din1(grp_fu_986_p1),
    .ce(1'b1),
    .dout(grp_fu_986_p2)
);

matmul_hw_mux_42_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
matmul_hw_mux_42_fYi_U6(
    .din1(tmp_8_fu_991_p1),
    .din2(tmp_8_fu_991_p2),
    .din3(tmp_8_fu_991_p3),
    .din4(tmp_8_fu_991_p4),
    .din5(tmp_reg_1300),
    .dout(tmp_8_fu_991_p6)
);

matmul_hw_mul_32sg8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sg8j_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_1414),
    .din1(a_row_1_1_reg_1404),
    .ce(1'b1),
    .dout(grp_fu_1064_p2)
);

matmul_hw_mul_32sg8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sg8j_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_8_reg_1419),
    .din1(a_row_3_1_reg_1394),
    .ce(1'b1),
    .dout(grp_fu_1068_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_295_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1232 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & ~(exitcond_flatten_reg_1232 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1232 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_273 <= tmp_1_mid2_v_reg_1269;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_273 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1232 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_262 <= indvar_flatten_next_reg_1236;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_262 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1232 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_reg_284 <= j_1_reg_1389;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_284 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1232 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        a_row_0_2_fu_90 <= a_row_0_1_fu_780_p3;
        a_row_1_2_fu_94 <= a_row_1_1_fu_773_p3;
        a_row_2_2_fu_98 <= a_row_2_1_fu_767_p3;
        a_row_3_2_fu_102 <= a_row_3_1_fu_760_p3;
        b_copy_1_3_11_fu_122 <= b_copy_1_3_18_fu_961_p3;
        b_copy_1_3_12_fu_130 <= b_copy_1_3_16_fu_947_p3;
        b_copy_1_3_1_fu_134 <= b_copy_1_3_3_fu_940_p3;
        b_copy_1_3_8_fu_126 <= b_copy_1_3_17_fu_954_p3;
        b_copy_3_3_11_fu_154 <= b_copy_3_3_18_fu_933_p3;
        b_copy_3_3_12_fu_162 <= b_copy_3_3_16_fu_919_p3;
        b_copy_3_3_1_fu_166 <= b_copy_3_3_3_fu_912_p3;
        b_copy_3_3_8_fu_158 <= b_copy_3_3_17_fu_926_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1232 == 1'b0))) begin
        a_row_0_reg_1329 <= a_0_Dout_A;
        a_row_2_reg_1334 <= a_1_Dout_A;
        b_copy_0_3_11_fu_106 <= b_copy_0_3_18_fu_646_p3;
        b_copy_0_3_12_fu_114 <= b_copy_0_3_16_fu_632_p3;
        b_copy_0_3_1_fu_118 <= b_copy_0_3_3_fu_625_p3;
        b_copy_0_3_8_fu_110 <= b_copy_0_3_17_fu_639_p3;
        b_copy_2_3_11_fu_138 <= b_copy_2_3_18_fu_618_p3;
        b_copy_2_3_12_fu_146 <= b_copy_2_3_16_fu_604_p3;
        b_copy_2_3_1_fu_150 <= b_copy_2_3_3_fu_597_p3;
        b_copy_2_3_8_fu_142 <= b_copy_2_3_17_fu_611_p3;
        j_1_reg_1389 <= j_1_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1232 == 1'b0))) begin
        a_row_1_1_reg_1404 <= a_row_1_1_fu_773_p3;
        a_row_3_1_reg_1394 <= a_row_3_1_fu_760_p3;
        tmp_5_reg_1414 <= tmp_5_fu_973_p6;
        tmp_8_reg_1419 <= tmp_8_fu_991_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1232 <= exitcond_flatten_reg_1232;
        ap_pipeline_reg_pp0_iter1_j_mid2_reg_1241 <= j_mid2_reg_1241;
        ap_pipeline_reg_pp0_iter1_tmp_1_mid2_v_reg_1269 <= tmp_1_mid2_v_reg_1269;
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1232 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1232;
        ap_pipeline_reg_pp0_iter2_j_mid2_reg_1241 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_1241;
        ap_pipeline_reg_pp0_iter2_tmp_1_mid2_v_reg_1269 <= ap_pipeline_reg_pp0_iter1_tmp_1_mid2_v_reg_1269;
        ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1232 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1232;
        ap_pipeline_reg_pp0_iter3_j_mid2_reg_1241 <= ap_pipeline_reg_pp0_iter2_j_mid2_reg_1241;
        ap_pipeline_reg_pp0_iter3_tmp_1_mid2_v_reg_1269 <= ap_pipeline_reg_pp0_iter2_tmp_1_mid2_v_reg_1269;
        ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_1232 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1232;
        ap_pipeline_reg_pp0_iter4_j_mid2_reg_1241 <= ap_pipeline_reg_pp0_iter3_j_mid2_reg_1241;
        ap_pipeline_reg_pp0_iter4_tmp_1_mid2_v_reg_1269 <= ap_pipeline_reg_pp0_iter3_tmp_1_mid2_v_reg_1269;
        exitcond_flatten_reg_1232 <= exitcond_flatten_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_1236 <= indvar_flatten_next_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_295_p2 == 1'b0))) begin
        j_mid2_reg_1241 <= j_mid2_fu_319_p3;
        tmp_1_reg_1275[3 : 1] <= tmp_1_fu_355_p3[3 : 1];
        tmp_mid2_reg_1249 <= tmp_mid2_fu_339_p3;
        tmp_reg_1300 <= tmp_fu_375_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1232 == 1'b0))) begin
        sel_tmp2_reg_1357 <= sel_tmp2_fu_451_p2;
        sel_tmp4_reg_1367 <= sel_tmp4_fu_464_p2;
        sel_tmp_reg_1349 <= sel_tmp_fu_438_p2;
        tmp_3_reg_1321 <= tmp_3_fu_418_p2;
        tmp_4_reg_1379 <= tmp_4_fu_653_p6;
        tmp_7_reg_1384 <= tmp_7_fu_666_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_295_p2 == 1'b0))) begin
        tmp_1_mid2_v_reg_1269 <= tmp_1_mid2_v_fu_347_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1232 == 1'b0))) begin
        tmp_2_1_reg_1434 <= grp_fu_1064_p2;
        tmp_2_3_reg_1439 <= grp_fu_1068_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_1232 == 1'b0))) begin
        tmp_2_2_reg_1429 <= grp_fu_986_p2;
        tmp_s_reg_1424 <= grp_fu_968_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_0_Addr_A_orig = tmp_11_fu_408_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_0_Addr_A_orig = tmp_9_fu_363_p1;
        end else begin
            a_0_Addr_A_orig = 'bx;
        end
    end else begin
        a_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_0_EN_A = 1'b1;
    end else begin
        a_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_1_Addr_A_orig = tmp_11_fu_408_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_1_Addr_A_orig = tmp_9_fu_363_p1;
        end else begin
            a_1_Addr_A_orig = 'bx;
        end
    end else begin
        a_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_1_EN_A = 1'b1;
    end else begin
        a_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_0_Addr_A_orig = tmp_14_cast_fu_432_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_0_Addr_A_orig = tmp_6_fu_369_p1;
        end else begin
            b_0_Addr_A_orig = 'bx;
        end
    end else begin
        b_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_0_EN_A = 1'b1;
    end else begin
        b_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_1_Addr_A_orig = tmp_14_cast_fu_432_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_1_Addr_A_orig = tmp_6_fu_369_p1;
        end else begin
            b_1_Addr_A_orig = 'bx;
        end
    end else begin
        b_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_1_EN_A = 1'b1;
    end else begin
        b_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        c_EN_A = 1'b1;
    end else begin
        c_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_1232 == 1'b0))) begin
        c_WEN_A = ap_const_lv4_F;
    end else begin
        c_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1232 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_277_p4 = tmp_1_mid2_v_reg_1269;
    end else begin
        i_phi_fu_277_p4 = i_reg_273;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1232 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_phi_fu_266_p4 = indvar_flatten_next_reg_1236;
    end else begin
        indvar_flatten_phi_fu_266_p4 = indvar_flatten_reg_262;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1232 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_phi_fu_288_p4 = j_1_reg_1389;
    end else begin
        j_phi_fu_288_p4 = j_reg_284;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_295_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & ~(1'b1 == ap_enable_reg_pp0_iter3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << ap_const_lv32_2;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = ap_const_lv32_0;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = ap_const_lv4_0;

assign a_1_Addr_A = a_1_Addr_A_orig << ap_const_lv32_2;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = ap_const_lv32_0;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = ap_const_lv4_0;

assign a_2_Addr_A = ap_const_lv32_0;

assign a_2_Clk_A = ap_clk;

assign a_2_Din_A = ap_const_lv32_0;

assign a_2_EN_A = 1'b0;

assign a_2_Rst_A = ap_rst;

assign a_2_WEN_A = ap_const_lv4_0;

assign a_row_0_1_fu_780_p3 = ((tmp_3_reg_1321[0:0] === 1'b1) ? a_row_0_reg_1329 : a_row_0_2_fu_90);

assign a_row_1_1_fu_773_p3 = ((tmp_3_reg_1321[0:0] === 1'b1) ? a_0_Dout_A : a_row_1_2_fu_94);

assign a_row_2_1_fu_767_p3 = ((tmp_3_reg_1321[0:0] === 1'b1) ? a_row_2_reg_1334 : a_row_2_2_fu_98);

assign a_row_3_1_fu_760_p3 = ((tmp_3_reg_1321[0:0] === 1'b1) ? a_1_Dout_A : a_row_3_2_fu_102);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_3];

assign b_0_Addr_A = b_0_Addr_A_orig << ap_const_lv32_2;

assign b_0_Clk_A = ap_clk;

assign b_0_Din_A = ap_const_lv32_0;

assign b_0_Rst_A = ap_rst;

assign b_0_WEN_A = ap_const_lv4_0;

assign b_1_Addr_A = b_1_Addr_A_orig << ap_const_lv32_2;

assign b_1_Clk_A = ap_clk;

assign b_1_Din_A = ap_const_lv32_0;

assign b_1_Rst_A = ap_rst;

assign b_1_WEN_A = ap_const_lv4_0;

assign b_2_Addr_A = ap_const_lv32_0;

assign b_2_Clk_A = ap_clk;

assign b_2_Din_A = ap_const_lv32_0;

assign b_2_EN_A = 1'b0;

assign b_2_Rst_A = ap_rst;

assign b_2_WEN_A = ap_const_lv4_0;

assign b_copy_0_3_14_fu_509_p3 = ((sel_tmp4_fu_464_p2[0:0] === 1'b1) ? b_copy_0_3_8_fu_110 : b_copy_0_3_9_fu_501_p3);

assign b_copy_0_3_15_fu_517_p3 = ((sel_tmp4_fu_464_p2[0:0] === 1'b1) ? b_0_Dout_A : b_copy_0_3_11_fu_106);

assign b_copy_0_3_16_fu_632_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_0_3_7_fu_493_p3 : b_copy_0_3_12_fu_114);

assign b_copy_0_3_17_fu_639_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_0_3_14_fu_509_p3 : b_copy_0_3_8_fu_110);

assign b_copy_0_3_18_fu_646_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_0_3_15_fu_517_p3 : b_copy_0_3_11_fu_106);

assign b_copy_0_3_2_fu_469_p3 = ((sel_tmp4_fu_464_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_118 : b_copy_0_3_4_fu_456_p3);

assign b_copy_0_3_3_fu_625_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_0_3_2_fu_469_p3 : b_copy_0_3_1_fu_118);

assign b_copy_0_3_4_fu_456_p3 = ((sel_tmp2_fu_451_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_118 : b_copy_0_3_fu_443_p3);

assign b_copy_0_3_5_fu_477_p3 = ((sel_tmp_fu_438_p2[0:0] === 1'b1) ? b_0_Dout_A : b_copy_0_3_12_fu_114);

assign b_copy_0_3_6_fu_485_p3 = ((sel_tmp2_fu_451_p2[0:0] === 1'b1) ? b_copy_0_3_12_fu_114 : b_copy_0_3_5_fu_477_p3);

assign b_copy_0_3_7_fu_493_p3 = ((sel_tmp4_fu_464_p2[0:0] === 1'b1) ? b_copy_0_3_12_fu_114 : b_copy_0_3_6_fu_485_p3);

assign b_copy_0_3_9_fu_501_p3 = ((sel_tmp2_fu_451_p2[0:0] === 1'b1) ? b_0_Dout_A : b_copy_0_3_8_fu_110);

assign b_copy_0_3_fu_443_p3 = ((sel_tmp_fu_438_p2[0:0] === 1'b1) ? b_copy_0_3_1_fu_118 : b_0_Dout_A);

assign b_copy_1_3_14_fu_835_p3 = ((sel_tmp4_reg_1367[0:0] === 1'b1) ? b_copy_1_3_8_fu_126 : b_copy_1_3_9_fu_828_p3);

assign b_copy_1_3_15_fu_842_p3 = ((sel_tmp4_reg_1367[0:0] === 1'b1) ? b_0_Dout_A : b_copy_1_3_11_fu_122);

assign b_copy_1_3_16_fu_947_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_1_3_7_fu_821_p3 : b_copy_1_3_12_fu_130);

assign b_copy_1_3_17_fu_954_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_1_3_14_fu_835_p3 : b_copy_1_3_8_fu_126);

assign b_copy_1_3_18_fu_961_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_1_3_15_fu_842_p3 : b_copy_1_3_11_fu_122);

assign b_copy_1_3_2_fu_800_p3 = ((sel_tmp4_reg_1367[0:0] === 1'b1) ? b_copy_1_3_1_fu_134 : b_copy_1_3_4_fu_793_p3);

assign b_copy_1_3_3_fu_940_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_1_3_2_fu_800_p3 : b_copy_1_3_1_fu_134);

assign b_copy_1_3_4_fu_793_p3 = ((sel_tmp2_reg_1357[0:0] === 1'b1) ? b_copy_1_3_1_fu_134 : b_copy_1_3_fu_786_p3);

assign b_copy_1_3_5_fu_807_p3 = ((sel_tmp_reg_1349[0:0] === 1'b1) ? b_0_Dout_A : b_copy_1_3_12_fu_130);

assign b_copy_1_3_6_fu_814_p3 = ((sel_tmp2_reg_1357[0:0] === 1'b1) ? b_copy_1_3_12_fu_130 : b_copy_1_3_5_fu_807_p3);

assign b_copy_1_3_7_fu_821_p3 = ((sel_tmp4_reg_1367[0:0] === 1'b1) ? b_copy_1_3_12_fu_130 : b_copy_1_3_6_fu_814_p3);

assign b_copy_1_3_9_fu_828_p3 = ((sel_tmp2_reg_1357[0:0] === 1'b1) ? b_0_Dout_A : b_copy_1_3_8_fu_126);

assign b_copy_1_3_fu_786_p3 = ((sel_tmp_reg_1349[0:0] === 1'b1) ? b_copy_1_3_1_fu_134 : b_0_Dout_A);

assign b_copy_2_3_14_fu_581_p3 = ((sel_tmp4_fu_464_p2[0:0] === 1'b1) ? b_copy_2_3_8_fu_142 : b_copy_2_3_9_fu_573_p3);

assign b_copy_2_3_15_fu_589_p3 = ((sel_tmp4_fu_464_p2[0:0] === 1'b1) ? b_1_Dout_A : b_copy_2_3_11_fu_138);

assign b_copy_2_3_16_fu_604_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_2_3_7_fu_565_p3 : b_copy_2_3_12_fu_146);

assign b_copy_2_3_17_fu_611_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_2_3_14_fu_581_p3 : b_copy_2_3_8_fu_142);

assign b_copy_2_3_18_fu_618_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_2_3_15_fu_589_p3 : b_copy_2_3_11_fu_138);

assign b_copy_2_3_2_fu_541_p3 = ((sel_tmp4_fu_464_p2[0:0] === 1'b1) ? b_copy_2_3_1_fu_150 : b_copy_2_3_4_fu_533_p3);

assign b_copy_2_3_3_fu_597_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_2_3_2_fu_541_p3 : b_copy_2_3_1_fu_150);

assign b_copy_2_3_4_fu_533_p3 = ((sel_tmp2_fu_451_p2[0:0] === 1'b1) ? b_copy_2_3_1_fu_150 : b_copy_2_3_fu_525_p3);

assign b_copy_2_3_5_fu_549_p3 = ((sel_tmp_fu_438_p2[0:0] === 1'b1) ? b_1_Dout_A : b_copy_2_3_12_fu_146);

assign b_copy_2_3_6_fu_557_p3 = ((sel_tmp2_fu_451_p2[0:0] === 1'b1) ? b_copy_2_3_12_fu_146 : b_copy_2_3_5_fu_549_p3);

assign b_copy_2_3_7_fu_565_p3 = ((sel_tmp4_fu_464_p2[0:0] === 1'b1) ? b_copy_2_3_12_fu_146 : b_copy_2_3_6_fu_557_p3);

assign b_copy_2_3_9_fu_573_p3 = ((sel_tmp2_fu_451_p2[0:0] === 1'b1) ? b_1_Dout_A : b_copy_2_3_8_fu_142);

assign b_copy_2_3_fu_525_p3 = ((sel_tmp_fu_438_p2[0:0] === 1'b1) ? b_copy_2_3_1_fu_150 : b_1_Dout_A);

assign b_copy_3_3_14_fu_898_p3 = ((sel_tmp4_reg_1367[0:0] === 1'b1) ? b_copy_3_3_8_fu_158 : b_copy_3_3_9_fu_891_p3);

assign b_copy_3_3_15_fu_905_p3 = ((sel_tmp4_reg_1367[0:0] === 1'b1) ? b_1_Dout_A : b_copy_3_3_11_fu_154);

assign b_copy_3_3_16_fu_919_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_3_3_7_fu_884_p3 : b_copy_3_3_12_fu_162);

assign b_copy_3_3_17_fu_926_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_3_3_14_fu_898_p3 : b_copy_3_3_8_fu_158);

assign b_copy_3_3_18_fu_933_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_3_3_15_fu_905_p3 : b_copy_3_3_11_fu_154);

assign b_copy_3_3_2_fu_863_p3 = ((sel_tmp4_reg_1367[0:0] === 1'b1) ? b_copy_3_3_1_fu_166 : b_copy_3_3_4_fu_856_p3);

assign b_copy_3_3_3_fu_912_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_3_3_2_fu_863_p3 : b_copy_3_3_1_fu_166);

assign b_copy_3_3_4_fu_856_p3 = ((sel_tmp2_reg_1357[0:0] === 1'b1) ? b_copy_3_3_1_fu_166 : b_copy_3_3_fu_849_p3);

assign b_copy_3_3_5_fu_870_p3 = ((sel_tmp_reg_1349[0:0] === 1'b1) ? b_1_Dout_A : b_copy_3_3_12_fu_162);

assign b_copy_3_3_6_fu_877_p3 = ((sel_tmp2_reg_1357[0:0] === 1'b1) ? b_copy_3_3_12_fu_162 : b_copy_3_3_5_fu_870_p3);

assign b_copy_3_3_7_fu_884_p3 = ((sel_tmp4_reg_1367[0:0] === 1'b1) ? b_copy_3_3_12_fu_162 : b_copy_3_3_6_fu_877_p3);

assign b_copy_3_3_9_fu_891_p3 = ((sel_tmp2_reg_1357[0:0] === 1'b1) ? b_1_Dout_A : b_copy_3_3_8_fu_158);

assign b_copy_3_3_fu_849_p3 = ((sel_tmp_reg_1349[0:0] === 1'b1) ? b_copy_3_3_1_fu_166 : b_1_Dout_A);

assign c_Addr_A = c_Addr_A_orig << ap_const_lv32_2;

assign c_Addr_A_orig = tmp_15_cast_fu_1092_p1;

assign c_Clk_A = ap_clk;

assign c_Din_A = (tmp9_fu_1097_p2 + tmp2_fu_1101_p2);

assign c_Rst_A = ap_rst;

assign exitcond_flatten_fu_295_p2 = ((indvar_flatten_phi_fu_266_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_313_p2 = ((j_phi_fu_288_p4 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign grp_fu_968_p1 = ((tmp_3_reg_1321[0:0] === 1'b1) ? a_row_0_reg_1329 : a_row_0_2_fu_90);

assign grp_fu_986_p1 = ((tmp_3_reg_1321[0:0] === 1'b1) ? a_row_2_reg_1334 : a_row_2_2_fu_98);

assign i_1_fu_307_p2 = (ap_const_lv3_1 + i_phi_fu_277_p4);

assign indvar_flatten_next_fu_301_p2 = (indvar_flatten_phi_fu_266_p4 + ap_const_lv5_1);

assign j_1_fu_679_p2 = (ap_const_lv3_1 + j_mid2_reg_1241);

assign j_mid2_fu_319_p3 = ((exitcond_fu_313_p2[0:0] === 1'b1) ? ap_const_lv3_0 : j_phi_fu_288_p4);

assign sel_tmp2_fu_451_p2 = ((tmp_reg_1300 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_464_p2 = ((tmp_reg_1300 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_438_p2 = ((tmp_reg_1300 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign tmp1_fu_333_p2 = ((i_phi_fu_277_p4 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp2_fu_1101_p2 = (tmp_2_3_reg_1439 + tmp_2_2_reg_1429);

assign tmp9_fu_1097_p2 = (tmp_2_1_reg_1434 + tmp_s_reg_1424);

assign tmp_10_fu_403_p2 = (tmp_1_reg_1275 | ap_const_lv4_1);

assign tmp_11_fu_408_p3 = {{ap_const_lv60_0}, {tmp_10_fu_403_p2}};

assign tmp_12_fu_1072_p3 = {{ap_pipeline_reg_pp0_iter4_tmp_1_mid2_v_reg_1269}, {ap_const_lv2_0}};

assign tmp_13_cast_fu_1079_p1 = tmp_12_fu_1072_p3;

assign tmp_13_fu_426_p2 = (ap_const_lv4_4 + tmp_6_cast_fu_423_p1);

assign tmp_14_cast_fu_432_p1 = tmp_13_fu_426_p2;

assign tmp_14_fu_1086_p2 = (tmp_13_cast_fu_1079_p1 + tmp_6_cast5_fu_1083_p1);

assign tmp_15_cast_fu_1092_p1 = tmp_14_fu_1086_p2;

assign tmp_1_fu_355_p3 = {{tmp_1_mid2_v_fu_347_p3}, {1'b0}};

assign tmp_1_mid2_v_fu_347_p3 = ((exitcond_fu_313_p2[0:0] === 1'b1) ? i_1_fu_307_p2 : i_phi_fu_277_p4);

assign tmp_3_fu_418_p2 = ((j_mid2_reg_1241 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_4_fu_653_p1 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_0_3_15_fu_517_p3 : b_copy_0_3_11_fu_106);

assign tmp_4_fu_653_p2 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_0_3_14_fu_509_p3 : b_copy_0_3_8_fu_110);

assign tmp_4_fu_653_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_0_3_7_fu_493_p3 : b_copy_0_3_12_fu_114);

assign tmp_4_fu_653_p4 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_0_3_2_fu_469_p3 : b_copy_0_3_1_fu_118);

assign tmp_5_fu_973_p1 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_1_3_15_fu_842_p3 : b_copy_1_3_11_fu_122);

assign tmp_5_fu_973_p2 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_1_3_14_fu_835_p3 : b_copy_1_3_8_fu_126);

assign tmp_5_fu_973_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_1_3_7_fu_821_p3 : b_copy_1_3_12_fu_130);

assign tmp_5_fu_973_p4 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_1_3_2_fu_800_p3 : b_copy_1_3_1_fu_134);

assign tmp_6_cast5_fu_1083_p1 = ap_pipeline_reg_pp0_iter4_j_mid2_reg_1241;

assign tmp_6_cast_fu_423_p1 = j_mid2_reg_1241;

assign tmp_6_fu_369_p1 = j_mid2_fu_319_p3;

assign tmp_7_fu_666_p1 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_2_3_15_fu_589_p3 : b_copy_2_3_11_fu_138);

assign tmp_7_fu_666_p2 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_2_3_14_fu_581_p3 : b_copy_2_3_8_fu_142);

assign tmp_7_fu_666_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_2_3_7_fu_565_p3 : b_copy_2_3_12_fu_146);

assign tmp_7_fu_666_p4 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_2_3_2_fu_541_p3 : b_copy_2_3_1_fu_150);

assign tmp_8_fu_991_p1 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_3_3_15_fu_905_p3 : b_copy_3_3_11_fu_154);

assign tmp_8_fu_991_p2 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_3_3_14_fu_898_p3 : b_copy_3_3_8_fu_158);

assign tmp_8_fu_991_p3 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_3_3_7_fu_884_p3 : b_copy_3_3_12_fu_162);

assign tmp_8_fu_991_p4 = ((tmp_mid2_reg_1249[0:0] === 1'b1) ? b_copy_3_3_2_fu_863_p3 : b_copy_3_3_1_fu_166);

assign tmp_9_fu_363_p1 = tmp_1_fu_355_p3;

assign tmp_fu_375_p1 = j_mid2_fu_319_p3[1:0];

assign tmp_mid1_fu_327_p2 = ((i_1_fu_307_p2 == ap_const_lv3_0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_339_p3 = ((exitcond_fu_313_p2[0:0] === 1'b1) ? tmp_mid1_fu_327_p2 : tmp1_fu_333_p2);

always @ (posedge ap_clk) begin
    tmp_1_reg_1275[0] <= 1'b0;
end

endmodule //matmul_hw
