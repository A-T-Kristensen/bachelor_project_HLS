// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.680000,HLS_SYN_LAT=4106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=929,HLS_SYN_LUT=927}" *)

module matmul_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_Addr_A,
        a_EN_A,
        a_WEN_A,
        a_Din_A,
        a_Dout_A,
        a_Clk_A,
        a_Rst_A,
        b_Addr_A,
        b_EN_A,
        b_WEN_A,
        b_Din_A,
        b_Dout_A,
        b_Clk_A,
        b_Rst_A,
        c_Addr_A,
        c_EN_A,
        c_WEN_A,
        c_Din_A,
        c_Dout_A,
        c_Clk_A,
        c_Rst_A
);

parameter    ap_ST_fsm_state1 = 18'b1;
parameter    ap_ST_fsm_pp0_stage0 = 18'b10;
parameter    ap_ST_fsm_pp0_stage1 = 18'b100;
parameter    ap_ST_fsm_pp0_stage2 = 18'b1000;
parameter    ap_ST_fsm_pp0_stage3 = 18'b10000;
parameter    ap_ST_fsm_pp0_stage4 = 18'b100000;
parameter    ap_ST_fsm_pp0_stage5 = 18'b1000000;
parameter    ap_ST_fsm_pp0_stage6 = 18'b10000000;
parameter    ap_ST_fsm_pp0_stage7 = 18'b100000000;
parameter    ap_ST_fsm_pp0_stage8 = 18'b1000000000;
parameter    ap_ST_fsm_pp0_stage9 = 18'b10000000000;
parameter    ap_ST_fsm_pp0_stage10 = 18'b100000000000;
parameter    ap_ST_fsm_pp0_stage11 = 18'b1000000000000;
parameter    ap_ST_fsm_pp0_stage12 = 18'b10000000000000;
parameter    ap_ST_fsm_pp0_stage13 = 18'b100000000000000;
parameter    ap_ST_fsm_pp0_stage14 = 18'b1000000000000000;
parameter    ap_ST_fsm_pp0_stage15 = 18'b10000000000000000;
parameter    ap_ST_fsm_state27 = 18'b100000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv55_0 = 55'b0000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv6_10 = 6'b10000;
parameter    ap_const_lv9_2 = 9'b10;
parameter    ap_const_lv59_1 = 59'b1;
parameter    ap_const_lv9_3 = 9'b11;
parameter    ap_const_lv7_30 = 7'b110000;
parameter    ap_const_lv9_4 = 9'b100;
parameter    ap_const_lv59_2 = 59'b10;
parameter    ap_const_lv9_5 = 9'b101;
parameter    ap_const_lv7_50 = 7'b1010000;
parameter    ap_const_lv9_6 = 9'b110;
parameter    ap_const_lv59_3 = 59'b11;
parameter    ap_const_lv9_7 = 9'b111;
parameter    ap_const_lv8_70 = 8'b1110000;
parameter    ap_const_lv9_8 = 9'b1000;
parameter    ap_const_lv59_4 = 59'b100;
parameter    ap_const_lv9_9 = 9'b1001;
parameter    ap_const_lv8_90 = 8'b10010000;
parameter    ap_const_lv9_A = 9'b1010;
parameter    ap_const_lv59_5 = 59'b101;
parameter    ap_const_lv9_B = 9'b1011;
parameter    ap_const_lv8_B0 = 8'b10110000;
parameter    ap_const_lv9_C = 9'b1100;
parameter    ap_const_lv59_6 = 59'b110;
parameter    ap_const_lv9_D = 9'b1101;
parameter    ap_const_lv9_E = 9'b1110;
parameter    ap_const_lv59_7 = 59'b111;
parameter    ap_const_lv9_F = 9'b1111;
parameter    ap_const_lv9_F0 = 9'b11110000;
parameter    ap_const_lv32_11 = 32'b10001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_Addr_A;
output   a_EN_A;
output  [3:0] a_WEN_A;
output  [31:0] a_Din_A;
input  [31:0] a_Dout_A;
output   a_Clk_A;
output   a_Rst_A;
output  [31:0] b_Addr_A;
output   b_EN_A;
output  [3:0] b_WEN_A;
output  [31:0] b_Din_A;
input  [31:0] b_Dout_A;
output   b_Clk_A;
output   b_Rst_A;
output  [31:0] c_Addr_A;
output   c_EN_A;
output  [3:0] c_WEN_A;
output  [31:0] c_Din_A;
input  [31:0] c_Dout_A;
output   c_Clk_A;
output   c_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_EN_A;
reg b_EN_A;
reg c_EN_A;
reg[3:0] c_WEN_A;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [8:0] indvar_flatten_reg_406;
reg   [4:0] i_reg_417;
reg   [4:0] j_reg_428;
reg  signed [31:0] reg_495;
wire   [0:0] ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] exitcond_flatten_reg_1051;
wire   [0:0] ap_CS_fsm_pp0_stage7;
reg  signed [31:0] reg_500;
reg  signed [31:0] reg_505;
wire   [0:0] ap_CS_fsm_pp0_stage2;
wire   [0:0] ap_CS_fsm_pp0_stage8;
reg  signed [31:0] reg_510;
reg  signed [31:0] reg_515;
wire   [0:0] ap_CS_fsm_pp0_stage3;
wire   [0:0] ap_CS_fsm_pp0_stage9;
reg  signed [31:0] reg_520;
reg  signed [31:0] reg_525;
wire   [0:0] ap_CS_fsm_pp0_stage4;
wire   [0:0] ap_CS_fsm_pp0_stage10;
reg  signed [31:0] reg_530;
reg  signed [31:0] reg_535;
wire   [0:0] ap_CS_fsm_pp0_stage5;
wire   [0:0] ap_CS_fsm_pp0_stage11;
reg  signed [31:0] reg_540;
reg  signed [31:0] reg_545;
wire   [0:0] ap_CS_fsm_pp0_stage6;
wire   [0:0] ap_CS_fsm_pp0_stage12;
reg  signed [31:0] reg_550;
wire   [31:0] grp_fu_439_p2;
reg   [31:0] reg_555;
wire   [0:0] ap_CS_fsm_pp0_stage13;
wire   [0:0] ap_CS_fsm_pp0_stage15;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051;
reg   [31:0] reg_559;
wire   [0:0] ap_CS_fsm_pp0_stage14;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [31:0] grp_fu_563_p2;
reg   [31:0] reg_575;
wire   [31:0] grp_fu_579_p2;
reg   [31:0] reg_585;
wire   [0:0] exitcond_flatten_fu_589_p2;
wire   [8:0] indvar_flatten_next_fu_595_p2;
reg   [8:0] indvar_flatten_next_reg_1055;
wire   [4:0] j_mid2_fu_613_p3;
reg   [4:0] j_mid2_reg_1060;
wire   [4:0] tmp_mid2_v_fu_621_p3;
reg   [4:0] tmp_mid2_v_reg_1077;
wire   [8:0] tmp_fu_629_p3;
reg   [8:0] tmp_reg_1082;
wire   [6:0] tmp_2_cast4_cast_fu_711_p1;
reg   [6:0] tmp_2_cast4_cast_reg_1137;
wire   [6:0] tmp_38_fu_761_p2;
reg   [6:0] tmp_38_reg_1162;
wire   [7:0] tmp_2_cast4_fu_807_p1;
reg   [7:0] tmp_2_cast4_reg_1187;
reg  signed [31:0] a_load_12_reg_1258;
reg  signed [31:0] b_load_12_reg_1263;
reg  signed [31:0] a_load_13_reg_1278;
reg  signed [31:0] b_load_13_reg_1283;
wire   [9:0] tmp_48_fu_1013_p2;
reg   [9:0] tmp_48_reg_1298;
reg  signed [31:0] a_load_14_reg_1303;
reg  signed [31:0] b_load_14_reg_1308;
wire   [31:0] tmp1_fu_1025_p2;
reg   [31:0] tmp1_reg_1313;
wire   [4:0] j_1_fu_1031_p2;
reg   [4:0] j_1_reg_1318;
reg  signed [31:0] a_load_15_reg_1323;
reg  signed [31:0] b_load_15_reg_1328;
wire   [31:0] tmp_1_s_fu_1042_p2;
reg   [31:0] tmp_1_s_reg_1333;
reg   [8:0] indvar_flatten_phi_fu_410_p4;
reg   [4:0] i_phi_fu_421_p4;
reg   [4:0] j_phi_fu_432_p4;
wire   [63:0] tmp_3_fu_637_p1;
wire   [63:0] tmp_2_fu_642_p1;
wire   [63:0] tmp_5_fu_652_p3;
wire   [63:0] tmp_35_cast_fu_670_p1;
wire   [63:0] tmp_8_fu_680_p3;
wire   [63:0] tmp_35_fu_689_p3;
wire   [63:0] tmp_s_fu_702_p3;
wire   [63:0] tmp_37_cast_fu_720_p1;
wire   [63:0] tmp_11_fu_730_p3;
wire   [63:0] tmp_37_fu_739_p3;
wire   [63:0] tmp_13_fu_752_p3;
wire   [63:0] tmp_39_cast_fu_766_p1;
wire   [63:0] tmp_15_fu_776_p3;
wire   [63:0] tmp_39_fu_785_p3;
wire   [63:0] tmp_17_fu_798_p3;
wire   [63:0] tmp_41_cast_fu_816_p1;
wire   [63:0] tmp_19_fu_826_p3;
wire   [63:0] tmp_41_fu_835_p3;
wire   [63:0] tmp_21_fu_848_p3;
wire   [63:0] tmp_43_cast_fu_862_p1;
wire   [63:0] tmp_23_fu_872_p3;
wire   [63:0] tmp_43_fu_881_p3;
wire   [63:0] tmp_25_fu_894_p3;
wire   [63:0] tmp_45_cast_fu_908_p1;
wire   [63:0] tmp_27_fu_918_p3;
wire   [63:0] tmp_45_fu_927_p3;
wire   [63:0] tmp_29_fu_940_p3;
wire   [63:0] tmp_47_cast_fu_952_p1;
wire   [63:0] tmp_31_fu_962_p3;
wire   [63:0] tmp_46_fu_971_p3;
wire   [63:0] tmp_33_fu_987_p3;
wire   [63:0] tmp_49_cast_fu_1008_p1;
wire   [63:0] tmp_50_cast_fu_1047_p1;
reg   [31:0] a_Addr_A_orig;
reg   [31:0] b_Addr_A_orig;
wire   [31:0] c_Addr_A_orig;
reg  signed [31:0] grp_fu_439_p0;
reg  signed [31:0] grp_fu_439_p1;
wire   [31:0] grp_fu_569_p2;
wire   [0:0] exitcond_fu_607_p2;
wire   [4:0] i_1_fu_601_p2;
wire   [8:0] tmp_4_fu_647_p2;
wire   [5:0] tmp_2_cast_fu_661_p1;
wire   [5:0] tmp_34_fu_664_p2;
wire   [8:0] tmp_7_fu_675_p2;
wire   [8:0] tmp_9_fu_697_p2;
wire   [6:0] tmp_36_fu_714_p2;
wire   [8:0] tmp_10_fu_725_p2;
wire   [8:0] tmp_12_fu_747_p2;
wire   [8:0] tmp_14_fu_771_p2;
wire   [8:0] tmp_16_fu_793_p2;
wire   [7:0] tmp_40_fu_810_p2;
wire   [8:0] tmp_18_fu_821_p2;
wire   [8:0] tmp_20_fu_843_p2;
wire   [7:0] tmp_42_fu_857_p2;
wire   [8:0] tmp_22_fu_867_p2;
wire   [8:0] tmp_24_fu_889_p2;
wire   [7:0] tmp_44_fu_903_p2;
wire   [8:0] tmp_26_fu_913_p2;
wire   [8:0] tmp_28_fu_935_p2;
wire  signed [7:0] tmp_47_cast7_fu_949_p1;
wire   [8:0] tmp_30_fu_957_p2;
wire   [8:0] tmp_32_fu_982_p2;
wire   [8:0] tmp_2_cast5_fu_999_p1;
wire   [8:0] tmp_47_fu_1002_p2;
wire   [9:0] tmp_3_cast_fu_979_p1;
wire   [9:0] tmp_2_cast6_fu_996_p1;
wire   [31:0] tmp5_fu_1019_p2;
wire   [31:0] tmp8_fu_1036_p2;
wire   [0:0] ap_CS_fsm_state27;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matmul_hw_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_439_p0),
    .din1(grp_fu_439_p1),
    .ce(1'b1),
    .dout(grp_fu_439_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == exitcond_flatten_fu_589_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & ~(exitcond_flatten_reg_1051 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_417 <= tmp_mid2_v_reg_1077;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_417 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_406 <= indvar_flatten_next_reg_1055;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_406 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_428 <= j_1_reg_1318;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_428 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        a_load_12_reg_1258 <= a_Dout_A;
        b_load_12_reg_1263 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        a_load_13_reg_1278 <= a_Dout_A;
        b_load_13_reg_1283 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        a_load_14_reg_1303 <= a_Dout_A;
        b_load_14_reg_1308 <= b_Dout_A;
        j_1_reg_1318 <= j_1_fu_1031_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_load_15_reg_1323 <= a_Dout_A;
        b_load_15_reg_1328 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051 <= exitcond_flatten_reg_1051;
        exitcond_flatten_reg_1051 <= exitcond_flatten_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_1055 <= indvar_flatten_next_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond_flatten_fu_589_p2))) begin
        j_mid2_reg_1060 <= j_mid2_fu_613_p3;
        tmp_reg_1082[8 : 4] <= tmp_fu_629_p3[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        reg_495 <= a_Dout_A;
        reg_500 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        reg_505 <= a_Dout_A;
        reg_510 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        reg_515 <= a_Dout_A;
        reg_520 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        reg_525 <= a_Dout_A;
        reg_530 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        reg_535 <= a_Dout_A;
        reg_540 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        reg_545 <= a_Dout_A;
        reg_550 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) begin
        reg_555 <= grp_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) begin
        reg_559 <= grp_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) begin
        reg_575 <= grp_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) begin
        reg_585 <= grp_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        tmp1_reg_1313 <= tmp1_fu_1025_p2;
        tmp_48_reg_1298 <= tmp_48_fu_1013_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051))) begin
        tmp_1_s_reg_1333 <= tmp_1_s_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_2_cast4_cast_reg_1137[4 : 0] <= tmp_2_cast4_cast_fu_711_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_2_cast4_reg_1187[4 : 0] <= tmp_2_cast4_fu_807_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_38_reg_1162 <= tmp_38_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond_flatten_fu_589_p2))) begin
        tmp_mid2_v_reg_1077 <= tmp_mid2_v_fu_621_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage15)) begin
            a_Addr_A_orig = tmp_33_fu_987_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage14)) begin
            a_Addr_A_orig = tmp_31_fu_962_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage13)) begin
            a_Addr_A_orig = tmp_29_fu_940_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage12)) begin
            a_Addr_A_orig = tmp_27_fu_918_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage11)) begin
            a_Addr_A_orig = tmp_25_fu_894_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage10)) begin
            a_Addr_A_orig = tmp_23_fu_872_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage9)) begin
            a_Addr_A_orig = tmp_21_fu_848_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage8)) begin
            a_Addr_A_orig = tmp_19_fu_826_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage7)) begin
            a_Addr_A_orig = tmp_17_fu_798_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage6)) begin
            a_Addr_A_orig = tmp_15_fu_776_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            a_Addr_A_orig = tmp_13_fu_752_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            a_Addr_A_orig = tmp_11_fu_730_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            a_Addr_A_orig = tmp_s_fu_702_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            a_Addr_A_orig = tmp_8_fu_680_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_Addr_A_orig = tmp_5_fu_652_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_Addr_A_orig = tmp_3_fu_637_p1;
        end else begin
            a_Addr_A_orig = 'bx;
        end
    end else begin
        a_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        a_EN_A = 1'b1;
    end else begin
        a_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage15)) begin
            b_Addr_A_orig = tmp_49_cast_fu_1008_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage14)) begin
            b_Addr_A_orig = tmp_46_fu_971_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage13)) begin
            b_Addr_A_orig = tmp_47_cast_fu_952_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage12)) begin
            b_Addr_A_orig = tmp_45_fu_927_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage11)) begin
            b_Addr_A_orig = tmp_45_cast_fu_908_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage10)) begin
            b_Addr_A_orig = tmp_43_fu_881_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage9)) begin
            b_Addr_A_orig = tmp_43_cast_fu_862_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage8)) begin
            b_Addr_A_orig = tmp_41_fu_835_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage7)) begin
            b_Addr_A_orig = tmp_41_cast_fu_816_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage6)) begin
            b_Addr_A_orig = tmp_39_fu_785_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage5)) begin
            b_Addr_A_orig = tmp_39_cast_fu_766_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            b_Addr_A_orig = tmp_37_fu_739_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage3)) begin
            b_Addr_A_orig = tmp_37_cast_fu_720_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            b_Addr_A_orig = tmp_35_fu_689_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_Addr_A_orig = tmp_35_cast_fu_670_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_Addr_A_orig = tmp_2_fu_642_p1;
        end else begin
            b_Addr_A_orig = 'bx;
        end
    end else begin
        b_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        b_EN_A = 1'b1;
    end else begin
        b_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        c_EN_A = 1'b1;
    end else begin
        c_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051))) begin
        c_WEN_A = ap_const_lv4_F;
    end else begin
        c_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        grp_fu_439_p0 = b_load_15_reg_1328;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_439_p0 = b_load_14_reg_1308;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_439_p0 = b_load_13_reg_1283;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_439_p0 = b_load_12_reg_1263;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage13)))) begin
        grp_fu_439_p0 = reg_550;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_439_p0 = reg_540;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        grp_fu_439_p0 = reg_530;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        grp_fu_439_p0 = reg_520;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        grp_fu_439_p0 = reg_510;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_fu_439_p0 = reg_500;
    end else begin
        grp_fu_439_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        grp_fu_439_p1 = a_load_15_reg_1323;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_439_p1 = a_load_14_reg_1303;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_439_p1 = a_load_13_reg_1278;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_439_p1 = a_load_12_reg_1258;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage13)))) begin
        grp_fu_439_p1 = reg_545;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_439_p1 = reg_535;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        grp_fu_439_p1 = reg_525;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        grp_fu_439_p1 = reg_515;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        grp_fu_439_p1 = reg_505;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        grp_fu_439_p1 = reg_495;
    end else begin
        grp_fu_439_p1 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_phi_fu_421_p4 = tmp_mid2_v_reg_1077;
    end else begin
        i_phi_fu_421_p4 = i_reg_417;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_phi_fu_410_p4 = indvar_flatten_next_reg_1055;
    end else begin
        indvar_flatten_phi_fu_410_p4 = indvar_flatten_reg_406;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1051 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_phi_fu_432_p4 = j_1_reg_1318;
    end else begin
        j_phi_fu_432_p4 = j_reg_428;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_589_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage2;
        end
        ap_ST_fsm_pp0_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        end
        ap_ST_fsm_pp0_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage4;
        end
        ap_ST_fsm_pp0_stage4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage5;
        end
        ap_ST_fsm_pp0_stage5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage6;
        end
        ap_ST_fsm_pp0_stage6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage7;
        end
        ap_ST_fsm_pp0_stage7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage8;
        end
        ap_ST_fsm_pp0_stage8 : begin
            if (~((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b1 == ap_enable_reg_pp0_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage10;
        end
        ap_ST_fsm_pp0_stage10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage11;
        end
        ap_ST_fsm_pp0_stage11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage12;
        end
        ap_ST_fsm_pp0_stage12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage13;
        end
        ap_ST_fsm_pp0_stage13 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage14;
        end
        ap_ST_fsm_pp0_stage14 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage15;
        end
        ap_ST_fsm_pp0_stage15 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Addr_A = a_Addr_A_orig << ap_const_lv32_2;

assign a_Clk_A = ap_clk;

assign a_Din_A = ap_const_lv32_0;

assign a_Rst_A = ap_rst;

assign a_WEN_A = ap_const_lv4_0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_11];

assign b_Addr_A = b_Addr_A_orig << ap_const_lv32_2;

assign b_Clk_A = ap_clk;

assign b_Din_A = ap_const_lv32_0;

assign b_Rst_A = ap_rst;

assign b_WEN_A = ap_const_lv4_0;

assign c_Addr_A = c_Addr_A_orig << ap_const_lv32_2;

assign c_Addr_A_orig = tmp_50_cast_fu_1047_p1;

assign c_Clk_A = ap_clk;

assign c_Din_A = tmp_1_s_reg_1333;

assign c_Rst_A = ap_rst;

assign exitcond_flatten_fu_589_p2 = ((indvar_flatten_phi_fu_410_p4 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond_fu_607_p2 = ((j_phi_fu_432_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign grp_fu_563_p2 = (reg_559 + reg_555);

assign grp_fu_569_p2 = (reg_559 + reg_555);

assign grp_fu_579_p2 = (reg_575 + grp_fu_569_p2);

assign i_1_fu_601_p2 = (i_phi_fu_421_p4 + ap_const_lv5_1);

assign indvar_flatten_next_fu_595_p2 = (indvar_flatten_phi_fu_410_p4 + ap_const_lv9_1);

assign j_1_fu_1031_p2 = (j_mid2_reg_1060 + ap_const_lv5_1);

assign j_mid2_fu_613_p3 = ((exitcond_fu_607_p2[0:0] === 1'b1) ? ap_const_lv5_0 : j_phi_fu_432_p4);

assign tmp1_fu_1025_p2 = (reg_585 + tmp5_fu_1019_p2);

assign tmp5_fu_1019_p2 = (reg_575 + grp_fu_563_p2);

assign tmp8_fu_1036_p2 = (reg_585 + grp_fu_579_p2);

assign tmp_10_fu_725_p2 = (tmp_reg_1082 | ap_const_lv9_4);

assign tmp_11_fu_730_p3 = {{ap_const_lv55_0}, {tmp_10_fu_725_p2}};

assign tmp_12_fu_747_p2 = (tmp_reg_1082 | ap_const_lv9_5);

assign tmp_13_fu_752_p3 = {{ap_const_lv55_0}, {tmp_12_fu_747_p2}};

assign tmp_14_fu_771_p2 = (tmp_reg_1082 | ap_const_lv9_6);

assign tmp_15_fu_776_p3 = {{ap_const_lv55_0}, {tmp_14_fu_771_p2}};

assign tmp_16_fu_793_p2 = (tmp_reg_1082 | ap_const_lv9_7);

assign tmp_17_fu_798_p3 = {{ap_const_lv55_0}, {tmp_16_fu_793_p2}};

assign tmp_18_fu_821_p2 = (tmp_reg_1082 | ap_const_lv9_8);

assign tmp_19_fu_826_p3 = {{ap_const_lv55_0}, {tmp_18_fu_821_p2}};

assign tmp_1_s_fu_1042_p2 = (tmp1_reg_1313 + tmp8_fu_1036_p2);

assign tmp_20_fu_843_p2 = (tmp_reg_1082 | ap_const_lv9_9);

assign tmp_21_fu_848_p3 = {{ap_const_lv55_0}, {tmp_20_fu_843_p2}};

assign tmp_22_fu_867_p2 = (tmp_reg_1082 | ap_const_lv9_A);

assign tmp_23_fu_872_p3 = {{ap_const_lv55_0}, {tmp_22_fu_867_p2}};

assign tmp_24_fu_889_p2 = (tmp_reg_1082 | ap_const_lv9_B);

assign tmp_25_fu_894_p3 = {{ap_const_lv55_0}, {tmp_24_fu_889_p2}};

assign tmp_26_fu_913_p2 = (tmp_reg_1082 | ap_const_lv9_C);

assign tmp_27_fu_918_p3 = {{ap_const_lv55_0}, {tmp_26_fu_913_p2}};

assign tmp_28_fu_935_p2 = (tmp_reg_1082 | ap_const_lv9_D);

assign tmp_29_fu_940_p3 = {{ap_const_lv55_0}, {tmp_28_fu_935_p2}};

assign tmp_2_cast4_cast_fu_711_p1 = j_mid2_reg_1060;

assign tmp_2_cast4_fu_807_p1 = j_mid2_reg_1060;

assign tmp_2_cast5_fu_999_p1 = j_mid2_reg_1060;

assign tmp_2_cast6_fu_996_p1 = j_mid2_reg_1060;

assign tmp_2_cast_fu_661_p1 = j_mid2_reg_1060;

assign tmp_2_fu_642_p1 = j_mid2_fu_613_p3;

assign tmp_30_fu_957_p2 = (tmp_reg_1082 | ap_const_lv9_E);

assign tmp_31_fu_962_p3 = {{ap_const_lv55_0}, {tmp_30_fu_957_p2}};

assign tmp_32_fu_982_p2 = (tmp_reg_1082 | ap_const_lv9_F);

assign tmp_33_fu_987_p3 = {{ap_const_lv55_0}, {tmp_32_fu_982_p2}};

assign tmp_34_fu_664_p2 = (tmp_2_cast_fu_661_p1 + ap_const_lv6_10);

assign tmp_35_cast_fu_670_p1 = tmp_34_fu_664_p2;

assign tmp_35_fu_689_p3 = {{ap_const_lv59_1}, {j_mid2_reg_1060}};

assign tmp_36_fu_714_p2 = (tmp_2_cast4_cast_fu_711_p1 + ap_const_lv7_30);

assign tmp_37_cast_fu_720_p1 = tmp_36_fu_714_p2;

assign tmp_37_fu_739_p3 = {{ap_const_lv59_2}, {j_mid2_reg_1060}};

assign tmp_38_fu_761_p2 = ($signed(tmp_2_cast4_cast_reg_1137) + $signed(ap_const_lv7_50));

assign tmp_39_cast_fu_766_p1 = tmp_38_fu_761_p2;

assign tmp_39_fu_785_p3 = {{ap_const_lv59_3}, {j_mid2_reg_1060}};

assign tmp_3_cast_fu_979_p1 = tmp_reg_1082;

assign tmp_3_fu_637_p1 = tmp_fu_629_p3;

assign tmp_40_fu_810_p2 = (tmp_2_cast4_fu_807_p1 + ap_const_lv8_70);

assign tmp_41_cast_fu_816_p1 = tmp_40_fu_810_p2;

assign tmp_41_fu_835_p3 = {{ap_const_lv59_4}, {j_mid2_reg_1060}};

assign tmp_42_fu_857_p2 = ($signed(tmp_2_cast4_reg_1187) + $signed(ap_const_lv8_90));

assign tmp_43_cast_fu_862_p1 = tmp_42_fu_857_p2;

assign tmp_43_fu_881_p3 = {{ap_const_lv59_5}, {j_mid2_reg_1060}};

assign tmp_44_fu_903_p2 = ($signed(tmp_2_cast4_reg_1187) + $signed(ap_const_lv8_B0));

assign tmp_45_cast_fu_908_p1 = tmp_44_fu_903_p2;

assign tmp_45_fu_927_p3 = {{ap_const_lv59_6}, {j_mid2_reg_1060}};

assign tmp_46_fu_971_p3 = {{ap_const_lv59_7}, {j_mid2_reg_1060}};

assign tmp_47_cast7_fu_949_p1 = $signed(tmp_38_reg_1162);

assign tmp_47_cast_fu_952_p1 = $unsigned(tmp_47_cast7_fu_949_p1);

assign tmp_47_fu_1002_p2 = (tmp_2_cast5_fu_999_p1 + ap_const_lv9_F0);

assign tmp_48_fu_1013_p2 = (tmp_3_cast_fu_979_p1 + tmp_2_cast6_fu_996_p1);

assign tmp_49_cast_fu_1008_p1 = tmp_47_fu_1002_p2;

assign tmp_4_fu_647_p2 = (tmp_reg_1082 | ap_const_lv9_1);

assign tmp_50_cast_fu_1047_p1 = tmp_48_reg_1298;

assign tmp_5_fu_652_p3 = {{ap_const_lv55_0}, {tmp_4_fu_647_p2}};

assign tmp_7_fu_675_p2 = (tmp_reg_1082 | ap_const_lv9_2);

assign tmp_8_fu_680_p3 = {{ap_const_lv55_0}, {tmp_7_fu_675_p2}};

assign tmp_9_fu_697_p2 = (tmp_reg_1082 | ap_const_lv9_3);

assign tmp_fu_629_p3 = {{tmp_mid2_v_fu_621_p3}, {ap_const_lv4_0}};

assign tmp_mid2_v_fu_621_p3 = ((exitcond_fu_607_p2[0:0] === 1'b1) ? i_1_fu_601_p2 : i_phi_fu_421_p4);

assign tmp_s_fu_702_p3 = {{ap_const_lv55_0}, {tmp_9_fu_697_p2}};

always @ (posedge ap_clk) begin
    tmp_reg_1082[3:0] <= 4'b0000;
    tmp_2_cast4_cast_reg_1137[6:5] <= 2'b00;
    tmp_2_cast4_reg_1187[7:5] <= 3'b000;
end

endmodule //matmul_hw
