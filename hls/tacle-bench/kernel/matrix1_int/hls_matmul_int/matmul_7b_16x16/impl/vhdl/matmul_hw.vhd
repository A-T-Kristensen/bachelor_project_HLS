-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC;
    a_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_EN_A : OUT STD_LOGIC;
    a_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_2_Clk_A : OUT STD_LOGIC;
    a_2_Rst_A : OUT STD_LOGIC;
    b_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_EN_A : OUT STD_LOGIC;
    b_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_0_Clk_A : OUT STD_LOGIC;
    b_0_Rst_A : OUT STD_LOGIC;
    b_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_EN_A : OUT STD_LOGIC;
    b_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1_Clk_A : OUT STD_LOGIC;
    b_1_Rst_A : OUT STD_LOGIC;
    b_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_EN_A : OUT STD_LOGIC;
    b_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_2_Clk_A : OUT STD_LOGIC;
    b_2_Rst_A : OUT STD_LOGIC;
    c_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_EN_A : OUT STD_LOGIC;
    c_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    c_Clk_A : OUT STD_LOGIC;
    c_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matmul_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.150000,HLS_SYN_LAT=1548,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=64,HLS_SYN_FF=3400,HLS_SYN_LUT=1419}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv59_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv59_2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_842 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_853 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_864 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_1679 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal tmp_3_reg_1888 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1679 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_901_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next_reg_1683 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_mid2_fu_919_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_1688 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_fu_939_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_1700 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_v_fu_947_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_mid2_v_reg_1704 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_975_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1710 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_987_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_reg_1729 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_1000_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1741 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_row_13_reg_1821 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1841 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal tmp_3_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_2_reg_1908 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_8_reg_1913 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_14_reg_1918 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_cast1_fu_1119_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_cast1_reg_1923 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_copy_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_0_load_reg_1943 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_6_load_reg_1953 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_12_load_reg_1963 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_12_1_fu_1155_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_6_1_fu_1162_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_0_1_fu_1169_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_1_load_reg_2008 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_7_load_reg_2018 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_13_load_reg_2028 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_13_1_fu_1235_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_7_1_fu_1241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_1_fu_1248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_2_load_reg_2073 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_8_load_reg_2083 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_14_load_reg_2093 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_1296_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_2103 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_row_15_1_fu_1342_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_15_1_reg_2108 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_14_1_fu_1349_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_11_1_fu_1355_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_11_1_reg_2118 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_10_1_fu_1362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_10_1_reg_2123 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_9_1_fu_1369_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_9_1_reg_2128 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_8_1_fu_1376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_5_1_fu_1382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_5_1_reg_2138 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_4_1_fu_1389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_4_1_reg_2143 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_fu_1396_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_1_reg_2148 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_1_fu_1403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1462_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_reg_2158 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_27_reg_2158 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_copy_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_3_load_reg_2163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal b_copy_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_9_load_reg_2173 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_15_load_reg_2183 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_4_load_reg_2188 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_10_load_reg_2198 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_5_load_reg_2208 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_copy_11_load_reg_2213 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2218 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_6_reg_2223 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_11_reg_2228 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_2233 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_7_reg_2238 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_12_reg_2243 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_2248 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_8_reg_2253 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_13_reg_2258 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_1511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_2263 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_1515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_2268 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_1519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_reg_2273 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_reg_2278 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_9_reg_2283 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_14_reg_2288 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_4_reg_2293 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_s_reg_2298 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_1527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_2303 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_1532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_reg_2308 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_1540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_reg_2313 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_5_reg_2318 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_10_reg_2323 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_s_fu_1573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_s_reg_2328 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal b_copy_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_0_ce0 : STD_LOGIC;
    signal b_copy_0_we0 : STD_LOGIC;
    signal b_copy_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_1_ce0 : STD_LOGIC;
    signal b_copy_1_we0 : STD_LOGIC;
    signal b_copy_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_2_ce0 : STD_LOGIC;
    signal b_copy_2_we0 : STD_LOGIC;
    signal b_copy_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_3_ce0 : STD_LOGIC;
    signal b_copy_3_we0 : STD_LOGIC;
    signal b_copy_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_4_ce0 : STD_LOGIC;
    signal b_copy_4_we0 : STD_LOGIC;
    signal b_copy_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_5_ce0 : STD_LOGIC;
    signal b_copy_5_we0 : STD_LOGIC;
    signal b_copy_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_6_ce0 : STD_LOGIC;
    signal b_copy_6_we0 : STD_LOGIC;
    signal b_copy_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_7_ce0 : STD_LOGIC;
    signal b_copy_7_we0 : STD_LOGIC;
    signal b_copy_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_8_ce0 : STD_LOGIC;
    signal b_copy_8_we0 : STD_LOGIC;
    signal b_copy_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_9_ce0 : STD_LOGIC;
    signal b_copy_9_we0 : STD_LOGIC;
    signal b_copy_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_10_ce0 : STD_LOGIC;
    signal b_copy_10_we0 : STD_LOGIC;
    signal b_copy_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_11_ce0 : STD_LOGIC;
    signal b_copy_11_we0 : STD_LOGIC;
    signal b_copy_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_12_ce0 : STD_LOGIC;
    signal b_copy_12_we0 : STD_LOGIC;
    signal b_copy_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_13_ce0 : STD_LOGIC;
    signal b_copy_13_we0 : STD_LOGIC;
    signal b_copy_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_14_ce0 : STD_LOGIC;
    signal b_copy_14_we0 : STD_LOGIC;
    signal b_copy_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_15_ce0 : STD_LOGIC;
    signal b_copy_15_we0 : STD_LOGIC;
    signal indvar_flatten_phi_fu_846_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_phi_fu_857_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_phi_fu_868_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_cast_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1023_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_1064_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_1073_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_1105_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_1128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_1149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_1191_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_1229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_1275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_1579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_row_0_2_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_1_2_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_2_2_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_3_2_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_4_2_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_5_2_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_6_2_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_7_2_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_8_2_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_9_2_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_10_2_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_11_2_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_12_2_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_13_2_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_14_2_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_row_15_2_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal c_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_907_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_963_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_955_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_971_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_1007_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_1018_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_cast_fu_1032_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_1035_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_1048_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_1059_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_1089_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_1100_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_1122_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_1144_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1200_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_1270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1281_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1286_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1331_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_cast_fu_1338_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_cast_fu_1459_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1468_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1473_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1478_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_1523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_fu_1536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_1545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_1549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_1559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_1563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_1568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component matmul_hw_mul_32sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_hw_b_copy_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    b_copy_0_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_0_address0,
        ce0 => b_copy_0_ce0,
        we0 => b_copy_0_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_0_q0);

    b_copy_1_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_1_address0,
        ce0 => b_copy_1_ce0,
        we0 => b_copy_1_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_1_q0);

    b_copy_2_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_2_address0,
        ce0 => b_copy_2_ce0,
        we0 => b_copy_2_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_2_q0);

    b_copy_3_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_3_address0,
        ce0 => b_copy_3_ce0,
        we0 => b_copy_3_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_3_q0);

    b_copy_4_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_4_address0,
        ce0 => b_copy_4_ce0,
        we0 => b_copy_4_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_4_q0);

    b_copy_5_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_5_address0,
        ce0 => b_copy_5_ce0,
        we0 => b_copy_5_we0,
        d0 => b_0_Dout_A,
        q0 => b_copy_5_q0);

    b_copy_6_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_6_address0,
        ce0 => b_copy_6_ce0,
        we0 => b_copy_6_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_6_q0);

    b_copy_7_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_7_address0,
        ce0 => b_copy_7_ce0,
        we0 => b_copy_7_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_7_q0);

    b_copy_8_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_8_address0,
        ce0 => b_copy_8_ce0,
        we0 => b_copy_8_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_8_q0);

    b_copy_9_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_9_address0,
        ce0 => b_copy_9_ce0,
        we0 => b_copy_9_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_9_q0);

    b_copy_10_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_10_address0,
        ce0 => b_copy_10_ce0,
        we0 => b_copy_10_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_10_q0);

    b_copy_11_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_11_address0,
        ce0 => b_copy_11_ce0,
        we0 => b_copy_11_we0,
        d0 => b_1_Dout_A,
        q0 => b_copy_11_q0);

    b_copy_12_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_12_address0,
        ce0 => b_copy_12_ce0,
        we0 => b_copy_12_we0,
        d0 => b_2_Dout_A,
        q0 => b_copy_12_q0);

    b_copy_13_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_13_address0,
        ce0 => b_copy_13_ce0,
        we0 => b_copy_13_we0,
        d0 => b_2_Dout_A,
        q0 => b_copy_13_q0);

    b_copy_14_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_14_address0,
        ce0 => b_copy_14_ce0,
        we0 => b_copy_14_we0,
        d0 => b_2_Dout_A,
        q0 => b_copy_14_q0);

    b_copy_15_U : component matmul_hw_b_copy_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_15_address0,
        ce0 => b_copy_15_ce0,
        we0 => b_copy_15_we0,
        d0 => b_2_Dout_A,
        q0 => b_copy_15_q0);

    matmul_hw_mul_32sdEe_U1 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1200_p0,
        din1 => b_copy_0_load_reg_1943,
        ce => ap_const_logic_1,
        dout => grp_fu_1200_p2);

    matmul_hw_mul_32sdEe_U2 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1205_p0,
        din1 => b_copy_6_load_reg_1953,
        ce => ap_const_logic_1,
        dout => grp_fu_1205_p2);

    matmul_hw_mul_32sdEe_U3 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1210_p0,
        din1 => b_copy_12_load_reg_1963,
        ce => ap_const_logic_1,
        dout => grp_fu_1210_p2);

    matmul_hw_mul_32sdEe_U4 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1281_p0,
        din1 => b_copy_1_load_reg_2008,
        ce => ap_const_logic_1,
        dout => grp_fu_1281_p2);

    matmul_hw_mul_32sdEe_U5 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1286_p0,
        din1 => b_copy_7_load_reg_2018,
        ce => ap_const_logic_1,
        dout => grp_fu_1286_p2);

    matmul_hw_mul_32sdEe_U6 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1291_p0,
        din1 => b_copy_13_load_reg_2028,
        ce => ap_const_logic_1,
        dout => grp_fu_1291_p2);

    matmul_hw_mul_32sdEe_U7 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1468_p0,
        din1 => b_copy_2_load_reg_2073,
        ce => ap_const_logic_1,
        dout => grp_fu_1468_p2);

    matmul_hw_mul_32sdEe_U8 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1473_p0,
        din1 => b_copy_8_load_reg_2083,
        ce => ap_const_logic_1,
        dout => grp_fu_1473_p2);

    matmul_hw_mul_32sdEe_U9 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1478_p0,
        din1 => b_copy_14_load_reg_2093,
        ce => ap_const_logic_1,
        dout => grp_fu_1478_p2);

    matmul_hw_mul_32sdEe_U10 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_3_1_reg_2148,
        din1 => b_copy_3_load_reg_2163,
        ce => ap_const_logic_1,
        dout => grp_fu_1483_p2);

    matmul_hw_mul_32sdEe_U11 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_9_1_reg_2128,
        din1 => b_copy_9_load_reg_2173,
        ce => ap_const_logic_1,
        dout => grp_fu_1487_p2);

    matmul_hw_mul_32sdEe_U12 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_15_1_reg_2108,
        din1 => b_copy_15_load_reg_2183,
        ce => ap_const_logic_1,
        dout => grp_fu_1491_p2);

    matmul_hw_mul_32sdEe_U13 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_4_1_reg_2143,
        din1 => b_copy_4_load_reg_2188,
        ce => ap_const_logic_1,
        dout => grp_fu_1495_p2);

    matmul_hw_mul_32sdEe_U14 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_10_1_reg_2123,
        din1 => b_copy_10_load_reg_2198,
        ce => ap_const_logic_1,
        dout => grp_fu_1499_p2);

    matmul_hw_mul_32sdEe_U15 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_5_1_reg_2138,
        din1 => b_copy_5_load_reg_2208,
        ce => ap_const_logic_1,
        dout => grp_fu_1503_p2);

    matmul_hw_mul_32sdEe_U16 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_row_11_1_reg_2118,
        din1 => b_copy_11_load_reg_2213,
        ce => ap_const_logic_1,
        dout => grp_fu_1507_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_flatten_fu_895_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and not((exitcond_flatten_reg_1679 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_853_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_853 <= tmp_1_mid2_v_reg_1704;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_853 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_842 <= indvar_flatten_next_reg_1683;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_842 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_864_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_864 <= j_1_reg_2103;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_864 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4))) then
                a_row_0_2_fu_118 <= a_row_0_1_fu_1169_p3;
                a_row_12_2_fu_166 <= a_row_12_1_fu_1155_p3;
                a_row_6_2_fu_142 <= a_row_6_1_fu_1162_p3;
                b_copy_13_load_reg_2028 <= b_copy_13_q0;
                b_copy_1_load_reg_2008 <= b_copy_1_q0;
                b_copy_7_load_reg_2018 <= b_copy_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                a_row_10_1_reg_2123 <= a_row_10_1_fu_1362_p3;
                a_row_11_1_reg_2118 <= a_row_11_1_fu_1355_p3;
                a_row_15_1_reg_2108 <= a_row_15_1_fu_1342_p3;
                a_row_3_1_reg_2148 <= a_row_3_1_fu_1396_p3;
                a_row_4_1_reg_2143 <= a_row_4_1_fu_1389_p3;
                a_row_5_1_reg_2138 <= a_row_5_1_fu_1382_p3;
                a_row_9_1_reg_2128 <= a_row_9_1_fu_1369_p3;
                tmp_27_reg_2158 <= tmp_27_fu_1462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                a_row_10_2_fu_158 <= a_row_10_1_fu_1362_p3;
                a_row_11_2_fu_162 <= a_row_11_1_fu_1355_p3;
                a_row_14_2_fu_174 <= a_row_14_1_fu_1349_p3;
                a_row_15_2_fu_178 <= a_row_15_1_fu_1342_p3;
                a_row_2_2_fu_126 <= a_row_2_1_fu_1403_p3;
                a_row_3_2_fu_130 <= a_row_3_1_fu_1396_p3;
                a_row_4_2_fu_134 <= a_row_4_1_fu_1389_p3;
                a_row_5_2_fu_138 <= a_row_5_1_fu_1382_p3;
                a_row_8_2_fu_150 <= a_row_8_1_fu_1376_p3;
                a_row_9_2_fu_154 <= a_row_9_1_fu_1369_p3;
                b_copy_15_load_reg_2183 <= b_copy_15_q0;
                b_copy_3_load_reg_2163 <= b_copy_3_q0;
                b_copy_9_load_reg_2173 <= b_copy_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                a_row_13_2_fu_170 <= a_row_13_1_fu_1235_p3;
                a_row_1_2_fu_122 <= a_row_1_1_fu_1248_p3;
                a_row_7_2_fu_146 <= a_row_7_1_fu_1241_p3;
                b_copy_14_load_reg_2093 <= b_copy_14_q0;
                b_copy_2_load_reg_2073 <= b_copy_2_q0;
                b_copy_8_load_reg_2083 <= b_copy_8_q0;
                j_1_reg_2103 <= j_1_fu_1296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                a_row_13_reg_1821 <= a_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                a_row_14_reg_1918 <= a_2_Dout_A;
                a_row_2_reg_1908 <= a_0_Dout_A;
                a_row_8_reg_1913 <= a_1_Dout_A;
                b_copy_0_load_reg_1943 <= b_copy_0_q0;
                b_copy_12_load_reg_1963 <= b_copy_12_q0;
                b_copy_6_load_reg_1953 <= b_copy_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679 <= exitcond_flatten_reg_1679;
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1679 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679;
                ap_pipeline_reg_pp0_iter2_tmp_27_reg_2158 <= tmp_27_reg_2158;
                exitcond_flatten_reg_1679 <= exitcond_flatten_fu_895_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679))) then
                b_copy_10_load_reg_2198 <= b_copy_10_q0;
                b_copy_4_load_reg_2188 <= b_copy_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679))) then
                b_copy_11_load_reg_2213 <= b_copy_11_q0;
                b_copy_5_load_reg_2208 <= b_copy_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_1683 <= indvar_flatten_next_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_895_p2))) then
                j_mid2_reg_1688 <= j_mid2_fu_919_p3;
                    tmp_13_reg_1729(6 downto 2) <= tmp_13_fu_987_p3(6 downto 2);
                    tmp_5_reg_1710(7 downto 1) <= tmp_5_fu_975_p2(7 downto 1);
                tmp_mid2_reg_1700 <= tmp_mid2_fu_939_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_875 <= a_0_Dout_A;
                reg_879 <= a_1_Dout_A;
                reg_883 <= a_2_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and not((ap_const_lv1_0 = tmp_3_reg_1888))))) then
                reg_887 <= a_0_Dout_A;
                reg_891 <= a_1_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1679))) then
                tmp10_reg_2308 <= tmp10_fu_1532_p2;
                tmp12_reg_2313 <= tmp12_fu_1540_p2;
                tmp2_reg_2303 <= tmp2_fu_1527_p2;
                tmp_2_4_reg_2293 <= grp_fu_1495_p2;
                tmp_2_s_reg_2298 <= grp_fu_1499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679))) then
                tmp13_reg_2273 <= tmp13_fu_1519_p2;
                tmp3_reg_2263 <= tmp3_fu_1511_p2;
                tmp7_reg_2268 <= tmp7_fu_1515_p2;
                tmp_2_13_reg_2258 <= grp_fu_1478_p2;
                tmp_2_2_reg_2248 <= grp_fu_1468_p2;
                tmp_2_8_reg_2253 <= grp_fu_1473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_895_p2))) then
                tmp_1_mid2_v_reg_1704 <= tmp_1_mid2_v_fu_947_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1679))) then
                tmp_2_10_reg_2323 <= grp_fu_1507_p2;
                tmp_2_5_reg_2318 <= grp_fu_1503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679))) then
                tmp_2_11_reg_2228 <= grp_fu_1210_p2;
                tmp_2_6_reg_2223 <= grp_fu_1205_p2;
                tmp_s_reg_2218 <= grp_fu_1200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679))) then
                tmp_2_12_reg_2243 <= grp_fu_1291_p2;
                tmp_2_1_reg_2233 <= grp_fu_1281_p2;
                tmp_2_7_reg_2238 <= grp_fu_1286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1679))) then
                tmp_2_14_reg_2288 <= grp_fu_1491_p2;
                tmp_2_3_reg_2278 <= grp_fu_1483_p2;
                tmp_2_9_reg_2283 <= grp_fu_1487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_3_reg_1888 <= tmp_3_fu_1114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1679))) then
                tmp_5_s_reg_2328 <= tmp_5_s_fu_1573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                    tmp_6_cast1_reg_1923(4 downto 0) <= tmp_6_cast1_fu_1119_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_895_p2) and not((ap_const_lv1_0 = tmp_mid2_fu_939_p3)))) then
                    tmp_6_reg_1741(4 downto 0) <= tmp_6_fu_1000_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                    tmp_9_reg_1841(4 downto 0) <= tmp_9_fu_1083_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_5_reg_1710(0) <= '0';
    tmp_13_reg_1729(1 downto 0) <= "00";
    tmp_6_reg_1741(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_9_reg_1841(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_6_cast1_reg_1923(6 downto 5) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, exitcond_flatten_fu_895_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_895_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
            when ap_ST_fsm_pp0_stage4 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, tmp_5_cast_fu_981_p1, tmp_7_cast_fu_1012_p1, tmp_8_cast_fu_1053_p1, tmp_10_cast_fu_1094_p1, tmp_11_cast_fu_1149_p1, tmp_12_cast_fu_1229_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                a_0_Addr_A_orig <= tmp_12_cast_fu_1229_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                a_0_Addr_A_orig <= tmp_11_cast_fu_1149_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_0_Addr_A_orig <= tmp_10_cast_fu_1094_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_0_Addr_A_orig <= tmp_8_cast_fu_1053_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_0_Addr_A_orig <= tmp_7_cast_fu_1012_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_0_Addr_A_orig <= tmp_5_cast_fu_981_p1(32 - 1 downto 0);
            else 
                a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv32_0;

    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv4_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, tmp_5_cast_fu_981_p1, tmp_7_cast_fu_1012_p1, tmp_8_cast_fu_1053_p1, tmp_10_cast_fu_1094_p1, tmp_11_cast_fu_1149_p1, tmp_12_cast_fu_1229_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                a_1_Addr_A_orig <= tmp_12_cast_fu_1229_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                a_1_Addr_A_orig <= tmp_11_cast_fu_1149_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_1_Addr_A_orig <= tmp_10_cast_fu_1094_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_1_Addr_A_orig <= tmp_8_cast_fu_1053_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_1_Addr_A_orig <= tmp_7_cast_fu_1012_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_1_Addr_A_orig <= tmp_5_cast_fu_981_p1(32 - 1 downto 0);
            else 
                a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= ap_const_lv32_0;

    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;
    a_1_WEN_A <= ap_const_lv4_0;
    a_2_Addr_A <= std_logic_vector(shift_left(unsigned(a_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, tmp_14_fu_995_p1, tmp_16_fu_1023_p3, tmp_18_fu_1064_p3, tmp_20_fu_1105_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_2_Addr_A_orig <= tmp_20_fu_1105_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_2_Addr_A_orig <= tmp_18_fu_1064_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_2_Addr_A_orig <= tmp_16_fu_1023_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_2_Addr_A_orig <= tmp_14_fu_995_p1(32 - 1 downto 0);
            else 
                a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_2_Clk_A <= ap_clk;
    a_2_Din_A <= ap_const_lv32_0;

    a_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            a_2_EN_A <= ap_const_logic_1;
        else 
            a_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_2_Rst_A <= ap_rst;
    a_2_WEN_A <= ap_const_lv4_0;
    a_row_0_1_fu_1169_p3 <= 
        reg_875 when (tmp_3_reg_1888(0) = '1') else 
        a_row_0_2_fu_118;
    a_row_10_1_fu_1362_p3 <= 
        reg_891 when (tmp_3_reg_1888(0) = '1') else 
        a_row_10_2_fu_158;
    a_row_11_1_fu_1355_p3 <= 
        a_1_Dout_A when (tmp_3_reg_1888(0) = '1') else 
        a_row_11_2_fu_162;
    a_row_12_1_fu_1155_p3 <= 
        reg_883 when (tmp_3_reg_1888(0) = '1') else 
        a_row_12_2_fu_166;
    a_row_13_1_fu_1235_p3 <= 
        a_row_13_reg_1821 when (tmp_3_reg_1888(0) = '1') else 
        a_row_13_2_fu_170;
    a_row_14_1_fu_1349_p3 <= 
        a_row_14_reg_1918 when (tmp_3_reg_1888(0) = '1') else 
        a_row_14_2_fu_174;
    a_row_15_1_fu_1342_p3 <= 
        reg_883 when (tmp_3_reg_1888(0) = '1') else 
        a_row_15_2_fu_178;
    a_row_1_1_fu_1248_p3 <= 
        reg_887 when (tmp_3_reg_1888(0) = '1') else 
        a_row_1_2_fu_122;
    a_row_2_1_fu_1403_p3 <= 
        a_row_2_reg_1908 when (tmp_3_reg_1888(0) = '1') else 
        a_row_2_2_fu_126;
    a_row_3_1_fu_1396_p3 <= 
        reg_875 when (tmp_3_reg_1888(0) = '1') else 
        a_row_3_2_fu_130;
    a_row_4_1_fu_1389_p3 <= 
        reg_887 when (tmp_3_reg_1888(0) = '1') else 
        a_row_4_2_fu_134;
    a_row_5_1_fu_1382_p3 <= 
        a_0_Dout_A when (tmp_3_reg_1888(0) = '1') else 
        a_row_5_2_fu_138;
    a_row_6_1_fu_1162_p3 <= 
        reg_879 when (tmp_3_reg_1888(0) = '1') else 
        a_row_6_2_fu_142;
    a_row_7_1_fu_1241_p3 <= 
        reg_891 when (tmp_3_reg_1888(0) = '1') else 
        a_row_7_2_fu_146;
    a_row_8_1_fu_1376_p3 <= 
        a_row_8_reg_1913 when (tmp_3_reg_1888(0) = '1') else 
        a_row_8_2_fu_150;
    a_row_9_1_fu_1369_p3 <= 
        reg_879 when (tmp_3_reg_1888(0) = '1') else 
        a_row_9_2_fu_154;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state19 <= ap_CS_fsm(7 downto 7);

    ap_done_assign_proc : process(ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Addr_A <= std_logic_vector(shift_left(unsigned(b_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, tmp_6_fu_1000_p1, ap_CS_fsm_pp0_stage3, tmp_23_cast_fu_1041_p1, tmp_23_fu_1073_p3, tmp_25_cast_fu_1128_p1, tmp_25_fu_1191_p3, tmp_27_cast_fu_1275_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                b_0_Addr_A_orig <= tmp_27_cast_fu_1275_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_0_Addr_A_orig <= tmp_25_fu_1191_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_0_Addr_A_orig <= tmp_25_cast_fu_1128_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_0_Addr_A_orig <= tmp_23_fu_1073_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_0_Addr_A_orig <= tmp_23_cast_fu_1041_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_0_Addr_A_orig <= tmp_6_fu_1000_p1(32 - 1 downto 0);
            else 
                b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_0_Clk_A <= ap_clk;
    b_0_Din_A <= ap_const_lv32_0;

    b_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_0_EN_A <= ap_const_logic_1;
        else 
            b_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Rst_A <= ap_rst;
    b_0_WEN_A <= ap_const_lv4_0;
    b_1_Addr_A <= std_logic_vector(shift_left(unsigned(b_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, tmp_6_fu_1000_p1, ap_CS_fsm_pp0_stage3, tmp_23_cast_fu_1041_p1, tmp_23_fu_1073_p3, tmp_25_cast_fu_1128_p1, tmp_25_fu_1191_p3, tmp_27_cast_fu_1275_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                b_1_Addr_A_orig <= tmp_27_cast_fu_1275_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_1_Addr_A_orig <= tmp_25_fu_1191_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_1_Addr_A_orig <= tmp_25_cast_fu_1128_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_1_Addr_A_orig <= tmp_23_fu_1073_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_1_Addr_A_orig <= tmp_23_cast_fu_1041_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_1_Addr_A_orig <= tmp_6_fu_1000_p1(32 - 1 downto 0);
            else 
                b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_1_Clk_A <= ap_clk;
    b_1_Din_A <= ap_const_lv32_0;

    b_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_1_EN_A <= ap_const_logic_1;
        else 
            b_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_1_Rst_A <= ap_rst;
    b_1_WEN_A <= ap_const_lv4_0;
    b_2_Addr_A <= std_logic_vector(shift_left(unsigned(b_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, tmp_6_fu_1000_p1, ap_CS_fsm_pp0_stage3, tmp_23_cast_fu_1041_p1, tmp_23_fu_1073_p3, tmp_25_cast_fu_1128_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_2_Addr_A_orig <= tmp_25_cast_fu_1128_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_2_Addr_A_orig <= tmp_23_fu_1073_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_2_Addr_A_orig <= tmp_23_cast_fu_1041_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_2_Addr_A_orig <= tmp_6_fu_1000_p1(32 - 1 downto 0);
            else 
                b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_2_Clk_A <= ap_clk;
    b_2_Din_A <= ap_const_lv32_0;

    b_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_2_EN_A <= ap_const_logic_1;
        else 
            b_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_2_Rst_A <= ap_rst;
    b_2_WEN_A <= ap_const_lv4_0;

    b_copy_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, tmp_6_reg_1741, tmp_9_fu_1083_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_0_address0 <= tmp_9_fu_1083_p1(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_0_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_0_address0 <= "XXXX";
            end if;
        else 
            b_copy_0_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_0_ce0 <= ap_const_logic_1;
        else 
            b_copy_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_0_we0 <= ap_const_logic_1;
        else 
            b_copy_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_10_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, tmp_6_reg_1741, tmp_9_reg_1841, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            b_copy_10_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then 
            b_copy_10_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
        else 
            b_copy_10_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_10_ce0 <= ap_const_logic_1;
        else 
            b_copy_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_10_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage5, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_10_we0 <= ap_const_logic_1;
        else 
            b_copy_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_11_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, tmp_6_reg_1741, tmp_9_reg_1841, ap_enable_reg_pp0_iter1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_11_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_copy_11_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_11_address0 <= "XXXX";
            end if;
        else 
            b_copy_11_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_11_ce0 <= ap_const_logic_1;
        else 
            b_copy_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_11_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_mid2_reg_1700, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_11_we0 <= ap_const_logic_1;
        else 
            b_copy_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_12_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, tmp_6_reg_1741, tmp_9_fu_1083_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_12_address0 <= tmp_9_fu_1083_p1(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_12_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_12_address0 <= "XXXX";
            end if;
        else 
            b_copy_12_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_12_ce0 <= ap_const_logic_1;
        else 
            b_copy_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_12_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_12_we0 <= ap_const_logic_1;
        else 
            b_copy_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_13_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, tmp_6_reg_1741, tmp_9_reg_1841, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_13_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_13_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_13_address0 <= "XXXX";
            end if;
        else 
            b_copy_13_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_13_ce0 <= ap_const_logic_1;
        else 
            b_copy_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_13_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage2, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_13_we0 <= ap_const_logic_1;
        else 
            b_copy_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_14_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, tmp_6_reg_1741, tmp_9_reg_1841, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_copy_14_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_14_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_14_address0 <= "XXXX";
            end if;
        else 
            b_copy_14_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_14_ce0 <= ap_const_logic_1;
        else 
            b_copy_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_14_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, tmp_mid2_reg_1700, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_14_we0 <= ap_const_logic_1;
        else 
            b_copy_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_15_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_6_reg_1741, tmp_9_reg_1841)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                b_copy_15_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_copy_15_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_15_address0 <= "XXXX";
            end if;
        else 
            b_copy_15_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)))) then 
            b_copy_15_ce0 <= ap_const_logic_1;
        else 
            b_copy_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_15_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage4, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_15_we0 <= ap_const_logic_1;
        else 
            b_copy_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, tmp_6_reg_1741, tmp_9_reg_1841, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_1_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_1_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_1_address0 <= "XXXX";
            end if;
        else 
            b_copy_1_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_1_ce0 <= ap_const_logic_1;
        else 
            b_copy_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage2, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_1_we0 <= ap_const_logic_1;
        else 
            b_copy_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_2_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, tmp_6_reg_1741, tmp_9_reg_1841, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_copy_2_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_2_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_2_address0 <= "XXXX";
            end if;
        else 
            b_copy_2_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_2_ce0 <= ap_const_logic_1;
        else 
            b_copy_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_2_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, tmp_mid2_reg_1700, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_2_we0 <= ap_const_logic_1;
        else 
            b_copy_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_3_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_6_reg_1741, tmp_9_reg_1841)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                b_copy_3_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_copy_3_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_3_address0 <= "XXXX";
            end if;
        else 
            b_copy_3_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)))) then 
            b_copy_3_ce0 <= ap_const_logic_1;
        else 
            b_copy_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_3_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage4, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_3_we0 <= ap_const_logic_1;
        else 
            b_copy_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_4_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, tmp_6_reg_1741, tmp_9_reg_1841, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            b_copy_4_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then 
            b_copy_4_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
        else 
            b_copy_4_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_4_ce0 <= ap_const_logic_1;
        else 
            b_copy_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_4_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage5, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_4_we0 <= ap_const_logic_1;
        else 
            b_copy_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, tmp_6_reg_1741, tmp_9_reg_1841, ap_enable_reg_pp0_iter1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_5_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_copy_5_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_5_address0 <= "XXXX";
            end if;
        else 
            b_copy_5_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_5_ce0 <= ap_const_logic_1;
        else 
            b_copy_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_mid2_reg_1700, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            b_copy_5_we0 <= ap_const_logic_1;
        else 
            b_copy_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, tmp_6_reg_1741, tmp_9_fu_1083_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_6_address0 <= tmp_9_fu_1083_p1(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_copy_6_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_6_address0 <= "XXXX";
            end if;
        else 
            b_copy_6_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then 
            b_copy_6_ce0 <= ap_const_logic_1;
        else 
            b_copy_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_6_we0 <= ap_const_logic_1;
        else 
            b_copy_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_7_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, tmp_6_reg_1741, tmp_9_reg_1841, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_7_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_copy_7_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_7_address0 <= "XXXX";
            end if;
        else 
            b_copy_7_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_7_ce0 <= ap_const_logic_1;
        else 
            b_copy_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_7_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage2, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_7_we0 <= ap_const_logic_1;
        else 
            b_copy_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_8_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, tmp_6_reg_1741, tmp_9_reg_1841, ap_CS_fsm_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_copy_8_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_copy_8_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_8_address0 <= "XXXX";
            end if;
        else 
            b_copy_8_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_8_ce0 <= ap_const_logic_1;
        else 
            b_copy_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_8_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, tmp_mid2_reg_1700, ap_CS_fsm_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_1700)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)))) then 
            b_copy_8_we0 <= ap_const_logic_1;
        else 
            b_copy_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_9_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_6_reg_1741, tmp_9_reg_1841)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                b_copy_9_address0 <= tmp_9_reg_1841(4 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_copy_9_address0 <= tmp_6_reg_1741(4 - 1 downto 0);
            else 
                b_copy_9_address0 <= "XXXX";
            end if;
        else 
            b_copy_9_address0 <= "XXXX";
        end if; 
    end process;


    b_copy_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)))) then 
            b_copy_9_ce0 <= ap_const_logic_1;
        else 
            b_copy_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_9_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage4, tmp_mid2_reg_1700)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and not((ap_const_lv1_0 = tmp_mid2_reg_1700))))) then 
            b_copy_9_we0 <= ap_const_logic_1;
        else 
            b_copy_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_Addr_A <= std_logic_vector(shift_left(unsigned(c_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    c_Addr_A_orig <= tmp_28_cast_fu_1579_p1(32 - 1 downto 0);
    c_Clk_A <= ap_clk;
    c_Din_A <= tmp_5_s_reg_2328;

    c_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            c_EN_A <= ap_const_logic_1;
        else 
            c_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    c_Rst_A <= ap_rst;

    c_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1679, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_1679) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            c_WEN_A <= ap_const_lv4_F;
        else 
            c_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    exitcond_flatten_fu_895_p2 <= "1" when (indvar_flatten_phi_fu_846_p4 = ap_const_lv9_100) else "0";
    exitcond_fu_913_p2 <= "1" when (j_phi_fu_868_p4 = ap_const_lv5_10) else "0";
    grp_fu_1200_p0 <= 
        reg_875 when (tmp_3_reg_1888(0) = '1') else 
        a_row_0_2_fu_118;
    grp_fu_1205_p0 <= 
        reg_879 when (tmp_3_reg_1888(0) = '1') else 
        a_row_6_2_fu_142;
    grp_fu_1210_p0 <= 
        reg_883 when (tmp_3_reg_1888(0) = '1') else 
        a_row_12_2_fu_166;
    grp_fu_1281_p0 <= 
        reg_887 when (tmp_3_reg_1888(0) = '1') else 
        a_row_1_2_fu_122;
    grp_fu_1286_p0 <= 
        reg_891 when (tmp_3_reg_1888(0) = '1') else 
        a_row_7_2_fu_146;
    grp_fu_1291_p0 <= 
        a_row_13_reg_1821 when (tmp_3_reg_1888(0) = '1') else 
        a_row_13_2_fu_170;
    grp_fu_1468_p0 <= 
        a_row_2_reg_1908 when (tmp_3_reg_1888(0) = '1') else 
        a_row_2_2_fu_126;
    grp_fu_1473_p0 <= 
        a_row_8_reg_1913 when (tmp_3_reg_1888(0) = '1') else 
        a_row_8_2_fu_150;
    grp_fu_1478_p0 <= 
        a_row_14_reg_1918 when (tmp_3_reg_1888(0) = '1') else 
        a_row_14_2_fu_174;
    i_1_fu_907_p2 <= std_logic_vector(unsigned(i_phi_fu_857_p4) + unsigned(ap_const_lv5_1));

    i_phi_fu_857_p4_assign_proc : process(i_reg_853, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage0, tmp_1_mid2_v_reg_1704, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_phi_fu_857_p4 <= tmp_1_mid2_v_reg_1704;
        else 
            i_phi_fu_857_p4 <= i_reg_853;
        end if; 
    end process;

    indvar_flatten_next_fu_901_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_846_p4) + unsigned(ap_const_lv9_1));

    indvar_flatten_phi_fu_846_p4_assign_proc : process(indvar_flatten_reg_842, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1683, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_846_p4 <= indvar_flatten_next_reg_1683;
        else 
            indvar_flatten_phi_fu_846_p4 <= indvar_flatten_reg_842;
        end if; 
    end process;

    j_1_fu_1296_p2 <= std_logic_vector(unsigned(j_mid2_reg_1688) + unsigned(ap_const_lv5_1));
    j_mid2_fu_919_p3 <= 
        ap_const_lv5_0 when (exitcond_fu_913_p2(0) = '1') else 
        j_phi_fu_868_p4;

    j_phi_fu_868_p4_assign_proc : process(j_reg_864, exitcond_flatten_reg_1679, ap_CS_fsm_pp0_stage0, j_1_reg_2103, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond_flatten_reg_1679 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            j_phi_fu_868_p4 <= j_1_reg_2103;
        else 
            j_phi_fu_868_p4 <= j_reg_864;
        end if; 
    end process;

    p_shl1_cast_fu_971_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_963_p3),8));
    tmp10_fu_1532_p2 <= std_logic_vector(unsigned(tmp_2_9_reg_2283) + unsigned(tmp_2_8_reg_2253));
    tmp11_fu_1559_p2 <= std_logic_vector(unsigned(tmp_2_10_reg_2323) + unsigned(tmp_2_s_reg_2298));
    tmp12_fu_1540_p2 <= std_logic_vector(unsigned(tmp13_reg_2273) + unsigned(tmp14_fu_1536_p2));
    tmp13_fu_1519_p2 <= std_logic_vector(unsigned(tmp_2_12_reg_2243) + unsigned(tmp_2_11_reg_2228));
    tmp14_fu_1536_p2 <= std_logic_vector(unsigned(tmp_2_14_reg_2288) + unsigned(tmp_2_13_reg_2258));
    tmp1_fu_1554_p2 <= std_logic_vector(unsigned(tmp2_reg_2303) + unsigned(tmp5_fu_1549_p2));
    tmp2_fu_1527_p2 <= std_logic_vector(unsigned(tmp3_reg_2263) + unsigned(tmp4_fu_1523_p2));
    tmp3_fu_1511_p2 <= std_logic_vector(unsigned(tmp_2_1_reg_2233) + unsigned(tmp_s_reg_2218));
    tmp4_fu_1523_p2 <= std_logic_vector(unsigned(tmp_2_3_reg_2278) + unsigned(tmp_2_2_reg_2248));
    tmp5_fu_1549_p2 <= std_logic_vector(unsigned(tmp6_fu_1545_p2) + unsigned(tmp7_reg_2268));
    tmp6_fu_1545_p2 <= std_logic_vector(unsigned(tmp_2_5_reg_2318) + unsigned(tmp_2_4_reg_2293));
    tmp7_fu_1515_p2 <= std_logic_vector(unsigned(tmp_2_7_reg_2238) + unsigned(tmp_2_6_reg_2223));
    tmp8_fu_1568_p2 <= std_logic_vector(unsigned(tmp9_fu_1563_p2) + unsigned(tmp12_reg_2313));
    tmp9_fu_1563_p2 <= std_logic_vector(unsigned(tmp10_reg_2308) + unsigned(tmp11_fu_1559_p2));
        tmp_10_cast_fu_1094_p1 <= std_logic_vector(resize(signed(tmp_10_fu_1089_p2),64));

    tmp_10_fu_1089_p2 <= std_logic_vector(unsigned(tmp_5_reg_1710) + unsigned(ap_const_lv8_3));
        tmp_11_cast_fu_1149_p1 <= std_logic_vector(resize(signed(tmp_11_fu_1144_p2),64));

    tmp_11_fu_1144_p2 <= std_logic_vector(unsigned(tmp_5_reg_1710) + unsigned(ap_const_lv8_4));
        tmp_12_cast_fu_1229_p1 <= std_logic_vector(resize(signed(tmp_12_fu_1224_p2),64));

    tmp_12_fu_1224_p2 <= std_logic_vector(unsigned(tmp_5_reg_1710) + unsigned(ap_const_lv8_5));
    tmp_13_fu_987_p3 <= (tmp_1_mid2_v_fu_947_p3 & ap_const_lv2_0);
    tmp_14_fu_995_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_987_p3),64));
    tmp_15_fu_1018_p2 <= (tmp_13_reg_1729 or ap_const_lv7_1);
    tmp_16_fu_1023_p3 <= (ap_const_lv57_0 & tmp_15_fu_1018_p2);
    tmp_17_fu_1059_p2 <= (tmp_13_reg_1729 or ap_const_lv7_2);
    tmp_18_fu_1064_p3 <= (ap_const_lv57_0 & tmp_17_fu_1059_p2);
    tmp_19_fu_1100_p2 <= (tmp_13_reg_1729 or ap_const_lv7_3);
    tmp_1_fu_955_p3 <= (tmp_1_mid2_v_fu_947_p3 & ap_const_lv3_0);
    tmp_1_mid2_v_fu_947_p3 <= 
        i_1_fu_907_p2 when (exitcond_fu_913_p2(0) = '1') else 
        i_phi_fu_857_p4;
    tmp_20_fu_1105_p3 <= (ap_const_lv57_0 & tmp_19_fu_1100_p2);
    tmp_21_fu_1331_p3 <= (tmp_1_mid2_v_reg_1704 & ap_const_lv4_0);
    tmp_22_cast_fu_1338_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_1331_p3),10));
    tmp_22_fu_1035_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_1032_p1) + unsigned(ap_const_lv6_10));
    tmp_23_cast_fu_1041_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_1035_p2),64));
    tmp_23_fu_1073_p3 <= (ap_const_lv59_1 & j_mid2_reg_1688);
    tmp_24_fu_1122_p2 <= std_logic_vector(unsigned(tmp_6_cast1_fu_1119_p1) + unsigned(ap_const_lv7_30));
    tmp_25_cast_fu_1128_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_1122_p2),64));
    tmp_25_fu_1191_p3 <= (ap_const_lv59_2 & j_mid2_reg_1688);
    tmp_26_fu_1270_p2 <= std_logic_vector(unsigned(tmp_6_cast1_reg_1923) + unsigned(ap_const_lv7_50));
    tmp_27_cast_fu_1275_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_1270_p2),64));
    tmp_27_fu_1462_p2 <= std_logic_vector(unsigned(tmp_22_cast_fu_1338_p1) + unsigned(tmp_9_cast_fu_1459_p1));
    tmp_28_cast_fu_1579_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter2_tmp_27_reg_2158),64));
    tmp_3_fu_1114_p2 <= "1" when (j_mid2_reg_1688 = ap_const_lv5_0) else "0";
    tmp_4_fu_963_p3 <= (tmp_1_mid2_v_fu_947_p3 & ap_const_lv1_0);
        tmp_5_cast_fu_981_p1 <= std_logic_vector(resize(signed(tmp_5_fu_975_p2),64));

    tmp_5_fu_975_p2 <= std_logic_vector(unsigned(tmp_1_fu_955_p3) - unsigned(p_shl1_cast_fu_971_p1));
    tmp_5_s_fu_1573_p2 <= std_logic_vector(unsigned(tmp1_fu_1554_p2) + unsigned(tmp8_fu_1568_p2));
    tmp_6_cast1_fu_1119_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1688),7));
    tmp_6_cast_fu_1032_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1688),6));
    tmp_6_fu_1000_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_919_p3),64));
    tmp_7_cast_fu_1012_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_1007_p2),64));
    tmp_7_fu_1007_p2 <= (tmp_5_reg_1710 or ap_const_lv8_1);
        tmp_8_cast_fu_1053_p1 <= std_logic_vector(resize(signed(tmp_8_fu_1048_p2),64));

    tmp_8_fu_1048_p2 <= std_logic_vector(unsigned(tmp_5_reg_1710) + unsigned(ap_const_lv8_2));
    tmp_9_cast_fu_1459_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1688),10));
    tmp_9_fu_1083_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1688),64));
    tmp_fu_933_p2 <= "1" when (i_phi_fu_857_p4 = ap_const_lv5_0) else "0";
    tmp_mid1_fu_927_p2 <= "1" when (i_1_fu_907_p2 = ap_const_lv5_0) else "0";
    tmp_mid2_fu_939_p3 <= 
        tmp_mid1_fu_927_p2 when (exitcond_fu_913_p2(0) = '1') else 
        tmp_fu_933_p2;
end behav;
