// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.700000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=414,HLS_SYN_LUT=119}" *)

module matmul_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        a_3_Addr_A,
        a_3_EN_A,
        a_3_WEN_A,
        a_3_Din_A,
        a_3_Dout_A,
        a_3_Clk_A,
        a_3_Rst_A,
        b_0_Addr_A,
        b_0_EN_A,
        b_0_WEN_A,
        b_0_Din_A,
        b_0_Dout_A,
        b_0_Clk_A,
        b_0_Rst_A,
        b_1_Addr_A,
        b_1_EN_A,
        b_1_WEN_A,
        b_1_Din_A,
        b_1_Dout_A,
        b_1_Clk_A,
        b_1_Rst_A,
        b_2_Addr_A,
        b_2_EN_A,
        b_2_WEN_A,
        b_2_Din_A,
        b_2_Dout_A,
        b_2_Clk_A,
        b_2_Rst_A,
        b_3_Addr_A,
        b_3_EN_A,
        b_3_WEN_A,
        b_3_Din_A,
        b_3_Dout_A,
        b_3_Clk_A,
        b_3_Rst_A,
        c_Addr_A,
        c_EN_A,
        c_WEN_A,
        c_Din_A,
        c_Dout_A,
        c_Clk_A,
        c_Rst_A
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state11 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv2_0 = 2'b00;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [3:0] a_0_WEN_A;
output  [31:0] a_0_Din_A;
input  [31:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [3:0] a_1_WEN_A;
output  [31:0] a_1_Din_A;
input  [31:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [3:0] a_2_WEN_A;
output  [31:0] a_2_Din_A;
input  [31:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] a_3_Addr_A;
output   a_3_EN_A;
output  [3:0] a_3_WEN_A;
output  [31:0] a_3_Din_A;
input  [31:0] a_3_Dout_A;
output   a_3_Clk_A;
output   a_3_Rst_A;
output  [31:0] b_0_Addr_A;
output   b_0_EN_A;
output  [3:0] b_0_WEN_A;
output  [31:0] b_0_Din_A;
input  [31:0] b_0_Dout_A;
output   b_0_Clk_A;
output   b_0_Rst_A;
output  [31:0] b_1_Addr_A;
output   b_1_EN_A;
output  [3:0] b_1_WEN_A;
output  [31:0] b_1_Din_A;
input  [31:0] b_1_Dout_A;
output   b_1_Clk_A;
output   b_1_Rst_A;
output  [31:0] b_2_Addr_A;
output   b_2_EN_A;
output  [3:0] b_2_WEN_A;
output  [31:0] b_2_Din_A;
input  [31:0] b_2_Dout_A;
output   b_2_Clk_A;
output   b_2_Rst_A;
output  [31:0] b_3_Addr_A;
output   b_3_EN_A;
output  [3:0] b_3_WEN_A;
output  [31:0] b_3_Din_A;
input  [31:0] b_3_Dout_A;
output   b_3_Clk_A;
output   b_3_Rst_A;
output  [31:0] c_Addr_A;
output   c_EN_A;
output  [3:0] c_WEN_A;
output  [31:0] c_Din_A;
input  [31:0] c_Dout_A;
output   c_Clk_A;
output   c_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_EN_A;
reg a_1_EN_A;
reg a_2_EN_A;
reg a_3_EN_A;
reg b_0_EN_A;
reg b_1_EN_A;
reg b_2_EN_A;
reg b_3_EN_A;
reg c_EN_A;
reg[3:0] c_WEN_A;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_190;
reg   [2:0] i_reg_201;
reg   [2:0] j_reg_212;
wire   [0:0] exitcond_flatten_fu_300_p2;
reg   [0:0] exitcond_flatten_reg_402;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_402;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_402;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_402;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_402;
reg   [0:0] ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_402;
reg   [0:0] ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_402;
reg   [0:0] ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_402;
wire   [4:0] indvar_flatten_next_fu_306_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] j_mid2_fu_324_p3;
reg   [2:0] j_mid2_reg_411;
reg   [2:0] ap_pipeline_reg_pp0_iter1_j_mid2_reg_411;
reg   [2:0] ap_pipeline_reg_pp0_iter2_j_mid2_reg_411;
reg   [2:0] ap_pipeline_reg_pp0_iter3_j_mid2_reg_411;
reg   [2:0] ap_pipeline_reg_pp0_iter4_j_mid2_reg_411;
reg   [2:0] ap_pipeline_reg_pp0_iter5_j_mid2_reg_411;
reg   [2:0] ap_pipeline_reg_pp0_iter6_j_mid2_reg_411;
reg   [2:0] ap_pipeline_reg_pp0_iter7_j_mid2_reg_411;
wire   [2:0] tmp_mid2_v_fu_332_p3;
reg   [2:0] tmp_mid2_v_reg_416;
reg   [2:0] ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_416;
reg   [2:0] ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_416;
reg   [2:0] ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_416;
reg   [2:0] ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_416;
reg   [2:0] ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_416;
reg   [2:0] ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_416;
reg   [2:0] ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_416;
wire   [2:0] j_1_fu_356_p2;
reg  signed [31:0] a_0_load_reg_467;
reg  signed [31:0] b_0_load_reg_472;
reg  signed [31:0] a_1_load_reg_477;
reg  signed [31:0] b_1_load_reg_482;
reg  signed [31:0] a_2_load_reg_487;
reg  signed [31:0] b_2_load_reg_492;
reg  signed [31:0] a_3_load_reg_497;
reg  signed [31:0] b_3_load_reg_502;
wire   [31:0] grp_fu_224_p2;
reg   [31:0] tmp_6_reg_507;
wire   [31:0] grp_fu_226_p2;
reg   [31:0] tmp_6_1_reg_512;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] tmp_6_2_reg_517;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] tmp_6_3_reg_522;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg   [2:0] i_phi_fu_205_p4;
wire   [63:0] tmp_mid2_fu_340_p1;
wire   [63:0] tmp_2_fu_348_p1;
wire   [63:0] tmp_4_cast_fu_382_p1;
wire   [31:0] a_0_Addr_A_orig;
wire   [31:0] b_0_Addr_A_orig;
wire   [31:0] a_1_Addr_A_orig;
wire   [31:0] b_1_Addr_A_orig;
wire   [31:0] a_2_Addr_A_orig;
wire   [31:0] b_2_Addr_A_orig;
wire   [31:0] a_3_Addr_A_orig;
wire   [31:0] b_3_Addr_A_orig;
wire   [31:0] c_Addr_A_orig;
wire   [0:0] exitcond_fu_318_p2;
wire   [2:0] i_1_fu_312_p2;
wire   [4:0] tmp_fu_362_p3;
wire   [5:0] tmp_2_cast_fu_373_p1;
wire   [5:0] tmp_3_cast_fu_369_p1;
wire   [5:0] tmp_4_fu_376_p2;
wire   [31:0] tmp2_fu_391_p2;
wire   [31:0] tmp1_fu_387_p2;
wire   [0:0] ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

matmul_hw_mul_32sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sdEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_2_load_reg_487),
    .din1(b_2_load_reg_492),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

matmul_hw_mul_32sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_0_load_reg_467),
    .din1(b_0_load_reg_472),
    .ce(1'b1),
    .dout(grp_fu_224_p2)
);

matmul_hw_mul_32sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_3_load_reg_497),
    .din1(b_3_load_reg_502),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

matmul_hw_mul_32sdEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sdEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_1_load_reg_477),
    .din1(b_1_load_reg_482),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_300_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_300_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_300_p2 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_402 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_201 <= tmp_mid2_v_reg_416;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_201 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_300_p2 == 1'b0))) begin
        indvar_flatten_reg_190 <= indvar_flatten_next_fu_306_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_190 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_300_p2 == 1'b0))) begin
        j_reg_212 <= j_1_fu_356_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_212 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_402 == 1'b0))) begin
        a_0_load_reg_467 <= a_0_Dout_A;
        a_1_load_reg_477 <= a_1_Dout_A;
        a_2_load_reg_487 <= a_2_Dout_A;
        a_3_load_reg_497 <= a_3_Dout_A;
        b_0_load_reg_472 <= b_0_Dout_A;
        b_1_load_reg_482 <= b_1_Dout_A;
        b_2_load_reg_492 <= b_2_Dout_A;
        b_3_load_reg_502 <= b_3_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_402 <= exitcond_flatten_reg_402;
        ap_pipeline_reg_pp0_iter1_j_mid2_reg_411 <= j_mid2_reg_411;
        ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_416 <= tmp_mid2_v_reg_416;
        exitcond_flatten_reg_402 <= exitcond_flatten_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_402;
        ap_pipeline_reg_pp0_iter2_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_411;
        ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_416;
        ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_402;
        ap_pipeline_reg_pp0_iter3_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter2_j_mid2_reg_411;
        ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_416;
        ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_402;
        ap_pipeline_reg_pp0_iter4_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter3_j_mid2_reg_411;
        ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_416;
        ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_402;
        ap_pipeline_reg_pp0_iter5_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter4_j_mid2_reg_411;
        ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_416;
        ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_402;
        ap_pipeline_reg_pp0_iter6_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter5_j_mid2_reg_411;
        ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_416;
        ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_402;
        ap_pipeline_reg_pp0_iter7_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter6_j_mid2_reg_411;
        ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_300_p2 == 1'b0))) begin
        j_mid2_reg_411 <= j_mid2_fu_324_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_402 == 1'b0)) begin
        tmp_6_1_reg_512 <= grp_fu_226_p2;
        tmp_6_2_reg_517 <= grp_fu_223_p2;
        tmp_6_3_reg_522 <= grp_fu_225_p2;
        tmp_6_reg_507 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_300_p2 == 1'b0))) begin
        tmp_mid2_v_reg_416 <= tmp_mid2_v_fu_332_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_0_EN_A = 1'b1;
    end else begin
        a_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_1_EN_A = 1'b1;
    end else begin
        a_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_2_EN_A = 1'b1;
    end else begin
        a_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        a_3_EN_A = 1'b1;
    end else begin
        a_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_0_EN_A = 1'b1;
    end else begin
        b_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_1_EN_A = 1'b1;
    end else begin
        b_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_2_EN_A = 1'b1;
    end else begin
        b_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        b_3_EN_A = 1'b1;
    end else begin
        b_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter8)) begin
        c_EN_A = 1'b1;
    end else begin
        c_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_402 == 1'b0))) begin
        c_WEN_A = ap_const_lv4_F;
    end else begin
        c_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_402 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_205_p4 = tmp_mid2_v_reg_416;
    end else begin
        i_phi_fu_205_p4 = i_reg_201;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter8) & ~(1'b1 == ap_enable_reg_pp0_iter7)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_300_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_300_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << ap_const_lv32_2;

assign a_0_Addr_A_orig = tmp_mid2_fu_340_p1;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = ap_const_lv32_0;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = ap_const_lv4_0;

assign a_1_Addr_A = a_1_Addr_A_orig << ap_const_lv32_2;

assign a_1_Addr_A_orig = tmp_mid2_fu_340_p1;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = ap_const_lv32_0;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = ap_const_lv4_0;

assign a_2_Addr_A = a_2_Addr_A_orig << ap_const_lv32_2;

assign a_2_Addr_A_orig = tmp_mid2_fu_340_p1;

assign a_2_Clk_A = ap_clk;

assign a_2_Din_A = ap_const_lv32_0;

assign a_2_Rst_A = ap_rst;

assign a_2_WEN_A = ap_const_lv4_0;

assign a_3_Addr_A = a_3_Addr_A_orig << ap_const_lv32_2;

assign a_3_Addr_A_orig = tmp_mid2_fu_340_p1;

assign a_3_Clk_A = ap_clk;

assign a_3_Din_A = ap_const_lv32_0;

assign a_3_Rst_A = ap_rst;

assign a_3_WEN_A = ap_const_lv4_0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_2];

assign b_0_Addr_A = b_0_Addr_A_orig << ap_const_lv32_2;

assign b_0_Addr_A_orig = tmp_2_fu_348_p1;

assign b_0_Clk_A = ap_clk;

assign b_0_Din_A = ap_const_lv32_0;

assign b_0_Rst_A = ap_rst;

assign b_0_WEN_A = ap_const_lv4_0;

assign b_1_Addr_A = b_1_Addr_A_orig << ap_const_lv32_2;

assign b_1_Addr_A_orig = tmp_2_fu_348_p1;

assign b_1_Clk_A = ap_clk;

assign b_1_Din_A = ap_const_lv32_0;

assign b_1_Rst_A = ap_rst;

assign b_1_WEN_A = ap_const_lv4_0;

assign b_2_Addr_A = b_2_Addr_A_orig << ap_const_lv32_2;

assign b_2_Addr_A_orig = tmp_2_fu_348_p1;

assign b_2_Clk_A = ap_clk;

assign b_2_Din_A = ap_const_lv32_0;

assign b_2_Rst_A = ap_rst;

assign b_2_WEN_A = ap_const_lv4_0;

assign b_3_Addr_A = b_3_Addr_A_orig << ap_const_lv32_2;

assign b_3_Addr_A_orig = tmp_2_fu_348_p1;

assign b_3_Clk_A = ap_clk;

assign b_3_Din_A = ap_const_lv32_0;

assign b_3_Rst_A = ap_rst;

assign b_3_WEN_A = ap_const_lv4_0;

assign c_Addr_A = c_Addr_A_orig << ap_const_lv32_2;

assign c_Addr_A_orig = tmp_4_cast_fu_382_p1;

assign c_Clk_A = ap_clk;

assign c_Din_A = (tmp2_fu_391_p2 + tmp1_fu_387_p2);

assign c_Rst_A = ap_rst;

assign exitcond_flatten_fu_300_p2 = ((indvar_flatten_reg_190 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_318_p2 = ((j_reg_212 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign i_1_fu_312_p2 = (i_phi_fu_205_p4 + ap_const_lv3_1);

assign indvar_flatten_next_fu_306_p2 = (indvar_flatten_reg_190 + ap_const_lv5_1);

assign j_1_fu_356_p2 = (j_mid2_fu_324_p3 + ap_const_lv3_1);

assign j_mid2_fu_324_p3 = ((exitcond_fu_318_p2[0:0] === 1'b1) ? ap_const_lv3_0 : j_reg_212);

assign tmp1_fu_387_p2 = (tmp_6_reg_507 + tmp_6_1_reg_512);

assign tmp2_fu_391_p2 = (tmp_6_2_reg_517 + tmp_6_3_reg_522);

assign tmp_2_cast_fu_373_p1 = ap_pipeline_reg_pp0_iter7_j_mid2_reg_411;

assign tmp_2_fu_348_p1 = j_mid2_fu_324_p3;

assign tmp_3_cast_fu_369_p1 = tmp_fu_362_p3;

assign tmp_4_cast_fu_382_p1 = tmp_4_fu_376_p2;

assign tmp_4_fu_376_p2 = (tmp_2_cast_fu_373_p1 + tmp_3_cast_fu_369_p1);

assign tmp_fu_362_p3 = {{ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_416}, {ap_const_lv2_0}};

assign tmp_mid2_fu_340_p1 = tmp_mid2_v_fu_332_p3;

assign tmp_mid2_v_fu_332_p3 = ((exitcond_fu_318_p2[0:0] === 1'b1) ? i_1_fu_312_p2 : i_phi_fu_205_p4);

endmodule //matmul_hw
