// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.050000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=419,HLS_SYN_LUT=534}" *)

module matmul_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_Addr_A,
        a_EN_A,
        a_WEN_A,
        a_Din_A,
        a_Dout_A,
        a_Clk_A,
        a_Rst_A,
        b_Addr_A,
        b_EN_A,
        b_WEN_A,
        b_Din_A,
        b_Dout_A,
        b_Clk_A,
        b_Rst_A,
        c_Addr_A,
        c_EN_A,
        c_WEN_A,
        c_Din_A,
        c_Dout_A,
        c_Clk_A,
        c_Rst_A
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_pp0_stage0 = 4'b10;
parameter    ap_ST_fsm_pp0_stage1 = 4'b100;
parameter    ap_ST_fsm_state12 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv61_0 = 61'b0000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_Addr_A;
output   a_EN_A;
output  [3:0] a_WEN_A;
output  [31:0] a_Din_A;
input  [31:0] a_Dout_A;
output   a_Clk_A;
output   a_Rst_A;
output  [31:0] b_Addr_A;
output   b_EN_A;
output  [3:0] b_WEN_A;
output  [31:0] b_Din_A;
input  [31:0] b_Dout_A;
output   b_Clk_A;
output   b_Rst_A;
output  [31:0] c_Addr_A;
output   c_EN_A;
output  [3:0] c_WEN_A;
output  [31:0] c_Din_A;
input  [31:0] c_Dout_A;
output   c_Clk_A;
output   c_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_EN_A;
reg b_EN_A;
reg c_EN_A;
reg[3:0] c_WEN_A;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [2:0] indvar_flatten_reg_146;
reg   [1:0] i_reg_157;
reg   [1:0] j_reg_168;
wire   [0:0] exitcond_flatten_fu_179_p2;
reg   [0:0] exitcond_flatten_reg_496;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_496;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_496;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_496;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_496;
wire   [2:0] indvar_flatten_next_fu_185_p2;
reg   [2:0] indvar_flatten_next_reg_500;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] j_mid2_fu_203_p3;
reg   [1:0] j_mid2_reg_505;
wire   [0:0] tmp_mid2_fu_223_p3;
reg   [0:0] tmp_mid2_reg_513;
wire   [1:0] tmp_1_mid2_v_fu_231_p3;
reg   [1:0] tmp_1_mid2_v_reg_521;
wire   [2:0] tmp_1_fu_239_p3;
reg   [2:0] tmp_1_reg_526;
wire   [0:0] tmp_fu_257_p1;
reg   [0:0] tmp_reg_542;
wire   [0:0] ap_CS_fsm_pp0_stage1;
wire   [0:0] tmp_3_fu_284_p2;
reg   [0:0] tmp_3_reg_557;
reg   [31:0] a_row_0_reg_563;
wire   [3:0] tmp_9_fu_306_p2;
reg   [3:0] tmp_9_reg_573;
reg   [3:0] ap_pipeline_reg_pp0_iter1_tmp_9_reg_573;
reg   [3:0] ap_pipeline_reg_pp0_iter2_tmp_9_reg_573;
reg   [3:0] ap_pipeline_reg_pp0_iter3_tmp_9_reg_573;
wire  signed [31:0] b_copy_load_0_phi_fu_340_p3;
reg  signed [31:0] b_copy_load_0_phi_reg_578;
wire   [1:0] j_1_fu_347_p2;
reg   [1:0] j_1_reg_583;
wire  signed [31:0] a_row_1_1_fu_374_p3;
reg  signed [31:0] a_row_1_1_reg_588;
wire  signed [31:0] a_row_0_1_fu_381_p3;
wire  signed [31:0] b_copy_load_1_phi_fu_420_p3;
reg  signed [31:0] b_copy_load_1_phi_reg_598;
wire   [31:0] grp_fu_415_p2;
reg   [31:0] tmp_s_reg_603;
wire   [31:0] grp_fu_447_p2;
reg   [31:0] tmp_2_1_reg_608;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [2:0] indvar_flatten_phi_fu_150_p4;
reg   [1:0] i_phi_fu_161_p4;
reg   [1:0] j_phi_fu_172_p4;
wire   [63:0] tmp_4_fu_247_p1;
wire   [63:0] tmp_6_fu_252_p1;
wire   [63:0] tmp_7_fu_275_p3;
wire   [63:0] tmp_8_cast_fu_301_p1;
wire   [63:0] tmp_9_cast_fu_451_p1;
reg   [31:0] a_row_0_2_fu_70;
reg   [31:0] a_row_1_2_fu_74;
reg   [31:0] b_copy_0_1_fu_78;
wire   [31:0] b_copy_0_1_4_fu_333_p3;
reg   [31:0] b_copy_0_1_5_fu_82;
wire   [31:0] b_copy_0_1_3_fu_326_p3;
reg   [31:0] b_copy_1_1_fu_86;
wire   [31:0] b_copy_1_1_4_fu_408_p3;
reg   [31:0] b_copy_1_1_5_fu_90;
wire   [31:0] b_copy_1_1_3_fu_401_p3;
reg   [31:0] a_Addr_A_orig;
reg   [31:0] b_Addr_A_orig;
wire   [31:0] c_Addr_A_orig;
wire   [0:0] exitcond_fu_197_p2;
wire   [1:0] i_1_fu_191_p2;
wire   [0:0] tmp_mid1_fu_211_p2;
wire   [0:0] tmp1_fu_217_p2;
wire   [2:0] tmp_5_fu_270_p2;
wire   [2:0] tmp_6_cast_fu_292_p1;
wire   [2:0] tmp_8_fu_295_p2;
wire   [3:0] tmp_4_cast_fu_267_p1;
wire   [3:0] tmp_6_cast5_fu_289_p1;
wire   [31:0] b_copy_0_1_1_fu_312_p3;
wire   [31:0] b_copy_0_1_2_fu_319_p3;
wire   [31:0] b_copy_1_1_1_fu_387_p3;
wire   [31:0] b_copy_1_1_2_fu_394_p3;
wire  signed [31:0] grp_fu_415_p1;
wire   [0:0] ap_CS_fsm_state12;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

matmul_hw_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_copy_load_0_phi_reg_578),
    .din1(grp_fu_415_p1),
    .ce(1'b1),
    .dout(grp_fu_415_p2)
);

matmul_hw_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32sbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_copy_load_1_phi_reg_598),
    .din1(a_row_1_1_reg_588),
    .ce(1'b1),
    .dout(grp_fu_447_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_179_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_496 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & ~(exitcond_flatten_reg_496 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_496 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_157 <= tmp_1_mid2_v_reg_521;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_157 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_496 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_146 <= indvar_flatten_next_reg_500;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_146 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_496 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_reg_168 <= j_1_reg_583;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_168 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_496 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        a_row_0_2_fu_70 <= a_row_0_1_fu_381_p3;
        a_row_1_2_fu_74 <= a_row_1_1_fu_374_p3;
        b_copy_1_1_5_fu_90 <= b_copy_1_1_3_fu_401_p3;
        b_copy_1_1_fu_86 <= b_copy_1_1_4_fu_408_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_496 == 1'b0))) begin
        a_row_0_reg_563 <= a_Dout_A;
        b_copy_0_1_5_fu_82 <= b_copy_0_1_3_fu_326_p3;
        b_copy_0_1_fu_78 <= b_copy_0_1_4_fu_333_p3;
        j_1_reg_583 <= j_1_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_496 == 1'b0))) begin
        a_row_1_1_reg_588 <= a_row_1_1_fu_374_p3;
        b_copy_load_1_phi_reg_598 <= b_copy_load_1_phi_fu_420_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_496 <= exitcond_flatten_reg_496;
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_496 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_496;
        ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_496 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_496;
        ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_496 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_496;
        exitcond_flatten_reg_496 <= exitcond_flatten_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
        ap_pipeline_reg_pp0_iter1_tmp_9_reg_573 <= tmp_9_reg_573;
        ap_pipeline_reg_pp0_iter2_tmp_9_reg_573 <= ap_pipeline_reg_pp0_iter1_tmp_9_reg_573;
        ap_pipeline_reg_pp0_iter3_tmp_9_reg_573 <= ap_pipeline_reg_pp0_iter2_tmp_9_reg_573;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_496 == 1'b0))) begin
        b_copy_load_0_phi_reg_578 <= b_copy_load_0_phi_fu_340_p3;
        tmp_3_reg_557 <= tmp_3_fu_284_p2;
        tmp_9_reg_573 <= tmp_9_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_500 <= indvar_flatten_next_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_179_p2 == 1'b0))) begin
        j_mid2_reg_505 <= j_mid2_fu_203_p3;
        tmp_1_reg_526[2 : 1] <= tmp_1_fu_239_p3[2 : 1];
        tmp_mid2_reg_513 <= tmp_mid2_fu_223_p3;
        tmp_reg_542 <= tmp_fu_257_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_179_p2 == 1'b0))) begin
        tmp_1_mid2_v_reg_521 <= tmp_1_mid2_v_fu_231_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_496 == 1'b0))) begin
        tmp_2_1_reg_608 <= grp_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_496 == 1'b0))) begin
        tmp_s_reg_603 <= grp_fu_415_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_Addr_A_orig = tmp_7_fu_275_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_Addr_A_orig = tmp_4_fu_247_p1;
        end else begin
            a_Addr_A_orig = 'bx;
        end
    end else begin
        a_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_EN_A = 1'b1;
    end else begin
        a_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_Addr_A_orig = tmp_8_cast_fu_301_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_Addr_A_orig = tmp_6_fu_252_p1;
        end else begin
            b_Addr_A_orig = 'bx;
        end
    end else begin
        b_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_EN_A = 1'b1;
    end else begin
        b_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        c_EN_A = 1'b1;
    end else begin
        c_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_496 == 1'b0))) begin
        c_WEN_A = ap_const_lv4_F;
    end else begin
        c_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_496 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_161_p4 = tmp_1_mid2_v_reg_521;
    end else begin
        i_phi_fu_161_p4 = i_reg_157;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_496 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_phi_fu_150_p4 = indvar_flatten_next_reg_500;
    end else begin
        indvar_flatten_phi_fu_150_p4 = indvar_flatten_reg_146;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_496 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_phi_fu_172_p4 = j_1_reg_583;
    end else begin
        j_phi_fu_172_p4 = j_reg_168;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_179_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & ~(1'b1 == ap_enable_reg_pp0_iter3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Addr_A = a_Addr_A_orig << ap_const_lv32_2;

assign a_Clk_A = ap_clk;

assign a_Din_A = ap_const_lv32_0;

assign a_Rst_A = ap_rst;

assign a_WEN_A = ap_const_lv4_0;

assign a_row_0_1_fu_381_p3 = ((tmp_3_reg_557[0:0] === 1'b1) ? a_row_0_reg_563 : a_row_0_2_fu_70);

assign a_row_1_1_fu_374_p3 = ((tmp_3_reg_557[0:0] === 1'b1) ? a_Dout_A : a_row_1_2_fu_74);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_3];

assign b_Addr_A = b_Addr_A_orig << ap_const_lv32_2;

assign b_Clk_A = ap_clk;

assign b_Din_A = ap_const_lv32_0;

assign b_Rst_A = ap_rst;

assign b_WEN_A = ap_const_lv4_0;

assign b_copy_0_1_1_fu_312_p3 = ((tmp_reg_542[0:0] === 1'b1) ? b_Dout_A : b_copy_0_1_5_fu_82);

assign b_copy_0_1_2_fu_319_p3 = ((tmp_reg_542[0:0] === 1'b1) ? b_copy_0_1_fu_78 : b_Dout_A);

assign b_copy_0_1_3_fu_326_p3 = ((tmp_mid2_reg_513[0:0] === 1'b1) ? b_copy_0_1_1_fu_312_p3 : b_copy_0_1_5_fu_82);

assign b_copy_0_1_4_fu_333_p3 = ((tmp_mid2_reg_513[0:0] === 1'b1) ? b_copy_0_1_2_fu_319_p3 : b_copy_0_1_fu_78);

assign b_copy_1_1_1_fu_387_p3 = ((tmp_reg_542[0:0] === 1'b1) ? b_Dout_A : b_copy_1_1_5_fu_90);

assign b_copy_1_1_2_fu_394_p3 = ((tmp_reg_542[0:0] === 1'b1) ? b_copy_1_1_fu_86 : b_Dout_A);

assign b_copy_1_1_3_fu_401_p3 = ((tmp_mid2_reg_513[0:0] === 1'b1) ? b_copy_1_1_1_fu_387_p3 : b_copy_1_1_5_fu_90);

assign b_copy_1_1_4_fu_408_p3 = ((tmp_mid2_reg_513[0:0] === 1'b1) ? b_copy_1_1_2_fu_394_p3 : b_copy_1_1_fu_86);

assign b_copy_load_0_phi_fu_340_p3 = ((tmp_reg_542[0:0] === 1'b1) ? b_copy_0_1_3_fu_326_p3 : b_copy_0_1_4_fu_333_p3);

assign b_copy_load_1_phi_fu_420_p3 = ((tmp_reg_542[0:0] === 1'b1) ? b_copy_1_1_3_fu_401_p3 : b_copy_1_1_4_fu_408_p3);

assign c_Addr_A = c_Addr_A_orig << ap_const_lv32_2;

assign c_Addr_A_orig = tmp_9_cast_fu_451_p1;

assign c_Clk_A = ap_clk;

assign c_Din_A = (tmp_2_1_reg_608 + tmp_s_reg_603);

assign c_Rst_A = ap_rst;

assign exitcond_flatten_fu_179_p2 = ((indvar_flatten_phi_fu_150_p4 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond_fu_197_p2 = ((j_phi_fu_172_p4 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign grp_fu_415_p1 = ((tmp_3_reg_557[0:0] === 1'b1) ? a_row_0_reg_563 : a_row_0_2_fu_70);

assign i_1_fu_191_p2 = (ap_const_lv2_1 + i_phi_fu_161_p4);

assign indvar_flatten_next_fu_185_p2 = (indvar_flatten_phi_fu_150_p4 + ap_const_lv3_1);

assign j_1_fu_347_p2 = (ap_const_lv2_1 + j_mid2_reg_505);

assign j_mid2_fu_203_p3 = ((exitcond_fu_197_p2[0:0] === 1'b1) ? ap_const_lv2_0 : j_phi_fu_172_p4);

assign tmp1_fu_217_p2 = ((i_phi_fu_161_p4 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign tmp_1_fu_239_p3 = {{tmp_1_mid2_v_fu_231_p3}, {1'b0}};

assign tmp_1_mid2_v_fu_231_p3 = ((exitcond_fu_197_p2[0:0] === 1'b1) ? i_1_fu_191_p2 : i_phi_fu_161_p4);

assign tmp_3_fu_284_p2 = ((j_mid2_reg_505 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_267_p1 = tmp_1_reg_526;

assign tmp_4_fu_247_p1 = tmp_1_fu_239_p3;

assign tmp_5_fu_270_p2 = (tmp_1_reg_526 | ap_const_lv3_1);

assign tmp_6_cast5_fu_289_p1 = j_mid2_reg_505;

assign tmp_6_cast_fu_292_p1 = j_mid2_reg_505;

assign tmp_6_fu_252_p1 = j_mid2_fu_203_p3;

assign tmp_7_fu_275_p3 = {{ap_const_lv61_0}, {tmp_5_fu_270_p2}};

assign tmp_8_cast_fu_301_p1 = tmp_8_fu_295_p2;

assign tmp_8_fu_295_p2 = (ap_const_lv3_2 + tmp_6_cast_fu_292_p1);

assign tmp_9_cast_fu_451_p1 = ap_pipeline_reg_pp0_iter3_tmp_9_reg_573;

assign tmp_9_fu_306_p2 = (tmp_4_cast_fu_267_p1 + tmp_6_cast5_fu_289_p1);

assign tmp_fu_257_p1 = j_mid2_fu_203_p3[0:0];

assign tmp_mid1_fu_211_p2 = ((i_1_fu_191_p2 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_223_p3 = ((exitcond_fu_197_p2[0:0] === 1'b1) ? tmp_mid1_fu_211_p2 : tmp1_fu_217_p2);

always @ (posedge ap_clk) begin
    tmp_1_reg_526[0] <= 1'b0;
end

endmodule //matmul_hw
