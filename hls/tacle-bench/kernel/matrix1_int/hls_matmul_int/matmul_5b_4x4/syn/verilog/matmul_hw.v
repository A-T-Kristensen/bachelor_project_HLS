// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.700000,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=422,HLS_SYN_LUT=391}" *)

module matmul_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        b_0_Addr_A,
        b_0_EN_A,
        b_0_WEN_A,
        b_0_Din_A,
        b_0_Dout_A,
        b_0_Clk_A,
        b_0_Rst_A,
        b_1_Addr_A,
        b_1_EN_A,
        b_1_WEN_A,
        b_1_Din_A,
        b_1_Dout_A,
        b_1_Clk_A,
        b_1_Rst_A,
        c_Addr_A,
        c_EN_A,
        c_WEN_A,
        c_Din_A,
        c_Dout_A,
        c_Clk_A,
        c_Rst_A
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_pp0_stage0 = 4'b10;
parameter    ap_ST_fsm_pp0_stage1 = 4'b100;
parameter    ap_ST_fsm_state12 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv60_0 = 60'b000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [3:0] a_0_WEN_A;
output  [31:0] a_0_Din_A;
input  [31:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [3:0] a_1_WEN_A;
output  [31:0] a_1_Din_A;
input  [31:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] b_0_Addr_A;
output   b_0_EN_A;
output  [3:0] b_0_WEN_A;
output  [31:0] b_0_Din_A;
input  [31:0] b_0_Dout_A;
output   b_0_Clk_A;
output   b_0_Rst_A;
output  [31:0] b_1_Addr_A;
output   b_1_EN_A;
output  [3:0] b_1_WEN_A;
output  [31:0] b_1_Din_A;
input  [31:0] b_1_Dout_A;
output   b_1_Clk_A;
output   b_1_Rst_A;
output  [31:0] c_Addr_A;
output   c_EN_A;
output  [3:0] c_WEN_A;
output  [31:0] c_Din_A;
input  [31:0] c_Dout_A;
output   c_Clk_A;
output   c_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_EN_A;
reg a_1_EN_A;
reg b_0_EN_A;
reg b_1_EN_A;
reg c_EN_A;
reg[3:0] c_WEN_A;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_178;
reg   [2:0] i_reg_189;
reg   [2:0] j_reg_200;
wire   [0:0] exitcond_flatten_fu_244_p2;
reg   [0:0] exitcond_flatten_reg_379;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_379;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_379;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379;
wire   [4:0] indvar_flatten_next_fu_250_p2;
reg   [4:0] indvar_flatten_next_reg_383;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] j_mid2_fu_268_p3;
reg   [2:0] j_mid2_reg_388;
reg   [2:0] ap_pipeline_reg_pp0_iter1_j_mid2_reg_388;
reg   [2:0] ap_pipeline_reg_pp0_iter2_j_mid2_reg_388;
reg   [2:0] ap_pipeline_reg_pp0_iter3_j_mid2_reg_388;
reg   [2:0] ap_pipeline_reg_pp0_iter4_j_mid2_reg_388;
wire   [2:0] tmp_mid2_v_fu_276_p3;
reg   [2:0] tmp_mid2_v_reg_395;
reg   [2:0] ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_395;
reg   [2:0] ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_395;
reg   [2:0] ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_395;
reg   [2:0] ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395;
wire   [3:0] tmp_fu_284_p3;
reg   [3:0] tmp_reg_401;
wire   [0:0] ap_CS_fsm_pp0_stage1;
reg  signed [31:0] a_0_load_reg_446;
reg  signed [31:0] b_0_load_reg_451;
reg  signed [31:0] a_1_load_reg_456;
reg  signed [31:0] b_1_load_reg_461;
wire   [2:0] j_1_fu_334_p2;
reg   [2:0] j_1_reg_466;
reg  signed [31:0] a_0_load_1_reg_471;
reg    ap_enable_reg_pp0_iter1;
reg  signed [31:0] b_0_load_1_reg_476;
reg  signed [31:0] a_1_load_1_reg_481;
reg  signed [31:0] b_1_load_1_reg_486;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] tmp_6_reg_491;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] grp_fu_212_p2;
reg   [31:0] tmp_6_2_reg_496;
reg   [31:0] tmp_6_1_reg_501;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] tmp_6_3_reg_506;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] indvar_flatten_phi_fu_182_p4;
reg   [2:0] i_phi_fu_193_p4;
reg   [2:0] j_phi_fu_204_p4;
wire   [63:0] tmp_3_fu_292_p1;
wire   [63:0] tmp_2_fu_298_p1;
wire   [63:0] tmp_5_fu_309_p3;
wire   [63:0] tmp_9_cast_fu_328_p1;
wire   [63:0] tmp_10_cast_fu_359_p1;
reg   [31:0] a_0_Addr_A_orig;
reg   [31:0] b_0_Addr_A_orig;
reg   [31:0] a_1_Addr_A_orig;
reg   [31:0] b_1_Addr_A_orig;
wire   [31:0] c_Addr_A_orig;
reg  signed [31:0] grp_fu_211_p0;
reg  signed [31:0] grp_fu_211_p1;
reg  signed [31:0] grp_fu_212_p0;
reg  signed [31:0] grp_fu_212_p1;
wire   [0:0] exitcond_fu_262_p2;
wire   [2:0] i_1_fu_256_p2;
wire   [3:0] tmp_4_fu_304_p2;
wire   [3:0] tmp_2_cast_fu_319_p1;
wire   [3:0] tmp_9_fu_322_p2;
wire   [4:0] tmp_7_fu_339_p3;
wire   [5:0] tmp_2_cast3_fu_350_p1;
wire   [5:0] tmp_8_cast_fu_346_p1;
wire   [5:0] tmp_s_fu_353_p2;
wire   [31:0] tmp2_fu_368_p2;
wire   [31:0] tmp1_fu_364_p2;
wire   [0:0] ap_CS_fsm_state12;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

matmul_hw_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32scud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_211_p0),
    .din1(grp_fu_211_p1),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

matmul_hw_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_hw_mul_32scud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_212_p0),
    .din1(grp_fu_212_p1),
    .ce(1'b1),
    .dout(grp_fu_212_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_244_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_379 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & ~(exitcond_flatten_reg_379 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_379 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_189 <= tmp_mid2_v_reg_395;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_189 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_379 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_178 <= indvar_flatten_next_reg_383;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_178 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_379 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_reg_200 <= j_1_reg_466;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_200 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_379 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        a_0_load_1_reg_471 <= a_0_Dout_A;
        a_1_load_1_reg_481 <= a_1_Dout_A;
        b_0_load_1_reg_476 <= b_0_Dout_A;
        b_1_load_1_reg_486 <= b_1_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_379 == 1'b0))) begin
        a_0_load_reg_446 <= a_0_Dout_A;
        a_1_load_reg_456 <= a_1_Dout_A;
        b_0_load_reg_451 <= b_0_Dout_A;
        b_1_load_reg_461 <= b_1_Dout_A;
        j_1_reg_466 <= j_1_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_379 <= exitcond_flatten_reg_379;
        ap_pipeline_reg_pp0_iter1_j_mid2_reg_388 <= j_mid2_reg_388;
        ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_395 <= tmp_mid2_v_reg_395;
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_379 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_379;
        ap_pipeline_reg_pp0_iter2_j_mid2_reg_388 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_388;
        ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_395 <= ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_395;
        ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_379;
        ap_pipeline_reg_pp0_iter3_j_mid2_reg_388 <= ap_pipeline_reg_pp0_iter2_j_mid2_reg_388;
        ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_395 <= ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_395;
        ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379;
        ap_pipeline_reg_pp0_iter4_j_mid2_reg_388 <= ap_pipeline_reg_pp0_iter3_j_mid2_reg_388;
        ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395 <= ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_395;
        exitcond_flatten_reg_379 <= exitcond_flatten_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_383 <= indvar_flatten_next_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_244_p2 == 1'b0))) begin
        j_mid2_reg_388 <= j_mid2_fu_268_p3;
        tmp_reg_401[3 : 1] <= tmp_fu_284_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        tmp_6_1_reg_501 <= grp_fu_211_p2;
        tmp_6_3_reg_506 <= grp_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379 == 1'b0))) begin
        tmp_6_2_reg_496 <= grp_fu_212_p2;
        tmp_6_reg_491 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_244_p2 == 1'b0))) begin
        tmp_mid2_v_reg_395 <= tmp_mid2_v_fu_276_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_0_Addr_A_orig = tmp_5_fu_309_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_0_Addr_A_orig = tmp_3_fu_292_p1;
        end else begin
            a_0_Addr_A_orig = 'bx;
        end
    end else begin
        a_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_0_EN_A = 1'b1;
    end else begin
        a_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            a_1_Addr_A_orig = tmp_5_fu_309_p3;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            a_1_Addr_A_orig = tmp_3_fu_292_p1;
        end else begin
            a_1_Addr_A_orig = 'bx;
        end
    end else begin
        a_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_1_EN_A = 1'b1;
    end else begin
        a_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_0_Addr_A_orig = tmp_9_cast_fu_328_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_0_Addr_A_orig = tmp_2_fu_298_p1;
        end else begin
            b_0_Addr_A_orig = 'bx;
        end
    end else begin
        b_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_0_EN_A = 1'b1;
    end else begin
        b_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            b_1_Addr_A_orig = tmp_9_cast_fu_328_p1;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            b_1_Addr_A_orig = tmp_2_fu_298_p1;
        end else begin
            b_1_Addr_A_orig = 'bx;
        end
    end else begin
        b_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_1_EN_A = 1'b1;
    end else begin
        b_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        c_EN_A = 1'b1;
    end else begin
        c_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379 == 1'b0))) begin
        c_WEN_A = ap_const_lv4_F;
    end else begin
        c_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter1)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            grp_fu_211_p0 = a_0_load_1_reg_471;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            grp_fu_211_p0 = a_0_load_reg_446;
        end else begin
            grp_fu_211_p0 = 'bx;
        end
    end else begin
        grp_fu_211_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter1)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            grp_fu_211_p1 = b_0_load_1_reg_476;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            grp_fu_211_p1 = b_0_load_reg_451;
        end else begin
            grp_fu_211_p1 = 'bx;
        end
    end else begin
        grp_fu_211_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter1)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            grp_fu_212_p0 = a_1_load_1_reg_481;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            grp_fu_212_p0 = a_1_load_reg_456;
        end else begin
            grp_fu_212_p0 = 'bx;
        end
    end else begin
        grp_fu_212_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter1)) begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            grp_fu_212_p1 = b_1_load_1_reg_486;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            grp_fu_212_p1 = b_1_load_reg_461;
        end else begin
            grp_fu_212_p1 = 'bx;
        end
    end else begin
        grp_fu_212_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_379 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_193_p4 = tmp_mid2_v_reg_395;
    end else begin
        i_phi_fu_193_p4 = i_reg_189;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_379 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_phi_fu_182_p4 = indvar_flatten_next_reg_383;
    end else begin
        indvar_flatten_phi_fu_182_p4 = indvar_flatten_reg_178;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_379 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_phi_fu_204_p4 = j_1_reg_466;
    end else begin
        j_phi_fu_204_p4 = j_reg_200;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_244_p2 == 1'b0) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter4) & ~(1'b1 == ap_enable_reg_pp0_iter3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Addr_A = a_0_Addr_A_orig << ap_const_lv32_2;

assign a_0_Clk_A = ap_clk;

assign a_0_Din_A = ap_const_lv32_0;

assign a_0_Rst_A = ap_rst;

assign a_0_WEN_A = ap_const_lv4_0;

assign a_1_Addr_A = a_1_Addr_A_orig << ap_const_lv32_2;

assign a_1_Clk_A = ap_clk;

assign a_1_Din_A = ap_const_lv32_0;

assign a_1_Rst_A = ap_rst;

assign a_1_WEN_A = ap_const_lv4_0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_3];

assign b_0_Addr_A = b_0_Addr_A_orig << ap_const_lv32_2;

assign b_0_Clk_A = ap_clk;

assign b_0_Din_A = ap_const_lv32_0;

assign b_0_Rst_A = ap_rst;

assign b_0_WEN_A = ap_const_lv4_0;

assign b_1_Addr_A = b_1_Addr_A_orig << ap_const_lv32_2;

assign b_1_Clk_A = ap_clk;

assign b_1_Din_A = ap_const_lv32_0;

assign b_1_Rst_A = ap_rst;

assign b_1_WEN_A = ap_const_lv4_0;

assign c_Addr_A = c_Addr_A_orig << ap_const_lv32_2;

assign c_Addr_A_orig = tmp_10_cast_fu_359_p1;

assign c_Clk_A = ap_clk;

assign c_Din_A = (tmp2_fu_368_p2 + tmp1_fu_364_p2);

assign c_Rst_A = ap_rst;

assign exitcond_flatten_fu_244_p2 = ((indvar_flatten_phi_fu_182_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_262_p2 = ((j_phi_fu_204_p4 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign i_1_fu_256_p2 = (i_phi_fu_193_p4 + ap_const_lv3_1);

assign indvar_flatten_next_fu_250_p2 = (indvar_flatten_phi_fu_182_p4 + ap_const_lv5_1);

assign j_1_fu_334_p2 = (j_mid2_reg_388 + ap_const_lv3_1);

assign j_mid2_fu_268_p3 = ((exitcond_fu_262_p2[0:0] === 1'b1) ? ap_const_lv3_0 : j_phi_fu_204_p4);

assign tmp1_fu_364_p2 = (tmp_6_reg_491 + tmp_6_1_reg_501);

assign tmp2_fu_368_p2 = (tmp_6_2_reg_496 + tmp_6_3_reg_506);

assign tmp_10_cast_fu_359_p1 = tmp_s_fu_353_p2;

assign tmp_2_cast3_fu_350_p1 = ap_pipeline_reg_pp0_iter4_j_mid2_reg_388;

assign tmp_2_cast_fu_319_p1 = j_mid2_reg_388;

assign tmp_2_fu_298_p1 = j_mid2_fu_268_p3;

assign tmp_3_fu_292_p1 = tmp_fu_284_p3;

assign tmp_4_fu_304_p2 = (tmp_reg_401 | ap_const_lv4_1);

assign tmp_5_fu_309_p3 = {{ap_const_lv60_0}, {tmp_4_fu_304_p2}};

assign tmp_7_fu_339_p3 = {{ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395}, {ap_const_lv2_0}};

assign tmp_8_cast_fu_346_p1 = tmp_7_fu_339_p3;

assign tmp_9_cast_fu_328_p1 = tmp_9_fu_322_p2;

assign tmp_9_fu_322_p2 = (tmp_2_cast_fu_319_p1 + ap_const_lv4_4);

assign tmp_fu_284_p3 = {{tmp_mid2_v_fu_276_p3}, {1'b0}};

assign tmp_mid2_v_fu_276_p3 = ((exitcond_fu_262_p2[0:0] === 1'b1) ? i_1_fu_256_p2 : i_phi_fu_193_p4);

assign tmp_s_fu_353_p2 = (tmp_2_cast3_fu_350_p1 + tmp_8_cast_fu_346_p1);

always @ (posedge ap_clk) begin
    tmp_reg_401[0] <= 1'b0;
end

endmodule //matmul_hw
