// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matmul_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matmul_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matmul_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> matmul_hw::ap_ST_fsm_state1 = "1";
const sc_lv<4> matmul_hw::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<4> matmul_hw::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<4> matmul_hw::ap_ST_fsm_state12 = "1000";
const sc_lv<32> matmul_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> matmul_hw::ap_const_lv1_1 = "1";
const sc_lv<32> matmul_hw::ap_const_lv32_1 = "1";
const sc_lv<1> matmul_hw::ap_const_lv1_0 = "0";
const sc_lv<32> matmul_hw::ap_const_lv32_2 = "10";
const sc_lv<5> matmul_hw::ap_const_lv5_0 = "00000";
const sc_lv<3> matmul_hw::ap_const_lv3_0 = "000";
const sc_lv<4> matmul_hw::ap_const_lv4_0 = "0000";
const sc_lv<4> matmul_hw::ap_const_lv4_F = "1111";
const sc_lv<5> matmul_hw::ap_const_lv5_10 = "10000";
const sc_lv<5> matmul_hw::ap_const_lv5_1 = "1";
const sc_lv<3> matmul_hw::ap_const_lv3_1 = "1";
const sc_lv<3> matmul_hw::ap_const_lv3_4 = "100";
const sc_lv<4> matmul_hw::ap_const_lv4_1 = "1";
const sc_lv<60> matmul_hw::ap_const_lv60_0 = "000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> matmul_hw::ap_const_lv4_4 = "100";
const sc_lv<2> matmul_hw::ap_const_lv2_0 = "00";
const sc_lv<32> matmul_hw::ap_const_lv32_3 = "11";

matmul_hw::matmul_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matmul_hw_mul_32scud_U1 = new matmul_hw_mul_32scud<1,6,32,32,32>("matmul_hw_mul_32scud_U1");
    matmul_hw_mul_32scud_U1->clk(ap_clk);
    matmul_hw_mul_32scud_U1->reset(ap_rst);
    matmul_hw_mul_32scud_U1->din0(grp_fu_211_p0);
    matmul_hw_mul_32scud_U1->din1(grp_fu_211_p1);
    matmul_hw_mul_32scud_U1->ce(ap_var_for_const0);
    matmul_hw_mul_32scud_U1->dout(grp_fu_211_p2);
    matmul_hw_mul_32scud_U2 = new matmul_hw_mul_32scud<1,6,32,32,32>("matmul_hw_mul_32scud_U2");
    matmul_hw_mul_32scud_U2->clk(ap_clk);
    matmul_hw_mul_32scud_U2->reset(ap_rst);
    matmul_hw_mul_32scud_U2->din0(grp_fu_212_p0);
    matmul_hw_mul_32scud_U2->din1(grp_fu_212_p1);
    matmul_hw_mul_32scud_U2->ce(ap_var_for_const0);
    matmul_hw_mul_32scud_U2->dout(grp_fu_212_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_0_Addr_A);
    sensitive << ( a_0_Addr_A_orig );

    SC_METHOD(thread_a_0_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_3_fu_292_p1 );
    sensitive << ( tmp_5_fu_309_p3 );

    SC_METHOD(thread_a_0_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_a_0_Din_A);

    SC_METHOD(thread_a_0_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );

    SC_METHOD(thread_a_0_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_a_0_WEN_A);

    SC_METHOD(thread_a_1_Addr_A);
    sensitive << ( a_1_Addr_A_orig );

    SC_METHOD(thread_a_1_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_3_fu_292_p1 );
    sensitive << ( tmp_5_fu_309_p3 );

    SC_METHOD(thread_a_1_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_a_1_Din_A);

    SC_METHOD(thread_a_1_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );

    SC_METHOD(thread_a_1_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_a_1_WEN_A);

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_b_0_Addr_A);
    sensitive << ( b_0_Addr_A_orig );

    SC_METHOD(thread_b_0_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_2_fu_298_p1 );
    sensitive << ( tmp_9_cast_fu_328_p1 );

    SC_METHOD(thread_b_0_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_b_0_Din_A);

    SC_METHOD(thread_b_0_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );

    SC_METHOD(thread_b_0_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_b_0_WEN_A);

    SC_METHOD(thread_b_1_Addr_A);
    sensitive << ( b_1_Addr_A_orig );

    SC_METHOD(thread_b_1_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_2_fu_298_p1 );
    sensitive << ( tmp_9_cast_fu_328_p1 );

    SC_METHOD(thread_b_1_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_b_1_Din_A);

    SC_METHOD(thread_b_1_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );

    SC_METHOD(thread_b_1_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_b_1_WEN_A);

    SC_METHOD(thread_c_Addr_A);
    sensitive << ( c_Addr_A_orig );

    SC_METHOD(thread_c_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( tmp_10_cast_fu_359_p1 );

    SC_METHOD(thread_c_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_c_Din_A);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( tmp2_fu_368_p2 );
    sensitive << ( tmp1_fu_364_p2 );

    SC_METHOD(thread_c_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_METHOD(thread_c_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_c_WEN_A);
    sensitive << ( ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_METHOD(thread_exitcond_flatten_fu_244_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indvar_flatten_phi_fu_182_p4 );

    SC_METHOD(thread_exitcond_fu_262_p2);
    sensitive << ( exitcond_flatten_fu_244_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( j_phi_fu_204_p4 );

    SC_METHOD(thread_grp_fu_211_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( a_0_load_reg_446 );
    sensitive << ( a_0_load_1_reg_471 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_grp_fu_211_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( b_0_load_reg_451 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( b_0_load_1_reg_476 );

    SC_METHOD(thread_grp_fu_212_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( a_1_load_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( a_1_load_1_reg_481 );

    SC_METHOD(thread_grp_fu_212_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( b_1_load_reg_461 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( b_1_load_1_reg_486 );

    SC_METHOD(thread_i_1_fu_256_p2);
    sensitive << ( i_phi_fu_193_p4 );

    SC_METHOD(thread_i_phi_fu_193_p4);
    sensitive << ( i_reg_189 );
    sensitive << ( exitcond_flatten_reg_379 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_mid2_v_reg_395 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_indvar_flatten_next_fu_250_p2);
    sensitive << ( indvar_flatten_phi_fu_182_p4 );

    SC_METHOD(thread_indvar_flatten_phi_fu_182_p4);
    sensitive << ( indvar_flatten_reg_178 );
    sensitive << ( exitcond_flatten_reg_379 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_next_reg_383 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_j_1_fu_334_p2);
    sensitive << ( j_mid2_reg_388 );

    SC_METHOD(thread_j_mid2_fu_268_p3);
    sensitive << ( j_phi_fu_204_p4 );
    sensitive << ( exitcond_fu_262_p2 );

    SC_METHOD(thread_j_phi_fu_204_p4);
    sensitive << ( j_reg_200 );
    sensitive << ( exitcond_flatten_reg_379 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_1_reg_466 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp1_fu_364_p2);
    sensitive << ( tmp_6_reg_491 );
    sensitive << ( tmp_6_1_reg_501 );

    SC_METHOD(thread_tmp2_fu_368_p2);
    sensitive << ( tmp_6_2_reg_496 );
    sensitive << ( tmp_6_3_reg_506 );

    SC_METHOD(thread_tmp_10_cast_fu_359_p1);
    sensitive << ( tmp_s_fu_353_p2 );

    SC_METHOD(thread_tmp_2_cast3_fu_350_p1);
    sensitive << ( ap_pipeline_reg_pp0_iter4_j_mid2_reg_388 );

    SC_METHOD(thread_tmp_2_cast_fu_319_p1);
    sensitive << ( j_mid2_reg_388 );

    SC_METHOD(thread_tmp_2_fu_298_p1);
    sensitive << ( j_mid2_fu_268_p3 );

    SC_METHOD(thread_tmp_3_fu_292_p1);
    sensitive << ( tmp_fu_284_p3 );

    SC_METHOD(thread_tmp_4_fu_304_p2);
    sensitive << ( tmp_reg_401 );

    SC_METHOD(thread_tmp_5_fu_309_p3);
    sensitive << ( tmp_4_fu_304_p2 );

    SC_METHOD(thread_tmp_7_fu_339_p3);
    sensitive << ( ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395 );

    SC_METHOD(thread_tmp_8_cast_fu_346_p1);
    sensitive << ( tmp_7_fu_339_p3 );

    SC_METHOD(thread_tmp_9_cast_fu_328_p1);
    sensitive << ( tmp_9_fu_322_p2 );

    SC_METHOD(thread_tmp_9_fu_322_p2);
    sensitive << ( tmp_2_cast_fu_319_p1 );

    SC_METHOD(thread_tmp_fu_284_p3);
    sensitive << ( tmp_mid2_v_fu_276_p3 );

    SC_METHOD(thread_tmp_mid2_v_fu_276_p3);
    sensitive << ( i_phi_fu_193_p4 );
    sensitive << ( exitcond_fu_262_p2 );
    sensitive << ( i_1_fu_256_p2 );

    SC_METHOD(thread_tmp_s_fu_353_p2);
    sensitive << ( tmp_2_cast3_fu_350_p1 );
    sensitive << ( tmp_8_cast_fu_346_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_flatten_fu_244_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matmul_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_0_Addr_A, "(port)a_0_Addr_A");
    sc_trace(mVcdFile, a_0_EN_A, "(port)a_0_EN_A");
    sc_trace(mVcdFile, a_0_WEN_A, "(port)a_0_WEN_A");
    sc_trace(mVcdFile, a_0_Din_A, "(port)a_0_Din_A");
    sc_trace(mVcdFile, a_0_Dout_A, "(port)a_0_Dout_A");
    sc_trace(mVcdFile, a_0_Clk_A, "(port)a_0_Clk_A");
    sc_trace(mVcdFile, a_0_Rst_A, "(port)a_0_Rst_A");
    sc_trace(mVcdFile, a_1_Addr_A, "(port)a_1_Addr_A");
    sc_trace(mVcdFile, a_1_EN_A, "(port)a_1_EN_A");
    sc_trace(mVcdFile, a_1_WEN_A, "(port)a_1_WEN_A");
    sc_trace(mVcdFile, a_1_Din_A, "(port)a_1_Din_A");
    sc_trace(mVcdFile, a_1_Dout_A, "(port)a_1_Dout_A");
    sc_trace(mVcdFile, a_1_Clk_A, "(port)a_1_Clk_A");
    sc_trace(mVcdFile, a_1_Rst_A, "(port)a_1_Rst_A");
    sc_trace(mVcdFile, b_0_Addr_A, "(port)b_0_Addr_A");
    sc_trace(mVcdFile, b_0_EN_A, "(port)b_0_EN_A");
    sc_trace(mVcdFile, b_0_WEN_A, "(port)b_0_WEN_A");
    sc_trace(mVcdFile, b_0_Din_A, "(port)b_0_Din_A");
    sc_trace(mVcdFile, b_0_Dout_A, "(port)b_0_Dout_A");
    sc_trace(mVcdFile, b_0_Clk_A, "(port)b_0_Clk_A");
    sc_trace(mVcdFile, b_0_Rst_A, "(port)b_0_Rst_A");
    sc_trace(mVcdFile, b_1_Addr_A, "(port)b_1_Addr_A");
    sc_trace(mVcdFile, b_1_EN_A, "(port)b_1_EN_A");
    sc_trace(mVcdFile, b_1_WEN_A, "(port)b_1_WEN_A");
    sc_trace(mVcdFile, b_1_Din_A, "(port)b_1_Din_A");
    sc_trace(mVcdFile, b_1_Dout_A, "(port)b_1_Dout_A");
    sc_trace(mVcdFile, b_1_Clk_A, "(port)b_1_Clk_A");
    sc_trace(mVcdFile, b_1_Rst_A, "(port)b_1_Rst_A");
    sc_trace(mVcdFile, c_Addr_A, "(port)c_Addr_A");
    sc_trace(mVcdFile, c_EN_A, "(port)c_EN_A");
    sc_trace(mVcdFile, c_WEN_A, "(port)c_WEN_A");
    sc_trace(mVcdFile, c_Din_A, "(port)c_Din_A");
    sc_trace(mVcdFile, c_Dout_A, "(port)c_Dout_A");
    sc_trace(mVcdFile, c_Clk_A, "(port)c_Clk_A");
    sc_trace(mVcdFile, c_Rst_A, "(port)c_Rst_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvar_flatten_reg_178, "indvar_flatten_reg_178");
    sc_trace(mVcdFile, i_reg_189, "i_reg_189");
    sc_trace(mVcdFile, j_reg_200, "j_reg_200");
    sc_trace(mVcdFile, exitcond_flatten_fu_244_p2, "exitcond_flatten_fu_244_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_379, "exitcond_flatten_reg_379");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_379, "ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_379");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_379, "ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_379");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379, "ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379, "ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379");
    sc_trace(mVcdFile, indvar_flatten_next_fu_250_p2, "indvar_flatten_next_fu_250_p2");
    sc_trace(mVcdFile, indvar_flatten_next_reg_383, "indvar_flatten_next_reg_383");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, j_mid2_fu_268_p3, "j_mid2_fu_268_p3");
    sc_trace(mVcdFile, j_mid2_reg_388, "j_mid2_reg_388");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_j_mid2_reg_388, "ap_pipeline_reg_pp0_iter1_j_mid2_reg_388");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_j_mid2_reg_388, "ap_pipeline_reg_pp0_iter2_j_mid2_reg_388");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_j_mid2_reg_388, "ap_pipeline_reg_pp0_iter3_j_mid2_reg_388");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_j_mid2_reg_388, "ap_pipeline_reg_pp0_iter4_j_mid2_reg_388");
    sc_trace(mVcdFile, tmp_mid2_v_fu_276_p3, "tmp_mid2_v_fu_276_p3");
    sc_trace(mVcdFile, tmp_mid2_v_reg_395, "tmp_mid2_v_reg_395");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_395, "ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_395");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_395, "ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_395");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_395, "ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_395");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395, "ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395");
    sc_trace(mVcdFile, tmp_fu_284_p3, "tmp_fu_284_p3");
    sc_trace(mVcdFile, tmp_reg_401, "tmp_reg_401");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, a_0_load_reg_446, "a_0_load_reg_446");
    sc_trace(mVcdFile, b_0_load_reg_451, "b_0_load_reg_451");
    sc_trace(mVcdFile, a_1_load_reg_456, "a_1_load_reg_456");
    sc_trace(mVcdFile, b_1_load_reg_461, "b_1_load_reg_461");
    sc_trace(mVcdFile, j_1_fu_334_p2, "j_1_fu_334_p2");
    sc_trace(mVcdFile, j_1_reg_466, "j_1_reg_466");
    sc_trace(mVcdFile, a_0_load_1_reg_471, "a_0_load_1_reg_471");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, b_0_load_1_reg_476, "b_0_load_1_reg_476");
    sc_trace(mVcdFile, a_1_load_1_reg_481, "a_1_load_1_reg_481");
    sc_trace(mVcdFile, b_1_load_1_reg_486, "b_1_load_1_reg_486");
    sc_trace(mVcdFile, grp_fu_211_p2, "grp_fu_211_p2");
    sc_trace(mVcdFile, tmp_6_reg_491, "tmp_6_reg_491");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, grp_fu_212_p2, "grp_fu_212_p2");
    sc_trace(mVcdFile, tmp_6_2_reg_496, "tmp_6_2_reg_496");
    sc_trace(mVcdFile, tmp_6_1_reg_501, "tmp_6_1_reg_501");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, tmp_6_3_reg_506, "tmp_6_3_reg_506");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, indvar_flatten_phi_fu_182_p4, "indvar_flatten_phi_fu_182_p4");
    sc_trace(mVcdFile, i_phi_fu_193_p4, "i_phi_fu_193_p4");
    sc_trace(mVcdFile, j_phi_fu_204_p4, "j_phi_fu_204_p4");
    sc_trace(mVcdFile, tmp_3_fu_292_p1, "tmp_3_fu_292_p1");
    sc_trace(mVcdFile, tmp_2_fu_298_p1, "tmp_2_fu_298_p1");
    sc_trace(mVcdFile, tmp_5_fu_309_p3, "tmp_5_fu_309_p3");
    sc_trace(mVcdFile, tmp_9_cast_fu_328_p1, "tmp_9_cast_fu_328_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_359_p1, "tmp_10_cast_fu_359_p1");
    sc_trace(mVcdFile, a_0_Addr_A_orig, "a_0_Addr_A_orig");
    sc_trace(mVcdFile, b_0_Addr_A_orig, "b_0_Addr_A_orig");
    sc_trace(mVcdFile, a_1_Addr_A_orig, "a_1_Addr_A_orig");
    sc_trace(mVcdFile, b_1_Addr_A_orig, "b_1_Addr_A_orig");
    sc_trace(mVcdFile, c_Addr_A_orig, "c_Addr_A_orig");
    sc_trace(mVcdFile, grp_fu_211_p0, "grp_fu_211_p0");
    sc_trace(mVcdFile, grp_fu_211_p1, "grp_fu_211_p1");
    sc_trace(mVcdFile, grp_fu_212_p0, "grp_fu_212_p0");
    sc_trace(mVcdFile, grp_fu_212_p1, "grp_fu_212_p1");
    sc_trace(mVcdFile, exitcond_fu_262_p2, "exitcond_fu_262_p2");
    sc_trace(mVcdFile, i_1_fu_256_p2, "i_1_fu_256_p2");
    sc_trace(mVcdFile, tmp_4_fu_304_p2, "tmp_4_fu_304_p2");
    sc_trace(mVcdFile, tmp_2_cast_fu_319_p1, "tmp_2_cast_fu_319_p1");
    sc_trace(mVcdFile, tmp_9_fu_322_p2, "tmp_9_fu_322_p2");
    sc_trace(mVcdFile, tmp_7_fu_339_p3, "tmp_7_fu_339_p3");
    sc_trace(mVcdFile, tmp_2_cast3_fu_350_p1, "tmp_2_cast3_fu_350_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_346_p1, "tmp_8_cast_fu_346_p1");
    sc_trace(mVcdFile, tmp_s_fu_353_p2, "tmp_s_fu_353_p2");
    sc_trace(mVcdFile, tmp2_fu_368_p2, "tmp2_fu_368_p2");
    sc_trace(mVcdFile, tmp1_fu_364_p2, "tmp1_fu_364_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("matmul_hw.hdltvin.dat");
    mHdltvoutHandle.open("matmul_hw.hdltvout.dat");
}

matmul_hw::~matmul_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matmul_hw_mul_32scud_U1;
    delete matmul_hw_mul_32scud_U2;
}

void matmul_hw::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void matmul_hw::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !esl_seteq<1,1,1>(exitcond_flatten_fu_244_p2.read(), ap_const_lv1_0))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                     !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
                     !esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter4 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_reg_189 = tmp_mid2_v_reg_395.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_189 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        indvar_flatten_reg_178 = indvar_flatten_next_reg_383.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        indvar_flatten_reg_178 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        j_reg_200 = j_1_reg_466.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        j_reg_200 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        a_0_load_1_reg_471 = a_0_Dout_A.read();
        a_1_load_1_reg_481 = a_1_Dout_A.read();
        b_0_load_1_reg_476 = b_0_Dout_A.read();
        b_1_load_1_reg_486 = b_1_Dout_A.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0))) {
        a_0_load_reg_446 = a_0_Dout_A.read();
        a_1_load_reg_456 = a_1_Dout_A.read();
        b_0_load_reg_451 = b_0_Dout_A.read();
        b_1_load_reg_461 = b_1_Dout_A.read();
        j_1_reg_466 = j_1_fu_334_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_379 = exitcond_flatten_reg_379.read();
        ap_pipeline_reg_pp0_iter1_j_mid2_reg_388 = j_mid2_reg_388.read();
        ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_395 = tmp_mid2_v_reg_395.read();
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_379 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_379.read();
        ap_pipeline_reg_pp0_iter2_j_mid2_reg_388 = ap_pipeline_reg_pp0_iter1_j_mid2_reg_388.read();
        ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_395 = ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_395.read();
        ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_379.read();
        ap_pipeline_reg_pp0_iter3_j_mid2_reg_388 = ap_pipeline_reg_pp0_iter2_j_mid2_reg_388.read();
        ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_395 = ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_395.read();
        ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379 = ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379.read();
        ap_pipeline_reg_pp0_iter4_j_mid2_reg_388 = ap_pipeline_reg_pp0_iter3_j_mid2_reg_388.read();
        ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395 = ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_395.read();
        exitcond_flatten_reg_379 = exitcond_flatten_fu_244_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        indvar_flatten_next_reg_383 = indvar_flatten_next_fu_250_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(exitcond_flatten_fu_244_p2.read(), ap_const_lv1_0))) {
        j_mid2_reg_388 = j_mid2_fu_268_p3.read();
        tmp_reg_401 = tmp_fu_284_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()))) {
        tmp_6_1_reg_501 = grp_fu_211_p2.read();
        tmp_6_3_reg_506 = grp_fu_212_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && esl_seteq<1,1,1>(ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379.read(), ap_const_lv1_0))) {
        tmp_6_2_reg_496 = grp_fu_212_p2.read();
        tmp_6_reg_491 = grp_fu_211_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(exitcond_flatten_fu_244_p2.read(), ap_const_lv1_0))) {
        tmp_mid2_v_reg_395 = tmp_mid2_v_fu_276_p3.read();
    }
}

void matmul_hw::thread_a_0_Addr_A() {
    a_0_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): a_0_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void matmul_hw::thread_a_0_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            a_0_Addr_A_orig =  (sc_lv<32>) (tmp_5_fu_309_p3.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            a_0_Addr_A_orig =  (sc_lv<32>) (tmp_3_fu_292_p1.read());
        } else {
            a_0_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        a_0_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matmul_hw::thread_a_0_Clk_A() {
    a_0_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void matmul_hw::thread_a_0_Din_A() {
    a_0_Din_A = ap_const_lv32_0;
}

void matmul_hw::thread_a_0_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())))) {
        a_0_EN_A = ap_const_logic_1;
    } else {
        a_0_EN_A = ap_const_logic_0;
    }
}

void matmul_hw::thread_a_0_Rst_A() {
    a_0_Rst_A = ap_rst.read();
}

void matmul_hw::thread_a_0_WEN_A() {
    a_0_WEN_A = ap_const_lv4_0;
}

void matmul_hw::thread_a_1_Addr_A() {
    a_1_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): a_1_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void matmul_hw::thread_a_1_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            a_1_Addr_A_orig =  (sc_lv<32>) (tmp_5_fu_309_p3.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            a_1_Addr_A_orig =  (sc_lv<32>) (tmp_3_fu_292_p1.read());
        } else {
            a_1_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        a_1_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matmul_hw::thread_a_1_Clk_A() {
    a_1_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void matmul_hw::thread_a_1_Din_A() {
    a_1_Din_A = ap_const_lv32_0;
}

void matmul_hw::thread_a_1_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())))) {
        a_1_EN_A = ap_const_logic_1;
    } else {
        a_1_EN_A = ap_const_logic_0;
    }
}

void matmul_hw::thread_a_1_Rst_A() {
    a_1_Rst_A = ap_rst.read();
}

void matmul_hw::thread_a_1_WEN_A() {
    a_1_WEN_A = ap_const_lv4_0;
}

void matmul_hw::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(1, 1);
}

void matmul_hw::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read().range(2, 2);
}

void matmul_hw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void matmul_hw::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(3, 3);
}

void matmul_hw::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matmul_hw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matmul_hw::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matmul_hw::thread_b_0_Addr_A() {
    b_0_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): b_0_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void matmul_hw::thread_b_0_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            b_0_Addr_A_orig =  (sc_lv<32>) (tmp_9_cast_fu_328_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            b_0_Addr_A_orig =  (sc_lv<32>) (tmp_2_fu_298_p1.read());
        } else {
            b_0_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        b_0_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matmul_hw::thread_b_0_Clk_A() {
    b_0_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void matmul_hw::thread_b_0_Din_A() {
    b_0_Din_A = ap_const_lv32_0;
}

void matmul_hw::thread_b_0_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())))) {
        b_0_EN_A = ap_const_logic_1;
    } else {
        b_0_EN_A = ap_const_logic_0;
    }
}

void matmul_hw::thread_b_0_Rst_A() {
    b_0_Rst_A = ap_rst.read();
}

void matmul_hw::thread_b_0_WEN_A() {
    b_0_WEN_A = ap_const_lv4_0;
}

void matmul_hw::thread_b_1_Addr_A() {
    b_1_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): b_1_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void matmul_hw::thread_b_1_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            b_1_Addr_A_orig =  (sc_lv<32>) (tmp_9_cast_fu_328_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            b_1_Addr_A_orig =  (sc_lv<32>) (tmp_2_fu_298_p1.read());
        } else {
            b_1_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        b_1_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matmul_hw::thread_b_1_Clk_A() {
    b_1_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void matmul_hw::thread_b_1_Din_A() {
    b_1_Din_A = ap_const_lv32_0;
}

void matmul_hw::thread_b_1_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())))) {
        b_1_EN_A = ap_const_logic_1;
    } else {
        b_1_EN_A = ap_const_logic_0;
    }
}

void matmul_hw::thread_b_1_Rst_A() {
    b_1_Rst_A = ap_rst.read();
}

void matmul_hw::thread_b_1_WEN_A() {
    b_1_WEN_A = ap_const_lv4_0;
}

void matmul_hw::thread_c_Addr_A() {
    c_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): c_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void matmul_hw::thread_c_Addr_A_orig() {
    c_Addr_A_orig =  (sc_lv<32>) (tmp_10_cast_fu_359_p1.read());
}

void matmul_hw::thread_c_Clk_A() {
    c_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void matmul_hw::thread_c_Din_A() {
    c_Din_A = (!tmp2_fu_368_p2.read().is_01() || !tmp1_fu_364_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp2_fu_368_p2.read()) + sc_biguint<32>(tmp1_fu_364_p2.read()));
}

void matmul_hw::thread_c_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()))) {
        c_EN_A = ap_const_logic_1;
    } else {
        c_EN_A = ap_const_logic_0;
    }
}

void matmul_hw::thread_c_Rst_A() {
    c_Rst_A = ap_rst.read();
}

void matmul_hw::thread_c_WEN_A() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379.read(), ap_const_lv1_0)))) {
        c_WEN_A = ap_const_lv4_F;
    } else {
        c_WEN_A = ap_const_lv4_0;
    }
}

void matmul_hw::thread_exitcond_flatten_fu_244_p2() {
    exitcond_flatten_fu_244_p2 = (!indvar_flatten_phi_fu_182_p4.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_phi_fu_182_p4.read() == ap_const_lv5_10);
}

void matmul_hw::thread_exitcond_fu_262_p2() {
    exitcond_fu_262_p2 = (!j_phi_fu_204_p4.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_phi_fu_204_p4.read() == ap_const_lv3_4);
}

void matmul_hw::thread_grp_fu_211_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            grp_fu_211_p0 = a_0_load_1_reg_471.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            grp_fu_211_p0 = a_0_load_reg_446.read();
        } else {
            grp_fu_211_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        grp_fu_211_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matmul_hw::thread_grp_fu_211_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            grp_fu_211_p1 = b_0_load_1_reg_476.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            grp_fu_211_p1 = b_0_load_reg_451.read();
        } else {
            grp_fu_211_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        grp_fu_211_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matmul_hw::thread_grp_fu_212_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            grp_fu_212_p0 = a_1_load_1_reg_481.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            grp_fu_212_p0 = a_1_load_reg_456.read();
        } else {
            grp_fu_212_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        grp_fu_212_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matmul_hw::thread_grp_fu_212_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            grp_fu_212_p1 = b_1_load_1_reg_486.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            grp_fu_212_p1 = b_1_load_reg_461.read();
        } else {
            grp_fu_212_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        grp_fu_212_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void matmul_hw::thread_i_1_fu_256_p2() {
    i_1_fu_256_p2 = (!i_phi_fu_193_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_phi_fu_193_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void matmul_hw::thread_i_phi_fu_193_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_phi_fu_193_p4 = tmp_mid2_v_reg_395.read();
    } else {
        i_phi_fu_193_p4 = i_reg_189.read();
    }
}

void matmul_hw::thread_indvar_flatten_next_fu_250_p2() {
    indvar_flatten_next_fu_250_p2 = (!indvar_flatten_phi_fu_182_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(indvar_flatten_phi_fu_182_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void matmul_hw::thread_indvar_flatten_phi_fu_182_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        indvar_flatten_phi_fu_182_p4 = indvar_flatten_next_reg_383.read();
    } else {
        indvar_flatten_phi_fu_182_p4 = indvar_flatten_reg_178.read();
    }
}

void matmul_hw::thread_j_1_fu_334_p2() {
    j_1_fu_334_p2 = (!j_mid2_reg_388.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_mid2_reg_388.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void matmul_hw::thread_j_mid2_fu_268_p3() {
    j_mid2_fu_268_p3 = (!exitcond_fu_262_p2.read()[0].is_01())? sc_lv<3>(): ((exitcond_fu_262_p2.read()[0].to_bool())? ap_const_lv3_0: j_phi_fu_204_p4.read());
}

void matmul_hw::thread_j_phi_fu_204_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_379.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        j_phi_fu_204_p4 = j_1_reg_466.read();
    } else {
        j_phi_fu_204_p4 = j_reg_200.read();
    }
}

void matmul_hw::thread_tmp1_fu_364_p2() {
    tmp1_fu_364_p2 = (!tmp_6_reg_491.read().is_01() || !tmp_6_1_reg_501.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_reg_491.read()) + sc_biguint<32>(tmp_6_1_reg_501.read()));
}

void matmul_hw::thread_tmp2_fu_368_p2() {
    tmp2_fu_368_p2 = (!tmp_6_2_reg_496.read().is_01() || !tmp_6_3_reg_506.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_2_reg_496.read()) + sc_biguint<32>(tmp_6_3_reg_506.read()));
}

void matmul_hw::thread_tmp_10_cast_fu_359_p1() {
    tmp_10_cast_fu_359_p1 = esl_zext<64,6>(tmp_s_fu_353_p2.read());
}

void matmul_hw::thread_tmp_2_cast3_fu_350_p1() {
    tmp_2_cast3_fu_350_p1 = esl_zext<6,3>(ap_pipeline_reg_pp0_iter4_j_mid2_reg_388.read());
}

void matmul_hw::thread_tmp_2_cast_fu_319_p1() {
    tmp_2_cast_fu_319_p1 = esl_zext<4,3>(j_mid2_reg_388.read());
}

void matmul_hw::thread_tmp_2_fu_298_p1() {
    tmp_2_fu_298_p1 = esl_zext<64,3>(j_mid2_fu_268_p3.read());
}

void matmul_hw::thread_tmp_3_fu_292_p1() {
    tmp_3_fu_292_p1 = esl_zext<64,4>(tmp_fu_284_p3.read());
}

void matmul_hw::thread_tmp_4_fu_304_p2() {
    tmp_4_fu_304_p2 = (tmp_reg_401.read() | ap_const_lv4_1);
}

void matmul_hw::thread_tmp_5_fu_309_p3() {
    tmp_5_fu_309_p3 = esl_concat<60,4>(ap_const_lv60_0, tmp_4_fu_304_p2.read());
}

void matmul_hw::thread_tmp_7_fu_339_p3() {
    tmp_7_fu_339_p3 = esl_concat<3,2>(ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395.read(), ap_const_lv2_0);
}

void matmul_hw::thread_tmp_8_cast_fu_346_p1() {
    tmp_8_cast_fu_346_p1 = esl_zext<6,5>(tmp_7_fu_339_p3.read());
}

void matmul_hw::thread_tmp_9_cast_fu_328_p1() {
    tmp_9_cast_fu_328_p1 = esl_zext<64,4>(tmp_9_fu_322_p2.read());
}

void matmul_hw::thread_tmp_9_fu_322_p2() {
    tmp_9_fu_322_p2 = (!tmp_2_cast_fu_319_p1.read().is_01() || !ap_const_lv4_4.is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_2_cast_fu_319_p1.read()) + sc_biguint<4>(ap_const_lv4_4));
}

void matmul_hw::thread_tmp_fu_284_p3() {
    tmp_fu_284_p3 = esl_concat<3,1>(tmp_mid2_v_fu_276_p3.read(), ap_const_lv1_0);
}

void matmul_hw::thread_tmp_mid2_v_fu_276_p3() {
    tmp_mid2_v_fu_276_p3 = (!exitcond_fu_262_p2.read()[0].is_01())? sc_lv<3>(): ((exitcond_fu_262_p2.read()[0].to_bool())? i_1_fu_256_p2.read(): i_phi_fu_193_p4.read());
}

void matmul_hw::thread_tmp_s_fu_353_p2() {
    tmp_s_fu_353_p2 = (!tmp_2_cast3_fu_350_p1.read().is_01() || !tmp_8_cast_fu_346_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_2_cast3_fu_350_p1.read()) + sc_biguint<6>(tmp_8_cast_fu_346_p1.read()));
}

void matmul_hw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(exitcond_flatten_fu_244_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void matmul_hw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_0_Addr_A\" :  \"" << a_0_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_0_EN_A\" :  \"" << a_0_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_0_WEN_A\" :  \"" << a_0_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_0_Din_A\" :  \"" << a_0_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_0_Dout_A\" :  \"" << a_0_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_0_Clk_A\" :  \"" << a_0_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_0_Rst_A\" :  \"" << a_0_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_1_Addr_A\" :  \"" << a_1_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_1_EN_A\" :  \"" << a_1_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_1_WEN_A\" :  \"" << a_1_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_1_Din_A\" :  \"" << a_1_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_1_Dout_A\" :  \"" << a_1_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_1_Clk_A\" :  \"" << a_1_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_1_Rst_A\" :  \"" << a_1_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_0_Addr_A\" :  \"" << b_0_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_0_EN_A\" :  \"" << b_0_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_0_WEN_A\" :  \"" << b_0_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_0_Din_A\" :  \"" << b_0_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_0_Dout_A\" :  \"" << b_0_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_0_Clk_A\" :  \"" << b_0_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_0_Rst_A\" :  \"" << b_0_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_1_Addr_A\" :  \"" << b_1_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_1_EN_A\" :  \"" << b_1_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_1_WEN_A\" :  \"" << b_1_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_1_Din_A\" :  \"" << b_1_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_1_Dout_A\" :  \"" << b_1_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_1_Clk_A\" :  \"" << b_1_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_1_Rst_A\" :  \"" << b_1_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_Addr_A\" :  \"" << c_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_EN_A\" :  \"" << c_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_WEN_A\" :  \"" << c_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_Din_A\" :  \"" << c_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_Dout_A\" :  \"" << c_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_Clk_A\" :  \"" << c_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_Rst_A\" :  \"" << c_Rst_A.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

