// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matmul_hw_HH_
#define _matmul_hw_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matmul_hw_mul_32scud.h"

namespace ap_rtl {

struct matmul_hw : public sc_module {
    // Port declarations 41
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > a_0_Addr_A;
    sc_out< sc_logic > a_0_EN_A;
    sc_out< sc_lv<4> > a_0_WEN_A;
    sc_out< sc_lv<32> > a_0_Din_A;
    sc_in< sc_lv<32> > a_0_Dout_A;
    sc_out< sc_logic > a_0_Clk_A;
    sc_out< sc_logic > a_0_Rst_A;
    sc_out< sc_lv<32> > a_1_Addr_A;
    sc_out< sc_logic > a_1_EN_A;
    sc_out< sc_lv<4> > a_1_WEN_A;
    sc_out< sc_lv<32> > a_1_Din_A;
    sc_in< sc_lv<32> > a_1_Dout_A;
    sc_out< sc_logic > a_1_Clk_A;
    sc_out< sc_logic > a_1_Rst_A;
    sc_out< sc_lv<32> > b_0_Addr_A;
    sc_out< sc_logic > b_0_EN_A;
    sc_out< sc_lv<4> > b_0_WEN_A;
    sc_out< sc_lv<32> > b_0_Din_A;
    sc_in< sc_lv<32> > b_0_Dout_A;
    sc_out< sc_logic > b_0_Clk_A;
    sc_out< sc_logic > b_0_Rst_A;
    sc_out< sc_lv<32> > b_1_Addr_A;
    sc_out< sc_logic > b_1_EN_A;
    sc_out< sc_lv<4> > b_1_WEN_A;
    sc_out< sc_lv<32> > b_1_Din_A;
    sc_in< sc_lv<32> > b_1_Dout_A;
    sc_out< sc_logic > b_1_Clk_A;
    sc_out< sc_logic > b_1_Rst_A;
    sc_out< sc_lv<32> > c_Addr_A;
    sc_out< sc_logic > c_EN_A;
    sc_out< sc_lv<4> > c_WEN_A;
    sc_out< sc_lv<32> > c_Din_A;
    sc_in< sc_lv<32> > c_Dout_A;
    sc_out< sc_logic > c_Clk_A;
    sc_out< sc_logic > c_Rst_A;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    matmul_hw(sc_module_name name);
    SC_HAS_PROCESS(matmul_hw);

    ~matmul_hw();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matmul_hw_mul_32scud<1,6,32,32,32>* matmul_hw_mul_32scud_U1;
    matmul_hw_mul_32scud<1,6,32,32,32>* matmul_hw_mul_32scud_U2;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > indvar_flatten_reg_178;
    sc_signal< sc_lv<3> > i_reg_189;
    sc_signal< sc_lv<3> > j_reg_200;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_244_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_379;
    sc_signal< sc_lv<5> > indvar_flatten_next_fu_250_p2;
    sc_signal< sc_lv<5> > indvar_flatten_next_reg_383;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<3> > j_mid2_fu_268_p3;
    sc_signal< sc_lv<3> > j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_pipeline_reg_pp0_iter1_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_pipeline_reg_pp0_iter2_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_pipeline_reg_pp0_iter3_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_pipeline_reg_pp0_iter4_j_mid2_reg_388;
    sc_signal< sc_lv<3> > tmp_mid2_v_fu_276_p3;
    sc_signal< sc_lv<3> > tmp_mid2_v_reg_395;
    sc_signal< sc_lv<3> > ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_395;
    sc_signal< sc_lv<3> > ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_395;
    sc_signal< sc_lv<3> > ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_395;
    sc_signal< sc_lv<3> > ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_395;
    sc_signal< sc_lv<4> > tmp_fu_284_p3;
    sc_signal< sc_lv<4> > tmp_reg_401;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_lv<32> > a_0_load_reg_446;
    sc_signal< sc_lv<32> > b_0_load_reg_451;
    sc_signal< sc_lv<32> > a_1_load_reg_456;
    sc_signal< sc_lv<32> > b_1_load_reg_461;
    sc_signal< sc_lv<3> > j_1_fu_334_p2;
    sc_signal< sc_lv<3> > j_1_reg_466;
    sc_signal< sc_lv<32> > a_0_load_1_reg_471;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > b_0_load_1_reg_476;
    sc_signal< sc_lv<32> > a_1_load_1_reg_481;
    sc_signal< sc_lv<32> > b_1_load_1_reg_486;
    sc_signal< sc_lv<32> > grp_fu_211_p2;
    sc_signal< sc_lv<32> > tmp_6_reg_491;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<32> > grp_fu_212_p2;
    sc_signal< sc_lv<32> > tmp_6_2_reg_496;
    sc_signal< sc_lv<32> > tmp_6_1_reg_501;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<32> > tmp_6_3_reg_506;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<5> > indvar_flatten_phi_fu_182_p4;
    sc_signal< sc_lv<3> > i_phi_fu_193_p4;
    sc_signal< sc_lv<3> > j_phi_fu_204_p4;
    sc_signal< sc_lv<64> > tmp_3_fu_292_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_298_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_309_p3;
    sc_signal< sc_lv<64> > tmp_9_cast_fu_328_p1;
    sc_signal< sc_lv<64> > tmp_10_cast_fu_359_p1;
    sc_signal< sc_lv<32> > a_0_Addr_A_orig;
    sc_signal< sc_lv<32> > b_0_Addr_A_orig;
    sc_signal< sc_lv<32> > a_1_Addr_A_orig;
    sc_signal< sc_lv<32> > b_1_Addr_A_orig;
    sc_signal< sc_lv<32> > c_Addr_A_orig;
    sc_signal< sc_lv<32> > grp_fu_211_p0;
    sc_signal< sc_lv<32> > grp_fu_211_p1;
    sc_signal< sc_lv<32> > grp_fu_212_p0;
    sc_signal< sc_lv<32> > grp_fu_212_p1;
    sc_signal< sc_lv<1> > exitcond_fu_262_p2;
    sc_signal< sc_lv<3> > i_1_fu_256_p2;
    sc_signal< sc_lv<4> > tmp_4_fu_304_p2;
    sc_signal< sc_lv<4> > tmp_2_cast_fu_319_p1;
    sc_signal< sc_lv<4> > tmp_9_fu_322_p2;
    sc_signal< sc_lv<5> > tmp_7_fu_339_p3;
    sc_signal< sc_lv<6> > tmp_2_cast3_fu_350_p1;
    sc_signal< sc_lv<6> > tmp_8_cast_fu_346_p1;
    sc_signal< sc_lv<6> > tmp_s_fu_353_p2;
    sc_signal< sc_lv<32> > tmp2_fu_368_p2;
    sc_signal< sc_lv<32> > tmp1_fu_364_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state12;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state12;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<60> ap_const_lv60_0;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_a_0_Addr_A();
    void thread_a_0_Addr_A_orig();
    void thread_a_0_Clk_A();
    void thread_a_0_Din_A();
    void thread_a_0_EN_A();
    void thread_a_0_Rst_A();
    void thread_a_0_WEN_A();
    void thread_a_1_Addr_A();
    void thread_a_1_Addr_A_orig();
    void thread_a_1_Clk_A();
    void thread_a_1_Din_A();
    void thread_a_1_EN_A();
    void thread_a_1_Rst_A();
    void thread_a_1_WEN_A();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_0_Addr_A();
    void thread_b_0_Addr_A_orig();
    void thread_b_0_Clk_A();
    void thread_b_0_Din_A();
    void thread_b_0_EN_A();
    void thread_b_0_Rst_A();
    void thread_b_0_WEN_A();
    void thread_b_1_Addr_A();
    void thread_b_1_Addr_A_orig();
    void thread_b_1_Clk_A();
    void thread_b_1_Din_A();
    void thread_b_1_EN_A();
    void thread_b_1_Rst_A();
    void thread_b_1_WEN_A();
    void thread_c_Addr_A();
    void thread_c_Addr_A_orig();
    void thread_c_Clk_A();
    void thread_c_Din_A();
    void thread_c_EN_A();
    void thread_c_Rst_A();
    void thread_c_WEN_A();
    void thread_exitcond_flatten_fu_244_p2();
    void thread_exitcond_fu_262_p2();
    void thread_grp_fu_211_p0();
    void thread_grp_fu_211_p1();
    void thread_grp_fu_212_p0();
    void thread_grp_fu_212_p1();
    void thread_i_1_fu_256_p2();
    void thread_i_phi_fu_193_p4();
    void thread_indvar_flatten_next_fu_250_p2();
    void thread_indvar_flatten_phi_fu_182_p4();
    void thread_j_1_fu_334_p2();
    void thread_j_mid2_fu_268_p3();
    void thread_j_phi_fu_204_p4();
    void thread_tmp1_fu_364_p2();
    void thread_tmp2_fu_368_p2();
    void thread_tmp_10_cast_fu_359_p1();
    void thread_tmp_2_cast3_fu_350_p1();
    void thread_tmp_2_cast_fu_319_p1();
    void thread_tmp_2_fu_298_p1();
    void thread_tmp_3_fu_292_p1();
    void thread_tmp_4_fu_304_p2();
    void thread_tmp_5_fu_309_p3();
    void thread_tmp_7_fu_339_p3();
    void thread_tmp_8_cast_fu_346_p1();
    void thread_tmp_9_cast_fu_328_p1();
    void thread_tmp_9_fu_322_p2();
    void thread_tmp_fu_284_p3();
    void thread_tmp_mid2_v_fu_276_p3();
    void thread_tmp_s_fu_353_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
