// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="minver_hwa,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.751000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=2563,HLS_SYN_LUT=3372}" *)

module minver_hwa (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_Addr_A,
        a_0_EN_A,
        a_0_WEN_A,
        a_0_Din_A,
        a_0_Dout_A,
        a_0_Clk_A,
        a_0_Rst_A,
        a_1_Addr_A,
        a_1_EN_A,
        a_1_WEN_A,
        a_1_Din_A,
        a_1_Dout_A,
        a_1_Clk_A,
        a_1_Rst_A,
        a_2_Addr_A,
        a_2_EN_A,
        a_2_WEN_A,
        a_2_Din_A,
        a_2_Dout_A,
        a_2_Clk_A,
        a_2_Rst_A,
        a_3_Addr_A,
        a_3_EN_A,
        a_3_WEN_A,
        a_3_Din_A,
        a_3_Dout_A,
        a_3_Clk_A,
        a_3_Rst_A,
        ap_return
);

parameter    ap_ST_fsm_state1 = 97'b1;
parameter    ap_ST_fsm_state2 = 97'b10;
parameter    ap_ST_fsm_state3 = 97'b100;
parameter    ap_ST_fsm_pp0_stage0 = 97'b1000;
parameter    ap_ST_fsm_state10 = 97'b10000;
parameter    ap_ST_fsm_state11 = 97'b100000;
parameter    ap_ST_fsm_state12 = 97'b1000000;
parameter    ap_ST_fsm_state13 = 97'b10000000;
parameter    ap_ST_fsm_state14 = 97'b100000000;
parameter    ap_ST_fsm_state15 = 97'b1000000000;
parameter    ap_ST_fsm_state16 = 97'b10000000000;
parameter    ap_ST_fsm_pp1_stage0 = 97'b100000000000;
parameter    ap_ST_fsm_pp1_stage1 = 97'b1000000000000;
parameter    ap_ST_fsm_pp1_stage2 = 97'b10000000000000;
parameter    ap_ST_fsm_pp1_stage3 = 97'b100000000000000;
parameter    ap_ST_fsm_pp1_stage4 = 97'b1000000000000000;
parameter    ap_ST_fsm_pp1_stage5 = 97'b10000000000000000;
parameter    ap_ST_fsm_state24 = 97'b100000000000000000;
parameter    ap_ST_fsm_pp2_stage0 = 97'b1000000000000000000;
parameter    ap_ST_fsm_pp2_stage1 = 97'b10000000000000000000;
parameter    ap_ST_fsm_pp2_stage2 = 97'b100000000000000000000;
parameter    ap_ST_fsm_pp2_stage3 = 97'b1000000000000000000000;
parameter    ap_ST_fsm_pp2_stage4 = 97'b10000000000000000000000;
parameter    ap_ST_fsm_pp2_stage5 = 97'b100000000000000000000000;
parameter    ap_ST_fsm_pp2_stage6 = 97'b1000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage7 = 97'b10000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage8 = 97'b100000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage9 = 97'b1000000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage10 = 97'b10000000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage11 = 97'b100000000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage12 = 97'b1000000000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage13 = 97'b10000000000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage14 = 97'b100000000000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage15 = 97'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_pp2_stage16 = 97'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 97'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 97'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 97'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 97'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 97'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 97'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 97'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 97'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 97'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 97'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 97'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 97'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 97'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 97'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 97'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 97'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 97'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 97'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 97'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 97'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 97'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 97'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 97'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 97'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 97'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 97'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 97'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 97'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 97'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 97'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 97'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 97'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 97'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 97'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state78 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state79 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state80 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state81 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state82 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state83 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state84 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state85 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state86 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state87 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state88 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state89 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state90 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state91 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state92 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state93 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state94 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state95 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state96 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state97 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp3_stage0 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp3_stage1 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp3_stage2 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp3_stage3 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp3_stage4 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp3_stage5 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state105 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_57 = 32'b1010111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_5C = 32'b1011100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_5E = 32'b1011110;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv32_55 = 32'b1010101;
parameter    ap_const_lv32_58 = 32'b1011000;
parameter    ap_const_lv32_59 = 32'b1011001;
parameter    ap_const_lv32_5A = 32'b1011010;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_5F = 32'b1011111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_54 = 32'b1010100;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_5B = 32'b1011011;
parameter    ap_const_lv32_5D = 32'b1011101;
parameter    ap_const_lv32_56 = 32'b1010110;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv30_2 = 30'b10;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv30_1 = 30'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv30_0 = 30'b000000000000000000000000000000;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv64_3EB0C6F7A0B5ED8D = 64'b11111010110000110001101111011110100000101101011110110110001101;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_80000000 = 32'b10000000000000000000000000000000;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv11_7FF = 11'b11111111111;
parameter    ap_const_lv52_0 = 52'b0000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv5_5 = 5'b101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_0_Addr_A;
output   a_0_EN_A;
output  [3:0] a_0_WEN_A;
output  [31:0] a_0_Din_A;
input  [31:0] a_0_Dout_A;
output   a_0_Clk_A;
output   a_0_Rst_A;
output  [31:0] a_1_Addr_A;
output   a_1_EN_A;
output  [3:0] a_1_WEN_A;
output  [31:0] a_1_Din_A;
input  [31:0] a_1_Dout_A;
output   a_1_Clk_A;
output   a_1_Rst_A;
output  [31:0] a_2_Addr_A;
output   a_2_EN_A;
output  [3:0] a_2_WEN_A;
output  [31:0] a_2_Din_A;
input  [31:0] a_2_Dout_A;
output   a_2_Clk_A;
output   a_2_Rst_A;
output  [31:0] a_3_Addr_A;
output   a_3_EN_A;
output  [3:0] a_3_WEN_A;
output  [31:0] a_3_Din_A;
input  [31:0] a_3_Dout_A;
output   a_3_Clk_A;
output   a_3_Rst_A;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] a_0_Addr_A;
reg a_0_EN_A;
reg[3:0] a_0_WEN_A;
reg[31:0] a_0_Din_A;
reg[31:0] a_1_Addr_A;
reg a_1_EN_A;
reg[3:0] a_1_WEN_A;
reg[31:0] a_1_Din_A;
reg[31:0] a_2_Addr_A;
reg a_2_EN_A;
reg[3:0] a_2_WEN_A;
reg[31:0] a_2_Din_A;
reg[31:0] a_3_Addr_A;
reg a_3_EN_A;
reg[3:0] a_3_WEN_A;
reg[31:0] a_3_Din_A;

(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [31:0] wmax_reg_448;
reg   [31:0] r_1_reg_460;
reg   [31:0] ap_pipeline_reg_pp0_iter1_r_1_reg_460;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [31:0] ap_pipeline_reg_pp0_iter2_r_1_reg_460;
reg   [31:0] ap_pipeline_reg_pp0_iter3_r_1_reg_460;
reg   [31:0] ap_pipeline_reg_pp0_iter4_r_1_reg_460;
reg   [4:0] j_reg_470;
reg   [4:0] i_2_reg_481;
reg   [4:0] j_2_reg_528;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_ap_return;
reg   [31:0] reg_603;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond6_reg_1427;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427;
wire   [0:0] ap_CS_fsm_state11;
wire   [4:0] work_q0;
reg   [4:0] reg_609;
wire   [0:0] ap_CS_fsm_state15;
wire   [4:0] work_q1;
wire   [0:0] ap_CS_fsm_state95;
wire   [2:0] grp_fu_593_p4;
reg   [2:0] reg_616;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state24;
reg   [31:0] reg_620;
wire   [0:0] ap_CS_fsm_pp1_stage2;
reg    ap_enable_reg_pp1_iter0;
reg   [0:0] exitcond5_reg_1521;
wire   [0:0] ap_CS_fsm_pp2_stage2;
reg    ap_enable_reg_pp2_iter0;
reg   [0:0] exitcond4_reg_1577;
wire   [0:0] ap_CS_fsm_state46;
wire   [0:0] ap_CS_fsm_pp3_stage2;
reg    ap_enable_reg_pp3_iter0;
reg   [0:0] exitcond_reg_1833;
reg   [31:0] reg_631;
wire   [0:0] ap_CS_fsm_pp1_stage4;
wire   [0:0] ap_CS_fsm_state50;
wire   [0:0] ap_CS_fsm_pp3_stage4;
wire   [4:0] i_1_fu_646_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_2_fu_662_p3;
reg   [0:0] tmp_2_reg_1400;
wire   [0:0] ap_CS_fsm_state3;
wire   [4:0] k_fu_670_p2;
reg   [4:0] k_reg_1404;
wire   [31:0] i_5_cast_fu_676_p1;
reg   [31:0] i_5_cast_reg_1409;
wire   [63:0] tmp_3_fu_680_p1;
reg   [63:0] tmp_3_reg_1415;
wire   [6:0] tmp_3_cast_fu_684_p1;
reg   [6:0] tmp_3_cast_reg_1420;
wire   [0:0] exitcond6_fu_688_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond6_reg_1427;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond6_reg_1427;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond6_reg_1427;
wire   [31:0] i_6_fu_694_p2;
reg   [31:0] i_6_reg_1431;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] w_4_fu_768_p3;
reg   [31:0] w_4_reg_1436;
reg   [31:0] ap_pipeline_reg_pp0_iter4_w_4_reg_1436;
wire   [0:0] tmp_46_fu_853_p2;
reg   [0:0] tmp_46_reg_1443;
wire   [31:0] wmax_1_fu_859_p3;
reg    ap_enable_reg_pp0_iter5;
reg   [31:0] r_load_reg_1454;
wire   [0:0] ap_CS_fsm_state10;
reg   [29:0] arrayNo_cast_reg_1460;
wire   [1:0] tmp_9_fu_888_p1;
reg   [1:0] tmp_9_reg_1465;
wire   [31:0] api_fu_945_p3;
reg   [31:0] api_reg_1471;
wire   [0:0] ap_CS_fsm_state12;
wire   [63:0] tmp_5_fu_572_p1;
reg   [63:0] tmp_5_reg_1476;
wire   [0:0] ap_CS_fsm_state13;
wire   [6:0] tmp_29_cast_fu_964_p1;
reg   [6:0] tmp_29_cast_reg_1482;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] tmp_1_fu_1009_p2;
wire   [0:0] tmp_31_fu_1003_p2;
reg   [8:0] work_addr_3_reg_1494;
reg   [8:0] work_addr_4_reg_1500;
wire   [1:0] tmp_54_fu_1013_p1;
reg   [1:0] tmp_54_reg_1506;
wire   [6:0] tmp_52_cast_fu_1025_p1;
reg   [6:0] tmp_52_cast_reg_1511;
wire   [29:0] arrayNo2_cast_cast_fu_1029_p1;
reg   [29:0] arrayNo2_cast_cast_reg_1516;
wire   [0:0] exitcond5_fu_1033_p2;
wire   [0:0] ap_CS_fsm_pp1_stage0;
wire   [4:0] j_3_fu_1039_p2;
reg   [4:0] j_3_reg_1525;
wire   [6:0] tmp_10_cast_fu_1045_p1;
reg   [6:0] tmp_10_cast_reg_1530;
wire   [6:0] tmp_61_fu_1061_p2;
reg   [6:0] tmp_61_reg_1537;
wire   [0:0] ap_CS_fsm_pp1_stage5;
wire   [1:0] tmp_63_fu_1072_p1;
reg   [1:0] tmp_63_reg_1542;
wire   [6:0] tmp_71_cast_fu_1084_p1;
reg   [6:0] tmp_71_cast_reg_1547;
reg   [5:0] a_0_addr_5_reg_1552;
reg   [5:0] a_1_addr_5_reg_1557;
reg   [5:0] a_2_addr_5_reg_1562;
reg   [5:0] a_3_addr_5_reg_1567;
wire   [29:0] arrayNo3_cast_cast1_fu_1101_p1;
reg   [29:0] arrayNo3_cast_cast1_reg_1572;
wire   [0:0] exitcond4_fu_1105_p2;
wire   [0:0] ap_CS_fsm_pp2_stage0;
wire   [4:0] i_8_fu_1111_p2;
reg   [4:0] i_8_reg_1581;
wire   [6:0] tmp_11_cast_fu_1117_p1;
reg   [6:0] tmp_11_cast_reg_1586;
wire   [6:0] tmp_66_fu_1121_p2;
reg   [6:0] tmp_66_reg_1592;
wire   [0:0] ap_CS_fsm_pp2_stage1;
wire   [4:0] i_9_fu_1138_p2;
reg   [4:0] i_9_reg_1600;
wire   [0:0] ap_CS_fsm_state44;
wire   [0:0] tmp_14_fu_1144_p2;
reg   [0:0] tmp_14_reg_1605;
wire   [0:0] exitcond3_fu_1132_p2;
wire   [2:0] arrayNo5_fu_1150_p4;
reg   [2:0] arrayNo5_reg_1609;
wire   [0:0] ap_CS_fsm_state45;
wire   [1:0] tmp_68_fu_1160_p1;
reg   [1:0] tmp_68_reg_1613;
wire   [29:0] arrayNo5_cast_cast1_fu_1165_p1;
reg   [29:0] arrayNo5_cast_cast1_reg_1619;
wire   [6:0] tmp_77_cast_fu_1177_p1;
reg   [6:0] tmp_77_cast_reg_1624;
wire   [0:0] ap_CS_fsm_state47;
reg   [5:0] a_0_addr_6_reg_1629;
reg   [5:0] a_1_addr_6_reg_1634;
reg   [5:0] a_2_addr_6_reg_1639;
reg   [5:0] a_3_addr_6_reg_1644;
wire   [31:0] w_2_to_int_fu_1194_p1;
reg   [31:0] w_2_to_int_reg_1649;
wire   [0:0] tmp_59_fu_1230_p2;
reg   [0:0] tmp_59_reg_1654;
wire   [4:0] j_5_fu_1242_p2;
reg   [4:0] j_5_reg_1661;
wire   [0:0] ap_CS_fsm_state48;
wire   [0:0] tmp_19_fu_1248_p2;
reg   [0:0] tmp_19_reg_1666;
wire   [0:0] exitcond2_fu_1236_p2;
wire   [31:0] tmp_17_fu_1259_p1;
wire   [6:0] tmp_20_cast_fu_1264_p1;
reg   [6:0] tmp_20_cast_reg_1675;
wire   [0:0] ap_CS_fsm_state49;
wire   [6:0] tmp_72_fu_1269_p2;
reg   [6:0] tmp_72_reg_1681;
wire   [0:0] ap_CS_fsm_state51;
reg   [31:0] tmp_74_reg_1686;
wire   [0:0] ap_CS_fsm_state52;
wire   [31:0] grp_fu_558_p2;
reg   [31:0] tmp_21_reg_1691;
wire   [0:0] ap_CS_fsm_state54;
reg   [5:0] a_0_addr_7_reg_1696;
wire   [0:0] ap_CS_fsm_state59;
reg   [5:0] a_1_addr_7_reg_1701;
reg   [5:0] a_2_addr_7_reg_1706;
reg   [5:0] a_3_addr_7_reg_1711;
wire   [31:0] grp_fu_554_p2;
reg   [31:0] tmp_22_reg_1716;
wire   [31:0] grp_fu_562_p2;
reg   [31:0] tmp_18_reg_1724;
wire   [0:0] ap_CS_fsm_state75;
reg   [31:0] tmp_13_reg_1732;
wire   [0:0] ap_CS_fsm_state91;
wire   [4:0] i_7_fu_1286_p2;
reg   [4:0] i_7_reg_1743;
wire   [0:0] ap_CS_fsm_state93;
wire   [6:0] tmp_cast_fu_1297_p1;
reg   [6:0] tmp_cast_reg_1748;
wire   [0:0] exitcond1_fu_1280_p2;
reg   [8:0] work_addr_1_reg_1754;
reg   [8:0] work_addr_2_reg_1763;
wire   [0:0] tmp_8_fu_1301_p2;
reg   [4:0] work_load_1_reg_1769;
wire   [0:0] ap_CS_fsm_state96;
wire   [6:0] tmp_7_cast14_cast_fu_1312_p1;
reg   [6:0] tmp_7_cast14_cast_reg_1774;
wire   [0:0] ap_CS_fsm_state97;
wire   [2:0] tmp_47_fu_1316_p4;
reg   [2:0] tmp_47_reg_1779;
wire   [29:0] tmp_48_fu_1326_p1;
reg   [29:0] tmp_48_reg_1783;
wire   [1:0] tmp_49_fu_1330_p1;
reg   [1:0] tmp_49_reg_1788;
reg   [5:0] a_0_addr_reg_1793;
reg   [5:0] a_0_addr_1_reg_1798;
reg   [5:0] a_1_addr_reg_1803;
reg   [5:0] a_1_addr_1_reg_1808;
reg   [5:0] a_2_addr_reg_1813;
reg   [5:0] a_2_addr_1_reg_1818;
reg   [5:0] a_3_addr_reg_1823;
reg   [5:0] a_3_addr_1_reg_1828;
wire   [0:0] exitcond_fu_1373_p2;
wire   [0:0] ap_CS_fsm_pp3_stage0;
wire   [4:0] j_4_fu_1379_p2;
reg   [4:0] j_4_reg_1837;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp2_iter1;
wire   [0:0] ap_CS_fsm_pp2_stage16;
reg    ap_enable_reg_pp3_iter1;
wire   [0:0] ap_CS_fsm_pp3_stage5;
reg   [8:0] work_address0;
reg    work_ce0;
reg    work_we0;
reg   [4:0] work_d0;
reg   [8:0] work_address1;
reg    work_ce1;
reg    work_we1;
reg   [4:0] work_d1;
wire    grp_aesl_mux_load_4_4_x_s_fu_539_ap_start;
wire    grp_aesl_mux_load_4_4_x_s_fu_539_ap_done;
wire    grp_aesl_mux_load_4_4_x_s_fu_539_ap_idle;
wire    grp_aesl_mux_load_4_4_x_s_fu_539_ap_ready;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_Addr_A;
wire    grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_EN_A;
wire   [3:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_WEN_A;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_Din_A;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_Addr_A;
wire    grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_EN_A;
wire   [3:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_WEN_A;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_Din_A;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_Addr_A;
wire    grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_EN_A;
wire   [3:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_WEN_A;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_Din_A;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_Addr_A;
wire    grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_EN_A;
wire   [3:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_WEN_A;
wire   [31:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_Din_A;
reg   [29:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_13;
reg   [1:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty_14;
reg   [6:0] grp_aesl_mux_load_4_4_x_s_fu_539_empty;
reg   [4:0] i_reg_424;
wire   [0:0] exitcond7_fu_640_p2;
reg   [4:0] i_5_reg_436;
wire   [0:0] ap_CS_fsm_state92;
reg   [31:0] wmax_phi_fu_452_p4;
reg   [31:0] r_1_phi_fu_463_p4;
reg   [4:0] j_phi_fu_474_p4;
reg   [4:0] i_2_phi_fu_485_p4;
reg   [4:0] i_3_reg_492;
wire   [0:0] ap_CS_fsm_state76;
wire   [0:0] ap_CS_fsm_state43;
reg   [4:0] j_1_reg_504;
wire   [0:0] ap_CS_fsm_state60;
reg   [4:0] i_4_reg_516;
reg   [4:0] j_2_phi_fu_532_p4;
reg    ap_reg_grp_aesl_mux_load_4_4_x_s_fu_539_ap_start;
reg   [96:0] ap_NS_fsm;
wire   [0:0] ap_NS_fsm_state10;
wire   [0:0] ap_NS_fsm_state45;
wire   [0:0] ap_NS_fsm_state49;
wire   [0:0] ap_NS_fsm_state51;
wire   [0:0] ap_CS_fsm_pp1_stage1;
wire   [0:0] ap_CS_fsm_pp1_stage3;
wire   [0:0] ap_CS_fsm_pp3_stage1;
wire   [0:0] ap_CS_fsm_pp3_stage3;
wire   [1:0] tmp_32_fu_700_p1;
wire   [63:0] tmp_fu_652_p1;
wire  signed [63:0] tmp_4_fu_953_p1;
wire   [63:0] tmp_65_cast_fu_1053_p1;
wire   [63:0] tmp_66_cast_fu_1065_p1;
wire   [63:0] tmp_72_cast_fu_1093_p1;
wire   [63:0] tmp_73_cast_fu_1125_p1;
wire   [63:0] tmp_78_cast_fu_1186_p1;
wire   [63:0] tmp_79_cast_fu_1273_p1;
wire   [63:0] tmp_s_fu_1292_p1;
wire   [63:0] tmp_7_fu_1307_p1;
wire   [63:0] tmp_63_cast_fu_1351_p1;
wire   [63:0] tmp_64_cast_fu_1365_p1;
reg   [31:0] r_fu_126;
wire   [31:0] r_2_fu_865_p3;
wire   [0:0] ap_CS_fsm_state94;
reg   [31:0] a_2_Addr_A_orig;
reg   [31:0] a_1_Addr_A_orig;
reg   [31:0] a_0_Addr_A_orig;
reg   [31:0] a_3_Addr_A_orig;
wire   [0:0] ap_CS_fsm_state55;
reg   [31:0] grp_fu_562_p0;
reg   [31:0] grp_fu_575_p0;
wire   [31:0] n_assign_1_to_int_fu_716_p1;
wire   [7:0] tmp_33_fu_720_p4;
wire   [22:0] tmp_34_fu_730_p1;
wire   [0:0] notrhs_fu_740_p2;
wire   [0:0] notlhs_fu_734_p2;
wire   [0:0] tmp_35_fu_746_p2;
wire   [0:0] grp_fu_575_p2;
wire   [31:0] f_neg_i_fu_758_p2;
wire   [0:0] tmp_37_fu_752_p2;
wire   [31:0] f_1_fu_764_p1;
wire   [31:0] w_4_to_int_fu_776_p1;
wire   [31:0] wmax_to_int_fu_793_p1;
wire   [7:0] tmp_38_fu_779_p4;
wire   [22:0] tmp_39_fu_789_p1;
wire   [0:0] notrhs3_fu_817_p2;
wire   [0:0] notlhs3_fu_811_p2;
wire   [7:0] tmp_40_fu_797_p4;
wire   [22:0] tmp_41_fu_807_p1;
wire   [0:0] notrhs4_fu_835_p2;
wire   [0:0] notlhs4_fu_829_p2;
wire   [0:0] tmp_42_fu_823_p2;
wire   [0:0] tmp_43_fu_841_p2;
wire   [0:0] tmp_44_fu_847_p2;
wire   [0:0] tmp_45_fu_580_p2;
wire   [31:0] pivot_to_int_fu_893_p1;
wire   [7:0] tmp_6_fu_897_p4;
wire   [22:0] tmp_11_fu_907_p1;
wire   [0:0] notrhs1_fu_917_p2;
wire   [0:0] notlhs1_fu_911_p2;
wire   [0:0] tmp_15_fu_923_p2;
wire   [31:0] f_neg_i1_fu_935_p2;
wire   [0:0] tmp_23_fu_929_p2;
wire   [31:0] f_fu_941_p1;
wire   [5:0] tmp_10_fu_957_p3;
wire   [63:0] tmp_5_to_int_fu_968_p1;
wire   [10:0] tmp_25_fu_971_p4;
wire   [51:0] tmp_27_fu_981_p1;
wire   [0:0] notrhs2_fu_991_p2;
wire   [0:0] notlhs2_fu_985_p2;
wire   [0:0] tmp_29_fu_997_p2;
wire   [0:0] tmp_30_fu_585_p2;
wire   [5:0] tmp_51_fu_1017_p3;
wire   [6:0] tmp_60_fu_1049_p2;
wire   [5:0] tmp_64_fu_1076_p3;
wire   [6:0] tmp_65_fu_1088_p2;
wire   [5:0] tmp_69_fu_1170_p3;
wire   [6:0] tmp_70_fu_1181_p2;
wire   [7:0] tmp_55_fu_1198_p4;
wire   [22:0] tmp_71_fu_1208_p1;
wire   [0:0] notrhs5_fu_1218_p2;
wire   [0:0] notlhs5_fu_1212_p2;
wire   [0:0] tmp_57_fu_1224_p2;
wire   [31:0] tmp_18_neg_fu_1254_p2;
wire   [5:0] tmp_50_fu_1334_p3;
wire   [6:0] tmp_62_cast13_cast_fu_1342_p1;
wire   [6:0] tmp_52_fu_1346_p2;
wire   [6:0] tmp_53_fu_1359_p2;
reg   [4:0] grp_fu_575_opcode;

// power-on initialization
initial begin
#0 ap_CS_fsm = 97'b1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_reg_grp_aesl_mux_load_4_4_x_s_fu_539_ap_start = 1'b0;
end

minver_hwa_work #(
    .DataWidth( 5 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
work_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(work_address0),
    .ce0(work_ce0),
    .we0(work_we0),
    .d0(work_d0),
    .q0(work_q0),
    .address1(work_address1),
    .ce1(work_ce1),
    .we1(work_we1),
    .d1(work_d1),
    .q1(work_q1)
);

aesl_mux_load_4_4_x_s grp_aesl_mux_load_4_4_x_s_fu_539(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aesl_mux_load_4_4_x_s_fu_539_ap_start),
    .ap_done(grp_aesl_mux_load_4_4_x_s_fu_539_ap_done),
    .ap_idle(grp_aesl_mux_load_4_4_x_s_fu_539_ap_idle),
    .ap_ready(grp_aesl_mux_load_4_4_x_s_fu_539_ap_ready),
    .ap_ce(1'b1),
    .empty_9_Addr_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_Addr_A),
    .empty_9_EN_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_EN_A),
    .empty_9_WEN_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_WEN_A),
    .empty_9_Din_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_Din_A),
    .empty_9_Dout_A(a_0_Dout_A),
    .empty_10_Addr_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_Addr_A),
    .empty_10_EN_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_EN_A),
    .empty_10_WEN_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_WEN_A),
    .empty_10_Din_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_Din_A),
    .empty_10_Dout_A(a_1_Dout_A),
    .empty_11_Addr_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_Addr_A),
    .empty_11_EN_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_EN_A),
    .empty_11_WEN_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_WEN_A),
    .empty_11_Din_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_Din_A),
    .empty_11_Dout_A(a_2_Dout_A),
    .empty_12_Addr_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_Addr_A),
    .empty_12_EN_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_EN_A),
    .empty_12_WEN_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_WEN_A),
    .empty_12_Din_A(grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_Din_A),
    .empty_12_Dout_A(a_3_Dout_A),
    .empty_13(grp_aesl_mux_load_4_4_x_s_fu_539_empty_13),
    .empty_14(grp_aesl_mux_load_4_4_x_s_fu_539_empty_14),
    .empty(grp_aesl_mux_load_4_4_x_s_fu_539_empty),
    .ap_return(grp_aesl_mux_load_4_4_x_s_fu_539_ap_return)
);

minver_hwa_fsub_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
minver_hwa_fsub_3bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_74_reg_1686),
    .din1(tmp_21_reg_1691),
    .ce(1'b1),
    .dout(grp_fu_554_p2)
);

minver_hwa_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
minver_hwa_fmul_3cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_620),
    .din1(reg_631),
    .ce(1'b1),
    .dout(grp_fu_558_p2)
);

minver_hwa_fdiv_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
minver_hwa_fdiv_3dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_562_p0),
    .din1(reg_603),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

minver_hwa_fpext_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
minver_hwa_fpext_eOg_U7(
    .din0(api_reg_1471),
    .dout(tmp_5_fu_572_p1)
);

minver_hwa_fcmp_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
minver_hwa_fcmp_3fYi_U8(
    .din0(grp_fu_575_p0),
    .din1(ap_const_lv32_0),
    .opcode(grp_fu_575_opcode),
    .dout(grp_fu_575_p2)
);

minver_hwa_fcmp_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
minver_hwa_fcmp_3fYi_U9(
    .din0(w_4_reg_1436),
    .din1(wmax_phi_fu_452_p4),
    .opcode(ap_const_lv5_2),
    .dout(tmp_45_fu_580_p2)
);

minver_hwa_dcmp_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
minver_hwa_dcmp_6g8j_U10(
    .din0(tmp_5_reg_1476),
    .din1(ap_const_lv64_3EB0C6F7A0B5ED8D),
    .opcode(ap_const_lv5_5),
    .dout(tmp_30_fu_585_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == exitcond6_fu_688_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_2_fu_662_p3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond6_fu_688_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_2_fu_662_p3)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == exitcond6_fu_688_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~(1'b0 == exitcond5_fu_1033_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_pp1_stage5) & ~(1'b0 == exitcond5_reg_1521)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~(1'b0 == exitcond4_fu_1105_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage16))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_pp2_stage16) & ~(1'b0 == exitcond4_reg_1577)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~(1'b0 == exitcond_fu_1373_p2))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state97)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage5))) begin
            ap_enable_reg_pp3_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state97) | ((1'b1 == ap_CS_fsm_pp3_stage5) & ~(1'b0 == exitcond_reg_1833)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aesl_mux_load_4_4_x_s_fu_539_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond6_fu_688_p2)) | ((1'b1 == ap_NS_fsm_state10) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | (1'b1 == ap_enable_reg_pp0_iter5))) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == exitcond5_fu_1033_p2)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == exitcond4_fu_1105_p2)) | ((1'b1 == ap_CS_fsm_state44) & (1'b1 == ap_NS_fsm_state45)) | ((1'b1 == ap_CS_fsm_state48) & (1'b1 == ap_NS_fsm_state49)) | ((1'b1 == ap_CS_fsm_state50) & (1'b1 == ap_NS_fsm_state51)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == exitcond_fu_1373_p2)))) begin
            ap_reg_grp_aesl_mux_load_4_4_x_s_fu_539_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aesl_mux_load_4_4_x_s_fu_539_ap_ready)) begin
            ap_reg_grp_aesl_mux_load_4_4_x_s_fu_539_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        i_2_reg_481 <= i_8_reg_1581;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_2_reg_481 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_3_reg_492 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        i_3_reg_492 <= i_9_reg_1600;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_2_fu_662_p3))) begin
        i_4_reg_516 <= ap_const_lv5_0;
    end else if (((1'b1 == ap_CS_fsm_state95) & ~(1'b0 == tmp_8_fu_1301_p2))) begin
        i_4_reg_516 <= i_7_reg_1743;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond7_fu_640_p2))) begin
        i_5_reg_436 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        i_5_reg_436 <= k_reg_1404;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond7_fu_640_p2))) begin
        i_reg_424 <= i_1_fu_646_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_424 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (1'b0 == tmp_59_fu_1230_p2))) begin
        j_1_reg_504 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        j_1_reg_504 <= j_5_reg_1661;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1))) begin
        j_2_reg_528 <= j_4_reg_1837;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        j_2_reg_528 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        j_reg_470 <= j_3_reg_1525;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        j_reg_470 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_2_fu_662_p3))) begin
        r_1_reg_460 <= i_5_cast_fu_676_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0))) begin
        r_1_reg_460 <= i_6_reg_1431;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond6_reg_1427))) begin
        r_fu_126 <= r_2_fu_865_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond7_fu_640_p2))) begin
        r_fu_126 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        reg_609 <= work_q1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        reg_609 <= work_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_2_fu_662_p3))) begin
        wmax_reg_448 <= ap_const_lv32_0;
    end else if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond6_reg_1427))) begin
        wmax_reg_448 <= wmax_1_fu_859_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        a_0_addr_1_reg_1798 <= tmp_64_cast_fu_1365_p1;
        a_0_addr_reg_1793 <= tmp_63_cast_fu_1351_p1;
        a_1_addr_1_reg_1808 <= tmp_64_cast_fu_1365_p1;
        a_1_addr_reg_1803 <= tmp_63_cast_fu_1351_p1;
        a_2_addr_1_reg_1818 <= tmp_64_cast_fu_1365_p1;
        a_2_addr_reg_1813 <= tmp_63_cast_fu_1351_p1;
        a_3_addr_1_reg_1828 <= tmp_64_cast_fu_1365_p1;
        a_3_addr_reg_1823 <= tmp_63_cast_fu_1351_p1;
        tmp_47_reg_1779 <= {{reg_609[ap_const_lv32_4 : ap_const_lv32_2]}};
        tmp_48_reg_1783[2 : 0] <= tmp_48_fu_1326_p1[2 : 0];
        tmp_49_reg_1788 <= tmp_49_fu_1330_p1;
        tmp_7_cast14_cast_reg_1774[4 : 0] <= tmp_7_cast14_cast_fu_1312_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        a_0_addr_5_reg_1552 <= tmp_72_cast_fu_1093_p1;
        a_1_addr_5_reg_1557 <= tmp_72_cast_fu_1093_p1;
        a_2_addr_5_reg_1562 <= tmp_72_cast_fu_1093_p1;
        a_3_addr_5_reg_1567 <= tmp_72_cast_fu_1093_p1;
        arrayNo3_cast_cast1_reg_1572[2 : 0] <= arrayNo3_cast_cast1_fu_1101_p1[2 : 0];
        tmp_63_reg_1542 <= tmp_63_fu_1072_p1;
        tmp_71_cast_reg_1547[5 : 4] <= tmp_71_cast_fu_1084_p1[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        a_0_addr_6_reg_1629 <= tmp_78_cast_fu_1186_p1;
        a_1_addr_6_reg_1634 <= tmp_78_cast_fu_1186_p1;
        a_2_addr_6_reg_1639 <= tmp_78_cast_fu_1186_p1;
        a_3_addr_6_reg_1644 <= tmp_78_cast_fu_1186_p1;
        tmp_59_reg_1654 <= tmp_59_fu_1230_p2;
        tmp_77_cast_reg_1624[5 : 4] <= tmp_77_cast_fu_1177_p1[5 : 4];
        w_2_to_int_reg_1649 <= w_2_to_int_fu_1194_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        a_0_addr_7_reg_1696 <= tmp_79_cast_fu_1273_p1;
        a_1_addr_7_reg_1701 <= tmp_79_cast_fu_1273_p1;
        a_2_addr_7_reg_1706 <= tmp_79_cast_fu_1273_p1;
        a_3_addr_7_reg_1711 <= tmp_79_cast_fu_1273_p1;
        tmp_22_reg_1716 <= grp_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 <= exitcond6_reg_1427;
        ap_pipeline_reg_pp0_iter1_r_1_reg_460 <= r_1_reg_460;
        exitcond6_reg_1427 <= exitcond6_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_pipeline_reg_pp0_iter2_exitcond6_reg_1427 <= ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427;
        ap_pipeline_reg_pp0_iter2_r_1_reg_460 <= ap_pipeline_reg_pp0_iter1_r_1_reg_460;
        ap_pipeline_reg_pp0_iter3_exitcond6_reg_1427 <= ap_pipeline_reg_pp0_iter2_exitcond6_reg_1427;
        ap_pipeline_reg_pp0_iter3_r_1_reg_460 <= ap_pipeline_reg_pp0_iter2_r_1_reg_460;
        ap_pipeline_reg_pp0_iter4_exitcond6_reg_1427 <= ap_pipeline_reg_pp0_iter3_exitcond6_reg_1427;
        ap_pipeline_reg_pp0_iter4_r_1_reg_460 <= ap_pipeline_reg_pp0_iter3_r_1_reg_460;
        ap_pipeline_reg_pp0_iter4_w_4_reg_1436 <= w_4_reg_1436;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        api_reg_1471 <= api_fu_945_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        arrayNo2_cast_cast_reg_1516[2 : 0] <= arrayNo2_cast_cast_fu_1029_p1[2 : 0];
        tmp_52_cast_reg_1511[5 : 4] <= tmp_52_cast_fu_1025_p1[5 : 4];
        tmp_54_reg_1506 <= tmp_54_fu_1013_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        arrayNo5_cast_cast1_reg_1619[2 : 0] <= arrayNo5_cast_cast1_fu_1165_p1[2 : 0];
        arrayNo5_reg_1609 <= {{i_3_reg_492[ap_const_lv32_4 : ap_const_lv32_2]}};
        tmp_68_reg_1613 <= tmp_68_fu_1160_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        arrayNo_cast_reg_1460 <= {{r_fu_126[ap_const_lv32_1F : ap_const_lv32_2]}};
        r_load_reg_1454 <= r_fu_126;
        tmp_9_reg_1465 <= tmp_9_fu_888_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp2_stage0)) begin
        exitcond4_reg_1577 <= exitcond4_fu_1105_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp1_stage0)) begin
        exitcond5_reg_1521 <= exitcond5_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp3_stage0)) begin
        exitcond_reg_1833 <= exitcond_fu_1373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_2_fu_662_p3))) begin
        i_5_cast_reg_1409[4 : 0] <= i_5_cast_fu_676_p1[4 : 0];
        tmp_3_cast_reg_1420[4 : 0] <= tmp_3_cast_fu_684_p1[4 : 0];
        tmp_3_reg_1415[4 : 0] <= tmp_3_fu_680_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond6_fu_688_p2))) begin
        i_6_reg_1431 <= i_6_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        i_7_reg_1743 <= i_7_fu_1286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp2_iter0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_8_reg_1581 <= i_8_fu_1111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_9_reg_1600 <= i_9_fu_1138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_3_reg_1525 <= j_3_fu_1039_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_4_reg_1837 <= j_4_fu_1379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        j_5_reg_1661 <= j_5_fu_1242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_1404 <= k_fu_670_p2;
        tmp_2_reg_1400 <= i_5_reg_436[ap_const_lv32_4];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_603 <= grp_aesl_mux_load_4_4_x_s_fu_539_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_616 <= {{i_5_reg_436[ap_const_lv32_4 : ap_const_lv32_2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)))) begin
        reg_620 <= grp_aesl_mux_load_4_4_x_s_fu_539_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)))) begin
        reg_631 <= grp_aesl_mux_load_4_4_x_s_fu_539_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == exitcond5_fu_1033_p2))) begin
        tmp_10_cast_reg_1530[4 : 0] <= tmp_10_cast_fu_1045_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == exitcond4_fu_1105_p2))) begin
        tmp_11_cast_reg_1586[4 : 0] <= tmp_11_cast_fu_1117_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_13_reg_1732 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (1'b0 == exitcond3_fu_1132_p2))) begin
        tmp_14_reg_1605 <= tmp_14_fu_1144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        tmp_18_reg_1724 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (1'b0 == exitcond2_fu_1236_p2))) begin
        tmp_19_reg_1666 <= tmp_19_fu_1248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_20_cast_reg_1675[4 : 0] <= tmp_20_cast_fu_1264_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tmp_21_reg_1691 <= grp_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == tmp_2_reg_1400))) begin
        tmp_29_cast_reg_1482[5 : 4] <= tmp_29_cast_fu_964_p1[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_pipeline_reg_pp0_iter3_exitcond6_reg_1427)) begin
        tmp_46_reg_1443 <= tmp_46_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_5_reg_1476 <= tmp_5_fu_572_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
        tmp_61_reg_1537 <= tmp_61_fu_1061_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        tmp_66_reg_1592 <= tmp_66_fu_1121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_72_reg_1681 <= tmp_72_fu_1269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        tmp_74_reg_1686 <= grp_aesl_mux_load_4_4_x_s_fu_539_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state93) & (1'b0 == exitcond1_fu_1280_p2))) begin
        tmp_cast_reg_1748[4 : 0] <= tmp_cast_fu_1297_p1[4 : 0];
        work_addr_1_reg_1754[4 : 0] <= tmp_s_fu_1292_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_pipeline_reg_pp0_iter2_exitcond6_reg_1427)) begin
        w_4_reg_1436 <= w_4_fu_768_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state95) & (1'b0 == tmp_8_fu_1301_p2))) begin
        work_addr_2_reg_1763[4 : 0] <= tmp_7_fu_1307_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == tmp_2_reg_1400) & (1'b0 == tmp_31_fu_1003_p2) & (1'b0 == tmp_1_fu_1009_p2))) begin
        work_addr_3_reg_1494[4 : 0] <= tmp_3_reg_1415[4 : 0];
        work_addr_4_reg_1500 <= tmp_4_fu_953_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        work_load_1_reg_1769 <= work_q0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        a_0_Addr_A = grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_Addr_A;
    end else begin
        a_0_Addr_A = a_0_Addr_A_orig << ap_const_lv32_2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1))) begin
        a_0_Addr_A_orig = a_0_addr_1_reg_1798;
    end else if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5))) begin
        a_0_Addr_A_orig = a_0_addr_reg_1793;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        a_0_Addr_A_orig = a_0_addr_5_reg_1552;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        a_0_Addr_A_orig = a_0_addr_6_reg_1629;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_0_Addr_A_orig = a_0_addr_7_reg_1696;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        a_0_Addr_A_orig = tmp_73_cast_fu_1125_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        a_0_Addr_A_orig = tmp_66_cast_fu_1065_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
        a_0_Addr_A_orig = tmp_65_cast_fu_1053_p1;
    end else begin
        a_0_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        a_0_Din_A = tmp_13_reg_1732;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        a_0_Din_A = tmp_18_reg_1724;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_0_Din_A = tmp_22_reg_1716;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        a_0_Din_A = grp_fu_562_p2;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1)))) begin
        a_0_Din_A = reg_620;
    end else if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5)))) begin
        a_0_Din_A = reg_631;
    end else begin
        a_0_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1)) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state60) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5)))) begin
        a_0_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        a_0_EN_A = grp_aesl_mux_load_4_4_x_s_fu_539_empty_9_EN_A;
    end else begin
        a_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage5) & (reg_616 == ap_const_lv3_0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (arrayNo_cast_reg_1460 == ap_const_lv30_0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (reg_616 == ap_const_lv3_0)) | ((1'b1 == ap_CS_fsm_state60) & (1'b0 == tmp_19_reg_1666) & (arrayNo5_reg_1609 == ap_const_lv3_0)) | ((1'b1 == ap_CS_fsm_state76) & (1'b0 == tmp_14_reg_1605) & (1'b0 == tmp_59_reg_1654) & (arrayNo5_reg_1609 == ap_const_lv3_0)) | ((1'b1 == ap_CS_fsm_state92) & (reg_616 == ap_const_lv3_0)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage5) & (tmp_47_reg_1779 == ap_const_lv3_0)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (tmp_47_reg_1779 == ap_const_lv3_0)))) begin
        a_0_WEN_A = ap_const_lv4_F;
    end else begin
        a_0_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        a_1_Addr_A = grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_Addr_A;
    end else begin
        a_1_Addr_A = a_1_Addr_A_orig << ap_const_lv32_2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1))) begin
        a_1_Addr_A_orig = a_1_addr_1_reg_1808;
    end else if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5))) begin
        a_1_Addr_A_orig = a_1_addr_reg_1803;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        a_1_Addr_A_orig = a_1_addr_5_reg_1557;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        a_1_Addr_A_orig = a_1_addr_6_reg_1634;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_1_Addr_A_orig = a_1_addr_7_reg_1701;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        a_1_Addr_A_orig = tmp_73_cast_fu_1125_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        a_1_Addr_A_orig = tmp_66_cast_fu_1065_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
        a_1_Addr_A_orig = tmp_65_cast_fu_1053_p1;
    end else begin
        a_1_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        a_1_Din_A = tmp_13_reg_1732;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        a_1_Din_A = tmp_18_reg_1724;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_1_Din_A = tmp_22_reg_1716;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        a_1_Din_A = grp_fu_562_p2;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1)))) begin
        a_1_Din_A = reg_620;
    end else if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5)))) begin
        a_1_Din_A = reg_631;
    end else begin
        a_1_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1)) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state60) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5)))) begin
        a_1_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        a_1_EN_A = grp_aesl_mux_load_4_4_x_s_fu_539_empty_10_EN_A;
    end else begin
        a_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage5) & (reg_616 == ap_const_lv3_1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (arrayNo_cast_reg_1460 == ap_const_lv30_1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (reg_616 == ap_const_lv3_1)) | ((1'b1 == ap_CS_fsm_state60) & (1'b0 == tmp_19_reg_1666) & (arrayNo5_reg_1609 == ap_const_lv3_1)) | ((1'b1 == ap_CS_fsm_state76) & (1'b0 == tmp_14_reg_1605) & (1'b0 == tmp_59_reg_1654) & (arrayNo5_reg_1609 == ap_const_lv3_1)) | ((1'b1 == ap_CS_fsm_state92) & (reg_616 == ap_const_lv3_1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage5) & (tmp_47_reg_1779 == ap_const_lv3_1)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (tmp_47_reg_1779 == ap_const_lv3_1)))) begin
        a_1_WEN_A = ap_const_lv4_F;
    end else begin
        a_1_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        a_2_Addr_A = grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_Addr_A;
    end else begin
        a_2_Addr_A = a_2_Addr_A_orig << ap_const_lv32_2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1))) begin
        a_2_Addr_A_orig = a_2_addr_1_reg_1818;
    end else if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5))) begin
        a_2_Addr_A_orig = a_2_addr_reg_1813;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        a_2_Addr_A_orig = a_2_addr_5_reg_1562;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        a_2_Addr_A_orig = a_2_addr_6_reg_1639;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_2_Addr_A_orig = a_2_addr_7_reg_1706;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        a_2_Addr_A_orig = tmp_73_cast_fu_1125_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        a_2_Addr_A_orig = tmp_66_cast_fu_1065_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
        a_2_Addr_A_orig = tmp_65_cast_fu_1053_p1;
    end else begin
        a_2_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        a_2_Din_A = tmp_13_reg_1732;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        a_2_Din_A = tmp_18_reg_1724;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_2_Din_A = tmp_22_reg_1716;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        a_2_Din_A = grp_fu_562_p2;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1)))) begin
        a_2_Din_A = reg_620;
    end else if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5)))) begin
        a_2_Din_A = reg_631;
    end else begin
        a_2_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1)) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state60) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5)))) begin
        a_2_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        a_2_EN_A = grp_aesl_mux_load_4_4_x_s_fu_539_empty_11_EN_A;
    end else begin
        a_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage5) & (reg_616 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (arrayNo_cast_reg_1460 == ap_const_lv30_2)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (reg_616 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_state60) & (1'b0 == tmp_19_reg_1666) & (arrayNo5_reg_1609 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_state76) & (arrayNo5_reg_1609 == ap_const_lv3_2) & (1'b0 == tmp_14_reg_1605) & (1'b0 == tmp_59_reg_1654)) | ((1'b1 == ap_CS_fsm_state92) & (reg_616 == ap_const_lv3_2)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage5) & (tmp_47_reg_1779 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (tmp_47_reg_1779 == ap_const_lv3_2)))) begin
        a_2_WEN_A = ap_const_lv4_F;
    end else begin
        a_2_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        a_3_Addr_A = grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_Addr_A;
    end else begin
        a_3_Addr_A = a_3_Addr_A_orig << ap_const_lv32_2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1))) begin
        a_3_Addr_A_orig = a_3_addr_1_reg_1828;
    end else if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5))) begin
        a_3_Addr_A_orig = a_3_addr_reg_1823;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        a_3_Addr_A_orig = a_3_addr_5_reg_1567;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        a_3_Addr_A_orig = a_3_addr_6_reg_1644;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_3_Addr_A_orig = a_3_addr_7_reg_1711;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        a_3_Addr_A_orig = tmp_73_cast_fu_1125_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        a_3_Addr_A_orig = tmp_66_cast_fu_1065_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5))) begin
        a_3_Addr_A_orig = tmp_65_cast_fu_1053_p1;
    end else begin
        a_3_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        a_3_Din_A = tmp_13_reg_1732;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        a_3_Din_A = tmp_18_reg_1724;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        a_3_Din_A = tmp_22_reg_1716;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        a_3_Din_A = grp_fu_562_p2;
    end else if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1)))) begin
        a_3_Din_A = reg_620;
    end else if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5)))) begin
        a_3_Din_A = reg_631;
    end else begin
        a_3_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1)) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state60) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b1 == ap_CS_fsm_pp3_stage5)))) begin
        a_3_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond6_reg_1427 == 1'b0)) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577)) | (1'b1 == ap_CS_fsm_state46) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage4)) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage4)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        a_3_EN_A = grp_aesl_mux_load_4_4_x_s_fu_539_empty_12_EN_A;
    end else begin
        a_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage5) & ~(reg_616 == ap_const_lv3_0) & ~(reg_616 == ap_const_lv3_1) & ~(reg_616 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & ~(arrayNo_cast_reg_1460 == ap_const_lv30_0) & ~(arrayNo_cast_reg_1460 == ap_const_lv30_1) & ~(arrayNo_cast_reg_1460 == ap_const_lv30_2)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & ~(reg_616 == ap_const_lv3_0) & ~(reg_616 == ap_const_lv3_1) & ~(reg_616 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_state60) & (1'b0 == tmp_19_reg_1666) & ~(arrayNo5_reg_1609 == ap_const_lv3_0) & ~(arrayNo5_reg_1609 == ap_const_lv3_1) & ~(arrayNo5_reg_1609 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_state76) & (1'b0 == tmp_14_reg_1605) & (1'b0 == tmp_59_reg_1654) & ~(arrayNo5_reg_1609 == ap_const_lv3_0) & ~(arrayNo5_reg_1609 == ap_const_lv3_1) & ~(arrayNo5_reg_1609 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_state92) & ~(reg_616 == ap_const_lv3_0) & ~(reg_616 == ap_const_lv3_1) & ~(reg_616 == ap_const_lv3_2)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage5) & ~(tmp_47_reg_1779 == ap_const_lv3_0) & ~(tmp_47_reg_1779 == ap_const_lv3_1) & ~(tmp_47_reg_1779 == ap_const_lv3_2)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & ~(tmp_47_reg_1779 == ap_const_lv3_0) & ~(tmp_47_reg_1779 == ap_const_lv3_1) & ~(tmp_47_reg_1779 == ap_const_lv3_2)))) begin
        a_3_WEN_A = ap_const_lv4_F;
    end else begin
        a_3_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (~(1'b0 == tmp_2_reg_1400) | ~(1'b0 == tmp_31_fu_1003_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (~(1'b0 == tmp_2_reg_1400) | ~(1'b0 == tmp_31_fu_1003_p2)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty = tmp_7_cast14_cast_reg_1774;
    end else if (((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty = tmp_cast_reg_1748;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty = tmp_20_cast_reg_1675;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty = tmp_20_cast_fu_1264_p1;
    end else if (((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty = tmp_11_cast_reg_1586;
    end else if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3)))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty = tmp_10_cast_reg_1530;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state45) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0)))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty = tmp_3_cast_reg_1420;
    end else begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = tmp_48_reg_1783;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = arrayNo5_cast_cast1_reg_1619;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = arrayNo5_cast_cast1_fu_1165_p1;
    end else if (((1'b1 == ap_CS_fsm_state49) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = arrayNo3_cast_cast1_reg_1572;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = arrayNo_cast_reg_1460;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = arrayNo2_cast_cast_reg_1516;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = {{r_fu_126[ap_const_lv32_1F : ap_const_lv32_2]}};
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = {{r_1_reg_460[ap_const_lv32_1F : ap_const_lv32_2]}};
    end else begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_13 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage3)))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = tmp_49_reg_1788;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = tmp_68_reg_1613;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = tmp_68_fu_1160_p1;
    end else if (((1'b1 == ap_CS_fsm_state49) | ((1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = tmp_63_reg_1542;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = tmp_9_reg_1465;
    end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = tmp_54_reg_1506;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = tmp_9_fu_888_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0))) begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = tmp_32_fu_700_p1;
    end else begin
        grp_aesl_mux_load_4_4_x_s_fu_539_empty_14 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_562_p0 = tmp_17_fu_1259_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_562_p0 = ap_const_lv32_3F800000;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        grp_fu_562_p0 = grp_aesl_mux_load_4_4_x_s_fu_539_ap_return;
    end else begin
        grp_fu_562_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_575_opcode = ap_const_lv5_1;
    end else if (((1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_pipeline_reg_pp0_iter2_exitcond6_reg_1427) & (1'b1 == ap_enable_reg_pp0_iter3)))) begin
        grp_fu_575_opcode = ap_const_lv5_3;
    end else begin
        grp_fu_575_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_575_p0 = reg_620;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_enable_reg_pp0_iter3))) begin
        grp_fu_575_p0 = reg_603;
    end else begin
        grp_fu_575_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond4_reg_1577) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        i_2_phi_fu_485_p4 = i_8_reg_1581;
    end else begin
        i_2_phi_fu_485_p4 = i_2_reg_481;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond_reg_1833) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1))) begin
        j_2_phi_fu_532_p4 = j_4_reg_1837;
    end else begin
        j_2_phi_fu_532_p4 = j_2_reg_528;
    end
end

always @ (*) begin
    if (((1'b0 == exitcond5_reg_1521) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        j_phi_fu_474_p4 = j_3_reg_1525;
    end else begin
        j_phi_fu_474_p4 = j_reg_470;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond6_reg_1427 == 1'b0))) begin
        r_1_phi_fu_463_p4 = i_6_reg_1431;
    end else begin
        r_1_phi_fu_463_p4 = r_1_reg_460;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond6_reg_1427))) begin
        wmax_phi_fu_452_p4 = wmax_1_fu_859_p3;
    end else begin
        wmax_phi_fu_452_p4 = wmax_reg_448;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        work_address0 = work_addr_1_reg_1754;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        work_address0 = tmp_7_fu_1307_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        work_address0 = work_addr_4_reg_1500;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        work_address0 = tmp_3_reg_1415;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        work_address0 = tmp_fu_652_p1;
    end else begin
        work_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        work_address1 = work_addr_2_reg_1763;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        work_address1 = work_addr_1_reg_1754;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        work_address1 = work_addr_3_reg_1494;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        work_address1 = tmp_4_fu_953_p1;
    end else begin
        work_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state97))) begin
        work_ce0 = 1'b1;
    end else begin
        work_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94))) begin
        work_ce1 = 1'b1;
    end else begin
        work_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        work_d0 = work_load_1_reg_1769;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        work_d0 = reg_609;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        work_d0 = i_reg_424;
    end else begin
        work_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        work_d1 = reg_609;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        work_d1 = work_q1;
    end else begin
        work_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state97) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond7_fu_640_p2)))) begin
        work_we0 = 1'b1;
    end else begin
        work_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state96))) begin
        work_we1 = 1'b1;
    end else begin
        work_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond7_fu_640_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == tmp_2_fu_662_p3)) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter5) & ~(1'b1 == ap_enable_reg_pp0_iter4)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond6_fu_688_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond6_fu_688_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if ((~(1'b0 == tmp_2_reg_1400) | ~(1'b0 == tmp_31_fu_1003_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == tmp_2_reg_1400) & (1'b0 == tmp_31_fu_1003_p2) & ~(1'b0 == tmp_1_fu_1009_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond5_fu_1033_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage2;
        end
        ap_ST_fsm_pp1_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage3;
        end
        ap_ST_fsm_pp1_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage4;
        end
        ap_ST_fsm_pp1_stage4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage5;
        end
        ap_ST_fsm_pp1_stage5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond4_fu_1105_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage2;
        end
        ap_ST_fsm_pp2_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage3;
        end
        ap_ST_fsm_pp2_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage4;
        end
        ap_ST_fsm_pp2_stage4 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage5;
        end
        ap_ST_fsm_pp2_stage5 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage6;
        end
        ap_ST_fsm_pp2_stage6 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage7;
        end
        ap_ST_fsm_pp2_stage7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage8;
        end
        ap_ST_fsm_pp2_stage8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage9;
        end
        ap_ST_fsm_pp2_stage9 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage10;
        end
        ap_ST_fsm_pp2_stage10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage11;
        end
        ap_ST_fsm_pp2_stage11 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage12;
        end
        ap_ST_fsm_pp2_stage12 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage13;
        end
        ap_ST_fsm_pp2_stage13 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage14;
        end
        ap_ST_fsm_pp2_stage14 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage15;
        end
        ap_ST_fsm_pp2_stage15 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage16;
        end
        ap_ST_fsm_pp2_stage16 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b0 == exitcond3_fu_1132_p2) & ~(1'b0 == tmp_14_fu_1144_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else if (((1'b0 == exitcond3_fu_1132_p2) & (1'b0 == tmp_14_fu_1144_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if ((1'b0 == tmp_59_fu_1230_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b0 == exitcond2_fu_1236_p2) & ~(1'b0 == tmp_19_fu_1248_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else if (((1'b0 == exitcond2_fu_1236_p2) & (1'b0 == tmp_19_fu_1248_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state93 : begin
            if (~(1'b0 == exitcond1_fu_1280_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            if (~(1'b0 == tmp_8_fu_1301_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond_fu_1373_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage2;
        end
        ap_ST_fsm_pp3_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage3;
        end
        ap_ST_fsm_pp3_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage4;
        end
        ap_ST_fsm_pp3_stage4 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage5;
        end
        ap_ST_fsm_pp3_stage5 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_Clk_A = ap_clk;

assign a_0_Rst_A = ap_rst;

assign a_1_Clk_A = ap_clk;

assign a_1_Rst_A = ap_rst;

assign a_2_Clk_A = ap_clk;

assign a_2_Rst_A = ap_rst;

assign a_3_Clk_A = ap_clk;

assign a_3_Rst_A = ap_rst;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_pp2_stage16 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[ap_const_lv32_5A];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[ap_const_lv32_5B];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[ap_const_lv32_5C];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[ap_const_lv32_5D];

assign ap_CS_fsm_pp3_stage4 = ap_CS_fsm[ap_const_lv32_5E];

assign ap_CS_fsm_pp3_stage5 = ap_CS_fsm[ap_const_lv32_5F];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state45 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state46 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state47 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state48 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state49 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state50 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_2C];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_2E];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_2F];

assign ap_CS_fsm_state59 = ap_CS_fsm[ap_const_lv32_33];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_34];

assign ap_CS_fsm_state75 = ap_CS_fsm[ap_const_lv32_43];

assign ap_CS_fsm_state76 = ap_CS_fsm[ap_const_lv32_44];

assign ap_CS_fsm_state91 = ap_CS_fsm[ap_const_lv32_53];

assign ap_CS_fsm_state92 = ap_CS_fsm[ap_const_lv32_54];

assign ap_CS_fsm_state93 = ap_CS_fsm[ap_const_lv32_55];

assign ap_CS_fsm_state94 = ap_CS_fsm[ap_const_lv32_56];

assign ap_CS_fsm_state95 = ap_CS_fsm[ap_const_lv32_57];

assign ap_CS_fsm_state96 = ap_CS_fsm[ap_const_lv32_58];

assign ap_CS_fsm_state97 = ap_CS_fsm[ap_const_lv32_59];

assign ap_NS_fsm_state10 = ap_NS_fsm[ap_const_lv32_4];

assign ap_NS_fsm_state45 = ap_NS_fsm[ap_const_lv32_25];

assign ap_NS_fsm_state49 = ap_NS_fsm[ap_const_lv32_29];

assign ap_NS_fsm_state51 = ap_NS_fsm[ap_const_lv32_2B];

assign ap_return = ap_const_lv32_1;

assign api_fu_945_p3 = ((tmp_23_fu_929_p2[0:0] === 1'b1) ? reg_603 : f_fu_941_p1);

assign arrayNo2_cast_cast_fu_1029_p1 = grp_fu_593_p4;

assign arrayNo3_cast_cast1_fu_1101_p1 = grp_fu_593_p4;

assign arrayNo5_cast_cast1_fu_1165_p1 = arrayNo5_fu_1150_p4;

assign arrayNo5_fu_1150_p4 = {{i_3_reg_492[ap_const_lv32_4 : ap_const_lv32_2]}};

assign exitcond1_fu_1280_p2 = ((i_4_reg_516 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond2_fu_1236_p2 = ((j_1_reg_504 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond3_fu_1132_p2 = ((i_3_reg_492 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond4_fu_1105_p2 = ((i_2_phi_fu_485_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond5_fu_1033_p2 = ((j_phi_fu_474_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond6_fu_688_p2 = ((r_1_phi_fu_463_p4 == ap_const_lv32_10) ? 1'b1 : 1'b0);

assign exitcond7_fu_640_p2 = ((i_reg_424 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_1373_p2 = ((j_2_phi_fu_532_p4 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign f_1_fu_764_p1 = f_neg_i_fu_758_p2;

assign f_fu_941_p1 = f_neg_i1_fu_935_p2;

assign f_neg_i1_fu_935_p2 = (pivot_to_int_fu_893_p1 ^ ap_const_lv32_80000000);

assign f_neg_i_fu_758_p2 = (n_assign_1_to_int_fu_716_p1 ^ ap_const_lv32_80000000);

assign grp_aesl_mux_load_4_4_x_s_fu_539_ap_start = ap_reg_grp_aesl_mux_load_4_4_x_s_fu_539_ap_start;

assign grp_fu_593_p4 = {{i_5_reg_436[ap_const_lv32_4 : ap_const_lv32_2]}};

assign i_1_fu_646_p2 = (i_reg_424 + ap_const_lv5_1);

assign i_5_cast_fu_676_p1 = i_5_reg_436;

assign i_6_fu_694_p2 = (ap_const_lv32_1 + r_1_phi_fu_463_p4);

assign i_7_fu_1286_p2 = (i_4_reg_516 + ap_const_lv5_1);

assign i_8_fu_1111_p2 = (i_2_phi_fu_485_p4 + ap_const_lv5_1);

assign i_9_fu_1138_p2 = (i_3_reg_492 + ap_const_lv5_1);

assign j_3_fu_1039_p2 = (j_phi_fu_474_p4 + ap_const_lv5_1);

assign j_4_fu_1379_p2 = (j_2_phi_fu_532_p4 + ap_const_lv5_1);

assign j_5_fu_1242_p2 = (j_1_reg_504 + ap_const_lv5_1);

assign k_fu_670_p2 = (i_5_reg_436 + ap_const_lv5_1);

assign n_assign_1_to_int_fu_716_p1 = reg_603;

assign notlhs1_fu_911_p2 = ((tmp_6_fu_897_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs2_fu_985_p2 = ((tmp_25_fu_971_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notlhs3_fu_811_p2 = ((tmp_38_fu_779_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs4_fu_829_p2 = ((tmp_40_fu_797_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs5_fu_1212_p2 = ((tmp_55_fu_1198_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs_fu_734_p2 = ((tmp_33_fu_720_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs1_fu_917_p2 = ((tmp_11_fu_907_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs2_fu_991_p2 = ((tmp_27_fu_981_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign notrhs3_fu_817_p2 = ((tmp_39_fu_789_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs4_fu_835_p2 = ((tmp_41_fu_807_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs5_fu_1218_p2 = ((tmp_71_fu_1208_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs_fu_740_p2 = ((tmp_34_fu_730_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign pivot_to_int_fu_893_p1 = reg_603;

assign r_2_fu_865_p3 = ((tmp_46_reg_1443[0:0] === 1'b1) ? ap_pipeline_reg_pp0_iter4_r_1_reg_460 : r_fu_126);

assign tmp_10_cast_fu_1045_p1 = j_phi_fu_474_p4;

assign tmp_10_fu_957_p3 = {{tmp_9_reg_1465}, {ap_const_lv4_0}};

assign tmp_11_cast_fu_1117_p1 = i_2_phi_fu_485_p4;

assign tmp_11_fu_907_p1 = pivot_to_int_fu_893_p1[22:0];

assign tmp_14_fu_1144_p2 = ((i_3_reg_492 == i_5_reg_436) ? 1'b1 : 1'b0);

assign tmp_15_fu_923_p2 = (notrhs1_fu_917_p2 | notlhs1_fu_911_p2);

assign tmp_17_fu_1259_p1 = tmp_18_neg_fu_1254_p2;

assign tmp_18_neg_fu_1254_p2 = (w_2_to_int_reg_1649 ^ ap_const_lv32_80000000);

assign tmp_19_fu_1248_p2 = ((j_1_reg_504 == i_5_reg_436) ? 1'b1 : 1'b0);

assign tmp_1_fu_1009_p2 = ((r_load_reg_1454 == i_5_cast_reg_1409) ? 1'b1 : 1'b0);

assign tmp_20_cast_fu_1264_p1 = j_1_reg_504;

assign tmp_23_fu_929_p2 = (tmp_15_fu_923_p2 & grp_fu_575_p2);

assign tmp_25_fu_971_p4 = {{tmp_5_to_int_fu_968_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_27_fu_981_p1 = tmp_5_to_int_fu_968_p1[51:0];

assign tmp_29_cast_fu_964_p1 = tmp_10_fu_957_p3;

assign tmp_29_fu_997_p2 = (notrhs2_fu_991_p2 | notlhs2_fu_985_p2);

assign tmp_2_fu_662_p3 = i_5_reg_436[ap_const_lv32_4];

assign tmp_31_fu_1003_p2 = (tmp_29_fu_997_p2 & tmp_30_fu_585_p2);

assign tmp_32_fu_700_p1 = r_1_reg_460[1:0];

assign tmp_33_fu_720_p4 = {{n_assign_1_to_int_fu_716_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_34_fu_730_p1 = n_assign_1_to_int_fu_716_p1[22:0];

assign tmp_35_fu_746_p2 = (notrhs_fu_740_p2 | notlhs_fu_734_p2);

assign tmp_37_fu_752_p2 = (tmp_35_fu_746_p2 & grp_fu_575_p2);

assign tmp_38_fu_779_p4 = {{w_4_to_int_fu_776_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_39_fu_789_p1 = w_4_to_int_fu_776_p1[22:0];

assign tmp_3_cast_fu_684_p1 = i_5_reg_436;

assign tmp_3_fu_680_p1 = i_5_reg_436;

assign tmp_40_fu_797_p4 = {{wmax_to_int_fu_793_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_41_fu_807_p1 = wmax_to_int_fu_793_p1[22:0];

assign tmp_42_fu_823_p2 = (notrhs3_fu_817_p2 | notlhs3_fu_811_p2);

assign tmp_43_fu_841_p2 = (notrhs4_fu_835_p2 | notlhs4_fu_829_p2);

assign tmp_44_fu_847_p2 = (tmp_42_fu_823_p2 & tmp_43_fu_841_p2);

assign tmp_46_fu_853_p2 = (tmp_44_fu_847_p2 & tmp_45_fu_580_p2);

assign tmp_47_fu_1316_p4 = {{reg_609[ap_const_lv32_4 : ap_const_lv32_2]}};

assign tmp_48_fu_1326_p1 = tmp_47_fu_1316_p4;

assign tmp_49_fu_1330_p1 = reg_609[1:0];

assign tmp_4_fu_953_p1 = $signed(r_load_reg_1454);

assign tmp_50_fu_1334_p3 = {{tmp_49_fu_1330_p1}, {ap_const_lv4_0}};

assign tmp_51_fu_1017_p3 = {{tmp_54_fu_1013_p1}, {ap_const_lv4_0}};

assign tmp_52_cast_fu_1025_p1 = tmp_51_fu_1017_p3;

assign tmp_52_fu_1346_p2 = (tmp_cast_reg_1748 + tmp_62_cast13_cast_fu_1342_p1);

assign tmp_53_fu_1359_p2 = (tmp_7_cast14_cast_fu_1312_p1 + tmp_62_cast13_cast_fu_1342_p1);

assign tmp_54_fu_1013_p1 = i_5_reg_436[1:0];

assign tmp_55_fu_1198_p4 = {{w_2_to_int_fu_1194_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_57_fu_1224_p2 = (notrhs5_fu_1218_p2 | notlhs5_fu_1212_p2);

assign tmp_59_fu_1230_p2 = (tmp_57_fu_1224_p2 & grp_fu_575_p2);

assign tmp_5_to_int_fu_968_p1 = tmp_5_reg_1476;

assign tmp_60_fu_1049_p2 = (tmp_52_cast_reg_1511 + tmp_10_cast_reg_1530);

assign tmp_61_fu_1061_p2 = (tmp_29_cast_reg_1482 + tmp_10_cast_reg_1530);

assign tmp_62_cast13_cast_fu_1342_p1 = tmp_50_fu_1334_p3;

assign tmp_63_cast_fu_1351_p1 = tmp_52_fu_1346_p2;

assign tmp_63_fu_1072_p1 = i_5_reg_436[1:0];

assign tmp_64_cast_fu_1365_p1 = tmp_53_fu_1359_p2;

assign tmp_64_fu_1076_p3 = {{tmp_63_fu_1072_p1}, {ap_const_lv4_0}};

assign tmp_65_cast_fu_1053_p1 = tmp_60_fu_1049_p2;

assign tmp_65_fu_1088_p2 = (tmp_71_cast_fu_1084_p1 + tmp_3_cast_reg_1420);

assign tmp_66_cast_fu_1065_p1 = tmp_61_reg_1537;

assign tmp_66_fu_1121_p2 = (tmp_71_cast_reg_1547 + tmp_11_cast_reg_1586);

assign tmp_68_fu_1160_p1 = i_3_reg_492[1:0];

assign tmp_69_fu_1170_p3 = {{tmp_68_reg_1613}, {ap_const_lv4_0}};

assign tmp_6_fu_897_p4 = {{pivot_to_int_fu_893_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_70_fu_1181_p2 = (tmp_77_cast_fu_1177_p1 + tmp_3_cast_reg_1420);

assign tmp_71_cast_fu_1084_p1 = tmp_64_fu_1076_p3;

assign tmp_71_fu_1208_p1 = w_2_to_int_fu_1194_p1[22:0];

assign tmp_72_cast_fu_1093_p1 = tmp_65_fu_1088_p2;

assign tmp_72_fu_1269_p2 = (tmp_77_cast_reg_1624 + tmp_20_cast_reg_1675);

assign tmp_73_cast_fu_1125_p1 = tmp_66_reg_1592;

assign tmp_77_cast_fu_1177_p1 = tmp_69_fu_1170_p3;

assign tmp_78_cast_fu_1186_p1 = tmp_70_fu_1181_p2;

assign tmp_79_cast_fu_1273_p1 = tmp_72_reg_1681;

assign tmp_7_cast14_cast_fu_1312_p1 = reg_609;

assign tmp_7_fu_1307_p1 = work_q1;

assign tmp_8_fu_1301_p2 = ((work_q1 == i_4_reg_516) ? 1'b1 : 1'b0);

assign tmp_9_fu_888_p1 = r_fu_126[1:0];

assign tmp_cast_fu_1297_p1 = i_4_reg_516;

assign tmp_fu_652_p1 = i_reg_424;

assign tmp_s_fu_1292_p1 = i_4_reg_516;

assign w_2_to_int_fu_1194_p1 = reg_620;

assign w_4_fu_768_p3 = ((tmp_37_fu_752_p2[0:0] === 1'b1) ? reg_603 : f_1_fu_764_p1);

assign w_4_to_int_fu_776_p1 = w_4_reg_1436;

assign wmax_1_fu_859_p3 = ((tmp_46_reg_1443[0:0] === 1'b1) ? ap_pipeline_reg_pp0_iter4_w_4_reg_1436 : wmax_reg_448);

assign wmax_to_int_fu_793_p1 = wmax_phi_fu_452_p4;

always @ (posedge ap_clk) begin
    i_5_cast_reg_1409[31:5] <= 27'b000000000000000000000000000;
    tmp_3_reg_1415[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_3_cast_reg_1420[6:5] <= 2'b00;
    tmp_29_cast_reg_1482[3:0] <= 4'b0000;
    tmp_29_cast_reg_1482[6] <= 1'b0;
    work_addr_3_reg_1494[8:5] <= 4'b0000;
    tmp_52_cast_reg_1511[3:0] <= 4'b0000;
    tmp_52_cast_reg_1511[6] <= 1'b0;
    arrayNo2_cast_cast_reg_1516[29:3] <= 27'b000000000000000000000000000;
    tmp_10_cast_reg_1530[6:5] <= 2'b00;
    tmp_71_cast_reg_1547[3:0] <= 4'b0000;
    tmp_71_cast_reg_1547[6] <= 1'b0;
    arrayNo3_cast_cast1_reg_1572[29:3] <= 27'b000000000000000000000000000;
    tmp_11_cast_reg_1586[6:5] <= 2'b00;
    arrayNo5_cast_cast1_reg_1619[29:3] <= 27'b000000000000000000000000000;
    tmp_77_cast_reg_1624[3:0] <= 4'b0000;
    tmp_77_cast_reg_1624[6] <= 1'b0;
    tmp_20_cast_reg_1675[6:5] <= 2'b00;
    tmp_cast_reg_1748[6:5] <= 2'b00;
    work_addr_1_reg_1754[8:5] <= 4'b0000;
    work_addr_2_reg_1763[8:5] <= 4'b0000;
    tmp_7_cast14_cast_reg_1774[6:5] <= 2'b00;
    tmp_48_reg_1783[29:3] <= 27'b000000000000000000000000000;
end

endmodule //minver_hwa
