-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity minver_hwa is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of minver_hwa is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "minver_hwa,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.265500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=2614,HLS_SYN_LUT=3263}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv64_3EB0C6F7A0B5ED8D : STD_LOGIC_VECTOR (63 downto 0) := "0011111010110000110001101111011110100000101101011110110110001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wmax_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter1_r_1_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter2_r_1_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter3_r_1_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal work_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_522 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal work_q1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal exitcond4_reg_1569 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_CS_fsm_state86 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal i_1_fu_547_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1362 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_571_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_1366 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_cast_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1377 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_reg_1382 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond6_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond6_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond6_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond6_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_1404 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal n_assign_1_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_1_reg_1409 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_4_fu_703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_4_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter3_w_4_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_1423 : STD_LOGIC_VECTOR (0 downto 0);
    signal wmax_1_fu_793_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal r_load_reg_1434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_54_cast_fu_823_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_cast_reg_1440 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp1_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_1455 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pivot_reg_1460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal api_fu_905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal api_reg_1468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_5_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1473 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_32_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_3_reg_1486 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_addr_4_reg_1492 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_62_cast_fu_973_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_cast_reg_1498 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_1508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal j_3_fu_983_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_1512 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_0_addr_4_reg_1517 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_65_fu_1004_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_reg_1522 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_1_addr_4_reg_1527 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_0_addr_6_reg_1532 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal a_1_addr_6_reg_1537 : STD_LOGIC_VECTOR (6 downto 0);
    signal w_1_fu_1014_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_reg_1542 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_cast_fu_1033_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_cast_reg_1548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal a_0_addr_7_reg_1554 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_1_addr_7_reg_1559 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp4_reg_1564 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal i_8_fu_1054_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_1573 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter1_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter2_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter3_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter4_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter5_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter6_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter7_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter8_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter9_a_0_addr_5_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter1_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter2_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter3_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter4_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter5_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter6_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter7_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter8_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_pipeline_reg_pp2_iter9_a_1_addr_5_reg_1583 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_9_fu_1081_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_9_reg_1591 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_15_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1596 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_cast_fu_1105_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_cast_reg_1600 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_0_addr_8_reg_1605 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_1_addr_8_reg_1610 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp5_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp5_reg_1615 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_515_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_reg_1620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal w_2_to_int_fu_1136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_to_int_reg_1627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_51_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_reg_1632 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_1183_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_reg_1639 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_20_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1644 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_1210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_reg_1653 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_1220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_addr_10_reg_1668 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal a_1_addr_10_reg_1673 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1678 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal a_load_8_phi_reg_1683 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_19_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal i_7_fu_1236_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_1703 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal tmp_cast_fu_1247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_reg_1708 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_1_reg_1713 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_addr_2_reg_1722 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_load_1_reg_1728 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal a_0_addr_2_reg_1733 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal a_0_addr_3_reg_1738 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_1_addr_2_reg_1743 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_1_addr_3_reg_1748 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp2_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_1753 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1759 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal j_4_fu_1327_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_reg_1763 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_0_load_2_reg_1768 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal a_1_load_2_reg_1773 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fu_1333_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_reg_1778 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal work_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce0 : STD_LOGIC;
    signal work_we0 : STD_LOGIC;
    signal work_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal work_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce1 : STD_LOGIC;
    signal work_we1 : STD_LOGIC;
    signal work_d1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_336 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_348 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal wmax_phi_fu_364_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_phi_fu_375_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_382 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_2_phi_fu_397_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_404 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal j_1_reg_415 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal i_4_reg_426 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_438 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal tmp_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_cast_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_cast_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_cast_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_cast_fu_1114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_cast_fu_1204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_cast_fu_1225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_fu_1287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_cast_fu_1299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_2_fu_799_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal a_load_4_phi_fu_1338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_457_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_465_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_fu_595_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_41_fu_599_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_58_cast_fu_607_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_628_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_1_to_int_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_655_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_665_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_4_to_int_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wmax_to_int_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_713_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_fu_723_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_731_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_741_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_811_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_815_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_827_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_838_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal pivot_to_int_fu_854_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_857_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_867_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i1_fu_895_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_to_int_fu_916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_919_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_929_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_961_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_61_fu_965_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_cast_fu_989_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_993_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_1021_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_67_fu_1025_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_68_fu_1037_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_cast_fu_1060_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_fu_1064_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_1093_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_72_fu_1097_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_73_fu_1109_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_74_fu_1120_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_47_fu_1139_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_fu_1149_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_cast_fu_1195_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_1199_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_neg_fu_1215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_1266_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_57_fu_1270_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_65_cast3_cast_fu_1278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_1282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_cast_cast_fu_1262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_fu_1293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_fu_1305_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_465_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);

    component minver_hwa_fsub_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component minver_hwa_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component minver_hwa_fdiv_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component minver_hwa_fpext_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_hwa_fcmp_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component minver_hwa_dcmp_6g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component minver_hwa_work IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (4 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    work_U : component minver_hwa_work
    generic map (
        DataWidth => 5,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => work_address0,
        ce0 => work_ce0,
        we0 => work_we0,
        d0 => work_d0,
        q0 => work_q0,
        address1 => work_address1,
        ce1 => work_ce1,
        we1 => work_we1,
        d1 => work_d1,
        q1 => work_q1);

    minver_hwa_fsub_3bkb_U1 : component minver_hwa_fsub_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_8_phi_reg_1683,
        din1 => tmp_22_reg_1678,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p2);

    minver_hwa_fmul_3cud_U2 : component minver_hwa_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_2_reg_1620,
        din1 => reg_529,
        ce => ap_const_logic_1,
        dout => grp_fu_453_p2);

    minver_hwa_fdiv_3dEe_U3 : component minver_hwa_fdiv_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_457_p0,
        din1 => pivot_reg_1460,
        ce => ap_const_logic_1,
        dout => grp_fu_457_p2);

    minver_hwa_fpext_eOg_U4 : component minver_hwa_fpext_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => api_reg_1468,
        dout => tmp_5_fu_462_p1);

    minver_hwa_fcmp_3fYi_U5 : component minver_hwa_fcmp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_465_p0,
        din1 => ap_const_lv32_0,
        opcode => grp_fu_465_opcode,
        dout => grp_fu_465_p2);

    minver_hwa_fcmp_3fYi_U6 : component minver_hwa_fcmp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => w_4_reg_1416,
        din1 => wmax_phi_fu_364_p4,
        opcode => ap_const_lv5_2,
        dout => tmp_45_fu_470_p2);

    minver_hwa_dcmp_6g8j_U7 : component minver_hwa_dcmp_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_5_reg_1473,
        din1 => ap_const_lv64_3EB0C6F7A0B5ED8D,
        opcode => ap_const_lv5_5,
        dout => tmp_31_fu_475_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond6_fu_589_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_563_p3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_fu_589_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_563_p3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond6_fu_589_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = exitcond4_fu_1048_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (exitcond4_reg_1569 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and not((exitcond4_reg_1569 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_2_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_reg_1569 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                i_2_reg_393 <= i_8_reg_1573;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                i_2_reg_393 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state40))) then 
                i_3_reg_404 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state71))) then 
                i_3_reg_404 <= i_9_reg_1591;
            end if; 
        end if;
    end process;

    i_4_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_2_fu_563_p3)))) then 
                i_4_reg_426 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state90) and not((ap_const_lv1_0 = tmp_8_fu_1251_p2)))) then 
                i_4_reg_426 <= i_7_reg_1703;
            end if; 
        end if;
    end process;

    i_5_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond7_fu_541_p2)))) then 
                i_5_reg_348 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state87))) then 
                i_5_reg_348 <= k_reg_1366;
            end if; 
        end if;
    end process;

    i_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond7_fu_541_p2))) then 
                i_reg_336 <= i_1_fu_547_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_336 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_1_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43) and (ap_const_lv1_0 = tmp_51_fu_1171_p2))) then 
                j_1_reg_415 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
                j_1_reg_415 <= j_5_reg_1639;
            end if; 
        end if;
    end process;

    j_2_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state96) and (ap_const_lv1_0 = exitcond_reg_1759))) then 
                j_2_reg_438 <= j_4_reg_1763;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state92))) then 
                j_2_reg_438 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond5_reg_1508))) then 
                j_reg_382 <= j_3_reg_1512;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
                j_reg_382 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r_1_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_563_p3))) then 
                r_1_reg_372 <= i_5_cast_fu_577_p1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_reg_1390) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                r_1_reg_372 <= i_6_reg_1404;
            end if; 
        end if;
    end process;

    r_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1390))) then 
                r_fu_112 <= r_2_fu_799_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond7_fu_541_p2)))) then 
                r_fu_112 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state90))) then 
                reg_522 <= work_q1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                reg_522 <= work_q0;
            end if; 
        end if;
    end process;

    wmax_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_563_p3))) then 
                wmax_reg_360 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1390))) then 
                wmax_reg_360 <= wmax_1_fu_793_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state48))) then
                a_0_addr_10_reg_1668 <= tmp_80_cast_fu_1225_p1(7 - 1 downto 0);
                a_1_addr_10_reg_1673 <= tmp_80_cast_fu_1225_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state92))) then
                a_0_addr_2_reg_1733 <= tmp_66_cast_fu_1287_p1(7 - 1 downto 0);
                a_0_addr_3_reg_1738 <= tmp_67_cast_fu_1299_p1(7 - 1 downto 0);
                a_1_addr_2_reg_1743 <= tmp_66_cast_fu_1287_p1(7 - 1 downto 0);
                a_1_addr_3_reg_1748 <= tmp_67_cast_fu_1299_p1(7 - 1 downto 0);
                icmp2_reg_1753 <= icmp2_fu_1315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond5_fu_977_p2))) then
                a_0_addr_4_reg_1517 <= tmp_68_cast_fu_998_p1(7 - 1 downto 0);
                a_1_addr_4_reg_1527 <= tmp_68_cast_fu_998_p1(7 - 1 downto 0);
                tmp_65_reg_1522 <= tmp_65_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond4_fu_1048_p2))) then
                a_0_addr_5_reg_1578 <= tmp_74_cast_fu_1069_p1(7 - 1 downto 0);
                a_1_addr_5_reg_1583 <= tmp_74_cast_fu_1069_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                a_0_addr_6_reg_1532 <= tmp_69_cast_fu_1009_p1(7 - 1 downto 0);
                a_1_addr_6_reg_1537 <= tmp_69_cast_fu_1009_p1(7 - 1 downto 0);
                w_1_reg_1542 <= w_1_fu_1014_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                a_0_addr_7_reg_1554 <= tmp_73_cast_fu_1042_p1(7 - 1 downto 0);
                a_1_addr_7_reg_1559 <= tmp_73_cast_fu_1042_p1(7 - 1 downto 0);
                icmp4_reg_1564 <= grp_fu_502_p2;
                    tmp_72_cast_reg_1548(6 downto 4) <= tmp_72_cast_fu_1033_p1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state41) and (ap_const_lv1_0 = exitcond3_fu_1075_p2) and (ap_const_lv1_0 = tmp_15_fu_1087_p2))) then
                a_0_addr_8_reg_1605 <= tmp_78_cast_fu_1114_p1(7 - 1 downto 0);
                a_1_addr_8_reg_1610 <= tmp_78_cast_fu_1114_p1(7 - 1 downto 0);
                icmp5_reg_1615 <= icmp5_fu_1130_p2;
                    tmp_77_cast_reg_1600(6 downto 4) <= tmp_77_cast_fu_1105_p1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state94) and not((ap_const_lv1_0 = icmp2_reg_1753)))) then
                a_0_load_2_reg_1768 <= a_0_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state94) and (ap_const_lv1_0 = icmp2_reg_1753))) then
                a_1_load_2_reg_1773 <= a_1_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then
                a_load_8_phi_reg_1683 <= grp_fu_515_p3;
                tmp_22_reg_1678 <= grp_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond6_reg_1390 <= exitcond6_reg_1390;
                ap_pipeline_reg_pp0_iter1_r_1_reg_372 <= r_1_reg_372;
                exitcond6_reg_1390 <= exitcond6_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                ap_pipeline_reg_pp0_iter2_exitcond6_reg_1390 <= ap_pipeline_reg_pp0_iter1_exitcond6_reg_1390;
                ap_pipeline_reg_pp0_iter2_r_1_reg_372 <= ap_pipeline_reg_pp0_iter1_r_1_reg_372;
                ap_pipeline_reg_pp0_iter3_exitcond6_reg_1390 <= ap_pipeline_reg_pp0_iter2_exitcond6_reg_1390;
                ap_pipeline_reg_pp0_iter3_r_1_reg_372 <= ap_pipeline_reg_pp0_iter2_r_1_reg_372;
                ap_pipeline_reg_pp0_iter3_w_4_reg_1416 <= w_4_reg_1416;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0))) then
                ap_pipeline_reg_pp2_iter1_a_0_addr_5_reg_1578 <= a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter1_a_1_addr_5_reg_1583 <= a_1_addr_5_reg_1583;
                ap_pipeline_reg_pp2_iter2_a_0_addr_5_reg_1578 <= ap_pipeline_reg_pp2_iter1_a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter2_a_1_addr_5_reg_1583 <= ap_pipeline_reg_pp2_iter1_a_1_addr_5_reg_1583;
                ap_pipeline_reg_pp2_iter3_a_0_addr_5_reg_1578 <= ap_pipeline_reg_pp2_iter2_a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter3_a_1_addr_5_reg_1583 <= ap_pipeline_reg_pp2_iter2_a_1_addr_5_reg_1583;
                ap_pipeline_reg_pp2_iter4_a_0_addr_5_reg_1578 <= ap_pipeline_reg_pp2_iter3_a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter4_a_1_addr_5_reg_1583 <= ap_pipeline_reg_pp2_iter3_a_1_addr_5_reg_1583;
                ap_pipeline_reg_pp2_iter5_a_0_addr_5_reg_1578 <= ap_pipeline_reg_pp2_iter4_a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter5_a_1_addr_5_reg_1583 <= ap_pipeline_reg_pp2_iter4_a_1_addr_5_reg_1583;
                ap_pipeline_reg_pp2_iter6_a_0_addr_5_reg_1578 <= ap_pipeline_reg_pp2_iter5_a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter6_a_1_addr_5_reg_1583 <= ap_pipeline_reg_pp2_iter5_a_1_addr_5_reg_1583;
                ap_pipeline_reg_pp2_iter7_a_0_addr_5_reg_1578 <= ap_pipeline_reg_pp2_iter6_a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter7_a_1_addr_5_reg_1583 <= ap_pipeline_reg_pp2_iter6_a_1_addr_5_reg_1583;
                ap_pipeline_reg_pp2_iter8_a_0_addr_5_reg_1578 <= ap_pipeline_reg_pp2_iter7_a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter8_a_1_addr_5_reg_1583 <= ap_pipeline_reg_pp2_iter7_a_1_addr_5_reg_1583;
                ap_pipeline_reg_pp2_iter9_a_0_addr_5_reg_1578 <= ap_pipeline_reg_pp2_iter8_a_0_addr_5_reg_1578;
                ap_pipeline_reg_pp2_iter9_a_1_addr_5_reg_1583 <= ap_pipeline_reg_pp2_iter8_a_1_addr_5_reg_1583;
                exitcond4_reg_1569 <= exitcond4_fu_1048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                api_reg_1468 <= api_fu_905_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                exitcond5_reg_1508 <= exitcond5_fu_977_p2;
                j_3_reg_1512 <= j_3_fu_983_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state93))) then
                exitcond_reg_1759 <= exitcond_fu_1321_p2;
                j_4_reg_1763 <= j_4_fu_1327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_563_p3))) then
                    i_5_cast_reg_1371(4 downto 0) <= i_5_cast_fu_577_p1(4 downto 0);
                    tmp_3_cast_reg_1382(4 downto 0) <= tmp_3_cast_fu_585_p1(4 downto 0);
                    tmp_3_reg_1377(4 downto 0) <= tmp_3_fu_581_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_fu_589_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_6_reg_1404 <= i_6_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state88))) then
                i_7_reg_1703 <= i_7_fu_1236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp2_stage0))) then
                i_8_reg_1573 <= i_8_fu_1054_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state41))) then
                i_9_reg_1591 <= i_9_fu_1081_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                icmp1_reg_1455 <= icmp1_fu_848_p2;
                r_load_reg_1434 <= r_fu_112;
                    tmp_54_cast_reg_1440(6 downto 4) <= tmp_54_cast_fu_823_p1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                icmp3_reg_1503 <= grp_fu_502_p2;
                    tmp_62_cast_reg_1498(6 downto 4) <= tmp_62_cast_fu_973_p1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then
                j_5_reg_1639 <= j_5_fu_1183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                k_reg_1366 <= k_fu_571_p2;
                tmp_2_reg_1362 <= i_5_reg_348(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_reg_1390))) then
                n_assign_1_reg_1409 <= n_assign_1_fu_644_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                pivot_reg_1460 <= grp_fu_483_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (exitcond4_reg_1569 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state45)))) then
                reg_529 <= grp_fu_508_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8)) or ((ap_const_lv1_1 = ap_CS_fsm_state86)))) then
                reg_535 <= grp_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state41) and (ap_const_lv1_0 = exitcond3_fu_1075_p2))) then
                tmp_15_reg_1596 <= tmp_15_fu_1087_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state70))) then
                tmp_19_reg_1694 <= grp_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = exitcond2_fu_1177_p2))) then
                tmp_20_reg_1644 <= tmp_20_fu_1189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54))) then
                tmp_23_reg_1688 <= grp_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond6_reg_1390)) then
                tmp_46_reg_1423 <= tmp_46_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then
                tmp_51_reg_1632 <= tmp_51_fu_1171_p2;
                w_2_to_int_reg_1627 <= w_2_to_int_fu_1136_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                tmp_5_reg_1473 <= tmp_5_fu_462_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = exitcond2_fu_1177_p2) and (ap_const_lv1_0 = tmp_20_fu_1189_p2))) then
                tmp_77_reg_1653 <= tmp_77_fu_1210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state88) and (ap_const_lv1_0 = exitcond1_fu_1230_p2))) then
                    tmp_cast_reg_1708(4 downto 0) <= tmp_cast_fu_1247_p1(4 downto 0);
                    work_addr_1_reg_1713(4 downto 0) <= tmp_s_fu_1242_p1(9 - 1 downto 0)(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then
                w_2_reg_1620 <= grp_fu_515_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond6_reg_1390)) then
                w_4_reg_1416 <= w_4_fu_703_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state95))) then
                w_reg_1778 <= w_fu_1333_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state90) and (ap_const_lv1_0 = tmp_8_fu_1251_p2))) then
                    work_addr_2_reg_1722(4 downto 0) <= tmp_10_fu_1257_p1(9 - 1 downto 0)(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_2_reg_1362) and (ap_const_lv1_0 = tmp_32_fu_951_p2) and (ap_const_lv1_0 = tmp_1_fu_957_p2))) then
                    work_addr_3_reg_1486(4 downto 0) <= tmp_3_reg_1377(9 - 1 downto 0)(4 downto 0);
                work_addr_4_reg_1492 <= tmp_4_fu_912_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state91))) then
                work_load_1_reg_1728 <= work_q0;
            end if;
        end if;
    end process;
    i_5_cast_reg_1371(31 downto 5) <= "000000000000000000000000000";
    tmp_3_reg_1377(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_3_cast_reg_1382(7 downto 5) <= "000";
    tmp_54_cast_reg_1440(3 downto 0) <= "0000";
    tmp_54_cast_reg_1440(7) <= '0';
    work_addr_3_reg_1486(8 downto 5) <= "0000";
    tmp_62_cast_reg_1498(3 downto 0) <= "0000";
    tmp_62_cast_reg_1498(7) <= '0';
    tmp_72_cast_reg_1548(3 downto 0) <= "0000";
    tmp_72_cast_reg_1548(7) <= '0';
    tmp_77_cast_reg_1600(3 downto 0) <= "0000";
    tmp_77_cast_reg_1600(7) <= '0';
    tmp_cast_reg_1708(7 downto 5) <= "000";
    work_addr_1_reg_1713(8 downto 5) <= "0000";
    work_addr_2_reg_1722(8 downto 5) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter8, tmp_2_fu_563_p3, tmp_2_reg_1362, exitcond6_fu_589_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, tmp_1_fu_957_p2, tmp_32_fu_951_p2, exitcond5_fu_977_p2, exitcond4_fu_1048_p2, tmp_15_fu_1087_p2, exitcond3_fu_1075_p2, tmp_51_fu_1171_p2, tmp_20_fu_1189_p2, exitcond2_fu_1177_p2, exitcond1_fu_1230_p2, tmp_8_fu_1251_p2, exitcond_fu_1321_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter9, exitcond7_fu_541_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_541_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = tmp_2_fu_563_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond6_fu_589_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond6_fu_589_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if ((not((ap_const_lv1_0 = tmp_2_reg_1362)) or not((ap_const_lv1_0 = tmp_32_fu_951_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_lv1_0 = tmp_2_reg_1362) and (ap_const_lv1_0 = tmp_32_fu_951_p2) and not((ap_const_lv1_0 = tmp_1_fu_957_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if ((ap_const_lv1_0 = exitcond5_fu_977_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_1048_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter8))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_lv1_0 = exitcond3_fu_1075_p2) and not((ap_const_lv1_0 = tmp_15_fu_1087_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                elsif (((ap_const_lv1_0 = exitcond3_fu_1075_p2) and (ap_const_lv1_0 = tmp_15_fu_1087_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if ((ap_const_lv1_0 = tmp_51_fu_1171_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_lv1_0 = exitcond2_fu_1177_p2) and not((ap_const_lv1_0 = tmp_20_fu_1189_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                elsif (((ap_const_lv1_0 = exitcond2_fu_1177_p2) and (ap_const_lv1_0 = tmp_20_fu_1189_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state88 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_1230_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (not((ap_const_lv1_0 = tmp_8_fu_1251_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if ((ap_const_lv1_0 = exitcond_fu_1321_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_state16, a_0_addr_4_reg_1517, a_0_addr_6_reg_1532, ap_CS_fsm_state17, a_0_addr_7_reg_1554, ap_CS_fsm_pp2_stage0, ap_pipeline_reg_pp2_iter9_a_0_addr_5_reg_1578, ap_CS_fsm_state41, a_0_addr_8_reg_1605, ap_CS_fsm_state44, a_0_addr_10_reg_1668, ap_CS_fsm_state48, a_0_addr_2_reg_1733, a_0_addr_3_reg_1738, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_enable_reg_pp2_iter9, ap_CS_fsm_state87, ap_CS_fsm_state19, ap_CS_fsm_state71, ap_CS_fsm_state55, ap_CS_fsm_state96, tmp_59_cast_fu_616_p1, tmp_55_cast_fu_832_p1, tmp_68_cast_fu_998_p1, tmp_69_cast_fu_1009_p1, tmp_74_cast_fu_1069_p1, tmp_78_cast_fu_1114_p1, tmp_79_cast_fu_1204_p1, tmp_80_cast_fu_1225_p1, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state94)) or ((ap_const_lv1_1 = ap_CS_fsm_state96)))) then 
            a_0_Addr_A_orig <= std_logic_vector(resize(unsigned(a_0_addr_3_reg_1738),32));
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state93)) or ((ap_const_lv1_1 = ap_CS_fsm_state95)))) then 
            a_0_Addr_A_orig <= std_logic_vector(resize(unsigned(a_0_addr_2_reg_1733),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state87))) then 
            a_0_Addr_A_orig <= std_logic_vector(resize(unsigned(a_0_addr_7_reg_1554),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state71))) then 
            a_0_Addr_A_orig <= std_logic_vector(resize(unsigned(a_0_addr_8_reg_1605),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            a_0_Addr_A_orig <= std_logic_vector(resize(unsigned(a_0_addr_10_reg_1668),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state48))) then 
            a_0_Addr_A_orig <= tmp_80_cast_fu_1225_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            a_0_Addr_A_orig <= tmp_79_cast_fu_1204_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
            a_0_Addr_A_orig <= tmp_78_cast_fu_1114_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9))) then 
            a_0_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp2_iter9_a_0_addr_5_reg_1578),32));
        elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp2_stage0))) then 
            a_0_Addr_A_orig <= tmp_74_cast_fu_1069_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            a_0_Addr_A_orig <= std_logic_vector(resize(unsigned(a_0_addr_6_reg_1532),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            a_0_Addr_A_orig <= std_logic_vector(resize(unsigned(a_0_addr_4_reg_1517),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            a_0_Addr_A_orig <= tmp_69_cast_fu_1009_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            a_0_Addr_A_orig <= tmp_68_cast_fu_998_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            a_0_Addr_A_orig <= tmp_55_cast_fu_832_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_0_Addr_A_orig <= tmp_59_cast_fu_616_p1(32 - 1 downto 0);
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;

    a_0_Din_A_assign_proc : process(ap_CS_fsm_pp2_stage1, reg_535, grp_fu_483_p3, w_1_reg_1542, tmp_23_reg_1688, tmp_19_reg_1694, w_reg_1778, ap_CS_fsm_state95, ap_enable_reg_pp2_iter9, ap_CS_fsm_state87, ap_CS_fsm_state19, ap_CS_fsm_state71, ap_CS_fsm_state55, ap_CS_fsm_state96, ap_CS_fsm_state18, a_load_4_phi_fu_1338_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state96))) then 
            a_0_Din_A <= w_reg_1778;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state95))) then 
            a_0_Din_A <= a_load_4_phi_fu_1338_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state71))) then 
            a_0_Din_A <= tmp_19_reg_1694;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            a_0_Din_A <= tmp_23_reg_1688;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state87)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9)))) then 
            a_0_Din_A <= reg_535;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            a_0_Din_A <= w_1_reg_1542;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            a_0_Din_A <= grp_fu_483_p3;
        else 
            a_0_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state41, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_enable_reg_pp2_iter9, ap_CS_fsm_state87, ap_CS_fsm_state19, ap_CS_fsm_state71, ap_CS_fsm_state55, ap_CS_fsm_state96, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_state41)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state48)) or ((ap_const_lv1_1 = ap_CS_fsm_state93)) or ((ap_const_lv1_1 = ap_CS_fsm_state94)) or ((ap_const_lv1_1 = ap_CS_fsm_state95)) or ((ap_const_lv1_1 = ap_CS_fsm_state87)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state71)) or ((ap_const_lv1_1 = ap_CS_fsm_state55)) or ((ap_const_lv1_1 = ap_CS_fsm_state96)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9)))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;

    a_0_WEN_A_assign_proc : process(ap_CS_fsm_pp2_stage1, icmp1_reg_1455, icmp3_reg_1503, exitcond5_reg_1508, icmp4_reg_1564, tmp_15_reg_1596, icmp5_reg_1615, tmp_51_reg_1632, tmp_20_reg_1644, icmp2_reg_1753, exitcond_reg_1759, ap_CS_fsm_state95, ap_enable_reg_pp2_iter9, ap_CS_fsm_state87, ap_CS_fsm_state19, ap_CS_fsm_state71, ap_CS_fsm_state55, ap_CS_fsm_state96, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18) and not((ap_const_lv1_0 = icmp3_reg_1503))) or ((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond5_reg_1508) and not((ap_const_lv1_0 = icmp1_reg_1455))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and not((ap_const_lv1_0 = icmp4_reg_1564)) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9)) or ((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = tmp_20_reg_1644) and not((ap_const_lv1_0 = icmp5_reg_1615))) or ((ap_const_lv1_1 = ap_CS_fsm_state71) and not((ap_const_lv1_0 = icmp5_reg_1615)) and (ap_const_lv1_0 = tmp_15_reg_1596) and (ap_const_lv1_0 = tmp_51_reg_1632)) or (not((ap_const_lv1_0 = icmp4_reg_1564)) and (ap_const_lv1_1 = ap_CS_fsm_state87)) or (not((ap_const_lv1_0 = icmp2_reg_1753)) and (ap_const_lv1_1 = ap_CS_fsm_state95)) or (not((ap_const_lv1_0 = icmp2_reg_1753)) and (ap_const_lv1_1 = ap_CS_fsm_state96) and (ap_const_lv1_0 = exitcond_reg_1759)))) then 
            a_0_WEN_A <= ap_const_lv4_F;
        else 
            a_0_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_state16, a_1_addr_4_reg_1527, ap_CS_fsm_state17, a_1_addr_6_reg_1537, a_1_addr_7_reg_1559, ap_CS_fsm_pp2_stage0, ap_pipeline_reg_pp2_iter9_a_1_addr_5_reg_1583, ap_CS_fsm_state41, a_1_addr_8_reg_1610, ap_CS_fsm_state44, ap_CS_fsm_state48, a_1_addr_10_reg_1673, a_1_addr_2_reg_1743, a_1_addr_3_reg_1748, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_enable_reg_pp2_iter9, ap_CS_fsm_state87, ap_CS_fsm_state19, ap_CS_fsm_state71, ap_CS_fsm_state55, ap_CS_fsm_state96, tmp_59_cast_fu_616_p1, tmp_55_cast_fu_832_p1, tmp_68_cast_fu_998_p1, tmp_69_cast_fu_1009_p1, tmp_74_cast_fu_1069_p1, tmp_78_cast_fu_1114_p1, tmp_79_cast_fu_1204_p1, tmp_80_cast_fu_1225_p1, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state94)) or ((ap_const_lv1_1 = ap_CS_fsm_state96)))) then 
            a_1_Addr_A_orig <= std_logic_vector(resize(unsigned(a_1_addr_3_reg_1748),32));
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state93)) or ((ap_const_lv1_1 = ap_CS_fsm_state95)))) then 
            a_1_Addr_A_orig <= std_logic_vector(resize(unsigned(a_1_addr_2_reg_1743),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state87))) then 
            a_1_Addr_A_orig <= std_logic_vector(resize(unsigned(a_1_addr_7_reg_1559),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state71))) then 
            a_1_Addr_A_orig <= std_logic_vector(resize(unsigned(a_1_addr_8_reg_1610),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            a_1_Addr_A_orig <= std_logic_vector(resize(unsigned(a_1_addr_10_reg_1673),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state48))) then 
            a_1_Addr_A_orig <= tmp_80_cast_fu_1225_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            a_1_Addr_A_orig <= tmp_79_cast_fu_1204_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
            a_1_Addr_A_orig <= tmp_78_cast_fu_1114_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9))) then 
            a_1_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp2_iter9_a_1_addr_5_reg_1583),32));
        elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp2_stage0))) then 
            a_1_Addr_A_orig <= tmp_74_cast_fu_1069_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            a_1_Addr_A_orig <= std_logic_vector(resize(unsigned(a_1_addr_6_reg_1537),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            a_1_Addr_A_orig <= std_logic_vector(resize(unsigned(a_1_addr_4_reg_1527),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            a_1_Addr_A_orig <= tmp_69_cast_fu_1009_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            a_1_Addr_A_orig <= tmp_68_cast_fu_998_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            a_1_Addr_A_orig <= tmp_55_cast_fu_832_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_1_Addr_A_orig <= tmp_59_cast_fu_616_p1(32 - 1 downto 0);
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;

    a_1_Din_A_assign_proc : process(ap_CS_fsm_pp2_stage1, reg_535, grp_fu_483_p3, w_1_reg_1542, tmp_23_reg_1688, tmp_19_reg_1694, w_reg_1778, ap_CS_fsm_state95, ap_enable_reg_pp2_iter9, ap_CS_fsm_state87, ap_CS_fsm_state19, ap_CS_fsm_state71, ap_CS_fsm_state55, ap_CS_fsm_state96, ap_CS_fsm_state18, a_load_4_phi_fu_1338_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state96))) then 
            a_1_Din_A <= w_reg_1778;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state95))) then 
            a_1_Din_A <= a_load_4_phi_fu_1338_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state71))) then 
            a_1_Din_A <= tmp_19_reg_1694;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state55))) then 
            a_1_Din_A <= tmp_23_reg_1688;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state87)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9)))) then 
            a_1_Din_A <= reg_535;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            a_1_Din_A <= w_1_reg_1542;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            a_1_Din_A <= grp_fu_483_p3;
        else 
            a_1_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state41, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_enable_reg_pp2_iter9, ap_CS_fsm_state87, ap_CS_fsm_state19, ap_CS_fsm_state71, ap_CS_fsm_state55, ap_CS_fsm_state96, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_state41)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state48)) or ((ap_const_lv1_1 = ap_CS_fsm_state93)) or ((ap_const_lv1_1 = ap_CS_fsm_state94)) or ((ap_const_lv1_1 = ap_CS_fsm_state95)) or ((ap_const_lv1_1 = ap_CS_fsm_state87)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state71)) or ((ap_const_lv1_1 = ap_CS_fsm_state55)) or ((ap_const_lv1_1 = ap_CS_fsm_state96)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9)))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;

    a_1_WEN_A_assign_proc : process(ap_CS_fsm_pp2_stage1, icmp1_reg_1455, icmp3_reg_1503, exitcond5_reg_1508, icmp4_reg_1564, tmp_15_reg_1596, icmp5_reg_1615, tmp_51_reg_1632, tmp_20_reg_1644, icmp2_reg_1753, exitcond_reg_1759, ap_CS_fsm_state95, ap_enable_reg_pp2_iter9, ap_CS_fsm_state87, ap_CS_fsm_state19, ap_CS_fsm_state71, ap_CS_fsm_state55, ap_CS_fsm_state96, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = icmp3_reg_1503)) or ((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond5_reg_1508) and (ap_const_lv1_0 = icmp1_reg_1455)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage1) and (ap_const_lv1_0 = icmp4_reg_1564) and (ap_const_logic_1 = ap_enable_reg_pp2_iter9)) or ((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_lv1_0 = tmp_20_reg_1644) and (ap_const_lv1_0 = icmp5_reg_1615)) or ((ap_const_lv1_1 = ap_CS_fsm_state71) and (ap_const_lv1_0 = icmp5_reg_1615) and (ap_const_lv1_0 = tmp_15_reg_1596) and (ap_const_lv1_0 = tmp_51_reg_1632)) or ((ap_const_lv1_0 = icmp4_reg_1564) and (ap_const_lv1_1 = ap_CS_fsm_state87)) or ((ap_const_lv1_0 = icmp2_reg_1753) and (ap_const_lv1_1 = ap_CS_fsm_state95)) or ((ap_const_lv1_0 = icmp2_reg_1753) and (ap_const_lv1_1 = ap_CS_fsm_state96) and (ap_const_lv1_0 = exitcond_reg_1759)))) then 
            a_1_WEN_A <= ap_const_lv4_F;
        else 
            a_1_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    a_load_4_phi_fu_1338_p3 <= 
        a_0_Dout_A when (icmp2_reg_1753(0) = '1') else 
        a_1_Dout_A;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state15 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state16 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state17 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state18 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state19 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state40 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state41 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state42 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state43 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state44 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state45 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state46 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state48 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state49 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state50 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state54 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state55 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state70 <= ap_CS_fsm(48 downto 48);
    ap_CS_fsm_state71 <= ap_CS_fsm(49 downto 49);
    ap_CS_fsm_state86 <= ap_CS_fsm(64 downto 64);
    ap_CS_fsm_state87 <= ap_CS_fsm(65 downto 65);
    ap_CS_fsm_state88 <= ap_CS_fsm(66 downto 66);
    ap_CS_fsm_state89 <= ap_CS_fsm(67 downto 67);
    ap_CS_fsm_state9 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state90 <= ap_CS_fsm(68 downto 68);
    ap_CS_fsm_state91 <= ap_CS_fsm(69 downto 69);
    ap_CS_fsm_state92 <= ap_CS_fsm(70 downto 70);
    ap_CS_fsm_state93 <= ap_CS_fsm(71 downto 71);
    ap_CS_fsm_state94 <= ap_CS_fsm(72 downto 72);
    ap_CS_fsm_state95 <= ap_CS_fsm(73 downto 73);
    ap_CS_fsm_state96 <= ap_CS_fsm(74 downto 74);

    ap_done_assign_proc : process(tmp_2_reg_1362, ap_CS_fsm_state13, tmp_32_fu_951_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (not((ap_const_lv1_0 = tmp_2_reg_1362)) or not((ap_const_lv1_0 = tmp_32_fu_951_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_2_reg_1362, ap_CS_fsm_state13, tmp_32_fu_951_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (not((ap_const_lv1_0 = tmp_2_reg_1362)) or not((ap_const_lv1_0 = tmp_32_fu_951_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_1;
    api_fu_905_p3 <= 
        pivot_reg_1460 when (tmp_27_fu_889_p2(0) = '1') else 
        f_fu_901_p1;
    exitcond1_fu_1230_p2 <= "1" when (i_4_reg_426 = ap_const_lv5_10) else "0";
    exitcond2_fu_1177_p2 <= "1" when (j_1_reg_415 = ap_const_lv5_10) else "0";
    exitcond3_fu_1075_p2 <= "1" when (i_3_reg_404 = ap_const_lv5_10) else "0";
    exitcond4_fu_1048_p2 <= "1" when (i_2_phi_fu_397_p4 = ap_const_lv5_10) else "0";
    exitcond5_fu_977_p2 <= "1" when (j_reg_382 = ap_const_lv5_10) else "0";
    exitcond6_fu_589_p2 <= "1" when (r_1_phi_fu_375_p4 = ap_const_lv32_10) else "0";
    exitcond7_fu_541_p2 <= "1" when (i_reg_336 = ap_const_lv5_10) else "0";
    exitcond_fu_1321_p2 <= "1" when (j_2_reg_438 = ap_const_lv5_10) else "0";
    f_1_fu_699_p1 <= f_neg_i_fu_693_p2;
    f_fu_901_p1 <= f_neg_i1_fu_895_p2;
    f_neg_i1_fu_895_p2 <= (pivot_to_int_fu_854_p1 xor ap_const_lv32_80000000);
    f_neg_i_fu_693_p2 <= (n_assign_1_to_int_fu_652_p1 xor ap_const_lv32_80000000);

    grp_fu_457_p0_assign_proc : process(reg_529, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state41, ap_CS_fsm_state44, tmp_18_fu_1220_p1, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            grp_fu_457_p0 <= tmp_18_fu_1220_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
            grp_fu_457_p0 <= ap_const_lv32_3F800000;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            grp_fu_457_p0 <= reg_529;
        else 
            grp_fu_457_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_465_opcode_assign_proc : process(ap_pipeline_reg_pp0_iter1_exitcond6_reg_1390, ap_CS_fsm_state11, ap_CS_fsm_state43, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            grp_fu_465_opcode <= ap_const_lv5_1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond6_reg_1390) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            grp_fu_465_opcode <= ap_const_lv5_3;
        else 
            grp_fu_465_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_465_p0_assign_proc : process(n_assign_1_reg_1409, pivot_reg_1460, ap_CS_fsm_state11, w_2_reg_1620, ap_CS_fsm_state43, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            grp_fu_465_p0 <= w_2_reg_1620;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            grp_fu_465_p0 <= pivot_reg_1460;
        elsif ((ap_const_logic_1 = ap_enable_reg_pp0_iter2)) then 
            grp_fu_465_p0 <= n_assign_1_reg_1409;
        else 
            grp_fu_465_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_483_p3 <= 
        a_0_Dout_A when (icmp1_reg_1455(0) = '1') else 
        a_1_Dout_A;
    grp_fu_492_p4 <= i_5_reg_348(4 downto 3);
    grp_fu_502_p2 <= "1" when (grp_fu_492_p4 = ap_const_lv2_0) else "0";
    grp_fu_508_p3 <= 
        a_0_Dout_A when (icmp4_reg_1564(0) = '1') else 
        a_1_Dout_A;
    grp_fu_515_p3 <= 
        a_0_Dout_A when (icmp5_reg_1615(0) = '1') else 
        a_1_Dout_A;
    i_1_fu_547_p2 <= std_logic_vector(unsigned(i_reg_336) + unsigned(ap_const_lv5_1));

    i_2_phi_fu_397_p4_assign_proc : process(i_2_reg_393, exitcond4_reg_1569, ap_CS_fsm_pp2_stage0, i_8_reg_1573, ap_enable_reg_pp2_iter1)
    begin
        if (((exitcond4_reg_1569 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            i_2_phi_fu_397_p4 <= i_8_reg_1573;
        else 
            i_2_phi_fu_397_p4 <= i_2_reg_393;
        end if; 
    end process;

    i_5_cast_fu_577_p1 <= std_logic_vector(resize(unsigned(i_5_reg_348),32));
    i_6_fu_622_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(r_1_phi_fu_375_p4));
    i_7_fu_1236_p2 <= std_logic_vector(unsigned(i_4_reg_426) + unsigned(ap_const_lv5_1));
    i_8_fu_1054_p2 <= std_logic_vector(unsigned(i_2_phi_fu_397_p4) + unsigned(ap_const_lv5_1));
    i_9_fu_1081_p2 <= std_logic_vector(unsigned(i_3_reg_404) + unsigned(ap_const_lv5_1));
    icmp1_fu_848_p2 <= "1" when (tmp_21_fu_838_p4 = ap_const_lv29_0) else "0";
    icmp2_fu_1315_p2 <= "1" when (tmp_60_fu_1305_p4 = ap_const_lv2_0) else "0";
    icmp5_fu_1130_p2 <= "1" when (tmp_74_fu_1120_p4 = ap_const_lv2_0) else "0";
    icmp_fu_638_p2 <= "1" when (tmp_52_fu_628_p4 = ap_const_lv29_0) else "0";
    j_3_fu_983_p2 <= std_logic_vector(unsigned(j_reg_382) + unsigned(ap_const_lv5_1));
    j_4_fu_1327_p2 <= std_logic_vector(unsigned(j_2_reg_438) + unsigned(ap_const_lv5_1));
    j_5_fu_1183_p2 <= std_logic_vector(unsigned(j_1_reg_415) + unsigned(ap_const_lv5_1));
    k_fu_571_p2 <= std_logic_vector(unsigned(i_5_reg_348) + unsigned(ap_const_lv5_1));
    n_assign_1_fu_644_p3 <= 
        a_0_Dout_A when (icmp_fu_638_p2(0) = '1') else 
        a_1_Dout_A;
    n_assign_1_to_int_fu_652_p1 <= n_assign_1_reg_1409;
    notlhs1_fu_871_p2 <= "0" when (tmp_6_fu_857_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_933_p2 <= "0" when (tmp_28_fu_919_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_745_p2 <= "0" when (tmp_38_fu_713_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_763_p2 <= "0" when (tmp_40_fu_731_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_1153_p2 <= "0" when (tmp_47_fu_1139_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_669_p2 <= "0" when (tmp_33_fu_655_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_877_p2 <= "1" when (tmp_29_fu_867_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_939_p2 <= "1" when (tmp_34_fu_929_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_751_p2 <= "1" when (tmp_54_fu_723_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_769_p2 <= "1" when (tmp_55_fu_741_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_1159_p2 <= "1" when (tmp_75_fu_1149_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_675_p2 <= "1" when (tmp_53_fu_665_p1 = ap_const_lv23_0) else "0";
    pivot_to_int_fu_854_p1 <= pivot_reg_1460;

    r_1_phi_fu_375_p4_assign_proc : process(r_1_reg_372, ap_CS_fsm_pp0_stage0, exitcond6_reg_1390, i_6_reg_1404, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_reg_1390) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            r_1_phi_fu_375_p4 <= i_6_reg_1404;
        else 
            r_1_phi_fu_375_p4 <= r_1_reg_372;
        end if; 
    end process;

    r_2_fu_799_p3 <= 
        ap_pipeline_reg_pp0_iter3_r_1_reg_372 when (tmp_46_reg_1423(0) = '1') else 
        r_fu_112;
    tmp_10_cast_cast_fu_1262_p1 <= std_logic_vector(resize(unsigned(reg_522),8));
    tmp_10_fu_1257_p1 <= std_logic_vector(resize(unsigned(work_q1),64));
    tmp_11_cast_fu_989_p1 <= std_logic_vector(resize(unsigned(j_reg_382),8));
    tmp_11_fu_815_p3 <= (tmp_9_fu_811_p1 & ap_const_lv4_0);
    tmp_12_cast_fu_1060_p1 <= std_logic_vector(resize(unsigned(i_2_phi_fu_397_p4),8));
    tmp_12_fu_827_p2 <= std_logic_vector(unsigned(tmp_54_cast_fu_823_p1) + unsigned(tmp_3_cast_reg_1382));
    tmp_15_fu_1087_p2 <= "1" when (i_3_reg_404 = i_5_reg_348) else "0";
    tmp_17_fu_883_p2 <= (notrhs1_fu_877_p2 or notlhs1_fu_871_p2);
    tmp_18_fu_1220_p1 <= tmp_18_neg_fu_1215_p2;
    tmp_18_neg_fu_1215_p2 <= (w_2_to_int_reg_1627 xor ap_const_lv32_80000000);
    tmp_1_fu_957_p2 <= "1" when (r_load_reg_1434 = i_5_cast_reg_1371) else "0";
    tmp_20_fu_1189_p2 <= "1" when (j_1_reg_415 = i_5_reg_348) else "0";
    tmp_21_cast_fu_1195_p1 <= std_logic_vector(resize(unsigned(j_1_reg_415),8));
    tmp_21_fu_838_p4 <= r_fu_112(31 downto 3);
    tmp_27_fu_889_p2 <= (tmp_17_fu_883_p2 and grp_fu_465_p2);
    tmp_28_fu_919_p4 <= tmp_5_to_int_fu_916_p1(62 downto 52);
    tmp_29_fu_867_p1 <= pivot_to_int_fu_854_p1(23 - 1 downto 0);
    tmp_2_fu_563_p3 <= i_5_reg_348(4 downto 4);
    tmp_30_fu_945_p2 <= (notrhs2_fu_939_p2 or notlhs2_fu_933_p2);
    tmp_32_fu_951_p2 <= (tmp_30_fu_945_p2 and tmp_31_fu_475_p2);
    tmp_33_fu_655_p4 <= n_assign_1_to_int_fu_652_p1(30 downto 23);
    tmp_34_fu_929_p1 <= tmp_5_to_int_fu_916_p1(52 - 1 downto 0);
    tmp_35_fu_681_p2 <= (notrhs_fu_675_p2 or notlhs_fu_669_p2);
    tmp_37_fu_687_p2 <= (tmp_35_fu_681_p2 and grp_fu_465_p2);
    tmp_38_fu_713_p4 <= w_4_to_int_fu_710_p1(30 downto 23);
    tmp_39_fu_595_p1 <= r_1_phi_fu_375_p4(3 - 1 downto 0);
    tmp_3_cast_fu_585_p1 <= std_logic_vector(resize(unsigned(i_5_reg_348),8));
    tmp_3_fu_581_p1 <= std_logic_vector(resize(unsigned(i_5_reg_348),64));
    tmp_40_fu_731_p4 <= wmax_to_int_fu_727_p1(30 downto 23);
    tmp_41_fu_599_p3 <= (tmp_39_fu_595_p1 & ap_const_lv4_0);
    tmp_42_fu_757_p2 <= (notrhs3_fu_751_p2 or notlhs3_fu_745_p2);
    tmp_43_fu_775_p2 <= (notrhs4_fu_769_p2 or notlhs4_fu_763_p2);
    tmp_44_fu_781_p2 <= (tmp_42_fu_757_p2 and tmp_43_fu_775_p2);
    tmp_46_fu_787_p2 <= (tmp_44_fu_781_p2 and tmp_45_fu_470_p2);
    tmp_47_fu_1139_p4 <= w_2_to_int_fu_1136_p1(30 downto 23);
    tmp_48_fu_611_p2 <= std_logic_vector(unsigned(tmp_58_cast_fu_607_p1) + unsigned(tmp_3_cast_reg_1382));
    tmp_49_fu_1165_p2 <= (notrhs5_fu_1159_p2 or notlhs5_fu_1153_p2);
        tmp_4_fu_912_p1 <= std_logic_vector(resize(signed(r_load_reg_1434),64));

    tmp_51_fu_1171_p2 <= (tmp_49_fu_1165_p2 and grp_fu_465_p2);
    tmp_52_fu_628_p4 <= r_1_reg_372(31 downto 3);
    tmp_53_fu_665_p1 <= n_assign_1_to_int_fu_652_p1(23 - 1 downto 0);
    tmp_54_cast_fu_823_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_815_p3),8));
    tmp_54_fu_723_p1 <= w_4_to_int_fu_710_p1(23 - 1 downto 0);
    tmp_55_cast_fu_832_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_827_p2),64));
    tmp_55_fu_741_p1 <= wmax_to_int_fu_727_p1(23 - 1 downto 0);
    tmp_56_fu_1266_p1 <= reg_522(3 - 1 downto 0);
    tmp_57_fu_1270_p3 <= (tmp_56_fu_1266_p1 & ap_const_lv4_0);
    tmp_58_cast_fu_607_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_599_p3),8));
    tmp_58_fu_1282_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1708) + unsigned(tmp_65_cast3_cast_fu_1278_p1));
    tmp_59_cast_fu_616_p1 <= std_logic_vector(resize(unsigned(tmp_48_fu_611_p2),64));
    tmp_59_fu_1293_p2 <= std_logic_vector(unsigned(tmp_10_cast_cast_fu_1262_p1) + unsigned(tmp_65_cast3_cast_fu_1278_p1));
    tmp_5_to_int_fu_916_p1 <= tmp_5_reg_1473;
    tmp_60_fu_1305_p4 <= reg_522(4 downto 3);
    tmp_61_fu_965_p3 <= (tmp_62_fu_961_p1 & ap_const_lv4_0);
    tmp_62_cast_fu_973_p1 <= std_logic_vector(resize(unsigned(tmp_61_fu_965_p3),8));
    tmp_62_fu_961_p1 <= i_5_reg_348(3 - 1 downto 0);
    tmp_64_fu_993_p2 <= std_logic_vector(unsigned(tmp_62_cast_reg_1498) + unsigned(tmp_11_cast_fu_989_p1));
    tmp_65_cast3_cast_fu_1278_p1 <= std_logic_vector(resize(unsigned(tmp_57_fu_1270_p3),8));
    tmp_65_fu_1004_p2 <= std_logic_vector(unsigned(tmp_54_cast_reg_1440) + unsigned(tmp_11_cast_fu_989_p1));
    tmp_66_cast_fu_1287_p1 <= std_logic_vector(resize(unsigned(tmp_58_fu_1282_p2),64));
    tmp_66_fu_1021_p1 <= i_5_reg_348(3 - 1 downto 0);
    tmp_67_cast_fu_1299_p1 <= std_logic_vector(resize(unsigned(tmp_59_fu_1293_p2),64));
    tmp_67_fu_1025_p3 <= (tmp_66_fu_1021_p1 & ap_const_lv4_0);
    tmp_68_cast_fu_998_p1 <= std_logic_vector(resize(unsigned(tmp_64_fu_993_p2),64));
    tmp_68_fu_1037_p2 <= std_logic_vector(unsigned(tmp_72_cast_fu_1033_p1) + unsigned(tmp_3_cast_reg_1382));
    tmp_69_cast_fu_1009_p1 <= std_logic_vector(resize(unsigned(tmp_65_reg_1522),64));
    tmp_6_fu_857_p4 <= pivot_to_int_fu_854_p1(30 downto 23);
    tmp_70_fu_1064_p2 <= std_logic_vector(unsigned(tmp_72_cast_reg_1548) + unsigned(tmp_12_cast_fu_1060_p1));
    tmp_71_fu_1093_p1 <= i_3_reg_404(3 - 1 downto 0);
    tmp_72_cast_fu_1033_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_1025_p3),8));
    tmp_72_fu_1097_p3 <= (tmp_71_fu_1093_p1 & ap_const_lv4_0);
    tmp_73_cast_fu_1042_p1 <= std_logic_vector(resize(unsigned(tmp_68_fu_1037_p2),64));
    tmp_73_fu_1109_p2 <= std_logic_vector(unsigned(tmp_77_cast_fu_1105_p1) + unsigned(tmp_3_cast_reg_1382));
    tmp_74_cast_fu_1069_p1 <= std_logic_vector(resize(unsigned(tmp_70_fu_1064_p2),64));
    tmp_74_fu_1120_p4 <= i_3_reg_404(4 downto 3);
    tmp_75_fu_1149_p1 <= w_2_to_int_fu_1136_p1(23 - 1 downto 0);
    tmp_76_fu_1199_p2 <= std_logic_vector(unsigned(tmp_72_cast_reg_1548) + unsigned(tmp_21_cast_fu_1195_p1));
    tmp_77_cast_fu_1105_p1 <= std_logic_vector(resize(unsigned(tmp_72_fu_1097_p3),8));
    tmp_77_fu_1210_p2 <= std_logic_vector(unsigned(tmp_77_cast_reg_1600) + unsigned(tmp_21_cast_fu_1195_p1));
    tmp_78_cast_fu_1114_p1 <= std_logic_vector(resize(unsigned(tmp_73_fu_1109_p2),64));
    tmp_79_cast_fu_1204_p1 <= std_logic_vector(resize(unsigned(tmp_76_fu_1199_p2),64));
    tmp_80_cast_fu_1225_p1 <= std_logic_vector(resize(unsigned(tmp_77_reg_1653),64));
    tmp_8_fu_1251_p2 <= "1" when (work_q1 = i_4_reg_426) else "0";
    tmp_9_fu_811_p1 <= r_fu_112(3 - 1 downto 0);
    tmp_cast_fu_1247_p1 <= std_logic_vector(resize(unsigned(i_4_reg_426),8));
    tmp_fu_553_p1 <= std_logic_vector(resize(unsigned(i_reg_336),64));
    tmp_s_fu_1242_p1 <= std_logic_vector(resize(unsigned(i_4_reg_426),64));
    w_1_fu_1014_p3 <= 
        a_0_Dout_A when (icmp3_reg_1503(0) = '1') else 
        a_1_Dout_A;
    w_2_to_int_fu_1136_p1 <= w_2_reg_1620;
    w_4_fu_703_p3 <= 
        n_assign_1_reg_1409 when (tmp_37_fu_687_p2(0) = '1') else 
        f_1_fu_699_p1;
    w_4_to_int_fu_710_p1 <= w_4_reg_1416;
    w_fu_1333_p3 <= 
        a_0_load_2_reg_1768 when (icmp2_reg_1753(0) = '1') else 
        a_1_load_2_reg_1773;
    wmax_1_fu_793_p3 <= 
        ap_pipeline_reg_pp0_iter3_w_4_reg_1416 when (tmp_46_reg_1423(0) = '1') else 
        wmax_reg_360;

    wmax_phi_fu_364_p4_assign_proc : process(wmax_reg_360, ap_pipeline_reg_pp0_iter3_exitcond6_reg_1390, wmax_1_fu_793_p3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1390))) then 
            wmax_phi_fu_364_p4 <= wmax_1_fu_793_p3;
        else 
            wmax_phi_fu_364_p4 <= wmax_reg_360;
        end if; 
    end process;

    wmax_to_int_fu_727_p1 <= wmax_phi_fu_364_p4;

    work_address0_assign_proc : process(ap_CS_fsm_state90, ap_CS_fsm_state2, tmp_3_reg_1377, ap_CS_fsm_state13, work_addr_4_reg_1492, ap_CS_fsm_state15, work_addr_1_reg_1713, ap_CS_fsm_state92, tmp_fu_553_p1, tmp_10_fu_1257_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state92))) then 
            work_address0 <= work_addr_1_reg_1713;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state90))) then 
            work_address0 <= tmp_10_fu_1257_p1(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            work_address0 <= work_addr_4_reg_1492;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_address0 <= tmp_3_reg_1377(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            work_address0 <= tmp_fu_553_p1(9 - 1 downto 0);
        else 
            work_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    work_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state13, work_addr_3_reg_1486, work_addr_1_reg_1713, work_addr_2_reg_1722, ap_CS_fsm_state91, tmp_4_fu_912_p1, ap_CS_fsm_state89)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state91))) then 
            work_address1 <= work_addr_2_reg_1722;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state89))) then 
            work_address1 <= work_addr_1_reg_1713;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_address1 <= work_addr_3_reg_1486;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_address1 <= tmp_4_fu_912_p1(9 - 1 downto 0);
        else 
            work_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    work_ce0_assign_proc : process(ap_CS_fsm_state90, ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state92)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state90)) or ((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state92)))) then 
            work_ce0 <= ap_const_logic_1;
        else 
            work_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    work_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state91, ap_CS_fsm_state89)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state91)) or ((ap_const_lv1_1 = ap_CS_fsm_state89)))) then 
            work_ce1 <= ap_const_logic_1;
        else 
            work_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    work_d0_assign_proc : process(reg_522, ap_CS_fsm_state2, ap_CS_fsm_state15, work_load_1_reg_1728, ap_CS_fsm_state92, i_reg_336)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state92))) then 
            work_d0 <= work_load_1_reg_1728;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            work_d0 <= reg_522;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            work_d0 <= i_reg_336;
        else 
            work_d0 <= "XXXXX";
        end if; 
    end process;


    work_d1_assign_proc : process(reg_522, ap_CS_fsm_state14, work_q1, ap_CS_fsm_state91)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state91))) then 
            work_d1 <= reg_522;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_d1 <= work_q1;
        else 
            work_d1 <= "XXXXX";
        end if; 
    end process;


    work_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state92, exitcond7_fu_541_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state92)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond7_fu_541_p2)))) then 
            work_we0 <= ap_const_logic_1;
        else 
            work_we0 <= ap_const_logic_0;
        end if; 
    end process;


    work_we1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state91)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state91)))) then 
            work_we1 <= ap_const_logic_1;
        else 
            work_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
