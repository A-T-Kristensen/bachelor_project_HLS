-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity minver_hwa is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC;
    a_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_B : OUT STD_LOGIC;
    a_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    a_Clk_B : OUT STD_LOGIC;
    a_Rst_B : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of minver_hwa is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "minver_hwa,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.691000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=2188,HLS_SYN_LUT=2697}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (68 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (68 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (68 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (68 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (68 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (68 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (68 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (68 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (68 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (68 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (68 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (68 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv64_3EB0C6F7A0B5ED8D : STD_LOGIC_VECTOR (63 downto 0) := "0011111010110000110001101111011110100000101101011110110110001101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wmax_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter1_r_1_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter2_r_1_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter3_r_1_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_275 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_286 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond6_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal work_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_386 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal work_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond5_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i_1_fu_416_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_438_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1131 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_5_cast7_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast7_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1142 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_452_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_reg_1147 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_1154 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_addr_7_reg_1161 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond6_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond6_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond6_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal w_4_fu_575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_4_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter3_w_4_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal wmax_1_fu_666_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal r_load_reg_1198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_16_fu_700_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_reg_1204 : STD_LOGIC_VECTOR (4 downto 0);
    signal api_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal api_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_5_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1219 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_34_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_3_reg_1232 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_addr_4_reg_1238 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_pipeline_reg_pp1_iter1_exitcond5_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_831_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_1248 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_addr_4_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_addr_5_reg_1259 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp1_iter1_a_addr_5_reg_1259 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter1_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter2_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter3_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter4_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter5_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter6_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter7_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter8_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter9_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter10_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter11_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter12_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter13_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter14_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter15_exitcond4_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_867_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter1_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter2_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter3_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter4_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter5_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter6_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter7_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter8_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter9_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter10_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter11_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter12_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter13_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter14_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp2_iter15_a_addr_6_reg_1274 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_fu_893_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_9_reg_1283 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_15_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_921_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_reg_1292 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_addr_8_reg_1297 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_3_to_int_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_3_to_int_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_53_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_1308 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_985_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_5_reg_1315 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_20_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1320 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_10_reg_1329 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_1026_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_7_fu_1037_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_7_reg_1353 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal tmp_cast_fu_1048_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_reg_1358 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_addr_1_reg_1363 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_addr_2_reg_1372 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal work_load_1_reg_1378 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal a_addr_2_reg_1383 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal a_addr_3_reg_1388 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_1106_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_4_reg_1396 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal work_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce0 : STD_LOGIC;
    signal work_we0 : STD_LOGIC;
    signal work_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal work_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal work_ce1 : STD_LOGIC;
    signal work_we1 : STD_LOGIC;
    signal work_d1 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_229 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond7_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_241 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal wmax_phi_fu_257_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_phi_fu_268_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_phi_fu_279_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_297 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal j_1_reg_308 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal i_4_reg_319 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_331 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal tmp_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_cast_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_cast_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_cast_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_cast_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_cast_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_fu_1095_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl5_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_2_fu_672_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_456_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_469_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_43_fu_489_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_cast_fu_493_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_41_fu_485_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_50_fu_501_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_54_fu_507_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_assign_1_to_int_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_527_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_537_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_4_to_int_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wmax_to_int_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_586_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_596_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_604_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_614_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_688_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_cast_fu_692_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_684_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_706_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal pivot_to_int_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_720_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_730_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_neg_i1_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_to_int_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_783_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_fu_793_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_cast_fu_837_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_62_fu_841_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_63_fu_851_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_cast_fu_873_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_fu_877_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_fu_909_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_cast_fu_917_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_cast_fu_905_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_fu_927_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_941_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_951_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_cast_fu_997_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_69_fu_1001_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_70_fu_1011_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_neg_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_1067_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_59_fu_1075_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_cast_fu_1063_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_fu_1084_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_1090_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_362_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (68 downto 0);

    component minver_hwa_fsub_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component minver_hwa_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component minver_hwa_fdiv_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component minver_hwa_fpext_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component minver_hwa_fcmp_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component minver_hwa_dcmp_6g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component minver_hwa_work IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (1 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    work_U : component minver_hwa_work
    generic map (
        DataWidth => 2,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => work_address0,
        ce0 => work_ce0,
        we0 => work_we0,
        d0 => work_d0,
        q0 => work_q0,
        address1 => work_address1,
        ce1 => work_ce1,
        we1 => work_we1,
        d1 => work_d1,
        q1 => work_q1);

    minver_hwa_fsub_3bkb_U1 : component minver_hwa_fsub_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_403,
        din1 => tmp_22_reg_1340,
        ce => ap_const_logic_1,
        dout => grp_fu_342_p2);

    minver_hwa_fmul_3cud_U2 : component minver_hwa_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_393,
        din1 => a_Dout_B,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    minver_hwa_fdiv_3dEe_U3 : component minver_hwa_fdiv_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_351_p0,
        din1 => reg_380,
        ce => ap_const_logic_1,
        dout => grp_fu_351_p2);

    minver_hwa_fpext_eOg_U4 : component minver_hwa_fpext_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => api_reg_1214,
        dout => tmp_5_fu_359_p1);

    minver_hwa_fcmp_3fYi_U5 : component minver_hwa_fcmp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_362_p0,
        din1 => ap_const_lv32_0,
        opcode => grp_fu_362_opcode,
        dout => grp_fu_362_p2);

    minver_hwa_fcmp_3fYi_U6 : component minver_hwa_fcmp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => w_4_reg_1180,
        din1 => wmax_phi_fu_257_p4,
        opcode => ap_const_lv5_2,
        dout => tmp_47_fu_367_p2);

    minver_hwa_dcmp_6g8j_U7 : component minver_hwa_dcmp_6g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_5_reg_1219,
        din1 => ap_const_lv64_3EB0C6F7A0B5ED8D,
        opcode => ap_const_lv5_5,
        dout => tmp_33_fu_372_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond6_fu_479_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_432_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_fu_479_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_432_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond6_fu_479_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond5_fu_825_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_lv1_0 = exitcond5_reg_1244))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and not((ap_const_lv1_0 = exitcond5_reg_1244))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = exitcond4_fu_861_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond4_fu_861_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = exitcond4_fu_861_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
            end if;
        end if;
    end process;


    i_2_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond4_fu_861_p2))) then 
                i_2_reg_286 <= i_8_fu_867_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                i_2_reg_286 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_3_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state38))) then 
                i_3_reg_297 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state67))) then 
                i_3_reg_297 <= i_9_reg_1283;
            end if; 
        end if;
    end process;

    i_4_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_2_fu_432_p2)))) then 
                i_4_reg_319 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state85) and not((ap_const_lv1_0 = tmp_8_fu_1052_p2)))) then 
                i_4_reg_319 <= i_7_reg_1353;
            end if; 
        end if;
    end process;

    i_5_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond7_fu_410_p2)))) then 
                i_5_reg_241 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state82))) then 
                i_5_reg_241 <= k_reg_1131;
            end if; 
        end if;
    end process;

    i_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond7_fu_410_p2))) then 
                i_reg_229 <= i_1_fu_416_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_229 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_1_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state41) and (ap_const_lv1_0 = tmp_53_fu_973_p2))) then 
                j_1_reg_308 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
                j_1_reg_308 <= j_5_reg_1315;
            end if; 
        end if;
    end process;

    j_2_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state90))) then 
                j_2_reg_331 <= j_4_reg_1396;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state87))) then 
                j_2_reg_331 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond5_reg_1244) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                j_reg_275 <= j_3_reg_1248;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
                j_reg_275 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_1_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_432_p2))) then 
                r_1_reg_265 <= i_5_cast7_fu_444_p1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_1166 = ap_const_lv1_0))) then 
                r_1_reg_265 <= i_6_reg_1175;
            end if; 
        end if;
    end process;

    r_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1166))) then 
                r_fu_90 <= r_2_fu_672_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond7_fu_410_p2)))) then 
                r_fu_90 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state85))) then 
                reg_386 <= work_q1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                reg_386 <= work_q0;
            end if; 
        end if;
    end process;

    reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond4_reg_1265)) or ((ap_const_lv1_1 = ap_CS_fsm_state40)))) then 
                reg_393 <= a_Dout_B;
            elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond5_reg_1244)) or ((ap_const_lv1_1 = ap_CS_fsm_state89)))) then 
                reg_393 <= a_Dout_A;
            end if; 
        end if;
    end process;

    reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state46))) then 
                reg_403 <= a_Dout_A;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
                reg_403 <= a_Dout_B;
            end if; 
        end if;
    end process;

    wmax_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_432_p2))) then 
                wmax_reg_253 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1166))) then 
                wmax_reg_253 <= wmax_1_fu_666_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = exitcond2_fu_979_p2) and (ap_const_lv1_0 = tmp_20_fu_991_p2))) then
                a_addr_10_reg_1329 <= tmp_72_cast_fu_1016_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state87))) then
                a_addr_2_reg_1383 <= tmp_64_cast_fu_1095_p1(4 - 1 downto 0);
                    a_addr_3_reg_1388(3 downto 2) <= p_shl5_fu_1079_p1(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond5_fu_825_p2))) then
                a_addr_4_reg_1253 <= tmp_65_cast_fu_846_p1(4 - 1 downto 0);
                a_addr_5_reg_1259 <= tmp_66_cast_fu_856_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond4_fu_861_p2))) then
                a_addr_6_reg_1274 <= tmp_67_cast_fu_882_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_432_p2))) then
                    a_addr_7_reg_1161(3 downto 2) <= p_shl_fu_464_p1(4 - 1 downto 0)(3 downto 2);
                    i_5_cast7_reg_1136(1 downto 0) <= i_5_cast7_fu_444_p1(1 downto 0);
                    tmp_3_cast_reg_1147(1 downto 0) <= tmp_3_cast_fu_452_p1(1 downto 0);
                    tmp_3_reg_1142(1 downto 0) <= tmp_3_fu_448_p1(1 downto 0);
                tmp_9_reg_1154 <= tmp_9_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state39) and (ap_const_lv1_0 = exitcond3_fu_887_p2) and (ap_const_lv1_0 = tmp_15_fu_899_p2))) then
                a_addr_8_reg_1297 <= tmp_70_cast_fu_932_p1(4 - 1 downto 0);
                tmp_66_reg_1292 <= tmp_66_fu_921_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond6_reg_1166 <= exitcond6_reg_1166;
                ap_pipeline_reg_pp0_iter1_r_1_reg_265 <= r_1_reg_265;
                exitcond6_reg_1166 <= exitcond6_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                ap_pipeline_reg_pp0_iter2_exitcond6_reg_1166 <= ap_pipeline_reg_pp0_iter1_exitcond6_reg_1166;
                ap_pipeline_reg_pp0_iter2_r_1_reg_265 <= ap_pipeline_reg_pp0_iter1_r_1_reg_265;
                ap_pipeline_reg_pp0_iter3_exitcond6_reg_1166 <= ap_pipeline_reg_pp0_iter2_exitcond6_reg_1166;
                ap_pipeline_reg_pp0_iter3_r_1_reg_265 <= ap_pipeline_reg_pp0_iter2_r_1_reg_265;
                ap_pipeline_reg_pp0_iter3_w_4_reg_1180 <= w_4_reg_1180;
                ap_pipeline_reg_pp2_iter10_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter9_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter10_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter9_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter11_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter10_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter11_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter10_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter12_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter11_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter12_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter11_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter13_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter12_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter13_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter12_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter14_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter13_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter14_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter13_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter15_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter14_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter15_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter14_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter2_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter1_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter2_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter1_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter3_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter2_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter3_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter2_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter4_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter3_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter4_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter3_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter5_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter4_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter5_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter4_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter6_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter5_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter6_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter5_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter7_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter6_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter7_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter6_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter8_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter7_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter8_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter7_exitcond4_reg_1265;
                ap_pipeline_reg_pp2_iter9_a_addr_6_reg_1274 <= ap_pipeline_reg_pp2_iter8_a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter9_exitcond4_reg_1265 <= ap_pipeline_reg_pp2_iter8_exitcond4_reg_1265;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                ap_pipeline_reg_pp1_iter1_a_addr_5_reg_1259 <= a_addr_5_reg_1259;
                ap_pipeline_reg_pp1_iter1_exitcond5_reg_1244 <= exitcond5_reg_1244;
                exitcond5_reg_1244 <= exitcond5_fu_825_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0))) then
                ap_pipeline_reg_pp2_iter1_a_addr_6_reg_1274 <= a_addr_6_reg_1274;
                ap_pipeline_reg_pp2_iter1_exitcond4_reg_1265 <= exitcond4_reg_1265;
                exitcond4_reg_1265 <= exitcond4_fu_861_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                api_reg_1214 <= api_fu_768_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond6_fu_479_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_6_reg_1175 <= i_6_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state83))) then
                i_7_reg_1353 <= i_7_fu_1037_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state39))) then
                i_9_reg_1283 <= i_9_fu_893_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                j_3_reg_1248 <= j_3_fu_831_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state88))) then
                j_4_reg_1396 <= j_4_fu_1106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then
                j_5_reg_1315 <= j_5_fu_985_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                k_reg_1131 <= k_fu_438_p2;
                tmp_2_reg_1127 <= tmp_2_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                r_load_reg_1198 <= r_fu_90;
                tmp_16_reg_1204 <= tmp_16_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_1166 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)))) then
                reg_380 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state39) and (ap_const_lv1_0 = exitcond3_fu_887_p2))) then
                tmp_15_reg_1288 <= tmp_15_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = exitcond2_fu_979_p2))) then
                tmp_20_reg_1320 <= tmp_20_fu_991_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state46))) then
                tmp_22_reg_1340 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state51))) then
                tmp_23_reg_1345 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond6_reg_1166)) then
                tmp_48_reg_1187 <= tmp_48_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state41))) then
                tmp_53_reg_1308 <= tmp_53_fu_973_p2;
                w_3_to_int_reg_1303 <= w_3_to_int_fu_937_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                tmp_5_reg_1219 <= tmp_5_fu_359_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state83) and (ap_const_lv1_0 = exitcond1_fu_1031_p2))) then
                    tmp_cast_reg_1358(1 downto 0) <= tmp_cast_fu_1048_p1(1 downto 0);
                    work_addr_1_reg_1363(1 downto 0) <= tmp_s_fu_1043_p1(9 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond6_reg_1166)) then
                w_4_reg_1180 <= w_4_fu_575_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state85) and (ap_const_lv1_0 = tmp_8_fu_1052_p2))) then
                    work_addr_2_reg_1372(1 downto 0) <= tmp_10_fu_1058_p1(9 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_2_reg_1127) and (ap_const_lv1_0 = tmp_34_fu_815_p2) and (ap_const_lv1_0 = tmp_1_fu_821_p2))) then
                    work_addr_3_reg_1232(1 downto 0) <= tmp_3_reg_1142(9 - 1 downto 0)(1 downto 0);
                work_addr_4_reg_1238 <= tmp_4_fu_776_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state86))) then
                work_load_1_reg_1378 <= work_q0;
            end if;
        end if;
    end process;
    i_5_cast7_reg_1136(31 downto 2) <= "000000000000000000000000000000";
    tmp_3_reg_1142(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    tmp_3_cast_reg_1147(4 downto 2) <= "000";
    a_addr_7_reg_1161(1 downto 0) <= "00";
    work_addr_3_reg_1232(8 downto 2) <= "0000000";
    tmp_cast_reg_1358(4 downto 2) <= "000";
    work_addr_1_reg_1363(8 downto 2) <= "0000000";
    work_addr_2_reg_1372(8 downto 2) <= "0000000";
    a_addr_3_reg_1388(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter1, tmp_2_fu_432_p2, tmp_2_reg_1127, exitcond6_fu_479_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, tmp_1_fu_821_p2, tmp_34_fu_815_p2, exitcond5_fu_825_p2, exitcond4_fu_861_p2, ap_enable_reg_pp2_iter0, tmp_15_fu_899_p2, exitcond3_fu_887_p2, tmp_53_fu_973_p2, tmp_20_fu_991_p2, exitcond2_fu_979_p2, exitcond1_fu_1031_p2, tmp_8_fu_1052_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16, exitcond7_fu_410_p2, exitcond_fu_1100_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_410_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = tmp_2_fu_432_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond6_fu_479_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond6_fu_479_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if ((not((ap_const_lv1_0 = tmp_2_reg_1127)) or not((ap_const_lv1_0 = tmp_34_fu_815_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_lv1_0 = tmp_2_reg_1127) and (ap_const_lv1_0 = tmp_34_fu_815_p2) and not((ap_const_lv1_0 = tmp_1_fu_821_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond5_fu_825_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter16) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter15)))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_861_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond4_fu_861_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_lv1_0 = exitcond3_fu_887_p2) and not((ap_const_lv1_0 = tmp_15_fu_899_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                elsif (((ap_const_lv1_0 = exitcond3_fu_887_p2) and (ap_const_lv1_0 = tmp_15_fu_899_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if ((ap_const_lv1_0 = tmp_53_fu_973_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_lv1_0 = exitcond2_fu_979_p2) and not((ap_const_lv1_0 = tmp_20_fu_991_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                elsif (((ap_const_lv1_0 = exitcond2_fu_979_p2) and (ap_const_lv1_0 = tmp_20_fu_991_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state83 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_1031_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (not((ap_const_lv1_0 = tmp_8_fu_1052_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if ((ap_const_lv1_0 = exitcond_fu_1100_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state89, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_pipeline_reg_pp1_iter1_a_addr_5_reg_1259, ap_pipeline_reg_pp2_iter15_a_addr_6_reg_1274, a_addr_8_reg_1297, a_addr_10_reg_1329, a_addr_2_reg_1383, ap_CS_fsm_state88, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter16, ap_CS_fsm_state67, tmp_61_cast_fu_512_p1, tmp_58_cast_fu_711_p1, tmp_65_cast_fu_846_p1, ap_CS_fsm_state45)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state89)) or ((ap_const_lv1_1 = ap_CS_fsm_state88)))) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(a_addr_2_reg_1383),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state67))) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(a_addr_8_reg_1297),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state45))) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(a_addr_10_reg_1329),32));
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter16)) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp2_iter15_a_addr_6_reg_1274),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            a_Addr_A_orig <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp1_iter1_a_addr_5_reg_1259),32));
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then 
            a_Addr_A_orig <= tmp_65_cast_fu_846_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            a_Addr_A_orig <= tmp_58_cast_fu_711_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_Addr_A_orig <= tmp_61_cast_fu_512_p1(32 - 1 downto 0);
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Addr_B <= std_logic_vector(shift_left(unsigned(a_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, a_addr_7_reg_1161, ap_CS_fsm_pp1_stage0, a_addr_4_reg_1253, ap_enable_reg_pp2_iter0, ap_CS_fsm_state39, ap_CS_fsm_state42, a_addr_10_reg_1329, a_addr_3_reg_1388, ap_CS_fsm_state88, ap_CS_fsm_state82, ap_CS_fsm_state52, ap_CS_fsm_state90, tmp_66_cast_fu_856_p1, tmp_67_cast_fu_882_p1, tmp_70_cast_fu_932_p1, tmp_71_cast_fu_1006_p1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state88)) or ((ap_const_lv1_1 = ap_CS_fsm_state90)))) then 
            a_Addr_B_orig <= std_logic_vector(resize(unsigned(a_addr_3_reg_1388),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state82))) then 
            a_Addr_B_orig <= std_logic_vector(resize(unsigned(a_addr_7_reg_1161),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
            a_Addr_B_orig <= std_logic_vector(resize(unsigned(a_addr_10_reg_1329),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            a_Addr_B_orig <= tmp_71_cast_fu_1006_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
            a_Addr_B_orig <= tmp_70_cast_fu_932_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            a_Addr_B_orig <= tmp_67_cast_fu_882_p1(32 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            a_Addr_B_orig <= std_logic_vector(resize(unsigned(a_addr_4_reg_1253),32));
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then 
            a_Addr_B_orig <= tmp_66_cast_fu_856_p1(32 - 1 downto 0);
        else 
            a_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Clk_B <= ap_clk;

    a_Din_A_assign_proc : process(a_Dout_B, reg_393, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state89, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter16, ap_CS_fsm_state67, grp_fu_351_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state89))) then 
            a_Din_A <= a_Dout_B;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state67)) or (ap_const_logic_1 = ap_enable_reg_pp2_iter16))) then 
            a_Din_A <= grp_fu_351_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            a_Din_A <= reg_393;
        else 
            a_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_Din_B_assign_proc : process(a_Dout_B, reg_393, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, tmp_23_reg_1345, ap_CS_fsm_state82, ap_CS_fsm_state52, ap_CS_fsm_state90, grp_fu_351_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state90))) then 
            a_Din_B <= reg_393;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state82))) then 
            a_Din_B <= grp_fu_351_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
            a_Din_B <= tmp_23_reg_1345;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            a_Din_B <= a_Dout_B;
        else 
            a_Din_B <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state89, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state88, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter16, ap_CS_fsm_state67, ap_CS_fsm_state45)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state89)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_state88)) or ((ap_const_lv1_1 = ap_CS_fsm_state67)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)) or (ap_const_logic_1 = ap_enable_reg_pp2_iter16) or ((ap_const_lv1_1 = ap_CS_fsm_state45)))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    a_EN_B_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state39, ap_CS_fsm_state42, ap_CS_fsm_state88, ap_CS_fsm_state82, ap_CS_fsm_state52, ap_CS_fsm_state90)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_state39)) or ((ap_const_lv1_1 = ap_CS_fsm_state42)) or ((ap_const_lv1_1 = ap_CS_fsm_state88)) or ((ap_const_lv1_1 = ap_CS_fsm_state82)) or ((ap_const_lv1_1 = ap_CS_fsm_state52)) or ((ap_const_lv1_1 = ap_CS_fsm_state90)))) then 
            a_EN_B <= ap_const_logic_1;
        else 
            a_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;
    a_Rst_B <= ap_rst;

    a_WEN_A_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_state89, ap_pipeline_reg_pp1_iter1_exitcond5_reg_1244, ap_pipeline_reg_pp2_iter15_exitcond4_reg_1265, tmp_15_reg_1288, tmp_53_reg_1308, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter16, ap_CS_fsm_state67)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state89)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond5_reg_1244)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter16) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter15_exitcond4_reg_1265)) or ((ap_const_lv1_1 = ap_CS_fsm_state67) and (ap_const_lv1_0 = tmp_15_reg_1288) and (ap_const_lv1_0 = tmp_53_reg_1308)))) then 
            a_WEN_A <= ap_const_lv4_F;
        else 
            a_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;


    a_WEN_B_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, exitcond5_reg_1244, tmp_20_reg_1320, ap_CS_fsm_state82, ap_CS_fsm_state52, ap_CS_fsm_state90)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond5_reg_1244)) or ((ap_const_lv1_1 = ap_CS_fsm_state82)) or ((ap_const_lv1_1 = ap_CS_fsm_state90)) or ((ap_const_lv1_1 = ap_CS_fsm_state52) and (ap_const_lv1_0 = tmp_20_reg_1320)))) then 
            a_WEN_B <= ap_const_lv4_F;
        else 
            a_WEN_B <= ap_const_lv4_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state15 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state38 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state39 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state40 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state41 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state42 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state43 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state45 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state46 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state47 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state51 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state52 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state67 <= ap_CS_fsm(44 downto 44);
    ap_CS_fsm_state82 <= ap_CS_fsm(59 downto 59);
    ap_CS_fsm_state83 <= ap_CS_fsm(60 downto 60);
    ap_CS_fsm_state84 <= ap_CS_fsm(61 downto 61);
    ap_CS_fsm_state85 <= ap_CS_fsm(62 downto 62);
    ap_CS_fsm_state86 <= ap_CS_fsm(63 downto 63);
    ap_CS_fsm_state87 <= ap_CS_fsm(64 downto 64);
    ap_CS_fsm_state88 <= ap_CS_fsm(65 downto 65);
    ap_CS_fsm_state89 <= ap_CS_fsm(66 downto 66);
    ap_CS_fsm_state9 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state90 <= ap_CS_fsm(67 downto 67);

    ap_done_assign_proc : process(tmp_2_reg_1127, ap_CS_fsm_state13, tmp_34_fu_815_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (not((ap_const_lv1_0 = tmp_2_reg_1127)) or not((ap_const_lv1_0 = tmp_34_fu_815_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_2_reg_1127, ap_CS_fsm_state13, tmp_34_fu_815_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (not((ap_const_lv1_0 = tmp_2_reg_1127)) or not((ap_const_lv1_0 = tmp_34_fu_815_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_1;
    api_fu_768_p3 <= 
        reg_380 when (tmp_29_fu_752_p2(0) = '1') else 
        f_fu_764_p1;
    exitcond1_fu_1031_p2 <= "1" when (i_4_reg_319 = ap_const_lv2_3) else "0";
    exitcond2_fu_979_p2 <= "1" when (j_1_reg_308 = ap_const_lv2_3) else "0";
    exitcond3_fu_887_p2 <= "1" when (i_3_reg_297 = ap_const_lv2_3) else "0";
    exitcond4_fu_861_p2 <= "1" when (i_2_reg_286 = ap_const_lv2_3) else "0";
    exitcond5_fu_825_p2 <= "1" when (j_phi_fu_279_p4 = ap_const_lv2_3) else "0";
    exitcond6_fu_479_p2 <= "1" when (r_1_phi_fu_268_p4 = ap_const_lv32_3) else "0";
    exitcond7_fu_410_p2 <= "1" when (i_reg_229 = ap_const_lv2_3) else "0";
    exitcond_fu_1100_p2 <= "1" when (j_2_reg_331 = ap_const_lv2_3) else "0";
    f_1_fu_571_p1 <= f_neg_i_fu_565_p2;
    f_fu_764_p1 <= f_neg_i1_fu_758_p2;
    f_neg_i1_fu_758_p2 <= (pivot_to_int_fu_716_p1 xor ap_const_lv32_80000000);
    f_neg_i_fu_565_p2 <= (n_assign_1_to_int_fu_523_p1 xor ap_const_lv32_80000000);

    grp_fu_351_p0_assign_proc : process(a_Dout_B, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state39, ap_CS_fsm_state42, tmp_18_fu_1026_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            grp_fu_351_p0 <= tmp_18_fu_1026_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
            grp_fu_351_p0 <= ap_const_lv32_3F800000;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            grp_fu_351_p0 <= a_Dout_B;
        else 
            grp_fu_351_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_362_opcode_assign_proc : process(ap_pipeline_reg_pp0_iter1_exitcond6_reg_1166, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
            grp_fu_362_opcode <= ap_const_lv5_1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond6_reg_1166) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            grp_fu_362_opcode <= ap_const_lv5_3;
        else 
            grp_fu_362_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_362_p0_assign_proc : process(reg_380, reg_393, ap_CS_fsm_state11, ap_CS_fsm_state41, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
            grp_fu_362_p0 <= reg_393;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            grp_fu_362_p0 <= reg_380;
        else 
            grp_fu_362_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_416_p2 <= std_logic_vector(unsigned(i_reg_229) + unsigned(ap_const_lv2_1));
    i_5_cast7_fu_444_p1 <= std_logic_vector(resize(unsigned(i_5_reg_241),32));
    i_6_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(r_1_phi_fu_268_p4));
    i_7_fu_1037_p2 <= std_logic_vector(unsigned(i_4_reg_319) + unsigned(ap_const_lv2_1));
    i_8_fu_867_p2 <= std_logic_vector(unsigned(i_2_reg_286) + unsigned(ap_const_lv2_1));
    i_9_fu_893_p2 <= std_logic_vector(unsigned(i_3_reg_297) + unsigned(ap_const_lv2_1));
    j_3_fu_831_p2 <= std_logic_vector(unsigned(j_phi_fu_279_p4) + unsigned(ap_const_lv2_1));
    j_4_fu_1106_p2 <= std_logic_vector(unsigned(j_2_reg_331) + unsigned(ap_const_lv2_1));
    j_5_fu_985_p2 <= std_logic_vector(unsigned(j_1_reg_308) + unsigned(ap_const_lv2_1));

    j_phi_fu_279_p4_assign_proc : process(j_reg_275, exitcond5_reg_1244, ap_CS_fsm_pp1_stage0, j_3_reg_1248, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_lv1_0 = exitcond5_reg_1244) and (ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            j_phi_fu_279_p4 <= j_3_reg_1248;
        else 
            j_phi_fu_279_p4 <= j_reg_275;
        end if; 
    end process;

    k_fu_438_p2 <= std_logic_vector(unsigned(i_5_reg_241) + unsigned(ap_const_lv2_1));
    n_assign_1_to_int_fu_523_p1 <= reg_380;
    notlhs1_fu_734_p2 <= "0" when (tmp_6_fu_720_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_797_p2 <= "0" when (tmp_30_fu_783_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_618_p2 <= "0" when (tmp_40_fu_586_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_636_p2 <= "0" when (tmp_42_fu_604_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_955_p2 <= "0" when (tmp_49_fu_941_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_541_p2 <= "0" when (tmp_35_fu_527_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_740_p2 <= "1" when (tmp_31_fu_730_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_803_p2 <= "1" when (tmp_36_fu_793_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_624_p2 <= "1" when (tmp_56_fu_596_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_642_p2 <= "1" when (tmp_57_fu_614_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_961_p2 <= "1" when (tmp_68_fu_951_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_547_p2 <= "1" when (tmp_55_fu_537_p1 = ap_const_lv23_0) else "0";
    p_shl2_cast_fu_493_p3 <= (tmp_43_fu_489_p1 & ap_const_lv2_0);
    p_shl3_cast_fu_692_p3 <= (tmp_12_fu_688_p1 & ap_const_lv2_0);
    p_shl4_cast_fu_917_p1 <= std_logic_vector(resize(unsigned(tmp_65_fu_909_p3),5));
    p_shl5_fu_1079_p1 <= std_logic_vector(resize(unsigned(tmp_58_fu_1067_p3),64));
    p_shl_cast_fu_469_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_456_p3),5));
    p_shl_fu_464_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_456_p3),64));
    pivot_to_int_fu_716_p1 <= reg_380;

    r_1_phi_fu_268_p4_assign_proc : process(r_1_reg_265, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond6_reg_1166, i_6_reg_1175)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond6_reg_1166 = ap_const_lv1_0))) then 
            r_1_phi_fu_268_p4 <= i_6_reg_1175;
        else 
            r_1_phi_fu_268_p4 <= r_1_reg_265;
        end if; 
    end process;

    r_2_fu_672_p3 <= 
        ap_pipeline_reg_pp0_iter3_r_1_reg_265 when (tmp_48_reg_1187(0) = '1') else 
        r_fu_90;
    tmp_10_cast_fu_1063_p1 <= std_logic_vector(resize(unsigned(reg_386),5));
    tmp_10_fu_1058_p1 <= std_logic_vector(resize(unsigned(work_q1),64));
    tmp_11_cast_fu_837_p1 <= std_logic_vector(resize(unsigned(j_phi_fu_279_p4),5));
    tmp_11_fu_684_p1 <= r_fu_90(5 - 1 downto 0);
    tmp_12_cast_fu_873_p1 <= std_logic_vector(resize(unsigned(i_2_reg_286),5));
    tmp_12_fu_688_p1 <= r_fu_90(3 - 1 downto 0);
    tmp_15_fu_899_p2 <= "1" when (i_3_reg_297 = i_5_reg_241) else "0";
    tmp_16_cast_fu_905_p1 <= std_logic_vector(resize(unsigned(i_3_reg_297),5));
    tmp_16_fu_700_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_692_p3) - unsigned(tmp_11_fu_684_p1));
    tmp_17_fu_746_p2 <= (notrhs1_fu_740_p2 or notlhs1_fu_734_p2);
    tmp_18_fu_1026_p1 <= tmp_18_neg_fu_1021_p2;
    tmp_18_neg_fu_1021_p2 <= (w_3_to_int_reg_1303 xor ap_const_lv32_80000000);
    tmp_1_fu_821_p2 <= "1" when (r_load_reg_1198 = i_5_cast7_reg_1136) else "0";
    tmp_20_fu_991_p2 <= "1" when (j_1_reg_308 = i_5_reg_241) else "0";
    tmp_21_cast_fu_997_p1 <= std_logic_vector(resize(unsigned(j_1_reg_308),5));
    tmp_21_fu_706_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1147) + unsigned(tmp_16_fu_700_p2));
    tmp_29_fu_752_p2 <= (tmp_17_fu_746_p2 and grp_fu_362_p2);
    tmp_2_fu_432_p2 <= "1" when (i_5_reg_241 = ap_const_lv2_3) else "0";
    tmp_30_fu_783_p4 <= tmp_5_to_int_fu_780_p1(62 downto 52);
    tmp_31_fu_730_p1 <= pivot_to_int_fu_716_p1(23 - 1 downto 0);
    tmp_32_fu_809_p2 <= (notrhs2_fu_803_p2 or notlhs2_fu_797_p2);
    tmp_34_fu_815_p2 <= (tmp_32_fu_809_p2 and tmp_33_fu_372_p2);
    tmp_35_fu_527_p4 <= n_assign_1_to_int_fu_523_p1(30 downto 23);
    tmp_36_fu_793_p1 <= tmp_5_to_int_fu_780_p1(52 - 1 downto 0);
    tmp_37_fu_553_p2 <= (notrhs_fu_547_p2 or notlhs_fu_541_p2);
    tmp_39_fu_559_p2 <= (tmp_37_fu_553_p2 and grp_fu_362_p2);
    tmp_3_cast_fu_452_p1 <= std_logic_vector(resize(unsigned(i_5_reg_241),5));
    tmp_3_fu_448_p1 <= std_logic_vector(resize(unsigned(i_5_reg_241),64));
    tmp_40_fu_586_p4 <= w_4_to_int_fu_583_p1(30 downto 23);
    tmp_41_fu_485_p1 <= r_1_phi_fu_268_p4(5 - 1 downto 0);
    tmp_42_fu_604_p4 <= wmax_to_int_fu_600_p1(30 downto 23);
    tmp_43_fu_489_p1 <= r_1_phi_fu_268_p4(3 - 1 downto 0);
    tmp_44_fu_630_p2 <= (notrhs3_fu_624_p2 or notlhs3_fu_618_p2);
    tmp_45_fu_648_p2 <= (notrhs4_fu_642_p2 or notlhs4_fu_636_p2);
    tmp_46_fu_654_p2 <= (tmp_44_fu_630_p2 and tmp_45_fu_648_p2);
    tmp_48_fu_660_p2 <= (tmp_46_fu_654_p2 and tmp_47_fu_367_p2);
    tmp_49_fu_941_p4 <= w_3_to_int_fu_937_p1(30 downto 23);
        tmp_4_fu_776_p1 <= std_logic_vector(resize(signed(r_load_reg_1198),64));

    tmp_50_fu_501_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_493_p3) - unsigned(tmp_41_fu_485_p1));
    tmp_51_fu_967_p2 <= (notrhs5_fu_961_p2 or notlhs5_fu_955_p2);
    tmp_53_fu_973_p2 <= (tmp_51_fu_967_p2 and grp_fu_362_p2);
    tmp_54_fu_507_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1147) + unsigned(tmp_50_fu_501_p2));
    tmp_55_fu_537_p1 <= n_assign_1_to_int_fu_523_p1(23 - 1 downto 0);
    tmp_56_fu_596_p1 <= w_4_to_int_fu_583_p1(23 - 1 downto 0);
    tmp_57_fu_614_p1 <= wmax_to_int_fu_600_p1(23 - 1 downto 0);
        tmp_58_cast_fu_711_p1 <= std_logic_vector(resize(signed(tmp_21_fu_706_p2),64));

    tmp_58_fu_1067_p3 <= (reg_386 & ap_const_lv2_0);
    tmp_59_fu_1075_p1 <= std_logic_vector(resize(unsigned(tmp_58_fu_1067_p3),5));
    tmp_5_to_int_fu_780_p1 <= tmp_5_reg_1219;
    tmp_60_fu_1084_p2 <= std_logic_vector(unsigned(tmp_59_fu_1075_p1) - unsigned(tmp_10_cast_fu_1063_p1));
        tmp_61_cast_fu_512_p1 <= std_logic_vector(resize(signed(tmp_54_fu_507_p2),64));

    tmp_61_fu_1090_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1358) + unsigned(tmp_60_fu_1084_p2));
    tmp_62_fu_841_p2 <= std_logic_vector(unsigned(tmp_9_reg_1154) + unsigned(tmp_11_cast_fu_837_p1));
    tmp_63_fu_851_p2 <= std_logic_vector(unsigned(tmp_16_reg_1204) + unsigned(tmp_11_cast_fu_837_p1));
        tmp_64_cast_fu_1095_p1 <= std_logic_vector(resize(signed(tmp_61_fu_1090_p2),64));

    tmp_64_fu_877_p2 <= std_logic_vector(unsigned(tmp_9_reg_1154) + unsigned(tmp_12_cast_fu_873_p1));
        tmp_65_cast_fu_846_p1 <= std_logic_vector(resize(signed(tmp_62_fu_841_p2),64));

    tmp_65_fu_909_p3 <= (i_3_reg_297 & ap_const_lv2_0);
        tmp_66_cast_fu_856_p1 <= std_logic_vector(resize(signed(tmp_63_fu_851_p2),64));

    tmp_66_fu_921_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_917_p1) - unsigned(tmp_16_cast_fu_905_p1));
        tmp_67_cast_fu_882_p1 <= std_logic_vector(resize(signed(tmp_64_fu_877_p2),64));

    tmp_67_fu_927_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_1147) + unsigned(tmp_66_fu_921_p2));
    tmp_68_fu_951_p1 <= w_3_to_int_fu_937_p1(23 - 1 downto 0);
    tmp_69_fu_1001_p2 <= std_logic_vector(unsigned(tmp_9_reg_1154) + unsigned(tmp_21_cast_fu_997_p1));
    tmp_6_fu_720_p4 <= pivot_to_int_fu_716_p1(30 downto 23);
        tmp_70_cast_fu_932_p1 <= std_logic_vector(resize(signed(tmp_67_fu_927_p2),64));

    tmp_70_fu_1011_p2 <= std_logic_vector(unsigned(tmp_66_reg_1292) + unsigned(tmp_21_cast_fu_997_p1));
        tmp_71_cast_fu_1006_p1 <= std_logic_vector(resize(signed(tmp_69_fu_1001_p2),64));

        tmp_72_cast_fu_1016_p1 <= std_logic_vector(resize(signed(tmp_70_fu_1011_p2),64));

    tmp_7_fu_456_p3 <= (i_5_reg_241 & ap_const_lv2_0);
    tmp_8_fu_1052_p2 <= "1" when (work_q1 = i_4_reg_319) else "0";
    tmp_9_fu_473_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_469_p1) - unsigned(tmp_3_cast_fu_452_p1));
    tmp_cast_fu_1048_p1 <= std_logic_vector(resize(unsigned(i_4_reg_319),5));
    tmp_fu_422_p1 <= std_logic_vector(resize(unsigned(i_reg_229),64));
    tmp_s_fu_1043_p1 <= std_logic_vector(resize(unsigned(i_4_reg_319),64));
    w_3_to_int_fu_937_p1 <= reg_393;
    w_4_fu_575_p3 <= 
        reg_380 when (tmp_39_fu_559_p2(0) = '1') else 
        f_1_fu_571_p1;
    w_4_to_int_fu_583_p1 <= w_4_reg_1180;
    wmax_1_fu_666_p3 <= 
        ap_pipeline_reg_pp0_iter3_w_4_reg_1180 when (tmp_48_reg_1187(0) = '1') else 
        wmax_reg_253;

    wmax_phi_fu_257_p4_assign_proc : process(wmax_reg_253, ap_pipeline_reg_pp0_iter3_exitcond6_reg_1166, wmax_1_fu_666_p3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond6_reg_1166))) then 
            wmax_phi_fu_257_p4 <= wmax_1_fu_666_p3;
        else 
            wmax_phi_fu_257_p4 <= wmax_reg_253;
        end if; 
    end process;

    wmax_to_int_fu_600_p1 <= wmax_phi_fu_257_p4;

    work_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state2, tmp_3_reg_1142, ap_CS_fsm_state13, work_addr_4_reg_1238, work_addr_1_reg_1363, ap_CS_fsm_state87, ap_CS_fsm_state15, tmp_fu_422_p1, tmp_10_fu_1058_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state87))) then 
            work_address0 <= work_addr_1_reg_1363;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state85))) then 
            work_address0 <= tmp_10_fu_1058_p1(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            work_address0 <= work_addr_4_reg_1238;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_address0 <= tmp_3_reg_1142(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            work_address0 <= tmp_fu_422_p1(9 - 1 downto 0);
        else 
            work_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    work_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state13, work_addr_3_reg_1232, work_addr_1_reg_1363, work_addr_2_reg_1372, ap_CS_fsm_state86, tmp_4_fu_776_p1, ap_CS_fsm_state84)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state86))) then 
            work_address1 <= work_addr_2_reg_1372;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state84))) then 
            work_address1 <= work_addr_1_reg_1363;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_address1 <= work_addr_3_reg_1232;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            work_address1 <= tmp_4_fu_776_p1(9 - 1 downto 0);
        else 
            work_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    work_ce0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state87, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state85)) or ((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state87)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            work_ce0 <= ap_const_logic_1;
        else 
            work_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    work_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state86, ap_CS_fsm_state84)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state86)) or ((ap_const_lv1_1 = ap_CS_fsm_state84)))) then 
            work_ce1 <= ap_const_logic_1;
        else 
            work_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    work_d0_assign_proc : process(reg_386, ap_CS_fsm_state2, work_load_1_reg_1378, ap_CS_fsm_state87, ap_CS_fsm_state15, i_reg_229)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state87))) then 
            work_d0 <= work_load_1_reg_1378;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            work_d0 <= reg_386;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            work_d0 <= i_reg_229;
        else 
            work_d0 <= "XX";
        end if; 
    end process;


    work_d1_assign_proc : process(reg_386, ap_CS_fsm_state14, work_q1, ap_CS_fsm_state86)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state86))) then 
            work_d1 <= reg_386;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            work_d1 <= work_q1;
        else 
            work_d1 <= "XX";
        end if; 
    end process;


    work_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state87, ap_CS_fsm_state15, exitcond7_fu_410_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state87)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond7_fu_410_p2)))) then 
            work_we0 <= ap_const_logic_1;
        else 
            work_we0 <= ap_const_logic_0;
        end if; 
    end process;


    work_we1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state86)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state86)))) then 
            work_we1 <= ap_const_logic_1;
        else 
            work_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
