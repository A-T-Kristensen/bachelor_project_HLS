// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aesl_mux_load_4_4_x_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aesl_mux_load_4_4_x_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aesl_mux_load_4_4_x_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> aesl_mux_load_4_4_x_s::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> aesl_mux_load_4_4_x_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> aesl_mux_load_4_4_x_s::ap_const_lv1_1 = "1";
const sc_lv<32> aesl_mux_load_4_4_x_s::ap_const_lv32_2 = "10";
const sc_lv<2> aesl_mux_load_4_4_x_s::ap_const_lv2_0 = "00";
const sc_lv<2> aesl_mux_load_4_4_x_s::ap_const_lv2_1 = "1";
const sc_lv<2> aesl_mux_load_4_4_x_s::ap_const_lv2_2 = "10";
const sc_lv<4> aesl_mux_load_4_4_x_s::ap_const_lv4_0 = "0000";

aesl_mux_load_4_4_x_s::aesl_mux_load_4_4_x_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_pipeline_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_pipeline_start_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( empty_9_Dout_A );
    sensitive << ( sel_tmp4_fu_132_p2 );
    sensitive << ( sel_tmp3_fu_124_p3 );

    SC_METHOD(thread_empty_10_Addr_A);
    sensitive << ( empty_10_Addr_A_orig );

    SC_METHOD(thread_empty_10_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( p_cast_fu_98_p1 );

    SC_METHOD(thread_empty_10_Din_A);

    SC_METHOD(thread_empty_10_EN_A);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_10_WEN_A);

    SC_METHOD(thread_empty_7_Addr_A);
    sensitive << ( empty_7_Addr_A_orig );

    SC_METHOD(thread_empty_7_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( p_cast_fu_98_p1 );

    SC_METHOD(thread_empty_7_Din_A);

    SC_METHOD(thread_empty_7_EN_A);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_7_WEN_A);

    SC_METHOD(thread_empty_8_Addr_A);
    sensitive << ( empty_8_Addr_A_orig );

    SC_METHOD(thread_empty_8_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( p_cast_fu_98_p1 );

    SC_METHOD(thread_empty_8_Din_A);

    SC_METHOD(thread_empty_8_EN_A);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_8_WEN_A);

    SC_METHOD(thread_empty_9_Addr_A);
    sensitive << ( empty_9_Addr_A_orig );

    SC_METHOD(thread_empty_9_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( p_cast_fu_98_p1 );

    SC_METHOD(thread_empty_9_Din_A);

    SC_METHOD(thread_empty_9_EN_A);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_9_WEN_A);

    SC_METHOD(thread_p_cast_fu_98_p1);
    sensitive << ( empty );

    SC_METHOD(thread_sel_tmp1_fu_111_p3);
    sensitive << ( empty_7_Dout_A );
    sensitive << ( empty_10_Dout_A );
    sensitive << ( sel_tmp_fu_106_p2 );

    SC_METHOD(thread_sel_tmp2_fu_119_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_64_reg_145 );

    SC_METHOD(thread_sel_tmp3_fu_124_p3);
    sensitive << ( empty_8_Dout_A );
    sensitive << ( sel_tmp2_fu_119_p2 );
    sensitive << ( sel_tmp1_fu_111_p3 );

    SC_METHOD(thread_sel_tmp4_fu_132_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_64_reg_145 );

    SC_METHOD(thread_sel_tmp_fu_106_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_64_reg_145 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );
    sensitive << ( ap_pipeline_idle_pp0 );
    sensitive << ( ap_pipeline_start_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aesl_mux_load_4_4_x_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, empty_7_Addr_A, "(port)empty_7_Addr_A");
    sc_trace(mVcdFile, empty_7_EN_A, "(port)empty_7_EN_A");
    sc_trace(mVcdFile, empty_7_WEN_A, "(port)empty_7_WEN_A");
    sc_trace(mVcdFile, empty_7_Din_A, "(port)empty_7_Din_A");
    sc_trace(mVcdFile, empty_7_Dout_A, "(port)empty_7_Dout_A");
    sc_trace(mVcdFile, empty_8_Addr_A, "(port)empty_8_Addr_A");
    sc_trace(mVcdFile, empty_8_EN_A, "(port)empty_8_EN_A");
    sc_trace(mVcdFile, empty_8_WEN_A, "(port)empty_8_WEN_A");
    sc_trace(mVcdFile, empty_8_Din_A, "(port)empty_8_Din_A");
    sc_trace(mVcdFile, empty_8_Dout_A, "(port)empty_8_Dout_A");
    sc_trace(mVcdFile, empty_9_Addr_A, "(port)empty_9_Addr_A");
    sc_trace(mVcdFile, empty_9_EN_A, "(port)empty_9_EN_A");
    sc_trace(mVcdFile, empty_9_WEN_A, "(port)empty_9_WEN_A");
    sc_trace(mVcdFile, empty_9_Din_A, "(port)empty_9_Din_A");
    sc_trace(mVcdFile, empty_9_Dout_A, "(port)empty_9_Dout_A");
    sc_trace(mVcdFile, empty_10_Addr_A, "(port)empty_10_Addr_A");
    sc_trace(mVcdFile, empty_10_EN_A, "(port)empty_10_EN_A");
    sc_trace(mVcdFile, empty_10_WEN_A, "(port)empty_10_WEN_A");
    sc_trace(mVcdFile, empty_10_Din_A, "(port)empty_10_Din_A");
    sc_trace(mVcdFile, empty_10_Dout_A, "(port)empty_10_Dout_A");
    sc_trace(mVcdFile, empty_11, "(port)empty_11");
    sc_trace(mVcdFile, empty, "(port)empty");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, tmp_64_reg_145, "tmp_64_reg_145");
    sc_trace(mVcdFile, p_cast_fu_98_p1, "p_cast_fu_98_p1");
    sc_trace(mVcdFile, empty_10_Addr_A_orig, "empty_10_Addr_A_orig");
    sc_trace(mVcdFile, empty_7_Addr_A_orig, "empty_7_Addr_A_orig");
    sc_trace(mVcdFile, empty_8_Addr_A_orig, "empty_8_Addr_A_orig");
    sc_trace(mVcdFile, empty_9_Addr_A_orig, "empty_9_Addr_A_orig");
    sc_trace(mVcdFile, sel_tmp_fu_106_p2, "sel_tmp_fu_106_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_119_p2, "sel_tmp2_fu_119_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_111_p3, "sel_tmp1_fu_111_p3");
    sc_trace(mVcdFile, sel_tmp4_fu_132_p2, "sel_tmp4_fu_132_p2");
    sc_trace(mVcdFile, sel_tmp3_fu_124_p3, "sel_tmp3_fu_124_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_pipeline_idle_pp0, "ap_pipeline_idle_pp0");
    sc_trace(mVcdFile, ap_pipeline_start_pp0, "ap_pipeline_start_pp0");
#endif

    }
}

aesl_mux_load_4_4_x_s::~aesl_mux_load_4_4_x_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aesl_mux_load_4_4_x_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        tmp_64_reg_145 = empty_11.read();
    }
}

void aesl_mux_load_4_4_x_s::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(0, 0);
}

void aesl_mux_load_4_4_x_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void aesl_mux_load_4_4_x_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_ap_pipeline_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()))) {
        ap_pipeline_idle_pp0 = ap_const_logic_1;
    } else {
        ap_pipeline_idle_pp0 = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_ap_pipeline_start_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_pipeline_start_pp0 = ap_const_logic_1;
    } else {
        ap_pipeline_start_pp0 = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_ap_return() {
    ap_return = (!sel_tmp4_fu_132_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_fu_132_p2.read()[0].to_bool())? empty_9_Dout_A.read(): sel_tmp3_fu_124_p3.read());
}

void aesl_mux_load_4_4_x_s::thread_empty_10_Addr_A() {
    empty_10_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_10_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_4_4_x_s::thread_empty_10_Addr_A_orig() {
    empty_10_Addr_A_orig =  (sc_lv<32>) (p_cast_fu_98_p1.read());
}

void aesl_mux_load_4_4_x_s::thread_empty_10_Din_A() {
    empty_10_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_4_4_x_s::thread_empty_10_EN_A() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        empty_10_EN_A = ap_const_logic_1;
    } else {
        empty_10_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_empty_10_WEN_A() {
    empty_10_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_4_4_x_s::thread_empty_7_Addr_A() {
    empty_7_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_7_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_4_4_x_s::thread_empty_7_Addr_A_orig() {
    empty_7_Addr_A_orig =  (sc_lv<32>) (p_cast_fu_98_p1.read());
}

void aesl_mux_load_4_4_x_s::thread_empty_7_Din_A() {
    empty_7_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_4_4_x_s::thread_empty_7_EN_A() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        empty_7_EN_A = ap_const_logic_1;
    } else {
        empty_7_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_empty_7_WEN_A() {
    empty_7_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_4_4_x_s::thread_empty_8_Addr_A() {
    empty_8_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_8_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_4_4_x_s::thread_empty_8_Addr_A_orig() {
    empty_8_Addr_A_orig =  (sc_lv<32>) (p_cast_fu_98_p1.read());
}

void aesl_mux_load_4_4_x_s::thread_empty_8_Din_A() {
    empty_8_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_4_4_x_s::thread_empty_8_EN_A() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        empty_8_EN_A = ap_const_logic_1;
    } else {
        empty_8_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_empty_8_WEN_A() {
    empty_8_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_4_4_x_s::thread_empty_9_Addr_A() {
    empty_9_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_9_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_4_4_x_s::thread_empty_9_Addr_A_orig() {
    empty_9_Addr_A_orig =  (sc_lv<32>) (p_cast_fu_98_p1.read());
}

void aesl_mux_load_4_4_x_s::thread_empty_9_Din_A() {
    empty_9_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_4_4_x_s::thread_empty_9_EN_A() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        empty_9_EN_A = ap_const_logic_1;
    } else {
        empty_9_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_4_4_x_s::thread_empty_9_WEN_A() {
    empty_9_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_4_4_x_s::thread_p_cast_fu_98_p1() {
    p_cast_fu_98_p1 = esl_sext<64,32>(empty.read());
}

void aesl_mux_load_4_4_x_s::thread_sel_tmp1_fu_111_p3() {
    sel_tmp1_fu_111_p3 = (!sel_tmp_fu_106_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_106_p2.read()[0].to_bool())? empty_7_Dout_A.read(): empty_10_Dout_A.read());
}

void aesl_mux_load_4_4_x_s::thread_sel_tmp2_fu_119_p2() {
    sel_tmp2_fu_119_p2 = (!tmp_64_reg_145.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_64_reg_145.read() == ap_const_lv2_1);
}

void aesl_mux_load_4_4_x_s::thread_sel_tmp3_fu_124_p3() {
    sel_tmp3_fu_124_p3 = (!sel_tmp2_fu_119_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_119_p2.read()[0].to_bool())? empty_8_Dout_A.read(): sel_tmp1_fu_111_p3.read());
}

void aesl_mux_load_4_4_x_s::thread_sel_tmp4_fu_132_p2() {
    sel_tmp4_fu_132_p2 = (!tmp_64_reg_145.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(tmp_64_reg_145.read() == ap_const_lv2_2);
}

void aesl_mux_load_4_4_x_s::thread_sel_tmp_fu_106_p2() {
    sel_tmp_fu_106_p2 = (!tmp_64_reg_145.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_64_reg_145.read() == ap_const_lv2_0);
}

void aesl_mux_load_4_4_x_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

