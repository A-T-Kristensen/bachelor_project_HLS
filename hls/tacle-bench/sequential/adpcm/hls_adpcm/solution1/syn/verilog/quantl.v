// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quantl (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        el,
        detl,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'b1;
parameter    ap_ST_fsm_state2 = 8'b10;
parameter    ap_ST_fsm_state3 = 8'b100;
parameter    ap_ST_fsm_state4 = 8'b1000;
parameter    ap_ST_fsm_state5 = 8'b10000;
parameter    ap_ST_fsm_state6 = 8'b100000;
parameter    ap_ST_fsm_state7 = 8'b1000000;
parameter    ap_ST_fsm_state8 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv5_1E = 5'b11110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv6_0 = 6'b000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] el;
input  [31:0] detl;
output  [5:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] ap_return;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [4:0] decis_levl_address0;
reg    decis_levl_ce0;
wire   [14:0] decis_levl_q0;
wire   [4:0] quant26bt_pos_address0;
reg    quant26bt_pos_ce0;
wire   [5:0] quant26bt_pos_q0;
wire   [4:0] quant26bt_neg_address0;
reg    quant26bt_neg_ce0;
wire   [5:0] quant26bt_neg_q0;
wire   [4:0] mil_1_fu_120_p2;
reg   [4:0] mil_1_reg_131;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_fu_147_p3;
reg   [0:0] tmp_reg_217;
wire   [31:0] n_assign_fu_161_p3;
reg   [31:0] n_assign_reg_222;
wire  signed [46:0] tmp_cast_fu_169_p1;
reg  signed [46:0] tmp_cast_reg_227;
wire   [0:0] tmp_s_fu_173_p2;
reg   [0:0] tmp_s_reg_232;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state7;
reg   [4:0] mil_reg_108;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] tmp_33_fu_199_p2;
wire   [63:0] tmp_31_fu_179_p1;
wire   [63:0] tmp_34_fu_204_p1;
wire  signed [31:0] grp_fu_136_p0;
wire   [14:0] grp_fu_136_p1;
wire   [31:0] m_fu_155_p2;
wire   [46:0] grp_fu_136_p2;
wire   [31:0] tmp_2_fu_189_p4;
wire   [0:0] ap_CS_fsm_state8;
wire   [5:0] ril_2_fu_210_p3;
reg   [5:0] ap_return_preg;
reg   [7:0] ap_NS_fsm;
wire   [46:0] grp_fu_136_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
#0 ap_return_preg = 6'b000000;
end

quantl_decis_levl #(
    .DataWidth( 15 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
decis_levl_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(decis_levl_address0),
    .ce0(decis_levl_ce0),
    .q0(decis_levl_q0)
);

quantl_quant26bt_fYi #(
    .DataWidth( 6 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
quant26bt_pos_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(quant26bt_pos_address0),
    .ce0(quant26bt_pos_ce0),
    .q0(quant26bt_pos_q0)
);

quantl_quant26bt_g8j #(
    .DataWidth( 6 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
quant26bt_neg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(quant26bt_neg_address0),
    .ce0(quant26bt_neg_ce0),
    .q0(quant26bt_neg_q0)
);

adpcm_main_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 47 ))
adpcm_main_mul_32hbi_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_136_p0),
    .din1(grp_fu_136_p1),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv6_0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_return_preg <= ril_2_fu_210_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(tmp_s_reg_232 == 1'b0) & (1'b1 == ap_CS_fsm_state6) & ~(1'b0 == tmp_33_fu_199_p2))) begin
        mil_reg_108 <= mil_1_reg_131;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        mil_reg_108 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mil_1_reg_131 <= mil_1_fu_120_p2;
        tmp_s_reg_232 <= tmp_s_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        n_assign_reg_222 <= n_assign_fu_161_p3;
        tmp_cast_reg_227 <= tmp_cast_fu_169_p1;
        tmp_reg_217 <= el[ap_const_lv32_1F];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_return = ril_2_fu_210_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        decis_levl_ce0 = 1'b1;
    end else begin
        decis_levl_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        quant26bt_neg_ce0 = 1'b1;
    end else begin
        quant26bt_neg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        quant26bt_pos_ce0 = 1'b1;
    end else begin
        quant26bt_pos_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~(tmp_s_reg_232 == 1'b0) & ~(1'b0 == tmp_33_fu_199_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign decis_levl_address0 = tmp_31_fu_179_p1;

assign grp_fu_136_p0 = tmp_cast_reg_227;

assign grp_fu_136_p1 = grp_fu_136_p10;

assign grp_fu_136_p10 = decis_levl_q0;

assign m_fu_155_p2 = (ap_const_lv32_0 - el);

assign mil_1_fu_120_p2 = (mil_reg_108 + ap_const_lv5_1);

assign n_assign_fu_161_p3 = ((tmp_fu_147_p3[0:0] === 1'b1) ? m_fu_155_p2 : el);

assign quant26bt_neg_address0 = tmp_34_fu_204_p1;

assign quant26bt_pos_address0 = tmp_34_fu_204_p1;

assign ril_2_fu_210_p3 = ((tmp_reg_217[0:0] === 1'b1) ? quant26bt_neg_q0 : quant26bt_pos_q0);

assign tmp_2_fu_189_p4 = {{grp_fu_136_p2[ap_const_lv32_2E : ap_const_lv32_F]}};

assign tmp_31_fu_179_p1 = mil_reg_108;

assign tmp_33_fu_199_p2 = (($signed(n_assign_reg_222) > $signed(tmp_2_fu_189_p4)) ? 1'b1 : 1'b0);

assign tmp_34_fu_204_p1 = mil_reg_108;

assign tmp_cast_fu_169_p1 = $signed(detl);

assign tmp_fu_147_p3 = el[ap_const_lv32_1F];

assign tmp_s_fu_173_p2 = ((mil_reg_108 < ap_const_lv5_1E) ? 1'b1 : 1'b0);

endmodule //quantl
