// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module upzero (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dlt,
        dlti_address0,
        dlti_ce0,
        dlti_we0,
        dlti_d0,
        dlti_q0,
        dlti_address1,
        dlti_ce1,
        dlti_we1,
        dlti_d1,
        dlti_q1,
        bli_address0,
        bli_ce0,
        bli_we0,
        bli_d0,
        bli_q0
);

parameter    ap_ST_fsm_state1 = 16'b1;
parameter    ap_ST_fsm_state2 = 16'b10;
parameter    ap_ST_fsm_state3 = 16'b100;
parameter    ap_ST_fsm_state4 = 16'b1000;
parameter    ap_ST_fsm_state5 = 16'b10000;
parameter    ap_ST_fsm_state6 = 16'b100000;
parameter    ap_ST_fsm_state7 = 16'b1000000;
parameter    ap_ST_fsm_state8 = 16'b10000000;
parameter    ap_ST_fsm_state9 = 16'b100000000;
parameter    ap_ST_fsm_state10 = 16'b1000000000;
parameter    ap_ST_fsm_state11 = 16'b10000000000;
parameter    ap_ST_fsm_state12 = 16'b100000000000;
parameter    ap_ST_fsm_state13 = 16'b1000000000000;
parameter    ap_ST_fsm_state14 = 16'b10000000000000;
parameter    ap_ST_fsm_state15 = 16'b100000000000000;
parameter    ap_ST_fsm_state16 = 16'b1000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_FFFFFF80 = 32'b11111111111111111111111110000000;
parameter    ap_const_lv32_80 = 32'b10000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_27 = 32'b100111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] dlt;
output  [2:0] dlti_address0;
output   dlti_ce0;
output   dlti_we0;
output  [31:0] dlti_d0;
input  [31:0] dlti_q0;
output  [2:0] dlti_address1;
output   dlti_ce1;
output   dlti_we1;
output  [31:0] dlti_d1;
input  [31:0] dlti_q1;
output  [2:0] bli_address0;
output   bli_ce0;
output   bli_we0;
output  [31:0] bli_d0;
input  [31:0] bli_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] dlti_address0;
reg dlti_ce0;
reg dlti_we0;
reg[2:0] dlti_address1;
reg dlti_ce1;
reg dlti_we1;
reg[31:0] dlti_d1;
reg[2:0] bli_address0;
reg bli_ce0;
reg bli_we0;
reg[31:0] bli_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg  signed [31:0] reg_165;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] tmp_fu_172_p2;
reg   [0:0] tmp_reg_314;
wire  signed [63:0] tmp_1_fu_178_p1;
reg  signed [63:0] tmp_1_reg_318;
wire   [2:0] i_3_fu_188_p2;
reg   [2:0] i_3_reg_326;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_182_p2;
reg   [2:0] bli_addr_1_reg_336;
wire   [2:0] i_2_fu_206_p2;
reg   [2:0] i_2_reg_344;
reg   [2:0] bli_addr_reg_349;
wire   [0:0] exitcond1_fu_200_p2;
wire   [0:0] ap_CS_fsm_state4;
wire   [63:0] grp_fu_221_p2;
reg   [63:0] tmp_s_reg_371;
wire   [0:0] ap_CS_fsm_state9;
reg   [31:0] bli_load_1_reg_376;
reg   [31:0] dlti_load_2_reg_382;
wire   [2:0] dlti_addr_4_reg_387;
wire   [2:0] dlti_addr_5_reg_392;
reg   [31:0] dlti_load_4_reg_397;
reg   [2:0] i_1_reg_143;
wire   [0:0] ap_CS_fsm_state10;
reg   [2:0] i_reg_154;
wire   [0:0] ap_CS_fsm_state11;
wire   [63:0] tmp_8_fu_194_p1;
wire   [63:0] tmp_2_fu_212_p1;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state8;
wire   [31:0] tmp_5_fu_267_p2;
wire  signed [31:0] grp_fu_221_p0;
wire   [0:0] tmp_7_fu_226_p3;
wire   [39:0] p_shl1_fu_244_p3;
wire  signed [39:0] tmp_10_cast_fu_241_p1;
wire   [39:0] tmp_3_fu_251_p2;
wire   [31:0] wd2_cast_cast_cast_fu_233_p3;
wire   [31:0] wd3_fu_257_p4;
wire   [39:0] p_shl_fu_278_p3;
wire  signed [39:0] tmp_3_cast_fu_274_p1;
wire   [39:0] tmp_4_fu_286_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'b1;
end

adpcm_main_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
adpcm_main_mul_32bkb_x_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_221_p0),
    .din1(reg_165),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (tmp_fu_172_p2 == 1'b0))) begin
        i_1_reg_143 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_143 <= i_3_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(tmp_fu_172_p2 == 1'b0))) begin
        i_reg_154 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_154 <= i_2_reg_344;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_165 <= dlti_q1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_165 <= dlti_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_reg_314 == 1'b0) & (1'b0 == exitcond_fu_182_p2))) begin
        bli_addr_1_reg_336 <= tmp_8_fu_194_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_reg_314 == 1'b0) & (1'b0 == exitcond1_fu_200_p2))) begin
        bli_addr_reg_349 <= tmp_2_fu_212_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bli_load_1_reg_376 <= bli_q0;
        tmp_s_reg_371 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        dlti_load_2_reg_382 <= dlti_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        dlti_load_4_reg_397 <= dlti_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_reg_314 == 1'b0))) begin
        i_2_reg_344 <= i_2_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_reg_314 == 1'b0))) begin
        i_3_reg_326 <= i_3_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (tmp_fu_172_p2 == 1'b0))) begin
        tmp_1_reg_318 <= tmp_1_fu_178_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_314 <= tmp_fu_172_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bli_address0 = bli_addr_reg_349;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        bli_address0 = bli_addr_1_reg_336;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bli_address0 = tmp_2_fu_212_p1;
    end else begin
        bli_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        bli_ce0 = 1'b1;
    end else begin
        bli_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bli_d0 = {{tmp_4_fu_286_p2[ap_const_lv32_27 : ap_const_lv32_8]}};
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        bli_d0 = tmp_5_fu_267_p2;
    end else begin
        bli_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11))) begin
        bli_we0 = 1'b1;
    end else begin
        bli_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dlti_address0 = dlti_addr_5_reg_392;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dlti_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dlti_address0 = ap_const_lv64_0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dlti_address0 = ap_const_lv64_1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (((tmp_reg_314 == 1'b0) & ~(1'b0 == exitcond_fu_182_p2)) | (~(tmp_reg_314 == 1'b0) & ~(1'b0 == exitcond1_fu_200_p2))))) begin
        dlti_address0 = ap_const_lv64_4;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_reg_314 == 1'b0) & (1'b0 == exitcond_fu_182_p2))) begin
        dlti_address0 = tmp_8_fu_194_p1;
    end else begin
        dlti_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        dlti_address1 = ap_const_lv64_0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dlti_address1 = dlti_addr_4_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dlti_address1 = ap_const_lv64_4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dlti_address1 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dlti_address1 = ap_const_lv64_2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dlti_address1 = ap_const_lv64_3;
    end else begin
        dlti_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state2) & (tmp_reg_314 == 1'b0) & (1'b0 == exitcond_fu_182_p2)) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_reg_314 == 1'b0) & ~(1'b0 == exitcond_fu_182_p2)) | (~(tmp_reg_314 == 1'b0) & ~(1'b0 == exitcond1_fu_200_p2)))) | (1'b1 == ap_CS_fsm_state15))) begin
        dlti_ce0 = 1'b1;
    end else begin
        dlti_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16))) begin
        dlti_ce1 = 1'b1;
    end else begin
        dlti_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        dlti_d1 = dlt;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dlti_d1 = dlti_load_4_reg_397;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dlti_d1 = dlti_load_2_reg_382;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dlti_d1 = reg_165;
    end else begin
        dlti_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        dlti_we0 = 1'b1;
    end else begin
        dlti_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16))) begin
        dlti_we1 = 1'b1;
    end else begin
        dlti_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(tmp_reg_314 == 1'b0) & (1'b0 == exitcond1_fu_200_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if ((((tmp_reg_314 == 1'b0) & ~(1'b0 == exitcond_fu_182_p2)) | (~(tmp_reg_314 == 1'b0) & ~(1'b0 == exitcond1_fu_200_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign dlti_addr_4_reg_387 = ap_const_lv64_2;

assign dlti_addr_5_reg_392 = ap_const_lv64_1;

assign dlti_d0 = reg_165;

assign exitcond1_fu_200_p2 = ((i_reg_154 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond_fu_182_p2 = ((i_1_reg_143 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign grp_fu_221_p0 = tmp_1_reg_318;

assign i_2_fu_206_p2 = (i_reg_154 + ap_const_lv3_1);

assign i_3_fu_188_p2 = (i_1_reg_143 + ap_const_lv3_1);

assign p_shl1_fu_244_p3 = {{bli_load_1_reg_376}, {ap_const_lv8_0}};

assign p_shl_fu_278_p3 = {{bli_q0}, {ap_const_lv8_0}};

assign tmp_10_cast_fu_241_p1 = $signed(bli_load_1_reg_376);

assign tmp_1_fu_178_p1 = $signed(dlt);

assign tmp_2_fu_212_p1 = i_reg_154;

assign tmp_3_cast_fu_274_p1 = $signed(bli_q0);

assign tmp_3_fu_251_p2 = ($signed(p_shl1_fu_244_p3) - $signed(tmp_10_cast_fu_241_p1));

assign tmp_4_fu_286_p2 = ($signed(p_shl_fu_278_p3) - $signed(tmp_3_cast_fu_274_p1));

assign tmp_5_fu_267_p2 = (wd2_cast_cast_cast_fu_233_p3 + wd3_fu_257_p4);

assign tmp_7_fu_226_p3 = tmp_s_reg_371[ap_const_lv32_3F];

assign tmp_8_fu_194_p1 = i_1_reg_143;

assign tmp_fu_172_p2 = ((dlt == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign wd2_cast_cast_cast_fu_233_p3 = ((tmp_7_fu_226_p3[0:0] === 1'b1) ? ap_const_lv32_FFFFFF80 : ap_const_lv32_80);

assign wd3_fu_257_p4 = {{tmp_3_fu_251_p2[ap_const_lv32_27 : ap_const_lv32_8]}};

endmodule //upzero
