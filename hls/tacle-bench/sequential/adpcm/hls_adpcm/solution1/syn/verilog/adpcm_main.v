// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adpcm_main,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.741000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=11,HLS_SYN_DSP=70,HLS_SYN_FF=5484,HLS_SYN_LUT=5029}" *)

module adpcm_main (
        test_data_address0,
        test_data_ce0,
        test_data_d0,
        test_data_q0,
        test_data_we0,
        compressed_address0,
        compressed_ce0,
        compressed_d0,
        compressed_q0,
        compressed_we0,
        dec_result_address0,
        dec_result_ce0,
        dec_result_d0,
        dec_result_q0,
        dec_result_we0,
        select_r,
        size,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle
);

parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;

output  [1:0] test_data_address0;
output   test_data_ce0;
output  [31:0] test_data_d0;
input  [31:0] test_data_q0;
output   test_data_we0;
output  [1:0] compressed_address0;
output   compressed_ce0;
output  [31:0] compressed_d0;
input  [31:0] compressed_q0;
output   compressed_we0;
output  [1:0] dec_result_address0;
output   dec_result_ce0;
output  [31:0] dec_result_d0;
input  [31:0] dec_result_q0;
output   dec_result_we0;
input  [31:0] select_r;
input  [31:0] size;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;

wire    Block_proc_U0_ap_start;
wire    Block_proc_U0_ap_done;
wire    Block_proc_U0_ap_continue;
wire    Block_proc_U0_ap_idle;
wire    Block_proc_U0_ap_ready;
wire   [1:0] Block_proc_U0_dec_result_address0;
wire    Block_proc_U0_dec_result_ce0;
wire    Block_proc_U0_dec_result_we0;
wire   [31:0] Block_proc_U0_dec_result_d0;
wire   [1:0] Block_proc_U0_test_data_address0;
wire    Block_proc_U0_test_data_ce0;
wire   [1:0] Block_proc_U0_compressed_address0;
wire    Block_proc_U0_compressed_ce0;
wire    Block_proc_U0_compressed_we0;
wire   [31:0] Block_proc_U0_compressed_d0;
wire    ap_hs_continue;
wire    ap_hs_done;
wire    ap_hs_ready;

Block_proc Block_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_proc_U0_ap_start),
    .ap_done(Block_proc_U0_ap_done),
    .ap_continue(Block_proc_U0_ap_continue),
    .ap_idle(Block_proc_U0_ap_idle),
    .ap_ready(Block_proc_U0_ap_ready),
    .select_r(select_r),
    .size(size),
    .dec_result_address0(Block_proc_U0_dec_result_address0),
    .dec_result_ce0(Block_proc_U0_dec_result_ce0),
    .dec_result_we0(Block_proc_U0_dec_result_we0),
    .dec_result_d0(Block_proc_U0_dec_result_d0),
    .test_data_address0(Block_proc_U0_test_data_address0),
    .test_data_ce0(Block_proc_U0_test_data_ce0),
    .test_data_q0(test_data_q0),
    .compressed_address0(Block_proc_U0_compressed_address0),
    .compressed_ce0(Block_proc_U0_compressed_ce0),
    .compressed_we0(Block_proc_U0_compressed_we0),
    .compressed_d0(Block_proc_U0_compressed_d0),
    .compressed_q0(compressed_q0)
);

assign Block_proc_U0_ap_continue = 1'b1;

assign Block_proc_U0_ap_start = ap_start;

assign ap_done = Block_proc_U0_ap_done;

assign ap_hs_continue = 1'b1;

assign ap_hs_done = Block_proc_U0_ap_done;

assign ap_hs_ready = Block_proc_U0_ap_ready;

assign ap_idle = Block_proc_U0_ap_idle;

assign ap_ready = Block_proc_U0_ap_ready;

assign compressed_address0 = Block_proc_U0_compressed_address0;

assign compressed_ce0 = Block_proc_U0_compressed_ce0;

assign compressed_d0 = Block_proc_U0_compressed_d0;

assign compressed_we0 = Block_proc_U0_compressed_we0;

assign dec_result_address0 = Block_proc_U0_dec_result_address0;

assign dec_result_ce0 = Block_proc_U0_dec_result_ce0;

assign dec_result_d0 = Block_proc_U0_dec_result_d0;

assign dec_result_we0 = Block_proc_U0_dec_result_we0;

assign test_data_address0 = Block_proc_U0_test_data_address0;

assign test_data_ce0 = Block_proc_U0_test_data_ce0;

assign test_data_d0 = ap_const_lv32_0;

assign test_data_we0 = 1'b0;

endmodule //adpcm_main
