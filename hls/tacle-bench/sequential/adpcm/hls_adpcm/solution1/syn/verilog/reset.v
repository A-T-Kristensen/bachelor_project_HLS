// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reset (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dec_detl,
        dec_detl_ap_vld,
        detl,
        detl_ap_vld,
        dec_deth,
        dec_deth_ap_vld,
        deth,
        deth_ap_vld,
        rlt2,
        rlt2_ap_vld,
        rlt1,
        rlt1_ap_vld,
        plt2,
        plt2_ap_vld,
        plt1,
        plt1_ap_vld,
        al2,
        al2_ap_vld,
        al1,
        al1_ap_vld,
        nbl,
        nbl_ap_vld,
        rh2,
        rh2_ap_vld,
        rh1,
        rh1_ap_vld,
        ph2,
        ph2_ap_vld,
        ph1,
        ph1_ap_vld,
        ah2,
        ah2_ap_vld,
        ah1,
        ah1_ap_vld,
        nbh,
        nbh_ap_vld,
        dec_rlt2,
        dec_rlt2_ap_vld,
        dec_rlt1,
        dec_rlt1_ap_vld,
        dec_plt2,
        dec_plt2_ap_vld,
        dec_plt1,
        dec_plt1_ap_vld,
        dec_al2,
        dec_al2_ap_vld,
        dec_al1,
        dec_al1_ap_vld,
        dec_nbl,
        dec_nbl_ap_vld,
        dec_rh2,
        dec_rh2_ap_vld,
        dec_rh1,
        dec_rh1_ap_vld,
        dec_ph2,
        dec_ph2_ap_vld,
        dec_ph1,
        dec_ph1_ap_vld,
        dec_ah2,
        dec_ah2_ap_vld,
        dec_ah1,
        dec_ah1_ap_vld,
        dec_nbh,
        dec_nbh_ap_vld,
        delay_dltx_address1,
        delay_dltx_ce1,
        delay_dltx_we1,
        delay_dltx_d1,
        delay_dhx_address1,
        delay_dhx_ce1,
        delay_dhx_we1,
        delay_dhx_d1,
        dec_del_dltx_address1,
        dec_del_dltx_ce1,
        dec_del_dltx_we1,
        dec_del_dltx_d1,
        dec_del_dhx_address1,
        dec_del_dhx_ce1,
        dec_del_dhx_we1,
        dec_del_dhx_d1,
        delay_bpl_address1,
        delay_bpl_ce1,
        delay_bpl_we1,
        delay_bpl_d1,
        delay_bph_address1,
        delay_bph_ce1,
        delay_bph_we1,
        delay_bph_d1,
        dec_del_bpl_address1,
        dec_del_bpl_ce1,
        dec_del_bpl_we1,
        dec_del_bpl_d1,
        dec_del_bph_address1,
        dec_del_bph_ce1,
        dec_del_bph_we1,
        dec_del_bph_d1,
        tqmf_address1,
        tqmf_ce1,
        tqmf_we1,
        tqmf_d1,
        accumc_address0,
        accumc_ce0,
        accumc_we0,
        accumc_d0,
        accumd_address0,
        accumd_ce0,
        accumd_we0,
        accumd_d0
);

parameter    ap_ST_fsm_state1 = 5'b1;
parameter    ap_ST_fsm_state2 = 5'b10;
parameter    ap_ST_fsm_state3 = 5'b100;
parameter    ap_ST_fsm_state4 = 5'b1000;
parameter    ap_ST_fsm_state5 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv5_18 = 5'b11000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv4_B = 4'b1011;
parameter    ap_const_lv4_1 = 4'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] dec_detl;
output   dec_detl_ap_vld;
output  [31:0] detl;
output   detl_ap_vld;
output  [31:0] dec_deth;
output   dec_deth_ap_vld;
output  [31:0] deth;
output   deth_ap_vld;
output  [31:0] rlt2;
output   rlt2_ap_vld;
output  [31:0] rlt1;
output   rlt1_ap_vld;
output  [31:0] plt2;
output   plt2_ap_vld;
output  [31:0] plt1;
output   plt1_ap_vld;
output  [31:0] al2;
output   al2_ap_vld;
output  [31:0] al1;
output   al1_ap_vld;
output  [31:0] nbl;
output   nbl_ap_vld;
output  [31:0] rh2;
output   rh2_ap_vld;
output  [31:0] rh1;
output   rh1_ap_vld;
output  [31:0] ph2;
output   ph2_ap_vld;
output  [31:0] ph1;
output   ph1_ap_vld;
output  [31:0] ah2;
output   ah2_ap_vld;
output  [31:0] ah1;
output   ah1_ap_vld;
output  [31:0] nbh;
output   nbh_ap_vld;
output  [31:0] dec_rlt2;
output   dec_rlt2_ap_vld;
output  [31:0] dec_rlt1;
output   dec_rlt1_ap_vld;
output  [31:0] dec_plt2;
output   dec_plt2_ap_vld;
output  [31:0] dec_plt1;
output   dec_plt1_ap_vld;
output  [31:0] dec_al2;
output   dec_al2_ap_vld;
output  [31:0] dec_al1;
output   dec_al1_ap_vld;
output  [31:0] dec_nbl;
output   dec_nbl_ap_vld;
output  [31:0] dec_rh2;
output   dec_rh2_ap_vld;
output  [31:0] dec_rh1;
output   dec_rh1_ap_vld;
output  [31:0] dec_ph2;
output   dec_ph2_ap_vld;
output  [31:0] dec_ph1;
output   dec_ph1_ap_vld;
output  [31:0] dec_ah2;
output   dec_ah2_ap_vld;
output  [31:0] dec_ah1;
output   dec_ah1_ap_vld;
output  [31:0] dec_nbh;
output   dec_nbh_ap_vld;
output  [2:0] delay_dltx_address1;
output   delay_dltx_ce1;
output   delay_dltx_we1;
output  [31:0] delay_dltx_d1;
output  [2:0] delay_dhx_address1;
output   delay_dhx_ce1;
output   delay_dhx_we1;
output  [31:0] delay_dhx_d1;
output  [2:0] dec_del_dltx_address1;
output   dec_del_dltx_ce1;
output   dec_del_dltx_we1;
output  [31:0] dec_del_dltx_d1;
output  [2:0] dec_del_dhx_address1;
output   dec_del_dhx_ce1;
output   dec_del_dhx_we1;
output  [31:0] dec_del_dhx_d1;
output  [2:0] delay_bpl_address1;
output   delay_bpl_ce1;
output   delay_bpl_we1;
output  [31:0] delay_bpl_d1;
output  [2:0] delay_bph_address1;
output   delay_bph_ce1;
output   delay_bph_we1;
output  [31:0] delay_bph_d1;
output  [2:0] dec_del_bpl_address1;
output   dec_del_bpl_ce1;
output   dec_del_bpl_we1;
output  [31:0] dec_del_bpl_d1;
output  [2:0] dec_del_bph_address1;
output   dec_del_bph_ce1;
output   dec_del_bph_we1;
output  [31:0] dec_del_bph_d1;
output  [4:0] tqmf_address1;
output   tqmf_ce1;
output   tqmf_we1;
output  [31:0] tqmf_d1;
output  [3:0] accumc_address0;
output   accumc_ce0;
output   accumc_we0;
output  [31:0] accumc_d0;
output  [3:0] accumd_address0;
output   accumd_ce0;
output   accumd_we0;
output  [31:0] accumd_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dec_detl_ap_vld;
reg detl_ap_vld;
reg dec_deth_ap_vld;
reg deth_ap_vld;
reg rlt2_ap_vld;
reg rlt1_ap_vld;
reg plt2_ap_vld;
reg plt1_ap_vld;
reg al2_ap_vld;
reg al1_ap_vld;
reg nbl_ap_vld;
reg rh2_ap_vld;
reg rh1_ap_vld;
reg ph2_ap_vld;
reg ph1_ap_vld;
reg ah2_ap_vld;
reg ah1_ap_vld;
reg nbh_ap_vld;
reg dec_rlt2_ap_vld;
reg dec_rlt1_ap_vld;
reg dec_plt2_ap_vld;
reg dec_plt1_ap_vld;
reg dec_al2_ap_vld;
reg dec_al1_ap_vld;
reg dec_nbl_ap_vld;
reg dec_rh2_ap_vld;
reg dec_rh1_ap_vld;
reg dec_ph2_ap_vld;
reg dec_ph1_ap_vld;
reg dec_ah2_ap_vld;
reg dec_ah1_ap_vld;
reg dec_nbh_ap_vld;
reg delay_dltx_ce1;
reg delay_dltx_we1;
reg delay_dhx_ce1;
reg delay_dhx_we1;
reg dec_del_dltx_ce1;
reg dec_del_dltx_we1;
reg dec_del_dhx_ce1;
reg dec_del_dhx_we1;
reg delay_bpl_ce1;
reg delay_bpl_we1;
reg delay_bph_ce1;
reg delay_bph_we1;
reg dec_del_bpl_ce1;
reg dec_del_bpl_we1;
reg dec_del_bph_ce1;
reg dec_del_bph_we1;
reg tqmf_ce1;
reg tqmf_we1;
reg accumc_ce0;
reg accumc_we0;
reg accumd_ce0;
reg accumd_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [2:0] i_4_fu_542_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [2:0] i_5_fu_562_p2;
wire   [0:0] ap_CS_fsm_state3;
wire   [4:0] i_6_fu_582_p2;
wire   [0:0] ap_CS_fsm_state4;
wire   [3:0] i_7_fu_599_p2;
wire   [0:0] ap_CS_fsm_state5;
reg   [2:0] i_reg_300;
wire   [0:0] exitcond3_fu_536_p2;
reg   [2:0] i_1_reg_311;
wire   [0:0] exitcond2_fu_556_p2;
reg   [4:0] i_2_reg_322;
wire   [0:0] exitcond1_fu_576_p2;
reg   [3:0] i_3_reg_333;
wire   [0:0] exitcond_fu_593_p2;
wire   [63:0] tmp_fu_548_p1;
wire   [63:0] tmp_s_fu_568_p1;
wire   [63:0] tmp_30_fu_588_p1;
wire   [63:0] tmp_31_fu_605_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond3_fu_536_p2 == 1'b0))) begin
        i_1_reg_311 <= ap_const_lv3_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond2_fu_556_p2))) begin
        i_1_reg_311 <= i_5_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond2_fu_556_p2))) begin
        i_2_reg_322 <= ap_const_lv5_0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_576_p2))) begin
        i_2_reg_322 <= i_6_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond1_fu_576_p2))) begin
        i_3_reg_333 <= ap_const_lv4_0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_fu_593_p2))) begin
        i_3_reg_333 <= i_7_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_536_p2 == 1'b0))) begin
        i_reg_300 <= i_4_fu_542_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_300 <= ap_const_lv3_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        accumc_ce0 = 1'b1;
    end else begin
        accumc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_fu_593_p2))) begin
        accumc_we0 = 1'b1;
    end else begin
        accumc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        accumd_ce0 = 1'b1;
    end else begin
        accumd_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_fu_593_p2))) begin
        accumd_we0 = 1'b1;
    end else begin
        accumd_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ah1_ap_vld = 1'b1;
    end else begin
        ah1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ah2_ap_vld = 1'b1;
    end else begin
        ah2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        al1_ap_vld = 1'b1;
    end else begin
        al1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        al2_ap_vld = 1'b1;
    end else begin
        al2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_593_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_593_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_ah1_ap_vld = 1'b1;
    end else begin
        dec_ah1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_ah2_ap_vld = 1'b1;
    end else begin
        dec_ah2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_al1_ap_vld = 1'b1;
    end else begin
        dec_al1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_al2_ap_vld = 1'b1;
    end else begin
        dec_al2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dec_del_bph_ce1 = 1'b1;
    end else begin
        dec_del_bph_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond2_fu_556_p2))) begin
        dec_del_bph_we1 = 1'b1;
    end else begin
        dec_del_bph_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dec_del_bpl_ce1 = 1'b1;
    end else begin
        dec_del_bpl_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond2_fu_556_p2))) begin
        dec_del_bpl_we1 = 1'b1;
    end else begin
        dec_del_bpl_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dec_del_dhx_ce1 = 1'b1;
    end else begin
        dec_del_dhx_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_536_p2 == 1'b0))) begin
        dec_del_dhx_we1 = 1'b1;
    end else begin
        dec_del_dhx_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dec_del_dltx_ce1 = 1'b1;
    end else begin
        dec_del_dltx_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_536_p2 == 1'b0))) begin
        dec_del_dltx_we1 = 1'b1;
    end else begin
        dec_del_dltx_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_deth_ap_vld = 1'b1;
    end else begin
        dec_deth_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_detl_ap_vld = 1'b1;
    end else begin
        dec_detl_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_nbh_ap_vld = 1'b1;
    end else begin
        dec_nbh_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_nbl_ap_vld = 1'b1;
    end else begin
        dec_nbl_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_ph1_ap_vld = 1'b1;
    end else begin
        dec_ph1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_ph2_ap_vld = 1'b1;
    end else begin
        dec_ph2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_plt1_ap_vld = 1'b1;
    end else begin
        dec_plt1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_plt2_ap_vld = 1'b1;
    end else begin
        dec_plt2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_rh1_ap_vld = 1'b1;
    end else begin
        dec_rh1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_rh2_ap_vld = 1'b1;
    end else begin
        dec_rh2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_rlt1_ap_vld = 1'b1;
    end else begin
        dec_rlt1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        dec_rlt2_ap_vld = 1'b1;
    end else begin
        dec_rlt2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_bph_ce1 = 1'b1;
    end else begin
        delay_bph_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond2_fu_556_p2))) begin
        delay_bph_we1 = 1'b1;
    end else begin
        delay_bph_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        delay_bpl_ce1 = 1'b1;
    end else begin
        delay_bpl_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond2_fu_556_p2))) begin
        delay_bpl_we1 = 1'b1;
    end else begin
        delay_bpl_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        delay_dhx_ce1 = 1'b1;
    end else begin
        delay_dhx_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_536_p2 == 1'b0))) begin
        delay_dhx_we1 = 1'b1;
    end else begin
        delay_dhx_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        delay_dltx_ce1 = 1'b1;
    end else begin
        delay_dltx_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_536_p2 == 1'b0))) begin
        delay_dltx_we1 = 1'b1;
    end else begin
        delay_dltx_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        deth_ap_vld = 1'b1;
    end else begin
        deth_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        detl_ap_vld = 1'b1;
    end else begin
        detl_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        nbh_ap_vld = 1'b1;
    end else begin
        nbh_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        nbl_ap_vld = 1'b1;
    end else begin
        nbl_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ph1_ap_vld = 1'b1;
    end else begin
        ph1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ph2_ap_vld = 1'b1;
    end else begin
        ph2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        plt1_ap_vld = 1'b1;
    end else begin
        plt1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        plt2_ap_vld = 1'b1;
    end else begin
        plt2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        rh1_ap_vld = 1'b1;
    end else begin
        rh1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        rh2_ap_vld = 1'b1;
    end else begin
        rh2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        rlt1_ap_vld = 1'b1;
    end else begin
        rlt1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        rlt2_ap_vld = 1'b1;
    end else begin
        rlt2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tqmf_ce1 = 1'b1;
    end else begin
        tqmf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_576_p2))) begin
        tqmf_we1 = 1'b1;
    end else begin
        tqmf_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond3_fu_536_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond2_fu_556_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == exitcond1_fu_576_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == exitcond_fu_593_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumc_address0 = tmp_31_fu_605_p1;

assign accumc_d0 = ap_const_lv32_0;

assign accumd_address0 = tmp_31_fu_605_p1;

assign accumd_d0 = ap_const_lv32_0;

assign ah1 = ap_const_lv32_0;

assign ah2 = ap_const_lv32_0;

assign al1 = ap_const_lv32_0;

assign al2 = ap_const_lv32_0;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign dec_ah1 = ap_const_lv32_0;

assign dec_ah2 = ap_const_lv32_0;

assign dec_al1 = ap_const_lv32_0;

assign dec_al2 = ap_const_lv32_0;

assign dec_del_bph_address1 = tmp_s_fu_568_p1;

assign dec_del_bph_d1 = ap_const_lv32_0;

assign dec_del_bpl_address1 = tmp_s_fu_568_p1;

assign dec_del_bpl_d1 = ap_const_lv32_0;

assign dec_del_dhx_address1 = tmp_fu_548_p1;

assign dec_del_dhx_d1 = ap_const_lv32_0;

assign dec_del_dltx_address1 = tmp_fu_548_p1;

assign dec_del_dltx_d1 = ap_const_lv32_0;

assign dec_deth = ap_const_lv32_8;

assign dec_detl = ap_const_lv32_20;

assign dec_nbh = ap_const_lv32_0;

assign dec_nbl = ap_const_lv32_0;

assign dec_ph1 = ap_const_lv32_0;

assign dec_ph2 = ap_const_lv32_0;

assign dec_plt1 = ap_const_lv32_0;

assign dec_plt2 = ap_const_lv32_0;

assign dec_rh1 = ap_const_lv32_0;

assign dec_rh2 = ap_const_lv32_0;

assign dec_rlt1 = ap_const_lv32_0;

assign dec_rlt2 = ap_const_lv32_0;

assign delay_bph_address1 = tmp_s_fu_568_p1;

assign delay_bph_d1 = ap_const_lv32_0;

assign delay_bpl_address1 = tmp_s_fu_568_p1;

assign delay_bpl_d1 = ap_const_lv32_0;

assign delay_dhx_address1 = tmp_fu_548_p1;

assign delay_dhx_d1 = ap_const_lv32_0;

assign delay_dltx_address1 = tmp_fu_548_p1;

assign delay_dltx_d1 = ap_const_lv32_0;

assign deth = ap_const_lv32_8;

assign detl = ap_const_lv32_20;

assign exitcond1_fu_576_p2 = ((i_2_reg_322 == ap_const_lv5_18) ? 1'b1 : 1'b0);

assign exitcond2_fu_556_p2 = ((i_1_reg_311 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond3_fu_536_p2 = ((i_reg_300 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond_fu_593_p2 = ((i_3_reg_333 == ap_const_lv4_B) ? 1'b1 : 1'b0);

assign i_4_fu_542_p2 = (i_reg_300 + ap_const_lv3_1);

assign i_5_fu_562_p2 = (i_1_reg_311 + ap_const_lv3_1);

assign i_6_fu_582_p2 = (i_2_reg_322 + ap_const_lv5_1);

assign i_7_fu_599_p2 = (i_3_reg_333 + ap_const_lv4_1);

assign nbh = ap_const_lv32_0;

assign nbl = ap_const_lv32_0;

assign ph1 = ap_const_lv32_0;

assign ph2 = ap_const_lv32_0;

assign plt1 = ap_const_lv32_0;

assign plt2 = ap_const_lv32_0;

assign rh1 = ap_const_lv32_0;

assign rh2 = ap_const_lv32_0;

assign rlt1 = ap_const_lv32_0;

assign rlt2 = ap_const_lv32_0;

assign tmp_30_fu_588_p1 = i_2_reg_322;

assign tmp_31_fu_605_p1 = i_3_reg_333;

assign tmp_fu_548_p1 = i_reg_300;

assign tmp_s_fu_568_p1 = i_1_reg_311;

assign tqmf_address1 = tmp_30_fu_588_p1;

assign tqmf_d1 = ap_const_lv32_0;

endmodule //reset
