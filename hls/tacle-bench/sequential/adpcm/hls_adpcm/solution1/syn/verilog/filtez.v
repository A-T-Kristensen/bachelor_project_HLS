// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module filtez (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bpl_address0,
        bpl_ce0,
        bpl_q0,
        dlt_address0,
        dlt_ce0,
        dlt_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 17'b1;
parameter    ap_ST_fsm_state2 = 17'b10;
parameter    ap_ST_fsm_state3 = 17'b100;
parameter    ap_ST_fsm_state4 = 17'b1000;
parameter    ap_ST_fsm_state5 = 17'b10000;
parameter    ap_ST_fsm_state6 = 17'b100000;
parameter    ap_ST_fsm_state7 = 17'b1000000;
parameter    ap_ST_fsm_state8 = 17'b10000000;
parameter    ap_ST_fsm_state9 = 17'b100000000;
parameter    ap_ST_fsm_state10 = 17'b1000000000;
parameter    ap_ST_fsm_state11 = 17'b10000000000;
parameter    ap_ST_fsm_state12 = 17'b100000000000;
parameter    ap_ST_fsm_state13 = 17'b1000000000000;
parameter    ap_ST_fsm_state14 = 17'b10000000000000;
parameter    ap_ST_fsm_state15 = 17'b100000000000000;
parameter    ap_ST_fsm_state16 = 17'b1000000000000000;
parameter    ap_ST_fsm_state17 = 17'b10000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_2D = 32'b101101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] bpl_address0;
output   bpl_ce0;
input  [31:0] bpl_q0;
output  [2:0] dlt_address0;
output   dlt_ce0;
input  [31:0] dlt_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] bpl_address0;
reg bpl_ce0;
reg[2:0] dlt_address0;
reg dlt_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg  signed [31:0] reg_85;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] ap_CS_fsm_state10;
reg  signed [31:0] reg_89;
wire   [0:0] ap_CS_fsm_state3;
wire   [63:0] grp_fu_101_p2;
wire   [0:0] ap_CS_fsm_state8;
wire   [2:0] p_01_rec_fu_107_p2;
reg   [2:0] p_01_rec_reg_179;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state11;
wire   [63:0] grp_fu_143_p2;
reg   [63:0] tmp_37_reg_207;
wire   [0:0] ap_CS_fsm_state16;
wire   [63:0] zl_1_fu_149_p2;
wire   [0:0] ap_CS_fsm_state17;
reg   [63:0] zl1_reg_64;
reg   [2:0] dlt_pn_rec_reg_74;
wire   [63:0] p_01_rec_cast_fu_113_p1;
wire   [0:0] exitcond_fu_119_p2;
reg   [31:0] ap_return_preg;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'b1;
#0 ap_return_preg = 32'b00000000000000000000000000000000;
end

adpcm_main_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
adpcm_main_mul_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_89),
    .din1(reg_85),
    .ce(1'b1),
    .dout(grp_fu_101_p2)
);

adpcm_main_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
adpcm_main_mul_32bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_89),
    .din1(reg_85),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & ~(exitcond_fu_119_p2 == 1'b0))) begin
            ap_return_preg <= {{zl1_reg_64[ap_const_lv32_2D : ap_const_lv32_E]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        dlt_pn_rec_reg_74 <= p_01_rec_reg_179;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dlt_pn_rec_reg_74 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        zl1_reg_64 <= zl_1_fu_149_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        zl1_reg_64 <= grp_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_01_rec_reg_179 <= p_01_rec_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_85 <= bpl_q0;
        reg_89 <= dlt_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_37_reg_207 <= grp_fu_143_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(exitcond_fu_119_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(exitcond_fu_119_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(exitcond_fu_119_p2 == 1'b0))) begin
        ap_return = {{zl1_reg_64[ap_const_lv32_2D : ap_const_lv32_E]}};
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bpl_address0 = p_01_rec_cast_fu_113_p1;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        bpl_address0 = ap_const_lv64_0;
    end else begin
        bpl_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state9))) begin
        bpl_ce0 = 1'b1;
    end else begin
        bpl_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dlt_address0 = p_01_rec_cast_fu_113_p1;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        dlt_address0 = ap_const_lv64_0;
    end else begin
        dlt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state9))) begin
        dlt_ce0 = 1'b1;
    end else begin
        dlt_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(exitcond_fu_119_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign exitcond_fu_119_p2 = ((dlt_pn_rec_reg_74 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign p_01_rec_cast_fu_113_p1 = p_01_rec_fu_107_p2;

assign p_01_rec_fu_107_p2 = (dlt_pn_rec_reg_74 + ap_const_lv3_1);

assign zl_1_fu_149_p2 = (tmp_37_reg_207 + zl1_reg_64);

endmodule //filtez
