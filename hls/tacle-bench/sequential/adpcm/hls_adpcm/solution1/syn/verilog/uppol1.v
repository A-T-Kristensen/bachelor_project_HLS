// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uppol1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        al1,
        apl2,
        plt,
        plt1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'b1;
parameter    ap_ST_fsm_state2 = 8'b10;
parameter    ap_ST_fsm_state3 = 8'b100;
parameter    ap_ST_fsm_state4 = 8'b1000;
parameter    ap_ST_fsm_state5 = 8'b10000;
parameter    ap_ST_fsm_state6 = 8'b100000;
parameter    ap_ST_fsm_state7 = 8'b1000000;
parameter    ap_ST_fsm_state8 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_FFFFFF40 = 32'b11111111111111111111111101000000;
parameter    ap_const_lv32_C0 = 32'b11000000;
parameter    ap_const_lv16_3C00 = 16'b11110000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv16_0 = 16'b0000000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] al1;
input  [14:0] apl2;
input  [31:0] plt;
input  [31:0] plt1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [31:0] apl1_fu_68_p2;
reg   [31:0] apl1_reg_75;
wire   [0:0] ap_CS_fsm_state7;
wire   [63:0] grp_fu_79_p2;
reg   [63:0] tmp_23_reg_209;
wire   [0:0] ap_CS_fsm_state6;
wire   [15:0] apl1_4_fu_153_p2;
reg   [15:0] apl1_4_reg_214;
wire   [31:0] tmp_24_fu_129_p4;
wire   [31:0] apl_v_cast_cast_fu_140_p3;
wire   [39:0] p_shl_fu_104_p3;
wire   [40:0] p_shl_cast3_fu_112_p1;
wire  signed [40:0] tmp_cast1_fu_100_p1;
wire   [40:0] tmp_s_fu_116_p2;
wire   [0:0] tmp_fu_122_p3;
wire  signed [15:0] apl2_cast_fu_149_p1;
wire   [0:0] ap_CS_fsm_state8;
wire  signed [31:0] apl1_4_cast_fu_159_p1;
wire   [0:0] tmp_25_fu_162_p2;
wire   [15:0] apl1_3_fu_176_p2;
wire   [31:0] wd3_0_apl1_fu_168_p3;
wire  signed [31:0] apl1_3_cast_fu_181_p1;
wire   [0:0] tmp_26_fu_185_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
end

adpcm_main_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
adpcm_main_mul_32bkb_x_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(plt),
    .din1(plt1),
    .ce(1'b1),
    .dout(grp_fu_79_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        apl1_4_reg_214 <= apl1_4_fu_153_p2;
        apl1_reg_75 <= apl1_fu_68_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_23_reg_209 <= grp_fu_79_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_return = ((tmp_26_fu_185_p2[0:0] === 1'b1) ? apl1_3_cast_fu_181_p1 : wd3_0_apl1_fu_168_p3);

assign apl1_3_cast_fu_181_p1 = $signed(apl1_3_fu_176_p2);

assign apl1_3_fu_176_p2 = (ap_const_lv16_0 - apl1_4_reg_214);

assign apl1_4_cast_fu_159_p1 = $signed(apl1_4_reg_214);

assign apl1_4_fu_153_p2 = ($signed(ap_const_lv16_3C00) - $signed(apl2_cast_fu_149_p1));

assign apl1_fu_68_p2 = (tmp_24_fu_129_p4 + apl_v_cast_cast_fu_140_p3);

assign apl2_cast_fu_149_p1 = $signed(apl2);

assign apl_v_cast_cast_fu_140_p3 = ((tmp_fu_122_p3[0:0] === 1'b1) ? ap_const_lv32_FFFFFF40 : ap_const_lv32_C0);

assign p_shl_cast3_fu_112_p1 = p_shl_fu_104_p3;

assign p_shl_fu_104_p3 = {{al1}, {ap_const_lv8_0}};

assign tmp_24_fu_129_p4 = {{tmp_s_fu_116_p2[ap_const_lv32_27 : ap_const_lv32_8]}};

assign tmp_25_fu_162_p2 = (($signed(apl1_reg_75) > $signed(apl1_4_cast_fu_159_p1)) ? 1'b1 : 1'b0);

assign tmp_26_fu_185_p2 = (($signed(wd3_0_apl1_fu_168_p3) < $signed(apl1_3_cast_fu_181_p1)) ? 1'b1 : 1'b0);

assign tmp_cast1_fu_100_p1 = $signed(al1);

assign tmp_fu_122_p3 = tmp_23_reg_209[ap_const_lv32_3F];

assign tmp_s_fu_116_p2 = ($signed(p_shl_cast3_fu_112_p1) - $signed(tmp_cast1_fu_100_p1));

assign wd3_0_apl1_fu_168_p3 = ((tmp_25_fu_162_p2[0:0] === 1'b1) ? apl1_4_cast_fu_159_p1 : apl1_reg_75);

endmodule //uppol1
