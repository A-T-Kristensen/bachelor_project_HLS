// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module logsch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ih,
        nbh,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'b1;
parameter    ap_ST_fsm_state2 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_31E = 32'b1100011110;
parameter    ap_const_lv32_FFFFFF2A = 32'b11111111111111111111111100101010;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv31_5800 = 31'b101100000000000;
parameter    ap_const_lv15_5800 = 15'b101100000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ih;
input  [31:0] nbh;
output  [14:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [30:0] nbh_assign_cast_fu_122_p2;
reg   [30:0] nbh_assign_cast_reg_160;
reg   [0:0] tmp_18_reg_165;
wire   [38:0] p_shl_fu_60_p3;
wire  signed [38:0] tmp_cast2_fu_56_p1;
wire   [38:0] tmp_s_fu_68_p2;
wire   [1:0] tmp_fu_88_p5;
wire   [31:0] tmp_fu_88_p6;
wire   [31:0] wd_fu_74_p4;
wire   [30:0] tmp_17_fu_112_p1;
wire   [30:0] tmp_4_fu_102_p4;
wire   [31:0] nbh_assign_fu_116_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [30:0] p_s_fu_136_p3;
wire   [0:0] tmp_38_fu_146_p2;
wire   [14:0] tmp_19_fu_142_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
end

adpcm_main_mux_42eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
adpcm_main_mux_42eOg_U30(
    .din1(ap_const_lv32_31E),
    .din2(ap_const_lv32_FFFFFF2A),
    .din3(ap_const_lv32_31E),
    .din4(ap_const_lv32_FFFFFF2A),
    .din5(tmp_fu_88_p5),
    .dout(tmp_fu_88_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        nbh_assign_cast_reg_160 <= nbh_assign_cast_fu_122_p2;
        tmp_18_reg_165 <= nbh_assign_fu_116_p2[ap_const_lv32_1F];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_return = ((tmp_38_fu_146_p2[0:0] === 1'b1) ? ap_const_lv15_5800 : tmp_19_fu_142_p1);

assign nbh_assign_cast_fu_122_p2 = (tmp_17_fu_112_p1 + tmp_4_fu_102_p4);

assign nbh_assign_fu_116_p2 = (wd_fu_74_p4 + tmp_fu_88_p6);

assign p_s_fu_136_p3 = ((tmp_18_reg_165[0:0] === 1'b1) ? ap_const_lv31_0 : nbh_assign_cast_reg_160);

assign p_shl_fu_60_p3 = {{nbh}, {ap_const_lv7_0}};

assign tmp_17_fu_112_p1 = tmp_fu_88_p6[30:0];

assign tmp_19_fu_142_p1 = p_s_fu_136_p3[14:0];

assign tmp_38_fu_146_p2 = ((p_s_fu_136_p3 > ap_const_lv31_5800) ? 1'b1 : 1'b0);

assign tmp_4_fu_102_p4 = {{tmp_s_fu_68_p2[ap_const_lv32_25 : ap_const_lv32_7]}};

assign tmp_cast2_fu_56_p1 = $signed(nbh);

assign tmp_fu_88_p5 = ih[1:0];

assign tmp_s_fu_68_p2 = ($signed(p_shl_fu_60_p3) - $signed(tmp_cast2_fu_56_p1));

assign wd_fu_74_p4 = {{tmp_s_fu_68_p2[ap_const_lv32_26 : ap_const_lv32_7]}};

endmodule //logsch
