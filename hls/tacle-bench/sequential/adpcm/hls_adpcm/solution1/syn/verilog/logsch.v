// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module logsch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ih,
        nbh,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv31_5800 = 31'b101100000000000;
parameter    ap_const_lv15_5800 = 15'b101100000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ih;
input  [31:0] nbh;
output  [14:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [1:0] wh_code_table_address0;
reg    wh_code_table_ce0;
wire   [10:0] wh_code_table_q0;
wire   [30:0] nbh_assign_cast_fu_115_p2;
reg   [30:0] nbh_assign_cast_reg_158;
wire   [0:0] ap_CS_fsm_state2;
reg   [0:0] tmp_24_reg_163;
wire  signed [63:0] tmp_32_fu_58_p1;
wire   [38:0] p_shl_fu_67_p3;
wire  signed [38:0] tmp_cast2_fu_63_p1;
wire   [38:0] tmp_s_fu_75_p2;
wire   [31:0] wd_fu_81_p4;
wire  signed [31:0] wh_code_table_load_c_fu_91_p1;
wire   [30:0] tmp_8_fu_99_p4;
wire  signed [30:0] tmp_fu_95_p1;
wire   [31:0] nbh_assign_fu_109_p2;
wire   [0:0] ap_CS_fsm_state3;
wire   [30:0] p_s_fu_129_p3;
wire   [0:0] tmp_33_fu_139_p2;
wire   [14:0] tmp_25_fu_135_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
end

logsch_wh_code_taeOg #(
    .DataWidth( 11 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
wh_code_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wh_code_table_address0),
    .ce0(wh_code_table_ce0),
    .q0(wh_code_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        nbh_assign_cast_reg_158 <= nbh_assign_cast_fu_115_p2;
        tmp_24_reg_163 <= nbh_assign_fu_109_p2[ap_const_lv32_1F];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        wh_code_table_ce0 = 1'b1;
    end else begin
        wh_code_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_return = ((tmp_33_fu_139_p2[0:0] === 1'b1) ? ap_const_lv15_5800 : tmp_25_fu_135_p1);

assign nbh_assign_cast_fu_115_p2 = ($signed(tmp_8_fu_99_p4) + $signed(tmp_fu_95_p1));

assign nbh_assign_fu_109_p2 = ($signed(wd_fu_81_p4) + $signed(wh_code_table_load_c_fu_91_p1));

assign p_s_fu_129_p3 = ((tmp_24_reg_163[0:0] === 1'b1) ? ap_const_lv31_0 : nbh_assign_cast_reg_158);

assign p_shl_fu_67_p3 = {{nbh}, {ap_const_lv7_0}};

assign tmp_25_fu_135_p1 = p_s_fu_129_p3[14:0];

assign tmp_32_fu_58_p1 = $signed(ih);

assign tmp_33_fu_139_p2 = ((p_s_fu_129_p3 > ap_const_lv31_5800) ? 1'b1 : 1'b0);

assign tmp_8_fu_99_p4 = {{tmp_s_fu_75_p2[ap_const_lv32_25 : ap_const_lv32_7]}};

assign tmp_cast2_fu_63_p1 = $signed(nbh);

assign tmp_fu_95_p1 = $signed(wh_code_table_q0);

assign tmp_s_fu_75_p2 = ($signed(p_shl_fu_67_p3) - $signed(tmp_cast2_fu_63_p1));

assign wd_fu_81_p4 = {{tmp_s_fu_75_p2[ap_const_lv32_26 : ap_const_lv32_7]}};

assign wh_code_table_address0 = tmp_32_fu_58_p1;

assign wh_code_table_load_c_fu_91_p1 = $signed(wh_code_table_q0);

endmodule //logsch
