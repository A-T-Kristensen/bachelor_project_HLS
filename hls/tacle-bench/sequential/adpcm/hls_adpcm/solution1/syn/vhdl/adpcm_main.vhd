-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main is
port (
    test_data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    test_data_ce0 : OUT STD_LOGIC;
    test_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    test_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    test_data_we0 : OUT STD_LOGIC;
    compressed_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    compressed_ce0 : OUT STD_LOGIC;
    compressed_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    compressed_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    compressed_we0 : OUT STD_LOGIC;
    dec_result_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dec_result_ce0 : OUT STD_LOGIC;
    dec_result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_result_we0 : OUT STD_LOGIC;
    select_r : IN STD_LOGIC_VECTOR (31 downto 0);
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of adpcm_main is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "adpcm_main,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.741000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=11,HLS_SYN_DSP=70,HLS_SYN_FF=5548,HLS_SYN_LUT=5044}";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_dec_result_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Block_proc_U0_dec_result_ce0 : STD_LOGIC;
    signal Block_proc_U0_dec_result_we0 : STD_LOGIC;
    signal Block_proc_U0_dec_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc_U0_test_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Block_proc_U0_test_data_ce0 : STD_LOGIC;
    signal Block_proc_U0_compressed_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Block_proc_U0_compressed_ce0 : STD_LOGIC;
    signal Block_proc_U0_compressed_we0 : STD_LOGIC;
    signal Block_proc_U0_compressed_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_hs_continue : STD_LOGIC;
    signal ap_hs_done : STD_LOGIC;
    signal ap_hs_ready : STD_LOGIC;

    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        select_r : IN STD_LOGIC_VECTOR (31 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_result_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        dec_result_ce0 : OUT STD_LOGIC;
        dec_result_we0 : OUT STD_LOGIC;
        dec_result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        test_data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        test_data_ce0 : OUT STD_LOGIC;
        test_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        compressed_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        compressed_ce0 : OUT STD_LOGIC;
        compressed_we0 : OUT STD_LOGIC;
        compressed_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        compressed_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        select_r => select_r,
        size => size,
        dec_result_address0 => Block_proc_U0_dec_result_address0,
        dec_result_ce0 => Block_proc_U0_dec_result_ce0,
        dec_result_we0 => Block_proc_U0_dec_result_we0,
        dec_result_d0 => Block_proc_U0_dec_result_d0,
        test_data_address0 => Block_proc_U0_test_data_address0,
        test_data_ce0 => Block_proc_U0_test_data_ce0,
        test_data_q0 => test_data_q0,
        compressed_address0 => Block_proc_U0_compressed_address0,
        compressed_ce0 => Block_proc_U0_compressed_ce0,
        compressed_we0 => Block_proc_U0_compressed_we0,
        compressed_d0 => Block_proc_U0_compressed_d0,
        compressed_q0 => compressed_q0);




    Block_proc_U0_ap_continue <= ap_const_logic_1;
    Block_proc_U0_ap_start <= ap_start;
    ap_done <= Block_proc_U0_ap_done;
    ap_hs_continue <= ap_const_logic_1;
    ap_hs_done <= Block_proc_U0_ap_done;
    ap_hs_ready <= Block_proc_U0_ap_ready;
    ap_idle <= Block_proc_U0_ap_idle;
    ap_ready <= Block_proc_U0_ap_ready;
    compressed_address0 <= Block_proc_U0_compressed_address0;
    compressed_ce0 <= Block_proc_U0_compressed_ce0;
    compressed_d0 <= Block_proc_U0_compressed_d0;
    compressed_we0 <= Block_proc_U0_compressed_we0;
    dec_result_address0 <= Block_proc_U0_dec_result_address0;
    dec_result_ce0 <= Block_proc_U0_dec_result_ce0;
    dec_result_d0 <= Block_proc_U0_dec_result_d0;
    dec_result_we0 <= Block_proc_U0_dec_result_we0;
    test_data_address0 <= Block_proc_U0_test_data_address0;
    test_data_ce0 <= Block_proc_U0_test_data_ce0;
    test_data_d0 <= ap_const_lv32_0;
    test_data_we0 <= ap_const_logic_0;
end behav;
