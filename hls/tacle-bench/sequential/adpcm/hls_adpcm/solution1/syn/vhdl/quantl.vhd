-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quantl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    el : IN STD_LOGIC_VECTOR (31 downto 0);
    detl : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of quantl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal decis_levl_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal decis_levl_ce0 : STD_LOGIC;
    signal decis_levl_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal quant26bt_pos_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal quant26bt_pos_ce0 : STD_LOGIC;
    signal quant26bt_pos_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal quant26bt_neg_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal quant26bt_neg_ce0 : STD_LOGIC;
    signal quant26bt_neg_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal do_init_reg_116 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_rewind_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_rewind_reg_148 : STD_LOGIC_VECTOR (0 downto 0);
    signal detl2_rewind_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal mil_reg_178 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_assign_phi_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_phi_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal detl2_phi_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal mil_1_fu_229_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mil_1_reg_240 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal do_init_phi_fu_121_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_fu_270_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal tmp_33_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_preg : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal n_assign_rewind_phi_fu_137_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_rewind_phi_fu_152_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal detl2_rewind_phi_fu_167_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal mil_phi_fu_182_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_precharge_reg_pp0_iter0_n_assign_phi_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp0_iter0_p_phi_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_precharge_reg_pp0_iter0_detl2_phi_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_2_fu_299_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ril_2_fu_321_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_pipeline_idle_pp0 : STD_LOGIC;
    signal grp_fu_245_p10 : STD_LOGIC_VECTOR (46 downto 0);

    component adpcm_main_mul_32hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component quantl_decis_levl IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component quantl_quant26bt_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component quantl_quant26bt_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    decis_levl_U : component quantl_decis_levl
    generic map (
        DataWidth => 15,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => decis_levl_address0,
        ce0 => decis_levl_ce0,
        q0 => decis_levl_q0);

    quant26bt_pos_U : component quantl_quant26bt_fYi
    generic map (
        DataWidth => 6,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quant26bt_pos_address0,
        ce0 => quant26bt_pos_ce0,
        q0 => quant26bt_pos_q0);

    quant26bt_neg_U : component quantl_quant26bt_g8j
    generic map (
        DataWidth => 6,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quant26bt_neg_address0,
        ce0 => quant26bt_neg_ce0,
        q0 => quant26bt_neg_q0);

    adpcm_main_mul_32hbi_U33 : component adpcm_main_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 15,
        dout_WIDTH => 47)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_precharge_reg_pp0_iter0_detl2_phi_reg_217,
        din1 => grp_fu_245_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_preg <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv6_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and ((tmp_s_reg_348 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_33_reg_367)))) then 
                    ap_return_preg <= ril_2_fu_321_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_precharge_reg_pp0_iter0_detl2_phi_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_lv1_0 = do_init_phi_fu_121_p6)) then 
                    ap_phi_precharge_reg_pp0_iter0_detl2_phi_reg_217 <= detl2_rewind_phi_fu_167_p6;
                elsif (not((ap_const_lv1_0 = do_init_phi_fu_121_p6))) then 
                    ap_phi_precharge_reg_pp0_iter0_detl2_phi_reg_217 <= detl;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp0_iter0_n_assign_phi_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_lv1_0 = do_init_phi_fu_121_p6)) then 
                    ap_phi_precharge_reg_pp0_iter0_n_assign_phi_reg_193 <= n_assign_rewind_phi_fu_137_p6;
                elsif (not((ap_const_lv1_0 = do_init_phi_fu_121_p6))) then 
                    ap_phi_precharge_reg_pp0_iter0_n_assign_phi_reg_193 <= n_assign_fu_270_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp0_iter0_p_phi_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_lv1_0 = do_init_phi_fu_121_p6)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_phi_reg_205 <= p_rewind_phi_fu_152_p6;
                elsif (not((ap_const_lv1_0 = do_init_phi_fu_121_p6))) then 
                    ap_phi_precharge_reg_pp0_iter0_p_phi_reg_205 <= el(31 downto 31);
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((tmp_s_reg_348 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_lv1_0 = tmp_33_reg_367)))) then 
                do_init_reg_116 <= ap_const_lv1_0;
            elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and ((tmp_s_reg_348 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_33_reg_367))))) then 
                do_init_reg_116 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    mil_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((tmp_s_reg_348 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_lv1_0 = tmp_33_reg_367)))) then 
                mil_reg_178 <= mil_1_reg_240;
            elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and ((tmp_s_reg_348 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_33_reg_367))))) then 
                mil_reg_178 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then
                detl2_phi_reg_217 <= ap_phi_precharge_reg_pp0_iter0_detl2_phi_reg_217;
                n_assign_phi_reg_193 <= ap_phi_precharge_reg_pp0_iter0_n_assign_phi_reg_193;
                p_phi_reg_205 <= ap_phi_precharge_reg_pp0_iter0_p_phi_reg_205;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((tmp_s_reg_348 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_lv1_0 = tmp_33_reg_367)))) then
                detl2_rewind_reg_163 <= detl2_phi_reg_217;
                n_assign_rewind_reg_133 <= n_assign_phi_reg_193;
                p_rewind_reg_148 <= p_phi_reg_205;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                mil_1_reg_240 <= mil_1_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and not((tmp_s_reg_348 = ap_const_lv1_0)))) then
                tmp_33_reg_367 <= tmp_33_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_s_reg_348 <= tmp_s_fu_278_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_pipeline_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not((ap_const_logic_1 = ap_pipeline_idle_pp0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
            when ap_ST_fsm_pp0_stage4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_s_reg_348, ap_CS_fsm_pp0_stage0, tmp_33_reg_367, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and ((tmp_s_reg_348 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_33_reg_367))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_preg)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_preg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_pipeline_idle_pp0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0))) then 
            ap_pipeline_idle_pp0 <= ap_const_logic_1;
        else 
            ap_pipeline_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_s_reg_348, tmp_33_fu_309_p2, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0)
    begin
        if ((((tmp_s_reg_348 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_33_fu_309_p2)) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(tmp_s_reg_348, ap_CS_fsm_pp0_stage0, tmp_33_reg_367, ap_enable_reg_pp0_iter1, ril_2_fu_321_p3, ap_return_preg)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and ((tmp_s_reg_348 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_33_reg_367)))) then 
            ap_return <= ril_2_fu_321_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    decis_levl_address0 <= tmp_31_fu_284_p1(5 - 1 downto 0);

    decis_levl_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            decis_levl_ce0 <= ap_const_logic_1;
        else 
            decis_levl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    detl2_rewind_phi_fu_167_p6_assign_proc : process(tmp_s_reg_348, detl2_rewind_reg_163, detl2_phi_reg_217, ap_CS_fsm_pp0_stage0, tmp_33_reg_367, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((tmp_s_reg_348 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_lv1_0 = tmp_33_reg_367)))) then 
            detl2_rewind_phi_fu_167_p6 <= detl2_phi_reg_217;
        else 
            detl2_rewind_phi_fu_167_p6 <= detl2_rewind_reg_163;
        end if; 
    end process;


    do_init_phi_fu_121_p6_assign_proc : process(tmp_s_reg_348, do_init_reg_116, ap_CS_fsm_pp0_stage0, tmp_33_reg_367, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
            if (((tmp_s_reg_348 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_33_reg_367))) then 
                do_init_phi_fu_121_p6 <= ap_const_lv1_1;
            elsif ((not((tmp_s_reg_348 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_33_reg_367)))) then 
                do_init_phi_fu_121_p6 <= ap_const_lv1_0;
            else 
                do_init_phi_fu_121_p6 <= do_init_reg_116;
            end if;
        else 
            do_init_phi_fu_121_p6 <= do_init_reg_116;
        end if; 
    end process;

    grp_fu_245_p1 <= grp_fu_245_p10(15 - 1 downto 0);
    grp_fu_245_p10 <= std_logic_vector(resize(unsigned(decis_levl_q0),47));
    m_fu_264_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(el));
    mil_1_fu_229_p2 <= std_logic_vector(unsigned(mil_reg_178) + unsigned(ap_const_lv5_1));

    mil_phi_fu_182_p6_assign_proc : process(tmp_s_reg_348, mil_reg_178, mil_1_reg_240, ap_CS_fsm_pp0_stage0, tmp_33_reg_367, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
            if (((tmp_s_reg_348 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_33_reg_367))) then 
                mil_phi_fu_182_p6 <= ap_const_lv5_0;
            elsif ((not((tmp_s_reg_348 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_33_reg_367)))) then 
                mil_phi_fu_182_p6 <= mil_1_reg_240;
            else 
                mil_phi_fu_182_p6 <= mil_reg_178;
            end if;
        else 
            mil_phi_fu_182_p6 <= mil_reg_178;
        end if; 
    end process;

    n_assign_fu_270_p3 <= 
        m_fu_264_p2 when (tmp_fu_256_p3(0) = '1') else 
        el;

    n_assign_rewind_phi_fu_137_p6_assign_proc : process(tmp_s_reg_348, n_assign_rewind_reg_133, n_assign_phi_reg_193, ap_CS_fsm_pp0_stage0, tmp_33_reg_367, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((tmp_s_reg_348 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_lv1_0 = tmp_33_reg_367)))) then 
            n_assign_rewind_phi_fu_137_p6 <= n_assign_phi_reg_193;
        else 
            n_assign_rewind_phi_fu_137_p6 <= n_assign_rewind_reg_133;
        end if; 
    end process;


    p_rewind_phi_fu_152_p6_assign_proc : process(tmp_s_reg_348, p_rewind_reg_148, p_phi_reg_205, ap_CS_fsm_pp0_stage0, tmp_33_reg_367, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((tmp_s_reg_348 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_lv1_0 = tmp_33_reg_367)))) then 
            p_rewind_phi_fu_152_p6 <= p_phi_reg_205;
        else 
            p_rewind_phi_fu_152_p6 <= p_rewind_reg_148;
        end if; 
    end process;

    quant26bt_neg_address0 <= tmp_34_fu_315_p1(5 - 1 downto 0);

    quant26bt_neg_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            quant26bt_neg_ce0 <= ap_const_logic_1;
        else 
            quant26bt_neg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    quant26bt_pos_address0 <= tmp_34_fu_315_p1(5 - 1 downto 0);

    quant26bt_pos_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            quant26bt_pos_ce0 <= ap_const_logic_1;
        else 
            quant26bt_pos_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ril_2_fu_321_p3 <= 
        quant26bt_neg_q0 when (p_phi_reg_205(0) = '1') else 
        quant26bt_pos_q0;
    tmp_2_fu_299_p4 <= grp_fu_245_p2(46 downto 15);
    tmp_31_fu_284_p1 <= std_logic_vector(resize(unsigned(mil_phi_fu_182_p6),64));
    tmp_33_fu_309_p2 <= "1" when (signed(n_assign_phi_reg_193) > signed(tmp_2_fu_299_p4)) else "0";
    tmp_34_fu_315_p1 <= std_logic_vector(resize(unsigned(mil_reg_178),64));
    tmp_fu_256_p3 <= el(31 downto 31);
    tmp_s_fu_278_p2 <= "1" when (unsigned(mil_phi_fu_182_p6) < unsigned(ap_const_lv5_1E)) else "0";
end behav;
