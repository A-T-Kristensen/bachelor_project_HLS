-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity upzero is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dlt : IN STD_LOGIC_VECTOR (31 downto 0);
    dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlti_ce0 : OUT STD_LOGIC;
    dlti_we0 : OUT STD_LOGIC;
    dlti_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dlti_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlti_ce1 : OUT STD_LOGIC;
    dlti_we1 : OUT STD_LOGIC;
    dlti_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dlti_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bli_ce0 : OUT STD_LOGIC;
    bli_we0 : OUT STD_LOGIC;
    bli_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of upzero is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_318 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_fu_188_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_326 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bli_addr_1_reg_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_fu_206_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_344 : STD_LOGIC_VECTOR (2 downto 0);
    signal bli_addr_reg_349 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_371 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal bli_load_1_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal dlti_load_2_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal dlti_addr_4_reg_387 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_5_reg_392 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_load_4_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_143 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_reg_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_8_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_5_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl1_fu_244_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_10_cast_fu_241_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_3_fu_251_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal wd2_cast_cast_cast_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd3_fu_257_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_278_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_3_cast_fu_274_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_4_fu_286_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component adpcm_main_mul_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    adpcm_main_mul_32bkb_x_U17 : component adpcm_main_mul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_221_p0,
        din1 => reg_165,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (tmp_fu_172_p2 = ap_const_lv1_0))) then 
                i_1_reg_143 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                i_1_reg_143 <= i_3_reg_326;
            end if; 
        end if;
    end process;

    i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_172_p2 = ap_const_lv1_0)))) then 
                i_reg_154 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                i_reg_154 <= i_2_reg_344;
            end if; 
        end if;
    end process;

    reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                reg_165 <= dlti_q1;
            elsif ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then 
                reg_165 <= dlti_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_reg_314 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_182_p2))) then
                bli_addr_1_reg_336 <= tmp_8_fu_194_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_reg_314 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_200_p2))) then
                bli_addr_reg_349 <= tmp_2_fu_212_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                bli_load_1_reg_376 <= bli_q0;
                tmp_s_reg_371 <= grp_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                dlti_load_2_reg_382 <= dlti_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                dlti_load_4_reg_397 <= dlti_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_reg_314 = ap_const_lv1_0)))) then
                i_2_reg_344 <= i_2_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_reg_314 = ap_const_lv1_0))) then
                i_3_reg_326 <= i_3_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (tmp_fu_172_p2 = ap_const_lv1_0))) then
                tmp_1_reg_318 <= tmp_1_fu_178_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_314 <= tmp_fu_172_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_reg_314, exitcond_fu_182_p2, exitcond1_fu_200_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((tmp_reg_314 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond1_fu_200_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif ((((tmp_reg_314 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_182_p2))) or (not((tmp_reg_314 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_200_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bli_address0_assign_proc : process(ap_CS_fsm_state2, bli_addr_1_reg_336, bli_addr_reg_349, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_2_fu_212_p1, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            bli_address0 <= bli_addr_reg_349;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)))) then 
            bli_address0 <= bli_addr_1_reg_336;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            bli_address0 <= tmp_2_fu_212_p1(3 - 1 downto 0);
        else 
            bli_address0 <= "XXX";
        end if; 
    end process;


    bli_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)))) then 
            bli_ce0 <= ap_const_logic_1;
        else 
            bli_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bli_d0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_5_fu_267_p2, tmp_4_fu_286_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            bli_d0 <= tmp_4_fu_286_p2(39 downto 8);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            bli_d0 <= tmp_5_fu_267_p2;
        else 
            bli_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bli_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            bli_we0 <= ap_const_logic_1;
        else 
            bli_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dlti_addr_4_reg_387 <= ap_const_lv64_2(3 - 1 downto 0);
    dlti_addr_5_reg_392 <= ap_const_lv64_1(3 - 1 downto 0);

    dlti_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, tmp_reg_314, ap_CS_fsm_state2, exitcond_fu_182_p2, exitcond1_fu_200_p2, dlti_addr_5_reg_392, tmp_8_fu_194_p1, ap_CS_fsm_state15)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            dlti_address0 <= dlti_addr_5_reg_392;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            dlti_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            dlti_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            dlti_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (((tmp_reg_314 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_182_p2))) or (not((tmp_reg_314 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_200_p2)))))) then 
            dlti_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_reg_314 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_182_p2))) then 
            dlti_address0 <= tmp_8_fu_194_p1(3 - 1 downto 0);
        else 
            dlti_address0 <= "XXX";
        end if; 
    end process;


    dlti_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state2, dlti_addr_4_reg_387, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            dlti_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            dlti_address1 <= dlti_addr_4_reg_387;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            dlti_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            dlti_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            dlti_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            dlti_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        else 
            dlti_address1 <= "XXX";
        end if; 
    end process;


    dlti_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, tmp_reg_314, ap_CS_fsm_state2, exitcond_fu_182_p2, exitcond1_fu_200_p2, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_reg_314 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_182_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (((tmp_reg_314 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond_fu_182_p2))) or (not((tmp_reg_314 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond1_fu_200_p2))))) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            dlti_ce0 <= ap_const_logic_1;
        else 
            dlti_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dlti_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            dlti_ce1 <= ap_const_logic_1;
        else 
            dlti_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dlti_d0 <= reg_165;

    dlti_d1_assign_proc : process(dlt, reg_165, ap_CS_fsm_state13, ap_CS_fsm_state14, dlti_load_2_reg_382, dlti_load_4_reg_397, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            dlti_d1 <= dlt;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            dlti_d1 <= dlti_load_4_reg_397;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            dlti_d1 <= dlti_load_2_reg_382;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            dlti_d1 <= reg_165;
        else 
            dlti_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dlti_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)))) then 
            dlti_we0 <= ap_const_logic_1;
        else 
            dlti_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dlti_we1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            dlti_we1 <= ap_const_logic_1;
        else 
            dlti_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_200_p2 <= "1" when (i_reg_154 = ap_const_lv3_6) else "0";
    exitcond_fu_182_p2 <= "1" when (i_1_reg_143 = ap_const_lv3_6) else "0";
    grp_fu_221_p0 <= tmp_1_reg_318(32 - 1 downto 0);
    i_2_fu_206_p2 <= std_logic_vector(unsigned(i_reg_154) + unsigned(ap_const_lv3_1));
    i_3_fu_188_p2 <= std_logic_vector(unsigned(i_1_reg_143) + unsigned(ap_const_lv3_1));
    p_shl1_fu_244_p3 <= (bli_load_1_reg_376 & ap_const_lv8_0);
    p_shl_fu_278_p3 <= (bli_q0 & ap_const_lv8_0);
        tmp_10_cast_fu_241_p1 <= std_logic_vector(resize(signed(bli_load_1_reg_376),40));

        tmp_1_fu_178_p1 <= std_logic_vector(resize(signed(dlt),64));

    tmp_2_fu_212_p1 <= std_logic_vector(resize(unsigned(i_reg_154),64));
        tmp_3_cast_fu_274_p1 <= std_logic_vector(resize(signed(bli_q0),40));

    tmp_3_fu_251_p2 <= std_logic_vector(unsigned(p_shl1_fu_244_p3) - unsigned(tmp_10_cast_fu_241_p1));
    tmp_4_fu_286_p2 <= std_logic_vector(unsigned(p_shl_fu_278_p3) - unsigned(tmp_3_cast_fu_274_p1));
    tmp_5_fu_267_p2 <= std_logic_vector(unsigned(wd2_cast_cast_cast_fu_233_p3) + unsigned(wd3_fu_257_p4));
    tmp_7_fu_226_p3 <= tmp_s_reg_371(63 downto 63);
    tmp_8_fu_194_p1 <= std_logic_vector(resize(unsigned(i_1_reg_143),64));
    tmp_fu_172_p2 <= "1" when (dlt = ap_const_lv32_0) else "0";
    wd2_cast_cast_cast_fu_233_p3 <= 
        ap_const_lv32_FFFFFF80 when (tmp_7_fu_226_p3(0) = '1') else 
        ap_const_lv32_80;
    wd3_fu_257_p4 <= tmp_3_fu_251_p2(39 downto 8);
end behav;
