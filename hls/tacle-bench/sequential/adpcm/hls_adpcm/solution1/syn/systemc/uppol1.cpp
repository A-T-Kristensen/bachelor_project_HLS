// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "uppol1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic uppol1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic uppol1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> uppol1::ap_ST_fsm_state1 = "1";
const sc_lv<8> uppol1::ap_ST_fsm_state2 = "10";
const sc_lv<8> uppol1::ap_ST_fsm_state3 = "100";
const sc_lv<8> uppol1::ap_ST_fsm_state4 = "1000";
const sc_lv<8> uppol1::ap_ST_fsm_state5 = "10000";
const sc_lv<8> uppol1::ap_ST_fsm_state6 = "100000";
const sc_lv<8> uppol1::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> uppol1::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> uppol1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> uppol1::ap_const_lv1_1 = "1";
const sc_lv<32> uppol1::ap_const_lv32_6 = "110";
const sc_lv<32> uppol1::ap_const_lv32_5 = "101";
const sc_lv<8> uppol1::ap_const_lv8_0 = "00000000";
const sc_lv<32> uppol1::ap_const_lv32_3F = "111111";
const sc_lv<32> uppol1::ap_const_lv32_8 = "1000";
const sc_lv<32> uppol1::ap_const_lv32_27 = "100111";
const sc_lv<32> uppol1::ap_const_lv32_FFFFFF40 = "11111111111111111111111101000000";
const sc_lv<32> uppol1::ap_const_lv32_C0 = "11000000";
const sc_lv<16> uppol1::ap_const_lv16_3C00 = "11110000000000";
const sc_lv<32> uppol1::ap_const_lv32_7 = "111";
const sc_lv<16> uppol1::ap_const_lv16_0 = "0000000000000000";

uppol1::uppol1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    adpcm_main_mul_32bkb_x_U68 = new adpcm_main_mul_32bkb<1,6,32,32,64>("adpcm_main_mul_32bkb_x_U68");
    adpcm_main_mul_32bkb_x_U68->clk(ap_clk);
    adpcm_main_mul_32bkb_x_U68->reset(ap_rst);
    adpcm_main_mul_32bkb_x_U68->din0(plt);
    adpcm_main_mul_32bkb_x_U68->din1(plt1);
    adpcm_main_mul_32bkb_x_U68->ce(ap_var_for_const0);
    adpcm_main_mul_32bkb_x_U68->dout(grp_fu_79_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( wd3_0_apl1_fu_168_p3 );
    sensitive << ( apl1_3_cast_fu_181_p1 );
    sensitive << ( tmp_26_fu_185_p2 );

    SC_METHOD(thread_apl1_3_cast_fu_181_p1);
    sensitive << ( apl1_3_fu_176_p2 );

    SC_METHOD(thread_apl1_3_fu_176_p2);
    sensitive << ( apl1_4_reg_214 );

    SC_METHOD(thread_apl1_4_cast_fu_159_p1);
    sensitive << ( apl1_4_reg_214 );

    SC_METHOD(thread_apl1_4_fu_153_p2);
    sensitive << ( apl2_cast_fu_149_p1 );

    SC_METHOD(thread_apl1_fu_68_p2);
    sensitive << ( tmp_24_fu_129_p4 );
    sensitive << ( apl_v_cast_cast_fu_140_p3 );

    SC_METHOD(thread_apl2_cast_fu_149_p1);
    sensitive << ( apl2 );

    SC_METHOD(thread_apl_v_cast_cast_fu_140_p3);
    sensitive << ( tmp_fu_122_p3 );

    SC_METHOD(thread_p_shl_cast3_fu_112_p1);
    sensitive << ( p_shl_fu_104_p3 );

    SC_METHOD(thread_p_shl_fu_104_p3);
    sensitive << ( al1 );

    SC_METHOD(thread_tmp_24_fu_129_p4);
    sensitive << ( tmp_s_fu_116_p2 );

    SC_METHOD(thread_tmp_25_fu_162_p2);
    sensitive << ( apl1_reg_75 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( apl1_4_cast_fu_159_p1 );

    SC_METHOD(thread_tmp_26_fu_185_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( wd3_0_apl1_fu_168_p3 );
    sensitive << ( apl1_3_cast_fu_181_p1 );

    SC_METHOD(thread_tmp_cast1_fu_100_p1);
    sensitive << ( al1 );

    SC_METHOD(thread_tmp_fu_122_p3);
    sensitive << ( tmp_23_reg_209 );

    SC_METHOD(thread_tmp_s_fu_116_p2);
    sensitive << ( p_shl_cast3_fu_112_p1 );
    sensitive << ( tmp_cast1_fu_100_p1 );

    SC_METHOD(thread_wd3_0_apl1_fu_168_p3);
    sensitive << ( apl1_reg_75 );
    sensitive << ( apl1_4_cast_fu_159_p1 );
    sensitive << ( tmp_25_fu_162_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "uppol1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, al1, "(port)al1");
    sc_trace(mVcdFile, apl2, "(port)apl2");
    sc_trace(mVcdFile, plt, "(port)plt");
    sc_trace(mVcdFile, plt1, "(port)plt1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, apl1_fu_68_p2, "apl1_fu_68_p2");
    sc_trace(mVcdFile, apl1_reg_75, "apl1_reg_75");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_79_p2, "grp_fu_79_p2");
    sc_trace(mVcdFile, tmp_23_reg_209, "tmp_23_reg_209");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, apl1_4_fu_153_p2, "apl1_4_fu_153_p2");
    sc_trace(mVcdFile, apl1_4_reg_214, "apl1_4_reg_214");
    sc_trace(mVcdFile, tmp_24_fu_129_p4, "tmp_24_fu_129_p4");
    sc_trace(mVcdFile, apl_v_cast_cast_fu_140_p3, "apl_v_cast_cast_fu_140_p3");
    sc_trace(mVcdFile, p_shl_fu_104_p3, "p_shl_fu_104_p3");
    sc_trace(mVcdFile, p_shl_cast3_fu_112_p1, "p_shl_cast3_fu_112_p1");
    sc_trace(mVcdFile, tmp_cast1_fu_100_p1, "tmp_cast1_fu_100_p1");
    sc_trace(mVcdFile, tmp_s_fu_116_p2, "tmp_s_fu_116_p2");
    sc_trace(mVcdFile, tmp_fu_122_p3, "tmp_fu_122_p3");
    sc_trace(mVcdFile, apl2_cast_fu_149_p1, "apl2_cast_fu_149_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, apl1_4_cast_fu_159_p1, "apl1_4_cast_fu_159_p1");
    sc_trace(mVcdFile, tmp_25_fu_162_p2, "tmp_25_fu_162_p2");
    sc_trace(mVcdFile, apl1_3_fu_176_p2, "apl1_3_fu_176_p2");
    sc_trace(mVcdFile, wd3_0_apl1_fu_168_p3, "wd3_0_apl1_fu_168_p3");
    sc_trace(mVcdFile, apl1_3_cast_fu_181_p1, "apl1_3_cast_fu_181_p1");
    sc_trace(mVcdFile, tmp_26_fu_185_p2, "tmp_26_fu_185_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

uppol1::~uppol1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete adpcm_main_mul_32bkb_x_U68;
}

void uppol1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void uppol1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        apl1_4_reg_214 = apl1_4_fu_153_p2.read();
        apl1_reg_75 = apl1_fu_68_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        tmp_23_reg_209 = grp_fu_79_p2.read();
    }
}

void uppol1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void uppol1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void uppol1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void uppol1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void uppol1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void uppol1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void uppol1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void uppol1::thread_ap_return() {
    ap_return = (!tmp_26_fu_185_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_26_fu_185_p2.read()[0].to_bool())? apl1_3_cast_fu_181_p1.read(): wd3_0_apl1_fu_168_p3.read());
}

void uppol1::thread_apl1_3_cast_fu_181_p1() {
    apl1_3_cast_fu_181_p1 = esl_sext<32,16>(apl1_3_fu_176_p2.read());
}

void uppol1::thread_apl1_3_fu_176_p2() {
    apl1_3_fu_176_p2 = (!ap_const_lv16_0.is_01() || !apl1_4_reg_214.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_0) - sc_biguint<16>(apl1_4_reg_214.read()));
}

void uppol1::thread_apl1_4_cast_fu_159_p1() {
    apl1_4_cast_fu_159_p1 = esl_sext<32,16>(apl1_4_reg_214.read());
}

void uppol1::thread_apl1_4_fu_153_p2() {
    apl1_4_fu_153_p2 = (!ap_const_lv16_3C00.is_01() || !apl2_cast_fu_149_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_3C00) - sc_bigint<16>(apl2_cast_fu_149_p1.read()));
}

void uppol1::thread_apl1_fu_68_p2() {
    apl1_fu_68_p2 = (!tmp_24_fu_129_p4.read().is_01() || !apl_v_cast_cast_fu_140_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_24_fu_129_p4.read()) + sc_biguint<32>(apl_v_cast_cast_fu_140_p3.read()));
}

void uppol1::thread_apl2_cast_fu_149_p1() {
    apl2_cast_fu_149_p1 = esl_sext<16,15>(apl2.read());
}

void uppol1::thread_apl_v_cast_cast_fu_140_p3() {
    apl_v_cast_cast_fu_140_p3 = (!tmp_fu_122_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_fu_122_p3.read()[0].to_bool())? ap_const_lv32_FFFFFF40: ap_const_lv32_C0);
}

void uppol1::thread_p_shl_cast3_fu_112_p1() {
    p_shl_cast3_fu_112_p1 = esl_zext<41,40>(p_shl_fu_104_p3.read());
}

void uppol1::thread_p_shl_fu_104_p3() {
    p_shl_fu_104_p3 = esl_concat<32,8>(al1.read(), ap_const_lv8_0);
}

void uppol1::thread_tmp_24_fu_129_p4() {
    tmp_24_fu_129_p4 = tmp_s_fu_116_p2.read().range(39, 8);
}

void uppol1::thread_tmp_25_fu_162_p2() {
    tmp_25_fu_162_p2 = (!apl1_reg_75.read().is_01() || !apl1_4_cast_fu_159_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(apl1_reg_75.read()) > sc_bigint<32>(apl1_4_cast_fu_159_p1.read()));
}

void uppol1::thread_tmp_26_fu_185_p2() {
    tmp_26_fu_185_p2 = (!wd3_0_apl1_fu_168_p3.read().is_01() || !apl1_3_cast_fu_181_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(wd3_0_apl1_fu_168_p3.read()) < sc_bigint<32>(apl1_3_cast_fu_181_p1.read()));
}

void uppol1::thread_tmp_cast1_fu_100_p1() {
    tmp_cast1_fu_100_p1 = esl_sext<41,32>(al1.read());
}

void uppol1::thread_tmp_fu_122_p3() {
    tmp_fu_122_p3 = tmp_23_reg_209.read().range(63, 63);
}

void uppol1::thread_tmp_s_fu_116_p2() {
    tmp_s_fu_116_p2 = (!p_shl_cast3_fu_112_p1.read().is_01() || !tmp_cast1_fu_100_p1.read().is_01())? sc_lv<41>(): (sc_biguint<41>(p_shl_cast3_fu_112_p1.read()) - sc_bigint<41>(tmp_cast1_fu_100_p1.read()));
}

void uppol1::thread_wd3_0_apl1_fu_168_p3() {
    wd3_0_apl1_fu_168_p3 = (!tmp_25_fu_162_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_25_fu_162_p2.read()[0].to_bool())? apl1_4_cast_fu_159_p1.read(): apl1_reg_75.read());
}

void uppol1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

