// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "filtep.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic filtep::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic filtep::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> filtep::ap_ST_fsm_state1 = "1";
const sc_lv<7> filtep::ap_ST_fsm_state2 = "10";
const sc_lv<7> filtep::ap_ST_fsm_state3 = "100";
const sc_lv<7> filtep::ap_ST_fsm_state4 = "1000";
const sc_lv<7> filtep::ap_ST_fsm_state5 = "10000";
const sc_lv<7> filtep::ap_ST_fsm_state6 = "100000";
const sc_lv<7> filtep::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> filtep::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> filtep::ap_const_lv1_1 = "1";
const sc_lv<32> filtep::ap_const_lv32_5 = "101";
const sc_lv<32> filtep::ap_const_lv32_1 = "1";
const sc_lv<32> filtep::ap_const_lv32_6 = "110";
const sc_lv<32> filtep::ap_const_lv32_F = "1111";
const sc_lv<32> filtep::ap_const_lv32_2E = "101110";

filtep::filtep(sc_module_name name) : sc_module(name), mVcdFile(0) {
    adpcm_main_mul_32cud_U5 = new adpcm_main_mul_32cud<1,6,32,32,47>("adpcm_main_mul_32cud_U5");
    adpcm_main_mul_32cud_U5->clk(ap_clk);
    adpcm_main_mul_32cud_U5->reset(ap_rst);
    adpcm_main_mul_32cud_U5->din0(tmp_fu_42_p2);
    adpcm_main_mul_32cud_U5->din1(al1);
    adpcm_main_mul_32cud_U5->ce(ap_var_for_const0);
    adpcm_main_mul_32cud_U5->dout(grp_fu_56_p2);
    adpcm_main_mul_32cud_U6 = new adpcm_main_mul_32cud<1,6,32,32,47>("adpcm_main_mul_32cud_U6");
    adpcm_main_mul_32cud_U6->clk(ap_clk);
    adpcm_main_mul_32cud_U6->reset(ap_rst);
    adpcm_main_mul_32cud_U6->din0(tmp_17_fu_62_p2);
    adpcm_main_mul_32cud_U6->din1(al2);
    adpcm_main_mul_32cud_U6->ce(ap_var_for_const0);
    adpcm_main_mul_32cud_U6->dout(grp_fu_76_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( pl_1_fu_82_p2 );

    SC_METHOD(thread_pl_1_fu_82_p2);
    sensitive << ( pl_reg_116 );
    sensitive << ( tmp_s_reg_121 );

    SC_METHOD(thread_tmp_17_fu_62_p2);
    sensitive << ( rlt2 );

    SC_METHOD(thread_tmp_fu_42_p2);
    sensitive << ( rlt1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "filtep_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rlt1, "(port)rlt1");
    sc_trace(mVcdFile, al1, "(port)al1");
    sc_trace(mVcdFile, rlt2, "(port)rlt2");
    sc_trace(mVcdFile, al2, "(port)al2");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_56_p2, "grp_fu_56_p2");
    sc_trace(mVcdFile, pl_reg_116, "pl_reg_116");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_76_p2, "grp_fu_76_p2");
    sc_trace(mVcdFile, tmp_s_reg_121, "tmp_s_reg_121");
    sc_trace(mVcdFile, tmp_fu_42_p2, "tmp_fu_42_p2");
    sc_trace(mVcdFile, tmp_17_fu_62_p2, "tmp_17_fu_62_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, pl_1_fu_82_p2, "pl_1_fu_82_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

filtep::~filtep() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete adpcm_main_mul_32cud_U5;
    delete adpcm_main_mul_32cud_U6;
}

void filtep::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void filtep::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        pl_reg_116 = grp_fu_56_p2.read();
        tmp_s_reg_121 = grp_fu_76_p2.read();
    }
}

void filtep::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void filtep::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void filtep::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void filtep::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void filtep::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void filtep::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void filtep::thread_ap_return() {
    ap_return = pl_1_fu_82_p2.read().range(46, 15);
}

void filtep::thread_pl_1_fu_82_p2() {
    pl_1_fu_82_p2 = (!pl_reg_116.read().is_01() || !tmp_s_reg_121.read().is_01())? sc_lv<47>(): (sc_biguint<47>(pl_reg_116.read()) + sc_biguint<47>(tmp_s_reg_121.read()));
}

void filtep::thread_tmp_17_fu_62_p2() {
    tmp_17_fu_62_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): rlt2.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void filtep::thread_tmp_fu_42_p2() {
    tmp_fu_42_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): rlt1.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void filtep::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

}

