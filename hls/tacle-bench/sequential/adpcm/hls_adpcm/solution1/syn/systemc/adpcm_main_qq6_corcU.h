// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __adpcm_main_qq6_corcU_H__
#define __adpcm_main_qq6_corcU_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct adpcm_main_qq6_corcU_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 16;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(adpcm_main_qq6_corcU_ram) {
        ram[0] = "0b1111111101111000";
        ram[1] = "0b1111111101111000";
        ram[2] = "0b1111111101111000";
        ram[3] = "0b1111111101111000";
        ram[4] = "0b1001111100011000";
        ram[5] = "0b1010101001110000";
        ram[6] = "0b1011010111000000";
        ram[7] = "0b1011111011000000";
        ram[8] = "0b1100010101111000";
        ram[9] = "0b1100101100111000";
        ram[10] = "0b1101000000001000";
        ram[11] = "0b1101010001001000";
        ram[12] = "0b1101100000001000";
        ram[13] = "0b1101101101110000";
        ram[14] = "0b1101111010000000";
        ram[15] = "0b1110000101010000";
        ram[16] = "0b1110001111101000";
        ram[17] = "0b1110011001010000";
        ram[18] = "0b1110100010010000";
        ram[19] = "0b1110101010110000";
        ram[20] = "0b1110110010110000";
        ram[21] = "0b1110111010010000";
        ram[22] = "0b1111000001011000";
        ram[23] = "0b1111001000001000";
        ram[24] = "0b1111001110100000";
        ram[25] = "0b1111010100101000";
        ram[26] = "0b1111011010100000";
        ram[27] = "0b1111100000010000";
        ram[28] = "0b1111100101101000";
        ram[29] = "0b1111101010110000";
        ram[30] = "0b1111101111110000";
        ram[31] = "0b1111110100101000";
        ram[32] = "0b0110000011101000";
        ram[33] = "0b0101010110010000";
        ram[34] = "0b0100101001000000";
        ram[35] = "0b0100000101000000";
        ram[36] = "0b0011101010001000";
        ram[37] = "0b0011010011001000";
        ram[38] = "0b0010111111111000";
        ram[39] = "0b0010101110111000";
        ram[40] = "0b0010011111111000";
        ram[41] = "0b0010010010010000";
        ram[42] = "0b0010000110000000";
        ram[43] = "0b0001111010110000";
        ram[44] = "0b0001110000011000";
        ram[45] = "0b0001100110110000";
        ram[46] = "0b0001011101110000";
        ram[47] = "0b0001010101010000";
        ram[48] = "0b0001001101010000";
        ram[49] = "0b0001000101110000";
        ram[50] = "0b0000111110101000";
        ram[51] = "0b0000110111111000";
        ram[52] = "0b0000110001100000";
        ram[53] = "0b0000101011011000";
        ram[54] = "0b0000100101100000";
        ram[55] = "0b0000011111110000";
        ram[56] = "0b0000011010011000";
        ram[57] = "0b0000010101010000";
        ram[58] = "0b0000010000010000";
        ram[59] = "0b0000001011011000";
        ram[60] = "0b0000000110110000";
        ram[61] = "0b0000000010001000";
        ram[62] = "0b1111111001010000";
        ram[63] = "0b1111111101111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(adpcm_main_qq6_corcU) {


static const unsigned DataWidth = 16;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


adpcm_main_qq6_corcU_ram* meminst;


SC_CTOR(adpcm_main_qq6_corcU) {
meminst = new adpcm_main_qq6_corcU_ram("adpcm_main_qq6_corcU_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~adpcm_main_qq6_corcU() {
    delete meminst;
}


};//endmodule
#endif
