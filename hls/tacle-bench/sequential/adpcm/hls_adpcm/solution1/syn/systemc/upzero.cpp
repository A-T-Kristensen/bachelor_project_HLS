// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "upzero.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic upzero::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic upzero::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> upzero::ap_ST_fsm_state1 = "1";
const sc_lv<16> upzero::ap_ST_fsm_state2 = "10";
const sc_lv<16> upzero::ap_ST_fsm_state3 = "100";
const sc_lv<16> upzero::ap_ST_fsm_state4 = "1000";
const sc_lv<16> upzero::ap_ST_fsm_state5 = "10000";
const sc_lv<16> upzero::ap_ST_fsm_state6 = "100000";
const sc_lv<16> upzero::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> upzero::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> upzero::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> upzero::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> upzero::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> upzero::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> upzero::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> upzero::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> upzero::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> upzero::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> upzero::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> upzero::ap_const_lv1_1 = "1";
const sc_lv<32> upzero::ap_const_lv32_2 = "10";
const sc_lv<32> upzero::ap_const_lv32_B = "1011";
const sc_lv<32> upzero::ap_const_lv32_C = "1100";
const sc_lv<32> upzero::ap_const_lv32_D = "1101";
const sc_lv<1> upzero::ap_const_lv1_0 = "0";
const sc_lv<32> upzero::ap_const_lv32_1 = "1";
const sc_lv<32> upzero::ap_const_lv32_3 = "11";
const sc_lv<32> upzero::ap_const_lv32_8 = "1000";
const sc_lv<32> upzero::ap_const_lv32_9 = "1001";
const sc_lv<3> upzero::ap_const_lv3_0 = "000";
const sc_lv<32> upzero::ap_const_lv32_A = "1010";
const sc_lv<64> upzero::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> upzero::ap_const_lv64_4 = "100";
const sc_lv<64> upzero::ap_const_lv64_3 = "11";
const sc_lv<64> upzero::ap_const_lv64_2 = "10";
const sc_lv<64> upzero::ap_const_lv64_1 = "1";
const sc_lv<64> upzero::ap_const_lv64_5 = "101";
const sc_lv<32> upzero::ap_const_lv32_E = "1110";
const sc_lv<32> upzero::ap_const_lv32_F = "1111";
const sc_lv<32> upzero::ap_const_lv32_7 = "111";
const sc_lv<3> upzero::ap_const_lv3_6 = "110";
const sc_lv<3> upzero::ap_const_lv3_1 = "1";
const sc_lv<32> upzero::ap_const_lv32_3F = "111111";
const sc_lv<32> upzero::ap_const_lv32_FFFFFF80 = "11111111111111111111111110000000";
const sc_lv<32> upzero::ap_const_lv32_80 = "10000000";
const sc_lv<8> upzero::ap_const_lv8_0 = "00000000";
const sc_lv<32> upzero::ap_const_lv32_27 = "100111";

upzero::upzero(sc_module_name name) : sc_module(name), mVcdFile(0) {
    adpcm_main_mul_32bkb_x_U17 = new adpcm_main_mul_32bkb<1,6,32,32,64>("adpcm_main_mul_32bkb_x_U17");
    adpcm_main_mul_32bkb_x_U17->clk(ap_clk);
    adpcm_main_mul_32bkb_x_U17->reset(ap_rst);
    adpcm_main_mul_32bkb_x_U17->din0(grp_fu_221_p0);
    adpcm_main_mul_32bkb_x_U17->din1(reg_165);
    adpcm_main_mul_32bkb_x_U17->ce(ap_var_for_const0);
    adpcm_main_mul_32bkb_x_U17->dout(grp_fu_221_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_bli_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bli_addr_1_reg_336 );
    sensitive << ( bli_addr_reg_349 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_2_fu_212_p1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_bli_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_bli_d0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_5_fu_267_p2 );
    sensitive << ( tmp_4_fu_286_p2 );

    SC_METHOD(thread_bli_we0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_dlti_addr_4_reg_387);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_dlti_addr_5_reg_392);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_dlti_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_reg_314 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_182_p2 );
    sensitive << ( exitcond1_fu_200_p2 );
    sensitive << ( dlti_addr_5_reg_392 );
    sensitive << ( tmp_8_fu_194_p1 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dlti_address1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( dlti_addr_4_reg_387 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_dlti_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_reg_314 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_182_p2 );
    sensitive << ( exitcond1_fu_200_p2 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dlti_ce1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_dlti_d0);
    sensitive << ( reg_165 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dlti_d1);
    sensitive << ( dlt );
    sensitive << ( reg_165 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( dlti_load_2_reg_382 );
    sensitive << ( dlti_load_4_reg_397 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_dlti_we0);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_dlti_we1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_exitcond1_fu_200_p2);
    sensitive << ( tmp_reg_314 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_154 );

    SC_METHOD(thread_exitcond_fu_182_p2);
    sensitive << ( tmp_reg_314 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_1_reg_143 );

    SC_METHOD(thread_grp_fu_221_p0);
    sensitive << ( tmp_1_reg_318 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_2_fu_206_p2);
    sensitive << ( i_reg_154 );

    SC_METHOD(thread_i_3_fu_188_p2);
    sensitive << ( i_1_reg_143 );

    SC_METHOD(thread_p_shl1_fu_244_p3);
    sensitive << ( bli_load_1_reg_376 );

    SC_METHOD(thread_p_shl_fu_278_p3);
    sensitive << ( bli_q0 );

    SC_METHOD(thread_tmp_10_cast_fu_241_p1);
    sensitive << ( bli_load_1_reg_376 );

    SC_METHOD(thread_tmp_1_fu_178_p1);
    sensitive << ( dlt );

    SC_METHOD(thread_tmp_2_fu_212_p1);
    sensitive << ( i_reg_154 );

    SC_METHOD(thread_tmp_3_cast_fu_274_p1);
    sensitive << ( bli_q0 );

    SC_METHOD(thread_tmp_3_fu_251_p2);
    sensitive << ( p_shl1_fu_244_p3 );
    sensitive << ( tmp_10_cast_fu_241_p1 );

    SC_METHOD(thread_tmp_4_fu_286_p2);
    sensitive << ( p_shl_fu_278_p3 );
    sensitive << ( tmp_3_cast_fu_274_p1 );

    SC_METHOD(thread_tmp_5_fu_267_p2);
    sensitive << ( wd2_cast_cast_cast_fu_233_p3 );
    sensitive << ( wd3_fu_257_p4 );

    SC_METHOD(thread_tmp_7_fu_226_p3);
    sensitive << ( tmp_s_reg_371 );

    SC_METHOD(thread_tmp_8_fu_194_p1);
    sensitive << ( i_1_reg_143 );

    SC_METHOD(thread_tmp_fu_172_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dlt );

    SC_METHOD(thread_wd2_cast_cast_cast_fu_233_p3);
    sensitive << ( tmp_7_fu_226_p3 );

    SC_METHOD(thread_wd3_fu_257_p4);
    sensitive << ( tmp_3_fu_251_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_reg_314 );
    sensitive << ( exitcond_fu_182_p2 );
    sensitive << ( exitcond1_fu_200_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "upzero_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dlt, "(port)dlt");
    sc_trace(mVcdFile, dlti_address0, "(port)dlti_address0");
    sc_trace(mVcdFile, dlti_ce0, "(port)dlti_ce0");
    sc_trace(mVcdFile, dlti_we0, "(port)dlti_we0");
    sc_trace(mVcdFile, dlti_d0, "(port)dlti_d0");
    sc_trace(mVcdFile, dlti_q0, "(port)dlti_q0");
    sc_trace(mVcdFile, dlti_address1, "(port)dlti_address1");
    sc_trace(mVcdFile, dlti_ce1, "(port)dlti_ce1");
    sc_trace(mVcdFile, dlti_we1, "(port)dlti_we1");
    sc_trace(mVcdFile, dlti_d1, "(port)dlti_d1");
    sc_trace(mVcdFile, dlti_q1, "(port)dlti_q1");
    sc_trace(mVcdFile, bli_address0, "(port)bli_address0");
    sc_trace(mVcdFile, bli_ce0, "(port)bli_ce0");
    sc_trace(mVcdFile, bli_we0, "(port)bli_we0");
    sc_trace(mVcdFile, bli_d0, "(port)bli_d0");
    sc_trace(mVcdFile, bli_q0, "(port)bli_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_165, "reg_165");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_fu_172_p2, "tmp_fu_172_p2");
    sc_trace(mVcdFile, tmp_reg_314, "tmp_reg_314");
    sc_trace(mVcdFile, tmp_1_fu_178_p1, "tmp_1_fu_178_p1");
    sc_trace(mVcdFile, tmp_1_reg_318, "tmp_1_reg_318");
    sc_trace(mVcdFile, i_3_fu_188_p2, "i_3_fu_188_p2");
    sc_trace(mVcdFile, i_3_reg_326, "i_3_reg_326");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_182_p2, "exitcond_fu_182_p2");
    sc_trace(mVcdFile, bli_addr_1_reg_336, "bli_addr_1_reg_336");
    sc_trace(mVcdFile, i_2_fu_206_p2, "i_2_fu_206_p2");
    sc_trace(mVcdFile, i_2_reg_344, "i_2_reg_344");
    sc_trace(mVcdFile, bli_addr_reg_349, "bli_addr_reg_349");
    sc_trace(mVcdFile, exitcond1_fu_200_p2, "exitcond1_fu_200_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_221_p2, "grp_fu_221_p2");
    sc_trace(mVcdFile, tmp_s_reg_371, "tmp_s_reg_371");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, bli_load_1_reg_376, "bli_load_1_reg_376");
    sc_trace(mVcdFile, dlti_load_2_reg_382, "dlti_load_2_reg_382");
    sc_trace(mVcdFile, dlti_addr_4_reg_387, "dlti_addr_4_reg_387");
    sc_trace(mVcdFile, dlti_addr_5_reg_392, "dlti_addr_5_reg_392");
    sc_trace(mVcdFile, dlti_load_4_reg_397, "dlti_load_4_reg_397");
    sc_trace(mVcdFile, i_1_reg_143, "i_1_reg_143");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i_reg_154, "i_reg_154");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_8_fu_194_p1, "tmp_8_fu_194_p1");
    sc_trace(mVcdFile, tmp_2_fu_212_p1, "tmp_2_fu_212_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_5_fu_267_p2, "tmp_5_fu_267_p2");
    sc_trace(mVcdFile, grp_fu_221_p0, "grp_fu_221_p0");
    sc_trace(mVcdFile, tmp_7_fu_226_p3, "tmp_7_fu_226_p3");
    sc_trace(mVcdFile, p_shl1_fu_244_p3, "p_shl1_fu_244_p3");
    sc_trace(mVcdFile, tmp_10_cast_fu_241_p1, "tmp_10_cast_fu_241_p1");
    sc_trace(mVcdFile, tmp_3_fu_251_p2, "tmp_3_fu_251_p2");
    sc_trace(mVcdFile, wd2_cast_cast_cast_fu_233_p3, "wd2_cast_cast_cast_fu_233_p3");
    sc_trace(mVcdFile, wd3_fu_257_p4, "wd3_fu_257_p4");
    sc_trace(mVcdFile, p_shl_fu_278_p3, "p_shl_fu_278_p3");
    sc_trace(mVcdFile, tmp_3_cast_fu_274_p1, "tmp_3_cast_fu_274_p1");
    sc_trace(mVcdFile, tmp_4_fu_286_p2, "tmp_4_fu_286_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

upzero::~upzero() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete adpcm_main_mul_32bkb_x_U17;
}

void upzero::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void upzero::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(tmp_fu_172_p2.read(), ap_const_lv1_0))) {
        i_1_reg_143 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        i_1_reg_143 = i_3_reg_326.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         !esl_seteq<1,1,1>(tmp_fu_172_p2.read(), ap_const_lv1_0))) {
        i_reg_154 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        i_reg_154 = i_2_reg_344.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        reg_165 = dlti_q1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())))) {
        reg_165 = dlti_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_182_p2.read()))) {
        bli_addr_1_reg_336 =  (sc_lv<3>) (tmp_8_fu_194_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && !esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_200_p2.read()))) {
        bli_addr_reg_349 =  (sc_lv<3>) (tmp_2_fu_212_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        bli_load_1_reg_376 = bli_q0.read();
        tmp_s_reg_371 = grp_fu_221_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        dlti_load_2_reg_382 = dlti_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        dlti_load_4_reg_397 = dlti_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && !esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0))) {
        i_2_reg_344 = i_2_fu_206_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0))) {
        i_3_reg_326 = i_3_fu_188_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(tmp_fu_172_p2.read(), ap_const_lv1_0))) {
        tmp_1_reg_318 = tmp_1_fu_178_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_reg_314 = tmp_fu_172_p2.read();
    }
}

void upzero::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void upzero::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void upzero::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read().range(10, 10);
}

void upzero::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void upzero::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void upzero::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(13, 13);
}

void upzero::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read().range(14, 14);
}

void upzero::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read().range(15, 15);
}

void upzero::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void upzero::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void upzero::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void upzero::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void upzero::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void upzero::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void upzero::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void upzero::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void upzero::thread_bli_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        bli_address0 = bli_addr_reg_349.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())))) {
        bli_address0 = bli_addr_1_reg_336.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        bli_address0 =  (sc_lv<3>) (tmp_2_fu_212_p1.read());
    } else {
        bli_address0 = "XXX";
    }
}

void upzero::thread_bli_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())))) {
        bli_ce0 = ap_const_logic_1;
    } else {
        bli_ce0 = ap_const_logic_0;
    }
}

void upzero::thread_bli_d0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        bli_d0 = tmp_4_fu_286_p2.read().range(39, 8);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        bli_d0 = tmp_5_fu_267_p2.read();
    } else {
        bli_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void upzero::thread_bli_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())))) {
        bli_we0 = ap_const_logic_1;
    } else {
        bli_we0 = ap_const_logic_0;
    }
}

void upzero::thread_dlti_addr_4_reg_387() {
    dlti_addr_4_reg_387 =  (sc_lv<3>) (ap_const_lv64_2);
}

void upzero::thread_dlti_addr_5_reg_392() {
    dlti_addr_5_reg_392 =  (sc_lv<3>) (ap_const_lv64_1);
}

void upzero::thread_dlti_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        dlti_address0 = dlti_addr_5_reg_392.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        dlti_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        dlti_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        dlti_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                ((esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && 
                  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_182_p2.read())) || 
                 (!esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && 
                  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_200_p2.read()))))) {
        dlti_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_182_p2.read()))) {
        dlti_address0 =  (sc_lv<3>) (tmp_8_fu_194_p1.read());
    } else {
        dlti_address0 = "XXX";
    }
}

void upzero::thread_dlti_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        dlti_address1 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        dlti_address1 = dlti_addr_4_reg_387.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        dlti_address1 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        dlti_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        dlti_address1 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        dlti_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else {
        dlti_address1 = "XXX";
    }
}

void upzero::thread_dlti_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_182_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          ((esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && 
            !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_182_p2.read())) || 
           (!esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && 
            !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_200_p2.read())))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())))) {
        dlti_ce0 = ap_const_logic_1;
    } else {
        dlti_ce0 = ap_const_logic_0;
    }
}

void upzero::thread_dlti_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())))) {
        dlti_ce1 = ap_const_logic_1;
    } else {
        dlti_ce1 = ap_const_logic_0;
    }
}

void upzero::thread_dlti_d0() {
    dlti_d0 = reg_165.read();
}

void upzero::thread_dlti_d1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        dlti_d1 = dlt.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        dlti_d1 = dlti_load_4_reg_397.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        dlti_d1 = dlti_load_2_reg_382.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        dlti_d1 = reg_165.read();
    } else {
        dlti_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void upzero::thread_dlti_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())))) {
        dlti_we0 = ap_const_logic_1;
    } else {
        dlti_we0 = ap_const_logic_0;
    }
}

void upzero::thread_dlti_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read())))) {
        dlti_we1 = ap_const_logic_1;
    } else {
        dlti_we1 = ap_const_logic_0;
    }
}

void upzero::thread_exitcond1_fu_200_p2() {
    exitcond1_fu_200_p2 = (!i_reg_154.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_154.read() == ap_const_lv3_6);
}

void upzero::thread_exitcond_fu_182_p2() {
    exitcond_fu_182_p2 = (!i_1_reg_143.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_143.read() == ap_const_lv3_6);
}

void upzero::thread_grp_fu_221_p0() {
    grp_fu_221_p0 =  (sc_lv<32>) (tmp_1_reg_318.read());
}

void upzero::thread_i_2_fu_206_p2() {
    i_2_fu_206_p2 = (!i_reg_154.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_154.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void upzero::thread_i_3_fu_188_p2() {
    i_3_fu_188_p2 = (!i_1_reg_143.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_143.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void upzero::thread_p_shl1_fu_244_p3() {
    p_shl1_fu_244_p3 = esl_concat<32,8>(bli_load_1_reg_376.read(), ap_const_lv8_0);
}

void upzero::thread_p_shl_fu_278_p3() {
    p_shl_fu_278_p3 = esl_concat<32,8>(bli_q0.read(), ap_const_lv8_0);
}

void upzero::thread_tmp_10_cast_fu_241_p1() {
    tmp_10_cast_fu_241_p1 = esl_sext<40,32>(bli_load_1_reg_376.read());
}

void upzero::thread_tmp_1_fu_178_p1() {
    tmp_1_fu_178_p1 = esl_sext<64,32>(dlt.read());
}

void upzero::thread_tmp_2_fu_212_p1() {
    tmp_2_fu_212_p1 = esl_zext<64,3>(i_reg_154.read());
}

void upzero::thread_tmp_3_cast_fu_274_p1() {
    tmp_3_cast_fu_274_p1 = esl_sext<40,32>(bli_q0.read());
}

void upzero::thread_tmp_3_fu_251_p2() {
    tmp_3_fu_251_p2 = (!p_shl1_fu_244_p3.read().is_01() || !tmp_10_cast_fu_241_p1.read().is_01())? sc_lv<40>(): (sc_biguint<40>(p_shl1_fu_244_p3.read()) - sc_bigint<40>(tmp_10_cast_fu_241_p1.read()));
}

void upzero::thread_tmp_4_fu_286_p2() {
    tmp_4_fu_286_p2 = (!p_shl_fu_278_p3.read().is_01() || !tmp_3_cast_fu_274_p1.read().is_01())? sc_lv<40>(): (sc_biguint<40>(p_shl_fu_278_p3.read()) - sc_bigint<40>(tmp_3_cast_fu_274_p1.read()));
}

void upzero::thread_tmp_5_fu_267_p2() {
    tmp_5_fu_267_p2 = (!wd2_cast_cast_cast_fu_233_p3.read().is_01() || !wd3_fu_257_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(wd2_cast_cast_cast_fu_233_p3.read()) + sc_biguint<32>(wd3_fu_257_p4.read()));
}

void upzero::thread_tmp_7_fu_226_p3() {
    tmp_7_fu_226_p3 = tmp_s_reg_371.read().range(63, 63);
}

void upzero::thread_tmp_8_fu_194_p1() {
    tmp_8_fu_194_p1 = esl_zext<64,3>(i_1_reg_143.read());
}

void upzero::thread_tmp_fu_172_p2() {
    tmp_fu_172_p2 = (!dlt.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(dlt.read() == ap_const_lv32_0);
}

void upzero::thread_wd2_cast_cast_cast_fu_233_p3() {
    wd2_cast_cast_cast_fu_233_p3 = (!tmp_7_fu_226_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_7_fu_226_p3.read()[0].to_bool())? ap_const_lv32_FFFFFF80: ap_const_lv32_80);
}

void upzero::thread_wd3_fu_257_p4() {
    wd3_fu_257_p4 = tmp_3_fu_251_p2.read().range(39, 8);
}

void upzero::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_200_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else if (((esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_182_p2.read())) || (!esl_seteq<1,1,1>(tmp_reg_314.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_200_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

}

