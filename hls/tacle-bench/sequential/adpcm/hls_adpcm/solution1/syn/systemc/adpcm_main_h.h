// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __adpcm_main_h_H__
#define __adpcm_main_h_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct adpcm_main_h_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 15;
  static const unsigned AddressRange = 24;
  static const unsigned AddressWidth = 5;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(adpcm_main_h_ram) {
        ram[0] = "0b000000000001100";
        ram[1] = "0b111111111010100";
        ram[2] = "0b111111111010100";
        ram[3] = "0b000000011010100";
        ram[4] = "0b000000000110000";
        ram[5] = "0b111110110010000";
        ram[6] = "0b000000010000000";
        ram[7] = "0b000010110101000";
        ram[8] = "0b111110010111000";
        ram[9] = "0b111001101101100";
        ram[10] = "0b000111011011100";
        ram[11] = "0b011110010010000";
        ram[12] = "0b011110010010000";
        ram[13] = "0b000111011011100";
        ram[14] = "0b111001101101100";
        ram[15] = "0b111110010111000";
        ram[16] = "0b000010110101000";
        ram[17] = "0b000000010000000";
        ram[18] = "0b111110110010000";
        ram[19] = "0b000000000110000";
        ram[20] = "0b000000011010100";
        ram[21] = "0b111111111010100";
        ram[22] = "0b111111111010100";
        ram[23] = "0b000000000001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(adpcm_main_h) {


static const unsigned DataWidth = 15;
static const unsigned AddressRange = 24;
static const unsigned AddressWidth = 5;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


adpcm_main_h_ram* meminst;


SC_CTOR(adpcm_main_h) {
meminst = new adpcm_main_h_ram("adpcm_main_h_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~adpcm_main_h() {
    delete meminst;
}


};//endmodule
#endif
