// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _reset_HH_
#define _reset_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct reset : public sc_module {
    // Port declarations 114
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > dec_detl;
    sc_out< sc_logic > dec_detl_ap_vld;
    sc_out< sc_lv<32> > detl;
    sc_out< sc_logic > detl_ap_vld;
    sc_out< sc_lv<32> > dec_deth;
    sc_out< sc_logic > dec_deth_ap_vld;
    sc_out< sc_lv<32> > deth;
    sc_out< sc_logic > deth_ap_vld;
    sc_out< sc_lv<32> > rlt2;
    sc_out< sc_logic > rlt2_ap_vld;
    sc_out< sc_lv<32> > rlt1;
    sc_out< sc_logic > rlt1_ap_vld;
    sc_out< sc_lv<32> > plt2;
    sc_out< sc_logic > plt2_ap_vld;
    sc_out< sc_lv<32> > plt1;
    sc_out< sc_logic > plt1_ap_vld;
    sc_out< sc_lv<32> > al2;
    sc_out< sc_logic > al2_ap_vld;
    sc_out< sc_lv<32> > al1;
    sc_out< sc_logic > al1_ap_vld;
    sc_out< sc_lv<32> > nbl;
    sc_out< sc_logic > nbl_ap_vld;
    sc_out< sc_lv<32> > rh2;
    sc_out< sc_logic > rh2_ap_vld;
    sc_out< sc_lv<32> > rh1;
    sc_out< sc_logic > rh1_ap_vld;
    sc_out< sc_lv<32> > ph2;
    sc_out< sc_logic > ph2_ap_vld;
    sc_out< sc_lv<32> > ph1;
    sc_out< sc_logic > ph1_ap_vld;
    sc_out< sc_lv<32> > ah2;
    sc_out< sc_logic > ah2_ap_vld;
    sc_out< sc_lv<32> > ah1;
    sc_out< sc_logic > ah1_ap_vld;
    sc_out< sc_lv<32> > nbh;
    sc_out< sc_logic > nbh_ap_vld;
    sc_out< sc_lv<32> > dec_rlt2;
    sc_out< sc_logic > dec_rlt2_ap_vld;
    sc_out< sc_lv<32> > dec_rlt1;
    sc_out< sc_logic > dec_rlt1_ap_vld;
    sc_out< sc_lv<32> > dec_plt2;
    sc_out< sc_logic > dec_plt2_ap_vld;
    sc_out< sc_lv<32> > dec_plt1;
    sc_out< sc_logic > dec_plt1_ap_vld;
    sc_out< sc_lv<32> > dec_al2;
    sc_out< sc_logic > dec_al2_ap_vld;
    sc_out< sc_lv<32> > dec_al1;
    sc_out< sc_logic > dec_al1_ap_vld;
    sc_out< sc_lv<32> > dec_nbl;
    sc_out< sc_logic > dec_nbl_ap_vld;
    sc_out< sc_lv<32> > dec_rh2;
    sc_out< sc_logic > dec_rh2_ap_vld;
    sc_out< sc_lv<32> > dec_rh1;
    sc_out< sc_logic > dec_rh1_ap_vld;
    sc_out< sc_lv<32> > dec_ph2;
    sc_out< sc_logic > dec_ph2_ap_vld;
    sc_out< sc_lv<32> > dec_ph1;
    sc_out< sc_logic > dec_ph1_ap_vld;
    sc_out< sc_lv<32> > dec_ah2;
    sc_out< sc_logic > dec_ah2_ap_vld;
    sc_out< sc_lv<32> > dec_ah1;
    sc_out< sc_logic > dec_ah1_ap_vld;
    sc_out< sc_lv<32> > dec_nbh;
    sc_out< sc_logic > dec_nbh_ap_vld;
    sc_out< sc_lv<3> > delay_dltx_address1;
    sc_out< sc_logic > delay_dltx_ce1;
    sc_out< sc_logic > delay_dltx_we1;
    sc_out< sc_lv<32> > delay_dltx_d1;
    sc_out< sc_lv<3> > delay_dhx_address1;
    sc_out< sc_logic > delay_dhx_ce1;
    sc_out< sc_logic > delay_dhx_we1;
    sc_out< sc_lv<32> > delay_dhx_d1;
    sc_out< sc_lv<3> > dec_del_dltx_address1;
    sc_out< sc_logic > dec_del_dltx_ce1;
    sc_out< sc_logic > dec_del_dltx_we1;
    sc_out< sc_lv<32> > dec_del_dltx_d1;
    sc_out< sc_lv<3> > dec_del_dhx_address1;
    sc_out< sc_logic > dec_del_dhx_ce1;
    sc_out< sc_logic > dec_del_dhx_we1;
    sc_out< sc_lv<32> > dec_del_dhx_d1;
    sc_out< sc_lv<3> > delay_bpl_address1;
    sc_out< sc_logic > delay_bpl_ce1;
    sc_out< sc_logic > delay_bpl_we1;
    sc_out< sc_lv<32> > delay_bpl_d1;
    sc_out< sc_lv<3> > delay_bph_address1;
    sc_out< sc_logic > delay_bph_ce1;
    sc_out< sc_logic > delay_bph_we1;
    sc_out< sc_lv<32> > delay_bph_d1;
    sc_out< sc_lv<3> > dec_del_bpl_address1;
    sc_out< sc_logic > dec_del_bpl_ce1;
    sc_out< sc_logic > dec_del_bpl_we1;
    sc_out< sc_lv<32> > dec_del_bpl_d1;
    sc_out< sc_lv<3> > dec_del_bph_address1;
    sc_out< sc_logic > dec_del_bph_ce1;
    sc_out< sc_logic > dec_del_bph_we1;
    sc_out< sc_lv<32> > dec_del_bph_d1;
    sc_out< sc_lv<5> > tqmf_address1;
    sc_out< sc_logic > tqmf_ce1;
    sc_out< sc_logic > tqmf_we1;
    sc_out< sc_lv<32> > tqmf_d1;
    sc_out< sc_lv<4> > accumc_address0;
    sc_out< sc_logic > accumc_ce0;
    sc_out< sc_logic > accumc_we0;
    sc_out< sc_lv<32> > accumc_d0;
    sc_out< sc_lv<4> > accumd_address0;
    sc_out< sc_logic > accumd_ce0;
    sc_out< sc_logic > accumd_we0;
    sc_out< sc_lv<32> > accumd_d0;


    // Module declarations
    reset(sc_module_name name);
    SC_HAS_PROCESS(reset);

    ~reset();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_4_fu_542_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > i_5_fu_562_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > i_6_fu_582_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > i_7_fu_599_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > i_reg_300;
    sc_signal< sc_lv<1> > exitcond3_fu_536_p2;
    sc_signal< sc_lv<3> > i_1_reg_311;
    sc_signal< sc_lv<1> > exitcond2_fu_556_p2;
    sc_signal< sc_lv<5> > i_2_reg_322;
    sc_signal< sc_lv<1> > exitcond1_fu_576_p2;
    sc_signal< sc_lv<4> > i_3_reg_333;
    sc_signal< sc_lv<1> > exitcond_fu_593_p2;
    sc_signal< sc_lv<64> > tmp_fu_548_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_568_p1;
    sc_signal< sc_lv<64> > tmp_30_fu_588_p1;
    sc_signal< sc_lv<64> > tmp_31_fu_605_p1;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<5> ap_const_lv5_18;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<4> ap_const_lv4_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_accumc_address0();
    void thread_accumc_ce0();
    void thread_accumc_d0();
    void thread_accumc_we0();
    void thread_accumd_address0();
    void thread_accumd_ce0();
    void thread_accumd_d0();
    void thread_accumd_we0();
    void thread_ah1();
    void thread_ah1_ap_vld();
    void thread_ah2();
    void thread_ah2_ap_vld();
    void thread_al1();
    void thread_al1_ap_vld();
    void thread_al2();
    void thread_al2_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_dec_ah1();
    void thread_dec_ah1_ap_vld();
    void thread_dec_ah2();
    void thread_dec_ah2_ap_vld();
    void thread_dec_al1();
    void thread_dec_al1_ap_vld();
    void thread_dec_al2();
    void thread_dec_al2_ap_vld();
    void thread_dec_del_bph_address1();
    void thread_dec_del_bph_ce1();
    void thread_dec_del_bph_d1();
    void thread_dec_del_bph_we1();
    void thread_dec_del_bpl_address1();
    void thread_dec_del_bpl_ce1();
    void thread_dec_del_bpl_d1();
    void thread_dec_del_bpl_we1();
    void thread_dec_del_dhx_address1();
    void thread_dec_del_dhx_ce1();
    void thread_dec_del_dhx_d1();
    void thread_dec_del_dhx_we1();
    void thread_dec_del_dltx_address1();
    void thread_dec_del_dltx_ce1();
    void thread_dec_del_dltx_d1();
    void thread_dec_del_dltx_we1();
    void thread_dec_deth();
    void thread_dec_deth_ap_vld();
    void thread_dec_detl();
    void thread_dec_detl_ap_vld();
    void thread_dec_nbh();
    void thread_dec_nbh_ap_vld();
    void thread_dec_nbl();
    void thread_dec_nbl_ap_vld();
    void thread_dec_ph1();
    void thread_dec_ph1_ap_vld();
    void thread_dec_ph2();
    void thread_dec_ph2_ap_vld();
    void thread_dec_plt1();
    void thread_dec_plt1_ap_vld();
    void thread_dec_plt2();
    void thread_dec_plt2_ap_vld();
    void thread_dec_rh1();
    void thread_dec_rh1_ap_vld();
    void thread_dec_rh2();
    void thread_dec_rh2_ap_vld();
    void thread_dec_rlt1();
    void thread_dec_rlt1_ap_vld();
    void thread_dec_rlt2();
    void thread_dec_rlt2_ap_vld();
    void thread_delay_bph_address1();
    void thread_delay_bph_ce1();
    void thread_delay_bph_d1();
    void thread_delay_bph_we1();
    void thread_delay_bpl_address1();
    void thread_delay_bpl_ce1();
    void thread_delay_bpl_d1();
    void thread_delay_bpl_we1();
    void thread_delay_dhx_address1();
    void thread_delay_dhx_ce1();
    void thread_delay_dhx_d1();
    void thread_delay_dhx_we1();
    void thread_delay_dltx_address1();
    void thread_delay_dltx_ce1();
    void thread_delay_dltx_d1();
    void thread_delay_dltx_we1();
    void thread_deth();
    void thread_deth_ap_vld();
    void thread_detl();
    void thread_detl_ap_vld();
    void thread_exitcond1_fu_576_p2();
    void thread_exitcond2_fu_556_p2();
    void thread_exitcond3_fu_536_p2();
    void thread_exitcond_fu_593_p2();
    void thread_i_4_fu_542_p2();
    void thread_i_5_fu_562_p2();
    void thread_i_6_fu_582_p2();
    void thread_i_7_fu_599_p2();
    void thread_nbh();
    void thread_nbh_ap_vld();
    void thread_nbl();
    void thread_nbl_ap_vld();
    void thread_ph1();
    void thread_ph1_ap_vld();
    void thread_ph2();
    void thread_ph2_ap_vld();
    void thread_plt1();
    void thread_plt1_ap_vld();
    void thread_plt2();
    void thread_plt2_ap_vld();
    void thread_rh1();
    void thread_rh1_ap_vld();
    void thread_rh2();
    void thread_rh2_ap_vld();
    void thread_rlt1();
    void thread_rlt1_ap_vld();
    void thread_rlt2();
    void thread_rlt2_ap_vld();
    void thread_tmp_30_fu_588_p1();
    void thread_tmp_31_fu_605_p1();
    void thread_tmp_fu_548_p1();
    void thread_tmp_s_fu_568_p1();
    void thread_tqmf_address1();
    void thread_tqmf_ce1();
    void thread_tqmf_d1();
    void thread_tqmf_we1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
