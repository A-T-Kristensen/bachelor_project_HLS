// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scalel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scalel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scalel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> scalel::ap_ST_fsm_state1 = "1";
const sc_lv<2> scalel::ap_ST_fsm_state2 = "10";
const sc_lv<32> scalel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> scalel::ap_const_lv1_1 = "1";
const sc_lv<32> scalel::ap_const_lv32_1 = "1";
const sc_lv<32> scalel::ap_const_lv32_6 = "110";
const sc_lv<32> scalel::ap_const_lv32_A = "1010";
const sc_lv<32> scalel::ap_const_lv32_B = "1011";
const sc_lv<32> scalel::ap_const_lv32_E = "1110";
const sc_lv<4> scalel::ap_const_lv4_1 = "1";
const sc_lv<3> scalel::ap_const_lv3_0 = "000";
const sc_lv<15> scalel::ap_const_lv15_0 = "000000000000000";

scalel::scalel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ilb_table_U = new scalel_ilb_table("ilb_table_U");
    ilb_table_U->clk(ap_clk);
    ilb_table_U->reset(ap_rst);
    ilb_table_U->address0(ilb_table_address0);
    ilb_table_U->ce0(ilb_table_ce0);
    ilb_table_U->q0(ilb_table_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_28_fu_112_p3 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_ilb_table_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_s_fu_74_p1 );

    SC_METHOD(thread_ilb_table_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_12_fu_82_p1);
    sensitive << ( shift_constant );

    SC_METHOD(thread_tmp_26_fu_86_p2);
    sensitive << ( tmp_12_fu_82_p1 );

    SC_METHOD(thread_tmp_27_fu_96_p2);
    sensitive << ( tmp_37_cast_cast_fu_92_p1 );
    sensitive << ( wd2_cast_cast_fu_79_p1 );

    SC_METHOD(thread_tmp_28_fu_112_p3);
    sensitive << ( wd3_fu_106_p2 );

    SC_METHOD(thread_tmp_37_cast_cast_fu_92_p1);
    sensitive << ( tmp_26_fu_86_p2 );

    SC_METHOD(thread_tmp_38_cast_fu_102_p1);
    sensitive << ( tmp_27_fu_96_p2 );

    SC_METHOD(thread_tmp_s_fu_74_p1);
    sensitive << ( wd1_fu_54_p4 );

    SC_METHOD(thread_wd1_fu_54_p4);
    sensitive << ( nbl );

    SC_METHOD(thread_wd2_cast_cast_fu_79_p1);
    sensitive << ( tmp_reg_120 );

    SC_METHOD(thread_wd3_fu_106_p2);
    sensitive << ( ilb_table_q0 );
    sensitive << ( tmp_38_cast_fu_102_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "01";
    ap_return_preg = "000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scalel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, nbl, "(port)nbl");
    sc_trace(mVcdFile, shift_constant, "(port)shift_constant");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ilb_table_address0, "ilb_table_address0");
    sc_trace(mVcdFile, ilb_table_ce0, "ilb_table_ce0");
    sc_trace(mVcdFile, ilb_table_q0, "ilb_table_q0");
    sc_trace(mVcdFile, tmp_reg_120, "tmp_reg_120");
    sc_trace(mVcdFile, tmp_s_fu_74_p1, "tmp_s_fu_74_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, wd1_fu_54_p4, "wd1_fu_54_p4");
    sc_trace(mVcdFile, tmp_12_fu_82_p1, "tmp_12_fu_82_p1");
    sc_trace(mVcdFile, tmp_26_fu_86_p2, "tmp_26_fu_86_p2");
    sc_trace(mVcdFile, tmp_37_cast_cast_fu_92_p1, "tmp_37_cast_cast_fu_92_p1");
    sc_trace(mVcdFile, wd2_cast_cast_fu_79_p1, "wd2_cast_cast_fu_79_p1");
    sc_trace(mVcdFile, tmp_27_fu_96_p2, "tmp_27_fu_96_p2");
    sc_trace(mVcdFile, tmp_38_cast_fu_102_p1, "tmp_38_cast_fu_102_p1");
    sc_trace(mVcdFile, wd3_fu_106_p2, "wd3_fu_106_p2");
    sc_trace(mVcdFile, tmp_28_fu_112_p3, "tmp_28_fu_112_p3");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

scalel::~scalel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ilb_table_U;
}

void scalel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv15_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
            ap_return_preg = tmp_28_fu_112_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_reg_120 = nbl.read().range(14, 11);
    }
}

void scalel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void scalel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void scalel::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void scalel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scalel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void scalel::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        ap_return = tmp_28_fu_112_p3.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void scalel::thread_ilb_table_address0() {
    ilb_table_address0 =  (sc_lv<5>) (tmp_s_fu_74_p1.read());
}

void scalel::thread_ilb_table_ce0() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ilb_table_ce0 = ap_const_logic_1;
    } else {
        ilb_table_ce0 = ap_const_logic_0;
    }
}

void scalel::thread_tmp_12_fu_82_p1() {
    tmp_12_fu_82_p1 = shift_constant.read().range(4-1, 0);
}

void scalel::thread_tmp_26_fu_86_p2() {
    tmp_26_fu_86_p2 = (!ap_const_lv4_1.is_01() || !tmp_12_fu_82_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_1) + sc_biguint<4>(tmp_12_fu_82_p1.read()));
}

void scalel::thread_tmp_27_fu_96_p2() {
    tmp_27_fu_96_p2 = (!tmp_37_cast_cast_fu_92_p1.read().is_01() || !wd2_cast_cast_fu_79_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_37_cast_cast_fu_92_p1.read()) - sc_biguint<5>(wd2_cast_cast_fu_79_p1.read()));
}

void scalel::thread_tmp_28_fu_112_p3() {
    tmp_28_fu_112_p3 = esl_concat<12,3>(wd3_fu_106_p2.read(), ap_const_lv3_0);
}

void scalel::thread_tmp_37_cast_cast_fu_92_p1() {
    tmp_37_cast_cast_fu_92_p1 = esl_zext<5,4>(tmp_26_fu_86_p2.read());
}

void scalel::thread_tmp_38_cast_fu_102_p1() {
    tmp_38_cast_fu_102_p1 = esl_sext<12,5>(tmp_27_fu_96_p2.read());
}

void scalel::thread_tmp_s_fu_74_p1() {
    tmp_s_fu_74_p1 = esl_zext<64,5>(wd1_fu_54_p4.read());
}

void scalel::thread_wd1_fu_54_p4() {
    wd1_fu_54_p4 = nbl.read().range(10, 6);
}

void scalel::thread_wd2_cast_cast_fu_79_p1() {
    wd2_cast_cast_fu_79_p1 = esl_zext<5,4>(tmp_reg_120.read());
}

void scalel::thread_wd3_fu_106_p2() {
    wd3_fu_106_p2 = (!tmp_38_cast_fu_102_p1.read().is_01())? sc_lv<12>(): ilb_table_q0.read() >> (unsigned short)tmp_38_cast_fu_102_p1.read().to_uint();
}

void scalel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

