// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _adpcm_main_HH_
#define _adpcm_main_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_proc.h"

namespace ap_rtl {

struct adpcm_main : public sc_module {
    // Port declarations 29
    sc_out< sc_lv<32> > test_data_Addr_A;
    sc_out< sc_logic > test_data_EN_A;
    sc_out< sc_lv<32> > test_data_Din_A;
    sc_in< sc_lv<32> > test_data_Dout_A;
    sc_out< sc_lv<4> > test_data_WEN_A;
    sc_out< sc_logic > test_data_Clk_A;
    sc_in_clk ap_clk;
    sc_out< sc_logic > test_data_Rst_A;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<32> > compressed_Addr_A;
    sc_out< sc_logic > compressed_EN_A;
    sc_out< sc_lv<32> > compressed_Din_A;
    sc_in< sc_lv<32> > compressed_Dout_A;
    sc_out< sc_lv<4> > compressed_WEN_A;
    sc_out< sc_logic > compressed_Clk_A;
    sc_out< sc_logic > compressed_Rst_A;
    sc_out< sc_lv<32> > dec_result_Addr_A;
    sc_out< sc_logic > dec_result_EN_A;
    sc_out< sc_lv<32> > dec_result_Din_A;
    sc_in< sc_lv<32> > dec_result_Dout_A;
    sc_out< sc_lv<4> > dec_result_WEN_A;
    sc_out< sc_logic > dec_result_Clk_A;
    sc_out< sc_logic > dec_result_Rst_A;
    sc_in< sc_lv<32> > select_r;
    sc_in< sc_lv<32> > size;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    adpcm_main(sc_module_name name);
    SC_HAS_PROCESS(adpcm_main);

    ~adpcm_main();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Block_proc* Block_proc_U0;
    sc_signal< sc_logic > Block_proc_U0_ap_start;
    sc_signal< sc_logic > Block_proc_U0_ap_done;
    sc_signal< sc_logic > Block_proc_U0_ap_continue;
    sc_signal< sc_logic > Block_proc_U0_ap_idle;
    sc_signal< sc_logic > Block_proc_U0_ap_ready;
    sc_signal< sc_lv<32> > Block_proc_U0_dec_result_Addr_A;
    sc_signal< sc_logic > Block_proc_U0_dec_result_EN_A;
    sc_signal< sc_lv<4> > Block_proc_U0_dec_result_WEN_A;
    sc_signal< sc_lv<32> > Block_proc_U0_dec_result_Din_A;
    sc_signal< sc_lv<32> > Block_proc_U0_test_data_Addr_A;
    sc_signal< sc_logic > Block_proc_U0_test_data_EN_A;
    sc_signal< sc_lv<4> > Block_proc_U0_test_data_WEN_A;
    sc_signal< sc_lv<32> > Block_proc_U0_test_data_Din_A;
    sc_signal< sc_lv<32> > Block_proc_U0_compressed_Addr_A;
    sc_signal< sc_logic > Block_proc_U0_compressed_EN_A;
    sc_signal< sc_lv<4> > Block_proc_U0_compressed_WEN_A;
    sc_signal< sc_lv<32> > Block_proc_U0_compressed_Din_A;
    sc_signal< sc_logic > ap_hs_continue;
    sc_signal< sc_logic > ap_hs_done;
    sc_signal< sc_logic > ap_hs_ready;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_0;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Block_proc_U0_ap_continue();
    void thread_Block_proc_U0_ap_start();
    void thread_ap_done();
    void thread_ap_hs_continue();
    void thread_ap_hs_done();
    void thread_ap_hs_ready();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_compressed_Addr_A();
    void thread_compressed_Clk_A();
    void thread_compressed_Din_A();
    void thread_compressed_EN_A();
    void thread_compressed_Rst_A();
    void thread_compressed_WEN_A();
    void thread_dec_result_Addr_A();
    void thread_dec_result_Clk_A();
    void thread_dec_result_Din_A();
    void thread_dec_result_EN_A();
    void thread_dec_result_Rst_A();
    void thread_dec_result_WEN_A();
    void thread_test_data_Addr_A();
    void thread_test_data_Clk_A();
    void thread_test_data_Din_A();
    void thread_test_data_EN_A();
    void thread_test_data_Rst_A();
    void thread_test_data_WEN_A();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
