// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "filtez.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic filtez::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic filtez::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> filtez::ap_ST_fsm_state1 = "1";
const sc_lv<10> filtez::ap_ST_fsm_state2 = "10";
const sc_lv<10> filtez::ap_ST_fsm_state3 = "100";
const sc_lv<10> filtez::ap_ST_fsm_state4 = "1000";
const sc_lv<10> filtez::ap_ST_fsm_state5 = "10000";
const sc_lv<10> filtez::ap_ST_fsm_state6 = "100000";
const sc_lv<10> filtez::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> filtez::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> filtez::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<10> filtez::ap_ST_fsm_state18 = "1000000000";
const bool filtez::ap_const_boolean_1 = true;
const sc_lv<32> filtez::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> filtez::ap_const_lv1_1 = "1";
const sc_lv<32> filtez::ap_const_lv32_1 = "1";
const sc_lv<32> filtez::ap_const_lv32_8 = "1000";
const sc_lv<1> filtez::ap_const_lv1_0 = "0";
const sc_lv<32> filtez::ap_const_lv32_2 = "10";
const sc_lv<32> filtez::ap_const_lv32_7 = "111";
const sc_lv<3> filtez::ap_const_lv3_0 = "000";
const sc_lv<64> filtez::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<3> filtez::ap_const_lv3_5 = "101";
const sc_lv<3> filtez::ap_const_lv3_1 = "1";
const sc_lv<32> filtez::ap_const_lv32_E = "1110";
const sc_lv<32> filtez::ap_const_lv32_2D = "101101";
const sc_lv<32> filtez::ap_const_lv32_9 = "1001";

filtez::filtez(sc_module_name name) : sc_module(name), mVcdFile(0) {
    adpcm_main_mul_32bkb_U1 = new adpcm_main_mul_32bkb<1,6,32,32,64>("adpcm_main_mul_32bkb_U1");
    adpcm_main_mul_32bkb_U1->clk(ap_clk);
    adpcm_main_mul_32bkb_U1->reset(ap_rst);
    adpcm_main_mul_32bkb_U1->din0(reg_105);
    adpcm_main_mul_32bkb_U1->din1(reg_101);
    adpcm_main_mul_32bkb_U1->ce(ap_var_for_const0);
    adpcm_main_mul_32bkb_U1->dout(grp_fu_117_p2);
    adpcm_main_mul_32bkb_U2 = new adpcm_main_mul_32bkb<1,6,32,32,64>("adpcm_main_mul_32bkb_U2");
    adpcm_main_mul_32bkb_U2->clk(ap_clk);
    adpcm_main_mul_32bkb_U2->reset(ap_rst);
    adpcm_main_mul_32bkb_U2->din0(reg_105);
    adpcm_main_mul_32bkb_U2->din1(reg_101);
    adpcm_main_mul_32bkb_U2->ce(ap_var_for_const0);
    adpcm_main_mul_32bkb_U2->dout(grp_fu_149_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_ap_return);
    sensitive << ( zl1_reg_80 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_bpl_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( p_01_rec_cast_fu_135_p1 );

    SC_METHOD(thread_bpl_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_dlt_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( p_01_rec_cast_fu_135_p1 );

    SC_METHOD(thread_dlt_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_dlt_pn_rec_phi_fu_94_p4);
    sensitive << ( dlt_pn_rec_reg_90 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_195 );
    sensitive << ( p_01_rec_reg_199 );

    SC_METHOD(thread_exitcond_fu_123_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( dlt_pn_rec_phi_fu_94_p4 );

    SC_METHOD(thread_p_01_rec_cast_fu_135_p1);
    sensitive << ( p_01_rec_fu_129_p2 );

    SC_METHOD(thread_p_01_rec_fu_129_p2);
    sensitive << ( dlt_pn_rec_phi_fu_94_p4 );

    SC_METHOD(thread_zl_1_fu_155_p2);
    sensitive << ( zl1_reg_80 );
    sensitive << ( tmp_44_reg_224 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_fu_123_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "filtez_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, bpl_address0, "(port)bpl_address0");
    sc_trace(mVcdFile, bpl_ce0, "(port)bpl_ce0");
    sc_trace(mVcdFile, bpl_q0, "(port)bpl_q0");
    sc_trace(mVcdFile, dlt_address0, "(port)dlt_address0");
    sc_trace(mVcdFile, dlt_ce0, "(port)dlt_ce0");
    sc_trace(mVcdFile, dlt_q0, "(port)dlt_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zl1_reg_80, "zl1_reg_80");
    sc_trace(mVcdFile, dlt_pn_rec_reg_90, "dlt_pn_rec_reg_90");
    sc_trace(mVcdFile, reg_101, "reg_101");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_reg_195, "exitcond_reg_195");
    sc_trace(mVcdFile, reg_105, "reg_105");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_117_p2, "grp_fu_117_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, exitcond_fu_123_p2, "exitcond_fu_123_p2");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond_reg_195, "ap_pipeline_reg_pp0_iter1_exitcond_reg_195");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_exitcond_reg_195, "ap_pipeline_reg_pp0_iter2_exitcond_reg_195");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_exitcond_reg_195, "ap_pipeline_reg_pp0_iter3_exitcond_reg_195");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_exitcond_reg_195, "ap_pipeline_reg_pp0_iter4_exitcond_reg_195");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter5_exitcond_reg_195, "ap_pipeline_reg_pp0_iter5_exitcond_reg_195");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter6_exitcond_reg_195, "ap_pipeline_reg_pp0_iter6_exitcond_reg_195");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter7_exitcond_reg_195, "ap_pipeline_reg_pp0_iter7_exitcond_reg_195");
    sc_trace(mVcdFile, p_01_rec_fu_129_p2, "p_01_rec_fu_129_p2");
    sc_trace(mVcdFile, p_01_rec_reg_199, "p_01_rec_reg_199");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, grp_fu_149_p2, "grp_fu_149_p2");
    sc_trace(mVcdFile, tmp_44_reg_224, "tmp_44_reg_224");
    sc_trace(mVcdFile, zl_1_fu_155_p2, "zl_1_fu_155_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, dlt_pn_rec_phi_fu_94_p4, "dlt_pn_rec_phi_fu_94_p4");
    sc_trace(mVcdFile, p_01_rec_cast_fu_135_p1, "p_01_rec_cast_fu_135_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

filtez::~filtez() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete adpcm_main_mul_32bkb_U1;
    delete adpcm_main_mul_32bkb_U2;
}

void filtez::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void filtez::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_123_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_123_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_123_p2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
            ap_enable_reg_pp0_iter8 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_195.read(), ap_const_lv1_0))) {
        dlt_pn_rec_reg_90 = p_01_rec_reg_199.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        dlt_pn_rec_reg_90 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter7_exitcond_reg_195.read()))) {
        zl1_reg_80 = zl_1_fu_155_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        zl1_reg_80 = grp_fu_117_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        ap_pipeline_reg_pp0_iter1_exitcond_reg_195 = exitcond_reg_195.read();
        exitcond_reg_195 = exitcond_fu_123_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_pipeline_reg_pp0_iter2_exitcond_reg_195 = ap_pipeline_reg_pp0_iter1_exitcond_reg_195.read();
        ap_pipeline_reg_pp0_iter3_exitcond_reg_195 = ap_pipeline_reg_pp0_iter2_exitcond_reg_195.read();
        ap_pipeline_reg_pp0_iter4_exitcond_reg_195 = ap_pipeline_reg_pp0_iter3_exitcond_reg_195.read();
        ap_pipeline_reg_pp0_iter5_exitcond_reg_195 = ap_pipeline_reg_pp0_iter4_exitcond_reg_195.read();
        ap_pipeline_reg_pp0_iter6_exitcond_reg_195 = ap_pipeline_reg_pp0_iter5_exitcond_reg_195.read();
        ap_pipeline_reg_pp0_iter7_exitcond_reg_195 = ap_pipeline_reg_pp0_iter6_exitcond_reg_195.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        p_01_rec_reg_199 = p_01_rec_fu_129_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(exitcond_reg_195.read(), ap_const_lv1_0)))) {
        reg_101 = bpl_q0.read();
        reg_105 = dlt_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter6_exitcond_reg_195.read())) {
        tmp_44_reg_224 = grp_fu_149_p2.read();
    }
}

void filtez::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(8, 8);
}

void filtez::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void filtez::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read().range(9, 9);
}

void filtez::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void filtez::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void filtez::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void filtez::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void filtez::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void filtez::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void filtez::thread_ap_return() {
    ap_return = zl1_reg_80.read().range(45, 14);
}

void filtez::thread_bpl_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        bpl_address0 =  (sc_lv<3>) (p_01_rec_cast_fu_135_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        bpl_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        bpl_address0 = "XXX";
    }
}

void filtez::thread_bpl_ce0() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        bpl_ce0 = ap_const_logic_1;
    } else {
        bpl_ce0 = ap_const_logic_0;
    }
}

void filtez::thread_dlt_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        dlt_address0 =  (sc_lv<3>) (p_01_rec_cast_fu_135_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        dlt_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dlt_address0 = "XXX";
    }
}

void filtez::thread_dlt_ce0() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        dlt_ce0 = ap_const_logic_1;
    } else {
        dlt_ce0 = ap_const_logic_0;
    }
}

void filtez::thread_dlt_pn_rec_phi_fu_94_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_195.read(), ap_const_lv1_0))) {
        dlt_pn_rec_phi_fu_94_p4 = p_01_rec_reg_199.read();
    } else {
        dlt_pn_rec_phi_fu_94_p4 = dlt_pn_rec_reg_90.read();
    }
}

void filtez::thread_exitcond_fu_123_p2() {
    exitcond_fu_123_p2 = (!dlt_pn_rec_phi_fu_94_p4.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(dlt_pn_rec_phi_fu_94_p4.read() == ap_const_lv3_5);
}

void filtez::thread_p_01_rec_cast_fu_135_p1() {
    p_01_rec_cast_fu_135_p1 = esl_zext<64,3>(p_01_rec_fu_129_p2.read());
}

void filtez::thread_p_01_rec_fu_129_p2() {
    p_01_rec_fu_129_p2 = (!dlt_pn_rec_phi_fu_94_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(dlt_pn_rec_phi_fu_94_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void filtez::thread_zl_1_fu_155_p2() {
    zl_1_fu_155_p2 = (!tmp_44_reg_224.read().is_01() || !zl1_reg_80.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_44_reg_224.read()) + sc_biguint<64>(zl1_reg_80.read()));
}

void filtez::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_123_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_123_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

