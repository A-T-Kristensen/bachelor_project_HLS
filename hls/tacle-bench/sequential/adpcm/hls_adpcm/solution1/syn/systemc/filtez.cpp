// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "filtez.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic filtez::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic filtez::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> filtez::ap_ST_fsm_state1 = "1";
const sc_lv<3> filtez::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> filtez::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<32> filtez::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> filtez::ap_const_lv1_1 = "1";
const sc_lv<1> filtez::ap_const_lv1_0 = "0";
const sc_lv<32> filtez::ap_const_lv32_2 = "10";
const sc_lv<32> filtez::ap_const_lv32_1 = "1";
const sc_lv<3> filtez::ap_const_lv3_0 = "000";
const sc_lv<64> filtez::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<3> filtez::ap_const_lv3_1 = "1";
const sc_lv<3> filtez::ap_const_lv3_4 = "100";
const sc_lv<32> filtez::ap_const_lv32_E = "1110";
const sc_lv<32> filtez::ap_const_lv32_2D = "101101";

filtez::filtez(sc_module_name name) : sc_module(name), mVcdFile(0) {
    adpcm_main_mul_32bkb_U1 = new adpcm_main_mul_32bkb<1,6,32,32,64>("adpcm_main_mul_32bkb_U1");
    adpcm_main_mul_32bkb_U1->clk(ap_clk);
    adpcm_main_mul_32bkb_U1->reset(ap_rst);
    adpcm_main_mul_32bkb_U1->din0(grp_fu_171_p0);
    adpcm_main_mul_32bkb_U1->din1(grp_fu_171_p1);
    adpcm_main_mul_32bkb_U1->ce(ap_var_for_const0);
    adpcm_main_mul_32bkb_U1->dout(grp_fu_171_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_preg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_precharge_reg_pp0_iter3_zl1_reg_138);

    SC_METHOD(thread_ap_pipeline_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond1_reg_233 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_bpl_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( p_01_rec_cast_fu_191_p1 );

    SC_METHOD(thread_bpl_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );

    SC_METHOD(thread_dlt_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( p_01_rec_cast_fu_191_p1 );

    SC_METHOD(thread_dlt_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );

    SC_METHOD(thread_dlt_pn_rec3_phi_fu_113_p6);
    sensitive << ( exitcond1_reg_233 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( dlt_pn_rec3_reg_109 );
    sensitive << ( p_01_rec_reg_159 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_exitcond1_fu_185_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( dlt_pn_rec3_phi_fu_113_p6 );

    SC_METHOD(thread_grp_fu_148_p0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( dlt_pn_rec3_phi_fu_113_p6 );
    sensitive << ( tmp_40_fu_205_p1 );

    SC_METHOD(thread_grp_fu_148_p1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_phi_precharge_reg_pp0_iter4_zl1_reg_138 );

    SC_METHOD(thread_grp_fu_148_p2);
    sensitive << ( grp_fu_148_p0 );
    sensitive << ( grp_fu_148_p1 );

    SC_METHOD(thread_grp_fu_171_p0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_s_fu_201_p1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( dlt_load_1_reg_272 );

    SC_METHOD(thread_grp_fu_171_p1);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_fu_197_p1 );
    sensitive << ( bpl_load_1_reg_267 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_p_01_rec_cast_fu_191_p1);
    sensitive << ( p_01_rec_reg_159 );

    SC_METHOD(thread_tmp_40_fu_205_p1);
    sensitive << ( temp_reg_282 );

    SC_METHOD(thread_tmp_fu_197_p1);
    sensitive << ( bpl_load_reg_237 );

    SC_METHOD(thread_tmp_s_fu_201_p1);
    sensitive << ( dlt_load_reg_242 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_pipeline_idle_pp0 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_preg = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "filtez_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, bpl_address0, "(port)bpl_address0");
    sc_trace(mVcdFile, bpl_ce0, "(port)bpl_ce0");
    sc_trace(mVcdFile, bpl_q0, "(port)bpl_q0");
    sc_trace(mVcdFile, dlt_address0, "(port)dlt_address0");
    sc_trace(mVcdFile, dlt_ce0, "(port)dlt_ce0");
    sc_trace(mVcdFile, dlt_q0, "(port)dlt_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, exitcond1_reg_233, "exitcond1_reg_233");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, do_init_reg_92, "do_init_reg_92");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_do_init_reg_92, "ap_pipeline_reg_pp0_iter1_do_init_reg_92");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_do_init_reg_92, "ap_pipeline_reg_pp0_iter2_do_init_reg_92");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_do_init_reg_92, "ap_pipeline_reg_pp0_iter3_do_init_reg_92");
    sc_trace(mVcdFile, dlt_pn_rec3_reg_109, "dlt_pn_rec3_reg_109");
    sc_trace(mVcdFile, zl12_rewind_reg_123, "zl12_rewind_reg_123");
    sc_trace(mVcdFile, grp_fu_148_p2, "grp_fu_148_p2");
    sc_trace(mVcdFile, p_01_rec_reg_159, "p_01_rec_reg_159");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, exitcond1_fu_185_p2, "exitcond1_fu_185_p2");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond1_reg_233, "ap_pipeline_reg_pp0_iter1_exitcond1_reg_233");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_exitcond1_reg_233, "ap_pipeline_reg_pp0_iter2_exitcond1_reg_233");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_exitcond1_reg_233, "ap_pipeline_reg_pp0_iter3_exitcond1_reg_233");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_exitcond1_reg_233, "ap_pipeline_reg_pp0_iter4_exitcond1_reg_233");
    sc_trace(mVcdFile, bpl_load_reg_237, "bpl_load_reg_237");
    sc_trace(mVcdFile, dlt_load_reg_242, "dlt_load_reg_242");
    sc_trace(mVcdFile, tmp_fu_197_p1, "tmp_fu_197_p1");
    sc_trace(mVcdFile, tmp_s_fu_201_p1, "tmp_s_fu_201_p1");
    sc_trace(mVcdFile, bpl_load_1_reg_267, "bpl_load_1_reg_267");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, dlt_load_1_reg_272, "dlt_load_1_reg_272");
    sc_trace(mVcdFile, grp_fu_171_p2, "grp_fu_171_p2");
    sc_trace(mVcdFile, zl_reg_277, "zl_reg_277");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, temp_reg_282, "temp_reg_282");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_preg, "ap_enable_reg_pp0_iter0_preg");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, dlt_pn_rec3_phi_fu_113_p6, "dlt_pn_rec3_phi_fu_113_p6");
    sc_trace(mVcdFile, ap_phi_precharge_reg_pp0_iter3_zl1_reg_138, "ap_phi_precharge_reg_pp0_iter3_zl1_reg_138");
    sc_trace(mVcdFile, ap_phi_precharge_reg_pp0_iter4_zl1_reg_138, "ap_phi_precharge_reg_pp0_iter4_zl1_reg_138");
    sc_trace(mVcdFile, p_01_rec_cast_fu_191_p1, "p_01_rec_cast_fu_191_p1");
    sc_trace(mVcdFile, grp_fu_148_p0, "grp_fu_148_p0");
    sc_trace(mVcdFile, tmp_40_fu_205_p1, "tmp_40_fu_205_p1");
    sc_trace(mVcdFile, grp_fu_148_p1, "grp_fu_148_p1");
    sc_trace(mVcdFile, grp_fu_171_p0, "grp_fu_171_p0");
    sc_trace(mVcdFile, grp_fu_171_p1, "grp_fu_171_p1");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_pipeline_idle_pp0, "ap_pipeline_idle_pp0");
#endif

    }
}

filtez::~filtez() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete adpcm_main_mul_32bkb_U1;
}

void filtez::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void filtez::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_preg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_preg = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter4 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter3_do_init_reg_92.read()))) {
        ap_phi_precharge_reg_pp0_iter4_zl1_reg_138 = zl12_rewind_reg_123.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter3_do_init_reg_92.read()))) {
        ap_phi_precharge_reg_pp0_iter4_zl1_reg_138 = zl_reg_277.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        ap_phi_precharge_reg_pp0_iter4_zl1_reg_138 = ap_phi_precharge_reg_pp0_iter3_zl1_reg_138.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter4_exitcond1_reg_233.read()))) {
            ap_return_preg = grp_fu_148_p2.read().range(45, 14);
        }
    }
    if ((esl_seteq<1,1,1>(exitcond1_reg_233.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        dlt_pn_rec3_reg_109 = p_01_rec_reg_159.read();
    } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                (!esl_seteq<1,1,1>(exitcond1_reg_233.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        dlt_pn_rec3_reg_109 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_reg_233.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        do_init_reg_92 = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                (!esl_seteq<1,1,1>(exitcond1_reg_233.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        do_init_reg_92 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        ap_pipeline_reg_pp0_iter1_do_init_reg_92 = do_init_reg_92.read();
        ap_pipeline_reg_pp0_iter1_exitcond1_reg_233 = exitcond1_reg_233.read();
        ap_pipeline_reg_pp0_iter2_do_init_reg_92 = ap_pipeline_reg_pp0_iter1_do_init_reg_92.read();
        ap_pipeline_reg_pp0_iter2_exitcond1_reg_233 = ap_pipeline_reg_pp0_iter1_exitcond1_reg_233.read();
        ap_pipeline_reg_pp0_iter3_do_init_reg_92 = ap_pipeline_reg_pp0_iter2_do_init_reg_92.read();
        ap_pipeline_reg_pp0_iter3_exitcond1_reg_233 = ap_pipeline_reg_pp0_iter2_exitcond1_reg_233.read();
        ap_pipeline_reg_pp0_iter4_exitcond1_reg_233 = ap_pipeline_reg_pp0_iter3_exitcond1_reg_233.read();
        exitcond1_reg_233 = exitcond1_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter4_exitcond1_reg_233.read()))) {
        ap_return = grp_fu_148_p2.read().range(45, 14);
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        bpl_load_1_reg_267 = bpl_q0.read();
        dlt_load_1_reg_272 = dlt_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, do_init_reg_92.read()))) {
        bpl_load_reg_237 = bpl_q0.read();
        dlt_load_reg_242 = dlt_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        p_01_rec_reg_159 =  (sc_lv<3>) (grp_fu_148_p2.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()))) {
        temp_reg_282 =  (sc_lv<32>) (grp_fu_171_p2.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter4_exitcond1_reg_233.read()))) {
        zl12_rewind_reg_123 = grp_fu_148_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter3_do_init_reg_92.read()))) {
        zl_reg_277 = grp_fu_171_p2.read();
    }
}

void filtez::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(1, 1);
}

void filtez::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read().range(2, 2);
}

void filtez::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void filtez::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void filtez::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = ap_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_preg.read();
    }
}

void filtez::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void filtez::thread_ap_phi_precharge_reg_pp0_iter3_zl1_reg_138() {
    ap_phi_precharge_reg_pp0_iter3_zl1_reg_138 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
}

void filtez::thread_ap_pipeline_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_pipeline_idle_pp0 = ap_const_logic_1;
    } else {
        ap_pipeline_idle_pp0 = ap_const_logic_0;
    }
}

void filtez::thread_ap_ready() {
    if ((!esl_seteq<1,1,1>(exitcond1_reg_233.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void filtez::thread_bpl_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            bpl_address0 =  (sc_lv<3>) (p_01_rec_cast_fu_191_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            bpl_address0 =  (sc_lv<3>) (ap_const_lv64_0);
        } else {
            bpl_address0 = "XXX";
        }
    } else {
        bpl_address0 = "XXX";
    }
}

void filtez::thread_bpl_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())))) {
        bpl_ce0 = ap_const_logic_1;
    } else {
        bpl_ce0 = ap_const_logic_0;
    }
}

void filtez::thread_dlt_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            dlt_address0 =  (sc_lv<3>) (p_01_rec_cast_fu_191_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            dlt_address0 =  (sc_lv<3>) (ap_const_lv64_0);
        } else {
            dlt_address0 = "XXX";
        }
    } else {
        dlt_address0 = "XXX";
    }
}

void filtez::thread_dlt_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())))) {
        dlt_ce0 = ap_const_logic_1;
    } else {
        dlt_ce0 = ap_const_logic_0;
    }
}

void filtez::thread_dlt_pn_rec3_phi_fu_113_p6() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        if (!esl_seteq<1,1,1>(exitcond1_reg_233.read(), ap_const_lv1_0)) {
            dlt_pn_rec3_phi_fu_113_p6 = ap_const_lv3_0;
        } else if (esl_seteq<1,1,1>(exitcond1_reg_233.read(), ap_const_lv1_0)) {
            dlt_pn_rec3_phi_fu_113_p6 = p_01_rec_reg_159.read();
        } else {
            dlt_pn_rec3_phi_fu_113_p6 = dlt_pn_rec3_reg_109.read();
        }
    } else {
        dlt_pn_rec3_phi_fu_113_p6 = dlt_pn_rec3_reg_109.read();
    }
}

void filtez::thread_exitcond1_fu_185_p2() {
    exitcond1_fu_185_p2 = (!dlt_pn_rec3_phi_fu_113_p6.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(dlt_pn_rec3_phi_fu_113_p6.read() == ap_const_lv3_4);
}

void filtez::thread_grp_fu_148_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()))) {
        grp_fu_148_p0 = tmp_40_fu_205_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        grp_fu_148_p0 =  (sc_lv<64>) (dlt_pn_rec3_phi_fu_113_p6.read());
    } else {
        grp_fu_148_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void filtez::thread_grp_fu_148_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()))) {
        grp_fu_148_p1 = ap_phi_precharge_reg_pp0_iter4_zl1_reg_138.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        grp_fu_148_p1 =  (sc_lv<64>) (ap_const_lv3_1);
    } else {
        grp_fu_148_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void filtez::thread_grp_fu_148_p2() {
    grp_fu_148_p2 = (!grp_fu_148_p0.read().is_01() || !grp_fu_148_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(grp_fu_148_p0.read()) + sc_biguint<64>(grp_fu_148_p1.read()));
}

void filtez::thread_grp_fu_171_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            grp_fu_171_p0 = dlt_load_1_reg_272.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            grp_fu_171_p0 =  (sc_lv<32>) (tmp_s_fu_201_p1.read());
        } else {
            grp_fu_171_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_fu_171_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void filtez::thread_grp_fu_171_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read())) {
            grp_fu_171_p1 = bpl_load_1_reg_267.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
            grp_fu_171_p1 =  (sc_lv<32>) (tmp_fu_197_p1.read());
        } else {
            grp_fu_171_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        grp_fu_171_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void filtez::thread_p_01_rec_cast_fu_191_p1() {
    p_01_rec_cast_fu_191_p1 = esl_zext<64,3>(p_01_rec_reg_159.read());
}

void filtez::thread_tmp_40_fu_205_p1() {
    tmp_40_fu_205_p1 = esl_sext<64,32>(temp_reg_282.read());
}

void filtez::thread_tmp_fu_197_p1() {
    tmp_fu_197_p1 = esl_sext<64,32>(bpl_load_reg_237.read());
}

void filtez::thread_tmp_s_fu_201_p1() {
    tmp_s_fu_201_p1 = esl_sext<64,32>(dlt_load_reg_242.read());
}

void filtez::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_1, ap_pipeline_idle_pp0.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

