// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "reset.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic reset::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic reset::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> reset::ap_ST_fsm_state1 = "1";
const sc_lv<5> reset::ap_ST_fsm_state2 = "10";
const sc_lv<5> reset::ap_ST_fsm_state3 = "100";
const sc_lv<5> reset::ap_ST_fsm_state4 = "1000";
const sc_lv<5> reset::ap_ST_fsm_state5 = "10000";
const sc_lv<32> reset::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> reset::ap_const_lv1_1 = "1";
const sc_lv<32> reset::ap_const_lv32_1 = "1";
const sc_lv<32> reset::ap_const_lv32_2 = "10";
const sc_lv<32> reset::ap_const_lv32_3 = "11";
const sc_lv<32> reset::ap_const_lv32_4 = "100";
const sc_lv<3> reset::ap_const_lv3_0 = "000";
const sc_lv<1> reset::ap_const_lv1_0 = "0";
const sc_lv<5> reset::ap_const_lv5_0 = "00000";
const sc_lv<4> reset::ap_const_lv4_0 = "0000";
const sc_lv<32> reset::ap_const_lv32_20 = "100000";
const sc_lv<32> reset::ap_const_lv32_8 = "1000";
const sc_lv<3> reset::ap_const_lv3_6 = "110";
const sc_lv<3> reset::ap_const_lv3_1 = "1";
const sc_lv<5> reset::ap_const_lv5_18 = "11000";
const sc_lv<5> reset::ap_const_lv5_1 = "1";
const sc_lv<4> reset::ap_const_lv4_B = "1011";
const sc_lv<4> reset::ap_const_lv4_1 = "1";

reset::reset(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_accumc_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_31_fu_568_p1 );

    SC_METHOD(thread_accumc_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_accumc_d0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_accumc_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_556_p2 );

    SC_METHOD(thread_accumd_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_31_fu_568_p1 );

    SC_METHOD(thread_accumd_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_accumd_d0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_accumd_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_556_p2 );

    SC_METHOD(thread_ah1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ah1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ah2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ah2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_al1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_al1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_al2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_al2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_556_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_556_p2 );

    SC_METHOD(thread_dec_ah1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_ah1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_ah2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_ah2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_al1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_al1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_al2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_al2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_del_bph_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_531_p1 );

    SC_METHOD(thread_dec_del_bph_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dec_del_bph_d0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dec_del_bph_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_519_p2 );

    SC_METHOD(thread_dec_del_bpl_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_531_p1 );

    SC_METHOD(thread_dec_del_bpl_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dec_del_bpl_d0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dec_del_bpl_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_519_p2 );

    SC_METHOD(thread_dec_del_dhx_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_511_p1 );

    SC_METHOD(thread_dec_del_dhx_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dec_del_dhx_d0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dec_del_dhx_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_499_p2 );

    SC_METHOD(thread_dec_del_dltx_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_511_p1 );

    SC_METHOD(thread_dec_del_dltx_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dec_del_dltx_d0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dec_del_dltx_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_499_p2 );

    SC_METHOD(thread_dec_deth);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_deth_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_detl);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_detl_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_nbh);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_nbh_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_nbl);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_nbl_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_ph1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_ph1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_ph2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_ph2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_plt1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_plt1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_plt2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_plt2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_rh1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_rh1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_rh2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_rh2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_rlt1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_rlt1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_rlt2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dec_rlt2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_delay_bph_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_531_p1 );

    SC_METHOD(thread_delay_bph_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_delay_bph_d0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_delay_bph_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_519_p2 );

    SC_METHOD(thread_delay_bpl_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_s_fu_531_p1 );

    SC_METHOD(thread_delay_bpl_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_delay_bpl_d0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_delay_bpl_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_519_p2 );

    SC_METHOD(thread_delay_dhx_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_511_p1 );

    SC_METHOD(thread_delay_dhx_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_delay_dhx_d0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_delay_dhx_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_499_p2 );

    SC_METHOD(thread_delay_dltx_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_511_p1 );

    SC_METHOD(thread_delay_dltx_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_delay_dltx_d0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_delay_dltx_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_499_p2 );

    SC_METHOD(thread_deth);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_deth_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_detl);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_detl_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_exitcond1_fu_539_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_2_reg_285 );

    SC_METHOD(thread_exitcond2_fu_519_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_1_reg_274 );

    SC_METHOD(thread_exitcond3_fu_499_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_263 );

    SC_METHOD(thread_exitcond_fu_556_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_3_reg_296 );

    SC_METHOD(thread_i_4_fu_505_p2);
    sensitive << ( i_reg_263 );

    SC_METHOD(thread_i_5_fu_525_p2);
    sensitive << ( i_1_reg_274 );

    SC_METHOD(thread_i_6_fu_545_p2);
    sensitive << ( i_2_reg_285 );

    SC_METHOD(thread_i_7_fu_562_p2);
    sensitive << ( i_3_reg_296 );

    SC_METHOD(thread_nbh);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_nbh_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_nbl);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_nbl_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ph1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ph1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ph2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ph2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_plt1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_plt1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_plt2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_plt2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rh1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rh1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rh2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rh2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rlt1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rlt1_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rlt2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rlt2_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_30_fu_551_p1);
    sensitive << ( i_2_reg_285 );

    SC_METHOD(thread_tmp_31_fu_568_p1);
    sensitive << ( i_3_reg_296 );

    SC_METHOD(thread_tmp_fu_511_p1);
    sensitive << ( i_reg_263 );

    SC_METHOD(thread_tmp_s_fu_531_p1);
    sensitive << ( i_1_reg_274 );

    SC_METHOD(thread_tqmf_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_30_fu_551_p1 );

    SC_METHOD(thread_tqmf_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tqmf_d0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tqmf_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_539_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond3_fu_499_p2 );
    sensitive << ( exitcond2_fu_519_p2 );
    sensitive << ( exitcond1_fu_539_p2 );
    sensitive << ( exitcond_fu_556_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "reset_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dec_detl, "(port)dec_detl");
    sc_trace(mVcdFile, dec_detl_ap_vld, "(port)dec_detl_ap_vld");
    sc_trace(mVcdFile, detl, "(port)detl");
    sc_trace(mVcdFile, detl_ap_vld, "(port)detl_ap_vld");
    sc_trace(mVcdFile, dec_deth, "(port)dec_deth");
    sc_trace(mVcdFile, dec_deth_ap_vld, "(port)dec_deth_ap_vld");
    sc_trace(mVcdFile, deth, "(port)deth");
    sc_trace(mVcdFile, deth_ap_vld, "(port)deth_ap_vld");
    sc_trace(mVcdFile, rlt2, "(port)rlt2");
    sc_trace(mVcdFile, rlt2_ap_vld, "(port)rlt2_ap_vld");
    sc_trace(mVcdFile, rlt1, "(port)rlt1");
    sc_trace(mVcdFile, rlt1_ap_vld, "(port)rlt1_ap_vld");
    sc_trace(mVcdFile, plt2, "(port)plt2");
    sc_trace(mVcdFile, plt2_ap_vld, "(port)plt2_ap_vld");
    sc_trace(mVcdFile, plt1, "(port)plt1");
    sc_trace(mVcdFile, plt1_ap_vld, "(port)plt1_ap_vld");
    sc_trace(mVcdFile, al2, "(port)al2");
    sc_trace(mVcdFile, al2_ap_vld, "(port)al2_ap_vld");
    sc_trace(mVcdFile, al1, "(port)al1");
    sc_trace(mVcdFile, al1_ap_vld, "(port)al1_ap_vld");
    sc_trace(mVcdFile, nbl, "(port)nbl");
    sc_trace(mVcdFile, nbl_ap_vld, "(port)nbl_ap_vld");
    sc_trace(mVcdFile, rh2, "(port)rh2");
    sc_trace(mVcdFile, rh2_ap_vld, "(port)rh2_ap_vld");
    sc_trace(mVcdFile, rh1, "(port)rh1");
    sc_trace(mVcdFile, rh1_ap_vld, "(port)rh1_ap_vld");
    sc_trace(mVcdFile, ph2, "(port)ph2");
    sc_trace(mVcdFile, ph2_ap_vld, "(port)ph2_ap_vld");
    sc_trace(mVcdFile, ph1, "(port)ph1");
    sc_trace(mVcdFile, ph1_ap_vld, "(port)ph1_ap_vld");
    sc_trace(mVcdFile, ah2, "(port)ah2");
    sc_trace(mVcdFile, ah2_ap_vld, "(port)ah2_ap_vld");
    sc_trace(mVcdFile, ah1, "(port)ah1");
    sc_trace(mVcdFile, ah1_ap_vld, "(port)ah1_ap_vld");
    sc_trace(mVcdFile, nbh, "(port)nbh");
    sc_trace(mVcdFile, nbh_ap_vld, "(port)nbh_ap_vld");
    sc_trace(mVcdFile, dec_rlt2, "(port)dec_rlt2");
    sc_trace(mVcdFile, dec_rlt2_ap_vld, "(port)dec_rlt2_ap_vld");
    sc_trace(mVcdFile, dec_rlt1, "(port)dec_rlt1");
    sc_trace(mVcdFile, dec_rlt1_ap_vld, "(port)dec_rlt1_ap_vld");
    sc_trace(mVcdFile, dec_plt2, "(port)dec_plt2");
    sc_trace(mVcdFile, dec_plt2_ap_vld, "(port)dec_plt2_ap_vld");
    sc_trace(mVcdFile, dec_plt1, "(port)dec_plt1");
    sc_trace(mVcdFile, dec_plt1_ap_vld, "(port)dec_plt1_ap_vld");
    sc_trace(mVcdFile, dec_al2, "(port)dec_al2");
    sc_trace(mVcdFile, dec_al2_ap_vld, "(port)dec_al2_ap_vld");
    sc_trace(mVcdFile, dec_al1, "(port)dec_al1");
    sc_trace(mVcdFile, dec_al1_ap_vld, "(port)dec_al1_ap_vld");
    sc_trace(mVcdFile, dec_nbl, "(port)dec_nbl");
    sc_trace(mVcdFile, dec_nbl_ap_vld, "(port)dec_nbl_ap_vld");
    sc_trace(mVcdFile, dec_rh2, "(port)dec_rh2");
    sc_trace(mVcdFile, dec_rh2_ap_vld, "(port)dec_rh2_ap_vld");
    sc_trace(mVcdFile, dec_rh1, "(port)dec_rh1");
    sc_trace(mVcdFile, dec_rh1_ap_vld, "(port)dec_rh1_ap_vld");
    sc_trace(mVcdFile, dec_ph2, "(port)dec_ph2");
    sc_trace(mVcdFile, dec_ph2_ap_vld, "(port)dec_ph2_ap_vld");
    sc_trace(mVcdFile, dec_ph1, "(port)dec_ph1");
    sc_trace(mVcdFile, dec_ph1_ap_vld, "(port)dec_ph1_ap_vld");
    sc_trace(mVcdFile, dec_ah2, "(port)dec_ah2");
    sc_trace(mVcdFile, dec_ah2_ap_vld, "(port)dec_ah2_ap_vld");
    sc_trace(mVcdFile, dec_ah1, "(port)dec_ah1");
    sc_trace(mVcdFile, dec_ah1_ap_vld, "(port)dec_ah1_ap_vld");
    sc_trace(mVcdFile, dec_nbh, "(port)dec_nbh");
    sc_trace(mVcdFile, dec_nbh_ap_vld, "(port)dec_nbh_ap_vld");
    sc_trace(mVcdFile, delay_dltx_address0, "(port)delay_dltx_address0");
    sc_trace(mVcdFile, delay_dltx_ce0, "(port)delay_dltx_ce0");
    sc_trace(mVcdFile, delay_dltx_we0, "(port)delay_dltx_we0");
    sc_trace(mVcdFile, delay_dltx_d0, "(port)delay_dltx_d0");
    sc_trace(mVcdFile, delay_dhx_address0, "(port)delay_dhx_address0");
    sc_trace(mVcdFile, delay_dhx_ce0, "(port)delay_dhx_ce0");
    sc_trace(mVcdFile, delay_dhx_we0, "(port)delay_dhx_we0");
    sc_trace(mVcdFile, delay_dhx_d0, "(port)delay_dhx_d0");
    sc_trace(mVcdFile, dec_del_dltx_address0, "(port)dec_del_dltx_address0");
    sc_trace(mVcdFile, dec_del_dltx_ce0, "(port)dec_del_dltx_ce0");
    sc_trace(mVcdFile, dec_del_dltx_we0, "(port)dec_del_dltx_we0");
    sc_trace(mVcdFile, dec_del_dltx_d0, "(port)dec_del_dltx_d0");
    sc_trace(mVcdFile, dec_del_dhx_address0, "(port)dec_del_dhx_address0");
    sc_trace(mVcdFile, dec_del_dhx_ce0, "(port)dec_del_dhx_ce0");
    sc_trace(mVcdFile, dec_del_dhx_we0, "(port)dec_del_dhx_we0");
    sc_trace(mVcdFile, dec_del_dhx_d0, "(port)dec_del_dhx_d0");
    sc_trace(mVcdFile, delay_bpl_address0, "(port)delay_bpl_address0");
    sc_trace(mVcdFile, delay_bpl_ce0, "(port)delay_bpl_ce0");
    sc_trace(mVcdFile, delay_bpl_we0, "(port)delay_bpl_we0");
    sc_trace(mVcdFile, delay_bpl_d0, "(port)delay_bpl_d0");
    sc_trace(mVcdFile, delay_bph_address0, "(port)delay_bph_address0");
    sc_trace(mVcdFile, delay_bph_ce0, "(port)delay_bph_ce0");
    sc_trace(mVcdFile, delay_bph_we0, "(port)delay_bph_we0");
    sc_trace(mVcdFile, delay_bph_d0, "(port)delay_bph_d0");
    sc_trace(mVcdFile, dec_del_bpl_address0, "(port)dec_del_bpl_address0");
    sc_trace(mVcdFile, dec_del_bpl_ce0, "(port)dec_del_bpl_ce0");
    sc_trace(mVcdFile, dec_del_bpl_we0, "(port)dec_del_bpl_we0");
    sc_trace(mVcdFile, dec_del_bpl_d0, "(port)dec_del_bpl_d0");
    sc_trace(mVcdFile, dec_del_bph_address0, "(port)dec_del_bph_address0");
    sc_trace(mVcdFile, dec_del_bph_ce0, "(port)dec_del_bph_ce0");
    sc_trace(mVcdFile, dec_del_bph_we0, "(port)dec_del_bph_we0");
    sc_trace(mVcdFile, dec_del_bph_d0, "(port)dec_del_bph_d0");
    sc_trace(mVcdFile, tqmf_address0, "(port)tqmf_address0");
    sc_trace(mVcdFile, tqmf_ce0, "(port)tqmf_ce0");
    sc_trace(mVcdFile, tqmf_we0, "(port)tqmf_we0");
    sc_trace(mVcdFile, tqmf_d0, "(port)tqmf_d0");
    sc_trace(mVcdFile, accumc_address0, "(port)accumc_address0");
    sc_trace(mVcdFile, accumc_ce0, "(port)accumc_ce0");
    sc_trace(mVcdFile, accumc_we0, "(port)accumc_we0");
    sc_trace(mVcdFile, accumc_d0, "(port)accumc_d0");
    sc_trace(mVcdFile, accumd_address0, "(port)accumd_address0");
    sc_trace(mVcdFile, accumd_ce0, "(port)accumd_ce0");
    sc_trace(mVcdFile, accumd_we0, "(port)accumd_we0");
    sc_trace(mVcdFile, accumd_d0, "(port)accumd_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_4_fu_505_p2, "i_4_fu_505_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_5_fu_525_p2, "i_5_fu_525_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_6_fu_545_p2, "i_6_fu_545_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_7_fu_562_p2, "i_7_fu_562_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_reg_263, "i_reg_263");
    sc_trace(mVcdFile, exitcond3_fu_499_p2, "exitcond3_fu_499_p2");
    sc_trace(mVcdFile, i_1_reg_274, "i_1_reg_274");
    sc_trace(mVcdFile, exitcond2_fu_519_p2, "exitcond2_fu_519_p2");
    sc_trace(mVcdFile, i_2_reg_285, "i_2_reg_285");
    sc_trace(mVcdFile, exitcond1_fu_539_p2, "exitcond1_fu_539_p2");
    sc_trace(mVcdFile, i_3_reg_296, "i_3_reg_296");
    sc_trace(mVcdFile, exitcond_fu_556_p2, "exitcond_fu_556_p2");
    sc_trace(mVcdFile, tmp_fu_511_p1, "tmp_fu_511_p1");
    sc_trace(mVcdFile, tmp_s_fu_531_p1, "tmp_s_fu_531_p1");
    sc_trace(mVcdFile, tmp_30_fu_551_p1, "tmp_30_fu_551_p1");
    sc_trace(mVcdFile, tmp_31_fu_568_p1, "tmp_31_fu_568_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

reset::~reset() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void reset::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(exitcond3_fu_499_p2.read(), ap_const_lv1_0))) {
        i_1_reg_274 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_519_p2.read()))) {
        i_1_reg_274 = i_5_fu_525_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_519_p2.read()))) {
        i_2_reg_285 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_539_p2.read()))) {
        i_2_reg_285 = i_6_fu_545_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_539_p2.read()))) {
        i_3_reg_296 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_556_p2.read()))) {
        i_3_reg_296 = i_7_fu_562_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_499_p2.read(), ap_const_lv1_0))) {
        i_reg_263 = i_4_fu_505_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_263 = ap_const_lv3_0;
    }
}

void reset::thread_accumc_address0() {
    accumc_address0 =  (sc_lv<4>) (tmp_31_fu_568_p1.read());
}

void reset::thread_accumc_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        accumc_ce0 = ap_const_logic_1;
    } else {
        accumc_ce0 = ap_const_logic_0;
    }
}

void reset::thread_accumc_d0() {
    accumc_d0 = ap_const_lv32_0;
}

void reset::thread_accumc_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_556_p2.read())))) {
        accumc_we0 = ap_const_logic_1;
    } else {
        accumc_we0 = ap_const_logic_0;
    }
}

void reset::thread_accumd_address0() {
    accumd_address0 =  (sc_lv<4>) (tmp_31_fu_568_p1.read());
}

void reset::thread_accumd_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        accumd_ce0 = ap_const_logic_1;
    } else {
        accumd_ce0 = ap_const_logic_0;
    }
}

void reset::thread_accumd_d0() {
    accumd_d0 = ap_const_lv32_0;
}

void reset::thread_accumd_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_556_p2.read())))) {
        accumd_we0 = ap_const_logic_1;
    } else {
        accumd_we0 = ap_const_logic_0;
    }
}

void reset::thread_ah1() {
    ah1 = ap_const_lv32_0;
}

void reset::thread_ah1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ah1_ap_vld = ap_const_logic_1;
    } else {
        ah1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_ah2() {
    ah2 = ap_const_lv32_0;
}

void reset::thread_ah2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ah2_ap_vld = ap_const_logic_1;
    } else {
        ah2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_al1() {
    al1 = ap_const_lv32_0;
}

void reset::thread_al1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        al1_ap_vld = ap_const_logic_1;
    } else {
        al1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_al2() {
    al2 = ap_const_lv32_0;
}

void reset::thread_al2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        al2_ap_vld = ap_const_logic_1;
    } else {
        al2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void reset::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void reset::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void reset::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void reset::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void reset::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_556_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void reset::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void reset::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_556_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void reset::thread_dec_ah1() {
    dec_ah1 = ap_const_lv32_0;
}

void reset::thread_dec_ah1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_ah1_ap_vld = ap_const_logic_1;
    } else {
        dec_ah1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_ah2() {
    dec_ah2 = ap_const_lv32_0;
}

void reset::thread_dec_ah2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_ah2_ap_vld = ap_const_logic_1;
    } else {
        dec_ah2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_al1() {
    dec_al1 = ap_const_lv32_0;
}

void reset::thread_dec_al1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_al1_ap_vld = ap_const_logic_1;
    } else {
        dec_al1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_al2() {
    dec_al2 = ap_const_lv32_0;
}

void reset::thread_dec_al2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_al2_ap_vld = ap_const_logic_1;
    } else {
        dec_al2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_del_bph_address0() {
    dec_del_bph_address0 =  (sc_lv<3>) (tmp_s_fu_531_p1.read());
}

void reset::thread_dec_del_bph_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        dec_del_bph_ce0 = ap_const_logic_1;
    } else {
        dec_del_bph_ce0 = ap_const_logic_0;
    }
}

void reset::thread_dec_del_bph_d0() {
    dec_del_bph_d0 = ap_const_lv32_0;
}

void reset::thread_dec_del_bph_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_519_p2.read())))) {
        dec_del_bph_we0 = ap_const_logic_1;
    } else {
        dec_del_bph_we0 = ap_const_logic_0;
    }
}

void reset::thread_dec_del_bpl_address0() {
    dec_del_bpl_address0 =  (sc_lv<3>) (tmp_s_fu_531_p1.read());
}

void reset::thread_dec_del_bpl_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        dec_del_bpl_ce0 = ap_const_logic_1;
    } else {
        dec_del_bpl_ce0 = ap_const_logic_0;
    }
}

void reset::thread_dec_del_bpl_d0() {
    dec_del_bpl_d0 = ap_const_lv32_0;
}

void reset::thread_dec_del_bpl_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_519_p2.read())))) {
        dec_del_bpl_we0 = ap_const_logic_1;
    } else {
        dec_del_bpl_we0 = ap_const_logic_0;
    }
}

void reset::thread_dec_del_dhx_address0() {
    dec_del_dhx_address0 =  (sc_lv<3>) (tmp_fu_511_p1.read());
}

void reset::thread_dec_del_dhx_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        dec_del_dhx_ce0 = ap_const_logic_1;
    } else {
        dec_del_dhx_ce0 = ap_const_logic_0;
    }
}

void reset::thread_dec_del_dhx_d0() {
    dec_del_dhx_d0 = ap_const_lv32_0;
}

void reset::thread_dec_del_dhx_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond3_fu_499_p2.read(), ap_const_lv1_0)))) {
        dec_del_dhx_we0 = ap_const_logic_1;
    } else {
        dec_del_dhx_we0 = ap_const_logic_0;
    }
}

void reset::thread_dec_del_dltx_address0() {
    dec_del_dltx_address0 =  (sc_lv<3>) (tmp_fu_511_p1.read());
}

void reset::thread_dec_del_dltx_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        dec_del_dltx_ce0 = ap_const_logic_1;
    } else {
        dec_del_dltx_ce0 = ap_const_logic_0;
    }
}

void reset::thread_dec_del_dltx_d0() {
    dec_del_dltx_d0 = ap_const_lv32_0;
}

void reset::thread_dec_del_dltx_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond3_fu_499_p2.read(), ap_const_lv1_0)))) {
        dec_del_dltx_we0 = ap_const_logic_1;
    } else {
        dec_del_dltx_we0 = ap_const_logic_0;
    }
}

void reset::thread_dec_deth() {
    dec_deth = ap_const_lv32_8;
}

void reset::thread_dec_deth_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_deth_ap_vld = ap_const_logic_1;
    } else {
        dec_deth_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_detl() {
    dec_detl = ap_const_lv32_20;
}

void reset::thread_dec_detl_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_detl_ap_vld = ap_const_logic_1;
    } else {
        dec_detl_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_nbh() {
    dec_nbh = ap_const_lv32_0;
}

void reset::thread_dec_nbh_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_nbh_ap_vld = ap_const_logic_1;
    } else {
        dec_nbh_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_nbl() {
    dec_nbl = ap_const_lv32_0;
}

void reset::thread_dec_nbl_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_nbl_ap_vld = ap_const_logic_1;
    } else {
        dec_nbl_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_ph1() {
    dec_ph1 = ap_const_lv32_0;
}

void reset::thread_dec_ph1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_ph1_ap_vld = ap_const_logic_1;
    } else {
        dec_ph1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_ph2() {
    dec_ph2 = ap_const_lv32_0;
}

void reset::thread_dec_ph2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_ph2_ap_vld = ap_const_logic_1;
    } else {
        dec_ph2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_plt1() {
    dec_plt1 = ap_const_lv32_0;
}

void reset::thread_dec_plt1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_plt1_ap_vld = ap_const_logic_1;
    } else {
        dec_plt1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_plt2() {
    dec_plt2 = ap_const_lv32_0;
}

void reset::thread_dec_plt2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_plt2_ap_vld = ap_const_logic_1;
    } else {
        dec_plt2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_rh1() {
    dec_rh1 = ap_const_lv32_0;
}

void reset::thread_dec_rh1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_rh1_ap_vld = ap_const_logic_1;
    } else {
        dec_rh1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_rh2() {
    dec_rh2 = ap_const_lv32_0;
}

void reset::thread_dec_rh2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_rh2_ap_vld = ap_const_logic_1;
    } else {
        dec_rh2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_rlt1() {
    dec_rlt1 = ap_const_lv32_0;
}

void reset::thread_dec_rlt1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_rlt1_ap_vld = ap_const_logic_1;
    } else {
        dec_rlt1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_dec_rlt2() {
    dec_rlt2 = ap_const_lv32_0;
}

void reset::thread_dec_rlt2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dec_rlt2_ap_vld = ap_const_logic_1;
    } else {
        dec_rlt2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_delay_bph_address0() {
    delay_bph_address0 =  (sc_lv<3>) (tmp_s_fu_531_p1.read());
}

void reset::thread_delay_bph_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        delay_bph_ce0 = ap_const_logic_1;
    } else {
        delay_bph_ce0 = ap_const_logic_0;
    }
}

void reset::thread_delay_bph_d0() {
    delay_bph_d0 = ap_const_lv32_0;
}

void reset::thread_delay_bph_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_519_p2.read())))) {
        delay_bph_we0 = ap_const_logic_1;
    } else {
        delay_bph_we0 = ap_const_logic_0;
    }
}

void reset::thread_delay_bpl_address0() {
    delay_bpl_address0 =  (sc_lv<3>) (tmp_s_fu_531_p1.read());
}

void reset::thread_delay_bpl_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        delay_bpl_ce0 = ap_const_logic_1;
    } else {
        delay_bpl_ce0 = ap_const_logic_0;
    }
}

void reset::thread_delay_bpl_d0() {
    delay_bpl_d0 = ap_const_lv32_0;
}

void reset::thread_delay_bpl_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_519_p2.read())))) {
        delay_bpl_we0 = ap_const_logic_1;
    } else {
        delay_bpl_we0 = ap_const_logic_0;
    }
}

void reset::thread_delay_dhx_address0() {
    delay_dhx_address0 =  (sc_lv<3>) (tmp_fu_511_p1.read());
}

void reset::thread_delay_dhx_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        delay_dhx_ce0 = ap_const_logic_1;
    } else {
        delay_dhx_ce0 = ap_const_logic_0;
    }
}

void reset::thread_delay_dhx_d0() {
    delay_dhx_d0 = ap_const_lv32_0;
}

void reset::thread_delay_dhx_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond3_fu_499_p2.read(), ap_const_lv1_0)))) {
        delay_dhx_we0 = ap_const_logic_1;
    } else {
        delay_dhx_we0 = ap_const_logic_0;
    }
}

void reset::thread_delay_dltx_address0() {
    delay_dltx_address0 =  (sc_lv<3>) (tmp_fu_511_p1.read());
}

void reset::thread_delay_dltx_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        delay_dltx_ce0 = ap_const_logic_1;
    } else {
        delay_dltx_ce0 = ap_const_logic_0;
    }
}

void reset::thread_delay_dltx_d0() {
    delay_dltx_d0 = ap_const_lv32_0;
}

void reset::thread_delay_dltx_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond3_fu_499_p2.read(), ap_const_lv1_0)))) {
        delay_dltx_we0 = ap_const_logic_1;
    } else {
        delay_dltx_we0 = ap_const_logic_0;
    }
}

void reset::thread_deth() {
    deth = ap_const_lv32_8;
}

void reset::thread_deth_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        deth_ap_vld = ap_const_logic_1;
    } else {
        deth_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_detl() {
    detl = ap_const_lv32_20;
}

void reset::thread_detl_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        detl_ap_vld = ap_const_logic_1;
    } else {
        detl_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_exitcond1_fu_539_p2() {
    exitcond1_fu_539_p2 = (!i_2_reg_285.read().is_01() || !ap_const_lv5_18.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_285.read() == ap_const_lv5_18);
}

void reset::thread_exitcond2_fu_519_p2() {
    exitcond2_fu_519_p2 = (!i_1_reg_274.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_274.read() == ap_const_lv3_6);
}

void reset::thread_exitcond3_fu_499_p2() {
    exitcond3_fu_499_p2 = (!i_reg_263.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_263.read() == ap_const_lv3_6);
}

void reset::thread_exitcond_fu_556_p2() {
    exitcond_fu_556_p2 = (!i_3_reg_296.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_296.read() == ap_const_lv4_B);
}

void reset::thread_i_4_fu_505_p2() {
    i_4_fu_505_p2 = (!i_reg_263.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_263.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void reset::thread_i_5_fu_525_p2() {
    i_5_fu_525_p2 = (!i_1_reg_274.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_274.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void reset::thread_i_6_fu_545_p2() {
    i_6_fu_545_p2 = (!i_2_reg_285.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_2_reg_285.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void reset::thread_i_7_fu_562_p2() {
    i_7_fu_562_p2 = (!i_3_reg_296.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_3_reg_296.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void reset::thread_nbh() {
    nbh = ap_const_lv32_0;
}

void reset::thread_nbh_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        nbh_ap_vld = ap_const_logic_1;
    } else {
        nbh_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_nbl() {
    nbl = ap_const_lv32_0;
}

void reset::thread_nbl_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        nbl_ap_vld = ap_const_logic_1;
    } else {
        nbl_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_ph1() {
    ph1 = ap_const_lv32_0;
}

void reset::thread_ph1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ph1_ap_vld = ap_const_logic_1;
    } else {
        ph1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_ph2() {
    ph2 = ap_const_lv32_0;
}

void reset::thread_ph2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ph2_ap_vld = ap_const_logic_1;
    } else {
        ph2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_plt1() {
    plt1 = ap_const_lv32_0;
}

void reset::thread_plt1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        plt1_ap_vld = ap_const_logic_1;
    } else {
        plt1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_plt2() {
    plt2 = ap_const_lv32_0;
}

void reset::thread_plt2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        plt2_ap_vld = ap_const_logic_1;
    } else {
        plt2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_rh1() {
    rh1 = ap_const_lv32_0;
}

void reset::thread_rh1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        rh1_ap_vld = ap_const_logic_1;
    } else {
        rh1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_rh2() {
    rh2 = ap_const_lv32_0;
}

void reset::thread_rh2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        rh2_ap_vld = ap_const_logic_1;
    } else {
        rh2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_rlt1() {
    rlt1 = ap_const_lv32_0;
}

void reset::thread_rlt1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        rlt1_ap_vld = ap_const_logic_1;
    } else {
        rlt1_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_rlt2() {
    rlt2 = ap_const_lv32_0;
}

void reset::thread_rlt2_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        rlt2_ap_vld = ap_const_logic_1;
    } else {
        rlt2_ap_vld = ap_const_logic_0;
    }
}

void reset::thread_tmp_30_fu_551_p1() {
    tmp_30_fu_551_p1 = esl_zext<64,5>(i_2_reg_285.read());
}

void reset::thread_tmp_31_fu_568_p1() {
    tmp_31_fu_568_p1 = esl_zext<64,4>(i_3_reg_296.read());
}

void reset::thread_tmp_fu_511_p1() {
    tmp_fu_511_p1 = esl_zext<64,3>(i_reg_263.read());
}

void reset::thread_tmp_s_fu_531_p1() {
    tmp_s_fu_531_p1 = esl_zext<64,3>(i_1_reg_274.read());
}

void reset::thread_tqmf_address0() {
    tqmf_address0 =  (sc_lv<5>) (tmp_30_fu_551_p1.read());
}

void reset::thread_tqmf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        tqmf_ce0 = ap_const_logic_1;
    } else {
        tqmf_ce0 = ap_const_logic_0;
    }
}

void reset::thread_tqmf_d0() {
    tqmf_d0 = ap_const_lv32_0;
}

void reset::thread_tqmf_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_539_p2.read())))) {
        tqmf_we0 = ap_const_logic_1;
    } else {
        tqmf_we0 = ap_const_logic_0;
    }
}

void reset::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond3_fu_499_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_519_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_539_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_556_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

